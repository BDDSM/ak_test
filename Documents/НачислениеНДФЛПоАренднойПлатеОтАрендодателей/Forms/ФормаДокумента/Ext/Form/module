
Перем мТаблицаЗаявок;
Перем мТекущийПериод;
Перем мВалютаРегл;
Перем СписокТТсОшибочнойПлощадью;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

/////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьБыстрыйОтбор()
	
	мОтборСтрок = ЭлементыФормы.НачислениеАренды.ОтборСтрок;
	мОтборСтрок.Сбросить();
	
	Если НЕ ЗначениеЗаполнено(ОтборЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	//
	ЭлементОтбора = мОтборСтрок.Найти(ОтборВид); 
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = мОтборСтрок.Добавить(ОтборВид);
	КонецЕсли;
		
	ЭлементОтбора.Установить(ОтборЗначение);
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	ЭтоПеременнаяЧасть = (ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть);
	
	мКолонки = ЭлементыФормы.НачислениеАренды.Колонки;
	мКолонки.ДатаСФ.Видимость 		= ЭтоПеременнаяЧасть;
	мКолонки.НомерСФ.Видимость 		= ЭтоПеременнаяЧасть;
	мКолонки.ДатаАкта.Видимость 	= ЭтоПеременнаяЧасть;
	мКолонки.НомерАкта.Видимость 	= ЭтоПеременнаяЧасть;
	мКолонки.СуммаБух.Видимость 	= ЭтоПеременнаяЧасть;
	//мКолонки.ВыгружатьВБухгалтерию.Видимость = ЭтоПеременнаяЧасть;
	
	//+++АК GEYV 02.07.2015
	ВидимостьСчета = (ЭтотОбъект.Дата >= '20150501');
	ЭлементыФормы.ПрочаяЗадолженность.Колонки.СчетДт.Видимость = ВидимостьСчета;
	//---АК
	
	//+++АК sils 17.08.2017 ИП-00014584
	//Если ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть и РольДоступна("АК_РаботаСАрендойМСФО") Тогда
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.МСФО.Видимость = Истина;
	//Иначе
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.МСФО.Видимость = Ложь;
	//КонецЕсли;
	//---АК
	
	//++++ АК AZAP 21.02.2017 ИП-00014747
	//Если НЕ РольДоступна("АК_РаботаСАрендойМСФО") ИЛИ ТипАренднойПлаты <> Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
	//	Если ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Найти("РасчитатьДляМСФО") <> Неопределено Тогда
	//		ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.РасчитатьДляМСФО);
	//	КонецЕсли;
	//	Если ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Найти("НастройкиРасчетаАрендыМСФО") <> Неопределено Тогда
	//		ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.НастройкиРасчетаАрендыМСФО);
	//	КонецЕсли;
	//	ЭлементыФормы.НачислениеАренды.Колонки.АК_ВидАлгоритма.Видимость = Ложь;
	//	ЭлементыФормы.НачислениеАренды.Колонки.АК_РасчетнаяСумма.Видимость = Ложь;
	//	ЭлементыФормы.НачислениеАренды.Колонки.АК_РучнаяКорректировкаРасчетнойСуммы.Видимость = Ложь;
	//ИначеЕсли РольДоступна("АК_РаботаСАрендойМСФО") И ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
	//	Если ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Найти("РасчитатьДляМСФО") = Неопределено Тогда
	//		ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Добавить("РасчитатьДляМСФО", ТипКнопкиКоманднойПанели.Действие, "Расчитать для МСФО", Новый Действие("КоманднаяПанельНачислениеАрендыРасчитатьДляМСФО"));
	//	КонецЕсли;
	//	Если ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Найти("НастройкиРасчетаАрендыМСФО") = Неопределено Тогда
	//		ЭлементыФормы.КоманднаяПанельНачислениеАренды.Кнопки.Добавить("НастройкиРасчетаАрендыМСФО", ТипКнопкиКоманднойПанели.Действие, "Настройки расчета аренды МСФО", Новый Действие("КоманднаяПанельНачислениеАрендыНастройкиРасчетаАрендыМСФО"));
	//	КонецЕсли;
	//	ЭлементыФормы.НачислениеАренды.Колонки.АК_ВидАлгоритма.Видимость = Истина;
	//	ЭлементыФормы.НачислениеАренды.Колонки.АК_РасчетнаяСумма.Видимость = Истина;
	//	ЭлементыФормы.НачислениеАренды.Колонки.АК_РучнаяКорректировкаРасчетнойСуммы.Видимость = Истина;
	//КонецЕсли;
	//---- АК AZAP
		
КонецПроцедуры

Функция ОчиститьНачисленияАренды(Обязательно = Ложь)
	
	Если ЭтотОбъект.НачислениеАренды.Количество() > 0 Тогда
		Если Обязательно Тогда
			Если Вопрос("Табличная часть <Начисление НДФЛ по аренде> будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Вопрос("Очистить табличную часть <Начисление НДФЛ по аренде>?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСтрокиСБухДанными = Ложь;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.НачислениеАренды Цикл
		Если СтрокаТЧ.ВыгружатьВБухгалтерию
				//++++ АК AZAP 28.02.2017 ИП-00014747
				ИЛИ (НЕ РольДоступна("АК_РаботаСАрендойМСФО") И СтрокаТЧ.АК_РасчетнаяСумма > 0)
				//---- АК AZAP
				ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБух)
				ИЛИ ЗначениеЗаполнено(СтрокаТЧ.НомерАкта)
				ИЛИ ЗначениеЗаполнено(СтрокаТЧ.ДатаАкта)
				ИЛИ ЗначениеЗаполнено(СтрокаТЧ.НомерСФ)
				ИЛИ ЗначениеЗаполнено(СтрокаТЧ.ДатаСФ) Тогда
			ЕстьСтрокиСБухДанными = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЕстьСтрокиСБухДанными Тогда
		Предупреждение("Табличная часть оставлена без изменений, поскольку в ней есть строки, с внесенными бухгалтерскими данными!");
		Возврат ?(Обязательно, Ложь, Истина);
	КонецЕсли;
		
	ЭтотОбъект.НачислениеАренды.Очистить();
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьСтрокиНачислениеАренды()
	
	// получение данных для заполнения
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"			, НачалоМесяца(ЭтотОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаСравненияЛистовУчета", Мин(КонецМесяца(ЭтотОбъект.ПериодРегистрации), ТекущаяДата()));
	Запрос.УстановитьПараметр("ФормаОплаты"				, ЭтотОбъект.ФормаОплаты);
	Запрос.УстановитьПараметр("ТипАренднойПлаты"		, ?(ЭтотОбъект.ТипАренднойПлаты=Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть,
	Перечисления.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ,?(ЭтотОбъект.ТипАренднойПлаты=Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть,
	Перечисления.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ,Перечисления.ТипыАренднойПлаты.ПустаяСсылка())));
	Запрос.УстановитьПараметр("СтавкаНДС"				, ЭтотОбъект.СтавкаНДС);
	Запрос.УстановитьПараметр("ЦФО"						, Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18")); //Управление исполнительное
	Запрос.УстановитьПараметр("ВалютаРегл"				, мВалютаРегл);
	Запрос.УстановитьПараметр("ДатаДокумента"			, ЭтотОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ПОМЕСТИТЬ Договоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.Аренда)
	|	И ДоговорыКонтрагентов.ОбъектАренды <> ЗНАЧЕНИЕ(Справочник.ОбъектыАренды.ПустаяСсылка)
	|	И ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И ДоговорыКонтрагентов.УплачиватьНДФЛЗаКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(РасторжениеДоговораАренды.ДоговорКонтрагента, ВложенныйЗапросСрокиДействия.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ЕСТЬNULL(РасторжениеДоговораАренды.ДатаОкончанияДоговора, ВложенныйЗапросСрокиДействия.ДатаОкончанияДоговора)) КАК ДатаОкончанияДоговора
	|ПОМЕСТИТЬ ДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДополнительноеСоглашение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		МАКСИМУМ(ДополнительноеСоглашение.ДатаОкончанияДоговора) КАК ДатаОкончанияДоговора
	|	ИЗ
	|		Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	|	ГДЕ
	|		ДополнительноеСоглашение.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДополнительноеСоглашение.ДоговорКонтрагента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаключениеДоговораАренды.ДоговорКонтрагента,
	|		МАКСИМУМ(ЗаключениеДоговораАренды.ДатаОкончанияДоговора)
	|	ИЗ
	|		Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	|	ГДЕ
	|		ЗаключениеДоговораАренды.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаключениеДоговораАренды.ДоговорКонтрагента) КАК ВложенныйЗапросСрокиДействия
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.РасторжениеДоговораАренды КАК РасторжениеДоговораАренды
	|		ПО ВложенныйЗапросСрокиДействия.ДоговорКонтрагента = РасторжениеДоговораАренды.ДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(РасторжениеДоговораАренды.ДоговорКонтрагента, ВложенныйЗапросСрокиДействия.ДоговорКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЛистУчета.Дата) КАК Дата,
	|	ЛистУчета.ТорговаяТочка
	|ПОМЕСТИТЬ ЛистыУчета
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	ЛистУчета.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛистУчета.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.ДатаОкончанияДоговора,
	|	ВложенныйЗапрос.ДатаПоследнегоЛистаУчета,
	|	ВложенныйЗапрос.ТорговаяТочка,
	|	РАЗНОСТЬДАТ(ВложенныйЗапрос.ДатаПоследнегоЛистаУчета, &ДатаСравненияЛистовУчета, ДЕНЬ) КАК СрокПоследнегоЛистаУчета
	|ПОМЕСТИТЬ ДоговорыПоСрокамИспользования
	|ИЗ
	|	(ВЫБРАТЬ
	|		Договоры.Ссылка КАК Договор,
	|		ЕСТЬNULL(ДС.ДатаОкончанияДоговора, Договоры.Ссылка.СрокДействия) КАК ДатаОкончанияДоговора,
	|		ЛистыУчета.Дата КАК ДатаПоследнегоЛистаУчета,
	|		Договоры.Ссылка.ОбъектАренды.СтруктурнаяЕдиница КАК ТорговаяТочка
	|	ИЗ
	|		Договоры КАК Договоры
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДС КАК ДС
	|			ПО Договоры.Ссылка = ДС.ДоговорКонтрагента
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЛистыУчета КАК ЛистыУчета
	|			ПО Договоры.Ссылка.ОбъектАренды.СтруктурнаяЕдиница = ЛистыУчета.ТорговаяТочка) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Период) КАК Период,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор КАК Договор,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ПериодыПланируемыхПлатежейПредварительно
	|ИЗ
	|	РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды.СрезПоследних КАК ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата, МЕСЯЦ) = &НачалоПериода
	|	И (ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем)
	|			ИЛИ ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Регистратор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийДоговоровАренды.САрендодателем))
	|	И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор.УплачиватьНДФЛЗаКонтрагента
	|	И (ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|			ИЛИ ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно.Период,
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно.Договор,
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно.Дата
	|ПОМЕСТИТЬ ВТ_ПериодыПланируемыхПлатежей
	|ИЗ
	|	ВТ_ПериодыПланируемыхПлатежейПредварительно КАК ВТ_ПериодыПланируемыхПлатежейПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоговоровАренды.СрезПоследних КАК СтатусыДоговоровАрендыСрезПоследних
	|		ПО ВТ_ПериодыПланируемыхПлатежейПредварительно.Договор = СтатусыДоговоровАрендыСрезПоследних.Договор
	|			И ВТ_ПериодыПланируемыхПлатежейПредварительно.Дата >= СтатусыДоговоровАрендыСрезПоследних.ДатаНачалаАренды
	|			И ВТ_ПериодыПланируемыхПлатежейПредварительно.Дата <= СтатусыДоговоровАрендыСрезПоследних.ДатаОкончанияАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Контрагент,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор КАК Договор,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор.ОбъектАренды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	&ЦФО КАК ЦФО,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Организация,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.СтавкаНДС,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Валюта,
	|	СУММА(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Сумма) КАК Сумма,
	|	СУММА(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.СуммаВал) КАК СуммаВал
	|ПОМЕСТИТЬ ПредварительныйРасчет
	|ИЗ
	|	РегистрСведений.ПланируемыеПлатежиПоДоговорамАренды.СрезПоследних КАК ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПланируемыхПлатежей КАК ВТ_ПериодыПланируемыхПлатежей
	|		ПО ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Период = ВТ_ПериодыПланируемыхПлатежей.Период
	|			И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор = ВТ_ПериодыПланируемыхПлатежей.Договор
	|			И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Дата = ВТ_ПериодыПланируемыхПлатежей.Дата
	|ГДЕ
	|	(ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ФормаОплаты = &ФормаОплаты
	|			ИЛИ &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты = &ТипАренднойПлаты
	|			ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПустаяСсылка))
	|	И ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор.УплачиватьНДФЛЗаКонтрагента
	|	И (ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|			ИЛИ ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Контрагент,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.ТипАренднойПлаты,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Договор.ОбъектАренды.СтруктурнаяЕдиница,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Организация,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.СтавкаНДС,
	|	ПланируемыеПлатежиПоДоговорамАрендыСрезПоследних.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	КОНЕЦ КАК ТипАренднойПлаты,
	|	РасходИзБанка.ДатаОплаты
	|ПОМЕСТИТЬ ВТ_ДатыОплатПредварительно
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	(РасходИзБанка.Проведен
	|				И РасходИзБанка.Оплачено
	|				И НАЧАЛОПЕРИОДА(РасходИзБанка.ПериодРегистрации, МЕСЯЦ) = &НачалоПериода
	|				И &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичные)
	|			ИЛИ &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|				И (РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
	|						И &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|					ИЛИ РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
	|						И &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|					ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПустаяСсылка)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Ссылка.Дата, ДЕНЬ)
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Проведен
	|	И НАЧАЛОПЕРИОДА(РасходИзКассы.ПериодРегистрации, МЕСЯЦ) = &НачалоПериода
	|	И (&ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличные)
	|			ИЛИ &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПостояннойЧастиАрендыАрендодателю)
	|				И &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|			ИЛИ РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПеременнойЧастиАрендыАрендодателю)
	|				И &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|			ИЛИ &ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыОплатПредварительно.ДоговорКонтрагента,
	|	ВТ_ДатыОплатПредварительно.ТипАренднойПлаты,
	|	МАКСИМУМ(ВТ_ДатыОплатПредварительно.ДатаОплаты) КАК ДатаОплаты
	|ПОМЕСТИТЬ ВТ_ДатыОплат
	|ИЗ
	|	ВТ_ДатыОплатПредварительно КАК ВТ_ДатыОплатПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДатыОплатПредварительно.ДоговорКонтрагента,
	|	ВТ_ДатыОплатПредварительно.ТипАренднойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныйРасчет.Контрагент,
	|	ПредварительныйРасчет.Договор,
	|	ПредварительныйРасчет.СтруктурнаяЕдиница,
	|	ПредварительныйРасчет.ЦФО,
	|	ВЫБОР
	|		КОГДА ПредварительныйРасчет.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧастьНДФЛ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|		КОГДА ПредварительныйРасчет.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧастьНДФЛ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПостояннаяЧасть)
	|	КОНЕЦ КАК ТипАренднойПлаты,
	|	ПредварительныйРасчет.Организация,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	ПредварительныйРасчет.Сумма,
	|	ПредварительныйРасчет.СуммаВал,
	|	ВЫБОР
	|		КОГДА ПредварительныйРасчет.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				И (КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта <> &ВалютаРегл
	|					ИЛИ КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.КурсЦБ)
	|						И КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКурсаВалюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьРасчетыВВалюте,
	|	ДоговорыПоСрокамИспользования.ДатаОкончанияДоговора,
	|	ДоговорыПоСрокамИспользования.ДатаПоследнегоЛистаУчета,
	|	ДоговорыПоСрокамИспользования.СрокПоследнегоЛистаУчета,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.СпособРасчета,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Валюта2,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Курс,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Кратность,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.Коэффициент,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.НижняяГраница,
	|	КурсыВалютДляРасчетовПоАрендеСрезПоследних.ВерхняяГраница,
	|	ЕСТЬNULL(ВТ_ДатыОплат.ДатаОплаты, &ДатаДокумента) КАК ДатаОплаты
	|ИЗ
	|	ПредварительныйРасчет КАК ПредварительныйРасчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоговорыПоСрокамИспользования КАК ДоговорыПоСрокамИспользования
	|		ПО ПредварительныйРасчет.СтруктурнаяЕдиница = ДоговорыПоСрокамИспользования.ТорговаяТочка
	|			И ПредварительныйРасчет.Договор = ДоговорыПоСрокамИспользования.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовПоАренде.СрезПоследних(КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ), ) КАК КурсыВалютДляРасчетовПоАрендеСрезПоследних
	|		ПО ПредварительныйРасчет.Договор = КурсыВалютДляРасчетовПоАрендеСрезПоследних.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыОплат КАК ВТ_ДатыОплат
	|		ПО ПредварительныйРасчет.Договор = ВТ_ДатыОплат.ДоговорКонтрагента
	|			И ПредварительныйРасчет.ТипАренднойПлаты = ВТ_ДатыОплат.ТипАренднойПлаты";
				   
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		Если СтрокаТаблицы.ЕстьРасчетыВВалюте Тогда
			КурсВалюты = ПроцедурыНачисления.ПолучитьКурсВалютыПоДоговору(СтрокаТаблицы.ДатаОплаты, СтрокаТаблицы).Курс;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаВал * КурсВалюты;
		КонецЕсли;			
	КонецЦикла;
	
	ТаблицаРезультат.Свернуть("Контрагент, Договор, СтруктурнаяЕдиница, ЦФО, ТипАренднойПлаты, Организация, СтавкаНДС, ДатаОкончанияДоговора, ДатаПоследнегоЛистаУчета, СрокПоследнегоЛистаУчета", "Сумма, ЕстьРасчетыВВалюте"); 
	
	// заполнение
	ЭтотОбъект.НачислениеАренды.Очистить();
	ТаблицаПрочаяЗадолженность = ЭтотОбъект.ПрочаяЗадолженность.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		//Если СтрокаТаблицы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
			НоваяСтрока = ЭтотОбъект.НачислениеАренды.Добавить();
			НоваяСтрока.ПериодРегистрации = ЭтотОбъект.ПериодРегистрации;
		//Иначе
		//	НоваяСтрока = ТаблицаПрочаяЗадолженность.Добавить();			
		//КонецЕсли;			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма);
	КонецЦикла;
	
	//Если ТаблицаПрочаяЗадолженность.Количество() > 0 Тогда
	//	Если ЭтотОбъект.ПрочаяЗадолженность.Количество() > 0
	//			И Вопрос("Табличная часть <Прочая задолженность> непустая. Очистить перед добавлением новых строк?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//		ЭтотОбъект.ПрочаяЗадолженность.Очистить();
	//	КонецЕсли;
	//	
	//	ЭтотОбъект.ПрочаяЗадолженность.Загрузить(ТаблицаПрочаяЗадолженность);
	//КонецЕсли;
	
	Для каждого СтрокаТЧ Из ЭтотОбъект.НачислениеАренды Цикл
		Если СтрокаТЧ.СрокПоследнегоЛистаУчета > 5 Тогда
			СтрокаТЧ.Комментарий = Формат(СтрокаТЧ.ПериодРегистрации, "ДФ='ММMM yyyy'") + " аренда: " + СтрокаТЧ.СтруктурнаяЕдиница;
	    КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДатаОкончанияДоговора)
				И КонецМесяца(СтрокаТЧ.ДатаОкончанияДоговора) < КонецМесяца(СтрокаТЧ.ПериодРегистрации) Тогда
			СтрокаТЧ.Комментарий = СтрокаТЧ.Комментарий + "Договор не действует: " + СтрокаТЧ.СтруктурнаяЕдиница;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(Кнопка)
	
	Если ЭтотОбъект.НачислениеАренды.Количество() > 0 Тогда
		Если Вопрос("Табличная часть <Начисление аренды> непустая. Перед заполнением она будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;		
		ЭтотОбъект.НачислениеАренды.Очистить();
	КонецЕсли;
	
	//
	ЗаполнитьСтрокиНачислениеАренды();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЗаявок()

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФормаОплаты"		, ЭтотОбъект.ФормаОплаты);							  
	Запрос.УстановитьПараметр("СписокДоговоров"	, ЭтотОбъект.НачислениеАренды.ВыгрузитьКолонку("Договор"));							  
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеСредств.Ссылка,
	|	ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеСредств.НачалоПериодаАренды КАК ПериодРегистрации,
	|	ЗаявкаНаРасходованиеСредств.ТипАренднойПлаты
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.ФормаОплаты = &ФормаОплаты
	|	И ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента В(&СписокДоговоров)
	|	И НЕ ЗаявкаНаРасходованиеСредств.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаУслугиМатериалы.Ссылка,
	|	ЗаявкаНаУслугиМатериалы.ДоговорКонтрагента,
	|	ЗаявкаНаУслугиМатериалы.НачалоПериодаАренды,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалы.ДоговорКонтрагента В(&СписокДоговоров)
	|	И НЕ ЗаявкаНаУслугиМатериалы.ПометкаУдаления";
						  
	//
	мТаблицаЗаявок = Запрос.Выполнить().Выгрузить();

КонецПроцедуры


/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ПериодРегистрации) Тогда
		ЭтотОбъект.ПериодРегистрации = НачалоМесяца(ЭтотОбъект.ПериодРегистрации);
	КонецЕсли;
	
	Если ЭтотОбъект.ПериодРегистрации = мТекущийПериод Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОчиститьНачисленияАренды() Тогда
		ЭтотОбъект.ПериодРегистрации = мТекущийПериод;
		Возврат;
	КонецЕсли;
	
	мТекущийПериод = ЭтотОбъект.ПериодРегистрации;
	
КонецПроцедуры

Процедура ФормаОплатыПриИзменении(Элемент)
	
	ЗаполнитьТаблицуЗаявок();
	
КонецПроцедуры

Процедура ОтборЗначениеПриИзменении(Элемент)
	
	УстановитьБыстрыйОтбор();
	
КонецПроцедуры

Процедура ОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтборВид = "Контрагент"  Тогда
		ОтборЗначение = Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли	ОтборВид = "СтруктурнаяЕдиница" Тогда
		ОтборЗначение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;

	УстановитьБыстрыйОтбор();
	
КонецПроцедуры

Процедура ОтборВидПриИзменении(Элемент)

	Если ОтборВид = "Контрагент"
			И ТипЗнч(ОтборЗначение) <> Тип("СправочникСсылка.Контрагенты") Тогда
		ОтборЗначение = Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли ОтборВид = "СтруктурнаяЕдиница"
			И ТипЗнч(ОтборЗначение) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ОтборЗначение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
		
	УстановитьБыстрыйОтбор();
	
КонецПроцедуры

Процедура ОтборВидОчистка(Элемент, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры


Процедура ОткрытьЗаявку(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.НачислениеАренды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ДоговорКонтрагента, ТипАренднойПлаты, ПериодРегистрации", ТекущиеДанные.Договор, ТекущиеДанные.ТипАренднойПлаты, ТекущиеДанные.ПериодРегистрации);
	СтрокиЗаявок = мТаблицаЗаявок.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиЗаявок.Количество() > 0 Тогда
		ФормаЗаявки = СтрокиЗаявок[0].Ссылка.ПолучитьФорму();
		ФормаЗаявки.Открыть();
		Возврат;
	КонецЕсли;
	
	Режим = Новый СписокЗначений;
	Режим.Добавить("Заявка на услуги");
	Режим.Добавить("Заявка на расход ДС");
	Режим.Добавить("Отмена");
	Текст = "ru = ""Создать заявку? "";"
			+ " en = ""Sozdat zayavku?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	
	Если Ответ = "Заявка на услуги" Тогда
		//Заявка = Документы.ЗаявкаНаУслугиМатериалы.СоздатьДокумент();
		
		Форма = ПолучитьФорму("Документ.ЗаявкаНаУслугиМатериалы.Форма.ФормаДокумента");
        Заявка = Форма.Объект;

		Заявка.Организация 			= ТекущиеДанные.Организация;;
		//Заявка.СчетОрганизации = Заявка.Организация.ОсновнойБанковскийСчет;
		Заявка.Дата 				= ТекущаяДата();
		Заявка.ДоговорКонтрагента 	= ТекущиеДанные.Договор;
		Заявка.Контрагент 			= ТекущиеДанные.Контрагент;
		Заявка.СуммаДокумента 		= ТекущиеДанные.Сумма;
		Заявка.ДокументОснование 	= ЭтотОбъект.Ссылка;
		//Заявка.УИН_СтрокиОснования = ВыборкаДДС.УИН_Строки;
		//Заявка.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Заявка.СтатьяДДС 			= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010");
		Заявка.НачалоПериодаАренды 	= НачалоМесяца(ТекущиеДанные.ПериодРегистрации);
		//Заявка.ТипАренднойПлаты		= ТекущиеДанные.ТипАренднойПлаты;
		Если ТекущиеДанные.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
			Заявка.ВидОперации		= Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю;
		ИначеЕсли ТекущиеДанные.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			Заявка.ВидОперации		= Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю;
		КонецЕсли;
		Заявка.ЭтоЗаявкаПоАренде = Истина;
		Заявка.ЦФО 					= ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ТекущиеДанные.СтруктурнаяЕдиница, Заявка.Дата);
		//Заявка.СтруктурнаяЕдиница = ТекущиеДанные.СтруктурнаяЕдиница;
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Заявка.СтатьяДДС);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Заявка.Дата, Заявка.СтатьяДДС);
		//---АК SUVV
	    Если МассивСчетов.Количество() = 1 Тогда
			Заявка.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Иначе
			Заявка.СчетУчетаРасчетов = Планысчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;
	    	
		Если ЗначениеЗаполнено(Заявка.Контрагент) Тогда
			Заявка.ВариантРасчетаНДС = ?(Заявка.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС,
											Перечисления.ВариантыРасчетаНДС.БезНДС,
											Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		КонецЕсли;

		Заявка.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;

		
		
		СтрокаОплат = Заявка.Оплата.Добавить();
		//СтрокаОплат.Аванс=ВыборкаДДС.Аванс;
		СтрокаОплат.СуммаОплаты = ТекущиеДанные.Сумма;
		//СтрокаОплат.НазначениеПлатежа = ?(ВыборкаДДС.Аванс, "Аванс ", "") + ВыборкаДДС.Услуга + " " + 
		//	?(ЗначениеЗаполнено(ВыборкаДДС.НомерСчета), "Счет №" + ВыборкаДДС.НомерСчета + " от " +
		//	Формат(ВыборкаДДС.ДатаСчета, "ДФ=dd.MM.yyyy"), "") + " " + ТекТорговаяТочка;
		//Заявка.ОчередностьПлатежа = 5;
		//ТекДата = Заявка.Дата + 86400;
		//Пока ДеньНедели(ТекДата)<>2
		//	И ДеньНедели(ТекДата)<>4 Цикл
		//	ТекДата = ТекДата + 86400;
		//КонецЦикла; 
		СтрокаОплат.ДатаПлатежа = Заявка.Дата;
		
		
		СтрокаУслуг = Заявка.Услуги.Добавить();
		СтрокаУслуг.СтруктурнаяЕдиница	= ТекущиеДанные.СтруктурнаяЕдиница;
		СтрокаУслуг.Номенклатура		= Справочники.Номенклатура.НайтиПоНаименованию("Аренда помещений");;
		СтрокаУслуг.Количество			= 1;
		СтрокаУслуг.Цена				= ТекущиеДанные.Сумма;
		СтрокаУслуг.Сумма				= ТекущиеДанные.Сумма;
		СтрокаУслуг.СтавкаНДС			= ТекущиеДанные.СтавкаНДС;
		УчитыватьНДС 		= Истина;
		СуммаВключаетНДС 	= (Заявка.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
		СтрокаУслуг.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаУслуг.Сумма,
													   УчитыватьНДС, СуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаУслуг.СтавкаНДС));
         // заявки по аренде считаем подтвержденными автоматически
	    
		СтрокаУслуг.КоличествоПолучено 	= СтрокаУслуг.Количество;
		СтрокаУслуг.ПодтвердилПользователь	= Заявка.Ответственный;
		СтрокаУслуг.ПодтвердилДата			= ТекущаяДата();
		СтрокаУслуг.Подтверждено			= Истина;
		
	    Форма.Открыть();
		
	ИначеЕсли Ответ = "Заявка на расход ДС" Тогда	
		
		//
		ЗаявкаОбъект = Документы.ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
		ФормаЗаявки = ЗаявкаОбъект.ПолучитьФорму();
		
		ЗаявкаОбъект.Дата = ТекущаяДата();
		
		ЗаявкаОбъект.ФормаОплаты 	= ЭтотОбъект.ФормаОплаты;
		ЗаявкаОбъект.СуммаДокумента = ТекущиеДанные.Сумма;
		
		ЗаявкаОбъект.Организация 	= ТекущиеДанные.Организация;
		ФормаЗаявки.ОрганизацияПриИзменении(ФормаЗаявки.ЭлементыФормы.Организация);
		
		ЗаявкаОбъект.Контрагент 	= ТекущиеДанные.Контрагент;
		ФормаЗаявки.КонтрагентПриИзменении(ФормаЗаявки.ЭлементыФормы.Контрагент);
		
		ЗаявкаОбъект.НазначениеПлатежа 	= "";
		ЗаявкаОбъект.ДоговорКонтрагента = ТекущиеДанные.Договор;
		ФормаЗаявки.ДоговорКонтрагентаПриИзменении(ФормаЗаявки.ЭлементыФормы.ДоговорКонтрагента);
		
		ЗаявкаОбъект.ТипАренднойПлаты 				= ЭтотОбъект.ТипАренднойПлаты;
		ЗаявкаОбъект.НачалоПериодаАренды 			= НачалоМесяца(ЭтотОбъект.ПериодРегистрации);
		ЗаявкаОбъект.КонецПериодаАренды 			= КонецМесяца(ЭтотОбъект.ПериодРегистрации);
		ЗаявкаОбъект.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010");
		
		НоваяСтрока = ЗаявкаОбъект.ТорговыеТочки.Добавить();
		
		НоваяСтрока.ТорговаяТочка = ТекущиеДанные.СтруктурнаяЕдиница;
		ФормаЗаявки.ЭлементыФормы.ТорговыеТочки.ТекущаяСтрока = НоваяСтрока;
		ФормаЗаявки.ТорговыеТочкиТорговаяТочкаПриИзменении(Неопределено);
		
		НоваяСтрока.Период 	= НачалоМесяца(ЭтотОбъект.ПериодРегистрации);
		
		НоваяСтрока.Сумма 	= ТекущиеДанные.Сумма;
		
		ФормаЗаявки.Открыть();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, Ссылка, ЭтотОбъект);

КонецПроцедуры

Процедура ЗаполнитьНачислениеАренды(Кнопка)
	
	Если ОчиститьНачисленияАренды(Истина) Тогда
		
		ЗаполнитьСтрокиНачислениеАренды();
		
	КонецЕсли;
	
КонецПроцедуры


Процедура НачислениеАрендыОрганизацияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.НачислениеАренды.ТекущиеДанные;	
	
	Если ТекДанные.Договор.Организация <> ТекДанные.Организация Тогда
		Сообщить("Организация в договоре, отличается от указанной в строке!");
		ТекДанные.Договор = Неопределено;
	КонецЕсли; 

КонецПроцедуры

Процедура НачислениеАрендыТипАренднойПлатыПриИзменении(Элемент)
	
	ЗаполнитьТаблицуЗаявок();
	
КонецПроцедуры

Процедура НачислениеАрендыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		Возврат;
	КонецЕсли;	
	//ДанныеСтроки.Комментарий="";
	
	ОформлениеСтроки.Ячейки.СрокПоследнегоЛистаУчета.ЦветФона 	= WebЦвета.Белый;
	ОформлениеСтроки.Ячейки.ДатаОкончанияДоговора.ЦветФона 		= WebЦвета.Белый;
	ОформлениеСтроки.Ячейки.Договор.ЦветФона 					= WebЦвета.Белый;
	Если ДанныеСтроки.СрокПоследнегоЛистаУчета > 5 Тогда
		//ДанныеСтроки.Комментарий=Формат(ПериодРегистрации,"ДФ='ММMM yyyy'")+" аренда: "+ДанныеСтроки.СтруктурнаяЕдиница;
        ОформлениеСтроки.Ячейки.СрокПоследнегоЛистаУчета.ЦветФона = WebЦвета.ТусклоРозовый;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончанияДоговора)
			И ДанныеСтроки.ДатаОкончанияДоговора < КонецМесяца(ЭтотОбъект.ПериодРегистрации) Тогда
		//ДанныеСтроки.Комментарий=ДанныеСтроки.Комментарий+"Договор не действует. ";
        ОформлениеСтроки.Ячейки.ДатаОкончанияДоговора.ЦветФона = WebЦвета.ТусклоРозовый;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Договор)  Тогда
		//ДанныеСтроки.Комментарий=ДанныеСтроки.Комментарий+"Договор не действует. ";
        ОформлениеСтроки.Ячейки.Договор.ЦветФона = WebЦвета.ТусклоРозовый;
	КонецЕсли;
	
	Если ДанныеСтроки.СуммаБух = 0 Тогда
		ОформлениеСтроки.Ячейки.СуммаБух.УстановитьТекст(Формат(ДанныеСтроки.Сумма, "ЧДЦ=2"));
	КонецЕсли;
	
	//ОформлениеСтроки.Ячейки.ВыгружатьВБухгалтерию.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаАкта) ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаСФ);
	
	//Если ДанныеСтроки.Договор.ТипДоговора = Перечисления.ТипыДоговоровСПоставщиком.Аренда И ДанныеСтроки.ДатаОкончанияДоговора < Дата Тогда
	//	ДанныеСтроки.Комментарий=ДанныеСтроки.Комментарий+"Договор не действует. ";
	//	ОформлениеСтроки.Ячейки.ДатаОкончанияДоговора.цветФона = WebЦвета.ТусклоРозовый;
	//КонецЕсли;
КонецПроцедуры

Процедура НачислениеАрендыПриПолученииДанных(Элемент, ОформленияСтрок)

	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		Если ТекДанные.ЕстьРасчетыВВалюте Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
			
		СтруктураОтбора = Новый Структура("ДоговорКонтрагента, ТипАренднойПлаты, ПериодРегистрации", ТекДанные.Договор, ТекДанные.ТипАренднойПлаты, ТекДанные.ПериодРегистрации);
		СтрокиЗаявок = мТаблицаЗаявок.НайтиСтроки(СтруктураОтбора );
		Если СтрокиЗаявок.Количество() > 0 Тогда
			ОформлениеСтроки.Ячейки.Сумма.ЦветФона 		= WebЦвета.Оранжевый;
			ОформлениеСтроки.Ячейки.СуммаБух.ЦветФона 	= WebЦвета.Оранжевый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НачислениеАрендыПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть
			И Колонка.Имя = "ВыгружатьВБухгалтерию"
			И ТекущиеДанные.ВыгружатьВБухгалтерию
			И (НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаСФ)
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаАкта)) Тогда
			 
		Сообщить("Нельзя выгружать в бухгалтерию без установленных  даты акта и даты счета-фактуры!");
		ТекущиеДанные.ВыгружатьВБухгалтерию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачислениеАрендыКонтрагентПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.НачислениеАренды.ТекущиеДанные;
	
	Если ТекДанные.Договор.Пустая() Тогда
		ТекДанные.Договор = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ТекДанные.Организация, ТекДанные.Контрагент,
																				?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
КонецПроцедуры

Процедура НачислениеАрендыДоговорПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.НачислениеАренды.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Договор)
			И ТекДанные.Договор.ТипДоговора <> Перечисления.ТипыДоговоровСПоставщиком.Аренда Тогда
		Сообщить("Можно указывать только договоры с признаком ""Аренда""!");
		ТекДанные.Договор = Неопределено;
	КонецЕсли;
	
	Если ТекДанные.Договор.Организация <> ТекДанные.Организация Тогда
		Сообщить("Организация в договоре, отличается от указанной в строке!");
		ТекДанные.Договор = Неопределено;
	КонецЕсли; 
	
	//
	ТекДанные.СтруктурнаяЕдиница 		= ТекДанные.Договор.ОбъектАренды.СтруктурнаяЕдиница;
	ТекДанные.ДатаОкончанияДоговора		= Дата(1, 1, 1);
	ТекДанные.ДатаПоследнегоЛистаУчета	= Дата(1, 1, 1);
	ТекДанные.СрокПоследнегоЛистаУчета	= 0;
	
	Если ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецПериода"	, Мин(КонецМесяца(ПериодРегистрации), ТекущаяДата()));
		Запрос.УстановитьПараметр("Договор"			, ТекДанные.Договор);
		Запрос.УстановитьПараметр("ТорговаяТочка"	, ТекДанные.Договор.ОбъектАренды.СтруктурнаяЕдиница);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ПОМЕСТИТЬ Договоры
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.Аренда)
		|	И ДоговорыКонтрагентов.ОбъектАренды <> ЗНАЧЕНИЕ(Справочник.ОбъектыАренды.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.Ссылка = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(РасторжениеДоговораАренды.ДоговорКонтрагента, ВложенныйЗапросСрокиДействия.ДоговорКонтрагента) КАК ДоговорКонтрагента,
		|	МАКСИМУМ(ЕСТЬNULL(РасторжениеДоговораАренды.ДатаОкончанияДоговора, ВложенныйЗапросСрокиДействия.ДатаОкончанияДоговора)) КАК ДатаОкончанияДоговора
		|ПОМЕСТИТЬ ДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДополнительноеСоглашение.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		МАКСИМУМ(ДополнительноеСоглашение.ДатаОкончанияДоговора) КАК ДатаОкончанияДоговора
		|	ИЗ
		|		Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДополнительноеСоглашение.ДоговорКонтрагента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаключениеДоговораАренды.ДоговорКонтрагента,
		|		МАКСИМУМ(ЗаключениеДоговораАренды.ДатаОкончанияДоговора)
		|	ИЗ
		|		Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаключениеДоговораАренды.ДоговорКонтрагента) КАК ВложенныйЗапросСрокиДействия
		|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.РасторжениеДоговораАренды КАК РасторжениеДоговораАренды
		|		ПО ВложенныйЗапросСрокиДействия.ДоговорКонтрагента = РасторжениеДоговораАренды.ДоговорКонтрагента
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(РасторжениеДоговораАренды.ДоговорКонтрагента, ВложенныйЗапросСрокиДействия.ДоговорКонтрагента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЛистУчета.Дата) КАК Дата,
		|	ЛистУчета.ТорговаяТочка
		|ПОМЕСТИТЬ ЛистыУчета
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛистУчета.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Договор,
		|	ВложенныйЗапрос.ДатаОкончанияДоговора,
		|	ВложенныйЗапрос.ДатаПоследнегоЛистаУчета,
		|	ВложенныйЗапрос.ТорговаяТочка,
		|	РАЗНОСТЬДАТ(ВложенныйЗапрос.ДатаПоследнегоЛистаУчета, &КонецПериода, ДЕНЬ) КАК СрокПоследнегоЛистаУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		Договоры.Ссылка КАК Договор,
		|		ЕСТЬNULL(ДС.ДатаОкончанияДоговора, Договоры.Ссылка.СрокДействия) КАК ДатаОкончанияДоговора,
		|		ЛистыУчета.Дата КАК ДатаПоследнегоЛистаУчета,
		|		ЛистыУчета.ТорговаяТочка КАК ТорговаяТочка
		|	ИЗ
		|		Договоры КАК Договоры
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДС КАК ДС
		|			ПО Договоры.Ссылка = ДС.ДоговорКонтрагента
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЛистыУчета КАК ЛистыУчета
		|			ПО Договоры.Ссылка.ОбъектАренды.СтруктурнаяЕдиница = ЛистыУчета.ТорговаяТочка) КАК ВложенныйЗапрос";
		Выборка = Запрос.Выполнить().Выбрать();
		
		//
		Если Выборка.Следующий() Тогда
			ТекДанные.ДатаОкончанияДоговора		= Выборка.ДатаОкончанияДоговора;
			ТекДанные.ДатаПоследнегоЛистаУчета	= Выборка.ДатаПоследнегоЛистаУчета;
			ТекДанные.СрокПоследнегоЛистаУчета	= Выборка.СрокПоследнегоЛистаУчета;
			Если ТекДанные.СрокПоследнегоЛистаУчета > 5 Тогда
				ТекДанные.Комментарий = Формат(ЭтотОбъект.ПериодРегистрации, "ДФ='ММMM yyyy'") + " аренда: " + ТекДанные.СтруктурнаяЕдиница;
		    КонецЕсли;
			Если ЗначениеЗаполнено(ТекДанные.ДатаОкончанияДоговора)
					И КонецМесяца(ТекДанные.ДатаОкончанияДоговора) < КонецМесяца(ЭтотОбъект.ПериодРегистрации) Тогда
				ТекДанные.Комментарий = ТекДанные.Комментарий + "Договор не действует. ";
		  	КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	//
	ЗаполнитьТаблицуЗаявок();
	
КонецПроцедуры

Процедура НачислениеАрендыСуммаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеОтчетамиПереопределяемый.ОткрытьОтчетПоАренднымПлатежам(ЭлементыФормы.НачислениеАренды.ТекущиеДанные.СтруктурнаяЕдиница);
	
КонецПроцедуры

Процедура НачислениеАрендыИзменениеРеквизитаВЗакрытомПериоде(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовоеЗначение = Элемент.Значение;
	
	Если ВвестиЗначение(НовоеЗначение, "Введите новое значение")
			И Элемент.Значение <> НовоеЗначение Тогда
		Элемент.Значение = НовоеЗначение;
		
		Попытка 
			ОбменДанными.Загрузка = Истина;
			Записать(РежимЗаписиДокумента.Запись);
			ОбменДанными.Загрузка = Ложь;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры


Процедура НачислениеДепозитаКонтрагентПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.НачислениеДепозита.ТекущиеДанные;
	
	Если ТекДанные.Договор.Пустая() Тогда
		ТекДанные.Договор = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ТекДанные.Организация, ТекДанные.Контрагент,
																				?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
КонецПроцедуры

Процедура НачислениеДепозитаДоговорПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.НачислениеДепозита.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТекДанные.СтруктурнаяЕдиница = ТекДанные.Договор.ОбъектАренды.СтруктурнаяЕдиница;
	
КонецПроцедуры


Процедура ПрочаяЗадолженностьПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		СуммаНДСПоСтроке = Окр(УчетНДС.РассчитатьСуммуНДС(ТекДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекДанные.Договор.СтавкаНДС)), 2);
		
		ОформлениеСтроки.Ячейки.СтавкаНДС.УстановитьТекст(ТекДанные.Договор.СтавкаНДС);
		ОформлениеСтроки.Ячейки.СуммаНДС.УстановитьТекст(Формат(СуммаНДСПоСтроке, "ЧДЦ=2"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочаяЗадолженностьКонтрагентПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ПрочаяЗадолженность.ТекущиеДанные;
	
	Если ТекДанные.Договор.Пустая() Тогда
		ТекДанные.Договор = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ТекДанные.Организация, ТекДанные.Контрагент,
																				?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочаяЗадолженностьДоговорПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ПрочаяЗадолженность.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТекДанные.СтруктурнаяЕдиница = ТекДанные.Договор.ОбъектАренды.СтруктурнаяЕдиница;
	
КонецПроцедуры


Процедура ТипАренднойПлатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ОчиститьНачисленияАренды() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипАренднойПлатыПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ТипАренднойПлатыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодРегистрации) Тогда
			ЭтотОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
	ЭтоБухгалтер = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.БухгалтерПоАренде, Ложь);
	
	Если ЭтоБухгалтер Тогда
	
		Для каждого ЭлементФормы Из ЭлементыФормы Цикл
			УстановилиТолькоПросмотр = Ложь;
			
			Попытка
				ЭлементФормы.ТолькоПросмотр = Истина;			
				УстановилиТолькоПросмотр = Истина;
			Исключение
			КонецПопытки; 

			Если НЕ УстановилиТолькоПросмотр Тогда
				Попытка
					ЭлементФормы.Доступность = Ложь;			
				Исключение
				КонецПопытки; 
			КонецЕсли;
			
		КонецЦикла; 		
		
		ЭлементыФормы.ОсновнаяПанель.Доступность = Истина;
		Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			Если Страница.Имя <> "НачислениеАренды" Тогда
				Страница.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыФормы.НачислениеАренды.ТолькоПросмотр = Ложь;
		
		ЭлементыФормы.ОсновныеДействияФормы.Доступность = Истина;
		Для Каждого Кнопка Из ЭлементыФормы.ОсновныеДействияФормы.Кнопки Цикл
			Если Кнопка.Имя <> "ОсновныеДействияФормыСохранить"
					И Кнопка.Имя <> "ОсновныеДействияФормыЗакрыть" Тогда
				Кнопка.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	Для Каждого Колонка Из ЭлементыФормы.НачислениеАренды.Колонки Цикл
		Если Колонка.Имя = "НомерАкта" ИЛИ
		         Колонка.Имя = "ДатаАкта" ИЛИ			
		         Колонка.Имя = "НомерСФ" ИЛИ							 
		         Колонка.Имя = "ДатаСФ" ИЛИ
		         Колонка.Имя = "СуммаБух" ИЛИ
				 Колонка.Имя = "ВыгружатьВБухгалтерию" Тогда					 
				 
			Если НЕ ЭтоБухгалтер Тогда
				 //Колонка.ТолькоПросмотр = Истина;
			КонецЕсли;
		ИначеЕсли ЭтоБухгалтер Тогда
			Колонка.ТолькоПросмотр = Истина;
		КонецЕсли;					
	КонецЦикла;
	
	ЗаполнитьТаблицуЗаявок();
	
	УстановитьВидимость();
	
	мТекущийПериод = ЭтотОбъект.ПериодРегистрации;  	
	
	УстановитьДоступностьФормы();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.НачислениеАренды Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПериодРегистрации) Тогда
			СтрокаТЧ.ПериодРегистрации = ЭтотОбъект.ПериодРегистрации;
		КонецЕсли; 	
	КонецЦикла;  
	
	ТекущаяТТ = Неопределено;
	Если ДополнительныеСвойства.Свойство("ТТ", ТекущаяТТ) Тогда
		СтрокаАренды = НачислениеАренды.Найти(ТекущаяТТ);
		Если СтрокаАренды <> Неопределено Тогда
			ЭлементыФормы.НачислениеАренды.ТекущаяСтрока = СтрокаАренды;
		КонецЕсли; 
	КонецЕсли; 
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура УстановитьДоступностьФормы()
	
	ЕстьПравоЗапрещатьРедактирование = РольДоступна("ПолныеПрава")
										ИЛИ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗапрещатьРедактироватьДокументовНачислениеАренды, Ложь);

	ЭлементыФормы.ЗапретитьРедактирование.Доступность = ЕстьПравоЗапрещатьРедактирование;
	
	Если НЕ ЕстьПравоЗапрещатьРедактирование Тогда
		ЭтаФорма.ТолькоПросмотр = ЗапретитьРедактирование;
	КонецЕсли;
	
	Если УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗапрещатьРедактироватьДокументовНачислениеАренды, Ложь) Тогда
		//ЭлементыФормы.ОсновнаяПанель.Доступность = Ложь;
		//ЭлементыФормы.Организация.Доступность = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Действие6.Доступность = Ложь;
		ЭлементыФормы.Дата.Доступность 				= Ложь;
		ЭлементыФормы.СтавкаНДС.Доступность 		= Ложь;
		ЭлементыФормы.ФормаОплаты.Доступность 		= Ложь;
		ЭлементыФормы.ТипАренднойПлаты.Доступность 	= Ложь;
		ЭлементыФормы.ПериодРегистрации.Доступность = Ложь;
		
		Для Каждого Колонка Из ЭлементыФормы.НачислениеАренды.Колонки Цикл
			Если Колонка.Имя = "СтавкаНДС" Тогда
				Продолжить;	
			КонецЕсли;		
			Колонка.ТолькоПросмотр = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапретитьРедактированиеПриИзменении(Элемент)
	
	УстановитьДоступностьФормы();	
	
КонецПроцедуры

//+++АК GEYV 02.07.2015
Процедура ПрочаяЗадолженностьСчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Финансовый.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
	
	ФормаВыбора.Отбор.Ссылка.Использование 	= Истина;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.ВИерархии;
	ФормаВыбора.Отбор.Ссылка.Значение 		= ПланыСчетов.Финансовый.ЗатратыДляРаспределения;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ПрочаяЗадолженностьСтатьяДРПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ПрочаяЗадолженность.ТекущиеДанные;
	ТекСтрока.СчетДт = ОбщегоНазначения.ПолучитьСчет44ДляДр(ТекСтрока.СтатьяДР);
	
	ПрочаяЗадолженностьСчетДтПриИзменении(Элемент);

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПрочаяЗадолженностьСчетДтПриИзменении(Элемент)
	
	//Отказ = Ложь;
	//
	//ТекСтрока = ЭлементыФормы.ПрочаяЗадолженность.ТекущиеДанные;
	//
	//ОбщегоНазначения.ПроверитьСчет44ДляДр(Дата,ТекСтрока.СчетДт,ТекСтрока.СтатьяДР,Отказ);
	
КонецПроцедуры

Процедура КоманднаяПанельНачислениеАрендыЗаявкаНаУслуги(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры
//---АК

//++++ АК AZAP 23.08.2017 ИП-00014747
Функция ПолучитьАрендуЗаПериод(НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("НачалоПериода"		, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"		, КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(НачисленияПоДоговорамАренды.Дата, МЕСЯЦ) КАК Период,
	|	НачисленияПоДоговорамАренды.Организация,
	|	НачисленияПоДоговорамАренды.Контрагент,
	|	НачисленияПоДоговорамАренды.Договор,
	|	НачисленияПоДоговорамАренды.ОбъектАренды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НачисленияПоДоговорамАренды.ОбъектАренды.ЗначениеХарактеристики КАК Площадь,
	|	СУММА(НачисленияПоДоговорамАренды.Сумма) КАК Сумма
	|ИЗ
	|	РегистрСведений.НачисленияПоДоговорамАренды КАК НачисленияПоДоговорамАренды
	|ГДЕ
	|	НачисленияПоДоговорамАренды.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияПоДоговорамАренды.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамАренды.Организация,
	|	НачисленияПоДоговорамАренды.Контрагент,
	|	НачисленияПоДоговорамАренды.Договор,
	|	НачисленияПоДоговорамАренды.ОбъектАренды.СтруктурнаяЕдиница,
	|	НачисленияПоДоговорамАренды.ОбъектАренды.ЗначениеХарактеристики,
	|	НАЧАЛОПЕРИОДА(НачисленияПоДоговорамАренды.Дата, МЕСЯЦ)";
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;
	
	времТаб = Новый ТаблицаЗначений;
	времТаб.Колонки.Добавить("Период");
	
	н = 0; СуммаЗаМетрВсего = 0;
	Для каждого Строка Из Результат Цикл	
		Если (Строка.ТТТорговаяПлощадь = 0 ИЛИ Строка.ТТТорговаяПлощадь = 1)
			И СписокТТсОшибочнойПлощадью.НайтиПоЗначению(Строка.ТТ) = Неопределено Тогда
			Сообщить("У объекта аренды " + Строка.ТТ + " площадь " + Строка.ТТТорговаяПлощадь + ". Его стоимость аренды не будет учитываться.");
			СписокТТсОшибочнойПлощадью.Добавить(Строка.ТТ);
		ИначеЕсли Строка.ТТТорговаяПлощадь > 1 И Строка.Сумма > 0 Тогда
			новСтр = времТаб.Добавить();
			новСтр.Период = Строка.Период;
			СуммаЗаМетрВсего = СуммаЗаМетрВсего + Строка.Сумма / Строка.ТТТорговаяПлощадь;
			н = н + 1;
		КонецЕсли;		
	КонецЦикла;
	
	мСтруктура = Новый Структура;
	времТаб.Свернуть("Период");
	мСтруктура.Вставить("КоличествоПериодов"	, времТаб.Количество());
	мСтруктура.Вставить("СуммаЗаМетр"			, ?(н = 0, 0, СуммаЗаМетрВсего / н));	//средняя сумма за метр
	
	Возврат мСтруктура;
	
КонецФункции

Функция ПолучитьДанныеАренды(ДанныеАренды, НачалоПериода, КонецПериода, Организация, Контрагент = Неопределено, Договор = Неопределено, СтруктурнаяЕдиница = Неопределено)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Организация);
	Если Контрагент <> Неопределено Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если Договор <> Неопределено Тогда
		Отбор.Вставить("Договор", Договор);
	КонецЕсли;
	Если СтруктурнаяЕдиница <> Неопределено Тогда
		Отбор.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	КонецЕсли;
	Строки = ДанныеАренды.НайтиСтроки(Отбор);
	
	СуммаЗаМетрВсего = 0; н = 0;
	времТаб = Новый ТаблицаЗначений;
	времТаб.Колонки.Добавить("Период");
	Для каждого СтрокаТекДанных Из Строки Цикл
		Если СтрокаТекДанных.Период >= НачалоПериода И СтрокаТекДанных.Период <= КонецПериода Тогда
			
			Если (СтрокаТекДанных.Площадь = 0 ИЛИ СтрокаТекДанных.Площадь = 1)
				И СписокТТсОшибочнойПлощадью.НайтиПоЗначению(СтрокаТекДанных.СтруктурнаяЕдиница) = Неопределено Тогда
				Сообщить("У объекта аренды " + СтрокаТекДанных.СтруктурнаяЕдиница + " площадь " + СтрокаТекДанных.Площадь + ". Его стоимость аренды не будет учитываться.");
				СписокТТсОшибочнойПлощадью.Добавить(СтрокаТекДанных.СтруктурнаяЕдиница);
			ИначеЕсли СтрокаТекДанных.Площадь > 1 И СтрокаТекДанных.Сумма > 0 Тогда
				новСтр = времТаб.Добавить();
				новСтр.Период = СтрокаТекДанных.Период;
				СуммаЗаМетрВсего = СуммаЗаМетрВсего + СтрокаТекДанных.Сумма / СтрокаТекДанных.Площадь;
				н = н + 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	времТаб.Свернуть("Период");
	мСтруктура = Новый Структура;
	мСтруктура.Вставить("КоличествоПериодов"	, времТаб.Количество());
	мСтруктура.Вставить("СуммаЗаМетр"			, ?(н = 0, 0, СуммаЗаМетрВсего / н));	//средняя сумма за метр

    Возврат мСтруктура;
	
КонецФункции

Процедура КоманднаяПанельНачислениеАрендыРасчитатьДляМСФО(Кнопка)
	
	Если НЕ ЭтотОбъект.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
		Возврат;
	КонецЕсли;
	
	//добавляем недостающие структурные единицы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеАренды.Организация,
		|	НачислениеАренды.Контрагент,
		|	НачислениеАренды.Договор,
		|	НачислениеАренды.СтруктурнаяЕдиница,
		|	НачислениеАренды.ПериодРегистрации
		|ПОМЕСТИТЬ НачислениеАренды
		|ИЗ
		|	&ВнешняяТабНачислениеАренды КАК НачислениеАренды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Свертка.Организация,
		|	Свертка.Контрагент,
		|	Свертка.ДоговорКонтрагента,
		|	Свертка.ОбъектАренды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТЧ.Ссылка.Организация КАК Организация,
		|		ТЧ.Ссылка.Контрагент КАК Контрагент,
		|		ТЧ.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ТЧ.Ссылка.ОбъектАренды КАК ОбъектАренды,
		|		НачислениеАренды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|	ИЗ
		|		Документ.ЗаключениеДоговораАренды.ПеременнаяЧастьАренднойПлаты КАК ТЧ
		|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАренды КАК НачислениеАренды
		|			ПО ТЧ.Ссылка.Организация = НачислениеАренды.Организация
		|				И ТЧ.Ссылка.Контрагент = НачислениеАренды.Контрагент
		|				И ТЧ.Ссылка.ДоговорКонтрагента = НачислениеАренды.Договор
		|				И ТЧ.Ссылка.ОбъектАренды.СтруктурнаяЕдиница = НачислениеАренды.СтруктурнаяЕдиница
		|				И (НачислениеАренды.ПериодРегистрации = &Дата)
		|	ГДЕ
		|		ТЧ.СпособНачисления = &СпособНачисления
		|		И ТЧ.Ссылка.ДатаОкончанияДоговора >= &Дата) КАК Свертка
		|ГДЕ
		|	Свертка.СтруктурнаяЕдиница ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Дата", ПериодРегистрации);
	Запрос.УстановитьПараметр("СпособНачисления", Справочники.СпособыНачисленияАренднойПлаты.НайтиПоКоду("000000002"));	//за объект по счету
	Запрос.УстановитьПараметр("ВнешняяТабНачислениеАренды", ЭтотОбъект.НачислениеАренды.Выгрузить(, "Организация, Контрагент, Договор, СтруктурнаяЕдиница, ПериодРегистрации"));
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЦФОДляПодстановки = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18");	//Управление исполнительное
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрока = ЭтотОбъект.НачислениеАренды.Добавить();
		НовСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
		НовСтрока.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		НовСтрока.Договор = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
		НовСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
		НовСтрока.ЦФО = ЦФОДляПодстановки;
		НовСтрока.ПериодРегистрации = ПериодРегистрации;
		НовСтрока.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
		НовСтрока.Комментарий = "дозаполнено";
	КонецЦикла;
	
	//
	МинКолвоМесяцев 		= Справочники.АК_НастройкиРасчетаАрендыПоМСФО.ОбщийПериод.МинКоличествоМесяцев;
	МинКолвоТочкаМесяцев 	= Справочники.АК_НастройкиРасчетаАрендыПоМСФО.ТочкаМесяцы.МинКоличествоМесяцев;
	
	массивПериодов = ЭтотОбъект.НачислениеАренды.ВыгрузитьКолонку("ПериодРегистрации");
	МаксПериод = Дата('20990101'); МинПериод = Дата('19700101');
	Для каждого сПериод Из массивПериодов Цикл
		МаксПериод = Макс(МаксПериод, сПериод);
		МинПериод = Мин(МинПериод, сПериод);
	КонецЦикла;
	
	КонецПериода = НачалоМесяца(МаксПериод) - 1;
	ДанныеАренды = ПолучитьАрендуЗаПериод(ДобавитьМесяц(МинПериод, -МинКолвоМесяцев), КонецПериода);
	
	Для каждого СтрокаТЧ Из ЭтотОбъект.НачислениеАренды Цикл
		
		Если СтрокаТЧ.АК_РучнаяКорректировкаРасчетнойСуммы
			ИЛИ СтрокаТЧ.ПериодРегистрации <> ЭтотОбъект.ПериодРегистрации Тогда
			Продолжить;
		КонецЕсли;
		КонецПериода = НачалоМесяца(СтрокаТЧ.ПериодРегистрации) - 1;
		
		ДанныеАренды2 = ПолучитьДанныеАренды(ДанныеАренды, ДобавитьМесяц(КонецПериода, -МинКолвоМесяцев) , КонецПериода, СтрокаТЧ.Организация, СтрокаТЧ.Контрагент, СтрокаТЧ.Договор, СтрокаТЧ.СтруктурнаяЕдиница);
		СтрокаТЧ.АК_ВидАлгоритма = "средняя по ТТ";
		Если ДанныеАренды2.КоличествоПериодов < МинКолвоТочкаМесяцев Тогда
			ДанныеАренды2 = ПолучитьДанныеАренды(ДанныеАренды, ДобавитьМесяц(КонецПериода, -МинКолвоМесяцев) , КонецПериода, СтрокаТЧ.Организация, СтрокаТЧ.Контрагент, СтрокаТЧ.Договор);
			СтрокаТЧ.АК_ВидАлгоритма = "средняя по Контрагенту";
			Если ДанныеАренды2.КоличествоПериодов < МинКолвоТочкаМесяцев Тогда
				ДанныеАренды2 = ПолучитьДанныеАренды(ДанныеАренды, ДобавитьМесяц(КонецПериода, -МинКолвоМесяцев) , КонецПериода, СтрокаТЧ.Организация);
				СтрокаТЧ.АК_ВидАлгоритма = "средняя по всем";
			КонецЕсли;
		КонецЕсли;
		СтрокаТЧ.АК_РасчетнаяСумма = ДанныеАренды2.СуммаЗаМетр * СтрокаТЧ.СтруктурнаяЕдиница.ТорговаяПлощадь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельНачислениеАрендыНастройкиРасчетаАрендыМСФО(Кнопка)
	
	Справочники.АК_НастройкиРасчетаАрендыПоМСФО.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура НачислениеАрендыПередУдалением(Элемент, Отказ)
	Если НЕ РольДоступна("АК_РаботаСАрендойМСФО") И Элемент.ТекущиеДанные.АК_РасчетнаяСумма > 0 Тогда
		Отказ = Истина;
		Предупреждение("Строку нельзя удалять, поскольку в ней есть строки, с внесенными бухгалтерскими данными!");
	КонецЕсли;
КонецПроцедуры
//---- АК AZAP

//+++АК sils 15.08.2017 ИП-00014584
Процедура РасчетСтимулов()
	МСФО1 = МСФО.Выгрузить();
	ТекКол = МСФО1.Количество();
	Пока ТекКол <> 0 Цикл
		стр = МСФО1[ТекКол - 1];
		Если не стр.РучнаяКорректировкаСуммы Тогда
			МСФО1.Удалить(стр);
		КонецЕсли;
		ТекКол = ТекКол - 1;
	КонецЦикла;
	
	МСФО.Очистить();
	// Находим действующие договора
	ТЗ_Договоров = ПолучитьСписокДействующихДоговоров();
	// Находим действующие доп.соглашения со стимулами
	ТЗ_ДопСоглашений = ПолучитьСписокДействующихДопСоглашений();
	// Находим графики списания
	ТЗ_Графики = ПолучитьГрафикиСтимулов(ТЗ_ДопСоглашений);
	
	Для каждого стр из ТЗ_Договоров Цикл
		// Ищем в графиках нашу строчку
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", стр.Контрагент);
		Отбор.Вставить("Договор", стр.Договор);
		Отбор.Вставить("Документ", стр.Документ);
		НайденныеДопСоглашения = ТЗ_ДопСоглашений.НайтиСтроки(Отбор);
		
		Для каждого стр1 из НайденныеДопСоглашения Цикл
			Отбор1 = Новый Структура;
			Отбор1.Вставить("ДопСоглашение", стр1.ДопСоглашение);
			Если КонецМесяца(стр.ДатаОкончания) <> КонецМесяца(ПериодРегистрации) Тогда
				Отбор1.Вставить("ПериодНачисления", НачалоМесяца(ПериодРегистрации));
			КонецЕсли;
			НайденныйГрафик = ТЗ_Графики.НайтиСтроки(Отбор1);
			
			Отбор2 = Новый Структура;
			Отбор2.Вставить("ДопСоглашение", стр1.ДопСоглашение);
			Для каждого стр2 из НайденныйГрафик Цикл
				Отбор2.Вставить("ПериодРегистрации", стр2.ПериодНачисления);
				НайденныйГрафик1 = МСФО1.НайтиСтроки(Отбор2);
				Если НайденныйГрафик1.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(МСФО.Добавить(), НайденныйГрафик1[0]);
					Продолжить;
				КонецЕсли;
				
				НовСтр = МСФО.Добавить();
				НовСтр.Организация = стр.ПоследнийДокумент.Организация;
				НовСтр.Контрагент = стр.Контрагент;
				НовСтр.Договор = стр.Договор;
				НовСтр.СтруктурнаяЕдиница = стр.СтруктурнаяЕдиница;
				НовСтр.ДопСоглашение = стр1.ДопСоглашение;
				НовСтр.Сумма = стр2.Сумма;
				НовСтр.ПериодРегистрации = стр2.ПериодНачисления;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//+++АК sils 15.08.2017 ИП-00014584
Функция ПолучитьСписокДействующихДоговоров()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("Договор");
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("СтруктурнаяЕдиница");
	ТЗ.Колонки.Добавить("ДатаНачала");
	ТЗ.Колонки.Добавить("ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ПОМЕСТИТЬ Договоры
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.Аренда)
	               |	И ДоговорыКонтрагентов.ОбъектАренды <> ЗНАЧЕНИЕ(Справочник.ОбъектыАренды.ПустаяСсылка)
	               |	И ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ВложенныйЗапрос.ДоговорКонтрагента, ВложенныйЗапросСрокиДействия.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	               |	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.ДатаОкончанияДоговора, ВложенныйЗапросСрокиДействия.ДатаОкончанияДоговора)) КАК ДатаОкончанияДоговора,
	               |	ЕСТЬNULL(ВложенныйЗапрос.ДокументОснование, ВложенныйЗапросСрокиДействия.Документ) КАК Документ
	               |ПОМЕСТИТЬ ДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДополнительноеСоглашение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		МАКСИМУМ(ДополнительноеСоглашение.ДатаОкончанияДоговора) КАК ДатаОкончанияДоговора,
	               |		ДополнительноеСоглашение.ДокументОснование КАК Документ
	               |	ИЗ
	               |		Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |	ГДЕ
	               |		ДополнительноеСоглашение.Проведен = ИСТИНА
	               |		И ДополнительноеСоглашение.Дата < &Дата2
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДополнительноеСоглашение.ДоговорКонтрагента,
	               |		ДополнительноеСоглашение.ДокументОснование
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЗаключениеДоговораАренды.ДоговорКонтрагента,
	               |		МАКСИМУМ(ЗаключениеДоговораАренды.ДатаОкончанияДоговора),
	               |		ЗаключениеДоговораАренды.Ссылка
	               |	ИЗ
	               |		Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	               |	ГДЕ
	               |		ЗаключениеДоговораАренды.Проведен = ИСТИНА
	               |		И ЗаключениеДоговораАренды.Дата < &Дата2
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаключениеДоговораАренды.ДоговорКонтрагента,
	               |		ЗаключениеДоговораАренды.Ссылка) КАК ВложенныйЗапросСрокиДействия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РасторжениеДоговораАренды.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |			РасторжениеДоговораАренды.ДатаОкончанияДоговора КАК ДатаОкончанияДоговора,
	               |			РасторжениеДоговораАренды.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документ.РасторжениеДоговораАренды КАК РасторжениеДоговораАренды
	               |		ГДЕ
	               |			РасторжениеДоговораАренды.Проведен = ИСТИНА
	               |			И РасторжениеДоговораАренды.Дата < &Дата2) КАК ВложенныйЗапрос
	               |		ПО ВложенныйЗапросСрокиДействия.ДоговорКонтрагента = ВложенныйЗапрос.ДоговорКонтрагента
	               |			И ВложенныйЗапросСрокиДействия.Документ = ВложенныйЗапрос.ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ВложенныйЗапрос.ДоговорКонтрагента, ВложенныйЗапросСрокиДействия.ДоговорКонтрагента),
	               |	ЕСТЬNULL(ВложенныйЗапрос.ДокументОснование, ВложенныйЗапросСрокиДействия.Документ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДС.ДоговорКонтрагента,
	               |	ДС.Документ,
	               |	ВЫБОР
	               |		КОГДА ДС.Документ.ДатаАкта ЕСТЬ NULL 
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДС.Документ.ДатаЗаключенияДоговора > ДС.Документ.Дата
	               |						ТОГДА ДС.Документ.ДатаЗаключенияДоговора
	               |					ИНАЧЕ ДС.Документ.Дата
	               |				КОНЕЦ
	               |		ИНАЧЕ ДС.Документ.ДатаАкта
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ДС.ДатаОкончанияДоговора КАК ДатаОкончания,
	               |	Договоры.Ссылка.ОбъектАренды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	ДС КАК ДС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Договоры КАК Договоры
	               |		ПО ДС.ДоговорКонтрагента = Договоры.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ДополнительноеСоглашение.Ссылка, ЗаключениеДоговораАренды.Ссылка) КАК ПоследнийДокумент,
	               |	ВложенныйЗапрос.ДокументОснование
	               |ПОМЕСТИТЬ ПоследнееСоглашение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
	               |		МАКСИМУМ(ВложенныйЗапрос.Дата) КАК Дата
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ДополнительноеСоглашение.ДокументОснование КАК ДокументОснование,
	               |			ДополнительноеСоглашение.Дата КАК Дата
	               |		ИЗ
	               |			Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |		ГДЕ
	               |			ДополнительноеСоглашение.Проведен = ИСТИНА
	               |			И ДополнительноеСоглашение.Дата < &Дата2
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ЗаключениеДоговораАренды.Ссылка,
	               |			ЗаключениеДоговораАренды.Дата
	               |		ИЗ
	               |			Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	               |		ГДЕ
	               |			ЗаключениеДоговораАренды.Проведен = ИСТИНА
	               |			И ЗаключениеДоговораАренды.Дата < &Дата2) КАК ВложенныйЗапрос
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВложенныйЗапрос.ДокументОснование) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаключениеДоговораАренды КАК ЗаключениеДоговораАренды
	               |		ПО ВложенныйЗапрос.ДокументОснование = ЗаключениеДоговораАренды.Ссылка
	               |			И ВложенныйЗапрос.Дата = ЗаключениеДоговораАренды.Дата
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |		ПО ВложенныйЗапрос.ДокументОснование = ДополнительноеСоглашение.ДокументОснование
	               |			И ВложенныйЗапрос.Дата = ДополнительноеСоглашение.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ТЗ.ДоговорКонтрагента КАК Договор,
	               |	ТЗ.Документ,
	               |	ТЗ.ДатаНачала,
	               |	ТЗ.ДатаОкончания,
	               |	ТЗ.СтруктурнаяЕдиница,
	               |	ПоследнееСоглашение.ПоследнийДокумент
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнееСоглашение КАК ПоследнееСоглашение
	               |		ПО ТЗ.Документ = ПоследнееСоглашение.ДокументОснование
	               |ГДЕ
	               |	ТЗ.ДатаНачала < &Дата2
	               |	И ТЗ.ДатаОкончания > &Дата1";
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ПериодРегистрации));
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
КонецФункции

//+++АК sils 15.08.2017 ИП-00014584
Функция ПолучитьСписокДействующихДопСоглашений()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("Договор");
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("ДопСоглашение");
	ТЗ.Колонки.Добавить("ДатаНачала");
	ТЗ.Колонки.Добавить("ДатаОкончания");
	ТЗ.Колонки.Добавить("ТипСтимулаАренды");
	ТЗ.Колонки.Добавить("КоличествоДнейСтимулаАренды");
	ТЗ.Колонки.Добавить("ДатаНачалаСтимула");
	ТЗ.Колонки.Добавить("ДатаОкончанияСтимула");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ПОМЕСТИТЬ Договоры
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСПоставщиком.Аренда)
	               |	И ДоговорыКонтрагентов.ОбъектАренды <> ЗНАЧЕНИЕ(Справочник.ОбъектыАренды.ПустаяСсылка)
	               |	И ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДополнительноеСоглашение.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ДополнительноеСоглашение.ДоговорКонтрагента КАК Договор,
	               |	ДополнительноеСоглашение.ДокументОснование КАК Документ,
	               |	ДополнительноеСоглашение.Ссылка КАК ДопСоглашение,
	               |	ДополнительноеСоглашение.Дата КАК ДатаНачала,
	               |	ДополнительноеСоглашение.ДатаОкончанияДоговора КАК ДатаОкончания,
	               |	ДополнительноеСоглашение.ТипСтимулаАренды,
	               |	ДополнительноеСоглашение.КоличествоДнейСтимулаАренды,
	               |	ДополнительноеСоглашение.ДатаНачалаСтимула,
	               |	ДополнительноеСоглашение.ДатаОкончанияСтимула
	               |ИЗ
	               |	Документ.ДополнительноеСоглашение КАК ДополнительноеСоглашение
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Договоры КАК Договоры
	               |		ПО ДополнительноеСоглашение.ДоговорКонтрагента = Договоры.Ссылка
	               |ГДЕ
	               |	ДополнительноеСоглашение.ТипСтимулаАренды <> ЗНАЧЕНИЕ(Перечисление.АК_ТипыЛьготПоАренде.ПустаяСсылка)
	               |	И ДополнительноеСоглашение.Проведен = ИСТИНА
	               |	И ДополнительноеСоглашение.Дата < &Дата2
	               |	И ДополнительноеСоглашение.ДатаОкончанияДоговора > &Дата1";
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ПериодРегистрации));
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
КонецФункции

//+++АК sils 15.08.2017 ИП-00014584
Функция ПолучитьГрафикиСтимулов(ТЗ_ДопСоглашений)
	ТЗ_Графики = Новый ТаблицаЗначений;
	ТЗ_Графики.Колонки.Добавить("ДопСоглашение");
	ТЗ_Графики.Колонки.Добавить("ПериодНачисления");
	ТЗ_Графики.Колонки.Добавить("Сумма");
	
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(ТЗ_ДопСоглашений.ВыгрузитьКолонку("ДопСоглашение"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ДопСоглашение,
	               |	ВложенныйЗапрос.ПериодНачисления,
	               |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ Графики
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СтимулыПоДоговорамАрендыПоМесяцам.ДопСоглашение КАК ДопСоглашение,
	               |		СтимулыПоДоговорамАрендыПоМесяцам.ПериодНачисления КАК ПериодНачисления,
	               |		СтимулыПоДоговорамАрендыПоМесяцам.Сумма КАК Сумма
	               |	ИЗ
	               |		РегистрСведений.СтимулыПоДоговорамАрендыПоМесяцам КАК СтимулыПоДоговорамАрендыПоМесяцам
	               |	ГДЕ
	               |		СтимулыПоДоговорамАрендыПоМесяцам.ПериодНачисления >= &Период
	               |		И СтимулыПоДоговорамАрендыПоМесяцам.ДопСоглашение В(&СЗ)
	               |		И СтимулыПоДоговорамАрендыПоМесяцам.Начислено = ЛОЖЬ
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СтимулыПоДоговорамАрендыПоМесяцам.ДопСоглашение,
	               |		СтимулыПоДоговорамАрендыПоМесяцам.ПериодНачисления,
	               |		-СтимулыПоДоговорамАрендыПоМесяцам.Сумма
	               |	ИЗ
	               |		РегистрСведений.СтимулыПоДоговорамАрендыПоМесяцам КАК СтимулыПоДоговорамАрендыПоМесяцам
	               |	ГДЕ
	               |		СтимулыПоДоговорамАрендыПоМесяцам.ПериодНачисления >= &Период
	               |		И СтимулыПоДоговорамАрендыПоМесяцам.ДопСоглашение В(&СЗ)
	               |		И СтимулыПоДоговорамАрендыПоМесяцам.Начислено = ИСТИНА) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ДопСоглашение,
	               |	ВложенныйЗапрос.ПериодНачисления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Графики.ДопСоглашение,
	               |	Графики.ПериодНачисления,
	               |	Графики.Сумма
	               |ИЗ
	               |	Графики КАК Графики
	               |ГДЕ
	               |	Графики.Сумма <> 0";
	Запрос.УстановитьПараметр("СЗ", СЗ);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ПериодРегистрации));
	ТЗ_Графики = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ_Графики;
КонецФункции

//+++АК sils 15.08.2017 ИП-00014584
Процедура КоманднаяПанельМСФОЗаполнить(Кнопка)
	Если ЭтотОбъект.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
		РасчетСтимулов();
	КонецЕсли;
КонецПроцедуры

//+++АК sils 15.08.2017 ИП-00014584
Процедура МСФОСуммаПриИзменении(Элемент)
	стр = ЭлементыФормы.МСФО.ТекущиеДанные;
	Если стр.Сумма = 0 Тогда
		стр.РучнаяКорректировкаСуммы = Ложь;
	Иначе
		стр.РучнаяКорректировкаСуммы = Истина;
	КонецЕсли;
КонецПроцедуры

//+++АК sils 15.08.2017 ИП-00014584
Процедура МСФОПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.РучнаяКорректировкаСуммы = Истина Тогда
		ОформлениеСтроки.Ячейки.Сумма.ЦветФона = Новый Цвет(220, 220, 220);
	Иначе
		ОформлениеСтроки.Ячейки.Сумма.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
КонецПроцедуры

//+++АК sils 08.06.2018 ИП-00018876
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Начисление НДФЛ по арендной плате от арендодателей");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
КонецПроцедуры



////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ЭлементыФормы.ТипАренднойПлаты.СписокВыбора.Добавить(Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть);
ЭлементыФормы.ТипАренднойПлаты.СписокВыбора.Добавить(Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть);

ОтборЗначение 	= Справочники.Контрагенты.ПустаяСсылка();
мВалютаРегл 	= Константы.ВалютаРегламентированногоУчета.Получить();

СписокТТсОшибочнойПлощадью = Новый СписокЗначений;
