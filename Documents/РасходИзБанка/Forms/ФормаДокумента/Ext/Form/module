//20160401 obue НадписьПериодРегистрации - на форме поменян заголовок с "Период аренды:" на "Период оплаты:". Сейчас это поле будет видно во всех документах.
//В документах аренды, надпись будет меняться программно. По просьбе Андросовой Ирины

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем мПроведение;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Функция КонтрагентПоОрганизации(мОрганизация)
	
	//Возврат Справочники.Контрагенты.НайтиПоРеквизиту("Организация", мОрганизация);
	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", мОрганизация.ИНН);
	
КонецФункции	

Процедура УстановитьСтатьюДДС_БУ_ПоУмолчанию() Экспорт
	
	ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ =
	ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ЭтотОбъект.СтатьяДвиженияДенежныхСредств, ЭтотОбъект.ВидОперации);
	
КонецПроцедуры	

Процедура НазначитьТипЗначенияКонтрагента()
	
	МассивТипов = Новый Массив;
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
		Если Контрагент <> Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		ЭлементыФормы.НадписьКонтрагент.Заголовок = "Физ. лицо:";
		
	Иначе
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		
		Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		ЭлементыФормы.НадписьКонтрагент.Заголовок = "Контрагент:";
		
	КонецЕсли;
	
	//
	ЭлементыФормы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов,,);
	
КонецПроцедуры

Процедура УстановитьТипКонтрагент(флПриОткрытии = Ложь)
	
	ИмяСправочника 			= "Контрагенты";
	ИмяРасчетногоДокумента 	= "РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент			= Истина;
	ЕстьРасчетныйДокумент	= Ложь;
	
	Если (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами) Тогда
		
		ИмяСправочника = "Контрагенты";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
		
		ИмяСправочника = "ФизическиеЛица";
		
	Иначе
		
		ЕстьКонтрагент = Истина;
		
	КонецЕсли;
	
	Если ЕстьКонтрагент Тогда
		Если флПриОткрытии Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка." + ИмяСправочника));
			ЭлементыФормы.Контрагент.ОграничениеТипа = новый ОписаниеТипов(Массив);
		Иначе	
			Если ТипЗнч(ЭтотОбъект.Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
				ЭтотОбъект.Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если НЕ флПриОткрытии Тогда
			Если НЕ ЭтотОбъект.Контрагент = Неопределено Тогда
				ЭтотОбъект.Контрагент = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСчетаИСубконто();
	
	ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПустаяСсылка();
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом,
	ЭтотОбъект.СубконтоДт1, ЭлементыФормы.СубконтоДт1,
	ЭтотОбъект.СубконтоДт2, ЭлементыФормы.СубконтоДт2,
	ЭтотОбъект.СубконтоДт3, ЭлементыФормы.СубконтоДт3);
	
КонецПроцедуры

Процедура УстановитьВидыОперации()
	
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()
	
	ВсегоСубконто = ?(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Пустая(), 0, ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто;
		Если Флаг Тогда
			ЭлементыФормы["НадписьСубконтоДт"+К].Заголовок =ЭтотОбъект. СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[К-1].ВидСубконто.Наименование;
		КонецЕсли;
		ЭлементыФормы["СубконтоДт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоДт" + К].Видимость = Флаг;
	КонецЦикла;
		
КонецПроцедуры

//+++АК LAGP 2018.03.27 ИП-00017936 СубконтоБУ для обмена с БП
Процедура УстановитьВидимостьСчетовИСубконтоБУПриПрочихОперациях()
		
	ВсегоСубконтоБУ = ?(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.Пустая(), 0, ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконтоБУ;
		Если Флаг Тогда
			Попытка
				ЭлементыФормы["НадписьСубконтоДт" + К + "БУ"].Заголовок = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто[К-1].ВидСубконто.Наименование;
				Если ЭлементыФормы["НадписьСубконтоДт" + К + "БУ"].Заголовок = "" Тогда
					ЭлементыФормы["НадписьСубконтоДт" + К + "БУ"].Заголовок = "СубконтоДт" + К + "БУ";   
				КонецЕсли;	
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
		Если НЕ ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("91.02") Тогда
			Флаг = Ложь;
		КонецЕсли;	
		
		ЭлементыФормы["СубконтоДт"        + К + "БУ"].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоДт" + К + "БУ"].Видимость = Флаг;
	КонецЦикла;		
	
КонецПроцедуры

Процедура УстановитьВидимостьОплатаПоФизЛицам1()
	
	//+++ZEZA
	
	//
	ПризнакЭто_574 = ПереводДСФизЛицамНаКарту;
	ПризнакЭто_574 = ПризнакЭто_574 ИЛИ (СчетОрганизации.СчетУчета = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников);
	ПризнакЭто_574 = ПризнакЭто_574 ИЛИ (СчетКонтрагента.СчетУчета = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников);
	
	//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
	ПризнакЭто_574 = ПризнакЭто_574 ИЛИ (СчетОрганизации.СчетУчета = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудниковДо2018);
	ПризнакЭто_574 = ПризнакЭто_574 ИЛИ (СчетКонтрагента.СчетУчета = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудниковДо2018);
	//---АК LAGP
	
	//
	ЭлементыФормы.ПанельПереводНаДрСчет.Страницы.ПереводНаДрСчет_ФизЛица.Видимость = ПризнакЭто_574; 
	
	//
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаПереводНаДрСчет", ЭлементыФормы.ПанельПлатежи);
	КонецЕсли;	
	
	//---ZEZA
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	ЭлементыФормы.ДоговорКонтрагента.Данные = "ДоговорКонтрагента";
	ЭлементыФормы.НадписьДоговорКонтрагента.Заголовок = "Договор";
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		ЭлементыФормы.ПанельНДС.Видимость = Истина;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;            obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
		//
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаПереводНаДрСчет", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Ложь;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Ложь;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;      obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;		
		ЭлементыФормы.Контрагент.Видимость			= Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость	= Ложь;
		
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			СтавкаНДС 	= Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			СуммаНДС = 0;
		КонецЕсли;	
		
		//
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Пустая;
		ЭлементыФормы.ПанельНДС.Видимость = Ложь;
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			СтавкаНДС 	= Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			СуммаНДС = 0;
		КонецЕсли;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Ложь;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;      obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПеречислениеПоИспольнительным;
		ЭлементыФормы.ПанельНДС.Видимость = Ложь;
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			СтавкаНДС 	= Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			СуммаНДС = 0;
		КонецЕсли;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПеречислениеЗП;
		ЭлементыФормы.ПанельНДС.Видимость = Ложь;
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			СтавкаНДС 	= Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			СуммаНДС = 0;
		КонецЕсли;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Ложь;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;         obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		ЭлементыФормы.ПанельНДС.Видимость = Ложь;
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			СтавкаНДС 	= Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			СуммаНДС = 0;
		КонецЕсли;
		
		ЭлементыФормы.ДоговорКонтрагента.Данные = "ДоговорКонтрагентаНДФЛ";
		ЭлементыФормы.НадписьДоговорКонтрагента.Заголовок = "Договор НДФЛ";
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;          obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда 
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Истина;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Ложь;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;          obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Код = "70" Тогда
			ЭлементыФормы.ФизЛицо.Видимость 		= Истина;
			ЭлементыФормы.НадписьФизЛицо.Видимость 	= Истина;
		Иначе
			ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
			ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		КонецЕсли;	
		
	ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору) Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Истина;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Истина;        obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Истина;
		ЭлементыФормы.НадписьПериодРегистрации.Заголовок = "Период аренды";
		
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Истина;
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
	ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору) Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Истина;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;         obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Истина;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Истина;		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;        obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Ложь;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга
		//пмм
		или ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно
		//пмм.
		Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Эквайринг;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость=Ложь;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость = Истина;		
		ЭлементыФормы.ДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость = Ложь;        obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость = Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		//пмм
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга Тогда
			ЭлементыФормы.Эквайринг.Видимость=ложь;
			ЭлементыФормы.ТорговаяТочка.Видимость=истина;
			ЭлементыФормы.Терминал.Видимость=истина;
			ЭлементыФормы.СуммаДокумента.Доступность=Истина;
		Иначе
			ЭлементыФормы.Эквайринг.Видимость=истина;
			ЭлементыФормы.ТорговаяТочка.Видимость=ложь;
			ЭлементыФормы.Терминал.Видимость=ложь;
			ЭлементыФормы.СуммаДокумента.Доступность=Ложь;
		КонецЕсли;	
		//пмм.
		ЭлементыФормы.ФизЛицо.Видимость = Ложь;
		ЭлементыФормы.НадписьФизЛицо.Видимость = Ложь; 		
		
	Иначе
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Ложь;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Истина;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Истина;		
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Истина;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Истина;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Истина;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;       obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Код = "70" Тогда
			ЭлементыФормы.ФизЛицо.Видимость 		= Истина;
			ЭлементыФормы.НадписьФизЛицо.Видимость 	= Истина;
		Иначе
			ЭлементыФормы.ФизЛицо.Видимость 		= Ложь;
			ЭлементыФормы.НадписьФизЛицо.Видимость	= Ложь;
		КонецЕсли;	
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость	= Ложь;
			ЭлементыФормы.ДоговорКонтрагента.Видимость			= Ложь;
			
			ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансамБУ.Видимость	= Ложь;
			ЭлементыФормы.СчетУчетаРасчетовПоАвансамБУ.Видимость		= Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
		
		
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СчетУчетаРасчетовСКонтрагентом,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3);
		
	КонецЕсли;
	
	//+++АК LAGP 2018.03.27 ИП-00017936 СубконтоБУ для обмена с БП
	Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомБУ) И СчетУчетаРасчетовСКонтрагентомБУ.Код = "91.02" Тогда                    
		
		УстановитьВидимостьСчетовИСубконтоБУПриПрочихОперациях();
		
		Попытка //в хозрасчетном плане счетов билиберда, почти все субконто <Неизвестная характеристика>
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СчетУчетаРасчетовСКонтрагентомБУ,
				СубконтоДт1БУ, ЭлементыФормы.СубконтоДт1БУ,
				СубконтоДт2БУ, ЭлементыФормы.СубконтоДт2БУ,
				СубконтоДт3БУ, ЭлементыФормы.СубконтоДт3БУ);
		Исключение
		КонецПопытки;	
		
	КонецЕсли;	
	//---АК LAGP
	
	ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость 			= НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости;
	ЭлементыФормы.НадписьСтатьяДвиженияДенежныхСредств.Видимость	= ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		НазначитьТипЗначенияКонтрагента();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВыборСчета;
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельНДС.Видимость = Истина;
		
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента2.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента.Видимость 	= Ложь;
		ЭлементыФормы.ДоговорКонтрагента1.Видимость = Ложь;
		ЭлементыФормы.ДоговорКонтрагента2.Видимость = Ложь;
		
		//ЭлементыФормы.НадписьПериодРегистрации.Видимость 	= Ложь;          obue 20160401 по просьбе Андросовой
		//ЭлементыФормы.ПериодРегистрации.Видимость 			= Ложь;
		ЭлементыФормы.СуммаДокумента.КнопкаОткрытия = Ложь;
		
		ЭлементыФормы.ФизЛицо.Видимость 		= Истина;
		ЭлементыФормы.НадписьФизЛицо.Видимость 	= Истина;
		
		ЭлементыФормы.СубконтоДт1.Видимость     = Ложь;
		ЭлементыФормы.СубконтоДт2.Видимость     = Ложь;
		ЭлементыФормы.НадписьСубконтоДт1.Видимость     = Ложь;
		ЭлементыФормы.НадписьСубконтоДт2.Видимость     = Ложь;
		
		ЭлементыФормы.НадписьСчетУчетаБУ.Видимость     = Ложь;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомБУ.Видимость     = Ложь;
		
		ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансамБУ.Видимость     = Ложь;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансамБУ.Видимость     = Ложь;
	КонецЕсли;
	//+++AK obue 20160324 ИП-00012276     obue 20160401 по просьбе Андросовой
	//Если не ЭлементыФормы.ПериодРегистрации.Видимость и не ЭлементыФормы.НадписьПериодРегистрации.Видимость и СтруктурныеЕдиницы.Количество() Тогда
	//	ЭлементыФормы.ПериодРегистрации.Видимость = Истина;
	//	ЭлементыФормы.НадписьПериодРегистрации.Видимость = Истина;
	//	ЭлементыФормы.НадписьПериодРегистрации.Заголовок = "Период оплаты";
	//КонецЕсли;
	//---АК
	
	//+++ZEZA
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаПереводНаДрСчет", ЭлементыФормы.ПанельПлатежи);
	КонецЕсли;	
	//---ZEZA
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Расход из банка");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ЭтоНовый()
		И ЗначениеЗаполнено(ПараметрОснование)
		И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		//
		Если НЕ ПараметрОснование.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для оплаты заявка должна быть акцептована");
			Отказ 					= Истина;
			СтандартнаяОбработка 	= Ложь;
			Возврат;
		КонецЕсли;
		//
		Если НЕ ПараметрОснование.ПринятоКОплате Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для оплаты заявка должна быть принята к оплате");
			Отказ 					= Истина;
			СтандартнаяОбработка 	= Ложь;
			Возврат;
		КонецЕсли;
		//
		мЕстьПраво = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПриниматьЗаявкиНаРасходДСКОплате, Ложь);
		Если НЕ мЕстьПраво Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нет прав на оплату заявки!");
			Отказ 					= Истина;
			СтандартнаяОбработка 	= Ложь;
			Возврат;
		КонецЕсли;
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ПараметрОснование);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасходИзБанка.Ссылка
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств
		|	И РасходИзБанка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасходИзБанка.Дата";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0
			И Вопрос("Данная заявка уже оплачена, все равно оплатить? Нажмите ДА для создания платежа по текущей заявке, нажмите НЕТ для открытия существующих платежей", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Пока Выборка.Следующий() Цикл
				Выборка.Ссылка.ПолучитьФорму().Открыть();
			КонецЦикла;
			Отказ 					= Истина;
			СтандартнаяОбработка 	= Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда 
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
				ВидОперации 		= Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			КонецЕсли;
			УстановитьВидимость();
			Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				НазначитьСчетУчета();
			КонецЕсли;
			ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
			Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтавкаНДС 			= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяСтавкаНДС");
				ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, ТекущийПользователь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидПлатежа) Тогда	
				ВидПлатежа         	= ЭлементыФормы.ВидПлатежа.СписокВыбора[2];
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОчередностьПлатежа) Тогда
				ОчередностьПлатежа 	= ?(ТекущаяДата() < Дата("20131216"), 6, 5);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация)
					И НЕ ЗначениеЗаполнено(ЭтотОбъект.ЗаявкаНаРасходованиеСредств) Тогда // при вводе на основании все прописано в Обработке Заполнения
				ОрганизацияПриИзменении(ЭлементыФормы.Организация);
			КонецЕсли;
			
		Иначе   
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю ИЛИ 
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю ИЛИ 
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю Тогда
				ОчередностьПлатежа         = 5;
			КонецЕсли;
			
			Оплачено = Ложь;
			ДатаОплаты = Дата("00010101000000");
			НомерВходящегоДокумента = "";
			ОплатаПоФизЛицам.Очистить();
		КонецЕсли;
		
		// оплата НДФЛ за контрагента - отдельным документом
		Если ЗначениеЗаполнено(ЭтаФорма.ПараметрОснование)
			И ТипЗнч(ЭтаФорма.ПараметрОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ ЭтаФорма.ПараметрОснование.СуммаНДФЛ = 0 Тогда
			
			Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента.ОбразецПлатежногоПорученияНДФЛ) Тогда
				обДок = ЭтотОбъект.ДоговорКонтрагента.ОбразецПлатежногоПорученияНДФЛ.Скопировать();
			Иначе
				обДок = Документы.РасходИзБанка.СоздатьДокумент();	
				ЗаполнитьЗначенияСвойств(обДок, ЭтотОбъект,, "Контрагент,СчетКонтрагента,ВидОперации");
				обДок.ВидОперации		= Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
				обДок.Контрагент 		= Справочники.Контрагенты.НайтиПоКоду("000000258"); // ИФНС РОССИИ № 34 ПО Г. МОСКВЕ
				обДок.СчетКонтрагента   = обДок.Контрагент.ОсновнойБанковскийСчет;
				
				АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
				обДок.Организация, обДок.СчетОрганизации, обДок.Контрагент, обДок.СчетКонтрагента, обДок.ВидОперации, Истина);
				обДок.ТекстПлательщика 	= АвтоЗначенияРеквизитов.ТекстПлательщика;
				обДок.ИННПлательщика   	= АвтоЗначенияРеквизитов.ИННПлательщика;
				обДок.КПППлательщика   	= АвтоЗначенияРеквизитов.КПППлательщика;
				обДок.ТекстПолучателя 	= АвтоЗначенияРеквизитов.ТекстПолучателя;
				обДок.ИННПолучателя   	= АвтоЗначенияРеквизитов.ИННПолучателя;
				обДок.КПППолучателя   	= АвтоЗначенияРеквизитов.КПППолучателя;
				
				обДок.ПеречислениеВБюджет 		= Истина;
				обДок.ВидПеречисленияВБюджет 	= Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
				обДок.КодОКАТО = обДок.Организация.КодПоОКАТО;
				обДок.КодОКТМО = обДок.Организация.КодОКТМО;
				Если обДок.ДоговорКонтрагента.ПеречислениеВБюджет Тогда
					обДок.КодБК		= обДок.ДоговорКонтрагента.КодБК;
					обДок.КодОКТМО	= обДок.ДоговорКонтрагента.КодОКТМО;
				КонецЕсли;	
				обДок.СтатусСоставителя   = ?(обДок.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "01", "09");
				обДок.ПоказательПериода   = "МС." + Формат(Месяц(обДок.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(обДок.Дата), "ЧГ=");
				
				УстановитьРеквизитыПоказателяПериода();
			КонецЕсли;
			
			//обДок.Дата = ?(Час(ТекущаяДата())>=12, ЗаполнениеДокументов.ОпределитьДату(ТекущаяДата(), 1) + 12*60*60, ТекущаяДата());
			обДок.НомерВходящегоДокумента = "";
			обДок.ЗаявкаНаРасходованиеСредств = ЭтаФорма.ПараметрОснование;
			обДок.ДатаОплаты 		= Неопределено;
			обДок.Оплачено 			= Ложь;
			обДок.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;					
			обДок.СуммаДокумента 	= ЭтаФорма.ПараметрОснование.СуммаНДФЛ;
			обДок.СуммаНДС			= 0;
			обДок.ВалютаДокумента 	= мВалютаРегламентированногоУчета;
			обДок.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.НалогиСФОТ;
			обДок.СубконтоДт1		= обДок.Организация;
			обДок.СубконтоДт2		= Справочники.ВидыНалогов.НайтиПоКоду("000000010"); // НДФЛ
			обДок.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.НДФЛ;
			обДок.СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.НДФЛ;
			обДок.СтатьяДвиженияДенежныхСредствБУ 	= Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000006");
			обДок.Комментарий 		= "Оплата НДФЛ за <" + ЭтотОбъект.Контрагент + ">";
			обДок.ПолучитьФорму().Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;
	
	
	Если ПеречислениеВБюджет
			И ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;
	
	УстановитьТипКонтрагент(Истина);
	
	УстановитьВидимость();
	УстановитьВидимостьОплатаПоФизЛицам1();
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтрРеквизитовЗаявки = ПолныеПрава.ПолучитьРеквизитыПоЗаявкеНаДС(ЗаявкаНаРасходованиеСредств);
	СтрРеквизитовЗаявки.Свойство("ОтветственныйЗаявки", ОтветственныйЗаявки);
	СтрРеквизитовЗаявки.Свойство("ТорговыеТочкиСписок", ТорговыеТочкиСписок);
	
	Если Проведен Тогда
		Если РольДоступна("ИзменениеТТИДоговораПроведенныхБанковскихДокументов") Тогда
			Для Каждого Элемент Из ЭлементыФормы Цикл
				Если ТипЗнч(Элемент) = Тип("Панель")
					ИЛИ ТипЗнч(Элемент) = Тип("Надпись") Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					И (Элемент.Имя = "ДействияФормы" 
					ИЛИ Элемент.Имя = "ОсновныеДействияФормы") Тогда
					Продолжить;
					//ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					//	И Элемент.Имя = "ПанельПодчиненныеДокументы" Тогда
					//	Продолжить;
					//ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле")
					//	И Элемент.Имя = "ПодчиненныеДокументы" Тогда
					//	Продолжить;
					//ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					//	И Элемент.Имя = "ПанельРасчетыСФилиалом" Тогда
					//	Продолжить;
					//ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле")
					//	И Элемент.Имя = "РасчетыСФилиалом" Тогда
					//	Продолжить;
					//ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					//	И Элемент.Имя = "ПанельПретензии" Тогда
					//	Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("Панель") Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода")
					И ((Элемент.Имя = "ДоговорКонтрагента")
					ИЛИ (Элемент.Имя = "СчетУчетаРасчетовСКонтрагентом")
					ИЛИ (Элемент.Имя = "ПериодРегистрации")
					ИЛИ (Элемент.Имя = "ТорговаяТочка")
					ИЛИ (Элемент.Имя = "Терминал")
					ИЛИ (Элемент.Имя = "СубконтоДт1")
					ИЛИ (Элемент.Имя = "СубконтоДт1")
					ИЛИ (Элемент.Имя = "СубконтоДт3")) Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
					Для Каждого Колонка Из Элемент.Колонки Цикл
						//Если Колонка.Имя <> "СкладВыгрузка" И Колонка.Имя <> "ЗаявкаНаСГВыгрузка" И Колонка.Имя <> "ВесКгПришло" И Колонка.Имя <> "ОбъемМ3Пришло" И Лев(Колонка.Имя, 3) <> "Доп" И Колонка.Имя <> "Загрузка" И Колонка.Имя <> "Бонус" И Колонка.Имя <> "Плательщик" И Лев(Колонка.Имя, 20) <> "ВнутритарныйПересчет" Тогда
						Колонка.ТолькоПросмотр = Истина;
						Колонка.ЦветФонаПоля = Новый Цвет(255, 255, 255);					
						//КонецЕсли;
					КонецЦикла;
					
					Продолжить;
				ИначеЕсли ТипЗнч(Элемент) = Тип("КоманднаяПанель")
					//И (Элемент.Имя = "ПанельГруз"
					//	ИЛИ Элемент.Имя = "ПанельУслуги") 
					Тогда
					Для Каждого Кнопка Из Элемент.Кнопки Цикл
						//Если Кнопка.Имя <> "ПодменюРассчитатьПришло" Тогда
						Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
							Для Каждого Кнопка1 Из Кнопка.Кнопки Цикл
								Попытка
									Кнопка1.Доступность = Ложь;
								Исключение
								КонецПопытки;
							КонецЦикла;
						ИначеЕсли Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
							Попытка
								Кнопка.Доступность = Ложь;
							Исключение
							КонецПопытки;
						КонецЕсли;
						//КонецЕсли;
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
				Попытка
					Элемент.ТолькоПросмотр = Истина;
				Исключение
					Попытка
						Элемент.Доступность = Ложь;
					Исключение
					КонецПопытки;
				КонецПопытки;
			КонецЦикла;	
		ИначеЕсли НЕ РольДоступна("ИзменениеПроведенныхБанковскихДокументов") Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый()
		ИЛИ (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю
		И ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю 
		И ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору
		И ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПараметрыАренды);
	КонецЕсли; 
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЭтотОбъект.Оплачено
		И (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости
			ИЛИ ЭтотОбъект.ПереводДСФизЛицамНаКарту)
				И НЕ ЭтотОбъект.СуммаДокумента = ЭтотОбъект.ОплатаПоФизЛицам.Итог("Сумма") Тогда
		ЭлементыФормы.КартинкаНеСогласованаСумма.Видимость = Истина;
	Иначе
		ЭлементыФормы.КартинкаНеСогласованаСумма.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору) 
		И НЕ ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период аренды (месяц)");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		Если СчетОрганизации.ПометкаУдаления Тогда
			Если Вопрос("Счет организации помечен на удаление. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Если СчетКонтрагента.ПометкаУдаления Тогда
			Если Вопрос("Счет контрагента помечен на удаление. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ЗаявкаНаРасходованиеСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) Тогда
		Если СуммаДокумента <> ЗаявкаНаРасходованиеСредств.СуммаДокумента
			И (СтатьяДвиженияДенежныхСредств.Код = "120610" //Оплата промоутера
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200701" //Оплата промоутера для открытия ТТ
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200702" //Оплата листовок для открытия ТТ
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200703") Тогда //Оплата оформления для открытия ТТ
			ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не соответствует сумме заявки на расходование средств");
			Отказ = Истина;			
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена статья движения денежных средств");
		Отказ = Истина;			
	КонецЕсли;
	Если (НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом))
			И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга)
			И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости)
			И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП)Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета расчетов с контрагентом");
		Отказ = Истина;			
	КонецЕсли;
	Если ПеречислениеВБюджет
			И НЕ ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен вид платежа в гос. бюджет");
		Отказ = Истина;			
	КонецЕсли;
	Если ВидОперации <> Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита Тогда
		//Если Найти(НРег(НазначениеПлатежа), "депозит") > 0 Тогда
		//	Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Финансовый.ОбеспечительныйВзнос Тогда //60.1
		//		Если Вопрос("Для оплаты депозита должен использоваться счет учета 60.1. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		//			Отказ = Истина;
		//		КонецЕсли;
		//	КонецЕсли;
		//	Если СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131011") Тогда //Оплата депозита за аренду (торговых точек и магазинов)
		//		Если Вопрос("Для оплаты депозита должна использоваться статья ДДС ""Оплата депозита за аренду (торговых точек и магазинов)"". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		//			Отказ = Истина;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;	
	
	Если СчетУчетаРасчетовСКонтрагентом.Код = "70"
			И НЕ ЗначениеЗаполнено(ФизЛицо)
			И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Обязательно заполнение физлица при корреспонденции с 70м счетом");
		Отказ = Истина;
	КонецЕсли;	
	
	Если Дата > ТекущаяДата() Тогда
		ИспользоватьРежимаПроведения = ИспользованиеРежимаПроведения.Неоперативный;
	Иначе
		ИспользоватьРежимаПроведения = ИспользованиеРежимаПроведения.Оперативный;
	КонецЕсли;
	
	Если НЕ Отказ
			И ЗначениеЗаполнено(НомерВходящегоДокумента)
			И ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НомерВходящегоДокумента"	, НомерВходящегоДокумента);
		Запрос.УстановитьПараметр("ДатаНач"					, НачалоГода(Дата));
		Запрос.УстановитьПараметр("ДатаКон"					, КонецГода(Дата));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходИзБанка.Ссылка
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	РасходИзБанка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И РасходИзБанка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		|	И РасходИзБанка.Проведен";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Платежное поручение с таким исходящим номером уже есть! Будет назначен новый.");
			Попытка
				НомерВходящегоДокумента = Строка(Число(СокрЛП(НомерВходящегоДокумента)) + 1);
				//Отказ = Истина;	
			Исключение
				НомерВходящегоДокумента = "";
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	
	//+++ SaMi
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (НЕ ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств)
			ИЛИ ТипЗнч(ЗаявкаНаРасходованиеСредств) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств"))
		И (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю) Тогда 
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
			ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
		Иначе
			ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
		КонецЕсли;
		
		ПроцедурыНачисления.ПроверитьЛимитыПоАрендеЗаявкиИОплаты(Ссылка, ЗаявкаНаРасходованиеСредств, СуммаДокумента, ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница, ТипАренднойПлаты, ПериодРегистрации, Отказ);
		
	КонецЕсли;
	
	//Mind должны сходится все суммы в документе, иначе не даем проводить
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости
			И (СуммаДокумента + ОплатаПоФизЛицам.Итог("Сумма") + ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа")) / 3 <> СуммаДокумента Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не сходится сумма документа, общая сумма по физ. лицам и по перечислениям",,,, Отказ);
	КонецЕсли;
	
	мПроведение = (РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
		
	//+++АК sils 31.07.2017 ИП-00015834
	ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ЭтотОбъект.Дата));
	Если ТЗ.Количество() > 0 И НЕ Оплачено Тогда //+++АК LAGP 2018.03.02 ИП-00018029 Для уже оплаченых, стоп-оплаты не важны 
		//+++АК sils 04.09.2018 ИП-00019634
		//стр = ТЗ.Найти(Контрагент, "Контрагент");
		стр = Неопределено;
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", Контрагент);
		Если ЗначениеЗаполнено(Организация) Тогда
			Отбор.Вставить("Организация", Организация);
			МассивСтрок = ТЗ.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() > 0 Тогда
				стр = МассивСтрок[0];
			КонецЕсли;
		КонецЕсли;
		Если стр = Неопределено Тогда
			//+++АК sils 09.11.2018 ИП-00019634.02
			флЕстьСтрокиСОрганизацией = Ложь;
			МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
			Для каждого стр2 из МассивСтрок Цикл
				Если стр2.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
					флЕстьСтрокиСОрганизацией = Истина;
				КонецЕсли;
			КонецЦикла;
			Если не флЕстьСтрокиСОрганизацией Тогда
			//---АК
			Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			МассивСтрок = ТЗ.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() > 0 Тогда
				стр = МассивСтрок[0];
			КонецЕсли;
			//+++АК sils 09.11.2018 ИП-00019634.02
			КонецЕсли;
			//---АК
		КонецЕсли;
		//---АК
		Если стр <> Неопределено Тогда
			Если стр.Подтверждено Тогда
				Сообщить("По контрагенту " + СокрЛП(Контрагент) + " установлена стоп оплата. Документ не записан!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//---АК
	
	Если мПроведение
			И (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
			И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеПлатежаПоАрендеВечером, Ложь)
			И (ЭтотОбъект.ЭтоНовый()
				ИЛИ НачалоДня(ЭтотОбъект.Дата) = НачалоДня(ТекущаяДата()))
			И ТекущаяДата() > НачалоДня(ТекущаяДата()) + 16*3600
			И НЕ Отказ	Тогда
		ОтветНаВопрос = Вопрос("Провести документ позднее 16:00? Иначе дата будет изменена на " + Формат(ЭтотОбъект.Дата, "ДЛФ=Д") + ".", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			ЭтотОбъект.Дата = НачалоДня(ТекущаяДата()) + 86400;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//+++АК LAGP 2018.07.20 ИП-00018530 Настройка контроля соответствия получателя ИП и номера счета для ИП
Процедура ПоказатьПредупреждениеНеМодально(Результат) Экспорт
		
КонецПроцедуры

Процедура ПослеЗаписи()
	
	АК_КонтрольЗадолженности.ЗаполнитьРазделыУчетаКонтрагентаПоДокументу(ЭтотОбъект.Ссылка);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	
	//+++АК LAGP 2018.07.20 ИП-00018530 Настройка контроля соответствия получателя ИП и номера счета для ИП
	Если НЕ Документы.ЗаявкаНаУслугиМатериалы.СчётИПКорректный(Контрагент, СчетКонтрагента) Тогда
		//ОповещениеНеКорректныйСчётИП = Новый ОписаниеОповещения("ЗадатьВопросНеМодально", ЭтотОбъект);
		//ПоказатьВопрос(ОповещениеНеКорректныйСчётИП, "Банковский счёт получателя (" + Контрагент + ") не совпадает с маской счетов ""40802"" свойственной индивидуальным предпринимателям.", РежимДиалогаВопрос.ОК,,, "Не корректный счёт для ИП!");			
		ПодключитьОбработчикОжидания("ОжиданиеОповещения", 1, Истина);
		//ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеНеМодально", ЭтаФорма), "Банковский счёт получателя (" + Контрагент + ") не совпадает с маской счетов ""40802"" свойственной индивидуальным предпринимателям.");
	КонецЕсли;
	//---АК LAGP
	
КонецПроцедуры

//+++АК LAGP 2018.08.08 ИП-00018530 Настройка контроля соответствия получателя ИП и номера счета для ИП
Процедура ОжиданиеОповещения() Экспорт
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеНеМодально", ЭтаФорма), "Банковский счёт получателя (" + Контрагент + ") не совпадает с маской счетов ""40802"" свойственной индивидуальным предпринимателям.");	
	
КонецПроцедуры	

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры

Процедура ВидОперацииПриИзменении(Элемент)
	
	//Если (Элемент.Значение = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП
	//			ИЛИ Элемент.Значение = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости)
	//		И НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПоказыватьВРасходеИзБанкаПеречислениеЗП, Ложь) Тогда
	//	Элемент.Значение = Перечисления.ВидыОперацийППИсходящее.ПустаяСсылка();
	//	Сообщить("Нет прав на установку данного вида операции!");
	//КонецЕсли;
	
	ОчиститьСчетаИСубконто();
	
	УстановитьТипКонтрагент();
	
	Если Элемент.Значение = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012");
		//Если ЗначениеЗаполнено(Организация) Тогда
		//	Контрагент=КонтрагентПоОрганизации(Организация);
		//	СчетКонтрагента = Неопределено;
		//КонецЕсли;
		//Если ЗначениеЗаполнено(Контрагент) Тогда
		//	СчетКонтрагента=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СчетОрганизации.НомерСчета,,Контрагент);
		//КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И НЕ ЭтотОбъект.Контрагент.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Контрагент.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если НЕ Элемент.Значение = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ЭтотОбъект.ПереводДСФизЛицамНаКарту = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредств)
			И НЕ (Элемент.Значение = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			И ЭтотОбъект.ПереводДСФизЛицамНаКарту) Тогда
		//+++АК SUVV 2018.02.28 ИП-00017941	
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.Дата, ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если МассивСчетов.Количество() = 1 Тогда
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
			СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		КонецЕсли;
	КонецЕсли;	
	
	Для Ном = 1 по 3 Цикл
		Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭлементыФормы["СубконтоДт" + Ном].Значение = Контрагент;
			Сообщить("Значение субконто " + ном + " изменено на " + Контрагент);
		ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ЭлементыФормы["СубконтоДт" + Ном].Значение = Контрагент;
			Сообщить("Значение субконто " + ном + " изменено на " + Контрагент);	
		КонецЕсли;
	КонецЦикла;
	
	НазначитьСчетУчета();
	УстановитьСчетаУчетаБУ();
	
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);
	
	УстановитьВидимость();
	
	УстановитьСтатьюДДС_БУ_ПоУмолчанию();
	
КонецПроцедуры

Процедура ВидОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПоказыватьВРасходеИзБанкаПеречислениеЗП, Ложь) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		мВидыОпераций = Перечисления.ВидыОперацийППИсходящее;
		
		// все, кроме Перечисления ЗП и Перечисления ЗП ведомости
		СписокВидовОпераций = Новый СписокЗначений;
		СписокВидовОпераций.Добавить(мВидыОпераций.ОплатаПоставщику);
		СписокВидовОпераций.Добавить(мВидыОпераций.ВозвратПокупателю);
		СписокВидовОпераций.Добавить(мВидыОпераций.ПеречислениеПодотчетномуЛицу);
		СписокВидовОпераций.Добавить(мВидыОпераций.СнятиеНаличныхСРасчетногоСчета);
		СписокВидовОпераций.Добавить(мВидыОпераций.ПереводНаДругойСчет);
		СписокВидовОпераций.Добавить(мВидыОпераций.ПрочееСписаниеБезналичныхДенежныхСредств);
		СписокВидовОпераций.Добавить(мВидыОпераций.ОплатаДепозитаАрендодателю);
		СписокВидовОпераций.Добавить(мВидыОпераций.ОплатаПостояннойЧастиАрендыАрендодателю);
		СписокВидовОпераций.Добавить(мВидыОпераций.ОплатаПеременнойЧастиАрендыАрендодателю);
		СписокВидовОпераций.Добавить(мВидыОпераций.ВозвратДепозитаАрендатору);
		СписокВидовОпераций.Добавить(мВидыОпераций.ВозвратПостояннойЧастиАрендыАрендатору);
		СписокВидовОпераций.Добавить(мВидыОпераций.ВозвратПеременнойЧастиАрендыАрендатору);
		СписокВидовОпераций.Добавить(мВидыОпераций.ПрочиеРасчетыСКонтрагентами);
		СписокВидовОпераций.Добавить(мВидыОпераций.РасчетыПоКредитамИЗаймам);
		СписокВидовОпераций.Добавить(мВидыОпераций.ОплатаУслугБанка);
		СписокВидовОпераций.Добавить(мВидыОпераций.ПеречислениеНалога);
		СписокВидовОпераций.Добавить(мВидыОпераций.ПеречислениеПоИсполнительнымЛистам);
		СписокВидовОпераций.Добавить(мВидыОпераций.ОтменаЭквайринга);
		СписокВидовОпераций.Добавить(мВидыОпераций.ОтменаЭквайрингаСводно);
		
		СписокВидовОпераций.Добавить(мВидыОпераций.РазмещениеДепозита);
		
		//+++АК LAGP 2018.08.21 б/н Письмо Юлии Полухановой 
		СписокВидовОпераций.Добавить(мВидыОпераций.ПриобретениеИностраннойВалюты);
		//---АК LAGP
		
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВидовОпераций, Элемент, СписокВидовОпераций.НайтиПоЗначению(Элемент.Значение));
		Если НЕ ВыбранныйЭлемент = Неопределено Тогда
			Элемент.Значение = ВыбранныйЭлемент.Значение;
			ВидОперацииПриИзменении(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации(УстанавливатьСчетОрганизации = Истина)
	
	Если УстанавливатьСчетОрганизации Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
			ЭтотОбъект.СчетОрганизации = ЭтотОбъект.Организация.ОсновнойБанковскийСчет;
		Иначе
			ЭтотОбъект.СчетОрганизации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			И НЕ ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
		ЭтотОбъект.СчетКонтрагента = Неопределено;
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
			ЭтотОбъект.Контрагент 		= КонтрагентПоОрганизации(ЭтотОбъект.Организация);
			ЭтотОбъект.СчетКонтрагента 	= Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)Экспорт
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ПриИзмененииОрганизации();
	
	Если ЭтотОбъект.Контрагент = Неопределено Тогда
		НазначитьТипЗначенияКонтрагента();
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПлательщика();
	
	Для Ном = 1 по 3 Цикл
		Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.Организации") Тогда
			ЭлементыФормы["СубконтоДт" + Ном].Значение = Организация;
			Сообщить("Значение субконто " + ном + " изменено на " + Организация);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСчетаУчетаБУ();
	
	//СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ЭтотОбъект.ВидОперации);
	//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ЭтотОбъект.ДоговорКонтрагента, ЭтотОбъект.Контрагент, ЭтотОбъект.Организация, СписокВидовДоговора);
	Если ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
		ДоговорКонтрагентаПриИзменении(Неопределено);
	Иначе
		Если НЕ ЭтотОбъект.ДоговорКонтрагента.Организация = ЭтотОбъект.Организация Тогда
			ЭтотОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
			ДоговорКонтрагентаПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент) Экспорт
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	ЭтотОбъект.СубконтоДт1, ЭлементыФормы.СубконтоДт1,
	ЭтотОбъект.СубконтоДт2, ЭлементыФормы.СубконтоДт2,
	ЭтотОбъект.СубконтоДт3, ЭлементыФормы.СубконтоДт3);
	
	//
	Для Ном = 1 по 3 Цикл                                      
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы["СубконтоДт" + Ном].Значение) Тогда
			Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.Организации") Тогда
				Если СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
					ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.Организация;
				Иначе
					ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.Контрагент.Организация;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = ЭтотОбъект.Контрагент;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ЭлементыФормы["СубконтоДт"+Ном].Значение = ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Если СтатьяДвиженияДенежныхСредств <> Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010") Тогда //Перемещения денежных средств
					ЭлементыФормы["СубконтоДт" + Ном].Значение = СчетОрганизации;
				Иначе
					Если НЕ ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
						ЭлементыФормы["СубконтоДт" + Ном].Значение = Контрагент.Организация.ОсновнойБанковскийСчет;
					Иначе
						ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.СчетКонтрагента;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам)
				И (Элемент.Значение = ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация)
				И (Ном = 2) Тогда
				мДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"); 
				ЭлементыФормы.СубконтоДт2.ОграничениеТипа = мДопустимыйТип; 
				Если СубконтоДт2 <> мДопустимыйТип.ПривестиЗначение(СубконтоДт2) Тогда
					СубконтоДт2 = мДопустимыйТип.ПривестиЗначение(СубконтоДт2);
				КонецЕсли;				
				СубконтоДт2	= Контрагент.Организация.ОсновнойБанковскийСчет;
			//+++АК POZM 2018.03.16 ИП-00018101 	
			ИначеЕсли	Элемент.Значение = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиФакторинг И Ном = 3 И ЭтотОбъект.Дата>=Дата(2018,3,1) Тогда
				СубконтоДт3 = ЭтотОбъект.ДоговорКонтрагентаПоРасчетамФК;
			//---АК POZM 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мСчет = Элемент.Значение;
	
	ЗаполнитьДанныеБУ();
	
КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
		СписокПараметров = Новый Структура;
		Для н = 1 По 3 Цикл
			Если ТипЗнч(ЭтотОбъект["СубконтоДт" + н]) = Тип("СправочникСсылка.Контрагенты") Тогда
				СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт" + н]);
			ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоДт" + н]) = Тип("СправочникСсылка.Организации") Тогда
				СписокПараметров.Вставить("Организация", ЭтотОбъект["СубконтоДт" + н]);
			КонецЕсли;
		КонецЦикла;
		
		БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ЭтотОбъект.Организация, СписокПараметров);
	Иначе
		БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ЭтотОбъект.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура НазначитьСчетУчета()
	
	Если (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
			И ((НЕ ЭтотОбъект.ПереводДСФизЛицамНаКарту)
				ИЛИ (ЭтотОбъект.Дата < Дата(2015, 5, 1)
						И НЕ ЭтотОбъект.ЭтоНовый()))) Тогда
		
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетныйСчет;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Истина;
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
			И ЭтотОбъект.ПереводДСФизЛицамНаКарту
			И (ЭтотОбъект.ЭтоНовый()
				ИЛИ НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1)) Тогда
			
		//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
		//ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
		//---АК LAGP
		
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Истина;
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Истина;
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору) Тогда
		
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыПоАренде; //60.2
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору Тогда
		
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ОбеспечительныйВзнос; //60.1
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.СнятиеНаличныхСРасчетногоСчета;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Ложь;
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("76.2");
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Истина;
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду("58.2");
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Истина;
		СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();		
	Иначе
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = Ложь;
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений;
	Если НЕ ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.Дата, ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		СписокОтбора.ЗагрузитьЗначения(МассивСчетов);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
		СписокОтбора.Добавить(ПланыСчетов.Финансовый.СнятиеНаличныхСРасчетногоСчета);
	Иначе
		Если ЭтотОбъект.ЭтоНовый()
				ИЛИ	НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1) Тогда
				
			//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
			//СписокОтбора.Добавить(ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников);
			СписокОтбора.Добавить(ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата)));
			//---АК LAGP	
			
		Иначе
			СписокОтбора.Добавить(ПланыСчетов.Финансовый.РасчетныйСчет);
		КонецЕсли;
	КонецЕсли;
	
	
	Если МассивСчетов.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = ПланыСчетов.Финансовый.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПланСчетовСписок.Отбор.Код.ВидСравнения 	= ВидСравнения.ВСписке;
		ФормаВыбора.ПланСчетовСписок.Отбор.Код.Значение			= СписокОтбора;
		ФормаВыбора.ПланСчетовСписок.Отбор.Код.Использование	= Истина;
		
		//Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		//	СтандартнаяОбработка = Ложь;
		//	ФормаВыбора          = ПланыСчетов.Финансовый.ПолучитьФормуВыбора(,Элемент,);
		//	ФормаВыбора.ПланСчетовСписок.Отбор.Код.Значение      = "60.";
		//	ФормаВыбора.ПланСчетовСписок.Отбор.Код.Использование = Истина;
		//	ФормаВыбора.ПланСчетовСписок.Отбор.Код.ВидСравнения  = ВидСравнения.Содержит;
		//ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		//	СтандартнаяОбработка = Ложь;
		//	ФормаВыбора          = ПланыСчетов.Финансовый.ПолучитьФормуВыбора(,Элемент,);
		//	ФормаВыбора.ПланСчетовСписок.Отбор.Код.Значение      = "68.";
		//	ФормаВыбора.ПланСчетовСписок.Отбор.Код.Использование = Истина;
		//	ФормаВыбора.ПланСчетовСписок.Отбор.Код.ВидСравнения  = ВидСравнения.Содержит;
		
		ФормаВыбора.ПланСчетовСписок.Отбор.ЗапретитьИспользоватьВПроводках.ВидСравнения  = ВидСравнения.Равно;
		ФормаВыбора.ПланСчетовСписок.Отбор.ЗапретитьИспользоватьВПроводках.Значение      = Ложь;
		ФормаВыбора.ПланСчетовСписок.Отбор.ЗапретитьИспользоватьВПроводках.Использование = Истина;
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДСДокумент();
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении(Элемент) Экспорт
	ПересчитатьСуммуНДСДокумент();
	СформироватьНазначениеПлатежа();	
КонецПроцедуры

// Заполняет ИНН плательщика при нажатии на кнопку
//
Процедура ЗаполнитьИННПлательщикаНажатие(Элемент)
	
	Если НЕ Организация.Пустая() Тогда
		ИННПлательщика  = Организация.ИНН;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет КПП плательщика при нажатии на кнопку
//
Процедура ЗаполнитьКПППлательщикаНажатие(Элемент)
	
	Если НЕ Организация.Пустая() Тогда
		КПППлательщика = Организация.КПП;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ИНН получателя при нажатии на кнопку
//
Процедура ЗаполнитьИННПолучателяНажатие(Элемент)
	
	Если НЕ Контрагент.Пустая() Тогда
		ИННПолучателя = Контрагент.ИНН;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет КПП получателя при нажатии на кнопку
//
Процедура ЗаполнитьКПППолучателяНажатие(Элемент)
	
	Если НЕ Контрагент.Пустая() Тогда
		
		//КПППолучателя = Контрагент.КПП;
		
		//+++АК LAGP 2018.06.04 ИП-00018864 В некоторых случая необходимо разделять КПП по банковскому счёту. Добавлен реквизит "КПППолучателя"
		КПППолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
		КППИзБанковскогоСчёта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "КПППолучателя"); 			
		КПППолучателя = ?(ЗначениеЗаполнено(КППИзБанковскогоСчёта), КППИзБанковскогоСчёта, КПППолучателя);
		//---АК LAGP		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВидПеречисленияВБюджет) Тогда
		ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьВидПлатежаВБюджет()
	
	Если ПеречислениеВБюджет Тогда
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		Иначе
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
	Иначе
		ВидПеречисленияВБюджет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка()
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПлательщика();
	УстановитьРеквизитыПолучателя();
	
	УстановитьВидПлатежаВБюджет();
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	
	Если НЕ ПеречислениеВБюджет Тогда
		ПериодичностьУплаты = "";
		ГодПлатежа    = 0;
		ПериодПлатежа = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьРеквизитыПоказателяПериода()
	
	Если ПоказательПериода = "0" ИЛИ ПустаяСтрока(ПоказательПериода) ИЛИ ПустаяСтрока(СтрЗаменить(ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		
		СтрокаВидаПериода = Лев(ПоказательПериода, 2);
		СтрокаПериода     = Сред(ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(ПоказательПериода, 7);
		
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		
		Попытка
			
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
			
		Исключение
			
			ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
			
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура УстановитьПоказательПериода()
	
	Если ПериодичностьУплаты = "0" Тогда
		
		ПоказательПериода = "0";
		
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		
		ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		ПоказательПериода = ПериодичностьУплаты + "." + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=") + "." + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПериодичностьУплаты) Тогда
		ПериодичностьУплаты = "0";
	КонецЕсли;
	
	Если ПериодичностьУплаты <> "0" И ПериодичностьУплаты <> "-" Тогда
		
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(РабочаяДата);
		КонецЕсли;
		
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
		
	Иначе
		
		ГодПлатежа = 0;
		
	КонецЕсли;
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ГодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ПериодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ДатаПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура СтатусСоставителяПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтатусСоставителя) Тогда
		СтатусСоставителя = "08";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказательОснованияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПоказательОснования) Тогда
		ПоказательОснования = "0";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказательТипаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПоказательТипа) Тогда
		ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьРеквизитовПлатежаВБюджет()
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("НалоговыйПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ТаможенныйПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ИнойПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	КонецЕсли;
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Если ПустаяСтрока(ПериодичностьУплаты) ИЛИ (ПериодичностьУплаты = "0") Тогда
			ЭлементыФормы.ПанельПоказателяПериода.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ПанельПоказателяПериода.Видимость = Истина;
			Если ПериодичностьУплаты = "-" Тогда
				ЭлементыФормы.ПанельПоказателяПериода.ТекущаяСтраница = ЭлементыФормы.ПанельПоказателяПериода.Страницы.ПлатежПоКонкретнойДате;
			Иначе
				ЭлементыФормы.ПанельПоказателяПериода.ТекущаяСтраница = ЭлементыФормы.ПанельПоказателяПериода.Страницы.ПлатежПоПериоду;
				ЭлементыФормы.НадписьПериодПлатежа.Видимость = НЕ ПериодичностьУплаты = "ГД";
				ЭлементыФормы.ПериодПлатежа.Видимость        = НЕ ПериодичностьУплаты = "ГД";
				Если ПериодичностьУплаты = "МС" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 12;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Месяц:";
				ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 4;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Квартал:";
				ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 2;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Полугодие:";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()
	
	Если ПеречислениеВБюджет Тогда
		
		КодОКАТО = Организация.КодПоОКАТО;
		КодОКТМО = Организация.КодОКТМО;
		
		Если ДоговорКонтрагента.ПеречислениеВБюджет Тогда
			КодБК=ДоговорКонтрагента.КодБК;
			КодОКТМО=ДоговорКонтрагента.КодОКТМО;
		КонецЕсли;	
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
			СтатусСоставителя   = ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "01", "09");
			ПоказательОснования = ЭлементыФормы.ПоказательОснования.СписокВыбора[0].Значение;
			ПоказательТипа      = ЭлементыФормы.ПоказательТипа.СписокВыбора[0].Значение;
			ПоказательПериода   = "МС." + Формат(Месяц(Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Дата), "ЧГ=");
			
			УстановитьРеквизитыПоказателяПериода();
			
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			
			СтатусСоставителя   = ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "06", "17");
			ПоказательОснования = ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора[0].Значение;
			ПоказательТипа      = ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора[0].Значение;
			ПоказательПериода   = "";
			ПоказательНомера    = "0";
			
		Иначе
			
			СтатусСоставителя   = "08";
			ПоказательОснования = "0";
			ПоказательТипа      = "0";
			ПоказательПериода   = "0";
			ПоказательНомера    = "0";
			
		КонецЕсли;
		
	Иначе
		
		КодБК               = "";
		КодОКАТО            = "";
		СтатусСоставителя   = "";
		ПоказательОснования = "";
		ПоказательТипа      = "";
		ПоказательПериода   = "";
		ПоказательНомера    = "";
		ПоказательДаты      = "";
		КодОКТМО 			= "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеСписковРеквизитовПлатежейВБюджет()
	
	СписокКодовБК 	 = ВосстановитьЗначение("СписокСохраненныхКодовБК");
	Если ТипЗнч(СписокКодовБК) <> Тип("СписокЗначений") Тогда
		СписокКодовБК	 = Новый СписокЗначений;
	КонецЕсли;
	
	СписокКодовОКАТО = ВосстановитьЗначение("СписокСохраненныхКодовОКАТО");
	Если ТипЗнч(СписокКодовОКАТО) <> Тип("СписокЗначений") Тогда
		СписокКодовОКАТО = Новый СписокЗначений;
	КонецЕсли;
	
	ЭлементыФормы.СтатусСоставителя.СписокВыбора   = ПолучитьСписокСтатусовОтправителя();
	
	ЭлементыФормы.ПоказательОснования.СписокВыбора = ПолучитьСписокОснованийНалоговогоПлатежа();
	ЭлементыФормы.ПоказательТипа.СписокВыбора      = ПолучитьСписокПоказателейТипаНалоговогоПлатежа();
	
	//ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора = ПолучитьСписокОснованийТаможенногоПлатежа();
	//ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора      = ПолучитьСписокПоказателейТипаТаможенногоПлатежа();
	
	СписокПериодичностьУплаты = Новый СписокЗначений;
	СписокПериодичностьУплаты.Добавить("МС", "МС - месячный платеж");
	СписокПериодичностьУплаты.Добавить("КВ", "КВ - квартальный платеж");
	СписокПериодичностьУплаты.Добавить("ПЛ", "ПЛ - полугодовой платеж");
	СписокПериодичностьУплаты.Добавить("ГД", "ГД - годовой платеж"); 
	СписокПериодичностьУплаты.Добавить("-",  "Платеж по конкретной дате");
	СписокПериодичностьУплаты.Добавить("0",  "0 - значение не указывается");
	ЭлементыФормы.ПериодичностьУплаты.СписокВыбора = СписокПериодичностьУплаты;
	
КонецПроцедуры // ЗаполнениеСписковРеквизитовПлатежейВБюджет()

Процедура КонтрагентПриИзменении(Элемент)Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		ЭтотОбъект.СчетКонтрагента = ?(ЗначениеЗаполнено(ЭтотОбъект.Контрагент.ОсновнойБанковскийСчет)
		И ЭтотОбъект.Контрагент.ОсновнойБанковскийСчет.Владелец = ЭтотОбъект.Контрагент,
		ЭтотОбъект.Контрагент.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
	Иначе
		ЭтотОбъект.СчетКонтрагента = Неопределено;
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Элемент.Значение.ВАрхиве Тогда
			Предупреждение("Вы выбрали архивного контрагента. Его контактные данные также находятся в архиве", 120);
		КонецЕсли;
		
		Если НЕ Контрагент.СтавкаНДС.Пустая() Тогда
			СтавкаНДС = Контрагент.СтавкаНДС;
			ПересчитатьСуммуНДСДокумент();
		КонецЕсли;
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			И ЭтотОбъект.ПереводДСФизЛицамНаКарту) Тогда
			ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012"); // Выдача ден. средств под отчет
			Если ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
				ЭтотОбъект.Контрагент = КонтрагентПоОрганизации(ЭтотОбъект.Организация);
			КонецЕсли;
		ИначеЕсли НЕ ЭтотОбъект.Контрагент.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			ЭтотОбъект.СтатьяДвиженияДенежныхСредств = ЭтотОбъект.Контрагент.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) Тогда
			Если НЕ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
				И ЭтотОбъект.ПереводДСФизЛицамНаКарту) Тогда
				//+++АК SUVV 2018.02.28 ИП-00017941
				//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
				МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.Дата, ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
				//---АК SUVV
				Если МассивСчетов.Количество() = 1 Тогда
					ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]);
					СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
				КонецЕсли;
			Иначе
				Если ЭтотОбъект.ЭтоНовый()
					ИЛИ	НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1) Тогда
					//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
					//ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников; 	
					ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
					//---АК LAGP
				Иначе
					ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетныйСчет;
				КонецЕсли;
				СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 по 3 Цикл
			Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.Контрагент;
				Сообщить("Значение субконто " + Ном + " изменено на " + ЭтотОбъект.Контрагент);
			ИначеЕсли ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
				ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				Сообщить("Значение субконто " + Ном + " изменено на " + ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")
		И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		ЭтотОбъект.ФизЛицо = ЭтотОбъект.Контрагент;
	Иначе
		ЭтотОбъект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Для Ном = 1 по 3 Цикл
			Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.Контрагент;
				Сообщить("Значение субконто " + Ном + " изменено на " + ЭтотОбъект.Контрагент);
			КонецЕсли;
		КонецЦикла;
		
		ПересчитатьСуммуНДСДокумент();
	КонецЕсли;
	
	УстановитьСчетаУчетаБУ();
	
	//СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);
	Если ЭтотОбъект.ДоговорКонтрагента.Пустая() И НЕ ЭтотОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости") Тогда //+++АК LAGP 2018.11.02 б/н Письмо Юлии Полухановой, заполнение договора для ЗП по ведомости должно игнорироваться.
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
	УстановитьРеквизитыПолучателя();
	ДоговорКонтрагентаПриИзменении(Неопределено);
	//СформироватьНазначениеПлатежа();
	//
	//ЗаполнитьПеречислениеВБюджет();
	//
	//Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
	//	Для Ном = 1 по 3 Цикл
	//		Если НЕ ЗначениеЗаполнено(ЭлементыФормы["СубконтоДт" + Ном].Значение) Тогда
	//			Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
	//				ЭлементыФормы["СубконтоДт" + Ном].Значение = ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	Если Не Элемент.Значение.Пустая() Тогда
		Запрос = Новый Запрос;
		
		//+++susk
		//ИП-00016526
		
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Итог
		//|ИЗ
		//|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		//|ГДЕ
		//|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка";
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Итог,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000029""
		|				ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000030""
		|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыначисленийЗУП.пустаяссылка)
		|	КОНЕЦ КАК ВидНачисления
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000029""
		|				ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000030""
		|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыначисленийЗУП.пустаяссылка)
		|	КОНЕЦ";
		
		Ведомость = Элемент.Значение;
		
		Запрос.УстановитьПараметр("Ссылка",Ведомость);
		Выборка = Запрос.Выполнить().Выбрать();
		                                                
		ТекДанные = ЭлементыФормы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		
		//Выборка.Следующий();
		Если Выборка.Количество() > 1 Тогда
			Ответ = Вопрос("В выбранной ведомости используется несколько начислений (в т.ч. по мат. помощи)." 
					+ Символы.ПС + "Табличная часть будет разбита с учетом этого. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ =КодВозвратаДиалога.Нет Тогда
				Элемент.Значение = Документы.ЗарплатаКВыплатеОрганизаций.ПустаяСсылка();
				Возврат;
			КонецЕсли;
			
			НайдСтроки = ПеречислениеЗаработнойПлаты.НайтиСтроки(Новый Структура("Ведомость", Элемент.Значение));
			
			Для Каждого НСтр Из НайдСтроки Цикл
				ПеречислениеЗаработнойПлаты.Удалить(НСтр);
			КонецЦикла;
			
			Пока Выборка.Следующий() Цикл
				НовСтр = ПеречислениеЗаработнойПлаты.Добавить();
				НовСтр.СуммаПлатежа = Выборка.Итог;
				НовСтр.Ведомость = Ведомость;
				
				Если ЗначениеЗаполнено(Выборка.ВидНачисления) Тогда
					НовСтр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139397");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Выборка.Следующий();
			
			ТекДанные.СуммаПлатежа = Выборка.Итог;
			
			Если ЗначениеЗаполнено(Выборка.ВидНачисления) Тогда
				ТекДанные.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139397");
			КонецЕсли;
		КонецЕсли;		
		
		//СуммаДляЗаполнения = Выборка.Итог;
		//ЭлементыФормы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = СуммаДляЗаполнения;
		
		//---susk
		
		СформироватьНазначениеПлатежа();
		
	КонецЕсли;
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	СформироватьНазначениеПлатежа();
	
	Если НЕ ЗначениеЗаполнено(Организация) И НЕ ОтменаРедактирования Тогда
		Организация=Элемент.ТекущиеДанные.Ведомость.Организация;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВедомостьДляКлиентБанк(Кнопка)
	
	Если ЭтаФорма.Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	
	//
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ВедомостьКБ");
	
	Область = Макет.ПолучитьОбласть("Область1");
	ТабДок.Вывести(Область);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.СКС,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка КАК Счет,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходИзБанка.ПеречислениеЗаработнойПлаты КАК РасходИзБанкаПеречислениеЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходИзБанкаПеречислениеЗаработнойПлаты.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НомерСчета = Null Тогда
			Сообщить("Для сотрудника "+Выборка.ФизЛицо+" не выбран счет по умолчанию!",СтатусСообщения.Важное);
			Форма = Выборка.ФизЛицо.ПолучитьФорму("ФормаЭлемента");
			Форма.Открыть();
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.СКС) Тогда
			Сообщить("Для сотрудника "+Выборка.ФизЛицо+" в счете не заполнен СКС!",СтатусСообщения.Важное);
			Форма = Выборка.Счет.ПолучитьФорму("ФормаЭлемента");
			Форма.Открыть();
			Возврат;
		КонецЕсли;
		Область = Макет.ПолучитьОбласть("Область2");
		Область.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.ПолноеИмяФайла = Организация.Наименование+"_"+Формат(Год(Дата),"ЧГ=0")+Месяц(Дата)+День(Дата);
	Диалог.Расширение = "xls";
	Диалог.Фильтр    = "Файл Excel (*.xls)|*.xls";
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТабДок.Записать(Диалог.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	Исключение
		Сообщить("Не удалось записать файл на диск. Возможно, диск защищен от записи или недостаточно места на диске", СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(,Элемент,);
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    	= Истина;
	ЭлементОтбора.ПравоеЗначение	= Организация;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	Элемент.Значение = ФормаВыбора.ОткрытьМодально();
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = ЭтотОбъект.Ссылка;
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ЗаявкаНаРасходованиеСредств) Тогда
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	Иначе
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.ЗаявкаНаРасходованиеСредств);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если НЕ мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	//ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, Ссылка, ЭтотОбъект);
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);
	
КонецПроцедуры


Процедура ЦФОНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пФорма = Справочники.СтруктурныеЕдиницы.ПолучитьФормуВыбора(, Элемент);
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Значение 		= Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Использование 	= Истина;
	пФорма.Открыть();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)Экспорт
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента.Пустая())
		И НЕ ЭтотОбъект.Организация = ЭтотОбъект.ДоговорКонтрагента.Организация Тогда
		ЭтотОбъект.Организация = ЭтотОбъект.ДоговорКонтрагента.Организация;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;
	
	Для Ном = 1 по 3 Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы["СубконтоДт" + Ном].Значение) Тогда
			Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ЭлементыФормы["СубконтоДт" + Ном].Значение = ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьНазначениеПлатежа();
	
	ЗаполнитьПеречислениеВБюджет();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Элемент.Данные = "ДоговорКонтрагента" Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, ЭтотОбъект.Контрагент, ЭтотОбъект.ДоговорКонтрагента,
		УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ЭтотОбъект.ВидОперации), СтандартнаяОбработка);
	ИначеЕсли Элемент.Данные = "ДоговорКонтрагентаНДФЛ" Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Неопределено, ЭтотОбъект.ДоговорКонтрагентаНДФЛ,Неопределено, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
		И ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
		
		Если ЭтотОбъект.ЭтоНовый()
			ИЛИ	НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1) Тогда
			
			//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
			//ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников; 	//57.4
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
			//---АК LAGP

		Иначе		
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетныйСчет; 				//51.1
		КонецЕсли;
		
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом,
		ЭтотОбъект.СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		ЭтотОбъект.СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		ЭтотОбъект.СубконтоДт3, ЭлементыФормы.СубконтоДт3);
		
		ЭтотОбъект.СубконтоДт1 = ЭтотОбъект.Организация;
		ЭтотОбъект.СубконтоДт2 = ЭтотОбъект.СчетКонтрагента;
		Если ЭтотОбъект.ЭтоНовый()
			ИЛИ	НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1) Тогда
			ЭтотОбъект.СубконтоДт3 = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
		Иначе		
			ЭтотОбъект.СубконтоДт3 = ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетБанкНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пФорма = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора(, Элемент);
	пФорма.ПланСчетовСписок.Отбор.Ссылка.Значение 		= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	пФорма.ПланСчетовСписок.Отбор.Ссылка.Использование 	= Истина;
	пФорма.Открыть();
	
КонецПроцедуры

Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
		И ЭтотОбъект.ПереводДСФизЛицамНаКарту
		И ТипЗнч(ЭлементыФормы.СубконтоДт2.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЭтотОбъект.СубконтоДт2 = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеСредствПриИзменении(Элемент)
	
	Если ТипЗнч(ЗаявкаНаРасходованиеСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		ОтветственныйЗаявки = ЗаявкаНаРасходованиеСредств.Ответственный;
		ТорговыеТочкиСписок = ЗаявкаНаРасходованиеСредств.ТорговыеТочкиСписок;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводкахБУ(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводкахБУ(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	
	Если НЕ Элемент.Значение.Пустая()
		И НЕ ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ЭтотОбъект.Дата, ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если МассивСчетов.Количество() = 1 Тогда
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]);
			СчетУчетаРасчетовСКонтрагентомПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом);
		КонецЕсли;
	КонецЕсли;
	
	Для Ном = 1 по 3 Цикл
		Если ТипЗнч(ЭлементыФормы["СубконтоДт" + Ном].Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
			ЭлементыФормы["СубконтоДт" + Ном].Значение = Элемент.Значение;
			Сообщить("Значение субконто " + Ном + " изменено на " + Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
		ЭлементыФормы.НадписьСубконтоДт1.Видимость = Ложь;
		ЭлементыФормы.СубконтоДт1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДт2.Видимость = Ложь;
		ЭлементыФормы.СубконтоДт2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДт3.Видимость = Истина;
		ЭлементыФормы.СубконтоДт3.Видимость = Истина;
		СубконтоДт3 = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	НазначитьСчетУчета();
	УстановитьСчетаУчетаБУ();
	УстановитьСтатьюДДС_БУ_ПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПеречислениеВБюджет() Экспорт
	
	ПеречислениеВБюджет = ДоговорКонтрагента.ПеречислениеВБюджет;
	ПеречислениеВБюджетПриИзменении(НЕОПРЕДЕЛЕНО);
	
КонецПроцедуры	

Процедура КоманднаяПанель1ЗаполнитьФизЛица(Кнопка)
	
	Если Вопрос("Заполнить физлиц?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтотОбъект.ОплатаПоФизЛицам.Очистить();
	
	Для каждого СтрокаВедомости из ПеречислениеЗаработнойПлаты Цикл
		ТЧЗарплата = СтрокаВедомости.Ведомость.Зарплата;
		Для каждого СтрокаЗП Из ТЧЗарплата Цикл
			НоваяСтрока = ЭтотОбъект.ОплатаПоФизЛицам.Добавить();
			НоваяСтрока.Сумма	= СтрокаЗП.Сумма;
			НоваяСтрока.Физлицо	= СтрокаЗП.Физлицо;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереводДСФизЛицамНаКартуПриИзменении(Элемент)
	
	УстановитьВидимостьОплатаПоФизЛицам1();
	
	Если Элемент.Значение Тогда
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901012"); // Выдача ден. средств под отчет
		Если ЭтотОбъект.ЭтоНовый()
			ИЛИ НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1) Тогда
			//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
			//ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников; 	//57.4
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
			//---АК LAGP
		Иначе
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Финансовый.РасчетныйСчет; 				//51.1
		КонецЕсли;
		Если НЕ ЭтотОбъект.Организация.Пустая() Тогда
			ТекКонтрагент = КонтрагентПоОрганизации(ЭтотОбъект.Организация);
			Если НЕ ЭтотОбъект.Контрагент = ТекКонтрагент Тогда
				ЭтотОбъект.Контрагент 		= ТекКонтрагент;
				ЭтотОбъект.СчетКонтрагента 	= ?(ЗначениеЗаполнено(ТекКонтрагент.ОсновнойБанковскийСчет)
				И ТекКонтрагент.ОсновнойБанковскийСчет.Владелец = ТекКонтрагент, ТекКонтрагент.ОсновнойБанковскийСчет,
				Справочники.БанковскиеСчета.ПустаяСсылка());
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент)
				И НЕ ЭтотОбъект.Организация = ЭтотОбъект.Контрагент.Организация Тогда
				ЭтотОбъект.Организация = ЭтотОбъект.Контрагент.Организация;
				Если НЕ ЭтотОбъект.Организация.Пустая() Тогда
					ЭтотОбъект.СчетОрганизации = ЭтотОбъект.Организация.ОсновнойБанковскийСчет;
				Иначе
					ЭтотОбъект.СчетОрганизации = Неопределено;
				КонецЕсли;
				УстановитьСчетаУчетаБУ();
			КонецЕсли;
		КонецЕсли;
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом,
		ЭтотОбъект.СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		ЭтотОбъект.СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		ЭтотОбъект.СубконтоДт3, ЭлементыФормы.СубконтоДт3);
		ЭтотОбъект.СубконтоДт1 = ЭтотОбъект.Организация;
		ЭтотОбъект.СубконтоДт2 = ЭтотОбъект.СчетКонтрагента;
		Если ЭтотОбъект.ЭтоНовый()
			ИЛИ НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1) Тогда
			ЭтотОбъект.СубконтоДт3 = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
		Иначе
			ЭтотОбъект.СубконтоДт3 = ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаПоФизЛицам1ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = ЭлементыФормы.ОплатаПоФизЛицам1.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.НомерКорпоративнойКарты.Пустая() Тогда
		ТекДанные.НомерКорпоративнойКарты = ТекДанные.Физлицо.НомерКорпоративнойКарты;
	Иначе
		ТекДанные.Физлицо = ТекДанные.НомерКорпоративнойКарты.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаПоФизЛицам1КорпоративнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.КорпоративныеБанковскиеКарты.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.Элементы.Список.ТекущаяСтрока = ЭлементыФормы.ОплатаПоФизЛицам1.ТекущиеДанные.НомерКорпоративнойКарты;
	
	мСписок = ФормаВыбора.Список;
	ЭлементОтбора = мСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  	= Новый ПолеКомпоновкиДанных("Организация");   
	ЭлементОтбора.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= ЭтотОбъект.Организация;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СуммаДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеОтчетамиПереопределяемый.ОткрытьОтчетПоАренднымПлатежам(ЭтотОбъект.ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница);
	
КонецПроцедуры

Процедура ДействияФормыПараметрыАренды(Кнопка)
	
	Если ЭтоНовый() Тогда
		Сообщить("Данный механизм недоступен для новых документов!");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Если Вопрос("Внимание! Другие изменения будут потеряны! Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Прочитать();
	КонецЕсли;
	
	// Период регистрации
	НовыйПериод = ПериодРегистрации;
	
	БылиИзменения = Ложь;
	
	Если ВвестиЗначение(НовыйПериод, "Введите период аренды", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата)) И ПериодРегистрации<>НовыйПериод Тогда
		ПериодРегистрации = НовыйПериод;
		БылиИзменения = Истина;
	КонецЕсли;
	
	// Тип арендной платы
	Если (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
		ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору) Тогда	
		НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
	Иначе
		НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
	КонецЕсли;
	
	Если ВвестиЗначение(НовыйТипАренднойПлаты, "Введите тип арендной платы") Тогда
		Если НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю;
				БылиИзменения = Истина;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору ;
				БылиИзменения = Истина;
			КонецЕсли;
		ИначеЕсли НовыйТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю ;
				БылиИзменения = Истина;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору;
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	// Сохранение изменений
	Если БылиИзменения Тогда
		Попытка 
			ОбменДанными.Загрузка = Истина;
			Записать(РежимЗаписиДокумента.Запись);
			ОбменДанными.Загрузка = Ложь;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержаниеПоИспЛистамПриИзменении(Элемент)
	
	Организация		= УдержаниеПоИспЛистам.Организация;
	СуммаДокумента	= ПолучитьСуммуПоИсполнительному(Физлицо, УдержаниеПоИспЛистам);
	
КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
	
	СуммаДокумента = ПолучитьСуммуПоИсполнительному(Физлицо, УдержаниеПоИспЛистам);
	
КонецПроцедуры

Функция ПолучитьСуммуПоИсполнительному(Физлицо,Док)
	
	Стр = Док.ФизическиеЛица.Найти(ФизЛицо);
	Если НЕ Стр = Неопределено Тогда
		Возврат Стр.Сумма;
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции	

Процедура МатериальнаяПомощьПриИзменении(Элемент)
	СчетУчетаРасчетовСКонтрагентомБУ=ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям;
	СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения;
КонецПроцедуры

//АК++ tuga #13455 19-09-2016
Процедура ДействияФормыКонтрольДЗ(Кнопка)
	Если ЭтаФорма.Модифицированность Тогда
		Если Вопрос("Перед выполнением операции документ должен быть записан. Продолжить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Записать()
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	ОткрытьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ",Новый Структура("СписокДокументов",МассивСсылок),ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// pozm авансы не контролирем
	ЭтоАванс = Аванс;
	Если НЕ ЭтоАванс Тогда
		Если ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств)
				И ТипЗнч(ЗаявкаНаРасходованиеСредств) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы")
				И ЗначениеЗаполнено(УИН_СтрокиОснования) Тогда
			ОплачиваемаяСтрока = ЗаявкаНаРасходованиеСредств.Оплата.Найти(УИН_СтрокиОснования, "УИН_Строки");
			Если ОплачиваемаяСтрока <> Неопределено Тогда
				ЭтоАванс = ОплачиваемаяСтрока.Аванс;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств)
				И ТипЗнч(ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			ЭтоАванс = ЗаявкаНаРасходованиеСредств.Аванс;
		ИначеЕсли ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) И ТипЗнч(ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") И ЗначениеЗаполнено(УИН_СтрокиОснования) Тогда
			ОплачиваемаяСтрока=ЗаявкаНаРасходованиеСредств.УслугиПоСчетам.Найти(УИН_СтрокиОснования,"УИН_Строки");
			Если ОплачиваемаяСтрока<>Неопределено Тогда
				ЭтоАванс=ОплачиваемаяСтрока.Аванс;
			КонецЕсли;	
		КонецЕсли;	
		Аванс = ЭтоАванс;
	КонецЕсли;	
	//AK++ TUGA
	Если Не Отказ и мПроведение И Не ЭтоАванс И Не ЭтотОбъект.Оплачено Тогда
		ФормаКонтроль =	ПолучитьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ");
		Если ФормаКонтроль.ПревышенЛимит(Ссылка,Отказ) Тогда
			ФормаКонтроль.Открыть();
			Если Отказ Тогда
				Сообщить("Превышение допустимого лимита дебиторской задолженности больше разрешенного  значения. Документ не проведен");
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
	//AK--
	
КонецПроцедуры
//AK--


Процедура ОтправитьПисьмоПоСделкам(Кнопка) Экспорт
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Отправить письмо поставщику оборудования с данными по сделкам?"";";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоСРасшифровкойСделки(Истина);	
	
КонецПроцедуры

//Минеев 2017-01-17
Процедура ЗаполнитьДанныеБУ()
	
	Если (СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудниковДо2018) //+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
		И ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.ФизическиеЛица")
		И ЗначениеЗаполнено(СубконтоДт3) Тогда
		
		//+++АК LAGP 2018.02.18 ИП-00017918
		//СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
		СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.ПереводыНаКартыСотрудников;
		//---АК LAGP
		
		СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000021"); // пополнение расчетного счета
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СубконтоДт3ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	ЗаполнитьДанныеБУ();
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура СубконтоДт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура СубконтоДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

Процедура СубконтоДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

//+++АК LAGP 2018.03.27 ИП-00017936 СубконтоБУ для обмена с БП 
Процедура СчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	УстановитьВидимостьСчетовИСубконтоБУПриПрочихОперациях();	
	
	Попытка //в хозрасчетном плане счетов билиберда, почти все субконто <Неизвестная характеристика>
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
			СубконтоДт1БУ, ЭлементыФормы.СубконтоДт1БУ,
			СубконтоДт2БУ, ЭлементыФормы.СубконтоДт2БУ,
			СубконтоДт3БУ, ЭлементыФормы.СубконтоДт3БУ);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

//+++АК ILIK 2018.06.22 ИП-00018861.01
Процедура СформироватьНазначениеПлатежаНажатие(Элемент)
	Если Не СчетКонтрагента.Пустая() Тогда
		НазначениеПлатежа = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "ТекстНазначения")) + " "
						  + "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00");
		НазначениеПлатежа = УдалитьЛишниеСимволы(НазначениеПлатежа);
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.06.22 ИП-00018861.01
// Заменяет на пробелы символы, которых нет на клавиатуре
//
Функция УдалитьЛишниеСимволы(Знач СтрокаДляОбработки)
	Для й = 1 По СтрДлина(СтрокаДляОбработки) Цикл
		Код = КодСимвола(СтрокаДляОбработки, й);
		Если Не ((Код >= 32 И Код <= 126)
			 Или (Код >= 1040 И Код <= 1103)
			 Или Код = 1025 Или Код = 1105 Или Код = 8470) Тогда
			СтрокаДляОбработки = Лев(СтрокаДляОбработки, й - 1) + " " + Сред(СтрокаДляОбработки, й + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаДляОбработки);
КонецФункции

//+++АК LATV 2018.09.04 ИП-00019698
Процедура ВыгрузитьВБП(Кнопка)

	Если Не ОбменСБП2_0.ПроверкаПередВыгрузкой(Ссылка.Пустая(), Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПравил = "РасходИзБанка";
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт Тогда
		ИмяПравил = "РасходИзБанка_СписаниеСКорпоративныхКарт";
	КонецЕсли;
	ОбменСБП2_0.ВыгрузитьДокументВБП(ИмяПравил, "РасходИзБанка", Ссылка);

КонецПроцедуры

ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Почтой");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Телеграфом");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Электронно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Срочно");

ЗаполнениеСписковРеквизитовПлатежейВБюджет();
