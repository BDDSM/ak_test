
Перем АвтоЗначенияРеквизитов Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПровереныОстатки;


Функция ПолучитьСотрудника(мОрганизация, мФизлицо)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, мОрганизация);
	Запрос.УстановитьПараметр("Физлицо"		, мФизлицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.Организация = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции
		
Процедура СоздатьЗадачуПоДокументу(пДокумент, пВидЗадачи, пИсполнитель, пНаименование = "") Экспорт
	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	обЗадача.ВидЗадачи = пВидЗадачи;
	обЗадача.Дата = ТекущаяДата();
	обЗадача.ОбъектЗадачи = пДокумент;
	обЗадача.Ответственный = Ответственный;	
	обЗадача.Исполнитель = пИсполнитель;	
	//обЗадача.Организация = пДокумент.Организация;
	обЗадача.Оповещение = Истина;
	обЗадача.СрокИсполнения = КонецДня(ТекущаяДата());
	обЗадача.СрокОповещения = ТекущаяДата()+10;
	обЗадача.Контрагент = ЭтотОбъект.Контрагент;
	Если пНаименование = "" Тогда
		обЗадача.Наименование = "" + пДокумент + " оплачена";
	Иначе
		обЗадача.Наименование = пНаименование
	КонецЕсли;
	Попытка
		обЗадача.Записать();
	Исключение
		Сообщить(ОписаниеОшибки())
	КонецПопытки
	
	//Задача = обЗадача.Ссылка;
	//Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура СоздатьЗадачуНеЗаписанДокумент()Экспорт
	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	обЗадача.ВидЗадачи = Справочники.ВидыЗадачПользователей.НеЗаписанПлатеж;
	обЗадача.Дата = ТекущаяДата();
	обЗадача.ОбъектЗадачи = ЗаявкаНаРасходованиеСредств;
	обЗадача.Ответственный = Ответственный;	
	обЗадача.Исполнитель = Ответственный;	
	//обЗадача.Организация = пДокумент.Организация;
	обЗадача.Оповещение = Истина;
	обЗадача.СрокИсполнения = КонецДня(ТекущаяДата());
	обЗадача.СрокОповещения = ТекущаяДата()+10;
	обЗадача.Контрагент = ЭтотОбъект.Контрагент;
	ТекстОшибки = "Не записан платеж на основании "+Строка(ЭтотОбъект.ЗаявкаНаРасходованиеСредств)+" на сумму "+Строка(ЭтотОбъект.СуммаДокумента);
	обЗадача.Наименование = ТекстОшибки;
	обЗадача.Записать();
	сообщить("Ок");
	//Задача = обЗадача.Ссылка;
	//Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

// Возвращает список показателей основания п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - платежи текущего года");
	Список.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	Список.Добавить("БФ","БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	Список.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	Список.Добавить("РС", "РС - погашение рассроченной задолженности");
	Список.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Список.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Список.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	Список.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	Список.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Список.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийНалоговогоПлатежа()

// Возвращает список показателей основания п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ДЕ", "ДЕ - таможенная декларация");
	Список.Добавить("ПО", "ПО - таможенный приходный ордер");
	Список.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)");
	Список.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей");
	Список.Добавить("ИД", "ИД - исполнительный документ");
	Список.Добавить("ИП", "ИП - инкассовое поручение");
	Список.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей");
	Список.Добавить("БД", "БД - документы бухгалтерских служб таможенных органов");
	Список.Добавить("ИН", "ИН - документ инкассации");
	Список.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийТаможенногоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("НС", "НС - уплата налога или сбора");
	Список.Добавить("ПЛ", "ПЛ - уплата платежа");
	Список.Добавить("ГП", "ГП - уплата пошлины");
	Список.Добавить("ВЗ", "ВЗ - уплата взноса");
	Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
	Список.Добавить("АШ", "АШ - административные штрафы");
	Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаНалоговогоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - текущий платеж");
	Список.Добавить("ШТ", "ШТ - уплата штрафа");
	Список.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");

	Список.Добавить("0"	, "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями статуса отправителя
//
Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - организация федеральной почтовой связи, оформившая расчетный документ на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
	Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
	Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
	Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
	Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
	Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами без открытия банковского счета");
	Список.Добавить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
	Список.Добавить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
	Список.Добавить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
	Список.Добавить("19", "19 - организации, оформившие расчетный документ на перечисление на счет органа Федерального казначейства денежных средств, удержанных из заработка (дохода) должника - физического лица в счет погашения задолженности по таможенным платежам");
	Список.Добавить("20", "20 - кредитная организация, оформившая расчетный документ по каждому платежу физического лица на перечисление таможенных платежей, уплачиваемых физическими лицами без открытия банковского счета");
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, Знач ПрефиксОрганизации)
	
	//НомерДок = СокрЛП(НомерДокумента);
	//
	//ОбщегоНазначения.ДобавитьПрефиксУзла(ПрефиксОрганизации);

	//// удаление префикса из номера документа
	//Если Найти(НомерДок, ПрефиксОрганизации)=1 Тогда 
	//	НомерДок = Сред(НомерДок, СтрДлина(ПрефиксОрганизации)+1);
	//КонецЕсли;

	//// так же, может остаться "минус" впереди
	//Если Лев(НомерДок, 1) = "-" Тогда
	//	НомерДок = Сред(НомерДок, 2);
	//КонецЕсли;

	//// удаление ведущих нулей
	//Пока Лев(НомерДок, 1)="0" Цикл
	//	НомерДок = Сред(НомерДок, 2);
	//КонецЦикла;
	//
	//НомерДок = Число(НомерДок);
	//Пока НомерВхСуществует(НомерДок) Цикл
	//	НомерДок = НомерДок + 1;
	//КонецЦикла;
	
	НомерДок = ПолучитьМинНомер();
	//Пока НомерВхСуществует(НомерДок) Цикл
		НомерДок = НомерДок + 1;
	//КонецЦикла;
	
	Если НомерДок >= 1000 Тогда
		НомерДок = 1;
	КонецЕсли;
	
	Возврат НомерДок;
	
КонецФункции

Функция НомерВхСуществует(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, Организация);
	Запрос.УстановитьПараметр("НомерДок"	, Строка(НомерДок));
	Запрос.УстановитьПараметр("ДатаДок"		, НачалоГода(Дата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходИзБанка.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Организация = &Организация
	|	И РасходИзБанка.НомерВходящегоДокумента = &НомерДок
	|	И НАЧАЛОПЕРИОДА(РасходИзБанка.Дата, ГОД) = &ДатаДок";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьМинНомер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, Организация);
	Запрос.УстановитьПараметр("Год"			, Год(Дата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящиеНомераДокументовИсхПлатежек.Номер
	|ИЗ
	|	РегистрСведений.ВходящиеНомераДокументовИсхПлатежек КАК ВходящиеНомераДокументовИсхПлатежек
	|ГДЕ
	|	ВходящиеНомераДокументовИсхПлатежек.Организация = &Организация
	|	И ВходящиеНомераДокументовИсхПлатежек.Год = &Год";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Номер, 1);
	
КонецФункции

Функция ПроверитьЛимиты() Экспорт
	//tuga Проверка для переходного периода - не проверять существующие документы
	Если ЭтотОбъект.Дата >= Дата(2017,04,26) и ЭтотОбъект.Дата<Дата(2017,04,28) Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка)Тогда
			Возврат Истина
		КонецЕсли
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) Тогда
		Если Лев(ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код,4)="9010"Тогда
			Возврат Истина
		КонецЕсли;
	КонецЕсли;
			
	Если ТипЗнч(ЭтотОбъект.ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.СделкаСПоставщиком")Тогда
		Возврат Истина
	КонецЕсли;
	Для Каждого СтрокаСЕ из ЭтотОбъект.СтруктурныеЕдиницы Цикл
		Если Не СтрокаСЕ.Сделка.Пустая() Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	Если Ак_КонтрольЗадолженности.РасчетыПоАрендеПоСтатье(ЭтотОбъект.СтатьяДвиженияДенежныхСредств)ТОгда
		Возврат Истина
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Возврат Истина
	КонецЕсли;
	Если Не	(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками
				ИЛИ ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами)Тогда
		Возврат Истина
	КонецЕсли;
	ЭтоАванс=Аванс;
	Если Не ЭтоАванс Тогда
		Если ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) И ТипЗнч(ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") И ЗначениеЗаполнено(УИН_СтрокиОснования) Тогда
			ОплачиваемаяСтрока=ЗаявкаНаРасходованиеСредств.Оплата.Найти(УИН_СтрокиОснования,"УИН_Строки");
			Если ОплачиваемаяСтрока<>Неопределено Тогда
				ЭтоАванс=ОплачиваемаяСтрока.Аванс;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) И ТипЗнч(ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			ЭтоАванс = ЗаявкаНаРасходованиеСредств.Аванс;
		ИначеЕсли ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) И ТипЗнч(ЗаявкаНаРасходованиеСредств)=Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") И ЗначениеЗаполнено(УИН_СтрокиОснования) Тогда
			ОплачиваемаяСтрока=ЗаявкаНаРасходованиеСредств.УслугиПоСчетам.Найти(УИН_СтрокиОснования,"УИН_Строки");
			Если ОплачиваемаяСтрока<>Неопределено Тогда
				ЭтоАванс=ОплачиваемаяСтрока.Аванс;
			КонецЕсли;	
		КонецЕсли;	
		Аванс = ЭтоАванс;
	КонецЕсли;	
	Если ЭтоАванс Тогда
		Возврат Истина
	КонецЕсли;
	//+++АК Познахарёв 2017-05-09
	//ДанныеДокумента = Новый Структура;
	//ДанныеДокумента.Вставить("Контрагент",Контрагент);
	//ДанныеДокумента.Вставить("СуммаДокумента",СуммаДокумента);
	//ДанныеДокумента.Вставить("СчетРасчетов",СчетУчетаРасчетовСКонтрагентом);
	//ДанныеДокумента.Вставить("Организация",Организация);
	//ДанныеДокумента.Вставить("Дата",Дата);
	//Если ЭтотОбъект.Ссылка = Неопределено Тогда
	//	ЭтотОбъект.УстановитьСсылкуНового(Документы.РасходИзБанка.ПолучитьСсылку(Новый УникальныйИдентификатор));
	//	ДанныеДокумента.Вставить("Ссылка",ЭтотОбъект.ПолучитьСсылкуНового());
	//Иначе
	//	ДанныеДокумента.Вставить("Ссылка",ЭтотОбъект.Ссылка)
	//КонецЕсли;
	//ДанныеДокумента.Вставить("Заявка",ЗаявкаНаРасходованиеСредств);
	//МассивСсылок = Новый Массив;
	//МассивСсылок.Добавить(ДанныеДокумента.Ссылка);
	//Лимиты = АК_КонтрольЗадолженности.ДоступныеЛимитыДЗ(МассивСсылок,Дата,ДанныеДокумента);
	//Если Лимиты.Количество()>0 Тогда
	//	ДопустимоеПревышение = АК_КонтрольЗадолженности.ДопустимоеПревышениеПриПроведении(ЭтотОбъект.Дата);
	//	Если Не ЗначениеЗаполнено(ДопустимоеПревышение) Тогда
	//		ДопустимоеПревышение=0;
	//	КонецЕсли;	
	//	Если ДопустимоеПревышение=0 Тогда
	//		Возврат Лимиты[0].ПревышениеЛимита<=0
	//	Иначе
	//		Возврат Лимиты[0].ПревышениеЛимита<=ДопустимоеПревышение
	//	КонецЕсли;
	//Иначе
	//	Возврат Ложь
	//КонецЕсли;
	ПревышениеЛимита = АК_КонтрольЗадолженности.ПревышениеЛимитаПоДокументу(ЭтотОбъект.Ссылка,Контрагент,Дата)+?(ЭтоНовый(),ЭтотОбъект.СуммаДокумента,0);
	Если ПревышениеЛимита > 0 Тогда
		Возврат Ложь;
		//ДопустимоеПревышение = АК_КонтрольЗадолженности.ДопустимоеПревышениеПриПроведении(ЭтотОбъект.Дата);
		//Если Не ЗначениеЗаполнено(ДопустимоеПревышение) Тогда
		//	ДопустимоеПревышение=0;
		//КонецЕсли;	
		//Если ДопустимоеПревышение=0 Тогда
			//Возврат ПревышениеЛимита=0
		//Иначе
		//	Возврат ПревышениеЛимита<=ДопустимоеПревышение
		//КонецЕсли;
	Иначе
		Возврат Истина
    КонецЕсли;	
	//---АК Познахарёв 2017-05-09
КонецФункции


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//+++АК POZM 2018.04.30 ИП-00018543
	// Переделываем согласно календарю, на ближайший рабочий день
	ТекстЗапроса="ВЫБРАТЬ
	             |	МИНИМУМ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДатаКалендаря
	             |ИЗ
	             |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	             |ГДЕ
	             |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаКалендаря
	             |	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря < ДОБАВИТЬКДАТЕ(&ДатаКалендаря, МЕСЯЦ, 1)
	             |	И РегламентированныйПроизводственныйКалендарь.Пятидневка = 1";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаКалендаря",НачалоДня(ЭтотОбъект.Дата));
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Если НачалоДня(ЭтотОбъект.Дата) <> Выборка.ДатаКалендаря Тогда
				ЭтотОбъект.Дата = Выборка.ДатаКалендаря;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	//---АК POZM
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИзменениеПроведенностиРасходаИзБанка, Ложь) Тогда
			Сообщить("У вас нет прав проводить или отменять проведение документа расход из банка");
			Отказ = Истина;
		КонецЕсли;	
		
		//+++АК ILIK 2018.08.01 ИП-00019392
		ПроверитьВозможностьРедактированияПеречисленияЗП(Отказ);
		//---АК ILIK
	КонецЕсли;	
	
	Если ТипЗнч(ЭтотОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ЭтотОбъект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
		Если ЭтотОбъект.ДоговорКонтрагента.Организация <> ЭтотОбъект.Организация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация договора не соответствует организации документа");
			Отказ = Истина;		
		КонецЕсли;
		Если ЭтотОбъект.ДоговорКонтрагента.Владелец <> ЭтотОбъект.Контрагент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Владелец договора не соответствует контрагенту документа");
			Отказ = Истина;		
		КонецЕсли;
		Если ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратНалога Тогда
			СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ЭтотОбъект.ВидОперации);
			Если СписокВидовДоговора.НайтиПоЗначению(ЭтотОбъект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Вид договора не соответствует виду операции документа");
				Отказ = Истина;		
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)");
		//Отказ = Истина;	//+++АК LAGP 2018.08.22 ИП-00019515.01 При загрузке из клиент-банка, необходимо создание таких документов
	КонецЕсли;
		
	Если ЭтотОбъект.ЭтоНовый()
			И ЗначениеЗаполнено(ЭтотОбъект.ЗаявкаНаРасходованиеСредств)
			И ТипЗнч(ЭтотОбъект.ЗаявкаНаРасходованиеСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		ЕстьПравоНаВвод = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ВводЗаявокНаРасходование2017, Ложь);
		Если НЕ ЕстьПравоНаВвод Тогда
			Сообщить("Создание платёжек на основании заявок на расходование средств больше не доступно. Обратитесь к администратору.");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
		ЭтотОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно Тогда
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.ЭквайрингРасшифровка.Итог("СуммаДокумента");
	КонецЕсли;	
	
	
	////+++AK tuga 13455 25/04/17
	Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		ДатаНачалаКонтроля = ОбщегоНазначения.ПолучитьЗначениеКонстанты("КонтрольДЗПриЗаписиНачало");
		Если НЕ ДатаНачалаКонтроля = Дата(1, 1, 1) Тогда
			ОшибкаЛимиты = НЕ ПроверитьЛимиты();
			Отказ = Отказ
						ИЛИ (ОшибкаЛимиты
								И ДатаНачалаКонтроля <> Дата(1, 1, 1)
								И ДатаНачалаКонтроля <= ЭтотОбъект.Дата);
			Если ОшибкаЛимиты Тогда
				ТекстОшибки = "Не записан платеж на основании " + Строка(ЭтотОбъект.ЗаявкаНаРасходованиеСредств) + " на сумму " + Строка(ЭтотОбъект.СуммаДокумента);
				
				Сообщить("Для документа " + Строка(ЭтотОбъект.НомерВходящегоДокумента) + " от " + Строка(ЭтотОбъект.Дата) + " превышены лимиты деб.задолженности");
				ПараметрыФЗ = Новый Массив;
				ПараметрыФЗ.Добавить(ЭтотОбъект.ЗаявкаНаРасходованиеСредств);
				ПараметрыФЗ.Добавить(ЭтотОбъект.СуммаДокумента);
				Если ЭтотОбъект.Ответственный.Пустая() Тогда
					ПараметрыФЗ.Добавить(ПараметрыСеанса.ТекущийПользователь);
				Иначе
					ПараметрыФЗ.Добавить(ЭтотОбъект.Ответственный);
				КонецЕсли;
				ПараметрыФЗ.Добавить(ЭтотОбъект.Контрагент);
				ФоновыеЗадания.Выполнить("АК_КонтрольЗадолженности.СоздатьЗадачуНеЗаписанДокументПлатежа", ПараметрыФЗ, Новый УникальныйИдентификатор, "Создать задачу");
			КонецЕсли;
		КонецЕсли;
		мПровереныОстатки = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("Документ не записан")
	КонецЕсли;
			
	//mika Дата: 2017.11.16 ИП-00017273
	//Отключить контроль "Стоп-оплат" для импорта банковской выписки
	ИмпортБанковскойВыписки = ЭтотОбъект.ДополнительныеСвойства.Свойство("ИмпортБанковскойВыписки"); 
	//mika

	//+++АК sils 31.07.2017 ИП-00015834
	Если Не ИмпортБанковскойВыписки И НЕ Оплачено Тогда //+++АК LAGP 2018.03.02 ИП-00018029 Для уже оплаченых, стоп-оплаты не важны
		ТЗ = РегистрыСведений.СведенияОСтопОплате.СрезПоследних(КонецДня(ЭтотОбъект.Дата));
		Если ТЗ.Количество() > 0 Тогда
			//+++АК sils 04.09.2018 ИП-00019634
			//стр = ТЗ.Найти(Контрагент, "Контрагент");
			стр = Неопределено;
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", Контрагент);
			Если ЗначениеЗаполнено(Организация) Тогда
				Отбор.Вставить("Организация", Организация);
				МассивСтрок = ТЗ.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 0 Тогда
					стр = МассивСтрок[0];
				КонецЕсли;
			КонецЕсли;
			Если стр = Неопределено Тогда
				//+++АК sils 09.11.2018 ИП-00019634.02
				флЕстьСтрокиСОрганизацией = Ложь;
				МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
				Для каждого стр2 из МассивСтрок Цикл
					Если стр2.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
						флЕстьСтрокиСОрганизацией = Истина;
					КонецЕсли;
				КонецЦикла;
				Если не флЕстьСтрокиСОрганизацией Тогда
				//---АК
				Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				МассивСтрок = ТЗ.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 0 Тогда
					стр = МассивСтрок[0];
				КонецЕсли;
				//+++АК sils 09.11.2018 ИП-00019634.02
				КонецЕсли;
				//---АК
			КонецЕсли;
			//---АК
			Если стр <> Неопределено Тогда
				Если стр.Подтверждено Тогда
					Сообщить("По контрагенту " + СокрЛП(ЭтотОбъект.Контрагент) + " установлена стоп оплата. Документ не записан!");
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//---АК
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
			И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеПлатежаПоАрендеВечером, Ложь) = Ложь
			И (ЭтотОбъект.ЭтоНовый()
				ИЛИ НачалоДня(ЭтотОбъект.Дата) = НачалоДня(ТекущаяДата()))
			И ТекущаяДата() > НачалоДня(ТекущаяДата()) + 16*3600
			//+++АК POZM 2018.08.15 ИП-00019559 
			И Не ЗначениеЗаполнено(ЭтотОбъект.ДатаОплаты)
			//---АК POZM 
			И НЕ Отказ Тогда
		//+++АК sils 20.02.2018 ИП-00017906
		// Обработка создает док в пятницу в 18:02. Ставит дату - понедельник.
		// Док не смотрит на дату, указанную обработкой и ставит дату - субботу. Делаем умнее. Учим пользоваться календарем.
		ЭтотОбъект.Дата = ЗаполнениеДокументов.ОпределитьДату(ТекущаяДата(), 1);
		//---АК
		Сообщить("Документы позднее 16:00 проводятся следующей датой. Дата изменена на " + Формат(ЭтотОбъект.Дата, "ДЛФ=Д") + ".");
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Попытка
				ОтправитьПисьмоСРасшифровкойСделки();
			Исключение	
				Сообщить("Письмо по сделкам не отправлено");
			КонецПопытки	
		КонецЕсли;	
	КонецЕсли;
	
	//+++АК pozm ИП-00016666 08.10.2017
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ПлановаяДатаПоступления) Тогда
		ЭтотОбъект.ПлановаяДатаПоступления = ЭтотОбъект.Дата + (ЭтотОбъект.ДоговорКонтрагента.СрокПоставки)*60*60*24;
	КонецЕсли;	
	//---АК pozm ИП-00016666 08.10.2017
	
	//+++АК pozm ИП-00016944 11.10.2017
	ЕстьПравоЛюбаяДата = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.УстановкаЛюбойДатыВПлатёжках, Ложь);
	Если НЕ ЕстьПравоЛюбаяДата Тогда
		ТекДата = ТекущаяДата();
		Если (ТекДата>НачалоДня(ТекДата)+16*60*60 И ЭтотОбъект.Дата <= КонецДня(ТекДата))  Тогда
			Если ЭтоНовый() Тогда
				ЭтотОбъект.Дата = КонецДня(ТекДата)+9*60*60+1; // на 9 утра след.дня новые документы
				Сообщить("После 16.00 платежки не создаются. Дата документа автоматически скорректирована на завтра");
			ИначеЕсли ЭтотОбъект.Дата <> ЭтотОбъект.Ссылка.Дата Тогда
				Отказ = Истина;
				Сообщить("Нельзя записать платёжку на сегодня и раньше, уже больше 16ти часов.");
			КонецЕсли;	
		ИначеЕсли ЭтотОбъект.Дата <= НачалоДня(ТекДата) Тогда
			Если ЭтоНовый() Тогда
				Отказ = Истина;
				Сообщить("У вас нет прав на запись документов задним числом");
			ИначеЕсли НачалоДня(ЭтотОбъект.Дата)<>НачалоДня(ЭтотОбъект.Ссылка.Дата) Тогда
				Отказ = Истина;
				Сообщить("У вас нет прав на запись документов задним числом");	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	//---АК pozm ИП-00016944 11.10.2017
	
	//+++АК POZM 2018.03.16 ИП-00018101 
	Если	ЭтотОбъект.Дата>=Дата(2018,3,1) И Не ЗначениеЗаполнено(ЭтотОбъект.СубконтоДт3) И ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиФакторинг Тогда
		ЭтотОбъект.СубконтоДт3 = ЭтотОбъект.ДоговорКонтрагента;
	КонецЕсли;			
	//---АК POZM 
	
	//+++АК LAGP 2018.06.05 ИП-00018530 Настройка контроля соответствия получателя ИП и номера счета для ИП
	Если НЕ Документы.ЗаявкаНаУслугиМатериалы.СчётИПКорректный(ЭтотОбъект.Контрагент, ЭтотОбъект.СчетКонтрагента) Тогда
		Сообщить("Банковский счёт получателя (" + ЭтотОбъект.Контрагент + ") не совпадает с маской счетов ""40802"" свойственной индивидуальным предпринимателям.");		
	КонецЕсли;
	//---АК LAGP	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НомерВходящегоДокумента) Тогда
		
		ЭтотОбъект.НомерВходящегоДокумента = ПолучитьНомерВФорматеОбмена(ЭтотОбъект.Номер, ЭтотОбъект.Организация.Префикс);
		ЭтотОбъект.Записать();
		
		Набор = РегистрыСведений.ВходящиеНомераДокументовИсхПлатежек.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Значение 		= Организация;
		Набор.Отбор.Организация.Использование 	= Истина;
		Набор.Отбор.Год.Значение 		= Год(ЭтотОбъект.Дата);
		Набор.Отбор.Год.Использование 	= Истина;
		
		Запись = Набор.Добавить();
		Запись.Организация 	= Организация;
		Запись.Год 			= Год(ЭтотОбъект.Дата);
		Запись.Номер 		= ЭтотОбъект.НомерВходящегоДокумента;
		Набор.Записать(Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаявкаНаРасходованиеСредств)
			И ТипЗнч(ЭтотОбъект.ЗаявкаНаРасходованиеСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И ЭтотОбъект.Оплачено
			И НЕ ЭтотОбъект.ЗаявкаНаРасходованиеСредств.УведомлениеОтветственномуОтправлено Тогда
		Попытка
			УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявкеОтветственному(ЭтотОбъект.ЗаявкаНаРасходованиеСредств);
			//УведомлениеОтветственномуОтправлено = Истина;
		Исключение
			//УведомлениеОтветственномуОтправлено = Ложь;
			Сообщить("Не удалось отправить уведомление о заявке. Обратитесь к администратору!", СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		ЭтотОбъект.Организация 					= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Контрагент 					= ДанныеЗаполнения.Контрагент;
		ЭтотОбъект.ДоговорКонтрагента 			= ДанныеЗаполнения.ДоговорКонтрагента;
		ЭтотОбъект.ЦФО 							= ДанныеЗаполнения.ЦФО;
		ЭтотОбъект.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		ЭтотОбъект.СтавкаНДС 					= ДанныеЗаполнения.СтавкаНДС;
		ЭтотОбъект.СуммаДокумента 				= ДанныеЗаполнения.СуммаДокумента - ДанныеЗаполнения.СуммаНДФЛ;
		ЭтотОбъект.Комментарий 					= ДанныеЗаполнения.Организация;
		ПересчитатьСуммуНДСДокумент();
		
		//Если НЕ СтатьяДвиженияДенежныхСредств.Код = "139320" Тогда
		//	СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		//Иначе  // Оплата корпоративной связи
			ЭтотОбъект.СчетКонтрагента	= ДанныеЗаполнения.БанковскийСчетПолучателя;
		//КонецЕсли;
		
		Если СтатьяДвиженияДенежныхСредств.Код = "131010" Тогда //Оплата аренды (торговых точек и магазинов)
			Если ДанныеЗаполнения.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю;
			ИначеЕсли ДанныеЗаполнения.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю;
			КонецЕсли;
		ИначеЕсли СтатьяДвиженияДенежныхСредств.Код = "131011" Тогда  //Оплата депозита за аренду (торговых точек и магазинов)
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю;
		ИначеЕсли СтатьяДвиженияДенежныхСредств.Код = "139399" Тогда  //Оплата госпошины и прочих расходов для юридического сопровождения	
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли;
	
		СчетОрганизации = ДанныеЗаполнения.БанковскийСчетКасса;
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		
		АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
									Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
		ТекстПлательщика 	= АвтоЗначенияРеквизитов.ТекстПлательщика;
		ИННПлательщика   	= АвтоЗначенияРеквизитов.ИННПлательщика;
		КПППлательщика   	= АвтоЗначенияРеквизитов.КПППлательщика;
		ТекстПолучателя 	= АвтоЗначенияРеквизитов.ТекстПолучателя;
		ИННПолучателя   	= АвтоЗначенияРеквизитов.ИННПолучателя;
		КПППолучателя   	= АвтоЗначенияРеквизитов.КПППолучателя;
		
		СчетБанк 					= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		ЗаявкаНаРасходованиеСредств = ДанныеЗаполнения.Ссылка;
		ПериодРегистрации 			= НачалоМесяца(ДанныеЗаполнения.НачалоПериодаАренды);
		
		Если ДоговорКонтрагента.ПеречислениеВБюджет Тогда
			КодБК 		= ДоговорКонтрагента.КодБК;
			КодОКТМО 	= ДоговорКонтрагента.КодОКТМО;
		КонецЕсли;
		
		//Если ДанныеЗаполнения.ТорговыеТочки.Количество() = 1 Тогда
		//	ТорговаяТочкаЗаявки = ДанныеЗаполнения.ТорговыеТочки[0].ТорговаяТочка;
		//КонецЕсли;
		
		//Минеев доработал по проьбе Андросовой 2017-01-09
		//если платят контрагенту и он арендодатель, тогда заполненность суммы ндфл не важна
		Если ДанныеЗаполнения.СуммаНДФЛ = 0
			ИЛИ (ТипЗнч(ДанныеЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ДанныеЗаполнения.Контрагент.ЯвляетсяАрендодателем) Тогда
			//+++АК SUVV 2018.02.28 ИП-00017941
			//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(СтатьяДвиженияДенежныхСредств);
			МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Дата, СтатьяДвиженияДенежныхСредств);
			//---АК SUVV
			Если МассивСчетов.Количество() = 1 Тогда
				ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]);
			ИначеЕсли МассивСчетов.Количество() > 1 Тогда
				ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]);
			Иначе
				ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ПрочаяЗадолженность; //60.4
			КонецЕсли;
			Если ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда
				Для Ном = 1 по ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() Цикл
					ТекВидСубконто = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном - 1].ВидСубконто;
					Если ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Организации Тогда
						ЭтотОбъект["СубконтоДт"+Ном] = Организация;
					ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств Тогда
						ЭтотОбъект["СубконтоДт"+Ном] = СтатьяДвиженияДенежныхСредств;
					ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты Тогда
						ЭтотОбъект["СубконтоДт"+Ном] = Контрагент;
					ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.СтруктурныеЕдиницы
							ИЛИ ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
						ЭтотОбъект["СубконтоДт"+Ном] = ДоговорКонтрагента.ОбъектАренды.СтруктурнаяЕдиница;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками;
			ЭтотОбъект.СубконтоДт1 = ДанныеЗаполнения.Организация;
			ЭтотОбъект.СубконтоДт2 = ДанныеЗаполнения.Контрагент;
			//ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения;
			//ЭтотОбъект.СубконтоДт1	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); 	// "Все"
			//ЭтотОбъект.СубконтоДт2	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("36198");   // Командировочные расходы, ГСМ по Управлению Качества
			//ЭтотОбъект.СубконтоДт3	= Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление качества");   // Управление качества
		КонецЕсли;
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСписок.Контрагенты") Тогда
			СтавкаНДС = Контрагент.СтавкаНДС;
			ПересчитатьСуммуНДСДокумент();
		КонецЕсли;
		
		обСформироватьНазначениеПлатежа(ДанныеЗаполнения);
		
		УстановитьСчетаУчетаБУ();
		
	КонецЕсли;
	
	ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ =
										ОбщегоНазначенияСервер.ПолучитьСтатьюДДС_БУ(ЭтотОбъект.СтатьяДвиженияДенежныхСредств, ЭтотОбъект.ВидОперации);
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ЭтотОбъект.Дата > ТекущаяДата() Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ)
			И ЭтотОбъект.Дата >= Дата(2015, 5, 8)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена статья ДДС бух.учета");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("91.02") И НЕ ЗначениеЗаполнено(ЭтотОбъект.СубконтоДт1БУ) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для счёта учёта БУ 91.02 необходимо заполнить Субконто Дт 1 БУ.");
		Отказ = Истина;
	КонецЕсли;
	
	Если СчетаДокументаНеКорректны() Тогда
		
	КонецЕсли;
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	
	Движения.РасчетыСПерсоналом.Записывать = Истина;
	Движения.РасчетыСПерсоналом.Очистить();
	
	Если ЭтотОбъект.Оплачено 
			И (ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом) 
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП)
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости)
				//пмм
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно)
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам)
				//пмм.
				ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга)) Тогда
			
		//
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт   //+++ZEZA /20170321
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты //+++ZEZA /20170404
			
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита
						
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
			
			//
			Счет443 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
			Счет511 = ПланыСчетов.Финансовый.РасчетныйСчет;
			
			//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
			//Счет574 = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
			Счет574 = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
			//---АК LAGP
			
			Счет712 = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
			
			//+++ZEZA /20170404
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПлатаЗаОткрытиеКорпоративнойКарты Тогда	
				
				//1. Сначала пополнение карты 
				
				//
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период = Дата;
				
				//---КТ
				Проводка.СчетКт	= Счет511;
				
				//
				Проводка.СубконтоКт.Организации = Организация;
				Проводка.СубконтоКт.БанковскиеСчета = СчетОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				
				//---ДТ
				Проводка.СчетДт = Счет574;
				
				//
				Проводка.СубконтоДт.Организации = Организация;
				
				//+++АК LAGP 2018.02.15 ИП-00017940 При открытии используется счёт организации.
				//Проводка.СубконтоДт.ИсточникиДенежныхСредств = СчетКонтрагента;
				//Проводка.СубконтоДт.ИсточникиДенежныхСредств = СчетОрганизации;
				Проводка.СубконтоДт.ИсточникиДенежныхСредств = СубконтоДт2;      //+++АК LAGP 2018.02.26 ИП-00017940
				//Проводка.СубконтоДт.КорпоративныеБанковскиеКарты = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
				Проводка.СубконтоДт.КорпоративныеБанковскиеКарты = СубконтоДт3;
				//---АК LAGP
				
				//---СУММА
				Проводка.Сумма = СуммаДокумента;
				
				//ПЕРИОД И ПРОЧЕЕ
				Проводка.Период = Дата;
				Проводка.Содержание	= ВидОперации;
				
				//2. Теперь списание на затраты
				
				//+++АК SHEP 20170615: поставил условие
				// Юлия Полухонова: должна быть проводка  57.4.-51.1 без 44.3 
				// эти деньги потом списываются с карты по 1200р как банковское обслуживание
				Если ЭтотОбъект.Дата < Дата(2017, 06, 01) Тогда
					Проводка = Движения.Финансовый.Добавить();
					
					//---КТ
					Проводка.СчетКт	= Счет574;
					
					//
					Проводка.СубконтоКт.Организации = Организация;
					Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетКонтрагента;
					Проводка.СубконтоКт.КорпоративныеБанковскиеКарты = Справочники.КорпоративныеБанковскиеКарты.ПустаяСсылка();
					
					
					//---ДТ
					Проводка.СчетДт = Счет443;
					
					//
					Проводка.СубконтоДт.ТорговыеТочки = СубконтоДт1;//Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
					Проводка.СубконтоДт.СтатьиДоходовРасходов = СубконтоДт2;//Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
					Проводка.СубконтоДт.ЦФО	= СубконтоДт3;//Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Управление розницей
					
					//---СУММА
					Проводка.Сумма = СуммаДокумента;
					
					//ПЕРИОД И ПРОЧЕЕ
					Проводка.Период = Дата;
					Проводка.Содержание	= "Плата за открытие корп карты";	
				КонецЕсли;
				//---АК SHEP 20170615
				
				//+++ZEZA /20170330
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
				И (СчетОрганизации.СчетУчета = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников ИЛИ СчетОрганизации.СчетУчета = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудниковДо2018) Тогда  //+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
				
				//
				Для Каждого СтрокаТЧ Из ОплатаПоФизЛицам Цикл
					
					//
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период = ДатаОплаты;
					
					//---КТ
					
					//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
					//Проводка.СчетКт	= ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
					Проводка.СчетКт	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
					//+++АК LAGP 2018.02.14
					
					//
					Проводка.СубконтоКт.Организации = Организация;
					Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетОрганизации;
					Проводка.СубконтоКт.КорпоративныеБанковскиеКарты = СтрокаТЧ.НомерКорпоративнойКарты;
					
					//---ДТ
					Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
					
					//
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
					
					//---СУММА
					Проводка.Сумма = СтрокаТЧ.Сумма;
					
					//---СОДЕРЖАНИЕ
					Проводка.Содержание	= "Возврат с корпоративной карты";
					
				КонецЦикла;
				
				//	
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт Тогда //+++ZEZA /20170321
				//Проведение будет ниже
			ИначеЕсли ТипЗнч(ЭтотОбъект.ЗаявкаНаРасходованиеСредств)<>Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") ИЛИ (НЕ ЗначениеЗаполнено(ЭтотОбъект.ЗаявкаНаРасходованиеСредств))
					ИЛИ (ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику)
					ИЛИ ЭтотОбъект.ЗаявкаНаРасходованиеСредств.ТорговыеТочки.Количество() = 0 Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период			= ЭтотОбъект.ДатаОплаты;
				
				//+++АК LAGP 2018.02.27 ИП-00017984 Если плата за обслуживание корп. карты , то должно быть списание на 51.2, а не на 51.1
				//Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
				Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка И Найти(НРег(ЭтотОбъект.НазначениеПлатежа), "платазаобслуживаниебанковскойкарты") Тогда
					
					Счет443 = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("44.3", "Финансовый");
					Счет511 = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.1", "Финансовый", Новый Структура("Событие", "платазаобслуживаниебанковскойкарты"));
				
					//Проводка.СчетКт			= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.1", "Финансовый", Новый Структура("Событие", "платазаобслуживаниебанковскойкарты"));
					//Проводка.СубконтоКт.Организации 			 = ЭтотОбъект.Организация;
					//Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетОрганизации;
					
					Для Каждого СтрокаТЧ Из ОплатаПоФизЛицам Цикл
						
						//---КТ
						Проводка.СчетКт	= Счет511;
						
						//
						Проводка.СубконтоКт.Организации = Организация;
						Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетОрганизации;
						Проводка.СубконтоКт.КорпоративныеБанковскиеКарты = СтрокаТЧ.НомерКорпоративнойКарты;
					
						//---ДТ
						Проводка.СчетДт = Счет443;
						
						//+++АК LAGP 2018.03.21 Письмо от 18.03.21												
						//Проводка.СубконтоДт.ТорговыеТочки = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
						//Проводка.СубконтоДт.СтатьиДоходовРасходов = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
						//Проводка.СубконтоДт.ЦФО	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003"); //Управление розницей
						
						Проводка.СубконтоДт.ТорговыеТочки 			= СубконтоДт1;
						Проводка.СубконтоДт.СтатьиДоходовРасходов 	= СубконтоДт2;						
						Проводка.СубконтоДт.ЦФО						= СубконтоДт3;
						//---АК LAGP
						
						//---СУММА
						Проводка.Сумма = СтрокаТЧ.Сумма;
						
						//---СОДЕРЖАНИЕ
						Проводка.Содержание	= "Оплата услуг банка";
						
					КонецЦикла;

				Иначе
										
					//+++АК LAGP 2018.08.20 б/н просьба Юлии Шероновой, письмо от 2018.08.20
				    //Проводка.СчетКт = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.1", "Финансовый");
					Проводка.СчетКт	= ?(ЭтотОбъект.СчетБанк = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("52"), ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("52", "Финансовый"), ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("51.1", "Финансовый"));
			
					Если НЕ Проводка.СчетКт = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("52", "Финансовый") Тогда		
						Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;			
					КонецЕсли;															
					//Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
					//---АК LAGP

					Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;			
										
				Проводка.Сумма			= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				
				//Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
				//Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
				//Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
						
				Проводка.СчетДт			= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЭтотОбъект.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЭтотОбъект.СубконтоДт3);
					Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
						Проводка.Содержание	= "Прочее перечисление денежных средств";
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
						Проводка.Содержание	= "Перечисление налога";
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
						Проводка.Содержание	= "Оплата поставщику";
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка Тогда
						Проводка.Содержание	= "Оплата услуг банка";
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
						Проводка.Содержание	= "Прочие расчеты с контрагентами";
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда
						Проводка.Содержание	= "Перечисление подотчетному лицу";
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
						Проводка.Содержание	= "Перевод на другой счет";	
					ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РазмещениеДепозита  Тогда
						Проводка.Содержание	= "Размещение депозита";		
					КонецЕсли;
				КонецЕсли;	
				//---АК LAGP
			Иначе
				ТЧТорговыеТочкиКопия = ЭтотОбъект.ЗаявкаНаРасходованиеСредств.ТорговыеТочки.Выгрузить();
				ПолнаяСуммаЗаявки = ТЧТорговыеТочкиКопия.Итог("Сумма");
				//Коэффициент = ЭтотОбъект.СуммаДокумента / ПолнаяСуммаЗаявки;
				
				РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(ЭтотОбъект.СуммаДокумента, ТЧТорговыеТочкиКопия.ВыгрузитьКолонку("Сумма"));
				Если Не РаспределениеРег = Неопределено Тогда
					ТЧТорговыеТочкиКопия.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
				КонецЕсли;
				
				Счет51 = ПланыСчетов.Финансовый.РасчетныйСчет;;
				Для Каждого СтрокаТЧ Из ТЧТорговыеТочкиКопия Цикл
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период		= ЭтотОбъект.ДатаОплаты;
					Проводка.СчетКт		= Счет51;
					Проводка.Сумма		= СтрокаТЧ.Сумма;// * Коэффициент;
					//Проводка.Организация			= Организация;
					
					Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
					Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
					
					Проводка.СчетДт		= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЭтотОбъект.СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЭтотОбъект.СубконтоДт3);
					Если ЭтотОбъект.ЗаявкаНаРасходованиеСредств.СуммаНДФЛ = 0 Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.ТорговаяТочка);
					КонецЕсли;
					Проводка.Содержание	= "Оплата поставщику";
				КонецЦикла;
			КонецЕсли;
			Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
					И ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Код = "70"
					И ЗначениеЗаполнено(ЭтотОбъект.ФизЛицо) Тогда
			  	//РасчетыСПерсоналом
				Движение = Движения.РасчетыСПерсоналом.Добавить();
				Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
				Движение.Регистратор	= ЭтотОбъект.Ссылка;
				Движение.Период			= ЭтотОбъект.Дата;
				Движение.Организация	= ЭтотОбъект.Организация;
				Движение.Физлицо		= ЭтотОбъект.ФизЛицо;
				Движение.Сумма			= ЭтотОбъект.СуммаДокумента;
			КонецЕсли;	
			
			//
			ДатаОтказаОтСписанияСКорпоративныхКарт = Константы.АК_ДатаОтказаОтДокументаСписаниеСКорпоративныхКарт.Получить();
			
			//списание с корпоративных карт  Дт71.2 Кт 57.4 (51.2 начиная с 2018)
			Если ЗначениеЗаполнено(ДатаОтказаОтСписанияСКорпоративныхКарт) И Дата >= ДатаОтказаОтСписанияСКорпоративныхКарт И ВидОперации = Перечисления.ВидыОперацийППИсходящее.СписаниеСКорпоративныхКарт Тогда //+++ZEZA 20170321 //???ZEZA
				
				//
				Счет443 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
				Счет511 = ПланыСчетов.Финансовый.РасчетныйСчет;
				
				//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
				//Счет574 = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
				Счет574 = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
				//---АК LAGP
				
				Счет712 = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
				
				//
				Если ВидОперацииСКорпоративнойКартой = Перечисления.ВидыОперацийСКорпоративнымиКартами.ПлатаЗаОбслуживаниеБанковскойКарты Тогда
					
					//
					Для Каждого СтрокаТЧ Из ОплатаПоФизЛицам Цикл
						
						//
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период = ДатаОплаты;
						
						//---КТ
						Проводка.СчетКт	= Счет574;
						
						//
						Проводка.СубконтоКт.Организации = Организация;
						Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетКонтрагента;
						Проводка.СубконтоКт.КорпоративныеБанковскиеКарты = СтрокаТЧ.НомерКорпоративнойКарты;
					
						//---ДТ
						Проводка.СчетДт = Счет443;
						
						//+++АК LAGP 2018.03.21 Письмо от 18.03.21												
						//Проводка.СубконтоДт.ТорговыеТочки = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000"); //Все
						//Проводка.СубконтоДт.СтатьиДоходовРасходов = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391"); //Услуги банка
						//Проводка.СубконтоДт.ЦФО	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003"); //Управление розницей
						
						Проводка.СубконтоДт.ТорговыеТочки 			= СубконтоДт1;
						Проводка.СубконтоДт.СтатьиДоходовРасходов 	= СубконтоДт2;						
						Проводка.СубконтоДт.ЦФО						= СубконтоДт3;
						//---АК LAGP
						
						//---СУММА
						Проводка.Сумма = СтрокаТЧ.Сумма;
						
						//---СОДЕРЖАНИЕ
						Проводка.Содержание	= "Списание с корпоративной карты: " + ВидОперацииСКорпоративнойКартой;
						
					КонецЦикла;
					
				Иначе	
				
					//
					Для Каждого СтрокаТЧ Из ОплатаПоФизЛицам Цикл
						
						//
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период = ДатаОплаты;
						
						//---КТ
						Проводка.СчетКт	= Счет574;
						
						//
						Проводка.СубконтоКт.Организации = Организация;
						Проводка.СубконтоКт.ИсточникиДенежныхСредств = СчетКонтрагента;
						Проводка.СубконтоКт.КорпоративныеБанковскиеКарты = СтрокаТЧ.НомерКорпоративнойКарты;
					
						//---ДТ
						Проводка.СчетДт = Счет712;
						
						//
						Проводка.СубконтоДт.Организации	= Организация;
						Проводка.СубконтоДт.ФизическиеЛица	= СтрокаТЧ.ФизЛицо;
						
						//---СУММА
						Проводка.Сумма = СтрокаТЧ.Сумма;
						
						//---СОДЕРЖАНИЕ
						Проводка.Содержание	= "Списание с корпоративной карты: " + ВидОперацииСКорпоративнойКартой;
						
					КонецЦикла;
					
				КонецЕсли;	
				
			//
			ИначеЕсли ЗначениеЗаполнено(ДатаОтказаОтСписанияСКорпоративныхКарт) И Дата >= ДатаОтказаОтСписанияСКорпоративныхКарт И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет И ПереводДСФизЛицамНаКарту Тогда //+++ZEZA 20170321 //???ZEZA				
				
				//корреспонденция с 71 не нужна
				
			ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
					И ЭтотОбъект.ПереводДСФизЛицамНаКарту Тогда
				
				мСуммаОплаты = ЭтотОбъект.ОплатаПоФизЛицам.Итог("Сумма");
				Если НЕ ЭтотОбъект.СуммаДокумента = мСуммаОплаты Тогда
					Сообщить("Внимание! Сумма оплат по физ. лицам не соответствует сумме документа!", СтатусСообщения.ОченьВажное);
				КонецЕсли;

				//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
				//Счет574 = ПланыСчетов.Финансовый.ПереводыНаКартыСотрудников;
				Счет574 = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("57.4", "Финансовый", Новый Структура("ДатаЗапроса", ЭтотОбъект.Дата));
				//---АК LAGP
				
				Счет712 = ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицамиНаКартах;
				мПоНовому = (НЕ ЭтотОбъект.Дата < Дата(2015, 5, 1));
				Для Каждого СтрокаТЧ Из ЭтотОбъект.ОплатаПоФизЛицам Цикл
					
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период		= ЭтотОбъект.ДатаОплаты;
					//Проводка.Организация	= ЭтотОбъект.Организация;
					
					Проводка.СчетКт		= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ЭтотОбъект.СубконтоДт3);
					
					Если мПоНовому Тогда
						Проводка.СчетДт		= Счет712;
						Проводка.СубконтоДт.Организации		= ЭтотОбъект.Организация;
						Проводка.СубконтоДт.ФизическиеЛица	= СтрокаТЧ.ФизЛицо;
						Проводка.Содержание	= "Перевод денежных средств физ. лица с корпоративного счета на карту";
					Иначе
						Проводка.СчетДт		= Счет574;
						Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
						Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ЭтотОбъект.СчетКонтрагента;
						Проводка.СубконтоДт.КорпоративныеБанковскиеКарты	= СтрокаТЧ.НомерКорпоративнойКарты;
						Проводка.Содержание	= "Перечисление денежных средств физ. лицу на корпоративную карту";
					КонецЕсли;

					Проводка.Сумма		= СтрокаТЧ.Сумма;
					
				КонецЦикла;
				
			КонецЕсли;
				
		//
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.ДатаОплаты;
			Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
			Проводка.Сумма		= ЭтотОбъект.СуммаДокумента;
			//Проводка.Организация			= Организация;
			
			Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
			Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
			
			Проводка.СчетДт		= ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
			Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
			//Проводка.СубконтоДт.СотрудникиОрганизаций			= ПолучитьСотрудника(Организация,Контрагент);
			Проводка.Содержание	= "Перечисление заработной платы";
			
			//РасчетыСПерсоналом
			Движение = Движения.РасчетыСПерсоналом.Добавить();
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
			Движение.Регистратор	= ЭтотОбъект.Ссылка;
			Движение.Период			= ЭтотОбъект.Дата;
			Движение.Организация	= ЭтотОбъект.Организация;
			Движение.Физлицо		= ЭтотОбъект.Контрагент;
			Движение.Сумма			= ЭтотОбъект.СуммаДокумента;
			
		//
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда
			
			Если ЭтотОбъект.ОплатаПоФизЛицам.Итог("Сумма") <> ЭтотОбъект.СуммаДокумента Тогда
				Сообщить("Внимание! Сумма оплат по ведомости не соответствует сумме документа!!!", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			Для Каждого СтрокаТЧПеречислениеЗаработнойПлаты ИЗ ЭтотОбъект.ПеречислениеЗаработнойПлаты Цикл
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период		= ЭтотОбъект.ДатаОплаты;
				Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
				Проводка.Сумма		= СтрокаТЧПеречислениеЗаработнойПлаты.СуммаПлатежа;
				//Проводка.Организация			= Организация;
				
				Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
				Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ?(СтрокаТЧПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств.Пустая(),СтрокаТЧПеречислениеЗаработнойПлаты,СтрокаТЧПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств);
				Если ЭтотОбъект.МатериальнаяПомощь Тогда
					Проводка.СчетДт		= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
					Проводка.СубконтоДт.ЦФО=ЭтотОбъект.ЦФО;
					Проводка.СубконтоДт.СтатьиДоходовРасходов=Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39397");
					Проводка.СубконтоДт.ТорговыеТочки=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
					Проводка.Содержание	= "Перечисление заработной платы(материальна помощь)";
				Иначе	
					Проводка.СчетДт		= ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
					Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
					Проводка.Содержание	= "Перечисление заработной платы";
				КонецЕсли;	
				
				//Проводка.СубконтоДт.СотрудникиОрганизаций			= ПолучитьСотрудника(Организация,СтрокаТаблицы.Физлицо);
				
			КонецЦикла;
			Если НЕ ЭтотОбъект.МатериальнаяПомощь Тогда
				Для Каждого СтрокаТаблицы ИЗ ЭтотОбъект.ОплатаПоФизЛицам Цикл
					//РасчетыСПерсоналом
					Движение = Движения.РасчетыСПерсоналом.Добавить();
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
					Движение.Регистратор	= ЭтотОбъект.Ссылка;
					Движение.Период			= ЭтотОбъект.ДатаОплаты;
					Движение.Организация	= ЭтотОбъект.Организация;
					Движение.Физлицо		= СтрокаТаблицы.Физлицо;
					Движение.Сумма			= СтрокаТаблицы.Сумма;
				КонецЦикла;
			КонецЕсли;	
	
		// 
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеНаличныхСРасчетногоСчета Тогда
			
			Счет573 = ПланыСчетов.Финансовый.СнятиеНаличныхСРасчетногоСчета; 		
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.ДатаОплаты;
			Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
			Проводка.Сумма		= СуммаДокумента;
			//Проводка.Организация			= Организация;
			
			Проводка.СубконтоКт.Организации 					= Организация;
			Проводка.СубконтоКт.БанковскиеСчета					= СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= СтатьяДвиженияДенежныхСредств;
			
			Проводка.СчетДт		= Счет573;
			Проводка.СубконтоДт.Организации						= Организация;
			//Проводка.СубконтоДт.БанковскиеСчета                 = СчетОрганизации;
			Проводка.СубконтоДт.ИсточникиДенежныхСредств		= СчетОрганизации;
			Проводка.СубконтоДт.СтруктурныеЕдиницы              = СубконтоДт3;
			//Проводка.СубконтоДт.СотрудникиОрганизаций			= ПолучитьСотрудника(Организация,СтрокаТаблицы.Физлицо);
			Проводка.Содержание	= "Снятие наличных";
			
			//
		ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю)
				ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю)
				ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю)
				ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору)
				ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору)
				ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору) Тогда
			
			Счет51 = ПланыСчетов.Финансовый.РасчетныйСчет;
			Если НЕ ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств)
					ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131010" 		// Оплата аренды (торговых точек и магазинов)
					ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011"
					ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131019"  Тогда  // Оплата депозита за аренду (торговых точек и магазинов)
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 	= ЭтотОбъект.ДатаОплаты;
				Проводка.СчетКт		= Счет51;
				Проводка.Сумма		= ЭтотОбъект.СуммаДокумента;
				//Проводка.Организация			= Организация;
				
				Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
				Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
				
				Проводка.СчетДт		= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				Проводка.Содержание	= ЭтотОбъект.ВидОперации;
			Иначе
				ТЧТорговыеТочки = ЭтотОбъект.ЗаявкаНаРасходованиеСредств.ТорговыеТочки;
				Для Каждого СтрокаТЧ Из ТЧТорговыеТочки Цикл
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период		= ЭтотОбъект.ДатаОплаты;
					Проводка.СчетКт		= Счет51;
					Проводка.Сумма		= СтрокаТЧ.Сумма;
					//Проводка.Организация			= Организация;
					
					Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
					Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
					
					Проводка.СчетДт		= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.ТорговаяТочка);
					Проводка.Содержание	= ЭтотОбъект.ВидОперации;
				КонецЦикла;
			КонецЕсли;
		
		//
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратПокупателю Тогда
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.ДатаОплаты;
			Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
			Проводка.Сумма		= ЭтотОбъект.СуммаДокумента;
			//Проводка.Организация			= Организация;
			
			Проводка.СубконтоКт.Организации 					= Организация;
			Проводка.СубконтоКт.БанковскиеСчета					= СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= СтатьяДвиженияДенежныхСредств;
			
			Проводка.СчетДт 	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
			Проводка.Содержание	= ЭтотОбъект.ВидОперации;
			
		//
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга Тогда
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.Дата;
			Проводка.СчетДт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
			Проводка.Сумма		= ЭтотОбъект.СуммаДокумента;
			//Проводка.Организация			= Организация;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.Организация);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЭтотОбъект.ТорговаяТочка);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЭтотОбъект.Терминал);	
			
			Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
			Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
			Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;				
			
			Проводка.Содержание = "Отмена эквайринга";
	
		//пмм
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно Тогда
			
			//СводныеДанные=ЭтотОбъект.Эквайринг.Выгрузить();
			//СводныеДанные.Свернуть("Терминал,ТорговаяТочка","СуммаДокумента");
			Для каждого СтрокаТЧ из ЭтотОбъект.ЭквайрингРасшифровка Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ТорговаяТочка) Тогда
					Сообщить("В строке номер " + СтрокаТЧ.НомерСтроки + " не заполнена торговая точка. Проведение не выполнено");
					Отказ = Истина;
					Прервать;
				КонецЕсли;	
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период		= ЭтотОбъект.Дата;
				Проводка.СчетДт		= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
				Проводка.Сумма		= СтрокаТЧ.СуммаДокумента;
				//Проводка.Организация			= Организация;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.Организация);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.ТорговаяТочка);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.Терминал);	
				
				Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;

				Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
				Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;				
				
				Проводка.Содержание	= "Отмена эквайринга";
	         КонецЦикла;
			//пмм
		ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.ДатаОплаты;
			Проводка.СчетКт		= ПланыСчетов.Финансовый.РасчетныйСчет;
			Проводка.Сумма		= ЭтотОбъект.СуммаДокумента;
			//Проводка.Организация			= Организация;
			
			Проводка.СубконтоКт.Организации 					= ЭтотОбъект.Организация;
			Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
			
			Проводка.СчетДт		= ПланыСчетов.Финансовый.НайтиПоКоду("76.2");
			Проводка.СубконтоДт.Организации						= ЭтотОбъект.Организация;
			Проводка.СубконтоДт.ФизическиеЛица					= ЭтотОбъект.ФизЛицо;
			Проводка.Содержание	= "Перечисление по исполнительным листам";
						
			//	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Оплачено Тогда
		ОбщиеПроцедуры.ПровестиДокументПоРегиструВзаиморасчетыПоАренде(ЭтотОбъект, Отказ);
		
		Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
		Движение = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьРасход();
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.Организация 	= ЭтотОбъект.Организация;
		Движение.Контрагент 	= ЭтотОбъект.Контрагент;
		Движение.ДоговорКонтрагента 			= ЭтотОбъект.ДоговорКонтрагента;
		Движение.ЗаявкаНаРасходованиеСредств 	= ЭтотОбъект.ЗаявкаНаРасходованиеСредств;
		Движение.Сумма 			= ЭтотОбъект.СуммаДокумента;
	КонецЕсли;
	
	Движения.ОтправленныеПлатежиВБанк.Записывать = Истина;
	Движение = Движения.ОтправленныеПлатежиВБанк.Добавить();
	Движение.Период 		= ЭтотОбъект.Дата;
	Движение.Организация 	= ЭтотОбъект.Организация;
	Движение.Контрагент 	= ЭтотОбъект.Контрагент;
	Движение.ДоговорКонтрагента 			= ЭтотОбъект.ДоговорКонтрагента;
	Движение.ЗаявкаНаРасходованиеСредств 	= ЭтотОбъект.ЗаявкаНаРасходованиеСредств;
	Движение.Сумма 			= ЭтотОбъект.СуммаДокумента;
	
	//Если Оплачено
	//	И Не ЗначениеЗаполнено(Задача)
	//	И ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) Тогда
	//	СоздатьЗадачуПоДокументу(ЗаявкаНаРасходованиеСредств, Справочники.ВидыЗадачПользователей.ОплатаЗаявкиНаРасходование, ЗаявкаНаРасходованиеСредств.Ответственный)	
	//КонецЕсли;
	
	БухгалтерскийУчет.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Финансовый);
	//Если ЭтотОбъект.Оплачено Тогда
		//Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику И ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") И ЗначениеЗаполнено(УИН_СтрокиОснования) Тогда
		Если ЗначениеЗаполнено(ДокументОснование)
				И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы")
				И ЗначениеЗаполнено(УИН_СтрокиОснования) Тогда
			Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Записывать = Истина;
			Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Очистить();
			//Для Каждого ТекСтрокаОплата Из Оплата Цикл
				Движение = Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.Заявка = ДокументОснование;
				Движение.УИН_СтрокиОплат = УИН_СтрокиОснования;
				Движение.Сумма = СуммаДокумента;
			//КонецЦикла;

		КонецЕсли;	
	//КонецЕсли;	
	//АК++ tuga #13455
	АК_КонтрольЗадолженности.ОбработкаПроведения(Ссылка,Отказ,РежимПроведения);
	//AK-
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	
	//АК+++ пмм 23.01.17
	мДвижения = ЭтотОбъект.Движения.РасчетыПоСделкамСПоставщиками;
	мДвижения.Записывать = Истина;
	мДвижения.Очистить();
	Для Каждого ТекСтрокаГрафикОплат Из ЭтотОбъект.СтруктурныеЕдиницы Цикл
		Если ТекСтрокаГрафикОплат.Сделка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		Движение = мДвижения.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.Сделка 		= ТекСтрокаГрафикОплат.Сделка;
		Движение.УИН_Этапа 		= ТекСтрокаГрафикОплат.СтрокаСделки;
		Движение.Сумма 			= ТекСтрокаГрафикОплат.Сумма;
		
		Движение.Комплектация 			= ТекСтрокаГрафикОплат.Комплектация;
		Движение.УИН_СтрокиКомплектации = ТекСтрокаГрафикОплат.СтрокаКомплектации;
		Движение.ДатаПлатежа	= ТекСтрокаГрафикОплат.ДатаПлатежаПоСделке;
	КонецЦикла;
    //АК--- пмм 23.01.17
	
	//+++АК POZM 2017.11.22 ИП-00017139
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ПроводитьВЗакрытомПериоде") И ЭтотОбъект.ДополнительныеСвойства.ПроводитьВЗакрытомПериоде Тогда
		ЭтотОбъект.Движения.Финансовый.ДополнительныеСвойства.Вставить("ПроводитьВЗакрытомПериоде",Истина);
	КонецЕсли;	
	//---АК POZM 
КонецПроцедуры


// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая()
			И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	//mind 2017-08-23 не понятно зачем такое ограничение
	//Если Прав(НомерПечать, 3) = "000" Тогда
	//	Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Если ЭтотОбъект.Оплачено
			И ЭтотОбъект.СчетОрганизации.Банк.Код = "044525994" Тогда
		Макет = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьМакет("ПлатежноеПоручение");	
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		БанкОрганизации = СчетОрганизации.Банк;
		Обл.Параметры.ПодписьБанкПлательщика	= "" + БанкОрганизации;
		Обл.Параметры.ПодписьГородПлательщика 	= "" + БанкОрганизации.Город;
		ДатаПрописью = Формат(ДатаОплаты, "ДФ='дд ММММ гггг'");                                                        
		Обл.Параметры.ПодписьДатаОплаты			= Лев(ДатаПрописью, 2) + " " + ВРег(Сред(ДатаПрописью, 4, 3)) + " " + Прав(ДатаПрописью, 4);
		Обл.Параметры.ПодписьКорСчет     		= "к/с " + БанкОрганизации.КоррСчет + " БИК " + БанкОрганизации.Код; 
		Обл.Параметры.ДатаОплаты       			= Формат(ДатаОплаты, ФорматДаты);
	ИначеЕсли ЭтотОбъект.Оплачено
			И ЭтотОбъект.СчетОрганизации.Банк.Код = "044525225" Тогда
		Макет = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьМакет("ПлатежноеПоручение_Сбер");	
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		БанкОрганизации = СчетОрганизации.Банк;
		Обл.Параметры.ПодписьБанкПлательщика	= "ПАО Сбербанк";
		Обл.Параметры.ПодписьГородПлательщика 	= "Московский банк ПАО Сбербанк" + Символы.ПС + "Дополнительный офис № 1869" + Символы.ПС + "БИК 044525225";
		Обл.Параметры.ДатаОплаты       			= Формат(ДатаОплаты, ФорматДаты);	
		Обл.Параметры.ПодписьДатаОплаты       			= Формат(ДатаОплаты, ФорматДаты);
	Иначе
		Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	
	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерВходящегоДокумента;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КППплательщика));	
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент = "";
	Иначе	
		СтрКорреспондент = " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать = ?(ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов),
								?(ПустаяСтрока(ТекстПлательщика), Организация.НаименованиеПолное, СокрЛП(ТекстПлательщика)), Организация.НаименованиеПлательщикаПриПеречисленииНалогов+СтрКорреспондент);
	Иначе
        ТекстПлательщикПечать = ?(ПустаяСтрока(ТекстПлательщика), Организация.НаименованиеПолное, СокрЛП(ТекстПлательщика));
		
	КонецЕсли;
	
	Обл.Параметры.Плательщик			= ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика		= "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика	= ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика	= БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика	= БанкОрганизации.КоррСчет;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН		= "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП		= "КПП " + ?(ПустаяСтрока(КПППолучателя), "", СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель		= ?(ПустаяСтрока(ТекстПолучателя), Контрагент.НаименованиеПолное, СокрЛП(ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН		= "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Организация.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП		= "КПП " + ?(ПустаяСтрока(КПППолучателя), "", СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель		= ?(ПустаяСтрока(ТекстПолучателя), Организация.НаименованиеПолное, СокрЛП(ТекстПолучателя));
		
	КонецЕсли;
		
	Обл.Параметры.БанкПолучателя		= "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя	= БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя	= БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя	= ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа		= СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность			= ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа			= "";

	// Реквизиты для перечисления в бюджет
	
	Если ПеречислениеВБюджет Тогда
		
		ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет();
		
		Обл.Параметры.СтатусСоставителя   = ?(ПустаяСтрока(СтатусСоставителя),"0",СокрЛП(СтатусСоставителя));
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(КодБК),"",СокрЛП(КодБК));
		//+++АК SUVV 2018.03.13 ИП-00018121
		//Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),
		//	?(ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
		//	СокрЛП(КодОКАТО));
		Если Дата < Дата(2014,01,01) Тогда 
			Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),
			?(ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
			СокрЛП(КодОКАТО));
		Иначе
			Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКТМО),
			?(ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
			СокрЛП(КодОКТМО));
		КонецЕсли;
		//---АК SUVV
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПоказательОснования),"0",СокрЛП(ПоказательОснования));
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(ПоказательНомера),"0",СокрЛП(ПоказательНомера));
		Обл.Параметры.ПоказательДаты      = ?(ПоказательДаты = '00010101000000',"0",Формат(ПоказательДаты,"ДФ='дд.ММ.гггг'"));
		Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПоказательТипа),"0",СокрЛП(ПоказательТипа));
		Если  НЕ ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж И ((ПустаяСтрока(ПоказательПериода)) ИЛИ (ПоказательПериода = "  .  .    ")) Тогда
			Обл.Параметры.ПоказательПериода = "0";
		Иначе
			Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);
	
	Если ЭтотОбъект.Оплачено
			И ЭтотОбъект.СчетОрганизации.Банк.Код = "044525994" Тогда
		Обл   = Макет.ПолучитьОбласть("ЭЦП");
		ТабДокумент.Вывести(Обл);
		Если ЭтотОбъект.Организация.ИНН = "7734675810" Тогда
			Обл   = Макет.ПолучитьОбласть("ЭЦП1");
			Обл.Параметры.Владелец = "CN=Demnichenko Natalija Vaclavovna, O=OOO 'Vkusvill', L=Moskva, C=RU";
			Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
			ТабДокумент.Вывести(Обл);
			
			Обл   = Макет.ПолучитьОбласть("ЭЦП1");
			Обл.Параметры.Владелец = "CN=Farafonov Aleksejj Vladimirovich, O=OOO 'Vkusvill', L=Moskva, C=RU";
			Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
			ТабДокумент.Вывести(Обл);
		ИначеЕсли ЭтотОбъект.Организация.ИНН = "7726660031" Тогда
			Обл   = Макет.ПолучитьОбласть("ЭЦП1");
			Обл.Параметры.Владелец = "CN=Krivenko Andrejj Aleksandrovich, O=OOO 'Lug da Pole', L=Moskva, C=RU";
			Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
			ТабДокумент.Вывести(Обл);
			
			Обл   = Макет.ПолучитьОбласть("ЭЦП1");
			Обл.Параметры.Владелец = "CN=Demnichenko Natalija Vaclavovna, O=OOO 'Lug da Pole', L=Moskva, C=RU";
			Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
			ТабДокумент.Вывести(Обл);
		ИначеЕсли ЭтотОбъект.Организация.ИНН = "7734641716" Тогда
			Обл   = Макет.ПолучитьОбласть("ЭЦП1");
			Обл.Параметры.Владелец = "CN=Krivenko Andrejj Aleksandrovich, O=OOO 'Proekt Izbjonka', L=Moskva, C=RU";
			Обл.Параметры.КлючВыдан = "CN=Class 2 CA, O=Center of Financial Technologies, C=RU";
			ТабДокумент.Вывести(Обл);
		КонецЕсли;	
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок, СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок, СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если П101 = "08" Тогда
		
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
		
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		
	Иначе
		
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			СписокОшибок.ДобавитьЗначение("Возможно, неверно заполнено поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Перечисление в бюджет""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					СписокОшибок.Добавить("При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()
	
	СписокОшибок = Новый СписокЗначений();
	
	П101 = СокрЛП(СтатусСоставителя);
	П104 = СокрЛП(КодБК);
	П105 = СокрЛП(КодОКАТО);
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		П105 = ?(ПустаяСтрока(П105), "0", П105);
	КонецЕсли;
	П106 = СокрЛП(ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПоказательПериода, ".", ""))) = 1, "", ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПоказательПериода, ".", "")) = "0", "", ПоказательПериода);
	П108 = СокрЛП(ПоказательНомера);
	П109 = ?(НЕ ЗначениеЗаполнено(ПоказательДаты), "0", Строка(ПоказательДаты));
	П110 = СокрЛП(ПоказательТипа);
	
	// Проверки, обшие для всех видов перечислений в бюджет
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) 
		ИЛИ ПустаяСтрока(СокрЛП(П101)) Тогда
		СписокОшибок.Добавить("Неверное значение поля ""Статус составителя"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") И (Найти(П101, "07") = 0) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""КБК"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	// Проверки, зависящие от вида перечисления в бюджет
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	Иначе
		ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	КонецЕсли;
	
	//Выводим список найденных ошибок
	
	Для Ном = 0 по СписокОшибок.Количество()-1 Цикл
		Сообщить(СписокОшибок.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()

Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 = "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Возможно, следует указать значение в поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если (СтрЗаменить(СокрЛП(П106), "0", "") <> "")
		И (Найти("ДЕ, ПО, КВ, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле ""Основание платежа"" на закладке ""Перечисление в бюджет""."); 
	КонецЕсли;
		
	Если (СтрЗаменить(П107,"0","") = "") Тогда
		СписокОшибок.Добавить("Не указан ""Код таможенного органа"" на закладке ""Перечисление в бюджет""."); 
	КонецЕсли;
	
	Если (СтрЗаменить(П110,"0","") <> "") 
		И (Найти("ТП, ШТ, ЗД, ПЕ", П110) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 <> "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле ""Статус составителя"" на закладке ""Перечисление в бюджет""." 
			+ Символы.ПС + Символы.Таб + "Вид перечисления ""Иной платеж"" соответствует статусу составителя ""08"".");
	КонецЕсли;
		
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле ""Код ОКАТО"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П106, "0", "") <> "" Тогда 
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Основание платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П107, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Налоговый период"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П108, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Номер документа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П109, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Не следует заполнять поле ""Дата документа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;
	
	Если СтрЗаменить(П110, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле ""Тип платежа"" на закладке ""Перечисление в бюджет"".");
	КонецЕсли;

КонецПроцедуры

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	#Если Клиент Тогда
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		
		Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;

		// Получить экземпляр документа на печать
		Если ИмяМакета = "ПлатежноеПоручение" тогда

			// Управленческая печатная форма документа
			ТабДокумент = ПечатьПлатежногоПоручения();
			
		//ИначеЕсли ИмяМакета = "ПечатьПеречисленияЗарплаты" тогда

		//	// Управленческая печатная форма документа
		//	ТабДокумент = ПечатьПеречисленияЗарплаты();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			Если ТабДокумент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;

		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	#КонецЕсли

КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

Процедура ПересчитатьСуммуНДСДокумент() Экспорт
	ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС = СуммаДокумента*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
КонецПроцедуры

Процедура РассчитатьСуммуДокумента() Экспорт
	//Если (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаАрендыАрендодателю)
	//	ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратЗаАрендуАрендатору) Тогда
	//	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	//КонецЕсли;
	
	ПересчитатьСуммуНДСДокумент();
КонецПроцедуры

Процедура УстановитьСчетаУчетаБУ() Экспорт
	Если СтатьяДвиженияДенежныхСредств.Код = "120740" Тогда
		СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.04.1");
		СчетУчетаРасчетовПоАвансамБУ 		= СчетУчетаРасчетовСКонтрагентомБУ;
		Возврат;
	КонецЕсли;	
	
	//+++АК LAGP 2017.11.27 ИП-00017339
	//+++АК LAGP 2018.04.04 ИП-00018262 СчётБУ 60.01 для госпошлин и штрафов
	//Если СтатьяДвиженияДенежныхСредств.Код = "139399" Тогда		//Оплата гос.пошлины и прочих расходов для юр.сопровождения
	Если СтатьяДвиженияДенежныхСредств.Код = "139399" ИЛИ СтатьяДвиженияДенежныхСредств.Код = "139317" Тогда //госпошлины и штрафы
		СчетУчетаРасчетовСКонтрагентомБУ 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("60.01");
		СчетУчетаРасчетовПоАвансамБУ 		= СчетУчетаРасчетовСКонтрагентомБУ;
		
		//+++АК LAGP 2018.04.12 ИП-00018356 Оплата штрафов по постановлению
		Если Найти(СтрЗаменить(ВРег(НазначениеПлатежа), " ", ""), "ОПЛАТАШТРАФОВПОПОСТАНОВЛЕНИЮ") > 0 ИЛИ Найти(СтрЗаменить(ВРег(НазначениеПлатежа), " ", ""), "ОПЛАТАГОСПОШЛИНЫЗАГОСУДАРСТВЕННУЮРЕГИСТРАЦИЮ") > 0 ИЛИ Найти(СтрЗаменить(ВРег(НазначениеПлатежа), " ", ""), "ОПЛАТААДМИНИСТРАТИВНОГОШТРАФАПОПОСТАНОВЛЕНИЮ") > 0 Тогда  //+++АК LAGP 2018.05.23 ИП-00018356 добавлено назначение "ОПЛАТААДМИНИСТРАТИВНОГОШТРАФАПОПОСТАНОВЛЕНИЮ"
			СчетУчетаРасчетовПоАвансамБУ = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("60.02");		
		КонецЕсли;
		//---АК LAGP
				
		Возврат;
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.01.09 ИП-00017094
	Если СтатьяДвиженияДенежныхСредств.Код = "120742" Тогда		//Оплата Торгового сбора
		СчетУчетаРасчетовСКонтрагентомБУ 	= ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("68.13"); 	//68.13 Единый налог при применении упрощенной системы налогообложения
		СчетУчетаРасчетовПоАвансамБУ 		= СчетУчетаРасчетовСКонтрагентомБУ;
		Если СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("68.2", "Финансовый") Тогда 	//68.2 НалогиУН
			СубконтоДт2 = Справочники.ВидыНалогов.НайтиПоКоду("000000017");		               	//"000000017" - Торговый сбор
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.03.20 ИП-00018082
	Если СтатьяДвиженияДенежныхСредств.Код = "133110" И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда		//Оплата зарплаты (постоянная часть)
		СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.41"); 	 	
		Возврат;
	КонецЕсли;
	//---АК LAGP
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаБУ.СчетУчетаРасчетов,
	|	СчетаУчетаБУ.СчетУчетаПоАвансам
	|ИЗ
	|	РегистрСведений.СчетаУчетаБУ КАК СчетаУчетаБУ
	|ГДЕ
	|	(СчетаУчетаБУ.Организация = &Организация
	|			ИЛИ СчетаУчетаБУ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (СчетаУчетаБУ.Контрагент = &Контрагент
	|			ИЛИ СчетаУчетаБУ.Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетаУчетаБУ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	И (СчетаУчетаБУ.ВидОперации = &ВидОперации
	|			ИЛИ СчетаУчетаБУ.ВидОперации = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПустаяСсылка)
	|			ИЛИ СчетаУчетаБУ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаУчетаБУ.Организация УБЫВ,
	|	СчетаУчетаБУ.Контрагент УБЫВ,
	|	СчетаУчетаБУ.ВидОперации УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетУчетаРасчетовСКонтрагентомБУ 	= Выборка.СчетУчетаРасчетов;
		СчетУчетаРасчетовПоАвансамБУ 		= Выборка.СчетУчетаПоАвансам;		
	Иначе
		СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаРасчетовПоАвансамБУ 		= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	#Если Клиент Тогда
		ПериодРегистрации = Дата("00010101");
		Депозит = Ложь;
		
		Если ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога И НЕ ОбъектКопирования.Ссылка.Пустая() Тогда
			АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
				Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
			УстановитьРеквизитыПлательщика();
			УстановитьРеквизитыПолучателя();
			СформироватьНазначениеПлатежа();
		КонецЕсли;
	#КонецЕсли
	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);
КонецПроцедуры

Процедура УстановитьРеквизитыПлательщика() Экспорт

	ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	ИННПлательщика   = АвтоЗначенияРеквизитов.ИННПлательщика;
	КПППлательщика   = АвтоЗначенияРеквизитов.КПППлательщика;

КонецПроцедуры

Процедура УстановитьРеквизитыПолучателя() Экспорт

	ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
	ИННПолучателя   = АвтоЗначенияРеквизитов.ИННПолучателя;
	КПППолучателя   = АвтоЗначенияРеквизитов.КПППолучателя;
	
КонецПроцедуры

Процедура СформироватьНазначениеПлатежа() Экспорт

	АдресСуммы = Найти(НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;
	
	//+sstuman
	//Если ТекстНазначение = "" И НЕ СчетКонтрагента.Пустая() Тогда
	//	ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	//КонецЕсли;
	Если ТекстНазначение = "" И НЕ ДоговорКонтрагента.Пустая() Тогда
		ТекстНазначение = ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию;
	КонецЕсли;
	//-sstuman
	
	//Если ТекстНазначение = "" Тогда
		//И РасшифровкаПлатежа.Количество() = 1
		//И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		
		//ТекстНазначение = ТекстНазначение
		//	+ ?(ПустаяСтрока(ТекстНазначение), "По ", " по ")
//			+ Строка(СтрокаПлатеж.ДоговорКонтрагента);
	//КонецЕсли;

	ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		ТекстНДС = "";
	
		//ТабНДС=РасшифровкаПлатежа.Выгрузить();
		//ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		//Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
		//	ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(СтавкаНДС) ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + СтавкаНДС + ") " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		
		//КонецЦикла;
		
		Если СуммаНДС > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ТекстСумма = ТекстСумма + Символы.ПС + "Без НДС";
	КонецЕсли;
	
	НазначениеПлатежа = СокрЛП(ТекстНазначение) + Символы.ПС + ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

Процедура обСформироватьНазначениеПлатежа(ДанныеЗаполнения)

	АдресСуммы = Найти(НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;
	
	//Если ТекстНазначение = "" И НЕ СчетКонтрагента.Пустая() Тогда
	//	ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	//КонецЕсли;
	
	//Если ТекстНазначение = "" Тогда
		//И РасшифровкаПлатежа.Количество() = 1
		//И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		
		//ТекстНазначение = ТекстНазначение
		//	+ ?(ПустаяСтрока(ТекстНазначение), "По ", " по ")
//			+ Строка(СтрокаПлатеж.ДоговорКонтрагента);
	//КонецЕсли;

	ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	//ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	//Если ЕстьРасчетыСКонтрагентами Тогда
		
		ТекстНДС = "";
	
		//ТабНДС=РасшифровкаПлатежа.Выгрузить();
		//ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		//Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
		//	ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(СтавкаНДС) ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + СтавкаНДС + ") " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		
		//КонецЦикла;
		
		Если СуммаНДС > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
		
	//КонецЕсли;
	
	НазначениеПлатежа = ДанныеЗаполнения.НазначениеПлатежа + Символы.ПС + СокрЛП(ТекстНазначение) + Символы.ПС + ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

Функция СчетаДокументаНеКорректны()
	Если ВидОперации=неопределено Тогда
		Возврат ложь;
	КонецЕсли;	
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПостояннойЧастиАрендыАрендодателю
		или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПеременнойЧастиАрендыАрендодателю
		или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаДепозитаАрендодателю
		Тогда
		
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"60.01" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета расчетов с контрагентом должен быть 60.01!");
			Возврат истина;
		КонецЕсли;	
		Если СчетУчетаРасчетовПоАвансамБУ.Код<>"60.02" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета расчетов по авансам должен быть 60.02!");
			Возврат истина;
		КонецЕсли;	
		
			
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратПокупателю
		      или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратПостояннойЧастиАрендыАрендатору
			  или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратПеременнойЧастиАрендыАрендатору
			  или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДепозитаАрендатору
		Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"62.01" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета расчетов с контрагентом должен быть 62.01!");
			Возврат истина;
		КонецЕсли;	
		Если СчетУчетаРасчетовПоАвансамБУ.Код<>"62.02" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета расчетов по авансам должен быть 62.02!");
			Возврат истина;
		КонецЕсли;	
		
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда	
		
		//+++АК LAGP 2018.04.04 ИП-00018262 Доработка: Оплата гос пошлин
		//Если НЕ СчетУчетаРасчетовСКонтрагентомБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
		Если НЕ (СчетУчетаРасчетовСКонтрагентомБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) ИЛИ СчетУчетаРасчетовСКонтрагентомБУ.Код = "60.01") Тогда		
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет должен принадлежать счету 68 или быть 60.01(оплата штрафа)!");
		//---АК LAGP	
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"66.03" и  СчетУчетаРасчетовСКонтрагентомБУ.Код<>"66.04" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 66.03 или 66.04!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"76.05" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 76.05!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда	
		
		//+++АК LAGP 2018.02.19 ИП-00017918
		//Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"51" Тогда
		Если НЕ (СчетУчетаРасчетовСКонтрагентомБУ.Код = "51" ИЛИ СчетУчетаРасчетовСКонтрагентомБУ.Код = "51.02") Тогда
		//---АК LAGP	
			
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 51 или 51.02!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"70" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 70!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПодотчетномуЛицу Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код <> "71" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 71!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"55.03" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 55.03!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаУслугБанка Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"91.02" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 91.02!");
			Возврат истина;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайринга или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОтменаЭквайрингаСводно Тогда	
		
		Если СчетУчетаРасчетовСКонтрагентомБУ.Код<>"57.03" Тогда
			Сообщить("Для вида операции(упр) "+"("+ВидОперации+")"+" счет учета должен быть 57.03!");
			Возврат истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	

Процедура ПодобратьВедомости() Экспорт
	
	//+++susk
	//ИП-00016526 - МАТ ПОМОООООЩЬ
	
	//ТекстЗапроса="ВЫБРАТЬ
	//             |	ЗарплатаКВыплатеОрганизаций.Ссылка
	//             |ИЗ
	//             |	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	//             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзБанка.ПеречислениеЗаработнойПлаты КАК РасходИзБанкаПеречислениеЗаработнойПлаты
	//             |		ПО РасходИзБанкаПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизаций.Ссылка
	//             |ГДЕ
	//             |	ЗарплатаКВыплатеОрганизаций.СуммаДокумента = &СуммаДокумента
	//             |	И ЗарплатаКВыплатеОрганизаций.Проведен
	//             |	И ЗарплатаКВыплатеОрганизаций.Дата МЕЖДУ &ДатаС И &ДатаПо
	//             |	И ЗарплатаКВыплатеОрганизаций.Организация = &Организация
	//             |	И РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка ЕСТЬ NULL ";
	//Запрос=Новый Запрос(ТекстЗапроса);			 
	//Запрос.УстановитьПараметр("СуммаДокумента",СуммаДокумента);
	//Запрос.УстановитьПараметр("ДатаС",НачалоДня(Дата)-7*24*60*60);
	//Запрос.УстановитьПараметр("ДатаПо",КонецДня(Дата));
	//Запрос.УстановитьПараметр("Организация",Организация);
	//Выборка=Запрос.Выполнить().Выбрать();
	//Если выборка.Следующий() Тогда
	//	НС=ПеречислениеЗаработнойПлаты.Добавить();
	//	НС.Ведомость=Выборка.Ссылка;
	//	НС.СуммаПлатежа=СуммаДокумента;
	//	Если Организация.ИНН="7726660031" или Организация.ИНН="7734675810"	Тогда
	//		НС.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120510");
	//	ИначеЕсли Организация.ИНН="7734641716" Тогда
	//		НС.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137110");
	//	КонецЕсли;	
	//КонецЕсли;	
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	             |	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
	             |	ВЫБОР
	             |		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000029""
	             |				ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000030""
	             |			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления
	             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыНачисленийЗУП.ПустаяСсылка)
	             |	КОНЕЦ КАК ВидНачисления
	             |ИЗ
	             |	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзБанка.ПеречислениеЗаработнойПлаты КАК РасходИзБанкаПеречислениеЗаработнойПлаты
	             |		ПО (РасходИзБанкаПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка)
	             |ГДЕ
	             |	РасходИзБанкаПеречислениеЗаработнойПлаты.Ссылка ЕСТЬ NULL
	             |	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СуммаДокумента = &СуммаДокумента
	             |	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	             |	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Проведен
	             |	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация = &Организация
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	             |	ВЫБОР
	             |		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000029""
	             |				ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления.Код = ""000000030""
	             |			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВидНачисления
	             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыНачисленийЗУП.ПустаяСсылка)
	             |	КОНЕЦ
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата";
	
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("СуммаДокумента",СуммаДокумента);
	Запрос.УстановитьПараметр("ДатаС",НачалоДня(Дата)-7*24*60*60);
	Запрос.УстановитьПараметр("ДатаПо",КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НС=ПеречислениеЗаработнойПлаты.Добавить();
		НС.Ведомость=Выборка.Ссылка;
		НС.СуммаПлатежа=Выборка.Сумма;
		
		Если ЗначениеЗаполнено(Выборка.ВидНачисления) Тогда
			НС.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139397");
		Иначе
			Если Организация.ИНН="7726660031" или Организация.ИНН="7734675810" ИЛИ Организация.ИНН="7734410589" Тогда //+++АК LAGP 2018.12.07 б/н Просьба Юлии Полухоновой. Добавлена организация Тилси
				НС.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120510");
			ИначеЕсли Организация.ИНН="7734641716" Тогда
				НС.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137110");			
			КонецЕсли;	
		КонецЕсли;
		Прервать;
	КонецЦикла;
	//---susk
	
КонецПроцедуры	

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	//+++АК LAGP 2018.01.22 ИП-00017670 Открыт неиспользуемый механизм, вместо номера документа вычисляет НомерВходящегоДокумента, префикс убран
	//mind заблокируем таблицу
	ДокМетаданные = Метаданные();
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировка = Блокировка.Добавить();
	ЭлементБлокировка.Область = "РегистрСведений.НомераДокументовПериодические";
	ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировка.УстановитьЗначение("Вид", ДокМетаданные.Имя);
	ЭлементБлокировка.УстановитьЗначение("Организация", Организация);
	ЭлементБлокировка.УстановитьЗначение("Период", Дата);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вид", ДокМетаданные.Имя);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", НачалоГода(Дата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	НомераДокументов.Номер
	  //             |	НомераДокументов.Организация.Префикс КАК Префикс
	               |ИЗ
	               |	РегистрСведений.НомераДокументовПериодические КАК НомераДокументов
	               |ГДЕ
	               |	НомераДокументов.Период = &Период
	               |	И НомераДокументов.Вид = &Вид
	               |	И НомераДокументов.Организация = &Организация";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	//СтандартнаяОбработка = Ложь;
	Если Выборка.Следующий() Тогда
		МаксНомер = Выборка.Номер + 1;
		//Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);     
		НомерВходящегоДокумента = Формат(МаксНомер, "ЧГ=0");
		//Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
		//	Номер = СокрЛП(Выборка.Префикс) + Сред(Номер, СтрДлина(Выборка.Префикс) + 1);
		//КонецЕсли;
	Иначе
		МаксНомер = 1;
		//Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
		НомерВходящегоДокумента = Формат(МаксНомер, "ЧГ=0");
		//Если ЗначениеЗаполнено(Организация.Префикс) Тогда
		//	Номер = СокрЛП(Организация.Префикс) + Сред(Номер, СтрДлина(Организация.Префикс) + 1);
		//КонецЕсли;
	КонецЕсли;
	
	Запись = РегистрыСведений.НомераДокументовПериодические.СоздатьМенеджерЗаписи();
	Запись.Период = НачалоГода(Дата);
	Запись.Вид = ДокМетаданные.Имя;
	Запись.Организация = Организация;
	Запись.Номер = МаксНомер;
	Запись.Записать();
	//---АК LAGP
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРасчетамСКонтрагентами() Экспорт
	
	Движения.РасчетыПоСделкамСПоставщиками.Записать();
	Движения.РасчетыПоСделкамСПоставщиками.Записывать = Ложь;

	Движения.РасчетыСКонтрагентами.Записывать = Истина;
	Движения.РасчетыСКонтрагентами.Очистить();
	
	СчетаДляУчетаНаРегистреРасчетовСКонтрагентами = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаДляУчетаНаРегистреРасчетовСКонтрагентами();
	
	СчетУчета = Неопределено;
	
	Для Каждого Запись ИЗ Движения.Финансовый Цикл
		Если СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Запись.СчетДт) <> Неопределено Тогда
			СчетУчета = Запись.СчетДт;
			Прервать;
		КонецЕсли; 
	КонецЦикла;  
	
	Если Дата<Дата(2017,1,1) ИЛИ НЕ Оплачено ИЛИ СчетУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Движения по сделкам с поставщиками
	//+++АК pozm 23.08.2017 ИП-00016295
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	РасчетыПоСделкамСПоставщиками.Сделка,
	//                      |	РасчетыПоСделкамСПоставщиками.Сумма,
	//                      |	РасчетыПоСделкамСПоставщиками.УИН_Этапа
	//                      |ПОМЕСТИТЬ ВТ_Платежи
	//                      |ИЗ
	//                      |	РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	//                      |ГДЕ
	//                      |	РасчетыПоСделкамСПоставщиками.Регистратор = &Регистратор
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ_Платежи.Сделка,
	//                      |	ВТ_Платежи.Сумма,
	//                      |	ВЫБОР
	//                      |		КОГДА СделкаСПоставщикомЭтапыСделки.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплаты.ВУказаннуюДату)
	//                      |			ТОГДА ВТ_Платежи.Сумма
	//                      |		ИНАЧЕ 0
	//                      |	КОНЕЦ КАК АвансПоСделке
	//                      |ИЗ
	//                      |	ВТ_Платежи КАК ВТ_Платежи
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	//                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ЭтапыСделки КАК СделкаСПоставщикомЭтапыСделки
	//                      |			ПО СделкаСПоставщикомГрафикОплат.Ссылка = СделкаСПоставщикомЭтапыСделки.Ссылка
	//                      |				И СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика = СделкаСПоставщикомЭтапыСделки.НомерСтроки
	//                      |		ПО ВТ_Платежи.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	//                      |			И ВТ_Платежи.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки");
	
	// Познахарёв переделал 
	Запрос = Новый Запрос("ВЫБРАТЬ
                          |	РасчетыПоСделкамСПоставщиками.Сделка,
                          |	РасчетыПоСделкамСПоставщиками.Сумма,
                          |	РасчетыПоСделкамСПоставщиками.УИН_Этапа,
                          |	РасчетыПоСделкамСПоставщиками.Комплектация
                          |ПОМЕСТИТЬ ВТ_Платежи
                          |ИЗ
                          |	РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
                          |ГДЕ
                          |	РасчетыПоСделкамСПоставщиками.Регистратор = &Регистратор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ВТ_Платежи.Сделка,
                          |	ВТ_Платежи.Сумма,
                          |	ВЫБОР
                          |		КОГДА СделкаСПоставщикомЭтапыСделки.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплаты.ВУказаннуюДату)
                          |			ТОГДА ВТ_Платежи.Сумма
                          |		ИНАЧЕ 0
                          |	КОНЕЦ КАК АвансПоСделке
                          |ИЗ
                          |	ВТ_Платежи КАК ВТ_Платежи
                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
                          |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ЭтапыСделки КАК СделкаСПоставщикомЭтапыСделки
                          |			ПО СделкаСПоставщикомГрафикОплат.Ссылка = СделкаСПоставщикомЭтапыСделки.Ссылка
                          |				И СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика = СделкаСПоставщикомЭтапыСделки.НомерСтроки
                          |		ПО ВТ_Платежи.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
                          |			И ВТ_Платежи.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
                          |
                          |ОБЪЕДИНИТЬ ВСЕ
                          |
                          |ВЫБРАТЬ
                          |	ВТ_Платежи.Сделка,
                          |	ВТ_Платежи.Сумма,
                          |	0
                          |ИЗ
                          |	ВТ_Платежи КАК ВТ_Платежи
                          |ГДЕ
                          |	(ВТ_Платежи.Комплектация ССЫЛКА Документ.ПоступлениеТоваровУслуг
                          |			ИЛИ ВТ_Платежи.Комплектация ССЫЛКА Документ.ПоступлениеДопРасходов)");
	//---АК pozm 23.08.2017 ИП-00016295
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;
		Движение.ДокументДт	= ЭтотОбъект.Ссылка;
		Движение.Период			= ЭтотОбъект.Дата;
		Движение.Организация = ЭтотОбъект.СубконтоДт1;
		Движение.Контрагент = ЭтотОбъект.СубконтоДт2;
		Движение.Сделка = Выборка.Сделка;
		Движение.СчетУчета = ПланыСчетов.Финансовый.ПрочаяЗадолженность;      // все движения по сделкам учитываем на 60.4
		Движение.Сумма			= Выборка.Сумма;
		Движение.АвансПоСделке= Выборка.АвансПоСделке;
	КонецЦикла;   
	
	// Движение по заявками и без сделок
	СуммаПоСделкам = Движения.РасчетыСКонтрагентами.Итог("Сумма");
	
	Если ЭтотОбъект.СуммаДокумента > СуммаПоСделкам Тогда
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;
		Движение.ДокументДт	= ЭтотОбъект.Ссылка;
		Движение.Период			= ЭтотОбъект.Дата;
		Движение.Организация = ЭтотОбъект.СубконтоДт1;
		Движение.Контрагент = ЭтотОбъект.СубконтоДт2;
		Если ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств) И ТипЗнч(ЗаявкаНаРасходованиеСредств) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
 			Движение.Сделка = ЭтотОбъект.ЗаявкаНаРасходованиеСредств;
		КонецЕсли; 
		Движение.СчетУчета = СчетУчета;
		Движение.Сумма			= ЭтотОбъект.СуммаДокумента - СуммаПоСделкам;
	КонецЕсли; 
	
КонецПроцедуры 

//+++АК LATV 2018.09.19 ИП-00019768
Процедура ОтправитьПисьмоСРасшифровкойСделки(Принудительно = Ложь) Экспорт

	Если ПисьмоПоставщикуОтправлено И Не Принудительно Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (ТипЗнч(ЗаявкаНаРасходованиеСредств) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") И ТипЗнч(ЗаявкаНаРасходованиеСредств) <> Тип("ДокументСсылка.СделкаСПоставщиком"))
	 Или (Не ЗначениеЗаполнено(ЗаявкаНаРасходованиеСредств)) Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование списка адрессатов
	СписокКому = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = Значение(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)";
	
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не заполнен адрес электронной почты контрагента!!");
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Выборка.Представление,";");
	Для Каждого Эл Из МассивАдресов Цикл
		Если ЗначениеЗаполнено(Эл) Тогда
			СписокКому.Добавить(СокрЛП(Эл));
		КонецЕсли;
	КонецЦикла;
	
	// Формирование отчета
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД = Документы.СделкаСПоставщиком.ПолучитьМакет("СхемаОтчетаОтправкиПоставщикуОбОплате");
	СКД.Параметры.Ссылка.Значение = Ссылка;
	
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Сохранение файла отчета
	ФорматФайла = Справочники.Контрагенты.ФорматСохраненияТабличногоДокументаКонтрагента(Контрагент);
	ИмяФайла = ПолучитьИмяВременногоФайла(ФорматФайла);
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента[ФорматФайла]);
	
	ДанныеФайла			= Новый ДвоичныеДанные(ИмяФайла);
	НаименованиеФайла	= "Информация об оплаченном оборудовании." + НРег(ФорматФайла);
	
	УдалитьФайлы(ИмяФайла);
	
	//Отправка письма
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема				= "" + Организация + ". Оплачено оборудование " + Контрагент.НаименованиеПолное;
	Письмо.ИмяОтправителя	= СокрЛП(УчетнаяЗапись);
	Письмо.Отправитель		= СокрЛП(УчетнаяЗапись);
	
	Для Каждого ПолучательЭлемент Из СписокКому Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = ПолучательЭлемент.Значение;
	КонецЦикла;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст		= "Во вложении находится информация об оплаченном оборудовании";
	ТекстСообщения.ТипТекста	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	Письмо.Вложения.Добавить(ДанныеФайла, НаименованиеФайла);
	
	//	Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
	Почта.Послать(Письмо);
	//	КонецЕсли;	
	
	Почта.Отключиться();
	
	ПисьмоПоставщикуОтправлено = Истина;

КонецПроцедуры

//+++АК ILIK 2018.08.01 ИП-00019392
Процедура ПроверитьВозможностьРедактированияПеречисленияЗП(Отказ)
	Если Отказ Или ЭтотОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеРасходаИзБанкаСВидомПеречислениеЗП, Ложь) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РасходИзБанка.Ссылка
		               |ИЗ
		               |	Документ.РасходИзБанка КАК РасходИзБанка
		               |ГДЕ
		               |	РасходИзБанка.Ссылка = &Ссылка
		               |	И РасходИзБанка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗП), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗППоВедомости))
		               |	И РасходИзБанка.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		               |	И РасходИзБанка.Оплачено
		               |	И РасходИзБанка.Проведен";
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменять оплаченный документ с видом ""Перечисление заработной платы (списание)"" и ""Перечисление ЗП по ведомости (списание)"".", Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
