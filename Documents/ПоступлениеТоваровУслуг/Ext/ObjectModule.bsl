
Перем ФлОборудование Экспорт;
Перем НеПроверятьПриходныеОрдера Экспорт;
Перем НеПроверятьДатуЗапретаРедактирования Экспорт;
Перем МенятьСтатусы Экспорт;
//Внимание! Если программно работаете с объектом документов ПоступлениеТоваровИУслуг или ЗаявкаНаРасходованиеДенежныхСредств, то перед записью присваивать значение переменной этих объектов МенятьСтатусы = ЛОЖЬ

Перем ОтправлятьНаРаспознавание Экспорт; //++ АК luza ИП-00017231.01 17.01.2018

///////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Выводит многострочное поле в табличный документ
//
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	Макет - ТабличныйДокумент - Макет табличного документа
// 	ДанныеПечати - ВыборкаИзРезультатаЗапроса
// 	ИмяПоля - Строка - Имя реквизита результата запроса, имя области макета, имя параметра области макета
// 	КоличествоСтрокРучногоВвода - Число - Количество строк ручного заполнения
//
Процедура ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, ИмяПоля, КоличествоСтрокРучногоВвода=4)
	
	Область = Макет.ПолучитьОбласть(ИмяПоля);
	ТабличныйДокумент.Вывести(Область);
	Если ЗначениеЗаполнено(ДанныеПечати[ИмяПоля]) Тогда
		
		Область = Макет.ПолучитьОбласть("МногострочноеПоле");
		Область.Параметры.Значение = ДанныеПечати[ИмяПоля];
		ТабличныйДокумент.Вывести(Область);
		
	Иначе
		ОбластьСтрокиРучногоЗаполнения = Макет.ПолучитьОбласть("СтрокаРучногоЗаполнения");
		Для Счет = 1 По КоличествоСтрокРучногоВвода Цикл
			ТабличныйДокумент.Вывести(ОбластьСтрокиРучногоЗаполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластьСтрокиПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ТабличныйДокумент.Вывести(ОбластьСтрокиПробела);
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("Торг2"					, "ТОРГ-2");
	СтруктураПечати.Вставить("ПретензияПоставщику"		, "Претензия поставщику");
	СтруктураПечати.Вставить("АктОбОказанииУслуг_Аренда", "Акт об оказании услуг (аренда)");
	СтруктураПечати.Вставить("АктОбОказанииУслуг"		, "Акт об оказании услуг (за поставщика)");
	
	Возврат СтруктураПечати;

КонецФункции

#Если Клиент Тогда
	
Функция ПечатьТорг2() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер КАК НомерДокумента,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Грузоотправитель,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
	|	"""" КАК СостояниеТранспортаПоДокументам,
	|	"""" КАК СостояниеТранспортаПоФакту,
	|	"""" КАК УсловияХраненияТовараДоВскрытия,
	|	"""" КАК СостояниеТарыИУпаковки,
	|	"""" КАК СодержаниеНаружнойМаркировки,
	|	"""" КАК ОрганизацияВзвесившаяИОпломбировавшаяТовар,
	|	"""" КАК ПорядокОтбораТовараДляВыборочнойПроверки,
	|	"""" КАК МестоОпределенияКоличества,
	|	"""" КАК СведенияОбИсправностиВесоизмерительныхПриборов,
	|	"""" КАК ПрочиеДанные,
	|	"""" КАК ПодробноеОписаниеДефектов,
	|	"""" КАК ЗаключениеКомиссии,
	|	"""" КАК Приложение,
	|	"""" КАК РешениеРуководителя,
	|	"""" КАК ТемператураПриРазгрузке,
	|	ПоступлениеТоваровУслуг.НомерВходящегоСчетаФактуры КАК НомерСчетаФактуры,
	|	ПоступлениеТоваровУслуг.ДатаВходящегоСчетаФактуры КАК ДатаСчетаФактуры,
	|	ПоступлениеТоваровУслуг.НомерДоговораПоставки,
	|	ПоступлениеТоваровУслуг.ДатаДоговораПоставки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоМестПоДокументам,
	|	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоПоДокументам,
	|	ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам КАК КоличествоМестПоФакту,
	|	ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.Количество КАК КоличествоМестРасхождение,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Цена КАК ЦенаПоДокументам,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК СуммаПоДокументам
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам <> 0";
		
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеПечати 	= ПакетРезультатов[0].Выбрать();
	ТаблицаТоваров 	= ПакетРезультатов[1].Выгрузить();
	
	ДанныеПечати.Следующий();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ2";
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ2");
	
	КолонкаКодов = "Артикул";
	//ТекстНДСВШапкеТаблицы = ?(ДанныеПечати.ЦенаВключаетНДС, "", " " + НСтр("ru='(Без НДС)'"));
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
	
	ТекстЗаключения = "При приемке товара выявлено:" + Символы.ПС;
	
	// Берем из 1го приходного ордера
	ПредседательКомиссииФИО 	= "";
	НомерТранспортногоСредства 	= "";
	ДатаВскрытияТары 			= Дата(1, 1, 1);
	Если ЭтотОбъект.ПриходныеОрдера.Количество() Тогда
		ПредседательКомиссииФИО 	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ЭтотОбъект.ПриходныеОрдера[0].ПриходныйОрдер.Кладовщик);	
		НомерТранспортногоСредства 	= ЭтотОбъект.ПриходныеОрдера[0].ПриходныйОрдер.Автомобиль.Наименование;
		ДатаВскрытияТары 			= ЭтотОбъект.ПриходныеОрдера[0].ПриходныйОрдер.Дата; 
	КонецЕсли;
	
	АдресСтруктурнойЕдиницы = ЭтотОбъект.СтруктурнаяЕдиница.Адрес;
	МестоПриемкиТовара = ?(ПустаяСтрока(АдресСтруктурнойЕдиницы), "", "Москва г., " + АдресСтруктурнойЕдиницы);
	
	//
	Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
	Область.Параметры.Заполнить(ДанныеПечати);
	Область.Параметры.ПредставлениеОрганизации 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеПечати.Организация		, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	Область.Параметры.Грузоотправитель 			= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель	, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	Область.Параметры.Поставщик 				= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеПечати.Поставщик		, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	
	Область.Параметры.ПереченьСопроводительныхДокументов 	= "накладная № " + ЭтотОбъект.НомерВходящегоДокумента + " от " +
																Формат(ЭтотОбъект.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
	Область.Параметры.СпособДоставки 				= "автомобиль";
	Область.Параметры.НомерТранспортногоСредства 	= НомерТранспортногоСредства;	
	
	Область.Параметры.ДолжностьРуководителя	 	= Руководители.РуководительДолжность;
	Область.Параметры.РуководительФИО	 		= Руководители.РуководительПредставление;
	
	Область.Параметры.МестоПриемкиТовара 		= МестоПриемкиТовара;
	
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод таблицы приемки товаров
	Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровСтрока");
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
	ТабличныйДокумент.Вывести(Область);
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Вывод шапки
	Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод состояния транспорта по документам
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоДокументам", 4);
	
	// Вывод таблицы товаров по документам
	Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамШапка");
	ТабличныйДокумент.Вывести(Область);
	
	Строки = ТаблицаТоваров;
	Для Каждого Строка Из Строки Цикл
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамСтрока");
		Область.Параметры.Заполнить(Строка);
		Область.Параметры.Товар = Строка.НоменклатураНаименование;
		ТабличныйДокумент.Вывести(Область);
		
		ТекстЗаключения = ТекстЗаключения + Строка.НоменклатураНаименование + " (" + Строка(Строка.КоличествоМестРасхождение) + " " +
							Строка(Строка.ЕдиницаИзмерения) + ") - недостача; ";
		
	КонецЦикла;
	Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамПодвал");
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод состояния транспорта по факту
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоФакту", 4);
	
	// Вывод таблицы итогов
	Область = Макет.ПолучитьОбласть("ТаблицаИтогов");
	Область.Параметры.КоличествоМестПоДокументам 	= ТаблицаТоваров.Итог("КоличествоМестПоДокументам");
	Область.Параметры.КоличествоМестПоФакту 		= ТаблицаТоваров.Итог("КоличествоМестПоФакту");
	Область.Параметры.КоличествоМестРасхождение 	= ТаблицаТоваров.Итог("КоличествоМестРасхождение");
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод первой части таблицы товаров
	Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
	//Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
	ТабличныйДокумент.Вывести(Область);
	Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
	тТовары = ТаблицаТоваров;
	Для Каждого Товар Из тТовары Цикл
		Область.Параметры.Заполнить(Товар);
		Область.Параметры.Товар 		= Товар.НоменклатураНаименование;
		Область.Параметры.ЗначениеКода 	= Товар[КолонкаКодов];
		ТабличныйДокумент.Вывести(Область);
	КонецЦикла;
	Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
	ТабличныйДокумент.Вывести(Область);
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	
	// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Вывод шапки
	Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод Условий Хранения Товара До Вскрытия
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "УсловияХраненияТовараДоВскрытия", 4);
	
	// Вывод Температуры При Разгрузке
	Область = Макет.ПолучитьОбласть("ТемператураПриРазгрузке");
	Область.Параметры.ТемператураПриРазгрузке = ДанныеПечати.ТемператураПриРазгрузке;
	ТабличныйДокумент.Вывести(Область);
	
	
	
	// Вывод Состояния Тары И Упаковки
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТарыИУпаковки", 4);
	
	// Вывод содержания наружной маркировки
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СодержаниеНаружнойМаркировки", 4);
	
	// Вывод даты вскрытия тары
	Область = Макет.ПолучитьОбласть("ДатаВскрытияТары");
	Область.Параметры.ДатаВскрытияТары = ДатаВскрытияТары;
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод Организации Взвесившей И Опломбировавшей Товар
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ОрганизацияВзвесившаяИОпломбировавшаяТовар", 4);
	
	// Вывод Порядока Отбора Товара Для Выборочной Проверки
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПорядокОтбораТовараДляВыборочнойПроверки", 4);
	
	// Вывод второй части таблицы товаров
	Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
	//Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
	ТабличныйДокумент.Вывести(Область);
	Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
	Для Каждого Товар Из тТовары Цикл
		Область.Параметры.Заполнить(Товар);
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
		КонецЕсли;
		//Область.Параметры.НомерПаспорта = СоответствиеПаспортов[Товар];
		ТабличныйДокумент.Вывести(Область);
	КонецЦикла;
	Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
	ТабличныйДокумент.Вывести(Область);
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	
	// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Вывод шапки
	Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод способа определения количества
	Область = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
	Область.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(Область);
	// Вывод места определения количества
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "МестоОпределенияКоличества", 4);
	// Вывод сведений об исправности весоизмерительных приборов
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СведенияОбИсправностиВесоизмерительныхПриборов", 4);
	// Вывод прочих данных
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПрочиеДанные", 4);
	// Вывод подробного описания дефектов
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПодробноеОписаниеДефектов", 4);
	// Вывод заключения комиссии
	СтруктураЗаключения = Новый Структура("ЗаключениеКомиссии", ТекстЗаключения);
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, СтруктураЗаключения, "ЗаключениеКомиссии", 4);
	// Вывод приложения
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "Приложение", 4);
	
	// Вывод членов комиссии
	Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
	//Область.Параметры.Заполнить(ДанныеПечати);
	//Область.Параметры.Заполнить(ПолучитьСтруктуруПоДате("ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера", ДанныеПечати.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера));
	
	Область.Параметры.ПредседательКомиссииФИО = ПредседательКомиссииФИО;
	//Область.Параметры.ЧленКомиссии1ФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии1);
	//Область.Параметры.ЧленКомиссии2ФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии2);
	//Область.Параметры.ЧленКомиссии3ФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии3);
	Область.Параметры.ГлавныйБухгалтерФИО = Руководители.ГлавныйБухгалтерПредставление;
	ТабличныйДокумент.Вывести(Область);
	
	// Вывод решения руководителя
	ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "РешениеРуководителя", 4);
	
	// Вывод кладовщика
	Область = Макет.ПолучитьОбласть("Кладовщик");
	Область.Параметры.КладовщикПринявшийТоварФИО = "Ворошилов С.В.";
	ТабличныйДокумент.Вывести(Область);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьПретензииПоставщику()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	(ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу) * ПоступлениеТоваровУслугТовары.Цена КАК СуммаПретензии,
	|	ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу КАК КоличествоПретензия,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Количество,
	// С учетом претензии к складу
	|	ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам + ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу КАК ПоПриходнымОрдерам
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу > 0
	//+++АК Susk (Суслин К.В.) 2018.02.05 ИП-00016528 
	|И НЕ ПоступлениеТоваровУслугТовары.КорректировкаПТУ");
	//---АК Susk (Суслин К.В.) 
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	СуммаПретензии = Запрос.Выполнить().Выгрузить().Итог("СуммаПретензии");
	Если СуммаПретензии = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	пСуммаПретензии = Формат(СуммаПретензии, "ЧДЦ=2");
	СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаПретензии, Константы.ВалютаРегламентированногоУчета.Получить());
	
	КраткийСостав = "";
	КраткийСоставПоставлено = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		КраткийСостав = КраткийСостав + ?(ПустаяСтрока(КраткийСостав), "", "; ") + Строка(Выборка.Номенклатура) + " (" + Формат(Выборка.Количество, "ЧДЦ=3") + " " + Строка(Выборка.ЕдиницаИзмерения) + ")";
		КраткийСоставПоставлено = КраткийСоставПоставлено + ?(ПустаяСтрока(КраткийСоставПоставлено), "", "; ") + Строка(Выборка.Номенклатура) + " (" + Формат(Выборка.ПоПриходнымОрдерам, "ЧДЦ=3") + " " + Строка(Выборка.ЕдиницаИзмерения) + ")";
	КонецЦикла;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПретензияПоставщику");
	
	НаименованиеОрганизации = Организация.НаименованиеСокращенное;
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Организация, Дата);
	
	ПредставлениеДоговораПоставки = "№ " + НомерДоговораПоставки + " от "  + Формат(ДатаДоговораПоставки, "ДФ='""«""dd""»"" MMMM yyyy'");
	ПредставлениеАкта = "№ " + НомерАктаПриемкиТовара + " от "  + Формат(ДатаАктаПриемкиТовара, "ДФ='""«""dd""»"" MMMM yyyy'");
	ДатаАкта = Формат(ДатаАктаПриемкиТовара, "ДФ='""«""dd""»"" MMMM yyyy'");
	
	// Шапка
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ПредставлениеОрганизации= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование,ЮридическийАдрес"); 
	ОбластьМакета.Параметры.НомерДокумента 			= Номер;
	ОбластьМакета.Параметры.ДатаДокумента 			= Формат(Дата, "ДФ='""«""dd""»"" MMMM yyyy'");
	ОбластьМакета.Параметры.КонтрагентНаименование 	= НаименованиеКонтрагента;
	ОбластьМакета.Параметры.ЮрАдресКонтрагента 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата), "ЮридическийАдрес");
	ОбластьМакета.Параметры.ПредставлениеДоговора 	= ПредставлениеДоговораПоставки;
	ОбластьМакета.Параметры.Сумма					= пСуммаПретензии;
	ОбластьМакета.Параметры.СуммаПрописью 			= СуммаПрописью;
	
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Тело
	ОбластьМакета = Макет.ПолучитьОбласть("Тело");
	ОбластьМакета.Параметры.ОрганизацияНаименование = НаименованиеОрганизации;
	ОбластьМакета.Параметры.КонтрагентНаименование 	= НаименованиеКонтрагента;
	ОбластьМакета.Параметры.ПредставлениеДоговора 	= ПредставлениеДоговораПоставки;
	
	ОбластьМакета.Параметры.КраткийСостав 			= КраткийСостав;
	ОбластьМакета.Параметры.ПредставлениеАкта 		= ПредставлениеАкта;
	ОбластьМакета.Параметры.ДатаАкта 				= ДатаАкта;
	
	ОбластьМакета.Параметры.КраткийСоставПоставлено = КраткийСоставПоставлено;
	
	ОбластьМакета.Параметры.Сумма 			= пСуммаПретензии;
	ОбластьМакета.Параметры.СуммаПрописью 	= СуммаПрописью;
	
	ОбластьМакета.Параметры.ПредставлениеДатыДокумента 	= Формат(Дата, "ДФ='""«""dd""»"" MMMM yyyy'");
	ОбластьМакета.Параметры.НомерВходящегоДокумента 	= НомерВходящегоДокумента;
	ОбластьМакета.Параметры.ДатаВходящегоДокумента 		= Формат(ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
	
	ОбластьМакета.Параметры.ДатаОплаты 		= Формат(Дата + 86400*10, "ДФ='""«""dd""»"" MMMM yyyy'");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.ПредставлениеДоговора 		= ПредставлениеДоговораПоставки;
	ОбластьМакета.Параметры.НомерВходящегоДокумента 	= НомерВходящегоДокумента;
	ОбластьМакета.Параметры.ДатаВходящегоДокумента 		= Формат(ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.РуководительПредставление 	= Руководители.РуководительПредставление;
	ОбластьМакета.Параметры.ПредставлениеАкта 			= ПредставлениеАкта;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции
                                                            
Функция ПечатьАктаОбОказанииУслуг_Аренда()
	
	Если (НЕ ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование))
			ИЛИ НЕ ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ПутевойЛист") Тогда
		Возврат Неопределено;
	КонецЕсли;
	//Если НЕ ЭтотОбъект.ПроизвестиУплатуНДФЛ Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокПутевойЛист", ЭтотОбъект.ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ПутевойЛистПоказания.Дата) КАК МинДата,
	|	МАКСИМУМ(ПутевойЛистПоказания.Дата) КАК МаксДата
	|ИЗ
	|	Документ.ПутевойЛист.Показания КАК ПутевойЛистПоказания
	|ГДЕ
	|	ПутевойЛистПоказания.Ссылка = &ДокПутевойЛист";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДат = РезультатЗапроса.Выбрать();
	ВыборкаДат.Следующий();
	
	
	//////////////////////////
	мВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ЭтотОбъект.ПолучитьМакет("АктОбОказанииУслуг_Аренда");
	
	СтрокаДаты = Формат(ВыборкаДат.МаксДата, "ДФ='dd MMMM yyyy ""г.""'");
	Макет.Параметры.ДатаАкта 			= """" + Лев(СтрокаДаты, 2) + """" + Сред(СтрокаДаты, 3);
	Макет.Параметры.Договор 			= ЭтотОбъект.ДоговорКонтрагента.Номер + " от " + Формат(ЭтотОбъект.ДоговорКонтрагента.Дата, "ДЛФ=Д");
	Макет.Параметры.Контрагент 			= ЭтотОбъект.Контрагент.НаименованиеПолное;
	
	ПаспортДанные = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(РабочаяДата,
																				Новый Структура("ФизЛицо", ЭтотОбъект.ДокументОснование.ФизЛицо));
																				
	Если значениеЗаполнено(ПаспортДанные.ДокументСерия) Тогда																							
		ПаспортныеДанные = "Паспорт: серия " + ПаспортДанные.ДокументСерия + " № " + ПаспортДанные.ДокументНомер +
							" выдан: " + Формат(ПаспортДанные.ДокументДатаВыдачи, "ДЛФ=Д") + " г. " + ПаспортДанные.ДокументКемВыдан + ",";		
	Иначе 		
		ПаспортныеДанные = ЭтотОбъект.ДокументОснование.ФизЛицо.УдостоверениеЛичности+ ",";		
	КонецЕсли;	
		
	Макет.Параметры.ПаспортныеДанные 	= ПаспортныеДанные;
	
	Макет.Параметры.Организация         = ЭтотОбъект.Организация.НаименованиеСокращенное;
	Макет.Параметры.Руководитель        = ЭтотОбъект.Организация.ГенеральныйДиректор;
	Макет.Параметры.НаОсновании         = ЭтотОбъект.Организация.НаОсновании;
	
	Макет.Параметры.ПериодАкта 			= "с " + Формат(ВыборкаДат.МинДата, "ДЛФ=Д") + " по " + Формат(ВыборкаДат.МаксДата, "ДЛФ=Д") + " г.";
	
	Макет.Параметры.Сумма 				= Формат(ЭтотОбъект.СуммаДокумента	, "ЧДЦ=2");
	Макет.Параметры.СуммаПрописью 		= ОбщегоНазначения.СформироватьСуммуПрописью(ЭтотОбъект.СуммаДокумента	, мВалютаРег);
	Макет.Параметры.СуммаНДФЛ			= Формат(ЭтотОбъект.СуммаНДФЛ		, "ЧДЦ=2");
	Макет.Параметры.СуммаНДФЛПрописью	= ОбщегоНазначения.СформироватьСуммуПрописью(ЭтотОбъект.СуммаНДФЛ		, мВалютаРег);
	
	ТабДокумент.Вывести(Макет);
	
	Возврат ТабДокумент;
		
КонецФункции

Функция ПечатьАктаОбОказанииУслуг()
		
	мВалютаРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиАктаОбОказанииУслуг();
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Шапка          = ДанныеДляПечати.Шапка;
	ТабличнаяЧасть = ДанныеДляПечати.ТабличнаяЧасть;
	
	Парам = Новый Структура;
	Парам.Вставить("Дата"	, Шапка.Дата);
	Парам.Вставить("Номер"	, Шапка.Номер);
	СтруктураДатаНомер = ОткрытьФормуМодально("Документ.ПоступлениеТоваровУслуг.Форма.ФормаВводаДатыНомера", Парам);
	
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	//
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПТУ_Акт";
	
	Макет = ЭтотОбъект.ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если НЕ СтруктураДатаНомер = Неопределено Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = "Акт № " + СтруктураДатаНомер.НомерВходящегоДокумента +
	                          						" от " + Формат(СтруктураДатаНомер.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'")
	Иначе						  
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель 				= Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ДанныеДляПечати.ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Товар 		= СокрЛП(СтрокаТабличнойЧасти.Товар);
				
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТабличнаяЧасть <> Неопределено Тогда
		Сумма    = ТабличнаяЧасть.Итог("Сумма");
		СуммаНДС = ТабличнаяЧасть.Итог("СуммаНДС");
	Иначе
		Сумма    = 0;
		СуммаНДС = 0;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	//Если Шапка.ВариантРасчетаНДС<>Перечисления.ВариантыРасчетаНДС.БезНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.ВариантРасчетаНДС=Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	//КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.ВариантРасчетаНДС=Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + НомерСтроки + ", на сумму " +
												ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРубли);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРубли);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//Руководители = ОбщегоНазначения.ОтветственныеЛица(Организация, Дата);
	//ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации = "" + Руководители.РуководительДолжность + " " + ПредставлениеПолучателя;
	
	ОбластьМакета.Параметры.ДолжностьОрганизация 	= ?(ЗначениеЗаполнено(ЭтотОбъект.Организация.ДолжностьРуководителя),
																			СокрЛП(ЭтотОбъект.Организация.ДолжностьРуководителя),
																		?(ЗначениеЗаполнено(ЭтотОбъект.Организация.ГенеральныйДиректор), "Генеральный директор", "")) +
																		" " + СокрЛП(ЭтотОбъект.Организация.НаименованиеПолное);
	ОбластьМакета.Параметры.Директор 				= СокрЛП(ЭтотОбъект.Организация.ГенеральныйДиректор);
	ОбластьМакета.Параметры.ДолжностьИсполнитель 	= ?(ЗначениеЗаполнено(ЭтотОбъект.Контрагент.ДолжностьРуководителя),
																			СокрЛП(ЭтотОбъект.Контрагент.ДолжностьРуководителя),
																		?(ЗначениеЗаполнено(ЭтотОбъект.Контрагент.ГенеральныйДиректор), "Генеральный директор ", "")) +
																		СокрЛП(ЭтотОбъект.Контрагент.НаименованиеПолное);
	ОбластьМакета.Параметры.Исполнитель = СокрЛП(ЭтотОбъект.Контрагент.ГенеральныйДиректор);
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции

Функция ПодготовитьДанныеДляПечатиАктаОбОказанииУслуг() Экспорт
	
	//ДопКолонка = Константы..ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	//Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
	//	ВыводитьКоды    = Истина;
	//	Колонка         = "Артикул";
	//	ТекстКодАртикул = "Артикул";
	//ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
	//	ВыводитьКоды    = Истина;
	//	Колонка         = "Код";
	//	ТекстКодАртикул = "Код";
	//Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	//КонецЕсли;

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Поступление.НомерВходящегоДокумента КАК Номер,
	|	Поступление.ДатаВходящегоДокумента КАК Дата,
	|	Поступление.ДоговорКонтрагента,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	Поступление.Контрагент КАК Поставщик,
	|	Поступление.Организация КАК Получатель,
	|	Поступление.Организация,
	|	Поступление.СуммаДокумента,
	|	Поступление.ВариантРасчетаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Поступление
	|ГДЕ
	|	Поступление.Ссылка = &ТекущийДокумент";
	
	ТаблицаШапки = ЗапросШапка.Выполнить().Выгрузить();
	Если ТаблицаШапки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШапки[0]);
	КонецЕсли;

	ПодразделениеОтветственныхЛиц = Неопределено;
		
	//Руководители = ОбщегоНазначения.ОтветственныеЛица(Организация, Дата, ПодразделениеОтветственныхЛиц);
	//СформироватьСтруктуруПодписейДляПечати(Руководители, Организация, Дата, Шапка);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	//ЗапросУслуги.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	//Если ЭтотОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета
	//	Или Не ЭтотОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
	//	ЗапросУслуги.УстановитьПараметр("Курс", 1);
	//	ВалютаВПодписи = ЭтотОбъект.ВалютаДокумента;
	//Иначе
	//	ЗапросУслуги.УстановитьПараметр("Курс", ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
	//	ВалютаВПодписи = мВалютаРегламентированногоУчета;
	//КонецЕсли;
 	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПоступлениеТоваровУслуг");
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	ОбщаяТаблица.Номенклатура,
	|	ОбщаяТаблица.Товар,
	|	ОбщаяТаблица.КодАртикул,
	|	ОбщаяТаблица.Количество,
	|	ОбщаяТаблица.ЕдиницаИзмерения,
	|	ОбщаяТаблица.Цена,
	|	ОбщаяТаблица.Сумма,
	|	ОбщаяТаблица.СтавкаНДС,
	|	ОбщаяТаблица.СуммаНДС,
	|	ОбщаяТаблица.НомерСтроки,
	|	ОбщаяТаблица.НомерТабличнойЧасти,
	|	ОбщаяТаблица.ИмяТабличнойЧасти
	|ИЗ
	|(ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена  КАК Цена,
	|	Сумма КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС КАК СуммаНДС,
	|	НомерСтроки,
	|	1 КАК НомерТабличнойЧасти,
	|	""Товары"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.ВидНоменклатуры = Значение(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена  КАК Цена,
	|	Сумма КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС КАК СуммаНДС,
	|	НомерСтроки,
	|	2 КАК НомерТабличнойЧасти,
	|	""Услуги"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент) КАК ОбщаяТаблица
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти, НомерСтроки";
	
	ТабличнаяЧасть = ЗапросУслуги.Выполнить().Выгрузить();
	
		
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Шапка", Шапка);
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ДанныеДляПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	ДанныеДляПечати.Вставить("ТекстКодАртикул", ТекстКодАртикул);
	//ДанныеДляПечати.Вставить("ВалютаВПодписи", ВалютаВПодписи);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "Торг2" Тогда
		
		ТабДокумент = ПечатьТорг2();
		
		ПараметрыПечДокумента = Неопределено;
		
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг_Аренда" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг_Аренда();
		
		ПараметрыПечДокумента = Новый Структура("ПолеСлева, ПолеСправа, ПолеСверху, ПолеСнизу, ОриентацияСтраницы, ОтображатьЗаголовки, ОтображатьСетку, ТолькоПросмотр, Защита, ИмяПараметровПечати, Автомасштаб", 4, 4, 0, 0, ОриентацияСтраницы.Портрет,,,,, "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_АктОбОказанииУслуг_Аренда", Истина);
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг();
		
		ПараметрыПечДокумента = Неопределено;
		
	ИначеЕсли ИмяМакета = "ПретензияПоставщику" Тогда
		
		ТабДокумент = ПечатьПретензииПоставщику();
		Если ТабДокумент = Неопределено Тогда
			Сообщить("Нет данных для печати претензии поставщику.");
			Возврат;
		КонецЕсли;
		
		ПараметрыПечДокумента = Новый Структура("ПолеСлева, ПолеСправа, ПолеСверху, ПолеСнизу, ОриентацияСтраницы, ОтображатьЗаголовки, ОтображатьСетку, ТолькоПросмотр, Защита, ИмяПараметровПечати, Автомасштаб", 4, 4, 0, 0, ОриентацияСтраницы.Портрет,,,,, "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ПретензияПоставщику", Истина);
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка,
			ПараметрыПечДокумента);
		
КонецПроцедуры

#КонецЕсли


///////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьИСместитьГраницу()
	
	//ТекГраница = Последовательности.Себестоимость.ПолучитьГраницу();
	//Если ТипЗнч(ТекГраница) = Тип("МоментВремени") Тогда
	//	Если ТекГраница.Сравнить(МоментВремени()) = 1 Тогда
	//		Последовательности.Себестоимость.УстановитьГраницу(МоментВремени());
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры	

Процедура ПроверитьДублиПриходников(Отказ)
	
	Если ЭтотОбъект.ПриходныеОрдера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("МассивОрдеров"	, ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧПриходныеОрдера.Ссылка,
	|	ТЧПриходныеОрдера.ПриходныйОрдер
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ТЧПриходныеОрдера
	|ГДЕ
	|	ТЧПриходныеОрдера.ПриходныйОрдер В(&МассивОрдеров)
	|	И НЕ ТЧПриходныеОрдера.Ссылка = &ТекДокумент
	|	И НЕ ТЧПриходныеОрдера.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Документ """ + Выборка.ПриходныйОрдер + """ уже указан в другом поступлении (""" + Выборка.Ссылка + """!");
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, мВариантРасчета) Экспорт
	
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = (мВариантРасчета = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
													   УчитыватьНДС, СуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры

Процедура ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти) Экспорт
	
	Попытка
		//+++АК sole 2018.07.17 ИП-00018320.12
		//КолвоПретензияКПоставщику = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.ПоПриходнымОрдерам - СтрокаТабличнойЧасти.КоличествоПретензияКСкладу;
		КолвоПретензияКПоставщику = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.ПоПриходнымОрдерам - СтрокаТабличнойЧасти.КоличествоПретензияКСкладу -  СтрокаТабличнойЧасти.КоличествоПретензияКПеревозчику;
		//---АК sole 2018.07.17 ИП-00018320.12
	Исключение
		КолвоПретензияКПоставщику = 0;
	КонецПопытки;
	
	//+++АК Susk (Суслин К.В.) 2018.02.02 ИП-00016528 
	//СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * (СтрокаТабличнойЧасти.Количество - КолвоПретензияКПоставщику);
	Попытка
		КоррПТУ = СтрокаТабличнойЧасти.КорректировкаПТУ;
	Исключение
		КоррПТУ = Ложь;
	КонецПопытки;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * (СтрокаТабличнойЧасти.Количество - ?(КоррПТУ, 0, КолвоПретензияКПоставщику));		
	//---АК Susk (Суслин К.В.) 
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект.ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура ПосчитатьСуммуТабличнойЧасти() Экспорт
	
	//Название не совсем адекватно, это расчет суммы документа
	
	СуммаДок = 0;
	
	мНДСВТомЧисле = (ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		//mind 2017-06-14 ввели счета учета у номенклатур, это теперь лишнее
		//Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		Если мНДСВТомЧисле Тогда
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		Если мНДСВТомЧисле Тогда
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
		Иначе
			СуммаДок = СуммаДок + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
	КонецЦикла;
	
	//+++АК Susk (Суслин К.В.) 2018.10.24 ИП-00020055
	Для Каждого СтрокаТЧ Из НМА Цикл
		СуммаДок = СуммаДок + СтрокаТЧ.Сумма;
	КонецЦикла;
	//---АК Susk (Суслин К.В.) 	 
	
	ЭтотОбъект.СуммаДокумента = СуммаДок;
	
Конецпроцедуры

Процедура ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ) Экспорт
	
	//Отбор = Новый Структура;
	//Отбор.Вставить("Номенклатура"		, СтрокаТЧ.Номенклатура);
	//Отбор.Вставить("ЕдиницаИзмерения"	, СтрокаТЧ.ЕдиницаИзмерения);
	//Отбор.Вставить("Поставщик"			, Контрагент);
	//
	//СтруктураЦены = РегистрыСведений.ЦеныПоставщиков.ПолучитьПоследнее(?(Дата = Дата(1, 1, 1), НачалоДня(ТекущаяДата()), Дата), Отбор);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"	, СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Поставщик"		, ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДатаСреза"		, ?(ЗначениеЗаполнено(ЭтотОбъект.Дата), ЭтотОбъект.Дата, НачалоДня(ТекущаяДата())));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПоставщиковСрезПоследних.Цена,
	|	0 КАК ЦенаБезНДС
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &Номенклатура
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныПоставщиковСрезПоследних.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	СтруктураЦены = РезультатЗапроса.Выбрать();
	СтруктураЦены.Следующий();
	
	//
	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		СтрокаТЧ.Цена = СтруктураЦены.Цена;
	Иначе		
		
		Если СтруктураЦены.ЦенаБезНДС = 0 Тогда
			
			ЦенаБезНДС = (СтруктураЦены.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС))) * 100;
			
			СтрокаТЧ.Цена = ЦенаБезНДС;
			
		Иначе
			СтрокаТЧ.Цена = СтруктураЦены.ЦенаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
	
КонецПроцедуры

Функция ПолучитьБазовуюЕдиницуИзмерения(мНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, мНоменклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, мНоменклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьКоличествоВОрдерах(мНоменклатура) Экспорт
	
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	
	Запрос = Новый Запрос;
	ДатаСоставляющих = '00010101';
	Для Каждого ЭлементОрдер Из МассивОрдеров Цикл
		ДатаСоставляющих = Макс(ДатаСоставляющих, ЭлементОрдер.Дата);
	КонецЦикла;	
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("МаксДата"		, ДатаСоставляющих);
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|				ТОГДА ПриходныйОрдерСкладТовары.Количество
	|			ИНАЧЕ ПриходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
	|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|			И (ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие = ЛОЖЬ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|	КОНЕЦ = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().Итог("Количество");
	
КонецФункции

Функция ОпределитьСчетУчетаПоДокументуРасходИзБанка(ЗаявкаНаРасходованиеСредств)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасходИзБанка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств");
	
	Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ЗаявкаНаРасходованиеСредств);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()Тогда
		Возврат Выборка.СчетУчета;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНастройкиОборудование_ВводВЭксплуатациюНаСтаройТТ()
	
	//+++АК Susk (Суслин К.В.) 2018.12.06 ИП-00020497	 
	Возврат ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Оборудование_ВводВЭксплуатациюНаСтаройТТ, Дата, Организация);
	
КонецФункции

Функция ПолучитьПараметрыСписанияСоСчета01()
	
	//+++АК Susk (Суслин К.В.) 2018.12.06 ИП-00020497	 
	Возврат ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.СписаниеОССоСчета01ПриВводеВЭксплуатацию, Дата, Организация);
		
КонецФункции

Функция ПолучитьСтатьюДДСОсновногоСредства(мОсновноеСредство)
	
	// остатки по счету 08
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ОсновноеСредство", мОсновноеСредство);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФинансовыйОстатки.Субконто1 КАК СтатьяДДС,
	|	ФинансовыйОстатки.Субконто2 КАК ОсновноеСредство
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КапитальныеВложения), , Субконто2 = &ОсновноеСредство) КАК ФинансовыйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьяДДС УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.СтатьяДДС, Неопределено);

КонецФункции

Функция Оборудование_РеквизитыЗаполнены(НеПроверятьСклад)
	
	Результат = Истина;
	
	мЦФО = Константы.ЦФОДляУчетаОсновныхСредств.Получить();
	Если НЕ ЗначениеЗаполнено(мЦФО) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Константа ""ЦФО для учета основных средств"" не заполнена");	
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Счет учета расчетов с контрагентом"" не заполнено");
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяДДС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Статья ДДС"" не заполнено");
		Результат = Ложь;
	КонецЕсли;
	
	Если ЭтотОбъект.Склад.Пустая()
			И НЕ НеПроверятьСклад Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Склад"" не заполнено");	
		Результат = Ложь;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция Оборудование_ДублиНоменклатурыОтсутствуют()
	
	Таблица = Оборудование.Выгрузить(, "Номенклатура, ЗаводскойНомер, ИнвентарныйНомер");
	Таблица.Свернуть("Номенклатура, ЗаводскойНомер, ИнвентарныйНомер");
	
	Если Таблица.Количество() = Оборудование.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Обычно ОС в табличной части не много, но вдруг? Как пользователь будет искать?
	Для Каждого Строка Из Таблица Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура"		, Строка.Номенклатура);
		Отбор.Вставить("ЗаводскойНомер"		, Строка.ЗаводскойНомер);
		Отбор.Вставить("ИнвентарныйНомер"	, Строка.ИнвентарныйНомер);
		
		мНайдено = Оборудование.НайтиСтроки(Отбор);
		Если мНайдено.Количество() > 1 Тогда
			Сообщение = "Обнаружены дубли в строках ";
			Для Каждого СтрокаНайдено Из мНайдено Цикл
				Сообщение = Сообщение + Строка(СтрокаНайдено.НомерСтроки) + ", ";
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Лев(Сообщение, СтрДлина(Сообщение) - 2));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция Оборудование_СоздатьИсправитьОсновныеСредства()
	
	БылиСозданыОС 		= Ложь;
	Результат			= Истина;
	ТаблицаОборудования	= ЭтотОбъект.Оборудование.Выгрузить();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство) Тогда
			
			//сверяем реквизиты
			ОС = СтрокаТЧ.ОсновноеСредство.ПолучитьОбъект();
			Если НЕ ОС = Неопределено Тогда
				//Если ОС.Наименование = Строка(СтрокаТЧ.Номенклатура)
				//		И ОС.Номенклатура = СтрокаТЧ.Номенклатура
				Если ОС.Номенклатура = СтрокаТЧ.Номенклатура
						И ОС.ИнвентарныйНомер = СтрокаТЧ.ИнвентарныйНомер
						И ОС.ЗаводскойНомер = СтрокаТЧ.ЗаводскойНомер Тогда
					Продолжить;
				Иначе
					ОС.Наименование		= Строка(СтрокаТЧ.Номенклатура);
					ОС.Номенклатура		= СтрокаТЧ.Номенклатура;
					ОС.ИнвентарныйНомер	= СтрокаТЧ.ИнвентарныйНомер;
					ОС.ЗаводскойНомер	= СтрокаТЧ.ЗаводскойНомер;
					ОС.Записать();
				КонецЕсли;
			КонецЕсли;
					
		Иначе
			Если Оборудование_ОССуществует(СтрокаТЧ.Номенклатура, СтрокаТЧ.ЗаводскойНомер) Тогда
				Результат = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка " + Строка(СтрокаТЧ.НомерСтроки) + ". " + Строка(СтрокаТЧ.Номенклатура) + " с зав.номером " + Строка(СтрокаТЧ.ЗаводскойНомер) + " уже существует. Не создано!");
			Иначе
				//создаем ОС
				ОС = Справочники.ОсновныеСредства.СоздатьЭлемент();
				ОС.Наименование				= Строка(СтрокаТЧ.Номенклатура);
				ОС.Номенклатура				= СтрокаТЧ.Номенклатура;
				ОС.ИнвентарныйНомер			= СтрокаТЧ.ИнвентарныйНомер;
				ОС.ЗаводскойНомер			= СтрокаТЧ.ЗаводскойНомер;
				ОС.Записать();
				
				СтрокаТЧ.ОсновноеСредство	= ОС.Ссылка;
				БылиСозданыОС				= Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//В одних строках могли быть созданы, в других - нет
	//Избегаем "объект не найден"
	Если НЕ Результат Тогда
		ЭтотОбъект.Оборудование.Загрузить(ТаблицаОборудования);
	КонецЕсли;
	
	//К этому моменту документ уже записан
	//Если ОС создаются, то информация о них в ТЧ теряется
	Если Результат
			И БылиСозданыОС Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Оборудование_ОССуществует(мНоменклатура, мЗаводскойНомер)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Номенклатура"	, мНоменклатура);
	Запрос.Параметры.Вставить("ЗаводскойНомер"	, мЗаводскойНомер);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Номенклатура = &Номенклатура
	|	И ОсновныеСредства.ЗаводскойНомер = &ЗаводскойНомер";
							
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция Оборудование_УжеСписано(мОсновноеСредство)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков"	, ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", мОсновноеСредство);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыйОбороты.Субконто2
	|ПОМЕСТИТЬ ВТОбороты
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(, &ДатаОстатков, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КапитальныеВложения), , Субконто2 = &ОсновноеСредство, , ) КАК ФинансовыйОбороты
	|ГДЕ
	|	ФинансовыйОбороты.СуммаОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйОстатки.Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.КапитальныеВложения), , Субконто2 = &ОсновноеСредство) КАК ФинансовыйОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбороты КАК ВТОбороты
	|		ПО (ВТОбороты.Субконто2 = ФинансовыйОстатки.Субконто2)
	|ГДЕ
	|	ФинансовыйОстатки.СуммаОстаток = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьОстаткиНаСкладеПереработки(МоментВремени, Знач СкладСписания, МассивСпецификаций)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСпецификаций"	, МассивСпецификаций);
	Запрос.УстановитьПараметр("МоментВремени"		, МоментВремени);
	Запрос.УстановитьПараметр("Склад"				, СкладСписания);
	//АК БЕЛН 28.04.2016+
	МасНом = Новый Массив;
	Для каждого Эл Из МассивСпецификаций Цикл
		Для каждого стр Из Эл.Состав Цикл
			МасНом.Добавить(стр.Номенклатура);
			Попытка
				Если ЗначениеЗАполнено(стр.Пустографка)Тогда
					МасНом.Добавить(стр.Пустографка)
				КонецЕсли;
			Исключение
			КонецПопытки
		КонецЦикла; 
	КонецЦикла; 
	Запрос.УстановитьПараметр("МасНом"				, МасНом);
	//АК БЕЛН 28.04.2016-
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&МоментВремени,
	|			Номенклатура В
	|					(&МасНом)
	|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат
	
КонецФункции

Процедура ВыполнитьКонтрольОрдеров(Отказ)

	Если НеПроверятьПриходныеОрдера Тогда
		Возврат;
	КонецЕсли;
	
	//
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладОборудование.ОсновноеСредство,
	|	1 КАК Количество
	|ПОМЕСТИТЬ втОСВОрдераах
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Оборудование КАК ПриходныйОрдерСкладОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
	|		ПО ПриходныйОрдерСкладОборудование.Ссылка = ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер
	|ГДЕ
	|	ПоступлениеТоваровУслугПриходныеОрдера.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.ОсновноеСредство,
	|	1 КАК Количество
	|ПОМЕСТИТЬ втОСВПоступлении
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(втОСВОрдераах.ОсновноеСредство) КАК ОсновноеСредствоПр,
	|	ЕСТЬNULL(втОСВОрдераах.Количество, 0) - ЕСТЬNULL(втОСВПоступлении.Количество, 0) КАК Разность,
	|	ПРЕДСТАВЛЕНИЕ(втОСВПоступлении.ОсновноеСредство) КАК ОсновноеСредство1Пр
	|ИЗ
	|	втОСВОрдераах КАК втОСВОрдераах
	|		ПОЛНОЕ СОЕДИНЕНИЕ втОСВПоступлении КАК втОСВПоступлении
	|		ПО втОСВОрдераах.ОсновноеСредство = втОСВПоступлении.ОсновноеСредство
	|ГДЕ
	|	ЕСТЬNULL(втОСВОрдераах.Количество, 0) - ЕСТЬNULL(втОСВПоступлении.Количество, 0) <> 0";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не совпадают основные средства в документе и в ордерах: " + Выборка.ОсновноеСредствоПр + " " + Выборка.ОсновноеСредство1Пр, Отказ);	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура КонтрольПоступлений(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.Ссылка,
		|	ПоступлениеТоваровУслугОборудование.ОсновноеСредство
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка.Проведен = ИСТИНА
		|	И ПоступлениеТоваровУслугОборудование.ОсновноеСредство В(&ОсновныеСредства)
		|	И ПоступлениеТоваровУслугОборудование.Ссылка <> &ЭтотДокумент";

	Запрос.УстановитьПараметр("ОсновныеСредства", ЭтотОбъект.Оборудование.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ЭтотДокумент", ЭтотОбъект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщить("Для основного средства " + ВыборкаДетальныеЗаписи.ОсновноеСредство + " уже введен документ поступления: " + ВыборкаДетальныеЗаписи.Ссылка); 	
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры	

Процедура Оборудование_ВыполнитьДвижения(Отказ)
	
	УчетОС_МСФО = АК_УчетМСФОПривилегированный.ПолучитьПараметрыУчетаОС();
	
	Если ЭтотОбъект.Дата > УчетОС_МСФО.НачалоВеденияУчета Тогда
				
		АК_УчетМСФО.ОтразитьДвиженияФинансовыйОС(ЭтотОбъект);		
		
		//+++AK susk		
		Движения.СостояниеОС.Очистить();
		
		Если ПриходныеОрдера.Количество() = 0 Тогда
			АК_УчетМСФО.ОтразитьСостояниеОС(ЭтотОбъект,Отказ);
		КонецЕсли;		
		
		Движения.СостояниеОС.Записывать = Истина;
		//---AK susk
		
	    АК_ОсновныеСредства.ВыполнитьКонтрольДублейНомеров(ЭтотОбъект, Отказ);
		АК_ОсновныеСредства.ПроисвоитьИнвентарныеНомераВДокументе(ЭтотОбъект);
		КонтрольПоступлений(Отказ);
		АК_ОсновныеСредства.ПроверитьСчетаУчетаВДокументе(ЭтотОбъект);
		
	Иначе
				
		//Получение и проверка ЦФО
		мЦФО 						= Константы.ЦФОДляУчетаОсновныхСредств.Получить();
		мДатаНовогоУчетаСчетовОС 	= Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
		мСчет02 = ПланыСчетов.Финансовый.ККМ;
		
		ДвиженияФинансовый = ЭтотОбъект.Движения.Финансовый;
		
		Если НЕ ЭтотОбъект.Дата < Дата(2014, 9, 1) Тогда
			ПараметрыСписания01 					= ПолучитьПараметрыСписанияСоСчета01();
			НастройкиВводВЭксплуатациюНаСтаройТТ 	= ПолучитьНастройкиОборудование_ВводВЭксплуатациюНаСтаройТТ();
		КонецЕсли;
		
		мЕстьПриходники = (ЭтотОбъект.ПриходныеОрдера.Количество() > 0);
		
		НастройкаОтраженияНДСПоОборудованию = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ОборудованиеПоступлениеТоваровИУслуг, Дата);
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			
			СуммаВсего = 0;
			СуммаНДСОтдельно = 0;
			Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоОборудованию.Счет) Тогда
				Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
					СуммаВсего = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
				Иначе
					СуммаВсего = СтрокаТЧ.Сумма;
				КонецЕсли;
				СуммаНДСОтдельно = СтрокаТЧ.СуммаНДС;
			Иначе	
				Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
					СуммаВсего = СтрокаТЧ.Сумма;
				Иначе
					СуммаВсего = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			//Дт08 - Кт60.х
			Проводка = ДвиженияФинансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.Дата;
			Проводка.Организация= ЭтотОбъект.Организация;
			Проводка.Сумма		= СуммаВсего;
			
			Проводка.СчетДт	= ПланыСчетов.Финансовый.КапитальныеВложения;
			Проводка.СубконтоДт.ОсновныеСредства				= СтрокаТЧ.ОсновноеСредство;
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДДС;
			Если НЕ Проводка.Период < мДатаНовогоУчетаСчетовОС Тогда
				Проводка.СубконтоДт.ЦФО 						= мЦФО;
			КонецЕсли;
			
			Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоКт.Организации	= ЭтотОбъект.Организация;
			Проводка.СубконтоКт.Контрагенты	= ЭтотОбъект.Контрагент;
			
			Если СуммаНДСОтдельно <> 0 Тогда
				Проводка = ДвиженияФинансовый.Добавить();
				Проводка.Период	= ЭтотОбъект.Дата;
				Проводка.Организация= ЭтотОбъект.Организация;
				Проводка.Сумма	= СуммаНДСОтдельно;
				
				Проводка.СчетДт	= НастройкаОтраженияНДСПоОборудованию.Счет;
				Проводка.СубконтоДт.Организации				= ЭтотОбъект.Организация;
				Проводка.СубконтоДт.ВидыНалогов 			= НастройкаОтраженияНДСПоОборудованию.ДопРеквизит;
				Проводка.СубконтоДт.СтавкиНДС 				= СтрокаТЧ.СтавкаНДС;
				
				Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
				Проводка.СубконтоКт.Организации	= ЭтотОбъект.Организация;
				Проводка.СубконтоКт.Контрагенты	= ЭтотОбъект.Контрагент;
			КонецЕсли;	
			
			
			// Дт02
			Проводка = ДвиженияФинансовый.Добавить();
			Проводка.Период		= ЭтотОбъект.Дата;
			Проводка.Организация= ЭтотОбъект.Организация;
			
			Проводка.СчетДт	= мСчет02;
			Если Проводка.Период < мДатаНовогоУчетаСчетовОС Тогда
				Проводка.СубконтоДт.ЦФО				= мЦФО;
			КонецЕсли;
			Проводка.СубконтоДт.МестаХраненияОС		= ЭтотОбъект.Склад;
			Проводка.СубконтоДт.ОсновныеСредства	= СтрокаТЧ.ОсновноеСредство;
			Если НЕ мЕстьПриходники Тогда
				Проводка.КоличествоДт 				= 1;
			КонецЕсли;
			//Проводка.Сумма 							= СтрокаТЧ.Сумма;
			Проводка.Сумма 							= СуммаВсего;
			
			// списание на торговую точку аналогично расходному ордеру складскому
			Если (НЕ СтрокаТЧ.ТорговаяТочка.Пустая())
					И НЕ ЭтотОбъект.Дата < Дата(2014, 9, 1) Тогда
				
				ЭтоНеНоваяТТ = (СтрокаТЧ.ТорговаяТочка.ДатаОткрытия < ДобавитьМесяц(НачалоДня(ЭтотОбъект.Дата), -1));
				//Списание суммы со счета 02 склад, приход на 02 ТТ
				Проводка = ДвиженияФинансовый.Добавить();
				Проводка.Период							= ЭтотОбъект.Дата;
				Проводка.Организация					= ЭтотОбъект.Организация;
				Проводка.СчетДт							= мСчет02;
				Проводка.СубконтоДт.МестаХраненияОС		= СтрокаТЧ.ТорговаяТочка;
				Проводка.СубконтоДт.ОсновныеСредства	= СтрокаТЧ.ОсновноеСредство;
				Проводка.КоличествоДт 					= 1;
				Проводка.СчетКт							= мСчет02;
				Проводка.СубконтоКт.МестаХраненияОС		= ЭтотОбъект.Склад;
				Проводка.СубконтоКт.ОсновныеСредства	= СтрокаТЧ.ОсновноеСредство;
				Проводка.КоличествоКт 					= 1;
				//Проводка.Сумма       					= СтрокаТЧ.Сумма;
				Проводка.Сумма       					= СуммаВсего;
				
				Если ЭтоНеНоваяТТ
						И НЕ СтрокаТЧ.Инвестиция Тогда
					//Дт44-Кт08
					Проводка = ДвиженияФинансовый.ДобавитьДебет();
					Проводка.Период							= ЭтотОбъект.Дата;
					Проводка.Организация					= ЭтотОбъект.Организация;
					Проводка.Сумма							= СуммаВсего;
					
					Проводка.СчетДт							= НастройкиВводВЭксплуатациюНаСтаройТТ.Счет;
					Проводка.СубконтоДт.ТорговыеТочки		= СтрокаТЧ.ТорговаяТочка;
					
					Если ЗначениеЗаполнено(СтрокаТЧ.ТорговаяТочка)
						И СтрокаТЧ.ТорговаяТочка.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
						Проводка.СубконтоДт.ТорговыеТочки			= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
					Иначе
						Проводка.СубконтоДт.ТорговыеТочки			= СтрокаТЧ.ТорговаяТочка;
					КонецЕсли;
					Проводка.СубконтоДт.СтатьиДоходовРасходов = НастройкиВводВЭксплуатациюНаСтаройТТ.СтатьяДоходовРасходов;
					Проводка.СубконтоДт.ЦФО					= мЦФО;
					
					Проводка.СчетКт							= ПланыСчетов.Финансовый.КапитальныеВложения;
					Проводка.СубконтоКт.ОсновныеСредства	= СтрокаТЧ.ОсновноеСредство;
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств	= ЭтотОбъект.СтатьяДДС;//ПолучитьСтатьюДДСОсновногоСредства(СтрокаТЧ.ОсновноеСредство);
					Проводка.СубконтоКт.ЦФО					= МЦФО;
				Иначе
					//Дт01-Кт08
					Проводка = ДвиженияФинансовый.ДобавитьДебет();
					Проводка.Период							= ЭтотОбъект.Дата;
					Проводка.Организация					= ЭтотОбъект.Организация;
					Проводка.Сумма							= СуммаВсего;
					
					Проводка.СчетДт							= ПланыСчетов.Финансовый.Инвестиции;
					Проводка.СубконтоДт.ТорговыеТочки		= СтрокаТЧ.ТорговаяТочка;
					
					Проводка.СчетКт							= ПланыСчетов.Финансовый.КапитальныеВложения;
					Проводка.СубконтоКт.ОсновныеСредства	= СтрокаТЧ.ОсновноеСредство;
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств	= ЭтотОбъект.СтатьяДДС;//ПолучитьСтатьюДДСОсновногоСредства(СтрокаТЧ.ОсновноеСредство);
					Проводка.СубконтоКт.ЦФО					= МЦФО;
					
					//Дт44-Кт01
					Проводка = ДвиженияФинансовый.ДобавитьДебет();
					Проводка.Период							= ЭтотОбъект.Дата;
					Проводка.Организация					= ЭтотОбъект.Организация;
					Проводка.Сумма							= СуммаВсего;
					
					Проводка.СчетДт							= ПараметрыСписания01.Счет;
					//mind 2015-01-27
					Если ЗначениеЗаполнено(СтрокаТЧ.ТорговаяТочка)
						И СтрокаТЧ.ТорговаяТочка.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
						Проводка.СубконтоДт.ТорговыеТочки			= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
					Иначе
						Проводка.СубконтоДт.ТорговыеТочки			= СтрокаТЧ.ТорговаяТочка;
					КонецЕсли;
					Проводка.СубконтоДт.СтатьиДоходовРасходов = ПараметрыСписания01.СтатьяДоходовРасходов;
					Проводка.СубконтоДт.ЦФО					= мЦФО;
					
					Проводка.СчетКт							= ПланыСчетов.Финансовый.Инвестиции;
					Проводка.СубконтоКт.ТорговыеТочки		= СтрокаТЧ.ТорговаяТочка;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
		
		АК_УчетМСФО.ЗаполнитьОрганизацию(ДвиженияФинансовый, ЭтотОбъект.Организация);
		ДвиженияФинансовый.Записать();
		
		// перепроведение расходных складских ордеров (если есть такие, проведенные после тек. документа)
		ДопМодульСервер.Оборудование_ПерепроведениеРасходников(ЭтотОбъект.Дата, ЭтотОбъект.Склад, ЭтотОбъект.Оборудование.ВыгрузитьКолонку("ОсновноеСредство"));
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ДвиженияТоварыНаСкладах(Отказ, РежимПроведения, ТаблицаСпецификаций)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтотОбъект.Дата >= '20131201'
			И ТаблицаСпецификаций.Количество() > 0 Тогда
		
		//+++АК SHEP 2018.05.03 ИП-00018453
		//СкладСписания = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(ЭтотОбъект.Контрагент);
		СкладСписания = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(ЭтотОбъект.Контрагент, ЭтотОбъект.Организация);
		//---АК SHEP 2018.05.03
		
		ТаблицаОстатков = ПолучитьОстаткиНаСкладеПереработки(ЭтотОбъект.МоментВремени(), СкладСписания, ТаблицаСпецификаций.ВыгрузитьКолонку("Спецификация"));
		
		Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
			
			НайденнаяСтрока = ТаблицаСпецификаций.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Спецификация = НайденнаяСтрока.Спецификация;
			
			СоставСпецификации = Спецификация.Состав;
			
			Для Каждого СоставляющаяПродукции Из СоставСпецификации Цикл
				
				КоэффициентПересчета 	= СоставляющаяПродукции.ЕдиницаИзмерения.Коэффициент;
				Если Дата >= '20180601' Тогда 
					КоличествоПретензияКПоставщику = 
						ТекСтрокаТовары.Количество - ТекСтрокаТовары.ПоПриходнымОрдерам - ТекСтрокаТовары.КоличествоПретензияКСкладу - ТекСтрокаТовары.КоличествоПретензияКПеревозчику;
				Иначе
					КоличествоПретензияКПоставщику = 0;
				КонецЕсли;
				КоличествоКСписаниюИсх 	= (ТекСтрокаТовары.Количество - КоличествоПретензияКПоставщику) * СоставляющаяПродукции.Количество * КоэффициентПересчета;
				КоличествоКСписанию =0;
				
				Если СоставляющаяПродукции.КоличествоПустографок>0 Тогда
					Если НайденнаяСтрока.Весовой Тогда
						Если НайденнаяСтрока.РасчетныйВесУпаковки = 0 Тогда
							КоличествоКСписанию = ТекСтрокаТовары.Количество/НайденнаяСтрока.Номенклатура.ОднаУпаковкаСодержит;
						Иначе
							КоличествоКСписанию = ТекСтрокаТовары.Количество/НайденнаяСтрока.РасчетныйВесУпаковки;
						КонецЕсли;
						КоличествоКСписанию=Окр(КоличествоКСписанию+0.5,0,РежимОкругления.Окр15как10)*СоставляющаяПродукции.Количество*КоэффициентПересчета;
						Если НайденнаяСтрока.Квант>0 Тогда
							КоличествоКСписанию = КоличествоКСписанию+Окр(ТекСтрокаТовары.Количество/НайденнаяСтрока.Квант+0.5,0,РежимОкругления.Окр15как10);
						КонецЕсли;
					Иначе
						КоличествоКСписанию = КоличествоКСписаниюИсх;
					КонецЕсли;
					//+++AK GREK 24.10.2017 ИП-00016703.01
					//Проверим остатки, нельзя списывать пустографки в минус  
					ТаблицаОстатков.Свернуть("Номенклатура", "Количество");
					НайденнаяСтрокаПустографок =  ТаблицаОстатков.Найти(СоставляющаяПродукции.Пустографка,"Номенклатура");
					Если НайденнаяСтрокаПустографок <> Неопределено Тогда
						Если НайденнаяСтрокаПустографок.Количество = 0 Тогда
							КоличествоКСписанию = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если КоличествоКСписанию <> 0 Тогда
						Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
						Движение.Период 			= ЭтотОбъект.Дата;
						Движение.Склад	 			= СкладСписания;
						Движение.Номенклатура 		= СоставляющаяПродукции.Пустографка;
						Движение.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
						//+++АК bara ИП-00016021.000.00000001
						//Движение.ЕдиницаИзмерения	= ПолучитьБазовуюЕдиницуИзмерения(СоставляющаяПродукции.Номенклатура);
						Движение.ЕдиницаИзмерения	= ПолучитьБазовуюЕдиницуИзмерения(СоставляющаяПродукции.Пустографка);					
						//---АК bara ИП-00016021.000.00000001
						//+++АК sils 28.11.2018 ИП-00020124
						//Движение.Количество 		= Мин(СоставляющаяПродукции.КоличествоПустографок,КоличествоКСписанию);
						Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоставляющаяПродукции.Пустографка, "ТипТовара") = Перечисления.ТипыТоваров.Упаковка и
							ЭтотОбъект.Дата >= '20181101' Тогда
							Движение.Количество 		= Окр(Мин(СоставляющаяПродукции.КоличествоПустографок,КоличествоКСписанию), 3, 1);
						Иначе
							Движение.Количество 		= Мин(СоставляющаяПродукции.КоличествоПустографок,КоличествоКСписанию);
						КонецЕсли;												
						//---АК
						Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
					
						СтрОстатков = ТаблицаОстатков.Добавить();
						СтрОстатков.Номенклатура = СоставляющаяПродукции.Пустографка;
						СтрОстатков.Количество   = - Мин(СоставляющаяПродукции.КоличествоПустографок,КоличествоКСписанию);
					КонецЕсли;
					//---AK
				КонецЕсли;
				
				
				Если КоличествоКСписанию>0 и КоличествоКСписанию<=СоставляющаяПродукции.КоличествоПустографок Тогда
					Продолжить
				КонецЕсли;
				
				Если КоличествоКСписанию=0 Тогда
					КоличествоКСписанию = КоличествоКСписаниюИсх
				КонецЕсли;
				
				Если КоличествоКСписанию=0 Тогда
					Продолжить
				КонецЕсли;
				
				Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
				Движение.Период 			= ЭтотОбъект.Дата;
				Движение.Склад	 			= СкладСписания;
				Движение.Номенклатура 		= СоставляющаяПродукции.Номенклатура;
				Движение.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Движение.ЕдиницаИзмерения	= ПолучитьБазовуюЕдиницуИзмерения(СоставляющаяПродукции.Номенклатура);
				//+++АК sils 28.11.2018 ИП-00020124
				//Если КоличествоКСписанию = 0 Тогда
				//	Движение.Количество 		= КоличествоКСписаниюИсх;
				//Иначе					
				//	Движение.Количество 		= Окр(КоличествоКСписаниюИсх*(КоличествоКСписанию-СоставляющаяПродукции.КоличествоПустографок)/КоличествоКСписанию);
				//КонецЕсли;	
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоставляющаяПродукции.Номенклатура, "ТипТовара") = Перечисления.ТипыТоваров.Упаковка и
					ЭтотОбъект.Дата >= '20181101' Тогда
					Если КоличествоКСписанию = 0 Тогда
						Движение.Количество 		= Окр(КоличествоКСписаниюИсх, 3, 1);
					Иначе					
						Движение.Количество 		= Окр(КоличествоКСписаниюИсх*(КоличествоКСписанию-СоставляющаяПродукции.КоличествоПустографок)/КоличествоКСписанию, 3, 1);
					КонецЕсли;	
				Иначе
					Если КоличествоКСписанию = 0 Тогда
						Движение.Количество 		= КоличествоКСписаниюИсх;
					Иначе					
						Движение.Количество 		= Окр(КоличествоКСписаниюИсх*(КоличествоКСписанию-СоставляющаяПродукции.КоличествоПустографок)/КоличествоКСписанию);
					КонецЕсли;	
				КонецЕсли;												
				//---АК
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
				
				// Добавим строки с минусом
				СтрОстатков = ТаблицаОстатков.Добавить();
				СтрОстатков.Номенклатура = СоставляющаяПродукции.Номенклатура;
				СтрОстатков.Количество   = - Движение.Количество;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Свернем и про минусы сообщим 
		ТаблицаОстатков.Свернуть("Номенклатура", "Количество");
		Для Каждого Стр Из ТаблицаОстатков Цикл
			Если Стр.Количество < 0 Тогда
				Сообщить("На складе << " + Строка(СкладСписания) + " >> не хватает для списания " + (-Стр.Количество) +
							" единиц номенклатуры: " + Строка(Стр.Номенклатура), СтатусСообщения.Информация);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоТоварамНеОблагающимсяНДС(СуммаПроводки, СтрокаТЧ, СтруктураНастроек, СтавкаНДСПриОтгрузкеБезНДС)
	
	//СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтражениеНДСПоТоварамБезНДС, Дата); //shae 2018.08.30 ИП-00019212 закомментировано	 
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		//ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, ЭтотОбъект.Дата);
		
		//пСумма = (СуммаПроводки * ОбщегоНазначенияСервер.ПолучитьСтавкуНДСПриОтгрузкеБезНДС(ЭтотОбъект.Дата))/100;   //shae 2018.08.30 ИП-00019212 закомментировано	 
		пСумма = (СуммаПроводки * СтавкаНДСПриОтгрузкеБезНДС)/100; //shae 2018.08.30 ИП-00019212 
		

		Если пСумма = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПроводкаНДС = Движения.Финансовый.Добавить();
		
		ПроводкаНДС.Период 			= ЭтотОбъект.Дата;
		//ПроводкаНДС.Организация 	= ЭтотОбъект.Организация;
		ПроводкаНДС.Сумма 			= пСумма;
		ПроводкаНДС.Содержание		= "НДС";
		
		// Дт 41.1 или 41.2
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			ПроводкаНДС.СчетДт 							= ПланыСчетов.Финансовый.Товары;
			ПроводкаНДС.СубконтоДт.МестаХранения  		= ЭтотОбъект.СтруктурнаяЕдиница;
			ПроводкаНДС.СубконтоДт.Товары				= СтрокаТЧ.Номенклатура;
			ПроводкаНДС.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров41;
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			ПроводкаНДС.СчетДт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
			ПроводкаНДС.СубконтоДт.Склады		 		= ЭтотОбъект.Склад;
			ПроводкаНДС.СубконтоДт.Материалы			= СтрокаТЧ.Номенклатура;
			ПроводкаНДС.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров41;
		КонецЕсли;
		
		// Кт 44.3
		Если СтруктураНастроек.Счет = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения Тогда 
			ПроводкаНДС.СчетКт 							 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
			ПроводкаНДС.СубконтоКт.ТорговыеТочки 		 = СтруктураНастроек.СтруктурнаяЕдиница;
			ПроводкаНДС.СубконтоКт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
			ПроводкаНДС.СубконтоКт.ЦФО 					 = СтруктураНастроек.ЦФО;
		КонецЕсли;
		
		//// Дт
		//ПроводкаНДС.СчетДт 					= ПланыСчетов.Финансовый.НалогиУН;
		//ПроводкаНДС.СубконтоДт.Организации 	= Организация;
		//ПроводкаНДС.СубконтоДт.ВидыНалогов 	= Справочники.ВидыНалогов.НайтиПоКоду("000000001");
		//
		//// Кт
		//ПроводкаНДС.СчетКт 							= СтруктураНастроек.Счет;
		//ПроводкаНДС.СубконтоКт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
		//ПроводкаНДС.СубконтоКт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
		//ПроводкаНДС.СубконтоКт.ЦФО 					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоНедостачамТоваров(СтрокаТЧ, СуммаВсего, КоличествоКт, СтруктураНастроек, ЦФО)
	
	//СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Поступление_Излишки, ЭтотОбъект.Дата); //shae 2018.08.30 ИП-00019212 закомментировано
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		//ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ЭтотОбъект.СтруктурнаяЕдиница, ЭтотОбъект.Дата);  //shae 2018.08.30 ИП-00019212 закомментировано
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = ЭтотОбъект.Дата;
		
		// Дт
		Проводка.СчетДт = СтруктураНастроек.Счет;
		Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
		Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
		// Кт
		Проводка.СчетКт 		= СтрокаТЧ.СчетУчета;
		Проводка.КоличествоКт 	= КоличествоКт;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			
			Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
			Проводка.СубконтоКт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Недостача товара";//"Излишки товара";
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			
			Проводка.СубконтоКт.Склады		 			= ЭтотОбъект.Склад;
			Проводка.СубконтоКт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.КоличествоКт						= КоличествоКт * СтрокаТЧ.Коэффициент;
			Проводка.НомерЖурнала						= "МВ";
			Проводка.Содержание							= "Недостача материалов";//"Излишки материалов";
			
		КонецЕсли;
		
		Проводка.Сумма = Проводка.КоличествоКт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаТЧ.Номенклатура,, ЭтотОбъект.Дата);
		Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоИзлишкамТоваров(СтрокаТЧ, СуммаВсего, КоличествоДт, СтруктураНастроек, ЦФО)
	
	//СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Поступление_Недостачи, ЭтотОбъект.Дата);   //shae 2018.08.30 ИП-00019212 закомментировано
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		//ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ЭтотОбъект.СтруктурнаяЕдиница, ЭтотОбъект.Дата);   //shae 2018.08.30 ИП-00019212 закомментировано
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период	= ЭтотОбъект.Дата;
		
		// Дт
		Проводка.СчетДт 		= СтрокаТЧ.СчетУчета;
		Проводка.КоличествоДт 	= КоличествоДт;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
			
			Проводка.СубконтоДт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.Товары					= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Излишки товаров";//"Недостача товара";
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
			
			Проводка.СубконтоДт.Склады		 			= ЭтотОбъект.Склад;
			Проводка.СубконтоДт.Материалы				= СтрокаТЧ.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.КоличествоДт						= КоличествоДт * СтрокаТЧ.Коэффициент;
			Проводка.НомерЖурнала						= "МВ";
			Проводка.Содержание							= "Излишки материалов";//"Недостача материалов";
			
		КонецЕсли;
		
		// Кт
		Проводка.СчетКт = СтруктураНастроек.Счет;
		Проводка.СубконтоКт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		Проводка.СубконтоКт.ЦФО 					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
		
		Проводка.Сумма = Проводка.КоличествоДт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаТЧ.Номенклатура,, ЭтотОбъект.Дата); 
		Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоПретензиямПоставщикам()
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ПретензияПоставщику, ЭтотОбъект.Дата);
	СуммаВключаетНДС = (ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	//+++АК sole 2018.07.05 ИП-00018320
	//|	ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу КАК КоличествоПретензияПоставщику,
	|	ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу - ПоступлениеТоваровУслугТовары.КоличествоПретензияКПеревозчику КАК КоличествоПретензияПоставщику,
	//---АК sole 2018.07.05 ИП-00018320
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	//|	И ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу > 0";
	//+++АК sole 2018.07.05 ИП-00018320
	//|	И ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам - ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу <> 0
	|	И (
	|			  ПоступлениеТоваровУслугТовары.Количество 
	|			- ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам 
	|			- ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу 
	|			- ПоступлениеТоваровУслугТовары.КоличествоПретензияКПеревозчику
	|		) <> 0
	//---АК sole 2018.07.05 ИП-00018320
	//+++АК Susk (Суслин К.В.) 2018.02.05 ИП-00016528 
	|И НЕ ПоступлениеТоваровУслугТовары.КорректировкаПТУ";
	//---АК Susk (Суслин К.В.) 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Дт 76-Кт 41 (Недостача)
		Если Выборка.КоличествоПретензияПоставщику > 0 Тогда
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период	= ЭтотОбъект.Дата;
			
			// ДТ
			Проводка.СчетДт = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками;
			Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
			
			// КТ
			Проводка.СчетКт = Выборка.СчетУчета;
			Проводка.КоличествоКт = Выборка.КоличествоПретензияПоставщику;
			Проводка.Содержание	  = "Недостача за счет поставщика (претензия)";
			
			Если Проводка.СчетКт = ПланыСчетов.Финансовый.Товары Тогда
				
				Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.Товары					= Выборка.Номенклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "ТД";
				
			ИначеЕсли Проводка.СчетКт = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
				
				Проводка.СубконтоКт.Склады		 			= ЭтотОбъект.Склад;
				Проводка.СубконтоКт.Материалы				= Выборка.Номенклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "МВ";
				
			КонецЕсли;
			
			// Сумма проводки всегда без НДС
			СуммаПроводки 	= Окр(Выборка.Сумма*Выборка.КоличествоПретензияПоставщику/?(Выборка.Количество = 0, 1, Выборка.Количество), 2);
			СуммаНДС 		= Окр(УчетНДС.РассчитатьСуммуНДС(СуммаПроводки,
													Истина, СуммаВключаетНДС,
													УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС)), 2);
			
			Если СуммаВключаетНДС Тогда
				СуммаПроводки = СуммаПроводки - СуммаНДС;
			КонецЕсли;											   
			
			Проводка.Сумма = СуммаПроводки;  
			Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
			
		// Дт 41-Кт 76 (Излишки)	
		ИначеЕсли Выборка.КоличествоПретензияПоставщику < 0 Тогда
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период	= Дата;
			
			// ДТ
			Проводка.СчетДт = Выборка.СчетУчета;
			Проводка.КоличествоДт = -Выборка.КоличествоПретензияПоставщику;
			Проводка.Содержание	  = "Излишки в счет поставщика (претензия)";
			
			Если Проводка.СчетДт = ПланыСчетов.Финансовый.Товары Тогда
				
				Проводка.СубконтоДт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.Товары					= Выборка.Номенклатура;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "ТД";
				
			ИначеЕсли Проводка.СчетДт = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
				
				Проводка.СубконтоДт.Склады		 			= ЭтотОбъект.Склад;
				Проводка.СубконтоДт.Материалы				= Выборка.Номенклатура;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "МВ";
				
			КонецЕсли;
			
			// КТ
			Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками;
			Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
			
			// Сумма проводки всегда без НДС
			СуммаПроводки 	= Окр(Выборка.Сумма * (- Выборка.КоличествоПретензияПоставщику) / ?(Выборка.Количество = 0, 1, Выборка.Количество), 2);
			СуммаНДС 		= Окр(УчетНДС.РассчитатьСуммуНДС(СуммаПроводки,
													Истина, СуммаВключаетНДС,
													УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС)), 2);
			
			Если СуммаВключаетНДС Тогда
				СуммаПроводки = СуммаПроводки - СуммаНДС;
			КонецЕсли;											   
			
			Проводка.Сумма = СуммаПроводки;  
			Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.07.05 ИП-00018320
Процедура ОтразитьДвиженияПоПретензииПеревозчикам(СуммаПретензияКПеревозчику)
	
	Перем Перевозчик;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ПретензияПеревозчику, ЭтотОбъект.Дата);				
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		Возврат;	
	КонецЕсли;
	
	Перевозчик = ПолучитьПеревозчикаПоПСО();
	
	Проводка = Движения.Финансовый.Добавить();
	Проводка.Период	= ЭтотОбъект.Дата;
			
	// ДТ
	Проводка.СчетДт = СтруктураНастроек.Счет; 
	Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
	Проводка.СубконтоДт.Контрагенты = Перевозчик;
			
	// КТ
	Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыСПоставщиками; //60.3
	Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
	Проводка.СубконтоКт.Контрагенты  = ЭтотОбъект.Контрагент;
	
	Проводка.Сумма = СуммаПретензияКПеревозчику;
	Проводка.Содержание	  = "Недостача за счет перевозчика (претензия)";
	
КонецПроцедуры

//+++АК sole 2018.07.05 ИП-00018320
Функция ПолучитьПеревозчикаПоПСО()
	
	//+++АК sole 2018.07.05 ИП-00018320	
	// Уточнял у аналитика, возможна ли ситуация, когда в ПТУ содержатся приходные ордеры, 
	// содержащиеся в разных маршрутных листах с разными перевозчиками?
	// Мне был дал ответ, что такая ситуация невозможна.
	// Проверил по базе, за пол года таких ситуаций действительно не было.
	
	Перем Запрос;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ ПЕРВЫЕ 1
|	МаршрутныйЛистПриходныеОрдера.Ссылка.Перевозчик КАК Перевозчик
|
|ИЗ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
|ГДЕ
|		НЕ МаршрутныйЛистПриходныеОрдера.Ссылка.ПометкаУдаления
|   И	МаршрутныйЛистПриходныеОрдера.Ссылка.Проведен
|	И	МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер В (&СписокПриходныхОрдеров)
|
|СГРУППИРОВАТЬ ПО МаршрутныйЛистПриходныеОрдера.Ссылка.Перевозчик
|";	
	Запрос.УстановитьПараметр("СписокПриходныхОрдеров", ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	
	Возврат АК_Инструменты.ПолучитьРезультатСкалярногоЗароса(Запрос, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции

Процедура ВыполнитьДвиженияПоРаскладываемымКомплектам_()
	
	Запрос = Новый Запрос;
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	ДатаСоставляющих = '00010101';
	Для Каждого ЭлементОрдер Из МассивОрдеров Цикл
		ДатаСоставляющих = Макс(ДатаСоставляющих, ЭлементОрдер.Дата);
	КонецЦикла;	
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("МаксДата"		, ДатаСоставляющих);
	Запрос.УстановитьПараметр("Регистратор"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДвижений"	, Новый Граница(ЭтотОбъект.Дата, ВидГраницы.Включая));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК Номенклатура,
	|	ПриходныйОрдерСкладТовары.Номенклатура КАК Комплект
	|ПОМЕСТИТЬ ВТ_Составные
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
	|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|			И НЕ ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Количество
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И ПриходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
	|	И НЕ ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФинансовыйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|			ТОГДА ФинансовыйОбороты.Субконто2
	|		ИНАЧЕ ФинансовыйОбороты.Субконто1
	|	КОНЕЦ КАК Номенклатура,
	|	ФинансовыйОбороты.КоличествоОборот,
	|	ФинансовыйОбороты.Счет,
	|	ФинансовыйОбороты.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(&ДатаДвижений, &ДатаДвижений, Регистратор, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)), , , , ) КАК ФинансовыйОбороты
	|ГДЕ
	|	ФинансовыйОбороты.Регистратор = &Регистратор
	|	И ВЫБОР
	|			КОГДА ФинансовыйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	|				ТОГДА ФинансовыйОбороты.Субконто2
	|			ИНАЧЕ ФинансовыйОбороты.Субконто1
	|		КОНЕЦ В
	|			(ВЫБРАТЬ
	|				ВТ.Номенклатура
	|			ИЗ
	|				ВТ_Составные КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Составные.Номенклатура,
	|	ВТ_Составные.Комплект
	|ИЗ
	|	ВТ_Составные КАК ВТ_Составные";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабКомплекты 		= Результаты[1].Выгрузить();
	ТабСуммыПоСоставным = Результаты[2].Выгрузить();
	ТабСоставКомплектов = Результаты[3].Выгрузить();
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ЗакрытиеМесяца_ОперацииПоКомплектации, ЭтотОбъект.Дата);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ЭтотОбъект.СтруктурнаяЕдиница, ЭтотОбъект.Дата);
		
		Для Каждого ВыборкаСоставные Из ТабСуммыПоСоставным Цикл
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = ЭтотОбъект.Дата;
			
			// Дт
			Проводка.СчетДт = СтруктураНастроек.Счет;
			Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
			Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
			
			// Кт
			Проводка.СчетКт 		= ВыборкаСоставные.Счет;
			Проводка.КоличествоКт 	= ВыборкаСоставные.КоличествоОборот;
			
			Если ВыборкаСоставные.Счет = ПланыСчетов.Финансовый.Товары Тогда
				
				Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.Товары					= ВыборкаСоставные.Номенклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "ТД";
				Проводка.Содержание							= "Списание составляющих по комплектам";
				
			ИначеЕсли ВыборкаСоставные.Счет = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
				
				Проводка.СубконтоКт.Склады		 			= ЭтотОбъект.Склад;
				Проводка.СубконтоКт.Материалы				= ВыборкаСоставные.Номенклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "МВ";
				Проводка.Содержание							= "Списание составляющих по комплектам";
				
			КонецЕсли;
			
			Проводка.Сумма = Проводка.КоличествоКт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(ВыборкаСоставные.Номенклатура,, ЭтотОбъект.Дата);
			Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
			
		КонецЦикла;
		
		Для Каждого СтрокаКомплект Из ТабКомплекты Цикл
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = ЭтотОбъект.Дата;
			
			// Дт
			Проводка.СчетКт = СтруктураНастроек.Счет;
			Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
			Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
			Проводка.СубконтоКт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
			
			// Кт
			Проводка.СчетДт 		= ПланыСчетов.Финансовый.Товары;
			Проводка.КоличествоДт 	= СтрокаКомплект.Количество;
			
			Проводка.СубконтоДт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.Товары					= СтрокаКомплект.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Оприходование комплектов";
			
			СтрокиСостав = ТабСоставКомплектов.НайтиСтроки(Новый Структура("Комплект", СтрокаКомплект.Номенклатура));
			СуммаСостава = 0;
			Для Каждого СтрокаСостав Из СтрокиСостав Цикл
				СтрокиССуммами = ТабСуммыПоСоставным.НайтиСтроки(Новый Структура("Номенклатура", СтрокаСостав.Номенклатура));
				Для Каждого СтрокаССуммойСостава Из СтрокиССуммами Цикл
					СуммаСостава = СуммаСостава + СтрокаССуммойСостава.СуммаОборот;
				КонецЦикла;	
			КонецЦикла;	
			
			Проводка.Сумма = СуммаСостава;
			//Проводка.Сумма = Проводка.КоличествоДт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаКомплект.Номенклатура, , Дата);
			Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьДвиженияПоРаскладываемымКомплектам()
	
	ТабДвиженияТоваров = Новый ТаблицаЗначений();
	ТабДвиженияТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДвиженияТоваров.Колонки.Добавить("КоличествоОборот", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТабДвиженияТоваров.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Финансовый"));
	ТабДвиженияТоваров.Колонки.Добавить("СуммаОборот", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТабДвижения = Движения.Финансовый.Выгрузить();
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетУпаковка = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	Для Каждого Движение Из ТабДвижения Цикл
		Если Движение.СчетДт = СчетТовары Тогда
			СтрокаДоб = ТабДвиженияТоваров.Добавить();
			СтрокаДоб.Номенклатура = Движение.СубконтоДт2;
			СтрокаДоб.КоличествоОборот = Движение.КоличествоДт;
			СтрокаДоб.Счет = СчетТовары;
			СтрокаДоб.СуммаОборот = Движение.Сумма;
		ИначеЕсли Движение.СчетКт = СчетТовары Тогда
			СтрокаДоб = ТабДвиженияТоваров.Добавить();
			СтрокаДоб.Номенклатура = Движение.СубконтоКт2;
			СтрокаДоб.КоличествоОборот = Движение.КоличествоКт * (-1);
			СтрокаДоб.Счет = СчетТовары;
			СтрокаДоб.СуммаОборот = Движение.Сумма * (-1);
		ИначеЕсли Движение.СчетДт = СчетУпаковка Тогда
			СтрокаДоб = ТабДвиженияТоваров.Добавить();
			СтрокаДоб.Номенклатура = Движение.СубконтоДт1;
			СтрокаДоб.КоличествоОборот = Движение.КоличествоДт;
			СтрокаДоб.Счет = СчетУпаковка;
			СтрокаДоб.СуммаОборот = Движение.Сумма;
		ИначеЕсли Движение.СчетКт = СчетУпаковка Тогда
			СтрокаДоб = ТабДвиженияТоваров.Добавить();
			СтрокаДоб.Номенклатура = Движение.СубконтоКт1;
			СтрокаДоб.КоличествоОборот = Движение.КоличествоКт * (-1);
			СтрокаДоб.Счет = СчетУпаковка;
			СтрокаДоб.СуммаОборот = Движение.Сумма * (-1);	
		КонецЕсли;	
	КонецЦикла;	
	ТабДвиженияТоваров.Свернуть("Номенклатура, Счет", "КоличествоОборот, СуммаОборот");
	
	Запрос = Новый Запрос;
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	ДатаСоставляющих = '00010101';
	Для Каждого ЭлементОрдер Из МассивОрдеров Цикл
		ДатаСоставляющих = Макс(ДатаСоставляющих, ЭлементОрдер.Дата);
	КонецЦикла;	
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("МаксДата"		, ДатаСоставляющих);
	Запрос.УстановитьПараметр("Таб", ТабДвиженияТоваров);
	//Запрос.УстановитьПараметр("Регистратор"		, ЭтотОбъект.Ссылка);
	//Запрос.УстановитьПараметр("ДатаДвижений"	, Новый Граница(ЭтотОбъект.Дата, ВидГраницы.Включая));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК Номенклатура,
	|	ПриходныйОрдерСкладТовары.Номенклатура КАК Комплект
	|ПОМЕСТИТЬ ВТ_Составные
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
	|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|			И (НЕ ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.Счет,
	|	Таб.КоличествоОборот,
	|	Таб.СуммаОборот
	|ПОМЕСТИТЬ ВТ_Движения
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Количество
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И ПриходныйОрдерСкладТовары.Номенклатура.ЭтоКомплект
	|	И НЕ ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйОбороты.Номенклатура КАК Номенклатура,
	|	ФинансовыйОбороты.КоличествоОборот,
	|	ФинансовыйОбороты.Счет,
	|	ФинансовыйОбороты.СуммаОборот
	|ИЗ
	|	ВТ_Движения КАК ФинансовыйОбороты
	|ГДЕ
	|	ФинансовыйОбороты.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ.Номенклатура
	|			ИЗ
	|				ВТ_Составные КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Составные.Номенклатура,
	|	ВТ_Составные.Комплект
	|ИЗ
	|	ВТ_Составные КАК ВТ_Составные";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабКомплекты 		= Результаты[2].Выгрузить();
	ТабСуммыПоСоставным = Результаты[3].Выгрузить();
	ТабСоставКомплектов = Результаты[4].Выгрузить();
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ЗакрытиеМесяца_ОперацииПоКомплектации, ЭтотОбъект.Дата);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ЭтотОбъект.СтруктурнаяЕдиница, ЭтотОбъект.Дата);
		
		Для Каждого ВыборкаСоставные Из ТабСуммыПоСоставным Цикл
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = ЭтотОбъект.Дата;
			
			// Дт
			Проводка.СчетДт = СтруктураНастроек.Счет;
			Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
			Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
			
			// Кт
			Проводка.СчетКт 		= ВыборкаСоставные.Счет;
			Проводка.КоличествоКт 	= ВыборкаСоставные.КоличествоОборот;
			
			Если ВыборкаСоставные.Счет = ПланыСчетов.Финансовый.Товары Тогда
				
				Проводка.СубконтоКт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоКт.Товары					= ВыборкаСоставные.Номенклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "ТД";
				Проводка.Содержание							= "Списание составляющих по комплектам";
				
			ИначеЕсли ВыборкаСоставные.Счет = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
				
				Проводка.СубконтоКт.Склады		 			= ЭтотОбъект.Склад;
				Проводка.СубконтоКт.Материалы				= ВыборкаСоставные.Номенклатура;
				Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
				Проводка.НомерЖурнала						= "МВ";
				Проводка.Содержание							= "Списание составляющих по комплектам";
				
			КонецЕсли;
			
			//Проводка.Сумма = Проводка.КоличествоКт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(ВыборкаСоставные.Номенклатура,, ЭтотОбъект.Дата);
			Проводка.Сумма = ВыборкаСоставные.СуммаОборот;
			//Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
			
		КонецЦикла;
		
		Для Каждого СтрокаКомплект Из ТабКомплекты Цикл
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = ЭтотОбъект.Дата;
			
			// Дт
			Проводка.СчетКт = СтруктураНастроек.Счет;
			Проводка.СубконтоКт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
			Проводка.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
			Проводка.СубконтоКт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
			
			// Кт
			Проводка.СчетДт 		= ПланыСчетов.Финансовый.Товары;
			Проводка.КоличествоДт 	= СтрокаКомплект.Количество;
			
			Проводка.СубконтоДт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.Товары					= СтрокаКомплект.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.НомерЖурнала						= "ТД";
			Проводка.Содержание							= "Оприходование комплектов";
			
			СтрокиСостав = ТабСоставКомплектов.НайтиСтроки(Новый Структура("Комплект", СтрокаКомплект.Номенклатура));
			СуммаСостава = 0;
			Для Каждого СтрокаСостав Из СтрокиСостав Цикл
				СтрокиССуммами = ТабСуммыПоСоставным.НайтиСтроки(Новый Структура("Номенклатура", СтрокаСостав.Номенклатура));
				Для Каждого СтрокаССуммойСостава Из СтрокиССуммами Цикл
					СуммаСостава = СуммаСостава + СтрокаССуммойСостава.СуммаОборот;
				КонецЦикла;	
			КонецЦикла;	
			
			Проводка.Сумма = СуммаСостава;
			//Проводка.Сумма = Проводка.КоличествоДт * ОбщегоНазначенияСервер.ПолучитьСебестоимостьЕдиницыСырья(СтрокаКомплект.Номенклатура, , Дата);
			//Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

#Область АК_ОтключенныйКод

//Процедура ВыполнитьДвиженияПоАвансамАкцептантов()
//	Запись = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
//	Запись.Документ = ЭтотОбъект.Ссылка;
//	Запись.ДатаДокумента = ЭтотОбъект.Дата;
//	Запись.Записать();
//КонецПроцедуры	

#КонецОбласти

Процедура ВыполнитьДвиженияПоТМЦКПоступлению()
	
	ДвиженияТМЦ = Движения.ТМЦКПоступлению;
	ДвиженияТМЦ.Записывать = Истина;
	ДвиженияТМЦ.Очистить();
	
	Для Каждого СтрокаОборудования Из ЭтотОбъект.Оборудование Цикл
		Если ЗначениеЗаполнено(СтрокаОборудования.Предпоступление) Тогда
			Движение=ДвиженияТМЦ.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Количество = 1;
			Движение.Номенклатура = СтрокаОборудования.Номенклатура;
			Движение.Период = ЭтотОбъект.Дата;
			Движение.Предпоступление = СтрокаОборудования.Предпоступление;
			Движение.Сделка = СтрокаОборудования.Сделка;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТоваров Из ЭтотОбъект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТоваров.Предпоступление) Тогда
			Движение=ДвиженияТМЦ.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Количество = 1;
			Движение.Номенклатура = СтрокаТоваров.Номенклатура;
			Движение.Период = ЭтотОбъект.Дата;
			Движение.Предпоступление = СтрокаТоваров.Предпоступление;
			Движение.Сделка = СтрокаТоваров.Сделка;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ВыполнитьДвиженияПоРасчетамСКонтрагентами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения.РасчетыСКонтрагентами.Записывать = Истина;
	Движения.РасчетыСКонтрагентами.Очистить();
	
	ЕстьСделки =Ложь;
	
	Для Каждого Строка Из Оборудование Цикл
		Если ЗначениеЗаполнено(Строка.Сделка) Тогда
			ЕстьСделки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;  
	
	Если НЕ ЕстьСделки Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетамСКонтрагентами(ЭтотОбъект);	
		Возврат;
	КонецЕсли; 
	
	СчетаДляУчетаНаРегистреРасчетовСКонтрагентами = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаДляУчетаНаРегистреРасчетовСКонтрагентами();
	
	СчетУчета = Неопределено;
	
	Для Каждого Запись ИЗ Движения.Финансовый Цикл
		Если СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Запись.СчетКт) <> Неопределено Тогда
			СчетУчета = Запись.СчетКт;
			Прервать;
		КонецЕсли; 
	КонецЦикла;  
	
	Если Дата<Дата(2017,1,1) ИЛИ СчетУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по сделкам с поставщиками
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПоступлениеТоваровУслугОборудование.Сделка,
	                      |	СУММА(ПоступлениеТоваровУслугОборудование.Сумма + ВЫБОР
	                      |			КОГДА ПоступлениеТоваровУслугОборудование.Ссылка.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	                      |				ТОГДА ПоступлениеТоваровУслугОборудование.СуммаНДС
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК Сумма
	                      |ПОМЕСТИТЬ ВТ_ПоступленияПоСделкам
	                      |ИЗ
	                      |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	                      |ГДЕ
	                      |	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	                      |	И ПоступлениеТоваровУслугОборудование.Сделка.Ссылка ЕСТЬ НЕ NULL 
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПоступлениеТоваровУслугОборудование.Сделка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СделкаСПоставщикомЭтапыСделки.Ссылка КАК Сделка,
	                      |	СУММА(СделкаСПоставщикомГрафикОплат.СуммаОплаты) КАК АвансСделки
	                      |ПОМЕСТИТЬ ВТ_АвансыВСделках
	                      |ИЗ
	                      |	Документ.СделкаСПоставщиком.ЭтапыСделки КАК СделкаСПоставщикомЭтапыСделки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	                      |		ПО СделкаСПоставщикомЭтапыСделки.НомерСтроки = СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика
	                      |			И СделкаСПоставщикомЭтапыСделки.Ссылка = СделкаСПоставщикомГрафикОплат.Ссылка
	                      |ГДЕ
	                      |	СделкаСПоставщикомЭтапыСделки.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплаты.ВУказаннуюДату)
	                      |	И СделкаСПоставщикомЭтапыСделки.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ПоступленияПоСделкам.Сделка
	                      |			ИЗ
	                      |				ВТ_ПоступленияПоСделкам)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СделкаСПоставщикомЭтапыСделки.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ПоступленияПоСделкам.Сделка,
	                      |	ВТ_ПоступленияПоСделкам.Сумма,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ПоступленияПоСделкам.Сделка.СуммаСделки = 0
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ВТ_ПоступленияПоСделкам.Сумма * ЕСТЬNULL(ВТ_АвансыВСделках.АвансСделки, 0) / ВТ_ПоступленияПоСделкам.Сделка.СуммаСделки
	                      |	КОНЕЦ КАК АвансПоСделке
	                      |ИЗ
	                      |	ВТ_ПоступленияПоСделкам КАК ВТ_ПоступленияПоСделкам
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АвансыВСделках КАК ВТ_АвансыВСделках
	                      |		ПО ВТ_ПоступленияПоСделкам.Сделка = ВТ_АвансыВСделках.Сделка");

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;
		Движение.Период			= ЭтотОбъект.Дата;
		Движение.Организация = ЭтотОбъект.Организация;
		Движение.Контрагент = ЭтотОбъект.Контрагент;
		Движение.Сделка = Выборка.Сделка;
		Движение.СчетУчета = ПланыСчетов.Финансовый.ПрочаяЗадолженность;      // все движения по сделкам учитываем на 60.4
		Движение.Сумма			= Выборка.Сумма;
		Движение.АвансПоСделке= Выборка.АвансПоСделке;
	КонецЦикла;   
	
	// Движение по заявками и без сделок
	СуммаПоСделкам = Движения.РасчетыСКонтрагентами.Итог("Сумма");
	СуммаВзаиморасчетов = 0;
	
	Для Каждого Проводка ИЗ Движения.Финансовый Цикл
		Если СчетаДляУчетаНаРегистреРасчетовСКонтрагентами.Найти(Проводка.СчетКт) <> Неопределено Тогда
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + Проводка.Сумма;
		КонецЕсли; 
	КонецЦикла;  
	
	Если СуммаВзаиморасчетов>СуммаПоСделкам Тогда
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		Движение.Регистратор	= ЭтотОбъект.Ссылка;
		Движение.Период			= ЭтотОбъект.Дата;
		Движение.Организация = ЭтотОбъект.Организация;
		Движение.Контрагент = ЭтотОбъект.Контрагент;
		//+++AK GREK 03.11.2017 ИП-00017009
		Если ЗначениеЗаполнено(ДокументОснование) И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") ИЛИ
			 ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")) Тогда
 			Движение.Сделка = ЭтотОбъект.ДокументОснование;
		ИначеЕсли ЗначениеЗаполнено(Заявка) Тогда
			Движение.Сделка = ЭтотОбъект.Заявка;
		КонецЕсли;
		//---AK
		Движение.СчетУчета = СчетУчета;
		Движение.Сумма			= СуммаВзаиморасчетов - СуммаПоСделкам;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ЗаполнитьОборудованиеПоЗаявкеНаРасходованиеСредств(ДанныеЗаполнения)
	
    //
	Для Каждого СтрокаТЧ Из ДанныеЗаполнения.ТорговыеТочки Цикл
		
		НоваяСтрока = ЭтотОбъект.Оборудование.Добавить();
		
		НоваяСтрока.Номенклатура 		= ДанныеЗаполнения.НоменклатураПоставщика;
		//НоваяСтрока.ОсновноеСредство 	= Справочники.ОсновныеСредства.НайтиПоРеквизиту("Номенклатура", НоваяСтрока.Номенклатура);
		//НоваяСтрока.ИнвентарныйНомер 	= НоваяСтрока.ОсновноеСредство.ИнвентарныйНомер;
		//НоваяСтрока.ЗаводскойНомер 		= НоваяСтрока.ОсновноеСредство.ЗаводскойНомер;   
		
		НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС 	= ДанныеЗаполнения.СтавкаНДС;
		
		РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект.ВариантРасчетаНДС);
		
		//НоваяСтрока.СчетУчетаБУ 			= ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков;

		НоваяСтрока.СчетУчетаЗабалансовый = АК_ОсновныеСредства.ПолучитьОсновнойСчетУчета(НоваяСтрока.Номенклатура);;
		УстановитьСчетаУчетаБУНУВСтроке(НоваяСтрока);

		НоваяСтрока.СчетУчетаЗабалансовый 	= ПланыСчетов.Финансовый.ККМ;
		НоваяСтрока.Инвестиция				= Истина;
		НоваяСтрока.ТорговаяТочка 			= СтрокаТЧ.ТорговаяТочка;
		
	КонецЦикла;
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура ЗаполнитьУслугиПоЗаявкеНаРасходованиеСредств(ДанныеЗаполнения)
	
	мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
	мНовыйУчетСчетовОС = (Лев(ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.Код, 1) = "2" // инвестиционная деятельность
							И НЕ ТекущаяДата() < мДатаНовогоУчетаСчетовОС);

	Для Каждого СтрокаТЧ Из ДанныеЗаполнения.ТорговыеТочки Цикл
		
		НоваяСтрока = ЭтотОбъект.Услуги.Добавить();
		
		НоваяСтрока.Номенклатура = ДанныеЗаполнения.НоменклатураПоставщика;
		ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.Количество 	= 1;
		НоваяСтрока.Цена 		= СтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС 	= ДанныеЗаполнения.СтавкаНДС;
		Если мНовыйУчетСчетовОС Тогда
			НоваяСтрока.СчетЗатрат 		= ПланыСчетов.Финансовый.КапитальныеВложения;
			НоваяСтрока.Субконто1 		= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Субконто3 		= СтрокаТЧ.ЦФО;
			НоваяСтрока.ТорговаяТочка 	= СтрокаТЧ.ТорговаяТочка;
		Иначе
			НоваяСтрока.СчетЗатрат 		= ?(ЗначениеЗаполнено(ДанныеЗаполнения.СчетЗатрат), ДанныеЗаполнения.СчетЗатрат, ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения);
			НоваяСтрока.Субконто1 		= СтрокаТЧ.ТорговаяТочка;
			НоваяСтрока.Субконто2 		= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов;
			НоваяСтрока.Субконто3 		= СтрокаТЧ.ЦФО;
		КонецЕсли;
		
		ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
		
	КонецЦикла;
		
	ЭтотОбъект.СтатьяЗатрат = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов;
	Если Не ЗначениеЗаполнено(ЭтотОбъект.СтатьяЗатрат) Тогда
		//+++АК SUVV 2018.02.28 ИП-00017941
		//ЭтотОбъект.СтатьяЗатрат = АК_УчетМСФОПривилегированный.ПолучитьСтатьюСоответствия(ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств);
		ЭтотОбъект.СтатьяЗатрат = АК_УчетМСФОПривилегированный.ПолучитьСтатьюСоответствия(ДанныеЗаполнения.Дата, ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
	КонецЕсли;

	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура ЗаполнитьУслугиПоОстаткамПоЗаявкеНаУслуги(ДанныеЗаполнения)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Заявка"		, ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугУслуги.Количество) КАК Количество
	|ПОМЕСТИТЬ УжеПоставлено
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Ссылка <> &ЭтотДокумент
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.ДокументОснование = &Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугУслуги.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыУслуги.Номенклатура,
	|	ЗаявкаНаУслугиМатериалыУслуги.Количество,
	|	ЗаявкаНаУслугиМатериалыУслуги.Цена,
	|	ЗаявкаНаУслугиМатериалыУслуги.Сумма,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтавкаНДС,
	|	ЗаявкаНаУслугиМатериалыУслуги.СуммаНДС,
	|	СУММА(ЗаявкаНаУслугиМатериалыУслуги.КоличествоПолучено) КАК КоличествоПолучено,
	|	СУММА(ЕСТЬNULL(УжеПоставлено.Количество, 0)) КАК УжеПоставлено,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница,
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.ЦФО,
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов
	|ПОМЕСТИТЬ ВсеДанные
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ УжеПоставлено КАК УжеПоставлено
	|		ПО ЗаявкаНаУслугиМатериалыУслуги.Номенклатура = УжеПоставлено.Номенклатура
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка = &Заявка
	|	И ЗаявкаНаУслугиМатериалыУслуги.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаУслугиМатериалыУслуги.Номенклатура,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтавкаНДС,
	|	ЗаявкаНаУслугиМатериалыУслуги.Количество,
	|	ЗаявкаНаУслугиМатериалыУслуги.Цена,
	|	ЗаявкаНаУслугиМатериалыУслуги.Сумма,
	|	ЗаявкаНаУслугиМатериалыУслуги.СуммаНДС,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница,
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.ЦФО,
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДанные.Номенклатура,
	|	ВсеДанные.Цена,
	|	ВсеДанные.СтавкаНДС,
	|	ВсеДанные.КоличествоПолучено - ВсеДанные.УжеПоставлено КАК Количество,
	|	ВсеДанные.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТочекДляРаспределения) КАК СчетЗатрат,
	|	ВсеДанные.СтруктурнаяЕдиница КАК Субконто1,
	|	ВсеДанные.СтатьяДДСОсновнаяСтатьяДоходовРасходов КАК Субконто2,
	|	ВсеДанные.ЦФО КАК Субконто3,
	|	ВЫБОР
	|		КОГДА ВсеДанные.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	ВсеДанные КАК ВсеДанные
	|ГДЕ
	|	ВсеДанные.КоличествоПолучено > ВсеДанные.УжеПоставлено";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаУслуг=ТаблицаЗапроса.Скопировать();
	//ТаблицаУслуг 		= ТаблицаЗапроса.Скопировать(Новый Структура("ЭтоУслуга", Истина));
	//ТаблицаМатериалов 	= ТаблицаЗапроса.Скопировать(Новый Структура("ЭтоУслуга", Ложь));
	ЭтотОбъект.Услуги.Загрузить(ТаблицаУслуг);
	//ПосчитатьСуммуТабличнойЧасти();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ЭтотОбъект.СтатьяЗатрат = ТаблицаЗапроса[0].Субконто2;
	КонецЕсли;
	
	СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Услуги Цикл
		//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		СтрокаТабличнойЧасти.СчетЗатратБУ = СчетЗатратБУ;

		//РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратБУ, 
		//	СтрокаТабличнойЧасти.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
		//	СтрокаТабличнойЧасти.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
		//	СтрокаТабличнойЧасти.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);

		 СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;

		//РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
		//СтрокаТабличнойЧасти.СубконтоНУ1, мКолонкиУслуги.СубконтоНУ1,
		//СтрокаТабличнойЧасти.СубконтоНУ2, мКолонкиУслуги.СубконтоНУ2,
		//СтрокаТабличнойЧасти.СубконтоНУ3, мКолонкиУслуги.СубконтоНУ3);
        ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)
	КонецЦикла;
	
	//ЭтотОбъект.Товары.Загрузить(ТаблицаМатериалов);
	//Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
	//	СтрокаТабличнойЧасти.Коэффициент		= 1;
	//	СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	//	ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)
	//КонецЦикла;
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры	

Функция СтруктураСтавкиНДСИзХарактеристики(Номенклатура) Экспорт
	
	//
	Запрос = Новый Запрос;
	//Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) Тогда
	//	Запрос.УстановитьПараметр("Значение", Контрагент.ГоловнойКонтрагент);
	//Иначе
	//	Запрос.УстановитьПараметр("Значение", Контрагент);
	//КонецЕсли;	
	Запрос.УстановитьПараметр("Товар"		, Номенклатура);
	Запрос.УстановитьПараметр("Приходники"	, ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	Запрос.УстановитьПараметр("ДатаКон"	, Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Характеристика
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В (&Приходники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставКомплектаСрезПоследних.Составляющая
	|ИЗ
	|	РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаКон, ) КАК СоставКомплектаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО СоставКомплектаСрезПоследних.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&Приходники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.СтавкаНДСПриПоступленииТовара КАК СтавкаНДС,
	|	ХарактеристикиНоменклатуры.ВыборСтавкиНДСВручную,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Активна)
	|			ТОГДА 1
	|		КОГДА ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Новая)
	|			ТОГДА 2
	|		КОГДА ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Выведена)
	|			ТОГДА 3
	|		КОГДА ХарактеристикиНоменклатуры.СтатусАктивностиХарактеристики = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Сортировка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Товар
	|	И ХарактеристикиНоменклатуры.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Характеристики.Характеристика
	|			ИЗ
	|				ВТ_Характеристики КАК ВТ_Характеристики)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
				   
	СтруктураВозврат = Новый Структура("ВыборСтавкиНДСВручную, СтавкаНДС", Ложь, Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврат.ВыборСтавкиНДСВручную 	= Выборка.ВыборСтавкиНДСВручную;
		СтруктураВозврат.СтавкаНДС 				= Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции	

Процедура ЗаполнитьТоварыПоПриходномуОрдеру(СсылкаНаДокумент)
	
	//
	Запрос = Новый Запрос;
	//+++AK BARA
	//Запрос.УстановитьПараметр("Ссылка"	, СсылкаНаДокумент);
	Если ПриходныеОрдера.Количество()<>0 Тогда 
		Запрос.УстановитьПараметр("Ссылка"	, ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	Иначе
		Запрос.УстановитьПараметр("Ссылка"	, Ссылка);
	КонецЕсли;
	//---AK BARA
	Запрос.УстановитьПараметр("МаксДата", СсылкаНаДокумент.Дата);
	
	//+++АК sole 2018.04.09 ИП-00018345
	Если ЭтотОбъект.Дата < Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|				ТОГДА ПриходныйОрдерСкладТовары.Количество
	|			ИНАЧЕ ПриходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|				ТОГДА ПриходныйОрдерСкладТовары.Количество
	|			ИНАЧЕ ПриходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество
	|		КОНЕЦ) КАК ПоПриходнымОрдерам,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
	|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|			И (ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие = ЛОЖЬ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В (&Ссылка)
	|	И ПриходныйОрдерСкладТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ";
		
	Иначе
		Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК ПоПриходнымОрдерам,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|
	|ИЗ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|		ПриходныйОрдерСкладТовары.Ссылка В (&Ссылка)
	|	И	ПриходныйОрдерСкладТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
	|";

	КонецЕсли;
	//---АК sole 2018.04.09 ИП-00018345	
	ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275	
	 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), Дата);
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	//---АК Susk (Суслин К.В.) 
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		ТекНоменклатура = СтрокаТЧ.Номенклатура;
		Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
			                                            
			//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(ТекНоменклатура);			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСчетов);			
			
			//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
			
			#Область ЗакоментКод_ЗаполнитьТоварыПоПриходномуОрдеру
			//Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
			//	ИЛИ ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			//	
			//	СчетУчета = ПланыСчетов.Финансовый.Товары;
			//	
			//ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
			//	
			//	СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
			//	
			//КонецЕсли;
			//
			//Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			//	СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
			//КонецЕсли;
			//
			//СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	СчетУчета = СтрокаСчетУчета.СчетУчета;
			//КонецЕсли;
			//
			//СтрокаТЧ.СчетУчета = ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
			#КонецОбласти
			
			//---АК Susk (Суслин К.В.) 
			
			Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье Тогда
				СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика;
			Иначе
				СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
			КонецЕсли;	
			
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(ТекНоменклатура);
		
				Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
					
				ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
					СтрокаТЧ.СтавкаНДС = СтрСтавкиПоХарактеристике.СтавкаНДС;
				Иначе
					СтрокаТЧ.СтавкаНДС = ТекНоменклатура.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;   
	
	Если ПриходныеОрдера.Количество()<>0 Тогда 
		Запрос.УстановитьПараметр("Ссылка"	, ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	Иначе
		Запрос.УстановитьПараметр("Ссылка"	, Ссылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МаксДата", СсылкаНаДокумент.Дата);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК ПоПриходнымОрдерам,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В (&Ссылка)
	|	И ПриходныйОрдерСкладТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент";
	
	//+++АК sils 21.06.2018 ИП-00019041
	//ЭтотОбъект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	флМатериалыВТовары = Ложь;
	Если Дата = '00010101' и ТекущаяДата() >= '20180601' или Дата >= '20180601' Тогда
		ТЗ_Материалы = Запрос.Выполнить().Выгрузить();
		Если ТЗ_Материалы.Количество() > 0 Тогда
			флМатериалыВТовары = Истина;
			Для каждого стр из ТЗ_Материалы Цикл
				ЗаполнитьЗначенияСвойств(ЭтотОбъект.Товары.Добавить(), стр);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЭтотОбъект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	//---АК
	
	//+++АК sils 21.06.2018 ИП-00019041
	//Для каждого СтрокаТабличнойЧасти из ЭтотОбъект.Услуги Цикл
	Если флМатериалыВТовары Тогда
		ТабЧасть = ЭтотОбъект.Товары;
		//+++АК sils 09.07.2018 ИП-00019007
		Если ЗначениеЗаполнено(ДоговорКонтрагента)
			И ЗначениеЗаполнено(ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
			СчетУчетаРасчетовСКонтрагентом = ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
		Иначе	
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;	
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("139112");
		СтатьяЗатрат = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39112");
		//---АК
	Иначе
		ТабЧасть = ЭтотОбъект.Услуги;
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти из ТабЧасть Цикл
	//---АК	
		
		СчетаЗатрат = Справочники.Номенклатура.ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СчетаЗатрат);
		
		//+++АК sils 21.06.2018 ИП-00019041
		//Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
		//	СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ПрочиеМатериалы;
		//КонецЕсли;
		Если флМатериалыВТовары Тогда
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
				СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
				СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ПрочиеМатериалы;
			КонецЕсли;
		КонецЕсли;
		//---АК
		
		//+++АК sils 21.06.2018 ИП-00019041
		Если не флМатериалыВТовары Тогда
		//---АК
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатратБУ) Тогда
			СтрокаТабличнойЧасти.СчетЗатратБУ = ПолучитьСчетБУПоСтатистике(СтрокаТабличнойЧасти.Номенклатура);	
		КонецЕсли;
		//+++АК sils 21.06.2018 ИП-00019041
		КонецЕсли;
		//---АК
		
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		//+++АК sils 09.07.2018 ИП-00019041
		Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			ОбновитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
		КонецЕсли;
		//---АК
	КонецЦикла;	
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Функция ПолучитьСчетБУПоСтатистике(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ
		|ПОМЕСТИТЬ втКоличество
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКоличество.СчетЗатратБУ,
		|	втКоличество.Количество КАК Количество
		|ИЗ
		|	втКоличество КАК втКоличество
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат     ВыборкаДетальныеЗаписи.СчетЗатратБУ;
	КонецЦикла;

	Возврат ПланыСчетов.Хозрасчетный.ПрочиеМатериалы;
	
КонецФункции

Процедура ПроверитьПриходныеОрдера(ПриходныеОрдера, Отказ)
	         	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ		
		|	ПриходныйОрдерСклад.Представление КАК ОрдерПр
		|ИЗ
		|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
		|ГДЕ
		|	ПриходныйОрдерСклад.Отменен
		|	И НЕ ПриходныйОрдерСклад.Проведен
		|	И ПриходныйОрдерСклад.Ссылка В(&ПриходныеОрдера)";
	
	Запрос.УстановитьПараметр("ПриходныеОрдера", ПриходныеОрдера);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	Иначе
		выборка = РезультатЗапроса.Выбрать();
		
		Пока выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке("Документ "+Выборка.ОрдерПр+" помечен на удаление, либо отменен");
		КонецЦикла;
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьКорректностьДоговора(Договор, Ссылка, ДанныеСохраненногоДокумента)
	
	ДоговорИзменен = Ссылка.Пустая();
	Если НЕ ДоговорИзменен Тогда 
		СохраненныйДоговор = ДанныеСохраненногоДокумента.ДоговорКонтрагента;
		ДоговорИзменен 	   = Договор <> СохраненныйДоговор;
	КонецЕсли;
	Если ДоговорИзменен
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)"+": контрагент - "+ЭтотОбъект.Контрагент+", договор - "+ЭтотОбъект.ДоговорКонтрагента);		
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ДанныеСохраненногоДокумента(Ссылка)
	
	Результат = Новый Структура("ДоговорКонтрагента, УПД, СчетФактура");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслуг.УПД,
		|	ПоступлениеТоваровУслуг.СчетФактура
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
	
		Выборка = РезультатЗапроса.Выбрать();
	
	 	Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоДокумента = ДанныеСохраненногоДокумента(Ссылка);
	
	ПроверитьПриходныеОрдера(ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"), Отказ);	
	ПроверитьКорректностьДоговора(ЭтотОбъект.ДоговорКонтрагента, ЭтотОбъект.Ссылка, ДанныеСохраненногоДокумента);	
		
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВариантРасчетаНДС) Тогда
		ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	КонецЕсли;	

	ПроверкиПоНДФЛ();		
	ПосчитатьСуммуТабличнойЧасти();
	
	Счет08 = ПланыСчетов.Финансовый.КапитальныеВложения;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		Если СтрокаТЧ.СчетЗатрат = Счет08
			 	И (НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто2)
			 		ИЛИ Оборудование_УжеСписано(СтрокаТЧ.Субконто2))
				И СтрокаТЧ.ТорговаяТочка.Пустая() Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " табличной части ""Услуги"" не указана торговая точка", Отказ);			
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтотОбъект.Услуги.Количество() > 0 Тогда
		Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПоставщиками Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для поступления услуг указан счет учета расчетов с контрагентом 60.3!" + Символы.ПС +
							"Рекомендуется установить счет 60.4!");	
		КонецЕсли;
		Если ЭтотОбъект.СтатьяДДС.Пустая() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана статья ДДС", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЭтотОбъект.ДатаВходящегоДокумента = Дата(1, 1, 1)
			И НЕ ЭтотОбъект.ДоговорКонтрагента.АвтоматическиНачислятьУслугуПоставщика Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена дата входящего документа! Проведение невозможно.", Отказ);			
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Склад) И ЭтотОбъект.Склад.ЗаблокироватьДвижениеПоСкладу И ЭтотОбъект.Склад.ДатаБлокировкиДвижений <= НачалоДня(ТекущаяДата()) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Движения по складу " + ЭтотОбъект.Склад.Наименование + " заблокированы! Проведение невозможно.", Отказ);
		КонецЕсли;

		#Если Клиент Тогда	
	 	СравнитьСуммуДокументаССуммаойПоЗаявкамНаРасходование();
		#КонецЕсли				
	
		ПроверитьСтатьюДДС(Отказ);
		
		Если ЭтотОбъект.ПриходныеОрдера.Количество() > 0 Тогда			
			ВыполнитьКонтрольОрдеров(Отказ);
		КонецЕсли;
		
		Если НЕ ЭтотОбъект.Дата < '20131114' Тогда
		
			мНеПроверять = ОбщегоНазначенияПовтИсп.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
			Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
					И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
					И НЕ мНеПроверять Тогда			
				
				мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ДокументОснование, "СтатьяДвиженияДенежныхСредств"));
				
				Если ЗначениеЗаполнено(мСтатьяДР) Тогда
					Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
						Если СтрокаТЧ.Субконто2 = мСтатьяДР
								ИЛИ НЕ ТипЗнч(СтрокаТЧ.Субконто2) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
							Продолжить;
						КонецЕсли;
	                    ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СтрокаТЧ.НомерСтроки + " услуг указана статья, не соответствующая заявке на расходование средств!", Отказ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	АК_УчетМСФО.КонтрольДатыВходящегоДокумента(ЭтотОбъект,Отказ);		
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СчетФактура) = Истина И ЭтотОбъект.СчетФактура <> ДанныеСохраненногоДокумента.СчетФактура Тогда
		ОтправлятьНаРаспознавание = Истина;	
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.УПД) = Истина И ЭтотОбъект.УПД <> ДанныеСохраненногоДокумента.УПД Тогда
		ОтправлятьНаРаспознавание = Истина;	
	КонецЕсли;		

	Если ТранспортныеУслуги Тогда
		ТранспортныеДокументыСуммуОбновить();
		ТранспортныеДокументыИтог = ТранспортныеДокументы.Итог("СуммаДокумента");
		ТранспортныеДокументыИтог = ТранспортныеДокументыИтог + ТранспортныеДокументы.Итог("СуммаДопТарифа"); //+++АК SHEP 2018.04.27 ИП-00018321.02
		УслугиИтог = Услуги.Итог("Сумма");
		Если ТранспортныеДокументыИтог <> УслугиИтог Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма по транспортным документам (" + Формат(ТранспортныеДокументыИтог, "ЧДЦ=2; ЧН=") + ") не совпадает с суммой услуг (" + Формат(УслугиИтог, "ЧДЦ=2; ЧН=") + ")!", Отказ);
		КонецЕсли;
	ИначеЕсли НЕ ТранспортныеУслуги И ТранспортныеДокументы.Количество() > 0 Тогда
		ТранспортныеДокументы.Очистить();
	КонецЕсли;
	
	Если Не Отказ Тогда 
		Документы.СчетФактураПолученный.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	КонецЕсли;	
	
	//+++АК sils 24.06.2018 ИП-00018950
	Если не Отказ Тогда
		ДокументыПолучены = ЗначениеЗаполнено(СтатусПолученныхДокументов);
	КонецЕсли;
	//---АК 
		
КонецПроцедуры

Процедура ПроверитьСтатьюДДС(Отказ)
	
	Перем Выборка, Запрос, ОрганизацияТилси, Результат, РезультатЗапроса;
	
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, Счет = &Счет) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.Период УБЫВ";
		
		Запрос.УстановитьПараметр("ВыбДата", Дата);			
		Запрос.УстановитьПараметр("Счет", СчетУчетаРасчетовСКонтрагентом);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отсутствует соответствие Счета учета расчетов с контрагентом и Статьи ДДС в РегистреСведений ""Соответствия статей и счетов""", Отказ);				
		Иначе
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Присутствует более одного соответствия Счета учета расчетов с контрагентом и Статьи ДДС в РегистреСведений ""Соответствия статей и счетов""", Отказ);					
			Иначе
				Выборка.Следующий();
				Если ЗначениеЗаполнено(Выборка.СтатьяДДС) Тогда
					СтатьяДДС = Выборка.СтатьяДДС;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Отсутствует Статья ДДС для указанного Счета учета расчетов с контрагентом в РегистреСведений ""Соответствия статей и счетов""", Отказ);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияСтатейСчетовСрезПоследних.Счет
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.Период УБЫВ";
		
		Запрос.УстановитьПараметр("ВыбДата", Дата);
		//---АК SUVV
		Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отсутствует соответствие Счета учета расчетов с контрагентом и Статьи ДДС в РегистреСведений ""Соответствия статей и счетов""", Отказ);
		Иначе
			//+++АК LAGP 2018.05.21 ИП-00018696.01 Документы организации Тилси не должны учавствовать в ВГ движении
			ОрганизацияТилси 	= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("aec7bdbc-0fdd-11e8-8b52-005056a714c6"));
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИспользоватьВГСчета") И НЕ Организация = ОрганизацияТилси Тогда //Тилси
				//---АК LAGP
				СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.ВГОРасчетыСПоставщикамиИПодрядчиками;
			Иначе	
				Результат = РезультатЗапроса.Выбрать();
				Результат.Следующий();
				СчетУчетаРасчетовСКонтрагентом = Результат.Счет;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СуммаПоЗаявкам(Заявки)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ЗаявкаНаРасходованиеСредств.СуммаДокумента), 0) КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредств.Ссылка В(&Заявки)";
	
	Запрос.УстановитьПараметр("Заявки", Заявки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();		
		Выборка.Следующий();
		Возврат Выборка.СуммаДокумента;				
	КонецЕсли;
	
КонецФункции

Процедура СравнитьСуммуДокументаССуммаойПоЗаявкамНаРасходование()
	
	Перем СписокЗаявок, СтрокаТЧ, СумДок, ЭлементСписка;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЗаявок = Новый Массив;
	Если ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
		И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
		СписокЗаявок = Новый Соответствие;
		СписокЗаявок[СтрокаТЧ.ДокументОснование] = СтрокаТЧ.ДокументОснование;
		МассивЗаявок.Добавить(ЭтотОбъект.ДокументОснование);
		Для каждого СтрокаТЧ Из ЭтотОбъект.ДокументыОснования Цикл
			Если СписокЗаявок[СтрокаТЧ.ДокументОснование] = Неопределено Тогда
				МассивЗаявок.Добавить(СтрокаТЧ.ДокументОснование);
				СписокЗаявок[СтрокаТЧ.ДокументОснование] = СтрокаТЧ.ДокументОснование
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	СуммаПозаявкам = СуммаПоЗаявкам(МассивЗаявок);
	Если МассивЗаявок.Количество() > 1
		И ЭтотОбъект.СуммаДокумента <> СуммаПозаявкам Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружено расхождение по сумме между документом и привязанными заявками: " +
		Строка(?(ЭтотОбъект.СуммаДокумента - СуммаПозаявкам > 0, ЭтотОбъект.СуммаДокумента - СуммаПозаявкам, - ЭтотОбъект.СуммаДокумента + СуммаПозаявкам)));
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкиПоНДФЛ()
	
	Перем СтрокаТЧ;
	
	Если ЭтотОбъект.ПроизвестиУплатуНДФЛ Тогда
		Если ЭтотОбъект.Товары.Количество() > 0 Тогда
			ЭтотОбъект.Товары.Очистить();
		КонецЕсли;
		Если ЭтотОбъект.Оборудование.Количество() > 0 Тогда
			ЭтотОбъект.Оборудование.Очистить();
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
			Если НЕ СтрокаТЧ.СуммаНДС = 0 Тогда
				СтрокаТЧ.СуммаНДС = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ ЭтотОбъект.СуммаНДФЛ = 0 Тогда
			ЭтотОбъект.СуммаНДФЛ = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если НЕ Отказ
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И ЗначениеЗаполнено(ДокументОснование) 
			И ДокументОснование.ВсеДокументыВНаличии = Ложь Тогда
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ДокументОснование = &ДокументОснование
		|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
		|	И ПоступлениеТоваровУслуг.ДокументыПолучены = ИСТИНА";
					   
		ОбщаяСумма = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщаяСумма = ?(Выборка.СуммаДокумента = Null, 0, Выборка.СуммаДокумента);
		КонецЕсли;
		Если ОбщаяСумма >= ДокументОснование.СуммаДокумента Тогда
			ОбъектДокумента = ДокументОснование.ПолучитьОбъект();
			ОбъектДокумента.ОбменДанными.Загрузка 					= Истина;
			ОбъектДокумента.НеПроверятьДатуЗапретаРедактирования 	= Истина;
			ОбъектДокумента.МенятьСтатусы 							= Ложь;
			ОбъектДокумента.ВсеДокументыВНаличии 					= Истина;
			
			Попытка
				ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	//АК БЕЛН 28.04.2016+
	Если НЕ Отказ
			И МенятьСтатусы Тогда
		
	 	УстановитьПривилегированныйРежим(Истина);
		СписокЗаявок = Новый СписокЗначений;
		Если ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
				И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
			СписокЗаявок.Добавить(ЭтотОбъект.ДокументОснование);
		КонецЕсли;
		Для каждого СтрокаТЧ Из ЭтотОбъект.ДокументыОснования Цикл
			Если СписокЗаявок.НайтиПоЗначению(СтрокаТЧ.ДокументОснование) = Неопределено
					И ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
					И ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			    СписокЗаявок.Добавить(СтрокаТЧ.ДокументОснование);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого ЭлементСписка Из СписокЗаявок Цикл
			ТекЗаявка = ЭлементСписка.Значение;
			Если НЕ ТекЗаявка.СтатусПолученныхДокументов = ЭтотОбъект.СтатусПолученныхДокументов
					ИЛИ НЕ ТекЗаявка.ВсеДокументыВНаличии = ЗначениеЗаполнено(ЭтотОбъект.СтатусПолученныхДокументов) Тогда
				ОбДок = ТекЗаявка.ПолучитьОбъект();          
				ОбДок.СтатусПолученныхДокументов			= ЭтотОбъект.СтатусПолученныхДокументов;
				ОбДок.ВсеДокументыВНаличии					= ЗначениеЗаполнено(ОбДок.СтатусПолученныхДокументов);
				ОбДок.ОбменДанными.Загрузка 				= Истина;
				ОбДок.НеПроверятьДатуЗапретаРедактирования 	= Истина;
				ОбДок.МенятьСтатусы							= Ложь;
				ОбДок.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Изменен статус полученных документов в " + Строка(ТекЗаявка));
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	//АК БЕЛН 28.04.2016-
	//+++АК POZM 2018.05.31 ИП-00018739
	Если ЗначениеЗаполнено(ЭтотОбъект.Заявка)
			И ТипЗнч(ЭтотОбъект.Заявка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		ПолныеПрава.ЗарегистрироватьОтложенныйРасчетНаличияПоступленийПоЗаявке(ЭтотОбъект.Заявка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ссылка.Заявка) И ТипЗнч(Ссылка.Заявка)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") И Ссылка.Заявка<>Заявка Тогда	
		ПолныеПрава.ЗарегистрироватьОтложенныйРасчетНаличияПоступленийПоЗаявке(Ссылка.Заявка);
	КонецЕсли;
	#Область АК_ОтключенныйКод 
	////пмм
	//Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
	//	ЗаявкаОбъект = ДокументОснование.ПолучитьОбъект();
	//	ВсеДокументыВНаличииЗаявка = ЗаявкаОбъект.ВсеДокументыВНаличии;
	//	СуммаОстатка = ЗаявкаОбъект.ВсеДокументыВНаличии(ЭтотОбъект.Ссылка);
	//	Если (СуммаОстатка-ЭтотОбъект.СуммаДокумента)<0 Тогда
	//		//Отказ = истина;
	//		Сообщить("Сумма поступлений по заявке документа превышает сумму заявки!");
	//		//Возврат;
	//	ИначеЕсли СуммаОстатка=ЭтотОбъект.СуммаДокумента Тогда
	//		ЗаявкаОбъект.ВсеДокументыВНаличии = Истина;
	//	КонецЕсли;	
	//	
	//	Если ЗаявкаОбъект.ВсеДокументыВНаличии<>ВсеДокументыВНаличииЗаявка Тогда
	//		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	//	КонецЕсли;	
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Ссылка.ДокументОснование) И ТипЗнч(Ссылка.ДокументОснование)=Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") И Ссылка.ДокументОснование<>ДокументОснование Тогда
	//	ЗаявкаОбъект = Ссылка.ДокументОснование.ПолучитьОбъект();
	//	ВсеДокументыВНаличииЗаявка = ЗаявкаОбъект.ВсеДокументыВНаличии;
	//	СуммаОстатка = ЗаявкаОбъект.ВсеДокументыВНаличии(ЭтотОбъект.Ссылка);
	//	#Если Клиент Тогда
	//	Если (СуммаОстатка-ЭтотОбъект.СуммаДокумента)<0 Тогда
	//		//Отказ = истина;
	//		//Сообщить("Сумма поступлений по заявке документа превышает сумму заявки!");
	//		//Возврат;
	//	КонецЕсли;	
	//	#КонецЕсли
	//	Если ЗаявкаОбъект.ВсеДокументыВНаличии<>ВсеДокументыВНаличииЗаявка Тогда
	//		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	//	КонецЕсли;	
	//КонецЕсли;
	#КонецОбласти 
	//---АК POZM 
	
	//++ АК 08.10.2017 luza ИП-00016539
	Если ЗначениеЗаполнено(ЭтотОбъект.СчетФактура) = Истина ИЛИ ЗначениеЗаполнено(ЭтотОбъект.УПД) Тогда	
		//Пока закоментировал т.к. распознавание идет через филин
		
		//Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
		//Запись.Файл = ЭтотОбъект.СчетФактура;
		//Запись.Прочитать();
		//Если ЗначениеЗаполнено(Запись.Файл) = Истина Тогда
		//	Если Запись.ОбъектСравнения <> ЭтотОбъект.Ссылка Тогда
		//		Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;		
		//		Запись.Распознан = Ложь;
		//		Запись.Обработан = Ложь;
		//		Запись.РезультатСравнения = Ложь;
		//		Запись.Записать();			
		//	КонецЕсли;	
		//Иначе
		//	Запись.Файл = ЭтотОбъект.СчетФактура;
		//	Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;		
		//	Запись.Записать();		
		//КонецЕсли;	
		//
		//ИмяФайла = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ЭтотОбъект.СчетФактура);
		//ИмяФайлаРаспознования = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознаванияОбъекта(ЭтотОбъект.СчетФактура);
		//ИмяФайлаРаспознанного = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознанногоОбъекта(ЭтотОбъект.СчетФактура);
		//
		//ФайлРасп = Новый Файл(ИмяФайлаРаспознанного);		
		//Если ФайлРасп.Существует() Тогда
		//Иначе
		//	Файл = Новый Файл(ИмяФайла);
		//	Если Файл.Существует() Тогда
		//		КопироватьФайл(ИмяФайла, ИмяФайлаРаспознования);
		//	КонецЕсли;	
		//КонецЕсли;	
		
		Если ОтправлятьНаРаспознавание = Истина Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект.СчетФактура) Тогда
				ТекФайл = ЭтотОбъект.СчетФактура;
			ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.УПД) Тогда	
				ТекФайл = ЭтотОбъект.УПД;
			Иначе
				ТекФайл = Неопределено;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ТекФайл) = Истина Тогда
				//файлы ЭДО не нужно распознавать
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗначенияСвойствОбъектов.Объект КАК Файл
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Файлы
				|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.ЭДО_ИдентификаторДокумента)
				|	И ЗначенияСвойствОбъектов.Объект = &ТекФайл";
				
				Запрос.УстановитьПараметр("ТекФайл", ТекФайл);				
				Результат = Запрос.Выполнить();
				
				Если Результат.Пустой() Тогда 					
					Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();		
					Запись.Файл = ТекФайл;
					Запись.Прочитать(); 			
					Если ЗначениеЗаполнено(Запись.Файл) = Истина Тогда
						Если Запись.ОбъектСравнения <> ЭтотОбъект.Ссылка Тогда
							Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;																	
						КонецЕсли;	
					Иначе
						Запись.Файл = ТекФайл;
					КонецЕсли;
					
					Запись.Автор = ПараметрыСеанса.ТекущийПользователь;
					Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;	
					Запись.Распознан = Ложь;
					Запись.Обработан = Ложь;				
					Запись.РаспознаватьЧерезFillin = Истина;			
					Запись.ДатаДобавления = ТекущаяДата();
					Запись.Записать();		 			
					
					ИмяФайла = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ТекФайл);
					ИмяФайлаДляРаспознавания = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознаванияОбъектаФилин(ТекФайл);
					Файл = Новый Файл(ИмяФайла);
					Если Файл.Существует() Тогда
						КопироватьФайл(ИмяФайла, ИмяФайлаДляРаспознавания);
					КонецЕсли;  			
				КонецЕсли;
			КонецЕсли;  			
		КонецЕсли;		
	КонецЕсли;
	//-- АК 08.10.2017 luza ИП-00016539

	
	//++ АК 15.12.2017 luza ИП-00017451
	  	
	//++АК luza 17.05.2018 закоментировал то что ниже
	//т.к. может вызывать блокиовке при длительном сравнении. Вынес в регламентное задание
	
	////при изменении документа, если он был привязан к распознанному и вер. файлу
	////необходимо провести повторное сравнение
	//Запрос = Новый Запрос;	
	//Запрос.Текст = "ВЫБРАТЬ
	//|	РезультатСравненияФайлаСОбъектом.Файл,
	//|	РезультатСравненияФайлаСОбъектом.ОбъектСравнения	
	//|ИЗ
	//|	РегистрСведений.РезультатСравненияФайлаСОбъектом КАК РезультатСравненияФайлаСОбъектом
	//|ГДЕ
	//|	РезультатСравненияФайлаСОбъектом.ОбъектСравнения = &ОбъектСравнения";
	//Запрос.УстановитьПараметр("ОбъектСравнения", ЭтотОбъект.Ссылка);
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//Для каждого Стр ИЗ ТЗ Цикл
	//	Попытка
	//		Справочники.АК_АлгоритмыРаспознаванияФайлов.СравнитьОбъектИФайл(Стр.Файл, Стр.ОбъектСравнения);
	//	Исключение
	//	КонецПопытки;	
	//КонецЦикла;	
	//-- АК 15.12.2017 luza ИП-00017451	
	
	Набор = РегистрыСведений.РезультатСравненияФайлаСОбъектом.СоздатьНаборЗаписей();
	Набор.Отбор.ОбъектСравнения.Установить(ЭтотОбъект.Ссылка);
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		Запись.Пересчитать = Истина;
	КонецЦикла;	
	
	Набор.Записать();

	//--АК luza 17.05.2018 
	//+++АК BELN 2018.07.13 ИП-00019174
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерСклад.НомерДокументаПоставщика,
		|	ПриходныйОрдерСклад.ДатаДокументаПоставщика,
		|	ПриходныйОрдерСклад.Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
		|ГДЕ
		|	ПриходныйОрдерСклад.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//+++АК BELN 2018.10.11 ИП-00020132
	ЗакрытПериодПоНДС = НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(ЭтотОбъект);
	//---АК BELN 2018.10.11 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерДокументаПоставщика<>НомерВходящегоДокумента ИЛИ ВыборкаДетальныеЗаписи.ДатаДокументаПоставщика<>ДатаВходящегоДокумента Тогда
			ОбПриходник=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбПриходник.НомерДокументаПоставщика=НомерВходящегоДокумента;
			ОбПриходник.ДатаДокументаПоставщика=ДатаВходящегоДокумента;
			//+++АК BELN 2018.10.11 ИП-00020132
			Если НЕ ЗакрытПериодПоНДС Тогда
				ОбПриходник.НеПроверятьДатуЗапретаРедактирования=Истина;
			КонецЕсли;
			//---АК BELN 2018.10.11 
			ОбПриходник.Записать();
		КонецЕсли; 
	КонецЦикла;
	

	
	//---АК BELN 2018.07.13 

	

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ПриходныеОрдера.Очистить();
	ЭтотОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		СтрокаТЧ.ПоПриходнымОрдерам = 0;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		СтрокаТЧ.ОсновноеСредство = Неопределено;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

//+++ АК bara  ИП-00015916.000.00000001
Процедура ОбработкаЗаполненияЭкспорт(ДанныеЗаполнения)Экспорт 

	ОбработкаЗаполнения(ДанныеЗаполнения,Истина);

КонецПроцедуры
//--- АК bara  ИП-00015916.000.00000001

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения;
		ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
		ЭтотОбъект.ДоговорКонтрагента 	= ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент,
												ТекущаяДата(), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ЭтотОбъект.СтруктурнаяЕдиница 	= ДанныеЗаполнения.ЦФО;
		ЭтотОбъект.СтатьяДДС 			= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		ЭтотОбъект.ВариантРасчетаНДС 	=
			?(ДанныеЗаполнения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		
		Если ДанныеЗаполнения.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ОпределитьСчетУчетаПоДокументуРасходИзБанка(ДанныеЗаполнения);
		КонецЕсли;
		//АК_БЕЛН_06.04.2016++
		Если ФлОборудование = Неопределено
				ИЛИ ФлОборудование = Ложь Тогда
			ЗаполнитьУслугиПоЗаявкеНаРасходованиеСредств(ДанныеЗаполнения);
			ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		Иначе	
			ЗаполнитьОборудованиеПоЗаявкеНаРасходованиеСредств(ДанныеЗаполнения);
			ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		КонецЕсли; 
		
	//АК_БЕЛН_06.04.2016++
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		
		//+++АК MIND 2018.01.28 добавляется статус Отменен в приходник, по нему нельзя заполнять ПТУ
		Если ДанныеЗаполнения.Отменен Тогда
			Сообщить("Документ " + ДанныеЗаполнения + " в статусе Отменен. По нему нельзя заполнять поступление товаров и услуг");
			Возврат;
		КонецЕсли;	
		//---АК MIND 
		
		ЭтотОбъект.Организация				= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Контрагент 				= ДанныеЗаполнения.Поставщик;
		ЭтотОбъект.ДоговорКонтрагента 		= ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент,
												ТекущаяДата(), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ЭтотОбъект.Склад					= ДанныеЗаполнения.Склад;
		ЭтотОбъект.СтруктурнаяЕдиница 		= ДанныеЗаполнения.Склад.Владелец;
		ЭтотОбъект.НомерВходящегоДокумента 	= ДанныеЗаполнения.НомерДокументаПоставщика;
		ЭтотОбъект.ДатаВходящегоДокумента 	= ДанныеЗаполнения.ДатаДокументаПоставщика;
		Если ЭтотОбъект.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЭтотОбъект.ВариантРасчетаНДС	= Перечисления.ВариантыРасчетаНДС.БезНДС;
		Иначе	
			ЭтотОбъект.ВариантРасчетаНДС	= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		КонецЕсли;	
		
		Если ЭтотОбъект.ПриходныеОрдера.Найти(ДанныеЗаполнения) = Неопределено Тогда 
			НовСтрОрдер = ЭтотОбъект.ПриходныеОрдера.Добавить();
			НовСтрОрдер.ПриходныйОрдер = ДанныеЗаполнения;
		КонецЕсли;
	
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
			ЭтотОбъект.Оборудование.Загрузить(ДанныеЗаполнения.Оборудование.Выгрузить());
			Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
				СтрокаТЧ.ИнвентарныйНомер =
						?(ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство), СтрокаТЧ.ОсновноеСредство.ИнвентарныйНомер, Неопределено);
						
				СчетУчета = АК_ОсновныеСредства.ПолучитьОсновнойСчетУчета(СтрокаТЧ.Номенклатура);
				СтрокаТЧ.СчетУчета = СчетУчета;
				УстановитьСчетаУчетаБУНУВСтроке(СтрокаТЧ);
			КонецЦикла;
			
		//+++АК LAGP 2018.01.23 ИП-00017719 Если вид операции "Постпуление от поставщика", тогда заполняет нужные статьи
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика И ДанныеЗаполнения.Склад = Справочники.Склады.НайтиПоНаименованию("Виртуальный склад поставщика") Тогда
			ЗаполнитьТоварыПоПриходномуОрдеру(ДанныеЗаполнения); //+++АК LAGP 2018.02.16 Добавлена строка заполнения ТЧ, без неё загружалось с пустой колонкой "По накладной".
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
			СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110");
			
			//+++АК SUVV 2018.02.28 ИП-00017941
			//НаборЗаписейСоответствияСтатейСчетов = РегистрыСведений.СоответствияСтатейСчетов.СоздатьНаборЗаписей();
			//НаборЗаписейСоответствияСтатейСчетов.Отбор.СтатьяДДС.Установить(СтатьяДДС);
			//НаборЗаписейСоответствияСтатейСчетов.Прочитать();
			//
			//Если НаборЗаписейСоответствияСтатейСчетов.Количество() > 0 Тогда		
			//	ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= НаборЗаписейСоответствияСтатейСчетов[0].Счет;
			//	ЭтотОбъект.СтатьяЗатрат 					= НаборЗаписейСоответствияСтатейСчетов[0].СтатьяДР;
			//	ЭтотОбъект.СтатьяДДС 						= СтатьяДДС;
			//КонецЕсли; 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
			|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
			|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
			|ИЗ
			|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &СтатьяДДС) КАК СоответствияСтатейСчетовСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияСтатейСчетов.Счет,
			|	СоответствияСтатейСчетов.СтатьяДР,
			|	СоответствияСтатейСчетов.СтатьяДДС
			|ИЗ
			|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
			|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
			|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";

			Запрос.УстановитьПараметр("ВыбДата", Дата);
			Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом 	= Выборка.Счет;
				ЭтотОбъект.СтатьяЗатрат 					= Выборка.СтатьяДР;
				ЭтотОбъект.СтатьяДДС 						= Выборка.СтатьяДДС;
			КонецЕсли;
			//---АК SUVV
		//---АК LAGP
					
		Иначе
			ЗаполнитьТоварыПоПриходномуОрдеру(ДанныеЗаполнения);
		КонецЕсли;		
		//+++  AK BARA #16097
		//Склад_Упаковка_Котляково = Справочники.Склады.НайтиПоНаименованию("Склад_Упаковка_Котляково");
		//Если ДанныеЗаполнения.Склад = Склад_Упаковка_Котляково и Склад_Упаковка_Котляково.Пустая() = Ложь Тогда
		//	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки;
		//	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120210");				
		//КонецЕсли;
		//---  AK BARA
		//+++AK obue 20160303
		
		//+++АК Susk (Суслин К.В.) 2018.08.02 ИП-00019041.02   
		//Заполним еще теперь Счет учета расчетов с контрагентом и статью ДДС по правилам определения счета и статьи.
		ЗаполнениеДокументов.ЗаполнитьСтатьюДДССчетУчетаРасчетовВОбъекте(ЭтотОбъект);
		//---АК Susk (Суслин К.В.) 
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") Тогда
		
		ЭтотОбъект.Организация			= ОбщиеПроцедуры.ПолучитьОрганизациюПоСтруктурнойЕдинице(ДанныеЗаполнения.Магазин);
		ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
		ЭтотОбъект.ДоговорКонтрагента 	= ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент,
												ТекущаяДата(), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);												
		//ЭтотОбъект.Склад					= ДанныеЗаполнения.Склад;
		ЭтотОбъект.АК_КомплектацияМагазинаПоСделкамСПоставщиком = ДанныеЗаполнения;
		ЭтотОбъект.ДокументОснование 	= ДанныеЗаполнения;
		ТекущаяСтруктурнаяЕдиница = ДанныеЗаполнения.Магазин;
		ЭтотОбъект.Комментарий 			= ТекущаяСтруктурнаяЕдиница.Наименование;
				
		ЭтотОбъект.ВидОперации 			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Комплектация Цикл
			ТекущаяНоменклатура = СтрокаТЧ.Номенклатура;
			ТекущаяСтавкаНДС 	= ТекущаяНоменклатура.СтавкаНДС;
			Для н = 1 по СтрокаТЧ.Количество Цикл
				НоваяСтрока = ЭтотОбъект.Оборудование.Добавить();
				НоваяСтрока.Номенклатура 	= ТекущаяНоменклатура;
				НоваяСтрока.СтавкаНДС 		= ТекущаяСтавкаНДС;
				НоваяСтрока.ТорговаяТочка 	= ТекущаяСтруктурнаяЕдиница;
				НоваяСтрока.Сделка = СтрокаТЧ.Сделка;
			КонецЦикла;
		КонецЦикла;
		
    //---AK obue
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		
		ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения;
		//+++ АК pozm ИП-00016503
		ЭтотОбъект.Заявка				= ДанныеЗаполнения;
		//--- АК pozm ИП-00016503
		ЭтотОбъект.Организация 			= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Контрагент 			= ДанныеЗаполнения.Контрагент;
		ЭтотОбъект.ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
		ЭтотОбъект.ВариантРасчетаНДС 	= ДанныеЗаполнения.ВариантРасчетаНДС;
				
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетов;
		ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		ЭтотОбъект.СтруктурнаяЕдиница	= ДанныеЗаполнения.ЦФО;
		ЭтотОбъект.СтатьяДДС 			= ДанныеЗаполнения.СтатьяДДС;			
		Если ФлОборудование = Неопределено
				ИЛИ ФлОборудование = Ложь Тогда
			ЗаполнитьУслугиПоОстаткамПоЗаявкеНаУслуги(ДанныеЗаполнения);
			ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		Иначе	
			ЗаполнитьОборудованиеПоЗаявкеНаУслуги(ДанныеЗаполнения);
			ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		КонецЕсли; 

		
        Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяЗатрат) Тогда
			//+++АК SUVV 2018.02.20 ИП-00017941
			//ЭтотОбъект.СтатьяЗатрат = АК_УчетМСФОПривилегированный.ПолучитьСтатьюСоответствия(ДанныеЗаполнения.СтатьяДДС);
			ЭтотОбъект.СтатьяЗатрат = АК_УчетМСФОПривилегированный.ПолучитьСтатьюСоответствия(ДанныеЗаполнения.Дата, ДанныеЗаполнения.СтатьяДДС);
			//---АК SUVV	
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетаУчетаБУНУВСтроке(СтрокаТЧ)

	Если СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств Тогда		
		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	//+++AK susk
	ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000 Тогда
		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
	//---AK susk
	ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда		
		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;		
	ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Финансовый.ОборудованиеДляМонтажа Тогда		
		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;		
	Иначе 
		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТЧ.СчетУчета.Код);
	КонецЕсли;
	
КонецПроцедуры	

//++АК tuga 22-9-16 #13456
Функция ЕстьЦеныВнеДиапазона()Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки,
	|	Товары.СуммаНДС,
	|	Товары.Количество,
	|	Товары.Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Номенклатура,
	|	Услуги.НомерСтроки,
	|	Услуги.СуммаНДС,
	|	Услуги.Количество,
	|	Услуги.Сумма
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	&Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &НДССверху
	|				ТОГДА (Товары.Сумма + Товары.СуммаНДС) / (Выбор Товары.Количество Когда 0 Тогда 1 Иначе Товары.Количество Конец)
	|			ИНАЧЕ Товары.Сумма / (Выбор Товары.Количество Когда 0 Тогда 1 Иначе Товары.Количество Конец)
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК Цена,
	|	""Товары"" КАК ИмяТЧ
	|ПОМЕСТИТЬ СтрокиДокумента
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Номенклатура,
	|	Услуги.НомерСтроки,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &НДССверху
	|				ТОГДА (Услуги.Сумма + Услуги.СуммаНДС) / (Выбор Услуги.Количество Когда 0 Тогда 1 Иначе Услуги.Количество Конец)
	|			ИНАЧЕ Услуги.Сумма / (Выбор Услуги.Количество Когда 0 Тогда 1 Иначе Услуги.Количество Конец)
	|		КОНЕЦ КАК ЧИСЛО(10, 2)),
	|	""Услуги""
	|ИЗ
	|	Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиДокумента.Номенклатура,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) - ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеМинус, 0) КАК ЦенаМин,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0) КАК ЦенаМакс,
	|	СтрокиДокумента.Цена,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.ИмяТЧ
	|ИЗ
	|	СтрокиДокумента КАК СтрокиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|				&Дата,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	//+++АК sils 04.07.2018 ИП-00019007
	//|						СтрокиДокумента КАК Т)) КАК ЦеныПоставщиковСрезПоследних
	//|		ПО СтрокиДокумента.Номенклатура = ЦеныПоставщиковСрезПоследних.Номенклатура
	|						СтрокиДокумента КАК Т) И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|		ПО СтрокиДокумента.Номенклатура = ЦеныПоставщиковСрезПоследних.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	|			МАКСИМУМ(ЦеныПоставщиковСрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|					&Дата,
	|					Номенклатура В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	|						СтрокиДокумента КАК Т)
	|						И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦеныПоставщиковСрезПоследних.Номенклатура) КАК ВТ_Дата
	|		ПО ЦеныПоставщиковСрезПоследних.Номенклатура = ВТ_Дата.Номенклатура
	|			И ЦеныПоставщиковСрезПоследних.Период = ВТ_Дата.Период
	//---АК
	|ГДЕ
	|	(СтрокиДокумента.Цена > ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0)
	|				И ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0) > 0
	|			ИЛИ СтрокиДокумента.Цена < ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) - ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеМинус, 0))";
	
	Запрос.УстановитьПараметр("Дата",ЭтотОбъект.Дата);
	//+++АК sils 04.07.2018 ИП-00019007
	Запрос.УстановитьПараметр("Поставщик", ЭтотОбъект.Контрагент);
	//---АК
	Запрос.УстановитьПараметр("Товары",ЭтотОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",ЭтотОбъект.Услуги.Выгрузить());
	Запрос.УстановитьПараметр("НДССверху",ЭтотОбъект.ВариантРасчетаНДС=Перечисления.ВариантыРасчетаНДС.НДСсверху);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=0 Тогда Возврат Ложь
	Иначе
		Пока Выборка.Следующий()Цикл
			Сообщить("В строке "+Выборка.НомерСтроки+" "+Выборка.ИмяТЧ+ " цена "+Формат(Выборка.Цена,"ЧДЦ=2; ЧН=")+" не соответствует установленному диапазону ["+Формат(Выборка.ЦенаМин,"ЧДЦ=2")+";"+Формат(Выборка.ЦенаМакс,"ЧДЦ=2")+"]");
		КонецЦикла;
		Возврат Истина
	КонецЕсли;
КонецФункции

#Область АК_ДвиженияФинансовыйТранспортныеУслуги
//+++АК SHEP 2018.04.19 ИП-00018423: проводки / движения делаем с 01.04.2018
Процедура ДвиженияФинансовыйТранспортныеУслуги_00018423(Отказ)
	
	мПроводки = ЭтотОбъект.Движения.Финансовый;
	мПроводки.Записывать = Истина;
	мПроводки.Очистить();
	
	СуммаНДС_ПоДокументам = 0;
	
	СтавкаНДС_БезНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	Для Каждого СтрокаТЧ_ТранспортныеДокументы Из ЭтотОбъект.ТранспортныеДокументы Цикл
		
		ДокументТранспортныхУслуг = СтрокаТЧ_ТранспортныеДокументы.Документ;
		
		// формируем движения без НДС, НДС формируем в общем по документу ПТУ
		Если ТипЗнч(ДокументТранспортныхУслуг) = Тип("ДокументСсылка.ДоставкаНаТТ") Тогда
			
			ДокументТранспортныхУслугОбъект = ДокументТранспортныхУслуг.ПолучитьОбъект();
			ДокументТранспортныхУслугОбъект.Организация = ЭтотОбъект.Организация; //+++АК SHEP 2018.05.15 ИП-00018669: меняем на тек. организацию
			
			// рассчитываем НДС
			ТекСуммаНДС = 0;
			ТекСтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ДокументТранспортныхУслугОбъект.СтавкаНДС);
			Если ТекСтавкаНДС <> 0 Тогда
				тзТорговыеТочки = ДокументТранспортныхУслугОбъект.Состав.Выгрузить();
				тзТорговыеТочки.Свернуть("ТТ, Ставка", "Количество");
				Для Каждого СтрокаТЧ Из тзТорговыеТочки Цикл
					ТекСумма = СтрокаТЧ.Ставка * СтрокаТЧ.Количество;
					Если ТекСумма = 0 Тогда	Продолжить;	КонецЕсли;
					ТекСуммаНДС = ТекСуммаНДС + Окр(ТекСумма * ТекСтавкаНДС / (100 + ТекСтавкаНДС), 2);
				КонецЦикла;
			КонецЕсли;
			
			// сумма НДС доп. тарифа
			ТекСуммаНДС = ТекСуммаНДС + Окр(ДокументТранспортныхУслугОбъект.СуммаДопТарифа * ТекСтавкаНДС / (100 + ТекСтавкаНДС), 2);
			
			СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам + ТекСуммаНДС;
			
			//ДокументТранспортныхУслугОбъект.СуммаДокумента = ДокументТранспортныхУслугОбъект.СуммаДокумента - ТекСуммаНДС;
			//ДокументТранспортныхУслугОбъект.СтавкаНДС = СтавкаНДС_БезНДС;
			Документы.ДоставкаНаТТ.ДвиженияФинансовыйЗаполнить(ДокументТранспортныхУслугОбъект, мПроводки, Отказ, Ложь);
			
		ИначеЕсли ТипЗнч(ДокументТранспортныхУслуг) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
			
			ДокументТранспортныхУслугОбъект = ДокументТранспортныхУслуг.ПолучитьОбъект();
			ДокументТранспортныхУслугОбъект.Организация = ЭтотОбъект.Организация; //+++АК SHEP 2018.05.15 ИП-00018669: меняем на тек. организацию
			ТекСуммаНДС = ДокументТранспортныхУслугОбъект.СуммаНДС;
			ДокументТранспортныхУслугОбъект.Сумма = ДокументТранспортныхУслугОбъект.Сумма - ТекСуммаНДС;
			СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам + ТекСуммаНДС;
			ДокументТранспортныхУслугОбъект.СуммаНДС = 0;
			ДокументТранспортныхУслугОбъект.СтавкаНДС = СтавкаНДС_БезНДС;
			ДокументТранспортныхУслугОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
			Документы.ОбщиеТранспортныеРасходы.ДвиженияВыполнить(ДокументТранспортныхУслугОбъект, мПроводки, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// в последнюю проводку пишем разницу по НДС
	ТекРазницаНДС = СуммаНДС_ПоДокументам - Услуги.Итог("СуммаНДС");
	Если ТекРазницаНДС <> 0 Тогда
		Проводка = мПроводки.Получить(мПроводки.Количество() - 1);
		Проводка.Сумма = Проводка.Сумма + ТекРазницаНДС;
	КонецЕсли;
	
	// НДС
	НастройкаОтраженияНДСПоУслугам 	=
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_УслугиПоступлениеТоваровИУслуг, ЭтотОбъект.Дата);
	
	Для Каждого ТекСтрокаУслуги Из ЭтотОбъект.Услуги Цикл
		
		СуммаНДСОтдельно = ТекСтрокаУслуги.СуммаНДС;
		Если СуммаНДСОтдельно = 0 Тогда Продолжить; КонецЕсли;
		
		Проводка = мПроводки.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.СчетДт 		= НастройкаОтраженияНДСПоУслугам.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.Организация);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, НастройкаОтраженияНДСПоУслугам.ДопРеквизит);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.СтавкаНДС);
		Проводка.НомерЖурнала			= "УС";
		Проводка.Содержание				= "НДС";
		
		Проводка.СчетКт 				=
			?(ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом), ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
		Если Проводка.СчетКт = ПланыСчетов.Финансовый.ОбеспечительныйВзнос
				ИЛИ Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыПоАренде Тогда
			Проводка.СубконтоКт.ТорговыеТочки = ЭтотОбъект.СтруктурнаяЕдиница;
		КонецЕсли;
		
		//Проводка.Организация 	= ЭтотОбъект.Организация;
		Проводка.Сумма 			= СуммаНДСОтдельно;
		
	КонецЦикла;
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(мПроводки, ЭтотОбъект.Организация);
	
КонецПроцедуры

//+++АК sole 2018.07.03 ИП-00018321.07
Процедура ДвиженияФинансовыйТранспортныеУслуги(Отказ)
	
	СписокМаршрутныхЛистов = Новый СписокЗначений();
	
	//+++АК sole 2018.07.18 ИП-00018321.09
	СписокМаршрутныхЛистовДовозПоПросьбеСклада = Новый СписокЗначений(); 
	//---АК sole 2018.07.18 ИП-00018321.09
	
	СписокОбщетранспортныхРасходов = Новый СписокЗначений();
	ЕстьОсновнаяПоставка = Ложь;
	
	//+++АК sole 2018.07.27 ИП-00018320.05
	Если ЭтотОбъект.ВидПеревозки <> Справочники.АК_ВидыПеревозки.ВозвратПоставщику Тогда
		
		Для Каждого Стр Из ЭтотОбъект.ТранспортныеДокументы Цикл	

			Если ТипЗнч(Стр["Документ"]) = Тип("ДокументСсылка.ДоставкаНаТТ") Тогда
				// Если в транспортных документах присутствует документ Доставка на ТТ
				// Передаём управление прежней процедуре формирования движений
				ДвиженияФинансовыйТранспортныеУслуги_00018423(Отказ);
				Возврат;
			КонецЕсли;
		
			Если ТипЗнч(Стр["Документ"]) = Тип("ДокументСсылка.МаршрутныйЛист") Тогда
			
				//+++АК sole 2018.07.18 ИП-00018321.09
				Если Стр["ПричинаПеревозки"] <> Перечисления.ПричиныПеревозки.ДовозПоПросьбеСклада Тогда
					СписокМаршрутныхЛистов.Добавить(Стр["Документ"]);
				Иначе
					СписокМаршрутныхЛистовДовозПоПросьбеСклада.Добавить(Стр["Документ"]);	
				КонецЕсли;
			
				Если ЕстьОсновнаяПоставка Тогда
					Продолжить;
				КонецЕсли;
			
				Если Стр["ПричинаПеревозки"] = Перечисления.ПричиныПеревозки.ОсновнаяПоставка Тогда
					ЕстьОсновнаяПоставка = Истина;	
				КонецЕсли;
			
				Продолжить;
				//---АК sole 2018.07.18 ИП-00018321.09
				
			КонецЕсли;
		
			Если ТипЗнч(Стр["Документ"]) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
				СписокОбщетранспортныхРасходов.Добавить(Стр["Документ"]);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	//---АК sole 2018.07.27 ИП-00018320.05
	
	мПроводки = ЭтотОбъект.Движения.Финансовый;
	мПроводки.Записывать = Истина;
	мПроводки.Очистить();
	
	//+++АК sole 2018.07.18 ИП-00018321.09
	БПР = СформироватьБлокПараметров(СписокМаршрутныхЛистов, СписокМаршрутныхЛистовДовозПоПросьбеСклада, СписокОбщетранспортныхРасходов, мПроводки, Отказ);
	
	//+++АК sole 2018.07.27 ИП-00018320.05
	Если ЭтотОбъект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ВозвратПоставщику Тогда
		ДвиженияФинансовыйТранспортныеУслугиВозвратПоставщику(БПР, Отказ);
		Возврат;
	КонецЕсли;
	//---АК sole 2018.07.27 ИП-00018320.05
	
	СформироватьСписокТТМаршрутныхЛистов(БПР);
		
	Если ЕстьОсновнаяПоставка Тогда
		
		СформироватьСтоимостьУслугПоДоставкеСИнтерваламиДат(БПР);
		СформироватьТаблицуСумм(БПР);
 		ВыделитьНДСИзТаблицыСумм(БПР);
		СформироватьДвиженияПоТаблицеСумм(БПР);
		
	Иначе
		
		//Любая дополнительная поставка кроме "ДовозПоПросьбеСклада"
		
		СформироватьТаблицуСуммДополнительнаяПоставка(БПР);
		ВыделитьНДСИзТаблицыСумм(БПР);	
		СформироватьДвиженияПоТаблицеСумм(БПР);
		
	КонецЕсли;
		
	Если СписокМаршрутныхЛистовДовозПоПросьбеСклада.Количество() <> 0 Тогда
			
		СформироватьТаблицуСуммДовозПоПросьбеСклада(БПР);
		ВыделитьНДСИзТаблицыСумм(БПР);
		СформироватьДвиженияПоТаблицеСуммДовозПоПросьбеСклада(БПР);
	
	КонецЕсли;
	//---АК sole 2018.07.18 ИП-00018321.09
	
	СФормироватьДвиженияПоОбщетранспортнымРасходам(БПР);
	СформироватьПроводкуПоНДС(БПР);
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(мПроводки, ЭтотОбъект.Организация);
	
	БПР.Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Отказ = БПР.Отказ;
	
КонецПроцедуры

//+++АК sole 2018.07.03 ИП-00018321.07
Функция СформироватьБлокПараметров(СписокМаршрутныхЛистов, СписокМаршрутныхЛистовДовозПоПросьбеСклада, СписокОбщетранспортныхРасходов, мПроводки, Отказ)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	БПР = Новый Структура();
	БПР.Вставить("Запрос", Запрос);
	БПР.Вставить("СписокМаршрутныхЛистов", СписокМаршрутныхЛистов);
	БПР.Вставить("СписокМаршрутныхЛистовДовозПоПросьбеСклада", СписокМаршрутныхЛистовДовозПоПросьбеСклада);
	//+++АК sole 2018.07.18 ИП-00018321.09
	БПР.Вставить("СписокОбщетранспортныхРасходов", СписокОбщетранспортныхРасходов);
	//---АК sole 2018.07.18 ИП-00018321.09
	БПР.Вставить("СуммаНДС_ПоДокументам", 0);
	БПР.Вставить("мПроводки", мПроводки);
	БПР.Вставить("Отказ", Отказ);
	
	Если ЭтотОбъект.Услуги.Количество() <> 0 Тогда
		Стр = ЭтотОбъект.Услуги[0];
		БПР.Вставить("СтавкаНДС", Стр.СтавкаНДС);
	Иначе
		БПР.Вставить("СтавкаНДС", ЭтотОбъект.Контрагент.СтавкаНДС);
	КонецЕсли;
	
	Возврат БПР;
	
КонецФункции

//+++АК sole 2018.07.03 ИП-00018321.07
Процедура СформироватьСписокТТМаршрутныхЛистов(БПР)
	
	Перем Запрос;
	
	Запрос = БПР.Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутныйЛистРасходныеОрдера.Ссылка КАК МаршрутныйЛист,
|	НАЧАЛОПЕРИОДА(МаршрутныйЛистРасходныеОрдера.Ссылка.Дата, День) КАК Дата,
|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель КАК ТТ,
|	МаршрутныйЛистРасходныеОрдера.Ссылка.СтруктурноеПодразделение КАК СтруктурнаяЕдиница,
|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
|	ВЫБОР
|		КОГДА ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.ПричинаПеревозки, ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
|			ТОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.ПричинаПеревозки
|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|	КОНЕЦ КАК ПричинаПеревозки
|
|		ПОМЕСТИТЬ втСписокТТМаршрутныхЛистов
|
|ИЗ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
|ГДЕ
|		МаршрутныйЛистРасходныеОрдера.Ссылка В (&СписокМаршрутныхЛистов)
|
|СГРУППИРОВАТЬ ПО
|	МаршрутныйЛистРасходныеОрдера.Ссылка,
|   МаршрутныйЛистРасходныеОрдера.Документ.Получатель
|";
	Запрос.УстановитьПараметр("СписокМаршрутныхЛистов", БПР.СписокМаршрутныхЛистов);
	Запрос.Выполнить();
	Запрос.Параметры.Очистить();
	
	//+++АК sole 2018.07.18 ИП-00018321.09
	Если БПР.СписокМаршрутныхЛистовДовозПоПросьбеСклада.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутныйЛистРасходныеОрдера.Ссылка КАК МаршрутныйЛист,
|	НАЧАЛОПЕРИОДА(МаршрутныйЛистРасходныеОрдера.Ссылка.Дата, День) КАК Дата,
|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель КАК ТТ,
|	МаршрутныйЛистРасходныеОрдера.Ссылка.СтруктурноеПодразделение КАК СтруктурнаяЕдиница,
|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут
|
|		ПОМЕСТИТЬ втСписокМаршрутныхЛистовДовозПоПросьбеСклада
|
|ИЗ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
|ГДЕ
|		МаршрутныйЛистРасходныеОрдера.Ссылка В (&СписокМаршрутныхЛистов)
|
|СГРУППИРОВАТЬ ПО
|	МаршрутныйЛистРасходныеОрдера.Ссылка,
|   МаршрутныйЛистРасходныеОрдера.Документ.Получатель
|";
	Запрос.УстановитьПараметр("СписокМаршрутныхЛистов", БПР.СписокМаршрутныхЛистовДовозПоПросьбеСклада);
	Запрос.Выполнить();
	Запрос.Параметры.Очистить();
	//---АК sole 2018.07.18 ИП-00018321.09
	
КонецПроцедуры

//+++АК sole 2018.07.03 ИП-00018321.07
Процедура СформироватьСтоимостьУслугПоДоставкеСИнтерваламиДат(БПР)
	
	Перем Запрос, тз, Инд, Стр;
	
	Запрос = БПР.Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	втСписокТТМаршрутныхЛистов.Маршрут
|
|		ПОМЕСТИТЬ втСписокМаршрутов
|
|ИЗ	втСписокТТМаршрутныхЛистов
|СГРУППИРОВАТЬ ПО втСписокТТМаршрутныхЛистов.Маршрут
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	0 КАК ИД,
|	0 КАК СледИД,
|	СтоимостьУслугПоДоставкеТовараНаТТ.Период,
|	СтоимостьУслугПоДоставкеТовараНаТТ.Маршрут,
|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ,
|	СтоимостьУслугПоДоставкеТовараНаТТ.Ставка,
|	СтоимостьУслугПоДоставкеТовараНаТТ.НаличиеДопТарифа,
|	СтоимостьУслугПоДоставкеТовараНаТТ.СтавкаДопТарифа
|
|ИЗ втСписокМаршрутов
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ КАК СтоимостьУслугПоДоставкеТовараНаТТ ПО 
|			СтоимостьУслугПоДоставкеТовараНаТТ.Маршрут = втСписокМаршрутов.Маршрут
|		
|
|УПОРЯДОЧИТЬ ПО
|	СтоимостьУслугПоДоставкеТовараНаТТ.Маршрут,
|	СтоимостьУслугПоДоставкеТовараНаТТ.ТТ,
|	СтоимостьУслугПоДоставкеТовараНаТТ.Период
|";
	тз = Запрос.Выполнить().Выгрузить();
	
	Инд = 1;
	
	Для Каждого Стр Из тз Цикл
		Стр["ИД"] = Инд;
		Инд = Инд + 1;
		Стр["СледИД"] = Инд;
	КонецЦикла;
	
	Запрос.Текст =
"ВЫБРАТЬ
|	т.ИД,
|	т.СледИД,
|	т.Маршрут,
|	т.ТТ,
|	т.Ставка,
|	т.НаличиеДопТарифа,
|	т.СтавкаДопТарифа,
|	т.Период
|
|		ПОМЕСТИТЬ втСтоимостьУслугПоДоставке
|
|ИЗ &Таблица КАК т
|;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втСтоимостьУслугПоДоставке.Маршрут,
|	втСтоимостьУслугПоДоставке.ТТ,
|	втСтоимостьУслугПоДоставке.Ставка,
|	втСтоимостьУслугПоДоставке.НаличиеДопТарифа,
|	втСтоимостьУслугПоДоставке.СтавкаДопТарифа,
|	втСтоимостьУслугПоДоставке.Период КАК ДатаС,
|	ЕСТЬNULL(втСтоимостьУслугПоДоставке2.Период, ДАТАВРЕМЯ(3099,12,31)) КАК ДатаДо
|
|		ПОМЕСТИТЬ втСтоимостьУслугПоДоставкеСИнтерваламиДат
|
|ИЗ втСтоимостьУслугПоДоставке
|	ЛЕВОЕ СОЕДИНЕНИЕ втСтоимостьУслугПоДоставке КАК втСтоимостьУслугПоДоставке2 ПО
|			втСтоимостьУслугПоДоставке2.ИД = втСтоимостьУслугПоДоставке.СледИД 
|  		И	втСтоимостьУслугПоДоставке2.Маршрут = втСтоимостьУслугПоДоставке.Маршрут
|  		И	втСтоимостьУслугПоДоставке2.ТТ = втСтоимостьУслугПоДоставке.ТТ
|
|ИНДЕКСИРОВАТЬ ПО
|	втСтоимостьУслугПоДоставке.Маршрут,
|	втСтоимостьУслугПоДоставке.ТТ
|;
|///////////////////////////////////////////////////////////
|УНИЧТОЖИТЬ втСтоимостьУслугПоДоставке;
|УНИЧТОЖИТЬ втСписокМаршрутов;
|";
	Запрос.УстановитьПараметр("Таблица", тз);	
	Запрос.Выполнить();
	Запрос.Параметры.Очистить();
	
КонецПроцедуры

//+++АК sole 2018.07.03 ИП-00018321.07
Процедура СформироватьТаблицуСумм(БПР)
	
	Перем Запрос;
	
	Запрос = БПР.Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	втСписокТТМаршрутныхЛистов.ТТ КАК СтруктурнаяЕдиница,
|	втСписокТТМаршрутныхЛистов.ПричинаПеревозки,
|	СУММА
|	(
|		ВЫБОР 
|			КОГДА втСписокТТМаршрутныхЛистов.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|				ТОГДА ЕСТЬNULL(СтоимостьДоставкиНаТТ.Ставка, 0)
|			ИНАЧЕ ЕСТЬNULL(ЦенаДопоставкиНаТТ.Сумма, 0)
|		КОНЕЦ
|	) КАК Сумма,
|
|   СУММА
|	(
|		ВЫБОР
|			КОГДА ЕСТЬNULL(СтоимостьДоставкиНаТТ.НаличиеДопТарифа, Ложь)
|				ТОГДА
|					ЕСТЬNULL(СтоимостьДоставкиНаТТ.СтавкаДопТарифа, 0)
|           ИНАЧЕ 0
|		КОНЕЦ
|   ) КАК СуммаДопТарифа
|
|ИЗ втСписокТТМаршрутныхЛистов
|   ЛЕВОЕ СОЕДИНЕНИЕ втСтоимостьУслугПоДоставкеСИнтерваламиДат КАК СтоимостьДоставкиНаТТ ПО
|			втСписокТТМаршрутныхЛистов.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|   	И	СтоимостьДоставкиНаТТ.Маршрут = втСписокТТМаршрутныхЛистов.Маршрут
|		И	СтоимостьДоставкиНаТТ.ТТ = втСписокТТМаршрутныхЛистов.ТТ
|		И	втСписокТТМаршрутныхЛистов.Дата >= СтоимостьДоставкиНаТТ.ДатаС
|		И   втСписокТТМаршрутныхЛистов.Дата < СтоимостьДоставкиНаТТ.ДатаДо
|
|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаДопоставкиНаТТ КАК ЦенаДопоставкиНаТТ ПО
|			втСписокТТМаршрутныхЛистов.ПричинаПеревозки <> ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|   	И	ЦенаДопоставкиНаТТ.Маршрут = втСписокТТМаршрутныхЛистов.Маршрут
|		И	ЦенаДопоставкиНаТТ.ТорговаяТочка = втСписокТТМаршрутныхЛистов.ТТ
|		И	ЦенаДопоставкиНаТТ.Дата = втСписокТТМаршрутныхЛистов.Дата 
|       И	ЦенаДопоставкиНаТТ.ПричинаПеревозки = втСписокТТМаршрутныхЛистов.ПричинаПеревозки
|
|СГРУППИРОВАТЬ ПО
|	втСписокТТМаршрутныхЛистов.ТТ, 
|	втСписокТТМаршрутныхЛистов.ПричинаПеревозки
|";
	тзСумм = Запрос.Выполнить().Выгрузить();
	БПР.Вставить("тзСумм", тзСумм);
	
КонецПроцедуры

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура СформироватьТаблицуСуммДовозПоПросьбеСклада(БПР)
	
	Перем Запрос;
	
	Запрос = БПР.Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	втСписокМаршрутныхЛистовДовозПоПросьбеСклада.СтруктурнаяЕдиница,
|	СУММА(ЕСТЬNULL(ЦенаДопоставкиНаТТ.Сумма, 0)) КАК Сумма,
|  	0 КАК СуммаДопТарифа
|
|ИЗ втСписокМаршрутныхЛистовДовозПоПросьбеСклада
|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаДопоставкиНаТТ КАК ЦенаДопоставкиНаТТ ПО
|   		ЦенаДопоставкиНаТТ.Маршрут = втСписокМаршрутныхЛистовДовозПоПросьбеСклада.Маршрут
|		И	ЦенаДопоставкиНаТТ.ТорговаяТочка = втСписокМаршрутныхЛистовДовозПоПросьбеСклада.ТТ
|		И	ЦенаДопоставкиНаТТ.Дата = втСписокМаршрутныхЛистовДовозПоПросьбеСклада.Дата 
|       И	ЦенаДопоставкиНаТТ.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ДовозПоПросьбеСклада)
|
|СГРУППИРОВАТЬ ПО втСписокМаршрутныхЛистовДовозПоПросьбеСклада.СтруктурнаяЕдиница
|";
	тзСумм = Запрос.Выполнить().Выгрузить();
	Запрос.Параметры.Очистить();
	
	БПР.Вставить("тзСумм", тзСумм);
		
КонецПроцедуры

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура СформироватьТаблицуСуммДополнительнаяПоставка(БПР)
	
	Перем Запрос;
	
	Запрос = БПР.Запрос;
	Запрос.Текст =
"ВЫБРАТЬ
|	втСписокТТМаршрутныхЛистов.ТТ КАК СтруктурнаяЕдиница,
|	втСписокТТМаршрутныхЛистов.ПричинаПеревозки,
|	СУММА(ЕСТЬNULL(ЦенаДопоставкиНаТТ.Сумма, 0)) КАК Сумма,
|  	0 КАК СуммаДопТарифа
|
|ИЗ втСписокТТМаршрутныхЛистов
|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаДопоставкиНаТТ КАК ЦенаДопоставкиНаТТ ПО
|   		ЦенаДопоставкиНаТТ.Маршрут = втСписокТТМаршрутныхЛистов.Маршрут
|		И	ЦенаДопоставкиНаТТ.ТорговаяТочка = втСписокТТМаршрутныхЛистов.ТТ
|		И	ЦенаДопоставкиНаТТ.Дата = втСписокТТМаршрутныхЛистов.Дата 
|       И	ЦенаДопоставкиНаТТ.ПричинаПеревозки = втСписокТТМаршрутныхЛистов.ПричинаПеревозки
|
|СГРУППИРОВАТЬ ПО 
|	втСписокТТМаршрутныхЛистов.ТТ,
|	втСписокТТМаршрутныхЛистов.ПричинаПеревозки
|";
	тзСумм = Запрос.Выполнить().Выгрузить();
	
	БПР.Вставить("тзСумм", тзСумм);
	
КонецПроцедуры

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура ВыделитьНДСИзТаблицыСумм(БПР)
	
	Перем чСтавкаНДС, кНДС, тзСумм, СуммаНДС_ПоДокументам;
	
	чСтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(БПР.СтавкаНДС);
	
	Если чСтавкаНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тзСумм = БПР.тзСумм;
	
	кНДС = чСтавкаНДС / (100 + чСтавкаНДС);
	
	СуммаНДС_ПоДокументам = БПР.СуммаНДС_ПоДокументам;
	
	Для Каждого Стр Из тзСумм Цикл
		
		ТекСуммаНДС = Окр(кНДС * Стр["Сумма"], 2); 
		Стр["Сумма"] = Стр["Сумма"] - ТекСуммаНДС;
		СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам + ТекСуммаНДС;
		
		Если Стр["СуммаДопТарифа"] = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ТекСуммаНДС = Окр(кНДС * Стр["СуммаДопТарифа"], 2); 
		Стр["СуммаДопТарифа"] = Стр["СуммаДопТарифа"] - ТекСуммаНДС;
		СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам + ТекСуммаНДС;
		
	КонецЦикла;
	
	БПР.СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам;
	
КонецПроцедуры

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура СформироватьДвиженияПоТаблицеСумм(БПР)
	
	Перем мПроводки, мПроводка, тзСумм, СуммаДопТарифа, Счет604;
	
	мПроводки = БПР.мПроводки;
	тзСумм = БПР.тзСумм;
	
	Счет604 = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете
		(
			Перечисления.ВидыОперацийВУчете.ТранспортныеРасходыПоДоставкеНаТочку, 
			ЭтотОбъект.Дата
		);
		
	Если ЗначениеЗаполнено(СтруктураНастроек.ЦФО) Тогда
		ЦФО = СтруктураНастроек.ЦФО;	
		ПолучатьЦФО = Ложь;	
	Иначе
		ПолучатьЦФО = Истина;		
	КонецЕсли;	
	
	СуммаДопТарифа = 0;
		
	Для Каждого Стр Из тзСумм Цикл
		
		Если ПолучатьЦФО Тогда
			ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Стр["СтруктурнаяЕдиница"], ЭтотОбъект.Дата);
		КонецЕсли;
		
		мПроводка = мПроводки.Добавить();
		
		мПроводка.Период = ЭтотОбъект.Дата;
		
		мПроводка.Сумма	= Стр["Сумма"];
		
		Содержание = "Транспортные расходы по доставке на точку";
		
		Пока Истина Цикл
			
			Если Стр["ПричинаПеревозки"] = Перечисления.ПричиныПеревозки.ОсновнаяПоставка Тогда
				Содержание = Содержание + " (Основная поставка)";	
				Прервать;	
			КонецЕсли;
			
			Если Стр["ПричинаПеревозки"] = Перечисления.ПричиныПеревозки.ДовозПоПросьбеМагазина Тогда
				Содержание = Содержание + " (Довоз по просьбе магазина)";	
				Прервать;
			КонецЕсли;
			
			Если Стр["ПричинаПеревозки"] = Перечисления.ПричиныПеревозки.ИззаПеревозчика Тогда
				Содержание = Содержание + " (Из-за перевозчика)";	
				Прервать;
			КонецЕсли;
			
			Если Стр["ПричинаПеревозки"] = Перечисления.ПричиныПеревозки.ИззаПоставщика Тогда
				Содержание = Содержание + " (Из-за поставщика)";	
				Прервать;
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
		
		
		мПроводка.Содержание = Содержание;
			
		// Дт
		мПроводка.СчетДт = СтруктураНастроек.Счет;
		Попытка
			мПроводка.СубконтоДт.ТорговыеТочки = Стр["СтруктурнаяЕдиница"];
			мПроводка.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
			мПроводка.СубконтоДт.ЦФО = ЦФО;
		Исключение
		КонецПопытки;
			
		// Кт
		мПроводка.СчетКт = Счет604;
		мПроводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		мПроводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
		
		СуммаДопТарифа = СуммаДопТарифа + Стр["СуммаДопТарифа"];
	КонецЦикла;
	
	Если СуммаДопТарифа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекДопТариф = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете
		(
			Перечисления.ВидыОперацийВУчете.ТранспортныеРасходыПоДоставкеНаТочкуДопТариф, 
			ЭтотОбъект.Дата
		);
		
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекДопТариф.Счет) Тогда
		Возврат;
	КонецЕсли;
	
	мПроводка = мПроводки.Добавить();
	мПроводка.Период = ЭтотОбъект.Дата;
	
	мПроводка.Сумма = СуммаДопТарифа;
	мПроводка.Содержание = "Транспортные расходы по доставке на точку (доп. тариф)";
			
	// Дт
	мПроводка.СчетДт = СтруктураНастроекДопТариф.Счет;
	мПроводка.СубконтоДт.ТорговыеТочки = СтруктураНастроекДопТариф.СтруктурнаяЕдиница;
	мПроводка.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроекДопТариф.СтатьяДоходовРасходов;
	мПроводка.СубконтоДт.ЦФО = СтруктураНастроекДопТариф.ЦФО;
			
	// Кт
	мПроводка.СчетКт = Счет604;
	мПроводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
	мПроводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
	
КонецПроцедуры	//СформироватьДвиженияПоТаблицеСумм(БПР)

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура СформироватьДвиженияПоТаблицеСуммДовозПоПросьбеСклада(БПР)
	
	Перем мПроводки, мПроводка, тзСумм, Счет604;
	
	мПроводки = БПР.мПроводки;
	тзСумм = БПР.тзСумм;
	
	Счет604 = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете
		(
			Перечисления.ВидыОперацийВУчете.ТранспортныеРасходыПоДоставкеНаТочку, 
			ЭтотОбъект.Дата
		);
		
	Для Каждого Стр Из тзСумм Цикл
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Стр["СтруктурнаяЕдиница"], ЭтотОбъект.Дата);
		
		мПроводка = мПроводки.Добавить();
		
		мПроводка.Период = ЭтотОбъект.Дата;
		
		мПроводка.Сумма	= Стр["Сумма"];
		мПроводка.Содержание = "Транспортные расходы по доставке на точку (довоз по просьбе склада)";
			
		// Дт
		мПроводка.СчетДт = СтруктураНастроек.Счет;
		Попытка
			мПроводка.СубконтоДт.СтатьиДоходовРасходов = СтруктураНастроек.СтатьяДоходовРасходов;
			мПроводка.СубконтоДт.ЦФО = ЦФО;
		Исключение
		КонецПопытки;
			
		// Кт
		мПроводка.СчетКт = Счет604;
		мПроводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		мПроводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
		
	КонецЦикла;
	
КонецПроцедуры	//СформироватьДвиженияПоТаблицеСуммДовозПоПросьбеСклада(БПР)

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура СФормироватьДвиженияПоОбщетранспортнымРасходам(БПР)
	
	Перем СписокОбщетранспортныхРасходов, СуммаНДС_ПоДокументам, СтавкаНДС_БезНДС, ВариантРасчетаНДС_БезНДС;
	
	Если БПР.СписокОбщетранспортныхРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбщетранспортныхРасходов = БПР.СписокОбщетранспортныхРасходов;
	СуммаНДС_ПоДокументам = БПР.СуммаНДС_ПоДокументам;
	
	СтавкаНДС_БезНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
	ВариантРасчетаНДС_БезНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
	
	Для Каждого Элем Из СписокОбщетранспортныхРасходов Цикл
		
		ДокументТранспортныхУслугОбъект = Элем.Значение.ПолучитьОбъект();
		ДокументТранспортныхУслугОбъект.Организация = ЭтотОбъект.Организация;
		ТекСуммаНДС = ДокументТранспортныхУслугОбъект.СуммаНДС;
		ДокументТранспортныхУслугОбъект.Сумма = ДокументТранспортныхУслугОбъект.Сумма - ТекСуммаНДС;
		СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам + ТекСуммаНДС;
		ДокументТранспортныхУслугОбъект.СуммаНДС = 0;
		ДокументТранспортныхУслугОбъект.СтавкаНДС = СтавкаНДС_БезНДС;
		ДокументТранспортныхУслугОбъект.ВариантРасчетаНДС = ВариантРасчетаНДС_БезНДС;
		Документы.ОбщиеТранспортныеРасходы.ДвиженияВыполнить(ДокументТранспортныхУслугОбъект, БПР.мПроводки, БПР.Отказ);
	КонецЦикла;
	
	БПР.СуммаНДС_ПоДокументам = СуммаНДС_ПоДокументам;
	
КонецПроцедуры

//+++АК sole 2018.07.04 ИП-00018321.07
Процедура СформироватьПроводкуПоНДС(БПР)
	
	Перем мПроводки, Проводка, ТекРазницаНДС, СуммаНДСОтдельно;
	
	мПроводки = БПР.мПроводки;
	
	// в последнюю проводку пишем разницу по НДС
	ТекРазницаНДС = БПР.СуммаНДС_ПоДокументам - Услуги.Итог("СуммаНДС");
	Если ТекРазницаНДС <> 0 Тогда
		Проводка = мПроводки.Получить(мПроводки.Количество() - 1);
		Проводка.Сумма = Проводка.Сумма + ТекРазницаНДС;
	КонецЕсли;
	
	НастройкаОтраженияНДСПоУслугам 	= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете
		(
			Перечисления.ВидыОперацийВУчете.НДС_УслугиПоступлениеТоваровИУслуг, 
			ЭтотОбъект.Дата
		);
	
	Для Каждого ТекСтрокаУслуги Из ЭтотОбъект.Услуги Цикл
		
		СуммаНДСОтдельно = ТекСтрокаУслуги.СуммаНДС;
		
		Если СуммаНДСОтдельно = 0 Тогда 
			Продолжить; 
		КонецЕсли;
		
		Проводка = мПроводки.Добавить();
		Проводка.Период	= ЭтотОбъект.Дата;
		Проводка.СчетДт	= НастройкаОтраженияНДСПоУслугам.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.Организация);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, НастройкаОтраженияНДСПоУслугам.ДопРеквизит);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.СтавкаНДС);
		Проводка.НомерЖурнала = "УС";
		Проводка.Содержание	= "НДС";
		
		Проводка.СчетКт = 
			?(
				ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом), 
				ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом, 
				ПланыСчетов.Финансовый.РасчетыСПоставщиками
			);
		
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
		
		Если 
				Проводка.СчетКт = ПланыСчетов.Финансовый.ОбеспечительныйВзнос
			ИЛИ Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыПоАренде
			
		Тогда
			Проводка.СубконтоКт.ТорговыеТочки = ЭтотОбъект.СтруктурнаяЕдиница;
		КонецЕсли;
		
		Проводка.Сумма = СуммаНДСОтдельно;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.07.27 ИП-00018320.05
Процедура ДвиженияФинансовыйТранспортныеУслугиВозвратПоставщику(БПР, Отказ)
	
	Перем чСумма, мПроводка, чСтавкаНДС, кНДС, ТекСуммаНДС;
	Перем Счет443, Счет604, ВсеТорговыеТочки, ТранспортныеКомпании, ОбщиеТранспортныеРасходы;
	
	чСумма = ЭтотОбъект.ТранспортныеДокументы.Итог("СуммаДокумента");
	
	чСтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(БПР.СтавкаНДС);
	
	Если чСтавкаНДС <> 0 Тогда
		
		кНДС = чСтавкаНДС / (100 + чСтавкаНДС);
		ТекСуммаНДС = Окр(кНДС * чСумма, 2); 
		чСумма = чСумма - ТекСуммаНДС;
		БПР.СуммаНДС_ПоДокументам = ТекСуммаНДС;
		
	КонецЕсли;
	
	
	ВсеТорговыеТочки = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	ТранспортныеКомпании = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_101");
	ОбщиеТранспортныеРасходы = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("32031");
	
	Счет443 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	Счет604 = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
	
	мПроводка = БПР.мПроводки.Добавить();
	
	мПроводка.Период = ЭтотОбъект.Дата;
	мПроводка.Сумма = чСумма;
	мПроводка.Содержание = "Дополнительные транспортные услуги";
			
	// Дт
	мПроводка.СчетДт = Счет443;
	мПроводка.СубконтоДт.ТорговыеТочки = ВсеТорговыеТочки;
	мПроводка.СубконтоДт.СтатьиДоходовРасходов = ОбщиеТранспортныеРасходы;
	мПроводка.СубконтоДт.ЦФО = ТранспортныеКомпании;
			
	// Кт
	мПроводка.СчетКт = Счет604;
	мПроводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
	мПроводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
	
	СформироватьПроводкуПоНДС(БПР);
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(БПР.мПроводки, ЭтотОбъект.Организация);
	
КонецПроцедуры 

#КонецОбласти

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ЕстьМатериалыВУслугах = Ложь;
		
	НеПроверятьСклад = ЭтотОбъект.Товары.Количество() = 0
						И (ЭтотОбъект.Услуги.Количество() > 0
							ИЛИ ЭтотОбъект.Оборудование.Количество() > 0);
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		Если СтрокаТЧ.ТорговаяТочка.Пустая() Тогда
			НеПроверятьСклад = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		Если СтрокаТЧ.ТорговаяТочка.Пустая() Тогда
			НеПроверятьСклад = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьМатериалыВУслугах
			И ЭтотОбъект.Склад.Пустая()
			И НЕ НеПроверятьСклад Тогда
		Сообщить("Не заполнен склад! Проведение невозможно.");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокДействия)
			И ДоговорКонтрагента.СрокДействия < ЭтотОбъект.Дата Тогда
		Сообщить("Договор не действует! Проведение невозможно.");
		Отказ = Истина;
	КонецЕсли;
	
	//+++АК Susk (Суслин К.В.) 2018.01.17 ИП-00017530
	Если ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорКонтрагента.Организация Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ);

	КонецЕсли;
	//---АК Susk (Суслин К.В.) 	 
	
	//+++АК SHEP 2018.01.25 ИП-00017365.02: по транспортным услугам проводки / движения не делаем
	Если ТранспортныеУслуги Тогда
		//+++АК SHEP 2018.04.19 ИП-00018423: проводки / движения делаем с 01.04.2018
		Если Дата >= Дата(2018, 4, 1) Тогда
			ДвиженияФинансовыйТранспортныеУслуги(Отказ);
		КонецЕсли;
		Возврат;
		//---АК SHEP 2018.04.19
	КонецЕсли;
	//---АК SHEP 2018.01.25
	
	//+++AK susk
	
	//ПроверитьДублиПриходников(Отказ);
	
	//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055	 
	//Если НЕ НеПроверятьПриходныеОрдера Тогда
	Если НЕ НеПроверятьПриходныеОрдера И НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА Тогда
	//---АК Susk (Суслин К.В.) 
		ПроверитьДублиПриходников(Отказ);
	КонецЕсли;
	
	//---AK susk
	
	//+++AK susk
	// проверка - если нет приходников, то в таблице оборудование обязательно должны быть точки с типом "Розница"
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование И ПриходныеОрдера.Количество() = 0 Тогда
		ПроверитьТТОборудованияНаТипРозница(Отказ);
		ПроверитьТТОборудованияПоСтатьямЗатрат(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// служ. таблицы
	МВТ = Новый МенеджерВременныхТаблиц;
	Номенклатура = ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура");
	ТаблицаСпецификаций 			= Документы.ПоступлениеТоваровУслуг.ПолучитьСпецификации(ЭтотОбъект.Дата, Номенклатура, ЭтотОбъект.Контрагент,ЭтотОбъект.СтруктурнаяЕдиница, ЭтотОбъект.МоментВремени(), МВТ);
	ТаблицаСпецификацийКомплектов	= Документы.ПоступлениеТоваровУслуг.ПолучитьСпецификацииКомплектов(ЭтотОбъект.Дата, Номенклатура, ЭтотОбъект.Контрагент, МВТ);
	ТаблицаТоваровДляСторнирования 	= Документы.ПоступлениеТоваровУслуг.ПолучитьТаблицуТоваровДляСторнированияНаценки(ТаблицаСпецификаций, ЭтотОбъект.Контрагент, ЭтотОбъект.Дата);
	
	Если НЕ ЭтотОбъект.Дата < '20131114' Тогда
		
		мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
		Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
				И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
				И НЕ мНеПроверять Тогда			
			
			мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ДокументОснование, "СтатьяДвиженияДенежныхСредств"));
			
			Если ЗначениеЗаполнено(мСтатьяДР) Тогда
				Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
					Если СтрокаТЧ.Субконто2 = мСтатьяДР
							ИЛИ НЕ ТипЗнч(СтрокаТЧ.Субконто2) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
						Продолжить;
					КонецЕсли;
                    Сообщить("В строке №" + СтрокаТЧ.НомерСтроки + " услуг указана статья, не соответствующая заявке на расходование средств!");
					Отказ = Истина;
				КонецЦикла;
			КонецЕсли;
			Если Отказ Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		НастройкаОтраженияНДСПоТоварам = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, Дата);
		
		Если ЭтотОбъект.ПриходныеОрдера.Количество() > 0 Тогда 
			
			//+++АК sole 2018.07.05 ИП-00018320
			СуммаПретензияКПеревозчику = 0;
			//---АК sole 2018.07.05 ИП-00018320
			
			// Получим дату начала начисления претензий
			ДатаНачалаНачисленияПретензий = Константы.ДатаНачалаНачисленияПретензийПоставщикам.Получить();
			
			// Новая схема проведения
			Движения.Финансовый.Записывать = Истина;
			Движения.Финансовый.Очистить();
			
			Движения.АналогУпаковкиУПереработчика.Записывать = Истина;
			Движения.АналогУпаковкиУПереработчика.Очистить();
			
			СуммаВключаетНДС = (ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
			
			//+++shae 2018.08.30 ИП-00019212 
			СтруктураНастроекОтражениеНДСПоТоварамБезНДС 	= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтражениеНДСПоТоварамБезНДС, Дата);
			СтруктураНастроекПоступление_Излишки 			= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Поступление_Излишки, Дата);
			СтруктураНастроекПоступление_Недостачи 			= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Поступление_Недостачи, Дата);
			СтавкаНДСПриОтгрузкеБезНДС  					= ОбщегоНазначенияСервер.ПолучитьСтавкуНДСПриОтгрузкеБезНДС(Дата);
			ЦФО 											= ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Дата);
			ТаблицаТавары = ПолучитьТаблицуТовары();
			
			Для Каждого ТекСтрокаТовары Из ТаблицаТавары Цикл 
			//---shae 2018.08.30 ИП-00019212  			
			//Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл  //shae 2018.08.30 ИП-00019212 закомментировано	 
				
				//Если ТекСтрокаТовары.Количество > 0 Тогда
				
				//+++АК sole 2018.07.05 ИП-00018320
				Если ТекСтрокаТовары.КоличествоПретензияКПеревозчику <> 0 Тогда
					
					чСумма = Окр(ТекСтрокаТовары.КоличествоПретензияКПеревозчику * ТекСтрокаТовары.Цена, 2);
					
					СуммаПретензияКПеревозчику = СуммаПретензияКПеревозчику + чСумма;
				//+++АК sole 2018.08.16 ИП-00019566^01
					чСумма = ТекСтрокаТовары.Сумма - чСумма;
					чСуммаНДС = УчетНДС.РассчитатьСуммуНДС
						(
							чСумма,
							Истина,
							СуммаВключаетНДС,
							УчетНДС.ПолучитьСтавкуНДС(ТекСтрокаТовары.СтавкаНДС)
						);
				Иначе
					чСумма = ТекСтрокаТовары.Сумма;
					чСуммаНДС = ТекСтрокаТовары.СуммаНДС;
				//---АК sole 2018.08.16 ИП-00019566^01
				КонецЕсли;
				//---АК sole 2018.07.05 ИП-00018320

				СуммаВсего = 0;
				СуммаНДСОтдельно = 0;
				
				Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
					Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
						СуммаВсего = чСумма - чСуммаНДС;
					Иначе
						СуммаВсего = чСумма;
					КонецЕсли;
					СуммаНДСОтдельно = чСуммаНДС;
				Иначе	
					Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
						СуммаВсего = чСумма;
					Иначе
						СуммаВсего = чСумма + чСуммаНДС;
					КонецЕсли;
				КонецЕсли;					
				
				Проводка = Движения.Финансовый.Добавить();
				
				Проводка.Период 	 = ЭтотОбъект.Дата;
				Проводка.Организация = ЭтотОбъект.Организация;
				
				Проводка.СчетДт = ТекСтрокаТовары.СчетУчета;
				//+++АК sole 2018.08.15 ИП-00019566
				//Проводка.КоличествоДт = ТекСтрокаТовары.Количество
				Проводка.КоличествоДт = ТекСтрокаТовары.Количество - ТекСтрокаТовары.КоличествоПретензияКПеревозчику;
				//---АК sole 2018.08.15 ИП-00019566
				
				ТекНоменклатура	= ТекСтрокаТовары.Номенклатура;
				
				Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
					Проводка.СубконтоДт.МестаХранения  	= ЭтотОбъект.СтруктурнаяЕдиница;
					Проводка.СубконтоДт.Товары			= ТекНоменклатура;
					Проводка.СубконтоДт.СтатьиТовародвижения = ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.НомерЖурнала			= "ТД";
					Проводка.Содержание				= "Покупка товара";
				ИначеЕсли ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
					Проводка.СубконтоДт.Склады		 		= ЭтотОбъект.Склад;
					Проводка.СубконтоДт.Материалы			= ТекНоменклатура;
					Проводка.СубконтоДт.СтатьиТовародвижения = ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.КоличествоДт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
					Проводка.НомерЖурнала			= "МВ";
					Проводка.Содержание				= "Покупка материалов"; 					
				Иначе
					Проводка.СубконтоДт.Материалы			= ТекНоменклатура;
					Проводка.КоличествоДт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
					Проводка.НомерЖурнала			= "МВ";
					Проводка.Содержание				= "Покупка";
				КонецЕсли;			
				 
				Проводка.СчетКт 			= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;				
				
				Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
			
				Проводка.Организация 			= ЭтотОбъект.Организация;
				
				Проводка.Сумма 					= СуммаВсего;
				
				//отдельная проводка по НДС при включенной новой системе
				Если СуммаНДСОтдельно <> 0 Тогда
					
					Проводка = Движения.Финансовый.Добавить();
				
					Проводка.Период = ЭтотОбъект.Дата;
					Проводка.Организация = ЭтотОбъект.Организация;
					Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
					
					
					Проводка.СубконтоДт.Организации  	= ЭтотОбъект.Организация;
					Проводка.СубконтоДт.ВидыНалогов		= НастройкаОтраженияНДСПоТоварам.ДопРеквизит;
					Проводка.СубконтоДт.СтавкиНДС		= ТекСтрокаТовары.СтавкаНДС;
					
					Проводка.СчетКт 			= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;				
					
					Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
					Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;					
					
					Проводка.Сумма 					= СуммаНДСОтдельно;					
										
				КонецЕсли;	
				
				Если ЭтотОбъект.Дата >= '20131201' Тогда
					
					//
					// ДВИЖЕНИЯ СЕБЕСТОИМОСТЬ СЫРЬЯ И УПАКОВКИ ПО СПЕЦИФИКАЦИИ
					Если ТаблицаСпецификаций.Количество() > 0 Тогда
						Документы.ПоступлениеТоваровУслуг.ДобавитьДвиженияПоСебестоимостиСырьяИУпаковки(Движения, Ссылка, ТекСтрокаТовары, ТаблицаСпецификаций);
					КонецЕсли;
					
					Если ТаблицаСпецификацийКомплектов.Количество() > 0 Тогда
						Документы.ПоступлениеТоваровУслуг.ДобавитьДвиженияПоСебестоимостиСырьяИУпаковкиКомплектов(Движения, Ссылка, ТекСтрокаТовары, ТаблицаСпецификацийКомплектов);
					КонецЕсли;
					
					//
					// СТОРНО НАЦЕНКИ НА СЕБЕСТОИМОСТЬ СЫРЬЯ И УПАКОВКИ ПО СПЕЦИФИКАЦИИ
					Если ТаблицаСпецификаций.Количество() > 0 Тогда
						Документы.ПоступлениеТоваровУслуг.ДобавитьДвиженияСторноНаценкиНаСебестоимостьСырьяИУпаковки(Движения, Ссылка, ТекСтрокаТовары, ТаблицаТоваровДляСторнирования);	
					КонецЕсли;
					
					//
					// ДВИЖЕНИЯ ПО ТОВАРАМ БЕЗ НДС
					Если ТекСтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда  
						ОтразитьДвиженияПоТоварамНеОблагающимсяНДС(СуммаВсего, ТекСтрокаТовары, СтруктураНастроекОтражениеНДСПоТоварамБезНДС, СтавкаНДСПриОтгрузкеБезНДС);
					КонецЕсли;                 
					
					// ПО ТИПУ ТОВАРА ПРОДУКЦИЯ, ИЗЛИШКИ И НЕДОСТАЧИ НЕ ОТРАЖАЕМ
					Если ТекСтрокаТовары.ТипТовара <> Перечисления.ТипыТоваров.Продукция Тогда 
						
						// Если Дата документа больше ДатаНачалаНачисленияПретензий, и претензия не складу, тогда проводки по складу не нужны.
						// Ниже будут движения по Поставщику (ОтразитьДвиженияПоПретензиямПоставщикам())
						Если ЗначениеЗаполнено(ДатаНачалаНачисленияПретензий)
								И ЭтотОбъект.Дата >= ДатаНачалаНачисленияПретензий
								И ТекСтрокаТовары.КоличествоПретензияКСкладу = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						// С учетом старых документов
						
						//+++АК sole 2018.07.05 ИП-00018320
						//РазницаВКоличестве = ?(ТекСтрокаТовары.КоличествоПретензияКСкладу <> 0,
						//						ТекСтрокаТовары.КоличествоПретензияКСкладу,
						//						ТекСтрокаТовары.Количество - ТекСтрокаТовары.ПоПриходнымОрдерам);
						
						РазницаВКоличестве = ?(ТекСтрокаТовары.КоличествоПретензияКСкладу <> 0,
												ТекСтрокаТовары.КоличествоПретензияКСкладу,
												ТекСтрокаТовары.Количество - ТекСтрокаТовары.ПоПриходнымОрдерам - ТекСтрокаТовары.КоличествоПретензияКПеревозчику);
						
						
						//---АК sole 2018.07.05 ИП-00018320
						
						//
						// ОТРАЖЕНИЕ НЕДОСТАЧ
						//Если ТекСтрокаТовары.Количество > ТекСтрокаТовары.ПоПриходнымОрдерам Тогда
						Если РазницаВКоличестве > 0 Тогда
							ОтразитьДвиженияПоНедостачамТоваров(ТекСтрокаТовары, СуммаВсего, РазницаВКоличестве, СтруктураНастроекПоступление_Излишки, ЦФО);
						КонецЕсли;
						
						//
						// ОТРАЖЕНИЕ ИЗЛИШКОВ
						//Если ТекСтрокаТовары.Количество < ТекСтрокаТовары.ПоПриходнымОрдерам Тогда
						Если РазницаВКоличестве < 0 Тогда
							ОтразитьДвиженияПоИзлишкамТоваров(ТекСтрокаТовары, СуммаВсего, -РазницаВКоличестве, СтруктураНастроекПоступление_Недостачи, ЦФО);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
					
				//КонецЕсли;
				
			КонецЦикла;
			
			// НЕДОСТАЧИ, ИЗЛИШКИ ЗА СЧЕТ ПОСТАВЩИКА
			Если ЗначениеЗаполнено(ДатаНачалаНачисленияПретензий)
				И ЭтотОбъект.Дата >= ДатаНачалаНачисленияПретензий Тогда
				ОтразитьДвиженияПоПретензиямПоставщикам();
			КонецЕсли;
			
			//+++АК sole 2018.07.05 ИП-00018320
			Если СуммаПретензияКПеревозчику <> 0 Тогда
				ОтразитьДвиженияПоПретензииПеревозчикам(СуммаПретензияКПеревозчику);
			КонецЕсли;
			//---АК sole 2018.07.05 ИП-00018320
		
		Иначе
			
			// Старая схема проведения
			Движения.Финансовый.Записывать = Истина;
			Движения.Финансовый.Очистить();
			
			Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
				
				СуммаВсего 			= 0;
				СуммаНДСОтдельно 	= 0;
				Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
					Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
						СуммаВсего 	= ТекСтрокаТовары.Сумма - ТекСтрокаТовары.СуммаНДС;
					Иначе
						СуммаВсего 	= ТекСтрокаТовары.Сумма;
					КонецЕсли;
					СуммаНДСОтдельно = ТекСтрокаТовары.СуммаНДС;
				Иначе	
					Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
						СуммаВсего 	= ТекСтрокаТовары.Сумма;
					Иначе
						СуммаВсего 	= ТекСтрокаТовары.Сумма + ТекСтрокаТовары.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Организация	= ЭтотОбъект.Организация;
				Проводка.Период = ЭтотОбъект.Дата;
				Проводка.СчетДт = ТекСтрокаТовары.СчетУчета;
				ТекНоменклатура = ТекСтрокаТовары.Номенклатура;
				
				Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
					Проводка.СубконтоДт.МестаХранения  	= ЭтотОбъект.СтруктурнаяЕдиница;
					Проводка.СубконтоДт.Товары			= ТекНоменклатура;
					Проводка.СубконтоДт.СтатьиТовародвижения = ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.НомерЖурнала			= "ТД";
					Проводка.Содержание				= "Покупка товара";
				ИначеЕсли ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
					//Проводка.СубконтоДт.Контрагенты		 	= Контрагент;
					Проводка.СубконтоДт.Склады		= ЭтотОбъект.Склад;
					Проводка.СубконтоДт.Материалы	= ТекНоменклатура;
					Проводка.СубконтоДт.СтатьиТовародвижения = ТекСтрокаТовары.СтатьяТовародвижения;
					Проводка.КоличествоДт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
					Проводка.НомерЖурнала			= "МВ";
					Проводка.Содержание				= "Покупка материалов";
				ИначеЕсли ТекСтрокаТовары.СчетУчета 	= ПланыСчетов.Финансовый.КапитальныеВложения Тогда
					Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("").Ссылка;//НаПриобретениеОборудованияТорговыхТочек;
					Проводка.НомерЖурнала			= "КВ";
					Проводка.Содержание				= "Покупка оборудования";
				Иначе
					Проводка.СубконтоДт.Материалы	= ТекНоменклатура;
				КонецЕсли;
				Проводка.СчетКт 				= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
				Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
				
				//Проводка.Организация 			= ЭтотОбъект.Организация;
				Проводка.Сумма = СуммаВсего;
				
				//отдельная проводка по НДС при включенной новой системе
				Если СуммаНДСОтдельно <> 0 Тогда
					Проводка = Движения.Финансовый.Добавить();
				
					Проводка.Период = ЭтотОбъект.Дата;
					Проводка.Организация = ЭтотОбъект.Организация;
					Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
					
					Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
					Проводка.СубконтоДт.ВидыНалогов	= НастройкаОтраженияНДСПоТоварам.ДопРеквизит;
					Проводка.СубконтоДт.СтавкиНДС	= ТекСтрокаТовары.СтавкаНДС;
					
					Проводка.СчетКт 				= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;	
						
					Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
					Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
					
					//Проводка.Организация 			= ЭтотОбъект.Организация;
					Проводка.Сумма 					= СуммаНДСОтдельно;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе	
		
		// Старая схема проведения
		Движения.Финансовый.Записывать = Истина;
		Движения.Финансовый.Очистить();
		
		Для Каждого ТекСтрокаТовары Из ЭтотОбъект.Товары Цикл
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Организация	= ЭтотОбъект.Организация;
			Проводка.Период = ЭтотОбъект.Дата;
			Проводка.СчетДт = ТекСтрокаТовары.СчетУчета;
			ТекНоменклатура = ТекСтрокаТовары.Номенклатура;
			
			Если ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
				Проводка.СубконтоДт.МестаХранения  			= ЭтотОбъект.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.Товары					= ТекНоменклатура;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
				Проводка.НомерЖурнала			= "ТД";
				Проводка.Содержание				= "Покупка товара";
			ИначеЕсли ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
				//Проводка.СубконтоДт.Контрагенты		 	= Контрагент;
				Проводка.СубконтоДт.Склады		 			= ЭтотОбъект.Склад;
				Проводка.СубконтоДт.Материалы				= ТекНоменклатура;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= ТекСтрокаТовары.СтатьяТовародвижения;
				Проводка.КоличествоДт			= ТекСтрокаТовары.Количество * ТекСтрокаТовары.Коэффициент;
				Проводка.НомерЖурнала			= "МВ";
				Проводка.Содержание				= "Покупка материалов";
			ИначеЕсли ТекСтрокаТовары.СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения Тогда
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("").Ссылка;//НаПриобретениеОборудованияТорговыхТочек;
				Проводка.НомерЖурнала			= "КВ";
				Проводка.Содержание				= "Покупка оборудования";
			КонецЕсли;
			Проводка.СчетКт 		= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
			
			Проводка.Организация 	= ЭтотОбъект.Организация;
			Проводка.Сумма 			= ТекСтрокаТовары.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	// РЕГИСТР НАКОПЛЕНИЯ "ТОВАРЫ НА СКЛАДАХ"
	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.ТоварыНаСкладах.Очистить();
	ДвиженияТоварыНаСкладах(Отказ, РежимПроведения, ТаблицаСпецификаций);
	ДвиженияТоварыНаСкладах(Отказ, РежимПроведения, ТаблицаСпецификацийКомплектов);
	
	// Услуги
	ДвиженияФинансовый = ЭтотОбъект.Движения.Финансовый;
	
	Счет08 	= ПланыСчетов.Финансовый.КапитальныеВложения;
	Счет681 = ПланыСчетов.Финансовый.НалогиСФОТ;
	мАмортизацияИнвестицийВТТ 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("61010");
	мУправлениеИсполнительное 	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18");
	мСтрЕдиницаРезерв			= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_100");
	мВидНалогаНДФЛ 				= Справочники.ВидыНалогов.НайтиПоКоду("000000010");     // НДФЛ
	
	НастройкаОтраженияНДСПоУслугам 	=
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_УслугиПоступлениеТоваровИУслуг	, ЭтотОбъект.Дата);
	НастройкаОтраженияНДФЛПоУслугам =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДФЛ_ПоступлениеУслуг				, ЭтотОбъект.Дата);
	
	мИтСумма = ЭтотОбъект.Услуги.Итог("Сумма");
	Для Каждого ТекСтрокаУслуги Из ЭтотОбъект.Услуги Цикл
		
		СуммаВсего 			= 0;
		СуммаНДСОтдельно 	= 0;
		ТекСуммаНДФЛ 		= 0;
		
		ЭтоСчет44 = (ТекСтрокаУслуги.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения));
		
		Если НЕ ЭтотОбъект.ПроизвестиУплатуНДФЛ Тогда
			Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
				Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаУслуги.Сумма - ТекСтрокаУслуги.СуммаНДС;
				Иначе
					СуммаВсего = ТекСтрокаУслуги.Сумма;
				КонецЕсли;
				СуммаНДСОтдельно = ТекСтрокаУслуги.СуммаНДС;
			Иначе	
				Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
					СуммаВсего = ТекСтрокаУслуги.Сумма;
				Иначе
					СуммаВсего = ТекСтрокаУслуги.Сумма + ТекСтрокаУслуги.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекСуммаНДФЛ = ?(НЕ мИтСумма = 0, Окр(ЭтотОбъект.СуммаНДФЛ * ТекСтрокаУслуги.Сумма / мИтСумма, 2), 0);
			СуммаВсего = ТекСтрокаУслуги.Сумма - ТекСуммаНДФЛ;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ТекСтрокаУслуги.СчетЗатрат) И ТекСтрокаУслуги.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы)
				И ТекСтрокаУслуги.СчетЗатрат <> ПланыСчетов.Финансовый.Инвентарь
				И ТекСтрокаУслуги.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			ЭтоМатериал = Истина;
		Иначе 
			ЭтоМатериал = Ложь;	
		КонецЕсли;	
			
		Проводка = ДвиженияФинансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.СчетДт 		= ТекСтрокаУслуги.СчетЗатрат;
		Проводка.Организация	= ЭтотОбъект.Организация;
		
		Если НЕ ЭтоМатериал Тогда 
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаУслуги.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекСтрокаУслуги.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.Субконто3);
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаУслуги.Номенклатура) Тогда
				Сообщить("Для учета материалов поле номенклатура должно быть заполнено");
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаУслуги.Номенклатура.ЭтоГруппа) Тогда
				Сообщить("Не допускается выбор группы: " + ТекСтрокаУслуги.Номенклатура);
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСтрокаУслуги.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЭтотОбъект.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика);
			
			Проводка.КоличествоДт = ТекСтрокаУслуги.Количество;
			
		КонецЕсли;	
		
			
		Проводка.НомерЖурнала			= "УС";			
		Проводка.Содержание				= ?(ЭтоМатериал, "Поступление материалов", "Поступление услуг");
		
		Проводка.СчетКт 				=
			?(ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом), ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
		Если Проводка.СчетКт = ПланыСчетов.Финансовый.ОбеспечительныйВзнос
				ИЛИ Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыПоАренде Тогда
			Проводка.СубконтоКт.ТорговыеТочки = ЭтотОбъект.СтруктурнаяЕдиница;
		КонецЕсли;
		
		//Проводка.Организация 	= ЭтотОбъект.Организация;
		Проводка.Сумма 			= СуммаВсего;
				
		АК_УчетМСФО.ВыделитьДвиженияПрошлогоГода(Движения.Финансовый,Проводка,ДатаВходящегоДокумента,ЭтотОбъект.Дата); 

		//отдельная проводка по НДС при включенной новой системе
		Если НЕ ЭтотОбъект.ПроизвестиУплатуНДФЛ Тогда
			Если НЕ СуммаНДСОтдельно = 0 Тогда
				Проводка = ДвиженияФинансовый.Добавить();
				Проводка.Период 		= ЭтотОбъект.Дата;
				Проводка.Организация	= ЭтотОбъект.Организация;
				Проводка.СчетДт 		= НастройкаОтраженияНДСПоУслугам.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЭтотОбъект.Организация);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, НастройкаОтраженияНДСПоУслугам.ДопРеквизит);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСтрокаУслуги.СтавкаНДС);
				Проводка.НомерЖурнала			= "УС";
				Проводка.Содержание				= "НДС";
				
				Проводка.СчетКт 				=
					?(ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом), ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Финансовый.РасчетыСПоставщиками);
				Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
				Если Проводка.СчетКт = ПланыСчетов.Финансовый.ОбеспечительныйВзнос
						ИЛИ Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыПоАренде Тогда
					Проводка.СубконтоКт.ТорговыеТочки = ЭтотОбъект.СтруктурнаяЕдиница;
				КонецЕсли;				
				
				Проводка.Сумма 			= СуммаНДСОтдельно;

			КонецЕсли;
		Иначе
			Если НЕ ТекСуммаНДФЛ = 0 Тогда
				Проводка = ДвиженияФинансовый.Добавить();
				Проводка.Период 		= ЭтотОбъект.Дата;
				Проводка.Организация	= ЭтотОбъект.Организация;
				Проводка.СчетДт 		= НастройкаОтраженияНДФЛПоУслугам.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, НастройкаОтраженияНДФЛПоУслугам.СтруктурнаяЕдиница);

				Если Дата < Дата("20171101") Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, НастройкаОтраженияНДФЛПоУслугам.СтатьяДоходовРасходов);
				ИначеЕсли ЗначениеЗаполнено(СтатьяЗатрат) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, НастройкаОтраженияНДФЛПоУслугам.СтатьяДоходовРасходов);
				КонецЕсли;
				//---АК
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, НастройкаОтраженияНДФЛПоУслугам.ЦФО);
				Проводка.СчетКт 		= Счет681;
				Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
				Проводка.СубконтоКт.ВидыНалогов = мВидНалогаНДФЛ;
				Проводка.Сумма 			= ТекСуммаНДФЛ;
				Проводка.Содержание		= "НДФЛ";
			КонецЕсли;
		КонецЕсли;
		
		мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
		Если ТекСтрокаУслуги.СчетЗатрат = Счет08
				И (НЕ ЗначениеЗаполнено(ТекСтрокаУслуги.Субконто2)
			 		ИЛИ Оборудование_УжеСписано(ТекСтрокаУслуги.Субконто2))
				И ЭтотОбъект.Дата >= мДатаНовогоУчетаСчетовОС
				И НЕ ТекСтрокаУслуги.ТорговаяТочка = мСтрЕдиницаРезерв Тогда
				
			// 21.02.17 koro ИП-00015003 Не прогоняем через 01. На 01 остаются только объекты ОС
			
			Если АК_ОсновныеСредства.УчетМСФО(ЭтотОбъект.Дата) Тогда
					
				//Дт44.3-Кт01
				Проводка = ДвиженияФинансовый.ДобавитьДебет();
				Проводка.Период							= ЭтотОбъект.Дата;
				Проводка.Сумма							= СуммаВсего;
				Проводка.Организация					= ЭтотОбъект.Организация;
				
				
				СтатьяДР = СтатьяЗатрат;
				Если не ЗначениеЗаполнено(СтатьяДР) Тогда
					//+++АК SUVV 2018.02.28 ИП-00017941
					//СтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ТекСтрокаУслуги.Субконто1);
					СтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(Дата, ТекСтрокаУслуги.Субконто1);
					//---АК SUVV
				КонецЕсли;	
				Если не ЗначениеЗаполнено(СтатьяДР) Тогда
					СтатьяДР = ПолучитьСтатьюДР(ТекСтрокаУслуги.Субконто1);
				КонецЕсли;	
				Если не ЗначениеЗаполнено(СтатьяДР) Тогда
					СтатьяДР = мАмортизацияИнвестицийВТТ;
				КонецЕсли;			
				
				//Если ЭтоНоваяТорговаяТочка(ТекСтрокаУслуги.ТорговаяТочка,НачалоМесяца(ЭтотОбъект.Дата)) Тогда
				//	Проводка.СчетДт = ПланыСчетов.Финансовый.НайтиПоКоду("44.5");

				//Иначе 	
				Проводка.СчетДт								= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
				//КонецЕсли;	
				Проводка.СубконтоДт.СтатьиДоходовРасходов 	= СтатьяДР;	
				//mind 2015-01-27
				Если ЗначениеЗаполнено(ТекСтрокаУслуги.ТорговаяТочка)
						И НЕ ТекСтрокаУслуги.ТорговаяТочка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
					Проводка.СубконтоДт.ТорговыеТочки		= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
				Иначе
					Проводка.СубконтоДт.ТорговыеТочки		= ТекСтрокаУслуги.ТорговаяТочка;
				КонецЕсли;	
				
				Проводка.СубконтоДт.ЦФО						= мУправлениеИсполнительное;//ТекСтрокаУслуги.Субконто3;
				
				Проводка.СчетКт							= ПланыСчетов.Финансовый.КапитальныеВложения;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаУслуги.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаУслуги.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаУслуги.Субконто3);
				
               	АК_УчетМСФО.ВыделитьДвиженияПрошлогоГода(Движения.Финансовый,Проводка,ДатаВходящегоДокумента,ЭтотОбъект.Дата); 

			Иначе
				
				//Дт01-Кт08
				Проводка = ДвиженияФинансовый.ДобавитьДебет();
				Проводка.Период							= ЭтотОбъект.Дата;
				Проводка.Организация					= ЭтотОбъект.Организация;
				Проводка.Сумма							= СуммаВсего;
				
				Проводка.СчетДт							= ПланыСчетов.Финансовый.Инвестиции;
				Проводка.СубконтоДт.ТорговыеТочки		= ТекСтрокаУслуги.ТорговаяТочка;
				
				Проводка.СчетКт							= ПланыСчетов.Финансовый.КапитальныеВложения;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСтрокаУслуги.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрокаУслуги.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСтрокаУслуги.Субконто3);
				
				//Дт44.3-Кт01
				Проводка = ДвиженияФинансовый.ДобавитьДебет();
				Проводка.Период							= ЭтотОбъект.Дата;
				Проводка.Организация					= ЭтотОбъект.Организация;
				Проводка.Сумма							= СуммаВсего;
				
				Проводка.СчетДт								= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
				//mind 2015-01-27
				Если ЗначениеЗаполнено(ТекСтрокаУслуги.ТорговаяТочка)
						И НЕ ТекСтрокаУслуги.ТорговаяТочка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
					Проводка.СубконтоДт.ТорговыеТочки		= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
				Иначе
					Проводка.СубконтоДт.ТорговыеТочки		= ТекСтрокаУслуги.ТорговаяТочка;
				КонецЕсли;	
				Проводка.СубконтоДт.СтатьиДоходовРасходов 	= мАмортизацияИнвестицийВТТ;//ТекСтрокаУслуги.Субконто1;
				Проводка.СубконтоДт.ЦФО						= мУправлениеИсполнительное;//ТекСтрокаУслуги.Субконто3;
				
				Проводка.СчетКт							= ПланыСчетов.Финансовый.Инвестиции;
				Проводка.СубконтоКт.ТорговыеТочки		= ТекСтрокаУслуги.ТорговаяТочка;
				
			КонецЕсли;	
				
		КонецЕсли;
		
	КонецЦикла;
	
	//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055
	ДвиженияНМА(Отказ);
	//---АК Susk (Суслин К.В.) 	 
	
	//Сдвинем границу последовательности себестоимости
	ПроверитьИСместитьГраницу();
	
	//Оборудование
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Если Оборудование_РеквизитыЗаполнены(НеПроверятьСклад)
				И Оборудование_ДублиНоменклатурыОтсутствуют() Тогда
			Если Оборудование_СоздатьИсправитьОсновныеСредства() Тогда
				
				Оборудование_ВыполнитьДвижения(Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И ЭтотОбъект.ПриходныеОрдера.Количество() > 0 Тогда
		ТекИнициатор = ЭтотОбъект.ПриходныеОрдера[0].ПриходныйОрдер.Автор.ФизЛицо;
		Если ЗначениеЗаполнено(ТекИнициатор)
				И НЕ ЭтотОбъект.ДокументОснование.ИнициаторЗаявки = ТекИнициатор Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДокОснованиеОб = ЭтотОбъект.ДокументОснование.ПолучитьОбъект();
			ДокОснованиеОб.ОбменДанными.Загрузка 	= Истина;
			ДокОснованиеОб.ИнициаторЗаявки 			= ТекИнициатор;
			ДокОснованиеОб.МенятьСтатусы			= Ложь;
			ДокОснованиеОб.Записать(РежимЗаписиДокумента.Запись);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.Дата < ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("АК_ГраницаОтказаОтКомплектовНа41Счете") Тогда
		//теперь выполним необходимые движения с комплектами:
		//оприходованные комплектующие спишем,
		//сами комплекты оприходуем, так как склад ведет учет по комплектам
		ВыполнитьДвиженияПоРаскладываемымКомплектам();
	КонецЕсли;	
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый, ЭтотОбъект.Организация);
	
	//+++АК pozm 01.05.2017
	Если Не Отказ Тогда
		ВыполнитьДвиженияПоТМЦКПоступлению();
	КонецЕсли;	
	//---АК pozm 01.05.2017
	
	//+++АК pozm 09.06.2017
	Если ЭтотОбъект.ДоговорКонтрагента.РасчетыЧерезФК Тогда
		Проводка = ДвиженияФинансовый.Добавить();
		Проводка.Период 		= ЭтотОбъект.Дата;
		Проводка.Организация = ЭтотОбъект.Организация;
		Проводка.СчетДт 				=
			?(ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом), ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
		
		
		Проводка.СчетКт 				= ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчикамиФакторинг ;
		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
		Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.ДоговорКонтрагента.ФакторинговаяКомпания;
		//+++АК POZM 2018.03.15 ИП-00018101
		Если ЭтотОбъект.Дата>=Дата(2018,3,1) Тогда
			Проводка.СубконтоКт.Договоры = ЭтотОбъект.ДоговорКонтрагента.ФакторинговаяКомпанияДоговор;
		КонецЕсли;	
		//---АК POZM 
				
		Проводка.Содержание				= "Взаимозачет с факторинговой компанией";
						
		//Проводка.Организация 	= ЭтотОбъект.Организация;
		Проводка.Сумма 			= ЭтотОбъект.СуммаДокумента;
		
		//АК_УчетМСФО.КорректироватьПериодДвиженияМСФО(Движения.Финансовый,Проводка,ДатаВходящегоДокумента,ЭтотОбъект.Дата,ДатаОтраженияМСФО,Отказ); 

	КонецЕсли;
	//---АК pozm 09.06.2017
	
	//+++АК pozm 26.06.2017
	ЗакрытьАвансыПоЗаймам();
	//---АК pozm 26.06.2017
	
	АК_УчетМСФО.ОткорректироватьДвиженияДокументаМСФО(Движения.Финансовый, Дата, ДатаВходящегоДокумента, ДатаОтраженияМСФО);//+++АК VERT 2018.03.15 ИП-00017883
	
	//+++АК pozm 11.08.2017 ИП-00016297
	ВыполнитьДвиженияВРасчетыПоСделкам();
	//---АК pozm 11.08.2017 ИП-00016297
	
	//+++АК POZM 2017.11.22 ИП-00017139
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ПроводитьВЗакрытомПериоде") И ЭтотОбъект.ДополнительныеСвойства.ПроводитьВЗакрытомПериоде Тогда
		ЭтотОбъект.Движения.Финансовый.ДополнительныеСвойства.Вставить("ПроводитьВЗакрытомПериоде",Истина);
	КонецЕсли;	
	//---АК POZM 
КонецПроцедуры

//+++АК pozm 11.08.2017 ИП-00016297
Процедура ВыполнитьДвиженияВРасчетыПоСделкам()
	ТекстЗапроса="ВЫБРАТЬ
	             |	РасчетыПоСделкамСПоставщиками.Сделка,
	             |	РасчетыПоСделкамСПоставщиками.УИН_Этапа,
	             |	РасчетыПоСделкамСПоставщиками.Комплектация,
	             |	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации,
	             |	РасчетыПоСделкамСПоставщиками.ДатаПлатежа,
	             |	РасчетыПоСделкамСПоставщиками.Сумма / ПредпоступлениеПоКомплектацииТовары.Количество КАК Сумма
	             |ИЗ
	             |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	             |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ЭтапыСделки КАК СделкаСПоставщикомЭтапыСделки
	             |					ПО (СделкаСПоставщикомЭтапыСделки.НомерСтроки = СделкаСПоставщикомГрафикОплат.НомерСтрокиГрафика)
	             |						И (СделкаСПоставщикомЭтапыСделки.Ссылка = СделкаСПоставщикомГрафикОплат.Ссылка)
	             |				ПО РасчетыПоСделкамСПоставщиками.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	             |					И РасчетыПоСделкамСПоставщиками.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	             |			ПО (РасчетыПоСделкамСПоставщиками.Регистратор = ПредпоступлениеПоКомплектацииТовары.Ссылка)
	             |				И (РасчетыПоСделкамСПоставщиками.Комплектация = ПредпоступлениеПоКомплектацииТовары.Ссылка)
	             |				И (РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации = ПредпоступлениеПоКомплектацииТовары.УИН_Строки)
	             |				И (РасчетыПоСделкамСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	             |		ПО ПоступлениеТоваровУслугОборудование.Сделка = ПредпоступлениеПоКомплектацииТовары.Сделка
	             |			И ПоступлениеТоваровУслугОборудование.Предпоступление = ПредпоступлениеПоКомплектацииТовары.Ссылка
	             |			И ПоступлениеТоваровУслугОборудование.Номенклатура = ПредпоступлениеПоКомплектацииТовары.Номенклатура
	             |ГДЕ
	             |	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	             |	И ПредпоступлениеПоКомплектацииТовары.Ссылка.Дата >= &ДатаНачалаНовогоУчета
	             |	И СделкаСПоставщикомЭтапыСделки.ВариантОплаты <> ЗНАЧЕНИЕ(Перечисление.ВариантыОплаты.ВУказаннуюДату)";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаНовогоУчета",Дата(2017,8,14));
	
	ДвиженияПоСделкам = Движения.РасчетыПоСделкамСПоставщиками;
	ДвиженияПоСделкам.Записывать = Истина;
	ДвиженияПоСделкам.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НД = ДвиженияПоСделкам.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(НД,Выборка);
		НД.Период = ЭтотОбъект.Дата;
		НД = ДвиженияПоСделкам.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(НД,Выборка,"Сделка,ДатаПлатежа,Сумма");
		НД.Комплектация = ЭтотОбъект.Ссылка;
		НД.Период = ЭтотОбъект.Дата;
	КонецЦикла;
	
КонецПроцедуры	
//+++АК pozm 11.08.2017 ИП-00016297

Процедура ЗакрытьАвансыПоЗаймам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	АвансыПоРасчетамСКонтрагентами.Сделка,
	               |	АвансыПоРасчетамСКонтрагентами.Сумма,
	               |	АвансыПоРасчетамСКонтрагентами.Сделка.ЗаймПроцентПогашенияОтСуммыПоставки КАК Процент,
	               |	ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка,
	               |	NULL КАК Ссылка
	               |ПОМЕСТИТЬ Выборка
	               |ИЗ
	               |	РегистрСведений.АвансыПоРасчетамСКонтрагентами КАК АвансыПоРасчетамСКонтрагентами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	               |		ПО АвансыПоРасчетамСКонтрагентами.Сделка = ЗаявкаНаУслугиМатериалыОплата.Ссылка
	               |			И (ЗаявкаНаУслугиМатериалыОплата.НомерСтроки = 1)
	               |ГДЕ
	               |	АвансыПоРасчетамСКонтрагентами.Организация = &Организация
	               |	И АвансыПоРасчетамСКонтрагентами.Контрагент = &Контрагент
	               |	И АвансыПоРасчетамСКонтрагентами.СчетУчета = &СчетУчета
	               |	И АвансыПоРасчетамСКонтрагентами.Сделка ССЫЛКА Документ.ЗаявкаНаУслугиМатериалы
	               |	И АвансыПоРасчетамСКонтрагентами.Сделка <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	               |	И АвансыПоРасчетамСКонтрагентами.Сделка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику)
	               |	И АвансыПоРасчетамСКонтрагентами.Сделка.ЗаймТипПогашенияЧастями = 0
	               |	И АвансыПоРасчетамСКонтрагентами.Сделка.ЗаймПроцентПогашенияОтСуммыПоставки <> 0
	               |	И ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Оплачено
	               |	И ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Проведен
	               |	И ЗаявкаНаУслугиМатериалыОплата.Ссылка.ЗаймПериодДействияНачало <= &ДатаДок
	               |	И ЗаявкаНаУслугиМатериалыОплата.Ссылка.ЗаймПериодДействияКонец >= &ДатаДок
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаявкаНаУслугиМатериалыОплата.Ссылка,
	               |	КорректировкаВзаиморасчетовДокументы.Сумма,
	               |	ЗаявкаНаУслугиМатериалыОплата.Ссылка.ЗаймПроцентПогашенияОтСуммыПоставки,
	               |	ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка,
	               |	КорректировкаВзаиморасчетовДокументы.Ссылка
	               |ИЗ
	               |	Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаВзаиморасчетов.Документы КАК КорректировкаВзаиморасчетовДокументы
	               |		ПО ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка = КорректировкаВзаиморасчетовДокументы.Документ
	               |			И (ЗаявкаНаУслугиМатериалыОплата.НомерСтроки = 1)
	               |ГДЕ
	               |	ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Оплачено
	               |	И ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Проведен
	               |	И КорректировкаВзаиморасчетовДокументы.Документ = &Поступление
	               |	И КорректировкаВзаиморасчетовДокументы.Ссылка.Проведен
	               |	И ЗаявкаНаУслугиМатериалыОплата.Ссылка.ЗаймПериодДействияНачало <= &ДатаДок
	               |	И ЗаявкаНаУслугиМатериалыОплата.Ссылка.ЗаймПериодДействияКонец >= &ДатаДок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Выборка.Сделка,
	               |	СУММА(Выборка.Сумма) КАК Сумма,
	               |	Выборка.Процент,
	               |	Выборка.РасходИзБанка,
	               |	МАКСИМУМ(Выборка.Ссылка) КАК Корректировка
	               |ИЗ
	               |	Выборка КАК Выборка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выборка.Сделка,
	               |	Выборка.Процент,
	               |	Выборка.РасходИзБанка";
	Запрос = Новый 	Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация",ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Поступление",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент",ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("Заявка",ЭтотОбъект.ДокументОснование);
	Запрос.УстановитьПараметр("ДатаДок",ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("СчетУчета",ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не ЗначениеЗаполнено(Выборка.Корректировка) Тогда
			Док = Документы.КорректировкаВзаиморасчетов.СоздатьДокумент();
		Иначе
			Док = Выборка.Корректировка.ПолучитьОбъект();
			Док.Документы.Очистить();
		КонецЕсли;	
		Док.Дата=ЭтотОбъект.Дата;
		Док.Организация = ЭтотОбъект.Организация;
		Док.Контрагент = ЭтотОбъект.Контрагент;
		Док.ВидОперации = Перечисления.ВидыОперацийКорректировкиВзаиморасчетов.ЗакрытиеЗайма;
		НС = Док.Документы.Добавить();
		НС.Документ = Выборка.РасходИзБанка;
		НС.Сумма = ?(ЭтотОбъект.СуммаДокумента*Выборка.Процент/100>=Выборка.Сумма,Выборка.Сумма,ЭтотОбъект.СуммаДокумента*Выборка.Процент/100);
		НС.СчетНаСписание = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		НС.ТорговаяТочка = ЭтотОбъект.СтруктурнаяЕдиница;
		Док.Записать(РежимЗаписиДокумента.Запись);
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьСтатьюДР(СтатьяДДС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДоходовРасходов.Ссылка
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.ОсновнаяСтатьяДвиженияДенежныхСредств = &СтатьяДДС";

	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

КонецФункции	

Функция ЭтоНоваяТорговаяТочка(ТорговаяТочка,Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕстьNULL(МИНИМУМ(ЛистУчета.Дата),ДатаВремя(3999,1,1)) КАК ДатаПервогоЛиста
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.ТорговаяТочка = &ТорговаяТочка";

	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ДатаПервогоЛиста > Дата Тогда   
			Если ТорговаяТочка.типСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
				Возврат Истина
			Иначе
				Возврат ложь;
			КонецЕсли;	
		Иначе
			Возврат ложь;
		КонецЕсли;	
	КонецЦикла;

	Если ТорговаяТочка.типСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
		Возврат Истина
	Иначе
		Возврат ложь;
	КонецЕсли;	
	
КонецФункции	

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//сдвинем границу последовательности себестоимости
	ПроверитьИСместитьГраницу();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//+++shae 2018.08.07 ИП-00019236  
	СкладыСервер.ПроверитьНаСоответствиеОрганизацииЗакупки(Организация, Товары.Выгрузить(), Отказ);		
	//---shae 2018.08.07 ИП-00019236  
	
	
	//+++АК ILIK 2018.06.15 ИП-00017888	
	ПроверитьУслуги(Отказ);
	
	Если ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка Тогда 
    	СтавкаНДС = ПроверяемыеРеквизиты.Найти("Товары.СтавкаНДС");
    	ПроверяемыеРеквизиты.Удалить(СтавкаНДС);
	КонецЕсли;
	//---АК ILIK
	
	ДатаУчетаОС_МСФО = АК_УчетМСФОПривилегированный.ПолучитьПараметрыУчетаОС().НачалоВеденияУчета;
	
	Если ЭтотОбъект.Дата >= ДатаУчетаОС_МСФО Тогда
		СчетУчета = ПроверяемыеРеквизиты.Найти("Оборудование.СчетУчетаЗабалансовый");	
	Иначе 
		СчетУчета = ПроверяемыеРеквизиты.Найти("Оборудование.СчетУчета");
	КонецЕсли;	
	
	ПроверяемыеРеквизиты.Удалить(СчетУчета);
	
	//+++АК ILIK 2018.06.06 ИП-00018853
	ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ);
	//---АК ILIK
	
	// проверка, если вид операции = оборудование и указан склад, то должны быть указаны приходники
	// ибо начинают приходовать на Склад_Основной, указывая розничные точки в табличной части. В итоге все оборудование падает по
	// местоположению на склад, вместо точек.
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		Если ЗначениеЗаполнено(Склад) И ПриходныеОрдера.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В документе указан Склад и не указаны приходные ордера. Проведение документа невозможно!", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//+++АК Susk (Суслин К.В.) 2018.08.01 ИП-00019369
	ПроверкаТЧОборудование(Отказ);	
	//---АК Susk (Суслин К.В.)	
	
КонецПроцедуры

//+++АК VERT 2018.07.12 ИП-00019049 Доп действия, оптимизация
Процедура ПроверитьУслуги(Отказ)
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		
		Если НЕ НеВыгружатьВБУ Тогда
			
			ТекСчетЗатратБУ = СтрокаТЧ.СчетЗатратБУ;
			
			Если ЗначениеЗаполнено(ТекСчетЗатратБУ) Тогда
				Если ОбщегоНазначенияПовтИсп.СчетВИерархии(ТекСчетЗатратБУ, ПланыСчетов.Хозрасчетный.Материалы) Тогда
					ЕстьМатериалыВУслугах = Истина;
					Если  СтрокаТЧ.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Материал Тогда
						Сообщить("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") +
							" табличной части ""Услуги"" указана номенклатура с некорректным видом номенклатуры! Проведение невозможно.");
						Отказ = Истина;
					КонецЕсли;	
				ИначеЕсли ОбщегоНазначенияПовтИсп.СчетВИерархии(ТекСчетЗатратБУ, ПланыСчетов.Хозрасчетный.Товары) Тогда
					Если  СтрокаТЧ.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Товар Тогда
						Сообщить("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") +
							" табличной части ""Услуги"" указана номенклатура с некорректным видом номенклатуры! Проведение невозможно.");
						Отказ = Истина;
					КонецЕсли;	
				ИначеЕсли  ОбщегоНазначенияПовтИсп.СчетВИерархии(ТекСчетЗатратБУ, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда// Услуги
					Если  СтрокаТЧ.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
						Сообщить("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") +
							" табличной части ""Услуги"" указана номенклатура с некорректным видом номенклатуры! Проведение невозможно.44 счет БУ используется только с видом номенклатуры ""услуга"". Замените номенклатуру.");
						Отказ = Истина;
					КонецЕсли;		
				КонецЕсли;	
			Иначе	
				Сообщить("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") +
							" табличной части ""Услуги"" не указан Счет затрат БУ! Проведение невозможно.");
				Отказ = Истина;
			КонецЕсли;
			
			//+++АК Susk (Суслин К.В.) 2018.01.17 ИП-00017530
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " табличной части ""Услуги"" не заполнена ставка НДС! Проведение невозможно!", Отказ);
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 			 
			
			Если НЕ Отказ
					И НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоБУ1)
					И ОбщегоНазначенияПовтИсп.СчетВИерархии(ТекСчетЗатратБУ, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
				Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки Тогда	
					Сообщить("В строке №" + СтрокаТЧ.НомерСтроки + " не заполнено ""Субконто БУ 1""! Проведение невозможно!");
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ) Тогда
			Если НеВыгружатьВБУ Тогда	
				//Сообщить("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") +
				//			" табличной части ""Услуги"" не указан Счет затрат НУ!");
			Иначе	
				Сообщить("В строке №" + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") +
							" табличной части ""Услуги"" не указан Счет затрат НУ! Проведение невозможно.");
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
			
	КонецЦикла;

КонецПроцедуры

//+++АК ILIK 2018.06.06 ИП-00018853
// Проверяет:
// 1. содержатся ли товары с признаком "Это комплект";
// 2. содержатся ли одинаковые товары.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ)
	Если ЭтотОбъект.Дата >= Дата(2018, 06, 01) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЧТовары.Номенклатура,
		               |	ТЧТовары.НомерСтроки
		               |ПОМЕСТИТЬ ВТТовары
		               |ИЗ
		               |	&ТЧТовары КАК ТЧТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТТовары.Номенклатура.Представление КАК НоменклатураПредставление
		               |ИЗ
		               |	ВТТовары КАК ВТТовары
		               |ГДЕ
		               |	ВТТовары.Номенклатура.ЭтоКомплект
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТТовары.Номенклатура.Представление КАК НоменклатураПредставление
		               |ИЗ
		               |	ВТТовары КАК ВТТовары
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТТовары.Номенклатура,
		               |	ВТТовары.Номенклатура.Представление
		               |
		               |ИМЕЮЩИЕ
		               |	КОЛИЧЕСТВО(ВТТовары.НомерСтроки) > 1";
		Запрос.УстановитьПараметр("ТЧТовары", ЭтотОбъект.Товары.Выгрузить());
		ПакетРезультатов = Запрос.ВыполнитьПакет();
	
		Выборка = ПакетРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Товары"" содержится номенклатура " + Выборка.НоменклатураПредставление + " с признаком ""Это комплект"". Проведение документа невозможно.", Отказ);
		КонецЦикла;
		
		Выборка = ПакетРезультатов[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Товары"" номенклатура " + Выборка.НоменклатураПредставление + " указана несколько раз. Проведение документа невозможно.", Отказ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьФайла(пИмяФайла, пХранилище) Экспорт
	
	Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		
		пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		
		пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
	//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
	//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
	//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
	//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
			ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		
		пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		
		пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		
		пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		
	ИначеЕсли Найти(НРег(пИмяФайла), ".html") > 0 Тогда	
		
		пПрограмма = """C:\Program Files (x86)\Internet Explorer\iexplore.exe"" /p ""пИмяФайла""";
		пПрограмма = """C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" /p ""пИмяФайла""";

	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	#Если Клиент Тогда
		Состояние("Сохраняется файл: " + пИмяФайла);
	#КонецЕсли	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	Если РаботаСФайлами.СохранитьФайлНаДиске(пХранилище, ИмяВременногоФайла, Ложь, "", Ложь) Тогда
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		#Если Клиент Тогда
		Состояние("Печать файла: " + пИмяФайла);
		#КонецЕсли
		ЗапуститьПриложение(пПрограмма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОборудованиеПоЗаявкеНаУслуги(ДанныеЗаполнения)
	
    //
	Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Услуги Цикл
		
		НоваяСтрока = ЭтотОбъект.Оборудование.Добавить();
		
		НоваяСтрока.Номенклатура 		= СтрокаТЧ.Номенклатура;
		НоваяСтрока.ОсновноеСредство 	= Справочники.ОсновныеСредства.НайтиПоРеквизиту("Номенклатура", НоваяСтрока.Номенклатура);
		НоваяСтрока.ИнвентарныйНомер 	= НоваяСтрока.ОсновноеСредство.ИнвентарныйНомер;
		НоваяСтрока.ЗаводскойНомер 		= НоваяСтрока.ОсновноеСредство.ЗаводскойНомер;   
		
		НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС 	= СтрокаТЧ.СтавкаНДС;
		
		РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект.ВариантРасчетаНДС);
		
		//+++susk
		//ИП-00016544 ???зачем 08.01? Ошибки же потом
		
		//НоваяСтрока.СчетУчетаБУ 			= ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков;
		//---susk
		
		НоваяСтрока.СчетУчетаЗабалансовый 	= ПланыСчетов.Финансовый.ККМ;
		НоваяСтрока.Инвестиция				= Истина;
		НоваяСтрока.ТорговаяТочка 			= СтрокаТЧ.СтруктурнаяЕдиница;
		
	КонецЦикла;
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	////mind заблокируем таблицу
	//ДокМетаданные = Метаданные();
	//Блокировка = Новый БлокировкаДанных();
	//ЭлементБлокировка = Блокировка.Добавить();
	//ЭлементБлокировка.Область = "РегистрСведений.НомераДокументовПериодические";
	//ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировка.УстановитьЗначение("Вид", ДокМетаданные.Имя);
	//ЭлементБлокировка.УстановитьЗначение("Организация", Организация);
	//ЭлементБлокировка.УстановитьЗначение("Период", Дата);
	//Блокировка.Заблокировать();
	//
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("Вид", ДокМетаданные.Имя);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Период", НачалоГода(Дата));
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	НомераДокументов.Номер,
	//               |	НомераДокументов.Организация.Префикс КАК Префикс
	//               |ИЗ
	//               |	РегистрСведений.НомераДокументовПериодические КАК НомераДокументов
	//               |ГДЕ
	//               |	НомераДокументов.Период = &Период
	//               |	И НомераДокументов.Вид = &Вид
	//               |	И НомераДокументов.Организация = &Организация";
	//			   
	//Выборка = Запрос.Выполнить().Выбрать();
	//СтандартнаяОбработка = Ложь;
	//Если Выборка.Следующий() Тогда
	//	МаксНомер = Выборка.Номер + 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
	//		Номер = СокрЛП(Выборка.Префикс) + Сред(Номер, СтрДлина(Выборка.Префикс) + 1);
	//	КонецЕсли;
	//Иначе
	//	МаксНомер = 1;
	//	Номер = Прав("000000000000" + Формат(МаксНомер, "ЧГ=0"), ДокМетаданные.ДлинаНомера);
	//	Если ЗначениеЗаполнено(Организация.Префикс) Тогда
	//		Номер = СокрЛП(Организация.Префикс) + Сред(Номер, СтрДлина(Организация.Префикс) + 1);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запись = РегистрыСведений.НомераДокументовПериодические.СоздатьМенеджерЗаписи();
	//Запись.Период = НачалоГода(Дата);
	//Запись.Вид = ДокМетаданные.Имя;
	//Запись.Организация = Организация;
	//Запись.Номер = МаксНомер;
	//Запись.Записать();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.08 б/н 
Процедура ПроверитьТТОборудованияНаТипРозница(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугОборудование.НомерСтроки,
	               |	ПоступлениеТоваровУслугОборудование.ТорговаяТочка
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	               |ГДЕ
	               |	ПоступлениеТоваровУслугОборудование.ТорговаяТочка.ТипСтруктурнойЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	               |	И ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровУслугОборудование.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Инвентарь)";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("Табличная часть ""Оборудование"": В строке № " + Строка(Выборка.НомерСтроки) + " тип торговой точки отличается от типа ""Розница""!", Отказ);
	КонецЦикла;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.08 оптимизация + ИП-00017854 
Процедура ПроверитьТТОборудованияПоСтатьямЗатрат(Отказ)
	
	// нельзя приходовать на точки ВкусВилл (общий) или Все, если указана статья затрат 6 группы.
	
	//08022018
	//если точка ВСЕ, то даем приходовать со статьями Расходы на оборудование РЦ, Расходы на Инвестиции РЦ(материалы)
	
	МассивСтатей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДоходовРасходов.Ссылка
		|ПОМЕСТИТЬ СтатьяРодительская
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.Код = ""6""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатьиДоходовРасходов.Ссылка,
		|	ВЫБОР
		|		КОГДА СтатьиДоходовРасходов.Код = ""61047""
		|				ИЛИ СтатьиДоходовРасходов.Код = ""61051""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсключениеДляВсе
		|ПОМЕСТИТЬ СтатьиОтобранные
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				СтатьяРодительская.Ссылка
		|			ИЗ
		|				СтатьяРодительская)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.НомерСтроки,
		|	ПоступлениеТоваровУслугОборудование.ТорговаяТочка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиОтобранные КАК СтатьиОтобранные
		|		ПО ПоступлениеТоваровУслугОборудование.Ссылка.СтатьяЗатрат = СтатьиОтобранные.Ссылка
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
		|	И (ПоступлениеТоваровУслугОборудование.ТорговаяТочка.id_TT = 10750
		|			ИЛИ ПоступлениеТоваровУслугОборудование.ТорговаяТочка.id_TT = 10969)
		|	И ВЫБОР
		|			КОГДА ПоступлениеТоваровУслугОборудование.ТорговаяТочка.id_TT = 10969
		|				ТОГДА НЕ СтатьиОтобранные.ИсключениеДляВсе
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("Табличная часть ""Оборудование"": В строке № " + Строка(Выборка.НомерСтроки) + " указана торговая точка, запрещенная, если указана статья затрат 6 группы!", Отказ);
	КонецЦикла;	
	
КонецПроцедуры

//++ АК luza ИП-00017231.01 28.12.17
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураПолученный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СФ
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка
	|	И СФ.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции
//-- АК luza ИП-00017231.01 28.12.17

#Область АК_ОтключенныйКод
//+++АК SHEP 2018.01.30 ИП-00017365.02
// меняем сумму по документам только когда поменялась
Процедура ТранспортныеДокументыСуммуОбновить_00017365() Экспорт
	
	Если ТранспортныеДокументы.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	//+++АК SHEP 2018.04.27 ИП-00018321.02: добавил СуммаДопТарифа
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТранспортныеДокументы.НомерСтроки,
		|	ТранспортныеДокументы.Документ,
		|	ТранспортныеДокументы.СуммаДопТарифа КАК СуммаДопТарифа,
		|	ТранспортныеДокументы.СуммаДокумента
		|ПОМЕСТИТЬ ТранспортныеДокументы
		|ИЗ
		|	&ТранспортныеДокументы КАК ТранспортныеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранспортныеДокументы.НомерСтроки КАК НомерСтроки,
		|	ТранспортныеДокументы.Документ КАК Документ,
		|	ТранспортныеДокументы.СуммаДопТарифа КАК СуммаДопТарифаБыло,
		|	ВЫБОР
		|		КОГДА ДоставкаНаТТ.Ссылка ЕСТЬ NULL
		|			ТОГДА ТранспортныеДокументы.СуммаДопТарифа
		|		КОГДА ДоставкаНаТТ.Проведен
		//+++АК SHEP 2018.05.15 ИП-00018669
		//|				И ДоставкаНаТТ.Организация = &Организация
		//---АК SHEP 2018.05.15 
		|				И ДоставкаНаТТ.Контрагент = &Контрагент
		|			ТОГДА ДоставкаНаТТ.СуммаДопТарифа
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДопТарифа,
		|	ТранспортныеДокументы.СуммаДокумента КАК СуммаДокументаБыло,
		|	ВЫБОР
		|		КОГДА ДоставкаНаТТ.Ссылка ЕСТЬ NULL
		|			ТОГДА ТранспортныеДокументы.СуммаДокумента
		|		КОГДА ДоставкаНаТТ.Проведен
		//+++АК SHEP 2018.05.15 ИП-00018669
		//|				И ДоставкаНаТТ.Организация = &Организация
		//---АК SHEP 2018.05.15 
		|				И ДоставкаНаТТ.Контрагент = &Контрагент
		|			ТОГДА ДоставкаНаТТ.СуммаДокумента
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДокумента
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	ТранспортныеДокументы КАК ТранспортныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
		|		ПО ТранспортныеДокументы.Документ = ДоставкаНаТТ.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТранспортныеДокументы.НомерСтроки,
		|	ТранспортныеДокументы.Документ,
		|	ТранспортныеДокументы.СуммаДопТарифа КАК СуммаДопТарифаБыло,
		|	ВЫБОР
		|		КОГДА ОбщиеТранспортныеРасходы.Ссылка ЕСТЬ NULL
		|			ТОГДА ТранспортныеДокументы.СуммаДопТарифа
		|		КОГДА ОбщиеТранспортныеРасходы.Проведен
		//+++АК SHEP 2018.05.15 ИП-00018669
		//|				И ОбщиеТранспортныеРасходы.Организация = &Организация
		//---АК SHEP 2018.05.15
		|				И ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
		|			ТОГДА 0
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТранспортныеДокументы.СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ОбщиеТранспортныеРасходы.Ссылка ЕСТЬ NULL
		|			ТОГДА ТранспортныеДокументы.СуммаДокумента
		|		КОГДА ОбщиеТранспортныеРасходы.Проведен
		//+++АК SHEP 2018.05.15 ИП-00018669
		//|				И ОбщиеТранспортныеРасходы.Организация = &Организация
		//---АК SHEP 2018.05.15
		|				И ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
		|			ТОГДА ОбщиеТранспортныеРасходы.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ТранспортныеДокументы КАК ТранспортныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
		|		ПО ТранспортныеДокументы.Документ = ОбщиеТранспортныеРасходы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТранспортныеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.НомерСтроки,
		|	ТаблицаДанных.Документ,
		|	ТаблицаДанных.СуммаДопТарифа,
		|	ТаблицаДанных.СуммаДокумента
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.СуммаДокумента <> ТаблицаДанных.СуммаДокументаБыло
		|	ИЛИ ТаблицаДанных.СуммаДопТарифа <> ТаблицаДанных.СуммаДопТарифаБыло");
	//+++АК SHEP 2018.05.15 ИП-00018669: организацию не проверяем, т.к. для Тилси проводки должны идти по ВкусВилл 8-)
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	//---АК SHEP 2018.05.15
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТранспортныеДокументы", ТранспортныеДокументы.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	// изменений по суммам документов не было
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтрокаТЧ = ТранспортныеДокументы.Найти(ВыборкаЗапроса.НомерСтроки, "НомерСтроки");
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаЗапроса, "СуммаДокумента,СуммаДопТарифа");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

//+++АК sole 2018.07.03 ИП-00018321.07
// Прежняя версия процедуры "ТранспортныеДокументыСуммуОбновить_00017365()"
Процедура ТранспортныеДокументыСуммуОбновить() Экспорт
	
	Если ЭтотОбъект.ТранспортныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ
|	ТранспортныеДокументы.НомерСтроки,
|	ТранспортныеДокументы.Документ,
|	ТранспортныеДокументы.СуммаДопТарифа КАК СуммаДопТарифа,
|	ТранспортныеДокументы.СуммаДокумента
|
|		ПОМЕСТИТЬ ТранспортныеДокументы
|
|ИЗ &ТранспортныеДокументы КАК ТранспортныеДокументы
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ	
|	ТранспортныеДокументы.НомерСтроки,
|	ТранспортныеДокументы.Документ,
|	ТранспортныеДокументы.СуммаДопТарифа КАК СуммаДопТарифаПрев,
|	ТранспортныеДокументы.СуммаДокумента КАК СуммаДокументаПрев,
|	ВЫБОР	
|		КОГДА ТИПЗНАЧЕНИЯ(ТранспортныеДокументы.Документ) = ТИП(Документ.МаршрутныйЛист) 
|			ТОГДА ЕСТЬNULL(МаршрутныйЛист.Сумма, 0)
|
|		КОГДА ТИПЗНАЧЕНИЯ(ТранспортныеДокументы.Документ) = ТИП(Документ.ДоставкаНаТТ)
|			ТОГДА ЕСТЬNULL(ДоставкаНаТТ.СуммаДокумента, 0)
|
|		КОГДА ТИПЗНАЧЕНИЯ(ТранспортныеДокументы.Документ) = ТИП(Документ.ОбщиеТранспортныеРасходы)
|			ТОГДА ЕСТЬNULL(ОбщиеТранспортныеРасходы.Сумма, 0)
|
|		ИНАЧЕ 0
|	КОНЕЦ КАК СуммаДокумента,
|
|	ВЫБОР	
|		КОГДА ТИПЗНАЧЕНИЯ(ТранспортныеДокументы.Документ) = ТИП(Документ.МаршрутныйЛист) 
|			ТОГДА ЕСТЬNULL(МаршрутныйЛист.СуммаДопТарифа, 0)
|
|		КОГДА ТИПЗНАЧЕНИЯ(ТранспортныеДокументы.Документ) = ТИП(Документ.ДоставкаНаТТ)
|			ТОГДА ЕСТЬNULL(ДоставкаНаТТ.СуммаДопТарифа, 0)
|
|		КОГДА ТИПЗНАЧЕНИЯ(ТранспортныеДокументы.Документ) = ТИП(Документ.ОбщиеТранспортныеРасходы)
|			ТОГДА 0
|
|		ИНАЧЕ 0
|	КОНЕЦ КАК СуммаДопТарифа
|
|		ПОМЕСТИТЬ ТаблицаДанных
|
|ИЗ	ТранспортныеДокументы
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист КАК МаршрутныйЛист ПО
|			МаршрутныйЛист.Ссылка = ТранспортныеДокументы.Документ
|       И	МаршрутныйЛист.Проведен
|		И	МаршрутныйЛист.Перевозчик = &Контрагент
|
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоставкаНаТТ КАК ДоставкаНаТТ ПО
|			ДоставкаНаТТ.Ссылка = ТранспортныеДокументы.Документ
|		И	ДоставкаНаТТ.Проведен
|		И	ДоставкаНаТТ.Контрагент = &Контрагент
|
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы ПО
|			ОбщиеТранспортныеРасходы.Ссылка = ТранспортныеДокументы.Документ
|		И	ОбщиеТранспортныеРасходы.Проведен
|		И	ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаДанных.НомерСтроки,
|	ТаблицаДанных.Документ,
|	ТаблицаДанных.СуммаДопТарифа,
|	ТаблицаДанных.СуммаДокумента
|
|ИЗ ТаблицаДанных КАК ТаблицаДанных
|ГДЕ
|		ТаблицаДанных.СуммаДокумента <> ТаблицаДанных.СуммаДокументаПрев
|	ИЛИ	ТаблицаДанных.СуммаДопТарифа <> ТаблицаДанных.СуммаДопТарифаПрев
|";	
	
	Запрос.УстановитьПараметр("ТранспортныеДокументы", ЭтотОбъект.ТранспортныеДокументы.Выгрузить());
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	
	// изменений по суммам документов не было
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат; 
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтрокаТЧ = ТранспортныеДокументы.Найти(ВыборкаЗапроса.НомерСтроки, "НомерСтроки");
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаЗапроса, "СуммаДокумента, СуммаДопТарифа");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.01 ИП-00019369
Процедура ПроверкаТЧОборудование(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧОборудование.НомерСтроки,
	               |	ТЧОборудование.ОсновноеСредство,
	               |	ТЧОборудование.ТорговаяТочка,
	               |	ТЧОборудование.Номенклатура,
	               |	ТЧОборудование.СчетУчета
	               |ПОМЕСТИТЬ ВТ_Оборудование
	               |ИЗ
	               |	&ТЧОборудование КАК ТЧОборудование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Оборудование.ТорговаяТочка,
	               |	СтруктурныеЕдиницы.Наименование,
	               |	СтруктурныеЕдиницы.ДатаЗакрытия,
	               |	СтруктурныеЕдиницы.СтатусТорговойТочки
	               |ИЗ
	               |	ВТ_Оборудование КАК ВТ_Оборудование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО ВТ_Оборудование.ТорговаяТочка = СтруктурныеЕдиницы.Ссылка
	               |ГДЕ
	               |	НЕ СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Оборудование.ТорговаяТочка,
	               |	СтруктурныеЕдиницы.Наименование,
	               |	СтруктурныеЕдиницы.ДатаЗакрытия,
	               |	СтруктурныеЕдиницы.СтатусТорговойТочки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Оборудование.НомерСтроки,
	               |	ВТ_Оборудование.ОсновноеСредство,
	               |	ЕСТЬNULL(ОсновныеСредства.КодПоОКОФ, ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка)) КАК КодПоОКОФ,
	               |	ЕСТЬNULL(ОсновныеСредства.ГруппаОС, ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)) КАК ГруппаОС,
	               |	ЕСТЬNULL(ОсновныеСредства.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа,
	               |	ЕСТЬNULL(СпрНоменклатура.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования
	               |ИЗ
	               |	ВТ_Оборудование КАК ВТ_Оборудование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |			ПО ОсновныеСредства.Номенклатура = СпрНоменклатура.Ссылка
	               |		ПО ВТ_Оборудование.ОсновноеСредство = ОсновныеСредства.Ссылка
	               |ГДЕ
	               |	ВТ_Оборудование.СчетУчета В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПриобретениеОсновныхСредств))";
	
	Запрос.УстановитьПараметр("ТЧОборудование", Оборудование.Выгрузить());
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаТочек = Результат[1].Выгрузить();
	ТаблицаОборудование = Результат[2].Выгрузить();
	
	ПроверитьТЧОборудованиеНаЗакрытыеТочки(ТаблицаТочек, Отказ);
	ПроверитьТЧОборудованиеНаРеквизитыОС(ТаблицаОборудование, Отказ);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.01 ИП-00019369
Процедура ПроверитьТЧОборудованиеНаЗакрытыеТочки(ТаблицаТочек, Отказ);
	
	ЕстьОшибки = Ложь;
	КонецСообщенияОбОшибке = "Использование данных Торговых точек запрещено!";
	ТекстОшибки = "";
	
	Для Каждого СтрТочка Из ТаблицаТочек Цикл	
		
		НачалоСообщенияОбОшибке = "В табличной части ""Оборудование"" указана Торговая точка """ + СокрЛП(СтрТочка.Наименование);	

		//+++АК ILIK 2018.08.13 ИП-00019413
		//Если СтрТочка.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт И ?(ЗначениеЗаполнено(СтрТочка.ДатаЗакрытия), СтрТочка.ДатаЗакрытия < Дата, Истина) Тогда
		//	ТекстОшибки = ТекстОшибки + НачалоСообщенияОбОшибке + " - со статусом ""Закрыта""" + Символы.ПС;
		Если (СтрТочка.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Закрыт Или СтрТочка.СтатусТорговойТочки = Перечисления.СтатусыТорговыхТочек.Приостановлен)
		  И ?(ЗначениеЗаполнено(СтрТочка.ДатаЗакрытия), СтрТочка.ДатаЗакрытия < Дата, Истина) Тогда
			ТекстОшибки = ТекстОшибки + НачалоСообщенияОбОшибке + " - со статусом """ + Строка(СтрТочка.СтатусТорговойТочки) + """" + Символы.ПС;
		//---АК ILIK
			ЕстьОшибки = Истина;
		//Временно коменчу, т.к. ставят дату закрытия на временно закрытые точки.	
			
		//ИначеЕсли ЗначениеЗаполнено(СтрТочка.ДатаЗакрытия) И СтрТочка.ДатаЗакрытия < Дата Тогда
		//	 ТекстОшибки = ТекстОшибки + НачалоСообщенияОбОшибке + " - у которой дата закрытия ранее даты документа" + Символы.ПС;
		//	 ЕстьОшибки = Истина;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки + КонецСообщенияОбОшибке, Отказ);
	КонецЕсли;

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.01 ИП-00019369 
Процедура ПроверитьТЧОборудованиеНаРеквизитыОС(ТаблицаОборудование, Отказ)
	
	ТекстСообщения = "В табличной части ""Оборудование"" в строке %1 не заполнены реквизиты %2";	
		
	СтрокаРеквизитов = "";
	
	Для Каждого Стр Из ТаблицаОборудование Цикл
		СтрокаНеЗаполненныхРеквизитов = ?(НЕ ЗначениеЗаполнено(Стр.КодПоОкоф), "Код по ОКОФ, ", "") 
							+ ?(НЕ ЗначениеЗаполнено(Стр.ГруппаОС), "Группа ОС, ", "")
							+ ?(НЕ ЗначениеЗаполнено(Стр.АмортизационнаяГруппа), "Амортизационная группа, ", "")
							+ ?(НЕ ЗначениеЗаполнено(Стр.СрокПолезногоИспользования), "Срок полезного использования ОС, ", "");
							
		Если ЗначениеЗаполнено(СтрокаНеЗаполненныхРеквизитов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				Строка(Стр.НомерСтроки),
				Лев(СтрокаНеЗаполненныхРеквизитов, СтрДлина(СтрокаНеЗаполненныхРеквизитов) - 2)), Отказ);
		КонецЕсли;				
							
	КонецЦикла;   	
	
КонецПроцедуры

//shae 2018.09.03 ИП-00019212
Функция ПолучитьТаблицуТовары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.СтатьяТовародвижения,
	|	ПоступлениеТоваровУслугТовары.ПоПриходнымОрдерам,
	|	ПоступлениеТоваровУслугТовары.КоличествоПретензияКСкладу,
	|	ПоступлениеТоваровУслугТовары.Сделка,
	|	ПоступлениеТоваровУслугТовары.Предпоступление,
	|	ПоступлениеТоваровУслугТовары.КорректировкаПТУ,
	|	ПоступлениеТоваровУслугТовары.КоличествоПретензияКПеревозчику,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипТовара КАК ТипТовара
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055
Процедура ДвиженияНМА(Отказ)
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА Тогда
		Возврат;
	КонецЕсли;
	
	СчетНМА = ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("08.5", "Финансовый"); //почему нельзя было создать счет предопределенным
	
	Для Каждого Стр Из НМА Цикл 
		
		Проводка = Движения.Финансовый.ДобавитьДебет();
		Проводка.Период							= Дата;
		Проводка.Организация					= Организация;
		Проводка.Сумма							= Стр.Сумма;
				
		Проводка.СчетДт							= СчетНМА;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Стр.ОС);
		
		Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		Проводка.СубконтоКт.Организации	= ЭтотОбъект.Организация;
		Проводка.СубконтоКт.Контрагенты	= ЭтотОбъект.Контрагент;

	КонецЦикла;
	
КонецПроцедуры

НеПроверятьДатуЗапретаРедактирования 	= Ложь;
МенятьСтатусы							= Истина;
НеПроверятьПриходныеОрдера = Ложь;
