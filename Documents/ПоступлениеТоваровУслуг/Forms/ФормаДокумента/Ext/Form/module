
Перем мКолонкиТовары, мКолонкиУслуги, мКолонкиОборудование, ТекСтатус Экспорт, ТекЗаявка Экспорт, мТекНомерВхСФ, мТекДатаВхСф;

//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055
Перем мТекущийВидОперации;
//---АК Susk (Суслин К.В.)  

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура УстановитьВидимостьДоступность() Экспорт
	
	Если ЭтотОбъект.НеВыгружатьВБУ Тогда
		мКолонкиУслуги.СубконтоБУ1.Видимость	= ложь;
		мКолонкиУслуги.СубконтоБУ2.Видимость	= ложь;
		мКолонкиУслуги.СубконтоБУ3.Видимость	= ложь;
		мКолонкиУслуги.СчетЗатратБУ.Видимость	= ложь;
		мКолонкиУслуги.СчетЗатратНУ.Видимость	= ложь;
		мКолонкиУслуги.СубконтоНУ1.Видимость	= ложь;
		мКолонкиУслуги.СубконтоНУ2.Видимость	= ложь;
		мКолонкиУслуги.СубконтоНУ3.Видимость	= ложь;
	Иначе
		мКолонкиУслуги.СубконтоБУ1.Видимость	= истина;
		мКолонкиУслуги.СубконтоБУ2.Видимость	= истина;
		мКолонкиУслуги.СубконтоБУ3.Видимость	= истина;
		мКолонкиУслуги.СчетЗатратБУ.Видимость	= истина;
		мКолонкиУслуги.СчетЗатратНУ.Видимость	= истина;
		мКолонкиУслуги.СубконтоНУ1.Видимость	= истина;
		мКолонкиУслуги.СубконтоНУ2.Видимость	= истина;
		мКолонкиУслуги.СубконтоНУ3.Видимость	= истина;
	КонецЕсли;
	
	ЭтоОборудование = (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
	
	//Видимость страниц
	ЭлементыФормы.Панель1.Страницы.Оборудование.Видимость	= ЭтоОборудование;
	ЭлементыФормы.Панель1.Страницы.Товары.Видимость			= НЕ ЭтоОборудование;
	
	//Обязательность заполнения
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного		= ЭтоОборудование;
	ЭлементыФормы.СтатьяДДС.АвтоОтметкаНезаполненного							= ЭтоОборудование;
	ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаРаспределитьНаОС.Доступность	= ЭтоОборудование;
	
	мКолонкиУслуги.Продукция.Видимость 	= (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки);
	ЗакрыватьПоПереработке = (ЭтотОбъект.Дата >= '20150801'
								И ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки);
	мКолонкиТовары.СтавкаНДС.Видимость 	= НЕ ЗакрыватьПоПереработке;
	мКолонкиТовары.Сумма.Видимость 		= НЕ ЗакрыватьПоПереработке;
	мКолонкиТовары.СуммаНДС.Видимость 	= НЕ ЗакрыватьПоПереработке;
	мКолонкиТовары.Цена.Видимость 		= НЕ ЗакрыватьПоПереработке;
		
	мКолонкиУслуги.СчетЗатрат.Видимость = НЕ ЗакрыватьПоПереработке;
	мКолонкиУслуги.Субконто1.Видимость 	= НЕ ЗакрыватьПоПереработке;
	мКолонкиУслуги.Субконто2.Видимость 	= НЕ ЗакрыватьПоПереработке;
	мКолонкиУслуги.Субконто3.Видимость 	= НЕ ЗакрыватьПоПереработке;
	
	//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055
	УстановитьВидимостьДоступность_НМА();
	//---АК Susk (Суслин К.В.) 	 
		
КонецПроцедуры

Процедура УстановитьДоступностьНДФЛ()
	
	//+++АК GEYV 24.09.2015
	ЭлементыФормы.НадписьСуммаНДФЛ.Видимость 		= ПроизвестиУплатуНДФЛ;
	ЭлементыФормы.СуммаНДФЛ.Видимость 				= ПроизвестиУплатуНДФЛ;
	
	//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055	 
	//ЭлементыФормы.Панель1.Страницы.Товары.Видимость 		= НЕ ПроизвестиУплатуНДФЛ;
	//ЭлементыФормы.Панель1.Страницы.Оборудование.Видимость 	= НЕ ПроизвестиУплатуНДФЛ;
	ВидНМА = ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА;
	ЭлементыФормы.Панель1.Страницы.Товары.Видимость 		= НЕ ПроизвестиУплатуНДФЛ И НЕ ВидНМА;
	ЭлементыФормы.Панель1.Страницы.Оборудование.Видимость 	= НЕ ПроизвестиУплатуНДФЛ И НЕ ВидНМА;
	//---АК Susk (Суслин К.В.) 
	
	//---АК
	
	мКолонкиУслуги.СтавкаНДС.Видимость 	= НЕ ПроизвестиУплатуНДФЛ;
	мКолонкиУслуги.СуммаНДС.Видимость 	= НЕ ПроизвестиУплатуНДФЛ;
	
КонецПроцедуры

Процедура УстановитьДоступностьТТОборудования()
	
	ЕстьДоступность = (ЭтотОбъект.ПриходныеОрдера.Количество() = 0);
	мКолонкиОборудование.ТорговаяТочка.Видимость 	= ЕстьДоступность;
	мКолонкиОборудование.Инвестиция.Видимость 		= ЕстьДоступность;
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Поступление товаров услуг");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ЭтоНовый()
			И ЗначениеЗаполнено(ПараметрОснование)
			И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерСклад")
			И ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
		Поступление = Документы.ПоступлениеТоваровУслуг.НайтиПоступлениеПоПриходнику(ПараметрОснование);
		Если Поступление <> Неопределено Тогда
			
			Поступление.ПолучитьФорму().Открыть();
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	//+++АК SHEP 2018.01.25 ИП-00017365.02
	ТранспортныеУслугиПриИзменении(ЭлементыФормы.ТранспортныеУслуги);
	Если ТранспортныеУслуги И НЕ Проведен Тогда
		ТранспортныеДокументыСуммуОбновить();
	КонецЕсли;
	//---АК SHEP 2018.01.31
КонецПроцедуры

Процедура ПриОткрытии()
	//+++AK bara ИП-00015442.000.00000001
	Если ЭтотОбъект.НеВыгружатьВБУ Тогда
		ЭлементыФормы.АК_НеВыгружатьВБУПоясниение.Видимость = Истина;
	Иначе
		ЭлементыФормы.АК_НеВыгружатьВБУПоясниение.Видимость = Ложь;
	КонецЕсли;
	//---AK bara ИП-00015442.000.00000001

	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ИД) Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		Иначе
			//АК БЕЛН 19.04.2016++  Пожелание Егоровой - чтоб статусы можно было менять в закрытом периоде
			НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);	
			//Если НастройкаПравДоступа.ДокументВЗакрытомПериоде(ЭтотОбъект) Тогда
			//	Для каждого эл Из ЭлементыФормы Цикл
			//		Если ТипЗнч(Эл)=Тип("Панель") Или ТипЗнч(Эл)=Тип("СтраницаПанели") ИЛИ Эл.Имя="СтатусПолученныхДокументов" 
			//			ИЛИ Эл.Имя="НомерВходящегоДокумента" ИЛИ Эл.Имя="ДатаВходящегоДокумента" ИЛИ Эл.Имя="НомерВходящегоСчетаФактуры"  
			//			ИЛИ Эл.Имя="ДатаВходящегоСчетаФактуры" ИЛИ Эл.Имя="ДокументыОснования" ИЛИ Эл.Имя="ДокументОснование" Тогда			
			//			Продолжить;
			//		КонецЕсли; 
			//		
			//		Попытка
			//			Эл.ТолькоПросмотр=Истина;
			//		Исключение
			//		КонецПопытки;
			//	КонецЦикла;
			//	ЭлементыФормы.ДействияФормы.Кнопки.Найти("Действие3").Доступность=Ложь;
			//	ЭлементыФормы.ДействияФормы.Кнопки.Найти("Действие4").Доступность=Ложь;
			//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("ОсновныеДействияФормыОК").Доступность=Ложь;
			//	ЭлементыФормы.Товары.Доступность=Ложь;
			//	ЭлементыФормы.Услуги.Доступность=Ложь;
			//	ЭлементыФормы.Оборудование.Доступность=Ложь;
			//	ЭлементыФормы.ПриходныеОрдера.Доступность=Ложь;
			//	ЭлементыФормы.НеВыгружатьВБУ.Доступность=Ложь;
			//	ЭлементыФормы.ПроизвестиУплатуНДФЛ.Доступность=Ложь;
			//КонецЕсли; 
			//АК БЕЛН 19.04.2016--
			//+++АК MIND 2018.01.17 закоментил метод, не дает открыть форму
			
			//++ АК luza 17.01.2018 ИП-00017231.01
			Если НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(ДокументОбъект) Тогда
				ЭлементыФормы.ПредъявленСФ.Доступность = Ложь;
			КонецЕсли;	
			//-- АК luza 17.01.2018 ИП-00017231.01
		КонецЕсли;
		
		//Установка текущей страницы
		Если ЭтотОбъект.Товары.Количество() > 0 Тогда
			
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Товары;
			
		ИначеЕсли ЭтотОбъект.Оборудование.Количество() > 0 Тогда
			
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Оборудование;
			
		ИначеЕсли ЭтотОбъект.Услуги.Количество() > 0 Тогда
			
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Услуги;	
			
		КонецЕсли;				 
		
		ЗаполнитьПрикрепленныеФайлы();
		
	Иначе
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			Если ЭтотОбъект.ВидОперации.Пустая() Тогда
				ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
			КонецЕсли;
			
			Если ЭтотОбъект.ВариантРасчетаНДС.Пустая() Тогда
				ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
			
		Иначе
			ЭтотОбъект.ИД = 0;
			Если ЭтотОбъект.ДоговорКонтрагента.Владелец <> ЭтотОбъект.Контрагент
					ИЛИ ЭтотОбъект.ДоговорКонтрагента.Организация <> ЭтотОбъект.Организация Тогда
				ЭтотОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			
			//+++susk
			//ИП-00016795
			Для Каждого Стр Из Оборудование Цикл
				Стр.ИнвентарныйНомер = "";
				Стр.ЗаводскойНомер = "";
			КонецЦикла;
			//---susk

		КонецЕсли;
		//ВыгружатьПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "Выгружать_в_БП_ДокументыПоПоступлению");
		//Если ЗначениеЗаполнено(ВыгружатьПоУмолчанию) Тогда
		//	НеВыгружатьВБУ = НЕ ВыгружатьПоУмолчанию;
		//Иначе
		//	НеВыгружатьВБУ=истина;
		//КонецЕсли;	
	КонецЕсли;
	
	ЕстьПравоРедактировать = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзменениеЦеныИСуммыВДокументе, Ложь);
	мКолонкиТовары.Сумма.ТолькоПросмотр		= НЕ ЕстьПравоРедактировать;
	мКолонкиТовары.СтавкаНДС.ТолькоПросмотр	= НЕ ЕстьПравоРедактировать;
	
	мКолонкиТовары.Цена.ТолькоПросмотр = НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеСуммВДокументеПоступления, Ложь);
	
	ДобавитьТоварыИзОрдеров(, Истина);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	УстановитьВидимостьДоступность();
	УстановитьДоступностьНДФЛ();
	УстановитьДоступностьТТОборудования();
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	//АК БЕЛН 28.03.2016++
	ТекСтатус = ЭтотОбъект.СтатусПолученныхДокументов;
	//ЭлементыФормы.ДокументыПолучены.Доступность 			= ЭтотОбъект.Товары.Количество()>0;
	//ЭлементыФормы.СтатусПолученныхДокументов.Доступность	= (НЕ ЭтотОбъект.Товары.Количество() > 0);
	
	ЭлементыФормы.ДокументыПолучены.Доступность 			= Ложь;
	ЭлементыФормы.СтатусПолученныхДокументов.Доступность	= Истина;
	
	Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		ТекЗаявка = ЭтотОбъект.ДокументОснование;
	КонецЕсли;
		
	//Установка текущей страницы
	Если ЭтотОбъект.Товары.Количество() > 0 Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Товары;
	ИначеЕсли ЭтотОбъект.Оборудование.Количество() > 0 Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Оборудование;
	ИначеЕсли ЭтотОбъект.Услуги.Количество() > 0 Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Услуги;
	КонецЕсли;
	
	//АК БЕЛН 28.03.2016--
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы")
			И ЭтотОбъект.ЭтоНовый() Тогда
			
		Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Услуги Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					
			СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");

			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратБУ, 
				СтрокаТабличнойЧасти.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
				СтрокаТабличнойЧасти.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
				СтрокаТабличнойЧасти.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);
				
			СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;
	
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
				СтрокаТабличнойЧасти.СубконтоНУ1, мКолонкиУслуги.СубконтоНУ1,
				СтрокаТабличнойЧасти.СубконтоНУ2, мКолонкиУслуги.СубконтоНУ2,
				СтрокаТабличнойЧасти.СубконтоНУ3, мКолонкиУслуги.СубконтоНУ3);


		КонецЦикла;	
		
		ОбновлениеОтображения();
		
	КонецЕсли;
	
	//++ АК luza ИП-00017231.01 28.12.17
	ЗаполнитьТекстПроСчетФактуру();
	//-- АК luza ИП-00017231.01 28.12.17
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
	
	//+++АК ILIK 2018.10.10 ИП-00019835
	ЗаполнитьКППКонтрагента();
	//---АК ILIK
	
	//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА Тогда
		НастроитьДокумент_НМА();
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ЭтотОбъект.Товары.Количество() > 0
			И ЭтотОбъект.ПриходныеОрдера.Количество() = 0 Тогда
		Сообщить("Поступление товара не может быть проведено без указания приходного ордера (склад)");
		Отказ = Истина;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ЭтотОбъект.Оборудование.Количество() > 0
			И НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Сообщить("Нельзя провести поступление оборудования, не указав, что вид операции ""Оборудование""");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
			И РежимЗаписи = РежимЗаписиДокумента.Проведение
			И НЕ ЭтотОбъект.НеВыгружатьВБУ Тогда
			
		ЭтоПоступлениеНаСклад = (ЭтотОбъект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад);																							
			
		Для каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			
			//+++AK susk
			// убираю, противоречит новой логике приходования ОС
			
			//Если НЕ ЭтоПоступлениеНаСклад Тогда
			//	Если не ЗначениеЗаполнено(СтрокаТЧ.ТорговаяТочка) Тогда
			//		Сообщить("Не заполнена торговая точка в строке № " + СтрокаТЧ.НомерСтроки);
			//		Отказ = Истина;
			//	КонецЕсли;	
			//КонецЕсли;
			
			//---AK susk
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) Тогда
				Сообщить("Не заполнен счет учета БУ в табличной части оборудование в строке № " + СтрокаТЧ.НомерСтроки);
				Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		ДобавитьТоварыИзОрдеров(Отказ);
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ЭтотОбъект.ПриходныеОрдера.Количество() > 0 Тогда
			
			ЕстьОшибки = Ложь;
			Для Каждого Строка Из ЭтотОбъект.ПриходныеОрдера Цикл
				Если НЕ Строка.ПриходныйОрдер.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика
					//+++ZEZA  наверное нужно избавиться от Обуховского вида Приходного ордера
					И Строка.ПриходныйОрдер.ВидОперации <> Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика	
					И Строка.ПриходныйОрдер.ВидОперации <> Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки	Тогда
					//ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЦикла;
		
			Если ЕстьОшибки Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Невозможно провести документ! Имеются приходные ордера с видом операции, отличным от <<Поступление от поставщика>>", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки Тогда
		Если ЭтотОбъект.Дата >= '20150801' Тогда
			//mind определение счетов учета по каждой номенклатуре
			ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ЭтотОбъект.Услуги.ВыгрузитьКолонку("Продукция"), Дата);
			
			Для Каждого СтрокаУслуги Из ЭтотОбъект.Услуги Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаУслуги.Продукция) Тогда
					Сообщить("В табличной части услуг в строке " + СтрокаУслуги.НомерСтроки + " не указана продукция для отражения затрат по услуге");
					Отказ = Истина;
				КонецЕсли;
				СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаУслуги.Продукция, "Номенклатура");
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					СтрокаУслуги.СчетЗатрат = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска Тогда
						СтрокаУслуги.Субконто1 = СтрокаУслуги.Продукция;
						СтрокаУслуги.Субконто2 = СтруктурнаяЕдиница.СкладТорговогоЗала;
						СтрокаУслуги.Субконто3 = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = ПланыСчетов.Финансовый.Товары Тогда
						СтрокаУслуги.Субконто1 = СтруктурнаяЕдиница;
						СтрокаУслуги.Субконто2 = СтрокаУслуги.Продукция;
						СтрокаУслуги.Субконто3 = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
					Иначе	
						СтрокаУслуги.Субконто1 = СтрокаУслуги.Продукция;
						СтрокаУслуги.Субконто2 = Неопределено;
						СтрокаУслуги.Субконто3 = Неопределено;
					КонецЕсли;
				Иначе	
					Если СтрокаУслуги.Продукция.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						СтрокаУслуги.СчетЗатрат = ПланыСчетов.Финансовый.МатералыДляВыпуска;
						СтрокаУслуги.Субконто1 = СтрокаУслуги.Продукция;
						СтрокаУслуги.Субконто2 = СтруктурнаяЕдиница.СкладТорговогоЗала;
						СтрокаУслуги.Субконто3 = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
					Иначе
						СтрокаУслуги.СчетЗатрат = ПланыСчетов.Финансовый.Товары;
						СтрокаУслуги.Субконто1 = СтруктурнаяЕдиница;
						СтрокаУслуги.Субконто2 = СтрокаУслуги.Продукция;
						СтрокаУслуги.Субконто3 = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			
			Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
				СтрокаТовар.Цена 		= 0;
				СтрокаТовар.СуммаНДС 	= 0;
				СтрокаТовар.Сумма 		= 0;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	
	
	//+++АК
	//АК БЕЛН 28.03.2016++
		//Если ДокументыПолучены и Не ЗначениеЗаполнено(СтатусПолученныхДокументов) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Заполните статус документов", Отказ);
		//КонецЕсли; 
	//АК БЕЛН 28.03.2016--
	//
	
	ЕстьМатериалы = Ложь;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Для каждого СтрокаТЗ Из ЭтотОбъект.Товары Цикл
			Если СтрокаТЗ.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
				Отказ = Истина;
				Сообщить("В табличной части товары запрещено использовать счет 10.9");  
			КонецЕсли;	
	    КонецЦикла;
		
		//
		НомерСтроки = 1;
		Для каждого СтрокаТЗ Из ЭтотОбъект.Услуги Цикл
			 
			Если ЗначениеЗаполнено(СтрокаТЗ.СчетЗатрат) Тогда
				
				Если СтрокаТЗ.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы) И
					СтрокаТЗ.СчетЗатрат <> ПланыСчетов.Финансовый.Инвентарь Тогда
					ЕстьМатериалы = Истина;
				КонецЕсли;
				
				Если СтрокаТЗ.СчетЗатрат = ПланыСчетов.Финансовый.Инвентарь Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части услуги запрещено использовать счет 10.9", Отказ);					
				КонецЕсли;	
					
				//
				Сч = 1;
				Для каждого ЭлементВидСубконто Из СтрокаТЗ.СчетЗатрат.ВидыСубконто Цикл
					
					//
					Если ЭлементВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
						
						ЗначениеСубконто = СтрокаТЗ["Субконто" + Сч];
						Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
							
							СтруктураРезультат = ПолучитьЦФОТорговойТочки(Дата, ЗначениеСубконто);
							
							ЦФО = СтруктураРезультат.ЦФО;
							Если ЗначениеЗаполнено(ЦФО)
									И ЗначениеЗаполнено(СтруктураРезультат.Организация)
									И СтруктураРезультат.Организация <> Организация Тогда
								Сообщить("В строке №" + НомерСтроки + " Организация ЦФО ТТ: """  + СтруктураРезультат.Организация + """ не соответствует организации в шапке: """ + Организация + """");
								//Отказ = Истина; //Минеев отключил в связи с переходом организаций
							КонецЕсли; 
							
						КонецЕсли; 
						
					//
					ИначеЕсли ЛОЖЬ
							И ЭлементВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ЦФО Тогда
						
						ЗначениеСубконто = СтрокаТЗ["Субконто" + Сч];
						Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
							
							ЦФО = ЗначениеСубконто;
							Если ЗначениеЗаполнено(ЦФО)
									И ЦФО.Организация <> Организация Тогда
								Сообщить("В строке №" + НомерСтроки + " ЦФО - "  + ЦФО.Организация + "." + ЦФО + " не соответствует - " + Организация);
								//Отказ = Истина; //Минеев отключил в связи с переходом организаций
							КонецЕсли; 
							
						КонецЕсли; 	
						
					КонецЕсли;
					
					//
					Сч = Сч + 1;
					
				КонецЦикла;	
				
			КонецЕсли; 
			
			//
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если ЕстьМатериалы
			И НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		НачалоУчётаМСФО = АК_УчетМСФОПривилегированный.ПолучитьДатуНачалаУчетаМСФО();
		Если Дата >= НачалоУчётаМСФО Тогда
			Отказ = Истина;
			Сообщить("Для учета материалов необходимо заполнить статью затрат!");
		КонецЕсли;	
	КонецЕсли;	
	
	//---АК
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Отказ
					ИЛИ ЕстьЦеныВнеДиапазона()
	КонецЕсли;
	
	//
	АК_УчетМСФО.УстановитьДатуОтраженияМСФО(ЭтотОбъект);	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не ДокументыПолучены Тогда
			//Отказ = Истина;
			//Сообщить("Внимание! Проведение без ""Документы получены"" запрещено.",СтатусСообщения.ОченьВажное);
		КонецЕсли;	
		Если ДокументыПолучены И НЕ СтатусПолученныхДокументов = Перечисления.СтатусыПолученныхДокументов.ПринятыПоЭДО Тогда
			Если Не ЗначениеЗаполнено(УПД) Тогда
				Если Не ЗначениеЗаполнено(РасходнаяНакладнаяИмяФайла) И Не ЗначениеЗаполнено(АктОбОказанииУслугИмяФайла) И НЕ ЗначениеЗаполнено(Акт) Тогда
					//Отказ = Истина;
					//Сообщить("Внимание! Проведение без скана акта/накладной или УПД запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(СчетФактураПолученныйИмяФайла) И НЕ ЗначениеЗаполнено(СчетФактура) И ВариантРасчетаНДС<>Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
					//Отказ = Истина;
					//Сообщить("Внимание! Проведение без скана фактуры или УПД запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	//+++АК Susk (Суслин К.В.) 2018.02.28 ИП-00017676.02
	ПроверкаЗаполненностиРеквизитовСчетФактуры(Отказ, РежимЗаписи);
	//---АК Susk (Суслин К.В.) 	 
	
	//+++АК sole 2018.07.11 ИП-00018320.09
	ПроверкаКоличествоПретензияКПеревозчикуНаОтрицательныеЗначения(Отказ);
	//---АК sole 2018.07.11 ИП-00018320.09
	
	//+++АК Susk (Суслин К.В.) 2018.08.30 ИП-00019041.02
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА Тогда
		РаботаСДиалогамиКлиент.ПроверитьСтатьюДДССчетУчетаРасчетовОбъектаСВопросом(ЭтотОбъект);
	Иначе
		ЗаполнитьТЧДокументаПоНМА();
	КонецЕсли;
	//---АК Susk (Суслин К.В.)
	
КонецПроцедуры

//+++АК sole 2018.07.11 ИП-00018320.09
Процедура ПроверкаКоличествоПретензияКПеревозчикуНаОтрицательныеЗначения(Отказ)
	
	Для Каждого Стр Из ЭтотОбъект.Товары Цикл
		Если Стр.КоличествоПретензияКПеревозчику >= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		Отказ = Истина;
		Сообщить("Товары, строка №" + Формат(Стр.НомерСтроки,"ЧГ=0") + " значение колонки ""Прет. к перевозчику"" не должно быть отрицательным!", СтатусСообщения.Важное);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если НЕ Отказ
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ЭтотОбъект.ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ДокументОснование = &ДокументОснование
		|	И ПоступлениеТоваровУслуг.Проведен";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.СуммаДокумента)
					И Выборка.СуммаДокумента > ЭтотОбъект.ДокументОснование.СуммаДокумента Тогда
				Предупреждение("Сумма поступлений, привязанных к заявке <" + ЭтотОбъект.ДокументОснование + ">, превысила сумму заявки", 60);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
	//+++АК
	
	Если НЕ Отказ Тогда
		//АК БЕЛН 28.03.2016++
		УстановитьПривилегированныйРежим(Истина);
		Если ТекЗаявка <> ДокументОснование
				И ЗначениеЗаполнено(ТекЗаявка) Тогда
			//ОбЗавка=ТекЗаявка.ПолучитьОбъект();
			//ОбЗавка.СтатусПолученныхДокументов=Перечисления.СтатусыПолученныхДокументов.ПустаяСсылка();
			//ОбЗавка.ВсеДокументыВНаличии=Ложь;
			//ОбЗавка.ОбменДанными.Загрузка = Истина;
			//ОбЗавка.НеПроверятьДатуЗапретаРедактирования = Истина;
			//ОбЗавка.Записать(РежимЗаписиДокумента.Запись);
			//Сообщить("По заявке "+ТекЗаявка+" не обнаружено поступления. Признак о получении документов будет снят");
			ТекЗаявка = Неопределено;
			Если ЗначениеЗаполнено(ДокументОснование)
					И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
				ТекЗаявка = ДокументОснование;
			КонецЕсли; 
		КонецЕсли;
		//АК БЕЛН 28.03.2016--
		//
		ВсеОК  = Ложь;
		
		//
		МассивФайлов = Новый Массив;
		ТЗ_СписокФайлов = Неопределено;
		
		//
		Если ДополнительныеСвойства.Свойство("ТЗ_СписокФайлов", ТЗ_СписокФайлов) Тогда
			
			//
			МассивФайлов = ТЗ_СписокФайлов.ВыгрузитьКолонку("ИмяФайла");
			
			//
			ВсеОК = Обработки.АК_ПрикреплениеФайлов.ПереместитьФайлыВКаталогХранения(Ссылка, ТЗ_СписокФайлов);	
			
			//
			Оповестить("ЗагруженоПоступление", МассивФайлов);
			
		КонецЕсли;	
		
		//+++АК ILIK 2018.10.11 ИП-00019835
		Документы.ПоступлениеТоваровУслуг.ЗаписатьКППКонтрагента(Ссылка, КППКонтрагента);
		//---АК ILIK
	КонецЕсли; 
	//---АК
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		ЭлементыФормы.НадписьСуммаДокумента1.Заголовок = "НДС (в т. ч.):";	
	Иначе
		ЭлементыФормы.НадписьСуммаДокумента1.Заголовок = "НДС (сверху):";
	КонецЕсли;
	
	ЭлементыФормы.СуммаНДС.Значение = ЭтотОбъект.Товары.Итог("СуммаНДС") + ЭтотОбъект.Услуги.Итог("СуммаНДС") + ЭтотОбъект.Оборудование.Итог("СуммаНДС");
	////АК_БЕЛН_04.04.2016++
	//ЭлементыФормы.ДокументыПолучены.Доступность				= (ЭтотОбъект.Товары.Количество() > 0);
	//ЭлементыФормы.СтатусПолученныхДокументов.Доступность	= (НЕ ЭтотОбъект.Товары.Количество() > 0);
	////АК_БЕЛН_04.04.2016--
	
	ЭлементыФормы.ДокументыПолучены.Доступность = Ложь;
	ЭлементыФормы.СтатусПолученныхДокументов.Доступность = Истина;
	
	//+++АК SHEP 2018.04.27 ИП-00018321.02
	Если ТранспортныеУслуги Тогда
		ТранспортныеДокументыСуммаПодвалаОбновить();
	КонецЕсли;
	//---АК SHEP 2018.04.27
	
КонецПроцедуры


///////////////////
// Реквизиты формы
///////////////////

Процедура ВидОперацииПриИзменении(Элемент)
	
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Ответ = Вопрос("Табличная часть документа будет очищена. Продолжить?", Режим, 0);
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	Товары.Очистить();
	//КонецЕсли;
	
	//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055
	ПроверкаЗаполненияРеквизитовПоНМА();
	//---АК Susk (Суслин К.В.) 
	
	УстановитьВидимостьДоступность();
	
	//+++АК Susk (Суслин К.В.) 2018.10.23 ИП-00020055
	мТекущийВидОперации = ВидОперации;
	//---АК Susk (Суслин К.В.) 	 
	
	//Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
	//		И ЭтотОбъект.Услуги.Количество() > 0 Тогда
	//	ЭтотОбъект.Услуги.Очистить();
	//КонецЕсли;                                                                                                               
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент) Экспорт
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	Если НЕ ДоговорКонтрагента.Организация = Элемент.Значение Тогда
		ДоговорКонтрагента = Неопределено;
		ОбработатьВыборКонтрагента(ЭтотОбъект.Контрагент);	
	КонецЕсли;
	
КонецПроцедуры

Процедура НеВыгружатьВБУПриИзменении(Элемент)
	//+++AK bara ИП-00015442.000.00000001
	Если ЭтотОбъект.НеВыгружатьВБУ Тогда
		ЭлементыФормы.АК_НеВыгружатьВБУПоясниение.Видимость = Истина;
	Иначе
		ЭлементыФормы.АК_НеВыгружатьВБУПоясниение.Видимость = Ложь;
	КонецЕсли;
	//---AK bara ИП-00015442.000.00000001
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	//Если Элемент.Значение <> ЭтотОбъект.Склад.Владелец Тогда
	//	ЭтотОбъект.Склад = Неопределено;
	//КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)  Экспорт
	
	Если Элемент.Значение.ВАрхиве Тогда
		Предупреждение("Вы выбрали архивного контрагента. Его контактные данные также находятся в архиве", 120);
	КонецЕсли;	
	
	//+++АК SUVV 2018.02.20 ИП-00017941
	//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Элемент.Значение.СтатьяДвиженияДенежныхСредств, Контрагент);
	МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Дата, Элемент.Значение.СтатьяДвиженияДенежныхСредств, Контрагент);
	//---АК SUVV
	
	Если МассивСчетов.Количество() = 1 Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
	Иначе
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = Планысчетов.Финансовый.РасчетыСПоставщиками;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = Планысчетов.Финансовый.ПрочаяЗадолженность;
	КонецЕсли;	
	
	Если НЕ ДоговорКонтрагента.Владелец = Элемент.Значение Тогда
		ЭтотОбъект.ДоговорКонтрагента = Неопределено;
		ОбработатьВыборКонтрагента(Элемент.Значение);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		СчетУчетаРасчетовСКонтрагентом = ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента)
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		ЭтотОбъект.Организация = ЭтотОбъект.ДоговорКонтрагента.Организация;
	////	ЗаполнитьОрганизациюПоДоговоруКонтрагента();
	////Иначе
	////	//ОбработатьВыборКонтрагента(Элемент.Значение);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЭтотОбъект.ВариантРасчетаНДС = ?(Элемент.Значение.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	КонецЕсли;
	
	//+++АК GEYV 24.09.2015
	ПроизвестиУплатуНДФЛ = ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента;
	
	ПроизвестиУплатуНДФЛПриИзменении(Элемент);
	//---АК
	//АК БЕЛН 27.04.2016++
	ЗаполнитьСписокВыбораТовары();
	ЗаполнитьСписокВыбораУслуги();
	//АК БЕЛН 27.04.2016--
	
	//+++АК ILIK 2018.10.10 ИП-00019835
	ЗаполнитьКППКонтрагента(Истина);
	//---АК ILIK	
	
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();
		ФормаВыбора.НачальноеЗначениеВыбора = Контрагент;
		
		Результат = ФормаВыбора.ОткрытьМодально();
		Если НЕ Результат = Неопределено Тогда
			ОбработатьВыборКонтрагента(Результат);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент) Экспорт
	
	Если (НЕ Элемент.Значение.Пустая())
			И НЕ ЭтотОбъект.Организация = ЭтотОбъект.ДоговорКонтрагента.Организация Тогда
		ЭтотОбъект.Организация = ЭтотОбъект.ДоговорКонтрагента.Организация;
		Если НЕ ПустаяСтрока(ЭтотОбъект.Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента)
			И ЗначениеЗаполнено(ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		СчетУчетаРасчетовСКонтрагентом = ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	//+++АК GEYV 24.09.2015
	ПроизвестиУплатуНДФЛ = ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента;
	
	ПроизвестиУплатуНДФЛПриИзменении(Элемент);
	//---АК
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	
	Если ЭтотОбъект.Склад.Пустая()
		 	И НЕ ЭтотОбъект.СтруктурнаяЕдиница.Пустая() Тогда
		Возврат; 
	КонецЕсли;
	
	ЭтотОбъект.СтруктурнаяЕдиница = ЭтотОбъект.Склад.Владелец;
	
КонецПроцедуры

Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		СтандартнаяОбработка = Ложь;
		    
		Форма = Справочники.Склады.ПолучитьФормуВыбора(, ЭтаФорма);
		Форма.СтруктурнаяЕдиница = ЭтотОбъект.СтруктурнаяЕдиница;
		Результат = Форма.ОткрытьМодально();
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Элемент.Значение = Результат;
			СкладПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	//Товары
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		Если Элемент.Значение = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(СтрокаТЧ.Номенклатура);
		
			Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
				
			ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
				СтрокаТЧ.СтавкаНДС = СтрСтавкиПоХарактеристике.СтавкаНДС;
			Иначе
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		
	КонецЦикла;	
	
	ПосчитатьСуммуТабличнойЧасти();
	
	//Оборудование
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		
		Если Элемент.Значение = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		КонецЕсли;
		Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
		
	КонецЦикла;	
	
	//+++AK susk
	// суть в том, что по оборудованию сумма НДС считается по каждой строке, а в базе бухгалтерии сворачивается и НДС считается от 
	// свернутой суммы, что может приводить к тому, что суммы НДС между базами будут разниться на копейку или две (из-за округлений).
	// Поэтому для каждой строки, где какая-либо номенклатура повторяется больше 1 раза, вызываем процедуру, 
	// которая делает пересчет НДС по строкам данной позиции и выравнивает сумму, чтобы она совпадала с суммой, которая будет посчитана
	// в базе бухгалтерии.
	ОборудованиеКопия = Оборудование.Выгрузить(,"Номенклатура, СтавкаНДС");
	ОборудованиеКопия.Свернуть("Номенклатура, СтавкаНДС");
	
	Для Каждого Стр Из ОборудованиеКопия Цикл		
		НайдСтроки = Оборудование.НайтиСтроки(Новый Структура("Номенклатура, СтавкаНДС", Стр.Номенклатура, Стр.СтавкаНДС));
		
		Если НайдСтроки.Количество() > 1 Тогда
			РасчетСуммыНДСПоОборудованию(НайдСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	//---AK susk
	
КонецПроцедуры

Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(ЭтотОбъект.Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		ЭтотОбъект.Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;

КонецПроцедуры


///////////////
// ТОВАРЫ
///////////////

Процедура КоманднаяПанельТоварыОбновитьЦены(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриходИзПереработки Тогда
			СтрокаТЧ.Цена = 0;
			ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
		Иначе
			ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		КонецЕсли;	
		
	КонецЦикла;
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	
	ДатаСоставляющих = '00010101';
	Для Каждого ЭлементОрдер Из МассивОрдеров Цикл
		ДатаСоставляющих = Макс(ДатаСоставляющих, ЭлементОрдер.Дата);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("Номенклатура"	, ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("МаксДата"		, ДатаСоставляющих);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|	КОНЕЦ КАК Номенклатура
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
	|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|			И (ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие = ЛОЖЬ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И ВЫБОР
	|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|				ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|			ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|		КОНЕЦ = &Номенклатура";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Предупреждение("Товар присутствует в ордерах. Удаление строки запрещено!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ВОрдерах = ПолучитьКоличествоВОрдерах(ДанныеСтроки.Номенклатура);	
		ПредыущееКоличествоВНакладной = ДанныеСтроки.ПоПриходнымОрдерам;
		
		Если ВОрдерах <> ПредыущееКоличествоВНакладной Тогда
			ОформлениеСтроки.Ячейки.ВОрдерах.Значение = Строка(Формат(ПредыущееКоличествоВНакладной, "ЧДЦ=3")) + " → " +
														Строка(Формат(ВОрдерах, "ЧДЦ=3"));
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		Иначе
			ОформлениеСтроки.Ячейки.ВОрдерах.Значение = Строка(Формат(ВОрдерах, "ЧДЦ=3"));
			ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		
		//+++АК sole 2018.07.05 ИП-00018320
		//КоличествоПретензияКПоставщику = ДанныеСтроки.Количество - ДанныеСтроки.ПоПриходнымОрдерам - ДанныеСтроки.КоличествоПретензияКСкладу;
		КоличествоПретензияКПоставщику = 
			ДанныеСтроки.Количество - ДанныеСтроки.ПоПриходнымОрдерам - ДанныеСтроки.КоличествоПретензияКСкладу - ДанныеСтроки.КоличествоПретензияКПеревозчику;
		//---АК sole 2018.07.05 ИП-00018320

		ОформлениеСтроки.Ячейки.КоличествоПретензияКПоставщику.Значение = КоличествоПретензияКПоставщику;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекНоменклатура = Элемент.Значение;
	Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
		
		//+++АК Susk (Суслин К.В.) 2018.07.24 ИП-00019275
		
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.

		#Область ЗакоментКод_ТоварыНоменклатураПриИзменении 
		//Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//		ИЛИ ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.Товары;
		//ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//КонецЕсли;
		//
		//Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//КонецЕсли;
		//
		//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ТекНоменклатура, Дата);
		//Если ТабСчетаУчета.Количество() > 0
		//	И ЗначениеЗаполнено(ТабСчетаУчета[0].СчетУчета) Тогда
		//	ТекСчетУчета = ТабСчетаУчета[0].СчетУчета;
		//КонецЕсли;
		#КонецОбласти
		
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		//СтрокаТабличнойЧасти.СчетУчета 				= ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), ПланыСчетов.Финансовый.Товары, ТекСчетУчета);
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(ТекНоменклатура, Дата);		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);
		//---АК Susk (Суслин К.В.) 
		
		Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье Тогда
			СтрокаТабличнойЧасти.СтатьяТовародвижения 	= ?(ЭтотОбъект.Дата >= '20150801',
															Справочники.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика,
															Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика);
		Иначе
			СтрокаТабличнойЧасти.СтатьяТовародвижения 	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		КонецЕсли;	
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= ТекНоменклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент 			= ТекНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(ТекНоменклатура);
		
			Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
				
			ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрСтавкиПоХарактеристике.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = ТекНоменклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		//АК БЕЛН 27.04.2016++
		ЗаполнитьСписокВыбораТовары();
		//АК БЕЛН 27.04.2016--
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидНоменклатуры.Доступность = Ложь;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка Тогда
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.ВидСравнения = ВидСравнения.ВСписке;
		СписокВидовНоменклатуры = Новый СписокЗначений;
		СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Товар);
		СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Материал);
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение 	= СписокВидовНоменклатуры;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение 	= Перечисления.ВидыНоменклатуры.Оборудование;
	Иначе
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.ВидСравнения = ВидСравнения.ВСписке;
		СписокВидовНоменклатуры = Новый СписокЗначений;
		СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Товар);
		СписокВидовНоменклатуры.Добавить(Перечисления.ВидыНоменклатуры.Материал);
		ФормаВыбора.СправочникСписок.Отбор.ВидНоменклатуры.Значение 	= СписокВидовНоменклатуры;
	КонецЕсли;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	ПосчитатьСуммуСтрокиТЧ(ТекСтрока);
	
КонецПроцедуры

Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
	НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
	Если НЕ НовоеЗначениеКоэффициента = СтароеЗначениеКоэффициента Тогда
		СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;
		ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	//+++АК sole 2018.07.05 ИП-00018320
	// КолвоПретензияКПоставщику = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.ПоПриходнымОрдерам - СтрокаТабличнойЧасти.КоличествоПретензияКСкладу;
	КолвоПретензияКПоставщику = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.ПоПриходнымОрдерам - СтрокаТабличнойЧасти.КоличествоПретензияКСкладу - СтрокаТабличнойЧасти.КоличествоПретензияКПеревозчику;
	//---АК sole 2018.07.05 ИП-00018320

	СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма / (СтрокаТабличнойЧасти.Количество - КолвоПретензияКПоставщику), 2);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыСуммаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РазрешеноРедактированиеСумм = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеСуммВДокументеПоступления, Ложь);
	
	Если НЕ РазрешеноРедактированиеСумм Тогда
		
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
		
		// Проверим пределы редактирования суммы
		СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
		
		НайденноеЗначение = Неопределено;
		СтруктураПределов.Свойство("СуммаМаксимум", НайденноеЗначение);
		
		Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
			Значение = СтрокаТабличнойЧасти.Сумма;
			Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
			Возврат;
		КонецЕсли;
		
		НайденноеЗначение = Неопределено;
		СтруктураПределов.Свойство("СуммаМинимум", НайденноеЗначение);
		
		Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
			Значение = СтрокаТабличнойЧасти.Сумма;
			Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыСуммаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	// Проверим пределы редактирования суммы
	СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧ(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
	
	НайденноеЗначение = Неопределено;
	СтруктураПределов.Свойство("СуммаНДСМаксимум", НайденноеЗначение);
	
	Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = СтрокаТабличнойЧасти.СуммаНДС;
		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
		Возврат;
	КонецЕсли;
	
	НайденноеЗначение = Неопределено;
	СтруктураПределов.Свойство("СуммаНДСМинимум", НайденноеЗначение);
	
	Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Значение = СтрокаТабличнойЧасти.СуммаНДС;
		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


///////////////
// УСЛУГИ
///////////////

Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки) Тогда 
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда 
		Возврат;	
	КонецЕсли;
	
	//
	Если ДанныеСтроки.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы)
			И ДанныеСтроки.СчетЗатрат <> ПланыСчетов.Финансовый.Инвентарь
			И ДанныеСтроки.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		
		ОформлениеСтроки.Ячейки.Субконто1.УстановитьТекст("<Авто>");
		ОформлениеСтроки.Ячейки.Субконто1.ЦветТекста = ЦветаСтиля.СтатусОтложен;
		
		ОформлениеСтроки.Ячейки.Субконто2.УстановитьТекст("<Авто>");
		ОформлениеСтроки.Ячейки.Субконто2.ЦветТекста = ЦветаСтиля.СтатусОтложен;
		
		ОформлениеСтроки.Ячейки.Субконто3.УстановитьТекст("<Авто>");
		ОформлениеСтроки.Ячейки.Субконто3.ЦветТекста = ЦветаСтиля.СтатусОтложен;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.Номенклатура) Тогда
		
		Если ВыбраннаяСтрока.Номенклатура.ВидНоменклатуры  = Перечисления.ВидыНоменклатуры.Материал Тогда
			
			Если ЗначениеЗаполнено(ВыбраннаяСтрока.СчетЗатрат) Тогда
				
				Если ВыбраннаяСтрока.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Материалы) 
						И НЕ ВыбраннаяСтрока.СчетЗатрат = ПланыСчетов.Финансовый.Инвентарь Тогда
					
					Если ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто1")
							ИЛИ ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто2")
							ИЛИ	ВРЕГ(Колонка.Имя) = ВРЕГ("Субконто3") Тогда
							
						СтандартнаяОбработка = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
    КонецЕсли;
	
КонецПроцедуры
 

//+++АК SHEP 2018.04.27 ИП-00018321.02: добавил доп. параметр ПредлагатьАвтоПодбор
Процедура УслугиНоменклатураПриИзменении(Элемент, ПредлагатьАвтоПодбор = Истина)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Контрагент.СтавкаНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		
		СчетаЗатрат = Справочники.Номенклатура.ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СчетаЗатрат);
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
			СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ПрочиеМатериалы;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатратБУ) Тогда
			СтрокаТабличнойЧасти.СчетЗатратБУ = ПолучитьСчетБУПоСтатистике(СтрокаТабличнойЧасти.Номенклатура);	
		КонецЕсли;
		
	Иначе	
		
		СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
		
	КонецЕсли;
	
	//+++АК Susk (Суслин К.В.) 2018.02.13 ИП-00017787
	Если ПредлагатьАвтоПодбор <> Ложь Тогда
	АвтоподборСчетаИАналитики(СтрокаТабличнойЧасти);
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратБУ, 
		СтрокаТабличнойЧасти.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
		СтрокаТабличнойЧасти.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
		СтрокаТабличнойЧасти.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);
		
	ЗаполнитьСчетНалоговогоУчета();
	//АК БЕЛН 27.04.2016++
	ЗаполнитьСписокВыбораУслуги();
	//АК БЕЛН 27.04.2016--
КонецПроцедуры

Функция ПолучитьСчетБУПоСтатистике(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ
		|ПОМЕСТИТЬ втКоличество
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКоличество.СчетЗатратБУ,
		|	втКоличество.Количество КАК Количество
		|ИЗ
		|	втКоличество КАК втКоличество
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат     ВыборкаДетальныеЗаписи.СчетЗатратБУ;
	КонецЦикла;

	Возврат ПланыСчетов.Хозрасчетный.ПрочиеМатериалы;
	
КонецФункции	

Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Услуги.ТекущаяСтрока);
	
КонецПроцедуры

Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Услуги.ТекущаяСтрока);
	
КонецПроцедуры

Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекДанные.Количество<>0 Тогда
		ТекДанные.Цена=ТекДанные.Сумма/ТекДанные.Количество;
	ИначеЕсли ТекДанные.Цена<>0 Тогда
		ТекДанные.Количество=ТекДанные.Сумма/ТекДанные.Цена;
	Иначе
		
	КонецЕсли;	
	РассчитатьСуммуНДСТабЧасти(ТекДанные, ЭтотОбъект.ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура УслугиСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
													СтрокаТабличнойЧасти.Субконто1, мКолонкиУслуги.Субконто1,
													СтрокаТабличнойЧасти.Субконто2, мКолонкиУслуги.Субконто2,
													СтрокаТабличнойЧасти.Субконто3, мКолонкиУслуги.Субконто3);
	
	мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если НЕ СтрокаТабличнойЧасти.Субконто2 = мСтатьяДР Тогда
			СтрокаТабличнойЧасти.Субконто2 = мСтатьяДР;
		КонецЕсли;
									
	КонецЕсли;
	
	//+++ZEZA
	
	//
	УслугиОбработкаИнформацииОСчетеЗатратИСубконто(СтрокаТабличнойЧасти);
	
	//---ZEZA
	
	//+++АК Susk (Суслин К.В.) 2018.08.02 
	ИзменениеСчетаИлиСубконтоДляБУ(Ложь);
	//---АК Susk (Суслин К.В.) 	 
	
КонецПроцедуры

Процедура УслугиСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		СтрокаТабличнойЧасти.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
		СтрокаТабличнойЧасти.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
		СтрокаТабличнойЧасти.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);
		
	ЗаполнитьСчетНалоговогоУчета();

КонецПроцедуры

Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		СтрокаТабличнойЧасти.СубконтоНУ1, мКолонкиУслуги.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2, мКолонкиУслуги.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3, мКолонкиУслуги.СубконтоНУ3);

КонецПроцедуры

Процедура УслугиСубконтоБУ1ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	//+++AK susk
	// Для счета 08.1 запрещаем ставить статью затрат БУ отличную от той, которая указана в регистре соответствия
	// статей др и статей др бу (берем статью др из статьи ДДС в субконто 1 фин)
	Если СтрокаТЧ.СчетЗатрат = ПланыСчетов.Финансовый.КапитальныеВложения 
		И ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")
		И ТипЗнч(СтрокаТЧ.СубконтоБУ1) = Тип("СправочникСсылка.СтатьиЗатратБУ") Тогда
			ПроверитьКорректностьУказанияСтатьиБУ(СтрокаТЧ);
	КонецЕсли;
	//---AK susk	
	
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.СубконтоБУ1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры

Процедура УслугиСубконтоБУ2ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.СубконтоБУ2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры

Процедура УслугиСубконтоБУ3ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.СубконтоБУ3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры

Функция МожноРедактироватьСтатьюДРВСтроке(Элемент)
	
	Перем мНеПроверять, мСтатьяДР;
	
	мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
		
		//+++АК SUVV 2018.02.20 ИП-00017941
		//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если ЗначениеЗаполнено(мСтатьяДР)
				И НЕ мСтатьяДР = Элемент.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УслугиСубконто2ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);
	//
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
		
		мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
		Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
			
			//+++АК SUVV 2018.02.28 ИП-00017941
			//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
			мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
			//---АК SUVV
			Если ЗначениеЗаполнено(мСтатьяДР)
				И НЕ мСтатьяДР = Элемент.Значение Тогда
				Сообщить("Недостаточно прав для указания статьи, не соответствующей заявке на расходование средств.");
				Элемент.Значение = мСтатьяДР;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+++ZEZA
	
	//mind отрубил, не дает менять субконто
	//ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	//Если ТекущиеДанные <> Неопределено Тогда
	//	УслугиОбработкаИнформацииОСчетеЗатратИСубконто(ТекущиеДанные);
	//КонецЕсли;
	
	//---ZEZA
	
	//+++AK susk
	//Убираю по задаче ИП-00018930
	//удалить в сентябре 2018, когда обкатаем механизм.
	
	//ТекСтрока = ЭлементыФормы.Услуги.ТекущаяСтрока;
	//
	//Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") И ТипЗнч(ТекСтрока.СубконтоБУ1) = Тип("СправочникСсылка.СтатьиЗатратБУ") Тогда
	//	
	//	ТекСтрока.СубконтоБУ1 = ПолучитьСтатьюЗатратБухПоСтатьеДР(Элемент.Значение, ТекСтрока.СчетЗатрат);
	//	УслугиСубконтоБУ1ПриИзменении(ЭлементыФормы.Услуги.ТекущаяСтрока.СубконтоБУ1);
	//	
	//КонецЕсли;
	
	//---AK susk
	
	//+++АК Susk (Суслин К.В.) 2018.08.02 	 
	ИзменениеСчетаИлиСубконтоДляБУ();
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

Процедура УслугиСубконто2Очистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
		Возврат;
	КонецЕсли;	
	
	мНеПроверять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДРПриПроведенииПоступленияУслуг, Ложь);
	Если ЭтотОбъект.Проведен
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И НЕ мНеПроверять Тогда
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		мСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.ДокументОснование.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV 
		Если ЗначениеЗаполнено(мСтатьяДР) Тогда
			Сообщить("Недостаточно прав для указания статьи, не соответствующей заявке на расходование средств.");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;							
	КонецЕсли;
	
КонецПроцедуры


/////////////////
// ОБОРУДОВАНИЕ
/////////////////

Процедура Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)
	
	//Используется также в ВариантРасчетаНДСПриИзменении()
	
	//+++AK susk
	//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВариантРасчетаНДС);
	
	РасчетСуммыНДСПоОборудованию(СтрокаТабличнойЧасти);
	//---AK susk
		
КонецПроцедуры

Процедура УстановитьОС(пСтрока) 
	
	Если ЗначениеЗаполнено(пСтрока.ОсновноеСредство)
			И Найти(пСтрока.ОсновноеСредство, "<Объект не найден>") = 0 Тогда
		обСпр = пСтрока.ОсновноеСредство.ПолучитьОбъект();
	Иначе
		обСпр = Справочники.ОсновныеСредства.СоздатьЭлемент();
		обСпр.Наименование = пСтрока.Номенклатура.Наименование;
	КонецЕсли;
	
	обСпр.Номенклатура 				= пСтрока.Номенклатура;
	обСпр.ПервоначальнаяСтоимость 	= пСтрока.Сумма;
	
	//АК_ОсновныеСредства.ЗаполнитьРеквизитыОСПоСтатистике(обСпр);	
	
	
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Не  ЗначениеЗаполнено(обСпр.ИнвентарныйНомер) Тогда
		обСпр.ИнвентарныйНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
										И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ИнвентарныйНомер);
	КонецЕсли;
									
	обСпр.ЗаводскойНомер 	= ?(НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер)
									И НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер), обСпр.Код, пСтрока.ЗаводскойНомер);
	Попытка
		обСпр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(пСтрока.ИнвентарныйНомер) Тогда
		пСтрока.ИнвентарныйНомер 	= обСпр.ИнвентарныйНомер;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(пСтрока.ЗаводскойНомер) Тогда
		пСтрока.ЗаводскойНомер 		= обСпр.Код;
	КонецЕсли;
	
	пСтрока.ОсновноеСредство = обСпр.Ссылка;
	
	Если не ЗначениеЗаполнено(пСтрока.СчетУчета) Тогда
		пСтрока.СчетУчета = АК_ОсновныеСредства.ПолучитьОсновнойСчетУчета(пСтрока.Номенклатура);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(пСтрока.СчетУчетаБУ) Тогда
		УстановитьСчетаУчетаБУНУВСтроке(пСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОборудованиеСоздатьОсновныеСредства(Кнопка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			УстановитьОС(СтрокаТЧ);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при создании ОС по строке № " + СтрокаТЧ.НомерСтроки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьРеквизитыОС()

	ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("ПоказыватьСрок", Ложь);

	Результат = ОткрытьФормуМодально("Документ.ВводВЭксплуатацию.Форма.ФормаЗаполненияТЧ", ПараметрыОткрытия);		
	Если Результат = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	//
	Если Результат.РежимЗаполнения = "Не заполненные" Тогда
		
		Для каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			
			АК_ОсновныеСредства.УстановитьРеквизитыОС(СтрокаТЧ.ОсновноеСредство, Результат, Ложь);				
			АК_ОсновныеСредства.УстановитьСрокПолезногоИспользования(СтрокаТЧ.Номенклатура, Результат.СрокПолезногоИспользования, Истина);
			
		КонецЦикла;			
		
	КонецЕсли;	
	
	Если Результат.РежимЗаполнения = "Все" Тогда
		
		Для каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			
			АК_ОсновныеСредства.УстановитьРеквизитыОС(СтрокаТЧ.ОсновноеСредство, Результат, Истина); 
			АК_ОсновныеСредства.УстановитьСрокПолезногоИспользования(СтрокаТЧ.Номенклатура, Результат.СрокПолезногоИспользования, Истина);
			
		КонецЦикла;			
		
	КонецЕсли;
	
	Если Результат.РежимЗаполнения = "Выделенные" Тогда
		
		СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;
		АК_ОсновныеСредства.УстановитьРеквизитыОС(СтрокаТЧ.ОсновноеСредство, Результат, Истина);
		АК_ОсновныеСредства.УстановитьСрокПолезногоИспользования(СтрокаТЧ.Номенклатура, Результат.СрокПолезногоИспользования, Истина);
		
	КонецЕсли;

КонецПроцедуры	

Процедура КоманднаяПанельОборудованиеУстановитьРеквизиты(Кнопка)
	
	УстановитьРеквизитыОС();
	
	ЭлементыФормы.Оборудование.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ОткрытьРедактированиеОС(ВыбраннаяСтрока)
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	//ПараметрыОткрытия = АК_ОсновныеСредства.СтатистикаРеквизитов(ВыбраннаяСтрока.Номенклатура); 
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа"		, ВыбраннаяСтрока.ОсновноеСредство.АмортизационнаяГруппа);
	ПараметрыОткрытия.Вставить("ГруппаОС"					, ВыбраннаяСтрока.ОсновноеСредство.ГруппаОС);
	ПараметрыОткрытия.Вставить("КодПоОКОФ"					, ВыбраннаяСтрока.ОсновноеСредство.КодПоОКОФ);
	ПараметрыОткрытия.Вставить("СрокПолезногоИспользования"	, ВыбраннаяСтрока.Номенклатура.СрокПолезногоИспользования);
	//ПараметрыОткрытия.Вставить("ПоказыватьСрок"				, Ложь);
	ПараметрыОткрытия.Вставить("ПоказыватьРежим"			, Ложь);
	
	Результат = ОткрытьФормуМодально("Документ.ВводВЭксплуатацию.Форма.ФормаЗаполненияТЧ", ПараметрыОткрытия);	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	АК_ОсновныеСредства.УстановитьРеквизитыОС(ВыбраннаяСтрока.ОсновноеСредство, Результат, Истина);
	АК_ОсновныеСредства.УстановитьСрокПолезногоИспользования(ВыбраннаяСтрока.Номенклатура, Результат.СрокПолезногоИспользования, Истина);
	
КонецПроцедуры	


Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ОсновноеСредство = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОборудованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда	
		
		Если ТекДанные.ОсновноеСредство.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекДанные.ОсновноеСредство.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ТекДанные.Номенклатура = ТекДанные.ОсновноеСредство.Номенклатура Тогда
			ТекДанные.Номенклатура = ТекДанные.ОсновноеСредство.Номенклатура;
		КонецЕсли;
		Если НЕ ТекДанные.ИнвентарныйНомер = ТекДанные.ОсновноеСредство.ИнвентарныйНомер Тогда
			ТекДанные.ИнвентарныйНомер = ТекДанные.ОсновноеСредство.ИнвентарныйНомер;
		КонецЕсли;
		Если НЕ ТекДанные.ЗаводскойНомер = ТекДанные.ОсновноеСредство.ЗаводскойНомер Тогда
			ТекДанные.ЗаводскойНомер = ТекДанные.ОсновноеСредство.ЗаводскойНомер;
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОборудованиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство.ИнвентарныйНомер) Тогда
			ОформлениеСтроки.Ячейки.ИнвентарныйНомер.УстановитьТекст("Будет присвоен после проведения");
			ОформлениеСтроки.Ячейки.ИнвентарныйНомер.ЦветТекста = ЦветаСтиля.СтатусОтложен;
		Иначе 	
			ОформлениеСтроки.Ячейки.ИнвентарныйНомер.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.ИнвентарныйНомер);
       	КонецЕсли;	
 		
		Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство.КодПоОКОФ) Тогда
			ОформлениеСтроки.Ячейки.КодПоОКОФ.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.КодПоОКОФ);
		Иначе 	
			ОформлениеСтроки.Ячейки.КодПоОКОФ.УстановитьТекст("<Не заполнено>");
			ОформлениеСтроки.Ячейки.КодПоОКОФ.ЦветТекста = ЦветаСтиля.СтатусОтложен;
       	КонецЕсли;	
				
		Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство.ГруппаОС) Тогда
			ОформлениеСтроки.Ячейки.ГруппаОС.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.ГруппаОС);
		Иначе 	
			ОформлениеСтроки.Ячейки.ГруппаОС.УстановитьТекст("<Не заполнено>");
			ОформлениеСтроки.Ячейки.ГруппаОС.ЦветТекста = ЦветаСтиля.СтатусОтложен;
       	КонецЕсли;	

		Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство.АмортизационнаяГруппа) Тогда
			ОформлениеСтроки.Ячейки.АмортизационнаяГруппа.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.АмортизационнаяГруппа);
		Иначе 	
			ОформлениеСтроки.Ячейки.АмортизационнаяГруппа.УстановитьТекст("<Не заполнено>");
			ОформлениеСтроки.Ячейки.АмортизационнаяГруппа.ЦветТекста = ЦветаСтиля.СтатусОтложен;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура.СрокПолезногоИспользования) Тогда
			ОформлениеСтроки.Ячейки.СрокПолезногоИспользования.УстановитьТекст(ДанныеСтроки.Номенклатура.СрокПолезногоИспользования);
		Иначе 	
			ОформлениеСтроки.Ячейки.СрокПолезногоИспользования.УстановитьТекст("<Не заполнен>");
			ОформлениеСтроки.Ячейки.СрокПолезногоИспользования.ЦветТекста = ЦветаСтиля.СтатусОтложен;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВРЕГ(Колонка.Имя) = ВРЕГ("АмортизационнаяГруппа")
			ИЛИ	ВРЕГ(Колонка.Имя) = ВРЕГ("КодПоОКОФ")
			ИЛИ	ВРЕГ(Колонка.Имя) = ВРЕГ("ГруппаОС")
			ИЛИ	ВРЕГ(Колонка.Имя) = ВРЕГ("СрокПолезногоИспользования") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьРедактированиеОС(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОборудованиеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Оборудование.ТекущиеДанные;
	ТекущиеДанные.СтавкаНДС = ТекущиеДанные.Номенклатура.СтавкаНДС;
	
	Если ТекущиеДанные.Номенклатура <> ТекущиеДанные.ОсновноеСредство.Номенклатура Тогда
		ТекущиеДанные.ОсновноеСредство 	= Справочники.ОсновныеСредства.ПустаяСсылка();
		ТекущиеДанные.ЗаводскойНомер 	= "";
		ТекущиеДанные.ИнвентарныйНомер 	= "";
	КонецЕсли;
		
	ОборудованиеСтавкаНДСПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура ОборудованиеИнвентарныйНомерПриИзменении(Элемент)
	
	//ТекущиеДанные = ЭлементыФормы.Оборудование.ТекущиеДанные;
	//ТекущиеДанные.ЗаводскойНомер = ТекущиеДанные.ИнвентарныйНомер;
	
КонецПроцедуры

Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;
	Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
	
КонецПроцедуры

Процедура ОборудованиеСуммаПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;
	Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
	
	ПосчитатьСуммуТабличнойЧасти();	//название не совсем адекватно, это расчет суммы документа
	
КонецПроцедуры

Процедура ОборудованиеСуммаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
//	
//	РазрешеноРедактированиеСумм = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеСуммВДокументеПоступления, Ложь);
//	
//	Если Не РазрешеноРедактированиеСумм И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
//		
//		СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущаяСтрока;
//		
//		Если НЕ СтрокаТабличнойЧасти.СчетУчетаЗабалансовый.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ОсновныеСредства) Тогда
//			Возврат;
//		КонецЕсли;
//		
//		// Проверим пределы редактирования суммы
//		СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧПоОборудованию(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
//		
//		НайденноеЗначение = Неопределено;
//		СтруктураПределов.Свойство("СуммаМаксимум", НайденноеЗначение);
//		
//		Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//			СтандартнаяОбработка = Ложь;
//			Значение = СтрокаТабличнойЧасти.Сумма;
//			Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
//			Возврат;
//		КонецЕсли;
//		
//		НайденноеЗначение = Неопределено;
//		СтруктураПределов.Свойство("СуммаМинимум", НайденноеЗначение);
//		
//		Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//			СтандартнаяОбработка = Ложь;
//			Значение = СтрокаТабличнойЧасти.Сумма;
//			Сообщить("Невозможно установить сумму! Отклонение от расчетной суммы превышает максимально допустимое!");
//			Возврат;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
КонецПроцедуры

Процедура ОборудованиеСуммаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
//	
//	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущаяСтрока;
//	
//	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование ИЛИ НЕ СтрокаТабличнойЧасти.СчетУчетаЗабалансовый.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ОсновныеСредства) Тогда
//		Возврат;
//	КонецЕсли; 	
//	
//	// Проверим пределы редактирования суммы
//	СтруктураПределов = Документы.ПоступлениеТоваровУслуг.РасчитатьПределыРедактированияСуммыИНДСВСтрокеТЧПоОборудованию(СтрокаТабличнойЧасти, ВариантРасчетаНДС, Контрагент, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
//	
//	НайденноеЗначение = Неопределено;
//	СтруктураПределов.Свойство("СуммаНДСМаксимум", НайденноеЗначение);
//	
//	Если Элемент.Значение > ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//		СтандартнаяОбработка = Ложь;
//		Значение = СтрокаТабличнойЧасти.СуммаНДС;
//		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
//		Возврат;
//	КонецЕсли;
//	
//	НайденноеЗначение = Неопределено;
//	СтруктураПределов.Свойство("СуммаНДСМинимум", НайденноеЗначение);
//	
//	Если Элемент.Значение < ?(НайденноеЗначение = Неопределено, 0, НайденноеЗначение) Тогда
//		СтандартнаяОбработка = Ложь;
//		Значение = СтрокаТабличнойЧасти.СуммаНДС;
//		Сообщить("Невозможно установить сумму НДС! Отклонение от расчетной суммы превышает максимально допустимое!");
//		Возврат;
//	КонецЕсли;
//	
КонецПроцедуры

Процедура ОборудованиеСчетУчетаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();	
	Элемент.СписокВыбора.Добавить(ПланыСчетов.Финансовый.ОборудованиеДляМонтажа		, "07 Оборудование для монтажа");
	Элемент.СписокВыбора.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств, "08.4 Приобретение основных средств");	
	//+++AK susk
	Элемент.СписокВыбора.Добавить(ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000, "08.10 Приобретение основных средств до 100 000 рублей");	
	//---AK susk
	Элемент.СписокВыбора.Добавить(ПланыСчетов.Финансовый.Инвентарь					, "10.9 ОС для списания на расходы");		
	
КонецПроцедуры

Процедура ОборудованиеСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Оборудование.ТекущиеДанные;
	
	УстановитьСчетаУчетаБУНУВСтроке(ТекущиеДанные);
	
	//длина кода не совпадает
	//Если ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств Тогда
	//	
	//	ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	//	
	//ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
	//	
	//	ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
	//	
	//ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ОборудованиеДляМонтажа Тогда
	//	
	//	ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	//	
	//Иначе 
	//	ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ТекущиеДанные.СчетУчета.Код);
	//КонецЕсли;
	
	//
	//ЕстьСрокАмортизации = (ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Финансовый.ПриобретениеОсновныхСредств"));
	//Если НЕ ЕстьСрокАмортизации Тогда
	//	ТекущиеДанные.СроАмортизации = 0;
	//КонецЕсли;
	//мКолонкиОборудование.СрокАмортизации.ЭлементУправления.РедактированиеТекста = ЕстьСрокАмортизации;
	
КонецПроцедуры

Процедура УстановитьСчетаУчетаБУНУВСтроке(ТекущиеДанные)

	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредств Тогда
		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
		
	//+++AK susk	
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ПриобретениеОсновныхСредствДо100000 Тогда		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
	//---AK susk
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.Инвентарь Тогда
		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Финансовый.ОборудованиеДляМонтажа Тогда
		
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
		
	Иначе 
		ТекущиеДанные.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ТекущиеДанные.СчетУчета.Код);
	КонецЕсли;
	
КонецПроцедуры	

//+++АК SaMi 22.05.2017 
Процедура КоманднаяПанельОборудованиеЗаполнитьПоПредпоступлению(Кнопка = Неопределено)
	
	Если Оборудование.Количество()>0 И Вопрос("Табличная часть будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент, Проведен", Контрагент, Истина));
	ПараметрыФормы.Вставить("ПодборВПоступление", Истина);
	
	Предпоступление = ОткрытьФормуМодально("Документ.ПредпоступлениеПоКомплектации.Форма.ФормаВыбора", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(Предпоступление) Тогда
		
		Оборудование.Очистить();
		
		ДокументОснование = Предпоступление;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПредпоступлениеПоКомплектацииТовары.Номенклатура,
		                      |	ПредпоступлениеПоКомплектацииТовары.Количество,
		                      |	ПредпоступлениеПоКомплектацииТовары.Цена КАК Сумма,
		                      |	ПредпоступлениеПоКомплектацииТовары.Сделка,
		                      |	ПредпоступлениеПоКомплектацииТовары.Ссылка КАК Предпоступление,
		                      |	ПредпоступлениеПоКомплектацииТовары.Ссылка.Магазин КАК ТорговаяТочка,
		                      |	ПредпоступлениеПоКомплектацииТовары.СтавкаНДС,
		                      |	ПредпоступлениеПоКомплектацииТовары.СуммаНДС
		                      |ИЗ
		                      |	Документ.ПредпоступлениеПоКомплектации.Товары КАК ПредпоступлениеПоКомплектацииТовары
		                      |ГДЕ
		                      |	ПредпоступлениеПоКомплектацииТовары.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Предпоступление);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивРаспределенияНДС = Новый Массив;
			
			Для Сч = 1 По Выборка.Количество Цикл
				МассивРаспределенияНДС.Добавить(1);
			КонецЦикла;
			
			МассивРаспределенияНДС = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаНДС, МассивРаспределенияНДС);			
			
			//
			Для Сч = 1 По Выборка.Количество Цикл
				НоваяСтрока = Оборудование.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Если МассивРаспределенияНДС<>Неопределено Тогда
					НоваяСтрока.СуммаНДС = МассивРаспределенияНДС[Сч-1];					
				КонецЕсли; 
			КонецЦикла;   
			
			Если Выборка.Количество<1 Тогда
				НоваяСтрока = Оборудование.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЕсли;	
		КонецЦикла;   
		
	КонецЕсли; 
	
КонецПроцедуры
//---АК SaMi  22.05.2017 

/////////////////////
// ПРИХОДНЫЕ ОРДЕРА
/////////////////////

Процедура ЗаполнитьТЧПоПриходнымОрдерам()
	
	Если ЭтотОбъект.ПриходныеОрдера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
		
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходныйОрдерСкладОборудование.Номенклатура,
		|	ПриходныйОрдерСкладОборудование.ЗаводскойНомер,
		|	ПриходныйОрдерСкладОборудование.ОсновноеСредство
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Оборудование КАК ПриходныйОрдерСкладОборудование
		|ГДЕ
		|	ПриходныйОрдерСкладОборудование.Ссылка В(&МассивОрдеров)
		|	И ПриходныйОрдерСкладОборудование.Ссылка.Отменен = ЛОЖЬ";
		
		ЭтотОбъект.Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			СтрокаТЧ.ИнвентарныйНомер = ?(ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство), СтрокаТЧ.ОсновноеСредство.ИнвентарныйНомер, Неопределено);
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		ДатаСоставляющих = '00010101';
		Для Каждого ЭлементОрдер Из МассивОрдеров Цикл
			ДатаСоставляющих = Макс(ДатаСоставляющих, ЭлементОрдер.Дата);
		КонецЦикла;	
		Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
		Запрос.УстановитьПараметр("МаксДата", ДатаСоставляющих);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
		|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения
		|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	СУММА(ВЫБОР
		|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|				ТОГДА ПриходныйОрдерСкладТовары.Количество
		|			ИНАЧЕ ПриходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|				ТОГДА ПриходныйОрдерСкладТовары.Количество
		|			ИНАЧЕ ПриходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество
		|		КОНЕЦ) КАК ПоПриходнымОрдерам,
		|	ВЫБОР
		|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Коэффициент
		|	КОНЕЦ КАК Коэффициент
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
		|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
		|			И (ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие = ЛОЖЬ)
		|ГДЕ
		|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
		|	И ПриходныйОрдерСкладТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
		|	И ПриходныйОрдерСкладТовары.Ссылка.Отменен = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
		|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения
		|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL
		|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Коэффициент
		|	КОНЕЦ";
		
		ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Счет411 = ПланыСчетов.Финансовый.Товары;
		Счет412 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		Счет08 	= ПланыСчетов.Финансовый.КапитальныеВложения;
		ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), Дата);
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				
				Если СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
						ИЛИ СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
					
					ТекСчетУчета = Счет411;
					
				ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
					
					ТекСчетУчета = Счет08;
					
				КонецЕсли;
				
				Если СтрокаТЧ.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					ТекСчетУчета = Счет412;
				КонецЕсли;
				
				СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета[0].СчетУчета) Тогда
					ТекСчетУчета = СтрокаСчетУчета[0].СчетУчета;
				КонецЕсли;	
				
				СтрокаТЧ.СчетУчета 				= ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), Счет411, ТекСчетУчета);
				СтрокаТЧ.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
				
				Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
					СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(СтрокаТЧ.Номенклатура);
		
					Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
						
					ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
						СтрокаТЧ.СтавкаНДС = СтрСтавкиПоХарактеристике.СтавкаНДС;
					Иначе
						СтрокаТЧ.СтавкаНДС				= СтрокаТЧ.Номенклатура.СтавкаНДС;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЕсли;
			
			ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
			
		КонецЦикла;
		
        Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
		Запрос.УстановитьПараметр("МаксДата", ДатаСоставляющих);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
		|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
		|ГДЕ
		|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
		|	И ПриходныйОрдерСкладТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
		|	И ПриходныйОрдерСкладТовары.Ссылка.Отменен = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныйОрдерСкладТовары.Номенклатура,
		|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
		|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент";
		
		ЭтотОбъект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
		
        Для каждого СтрокаТабличнойЧасти из ЭтотОбъект.Услуги Цикл
		
			СчетаЗатрат = Справочники.Номенклатура.ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СчетаЗатрат);
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
				СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Финансовый.ПрочиеМатериалы;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатратБУ) Тогда
				СтрокаТабличнойЧасти.СчетЗатратБУ = ПолучитьСчетБУПоСтатистике(СтрокаТабличнойЧасти.Номенклатура);	
			КонецЕсли;
			
			Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;
			
		КонецЦикла;	
				
	КонецЕсли;
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

Процедура КоманднаяПанельПриходныеОрдераЗаполнить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не заполнено поле Контрагент!");
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Если ЭтотОбъект.ПриходныеОрдера.Количество() > 0
				ИЛИ ЭтотОбъект.Оборудование.Количество() > 0 Тогда
			Текст = "Табличные части ""Приходные ордера"" и ""Оборудование"" будут очищены!" + Символы.ПС + "Продолжить?";
			Если Вопрос(Текст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			ЭтотОбъект.ПриходныеОрдера.Очистить();
			ЭтотОбъект.Оборудование.Очистить();
		КонецЕсли;
	Иначе
		Если ЭтотОбъект.ПриходныеОрдера.Количество() > 0
				ИЛИ ЭтотОбъект.Товары.Количество() > 0 Тогда
			Текст = "Табличные части ""Приходные ордера"", ""Товары"" и ""Услуги"" будут очищены!" + Символы.ПС + "Продолжить?";
			Если Вопрос(Текст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			ЭтотОбъект.ПриходныеОрдера.Очистить();
			ЭтотОбъект.Товары.Очистить();
			ЭтотОбъект.Услуги.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	//
	ФормаПодбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФорму("ФормаПодбораПриходныхОрдеров");
	ФормаПодбора.Поставщик 		= ЭтотОбъект.Контрагент;
	ФормаПодбора.НомерНакладной = ЭтотОбъект.НомерВходящегоДокумента;
	ФормаПодбора.ДатаНакладной 	= ЭтотОбъект.ДатаВходящегоДокумента;
	ФормаПодбора.ПоступлениеТУ 	= ЭтотОбъект.Ссылка;
	ФормаПодбора.ВидОперации 	= ЭтотОбъект.ВидОперации;
	
	//+++ AK BARA  #16581
	КонтрагентЗапомнить = Контрагент;
	ДоговорЗапомнить = ДоговорКонтрагента;
	ОрганизаяЗапомнить = Организация;
	//--- AK BARA  #16581
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика);
	СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика);
	СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика);

	РезВидОперации = ВыбратьИзСписка(СписокВыбора,ЭлементыФормы.КоманднаяПанельПриходныеОрдера);
	ФормаПодбора.П_ВидОперацииПСО = РезВидОперации.Значение;
//--- AK BARA  #16581
	
	Если ФормаПодбора.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		МассивОрдеров = ФормаПодбора.Список.ВыгрузитьЗначения();
		Если МассивОрдеров.Количество() > 0 Тогда
			
			ЭтотОбъект.НомерВходящегоДокумента 	= МассивОрдеров[0].НомерНакладной;
			ЭтотОбъект.ДатаВходящегоДокумента	= МассивОрдеров[0].ДатаНакладной;
			
			//Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ЭтотОбъект.СтруктурнаяЕдиница 		= МассивОрдеров[0].Ордер.Склад.Владелец;
			//КонецЕсли;
			
			Для Каждого СтрокаМассива Из МассивОрдеров Цикл
				НовСтр = ЭтотОбъект.ПриходныеОрдера.Добавить();
				НовСтр.ПриходныйОрдер = СтрокаМассива.Ордер;
			КонецЦикла;
			УстановитьДоступностьТТОборудования();
			 //+++AK BARA #16581
			 //Заполнение по первому ревизитов и ТЧ по всем из заполнения которое было на вкладке дополнительно
			
			 ЭтотОбъект.Товары.Очистить();
			 ЭтотОбъект.Услуги.Очистить();
			 ЭтотОбъект.Оборудование.Очистить();		
			 ЭтотОбъект.ДокументыОснования.Очистить();	
			 Если ПриходныеОрдера.Количество()<>0 Тогда 
				 ЭтотОбъект.ОбработкаЗаполненияЭкспорт(ПриходныеОрдера[0].ПриходныйОрдер);  
			 КонецЕсли;
			 //ЭтотОбъект.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120210");  //???
			 			 
			 ЭтотОбъект.Организация = ОрганизаяЗапомнить;
			 ЭтотОбъект.Контрагент = КонтрагентЗапомнить;
			 ЭтотОбъект.ДоговорКонтрагента = ДоговорЗапомнить;
			 ОбновлениеОтображения();			 
			 //---AK BARA #16581
		КонецЕсли;
	КонецЕсли;
	
	//
	//ЗаполнитьТЧПоПриходнымОрдерам();	//AK BARA #16581 Переписали заполнение.
		
КонецПроцедуры

Процедура ПриходныеОрдераПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьДоступностьТТОборудования();
	
КонецПроцедуры

Процедура ПриходныеОрдераПослеУдаления(Элемент)
	
	УстановитьДоступностьТТОборудования();
	
КонецПроцедуры

Процедура ПриходныеОрдераПриходныйОрдерПриИзменении(Элемент)
	
	//+++АК MIND 2018.01.28 
	Если ЭлементыФормы.ПриходныеОрдера.ТекущиеДанные.ПриходныйОрдер.Отменен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный документ в статусе Отменен. Товары по нему не будут заполнены");
	КонецЕсли;	
	//---АК MIND 
	
	ТекСтруктурнаяЕдиница = Элемент.Значение.Склад.Владелец;
	Если НЕ ЭтотОбъект.СтруктурнаяЕдиница = ТекСтруктурнаяЕдиница Тогда
		ЭтотОбъект.СтруктурнаяЕдиница = ТекСтруктурнаяЕдиница;
	КонецЕсли;
	
	//
	ЗаполнитьТЧПоПриходнымОрдерам();		
	
КонецПроцедуры

Процедура ПриходныеОрдераПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ПриходныйОрдерСклад.ПолучитьФормуВыбора(, Элемент);
	//ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	//
	//Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
	//	мОтбор = ФормаВыбора.Отбор.ВидОперации;
	//	мОтбор.ВидСравнения 	= ВидСравнения.Равно;
	//	мОтбор.Значение 		= Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика;
	//	мОтбор.Использование 	= Истина;
	//	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
	//КонецЕсли;
	//
	//мОтбор = ФормаВыбора.Отбор.Поставщик;
	//мОтбор.ВидСравнения 	= ВидСравнения.Равно;
	//мОтбор.Значение 		= ЭтотОбъект.Контрагент;
	//мОтбор.Использование 	= Истина;
	//ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Поставщик.Доступность = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


Процедура ДействияФормыПерейтиВЖурналПроводок(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = ЭтотОбъект.Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	
КонецПроцедуры


//+++АК
//АК_БЕЛН_24.02.2015++
Процедура КоманднаяПанельОборудованиеДублироватьСтроки(Кнопка)
	//КолСтрОб=Оборудование.Количество();
	//Для Сч=1 По КолСтрОб Цикл
	//	 НовСтр=Оборудование.Добавить();
	//	 ЗаполнитьЗначенияСвойств(НовСтр,Оборудование[Сч-1]);
	//КонецЦикла;
	
	ТекДанные = ЭлементыФормы.Оборудование.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКолонка = ЭлементыФормы.Оборудование.ТекущаяКолонка;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = ТекКолонка.Имя;
	Если ИмяКолонки = "НомерСтроки" Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗначение = ТекДанные[ИмяКолонки];
	ТекОС		= ТекДанные.ОсновноеСредство;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		
		Если СтрокаТЧ[ИмяКолонки] = ТекЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "Номенклатура" Тогда
			
			СтрокаТЧ[ИмяКолонки] 		= ТекЗначение;
			СтрокаТЧ.СтавкаНДС 			= ТекЗначение.СтавкаНДС;
			Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
			СтрокаТЧ.ОсновноеСредство	= ТекОС;
			
		ИначеЕсли ИмяКолонки = "ИнвентарныйНомер" Тогда	
			
			СтрокаТЧ[ИмяКолонки] 		= ТекЗначение;
			СтрокаТЧ.ЗаводскойНомер 	= СтрокаТЧ[ИмяКолонки];
			
		ИначеЕсли ИмяКолонки = "Сумма" Тогда	
			
			СтрокаТЧ[ИмяКолонки] 		= ТекЗначение;
			Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
			
			ПосчитатьСуммуТабличнойЧасти();	//название не совсем адекватно, это расчет суммы документа
			
		ИначеЕсли ИмяКолонки = "СтавкаНДС" Тогда	
			
			СтрокаТЧ[ИмяКолонки] 		= ТекЗначение;
			Оборудование_РассчитатьСуммуНДСВСтроке(СтрокаТЧ);
			
		Иначе	
			СтрокаТЧ[ИмяКолонки] 		= ТекЗначение;
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.ОсновноеСредство.Пустая() Тогда
			Если НЕ СтрокаТЧ.Номенклатура = СтрокаТЧ.ОсновноеСредство.Номенклатура Тогда
				СтрокаТЧ.Номенклатура = СтрокаТЧ.ОсновноеСредство.Номенклатура;
			КонецЕсли;
			Если НЕ СтрокаТЧ.ИнвентарныйНомер = СтрокаТЧ.ОсновноеСредство.ИнвентарныйНомер Тогда
				СтрокаТЧ.ИнвентарныйНомер = СтрокаТЧ.ОсновноеСредство.ИнвентарныйНомер;
			КонецЕсли;
			Если НЕ СтрокаТЧ.ЗаводскойНомер = СтрокаТЧ.ОсновноеСредство.ЗаводскойНомер Тогда
				СтрокаТЧ.ЗаводскойНомер = СтрокаТЧ.ОсновноеСредство.ЗаводскойНомер;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

//АК_БЕЛН_24.02.2015--


Процедура ДобавитьТоварыИзОрдеров(Отказ = Ложь, ЭтоОткрытие = Ложь)
	
	МассивОрдеров = ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	Если МассивОрдеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ЭтотОбъект.Товары.Выгрузить();
	
	ДатаСоставляющих = '00010101';
	Для Каждого ЭлементОрдер Из МассивОрдеров Цикл
		ДатаСоставляющих = Макс(ДатаСоставляющих, ЭлементОрдер.Дата);
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрдеров"	, МассивОрдеров);
	Запрос.УстановитьПараметр("ТЗ"				, ТаблицаТоваров);
	Запрос.УстановитьПараметр("МаксДата"		, ДатаСоставляющих);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	ТЗ.ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|				ТОГДА ПриходныйОрдерСкладТовары.Количество
	|			ИНАЧЕ ПриходныйОрдерСкладТовары.Количество * СоставКомплектаСрезПоследних.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ТоварыОрдеров
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&МаксДата, ) КАК СоставКомплектаСрезПоследних
	|		ПО ПриходныйОрдерСкладТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|			И (ПриходныйОрдерСкладТовары.Характеристика.НеРазбиватьВБухДокументахНаСоставляющие = ЛОЖЬ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка В(&МассивОрдеров)
	|	И ПриходныйОрдерСкладТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.Номенклатура
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставКомплектаСрезПоследних.Составляющая ЕСТЬ NULL 
	|			ТОГДА ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Коэффициент
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.ЕдиницаИзмерения,
	|	ТоварыОрдеров.Количество,
	|	ТоварыОрдеров.Коэффициент
	|ИЗ
	|	ТоварыОрдеров КАК ТоварыОрдеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТоварыОрдеров.Номенклатура = Товары.Номенклатура
	|			И ТоварыОрдеров.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|ГДЕ
	|	Товары.Номенклатура ЕСТЬ NULL 
	|	И Товары.ЕдиницаИзмерения ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ЭтоОткрытие Тогда
		
		ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, Истина);
		
	Иначе
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "В табличной части ""Товары"" присутствует не вся номенклатура из ордеров." + Символы.ПС +
				"Выполнить добавление отсутствующих позиций?";
		Ответ = Вопрос(Текст, Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТабличнуюЧастьТовары(Выборка, ЭтоОткрытие = Ложь)
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
	МассивНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНоменклатуры, Дата);
	Выборка.Сбросить();
	//---АК Susk (Суслин К.В.) 
	
	Пока Выборка.Следующий()Цикл
		
		НоваяСтрока = ЭтотОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ЭтоОткрытие Тогда
			НоваяСтрока.Количество = 0;
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
		//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.
		
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(НоваяСтрока.Номенклатура);			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСчетов);
		
		#Область ЗакоментКод_ДобавитьСтрокиВТабличнуюЧастьТовары
		//Если НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
		//		ИЛИ НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		//	
		//	ТекСчетУчета = ПланыСчетов.Финансовый.Товары;
		//	
		//ИначеЕсли НоваяСтрока.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		//	
		//	ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
		//	
		//КонецЕсли;
		//
		//Если НоваяСтрока.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
		//	ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//КонецЕсли;
		//
		//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(НоваяСтрока.Номенклатура, Дата);
		//Если ТабСчетаУчета.Количество() > 0
		//	И ЗначениеЗаполнено(ТабСчетаУчета[0].СчетУчета) Тогда
		//	ТекСчетУчета = ТабСчетаУчета[0].СчетУчета;
		//КонецЕсли;	
		//
		//НоваяСтрока.СчетУчета 				= ТекСчетУчета;
		#КонецОбласти
		
		//---АК Susk (Суслин К.В.) 
		
		НоваяСтрока.СтатьяТовародвижения	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
		
		Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			НоваяСтрока.СтавкаНДС 			= Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(НоваяСтрока.Номенклатура);
			
			Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
				
			ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС 		= СтрСтавкиПоХарактеристике.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС 		= НоваяСтрока.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьЦенуВСтрокеТЧ(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюПоДоговоруКонтрагента()
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ДоговорыКонтрагентов.Организация,
	//|	ВЫБОР
	//|		КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	//|			ТОГДА 1
	//|		ИНАЧЕ 2
	//|	КОНЕЦ КАК Порядок
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|ГДЕ
	//|	ДоговорыКонтрагентов.Владелец = &Контрагент
	//|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Порядок");
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий()Тогда
	//	Организация = Выборка.Организация;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборКонтрагента(пКонтрагент)
	
	Если пКонтрагент.Пустая()
			ИЛИ ЭтотОбъект.Организация.Пустая() Тогда
		Если НЕ ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
			ЭтотОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"	, пКонтрагент);
	Запрос.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Если ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
			ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, пКонтрагент,
											?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		КонецЕсли;
		Если ЭтотОбъект.ДоговорКонтрагента.Пустая() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				ЭтотОбъект.ДоговорКонтрагента = Выборка.Ссылка;
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		ЭтотОбъект.Контрагент 			= Справочники.Контрагенты.ПустаяСсылка();
		ЭтотОбъект.ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Предупреждение("Запрещено выбирать контрагента, у которого нет договора с организацией """ + ЭтотОбъект.Организация + """");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента)
			И ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ЭтотОбъект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	
	//+++АК susk 30/07/2014
	// Если поступление введено на основании заявки на расх. средств, то в структуре подчиненности показывать
	// структуру данной заявки
	
	//РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
	Если ЭтотОбъект.ДокументОснование = Неопределено
			ИЛИ ЭтотОбъект.ДокументОснование.Пустая()
			ИЛИ ТипЗнч(ЭтотОбъект.ДокументОснование) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.Ссылка);
	Иначе
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтотОбъект.ДокументОснование);
	КонецЕсли;

	//---АК susk                                                 
	
КонецПроцедуры
	
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = Ложь, ТекСтрока = Неопределено)

	Если ТекСтрока <> Неопределено Тогда
		СтрокаТабличнойЧасти = ТекСтрока;
	Иначе	
		СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1, мКолонкиУслуги.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2, мКолонкиУслуги.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3, мКолонкиУслуги.СубконтоНУ3);

КонецПроцедуры

Процедура КнопкаРаспределитьНаОСНажатие(Кнопка)
	
	Если Услуги.Количество() <> 1 Тогда
		Предупреждение("В табличной части ""Услуги"" должна быть ровно одна строка");
		Возврат;
	КонецЕсли;
		
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаРаспределенияУслугПоПриобретениюОС");
	Форма.ИсточникРаспределения = Ссылка;
	Если Форма.ОткрытьМодально() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	//Получим ОС из документа
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Форма.ИсточникРаспределения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.ОсновноеСредство,
	|	ПоступлениеТоваровУслугОборудование.СчетУчета
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Предупреждение("В документе " + Строка(Форма.ИсточникРаспределения) + " нет ОС, или документ еще не записан." + Символы.ПС
					 + "Операция отменена");
		Возврат;
	КонецЕсли;
	
	//Приступаем
	ТаблицаУслугНовая 		= ЭтотОбъект.Услуги.ВыгрузитьКолонки();	//таблица для наполнения
	ОсталосьРаспределить	= ЭтотОбъект.Услуги[0].Сумма;				//чтобы не ушли копейки, если при делении будут доли копеек
	Порция					= Окр(Услуги[0].Сумма / Выборка.Количество(), 2, РежимОкругления.Окр15как20);
	
	Сч = 1;
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = ТаблицаУслугНовая.Добавить();
		
		//скопируем значения реквизитов строки
		Для Каждого Колонка Из ТаблицаУслугНовая.Колонки Цикл
			СтрокаТЧ[Колонка.Имя] = Услуги[0][Колонка.Имя];
		КонецЦикла;
		
		СтрокаТЧ.СчетЗатрат = Выборка.СчетУчета;
		Если АК_ОсновныеСредства.ЭтоСчетУчетаОС(Выборка.СчетУчета) Тогда
			СтрокаТЧ.Субконто1 = Выборка.ОсновноеСредство;	
		КонецЕсли;
		
			//длина кода не совпадает
		Если Выборка.СчетУчета.Код = "08.4" тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.04");
		//+++AK susk
		ИначеЕсли Выборка.СчетУчета.Код = "08.10" тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.09");
		//---AK susk
		ИначеЕсли Выборка.СчетУчета.Код = "10.1" тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.01");
		Иначе 
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Выборка.СчетУчета.Код);
		КонецЕсли;

		
		//сумма
		Если Сч = Выборка.Количество() Тогда
			СтрокаТЧ.Сумма			= ОсталосьРаспределить;	//на последнюю строку идет остаток
		Иначе
			СтрокаТЧ.Сумма			= Порция;
			ОсталосьРаспределить	= ОсталосьРаспределить - Порция;
		КонецЕсли;
		
		СтрокаТЧ.Количество	= 1;
		СтрокаТЧ.Цена		= СтрокаТЧ.Сумма;
			
		Сч = Сч + 1;
		
	КонецЦикла;
	
	//
	ЭтотОбъект.Услуги.Загрузить(ТаблицаУслугНовая);
	
КонецПроцедуры


Процедура ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, Индекс, Префикс = "")
	
	мВидыСубконто 	= ТекДанные["СчетЗатрат" + Префикс].ВидыСубконто;
	ТекВидыСубконто = СтрокаТЧ["СчетЗатрат" + Префикс].ВидыСубконто;
	Если мВидыСубконто.Количество() > (Индекс - 1)
			И ТекВидыСубконто.Количество() > (Индекс - 1)
			И ТекВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения = мВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения Тогда
		СтрокаТЧ["Субконто" + Префикс + Строка(Индекс)] = ТекДанные["Субконто" + Префикс + Строка(Индекс)];
	Иначе
		СтрокаТЧ["Субконто" + Префикс + Строка(Индекс)] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2ДублироватьНаВсеСтроки(Кнопка)
	
	ТекДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКолонка = ЭлементыФормы.Услуги.ТекущаяКолонка;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = ТекКолонка.Имя;
	Если ИмяКолонки = "НомерСтроки" Тогда
		Возврат;
	КонецЕсли;
	ТекЗначение = ТекДанные[ИмяКолонки];
	
	//
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		
		Если СтрокаТЧ[ИмяКолонки] = ТекЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Если ИмяКолонки = "Номенклатура" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
		ИначеЕсли ИмяКолонки = "Количество"
				ИЛИ ИмяКолонки = "Цена"
				ИЛИ ИмяКолонки = "СтавкаНДС" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
		ИначеЕсли ИмяКолонки = "Сумма" Тогда
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект.ВариантРасчетаНДС);
		ИначеЕсли ИмяКолонки = "СчетЗатрат" Тогда
			
			//
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			
			//
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекЗначение, 
													СтрокаТЧ.Субконто1, мКолонкиУслуги.Субконто1,
													СтрокаТЧ.Субконто2, мКолонкиУслуги.Субконто2,
													СтрокаТЧ.Субконто3, мКолонкиУслуги.Субконто3);
													
			//													
			УслугиОбработкаИнформацииОСчетеЗатратИСубконто(СтрокаТЧ);
			
		ИначеЕсли ИмяКолонки = "Субконто1" Тогда
			
			//
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 1);
			
			//+++ZEZA
			Если СтрокаТЧ.СчетЗатрат.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки Тогда
				УслугиОбработкаИнформацииОСчетеЗатратИСубконто(СтрокаТЧ);	
			КонецЕсли; 
			//---ZEZA
			
		ИначеЕсли ИмяКолонки = "Субконто2" Тогда
			
			//
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 2);
			
		ИначеЕсли ИмяКолонки = "Субконто3" Тогда
			
			//
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 3);
			
		ИначеЕсли ИмяКолонки = "СчетЗатратБУ" Тогда
			
			//
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			
			//
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекЗначение, 
													СтрокаТЧ.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
													СтрокаТЧ.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
													СтрокаТЧ.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);
			
			
		ИначеЕсли ИмяКолонки = "СубконтоБУ1" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 1, "БУ");
		ИначеЕсли ИмяКолонки = "СубконтоБУ2" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 2, "БУ");
		ИначеЕсли ИмяКолонки = "СубконтоБУ3" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 3, "БУ");
		ИначеЕсли ИмяКолонки = "СчетЗатратНУ" Тогда
			
			//
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
			
			//
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекЗначение, 
													СтрокаТЧ.СубконтоНУ1, мКолонкиУслуги.СубконтоНУ1,
													СтрокаТЧ.СубконтоНУ2, мКолонкиУслуги.СубконтоНУ2,
													СтрокаТЧ.СубконтоНУ3, мКолонкиУслуги.СубконтоНУ3);
			
			
		ИначеЕсли ИмяКолонки = "СубконтоНУ1" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 1, "НУ");
		ИначеЕсли ИмяКолонки = "СубконтоНУ2" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 2, "НУ");
		ИначеЕсли ИмяКолонки = "СубконтоНУ3" Тогда
			ЗаполнитьСубконтоВСтрокеТЧ(СтрокаТЧ, ТекДанные, 3, "НУ");
		Иначе	
			СтрокаТЧ[ИмяКолонки] = ТекЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//---АК

//+++ gusd

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура КоманднаяПанельТоварыПроверено(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		СтрокаТЧ.ПоПриходнымОрдерам = ПолучитьКоличествоВОрдерах(СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.КоличествоПретензияКСкладу = 0 Тогда
			Если СтрокаТЧ.Количество < СтрокаТЧ.ПоПриходнымОрдерам Тогда
				// Спасибо складу
				//+++АК sole 2018.07.05 ИП-00018320
				//СтрокаТЧ.КоличествоПретензияКСкладу = СтрокаТЧ.Количество - СтрокаТЧ.ПоПриходнымОрдерам;
				СтрокаТЧ.КоличествоПретензияКСкладу = СтрокаТЧ.Количество - СтрокаТЧ.ПоПриходнымОрдерам - СтрокаТЧ.КоличествоПретензияКПеревозчику;
				//---АК sole 2018.07.05 ИП-00018320
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//---

Процедура УслугиПродукцияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗаполнитьПоСпецификации(Кнопка)
	
	ЭтотОбъект.Услуги.Очистить();
	
	//
	ТаблицаСпецификаций = Документы.ПоступлениеТоваровУслуг.ПолучитьСпецификации(ЭтотОбъект.Дата, ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"),
																					ЭтотОбъект.Контрагент);
	Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
		
		СтрокаСпецификацияПоТовару = ТаблицаСпецификаций.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		Если СтрокаСпецификацияПоТовару = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТЧУслуги = СтрокаСпецификацияПоТовару.Спецификация.Услуги;
		Для Каждого СтрокаУслуга Из ТЧУслуги Цикл
			
			СтрокаДоб = ЭтотОбъект.Услуги.Добавить();
			СтрокаДоб.Продукция 	= СтрокаТовар.Номенклатура;
			СтрокаДоб.Номенклатура 	= СтрокаУслуга.Номенклатура;
			СтрокаДоб.Количество 	= СтрокаТовар.Количество;
			СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(СтрокаДоб.Номенклатура);
		
			Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
				
			ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
				СтрокаДоб.СтавкаНДС = СтрСтавкиПоХарактеристике.СтавкаНДС;
			Иначе
				СтрокаДоб.СтавкаНДС	= СтрокаДоб.Номенклатура.СтавкаНДС;
			КонецЕсли;
			Если СтрокаУслуга.ЦенаВключаетНДС Тогда
				СтрокаДоб.Цена 		= СтрокаУслуга.ЦенаЗаЕдиницу / (100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаДоб.СтавкаНДС)) * 100;
			Иначе
				СтрокаДоб.Цена 		= СтрокаУслуга.ЦенаЗаЕдиницу;
			КонецЕсли;	
			ПосчитатьСуммуСтрокиТЧ(СтрокаДоб);
			
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаДоб, ЭтотОбъект);
			СтрокаДоб.СчетЗатратБУ 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");

			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаДоб.СчетЗатратБУ, 
				СтрокаДоб.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
				СтрокаДоб.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
				СтрокаДоб.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);
				
			ЗаполнитьСчетНалоговогоУчета(, СтрокаДоб);
			
		КонецЦикла;
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДействияФормыОтправитьПисьмоОРасхождениях(Кнопка)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент"	, ЭтотОбъект.Контрагент);
	Параметры.Вставить("НомерДок"	, ЭтотОбъект.НомерВходящегоДокумента);
	Параметры.Вставить("ДатаДок"	, ЭтотОбъект.ДатаВходящегоДокумента);
	
	ТабРасхождения = Новый ТаблицаЗначений;
	ТабРасхождения.Колонки.Добавить("Номенклатура");
	ТабРасхождения.Колонки.Добавить("Количество");
	ТабРасхождения.Колонки.Добавить("ПоПриходнымОрдерам");
	ТабРасхождения.Колонки.Добавить("Отправлять");
	ТабРасхождения.Колонки.Добавить("ЕдиницаИзмерения");
	
	Для каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		НоваяСтрока = ТабРасхождения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "Номенклатура, Количество, ПоПриходнымОрдерам, ЕдиницаИзмерения");
		Если НЕ СтрокаТЧ.Количество = СтрокаТЧ.ПоПриходнымОрдерам Тогда
			НоваяСтрока.Отправлять = Истина;
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("Расхождения", ТабРасхождения);
	
	Если ТабРасхождения.Количество() > 0 Тогда
		ОткрытьФормуМодально("Документ.ПоступлениеТоваровУслуг.Форма.ФормаОтправкиПисьмаОРасхождениях", Параметры);
	КонецЕсли;	

КонецПроцедуры

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		//+++ АК bara  ИП-00015916.000.00000001		
		
		ФормаВыбора = Документы.ПриходныйОрдерСклад.ПолучитьФормуВыбора(, Элемент);
		ЗначениеОтбора = Новый Структура("Поставщик",Контрагент);
		//ЗначениеОтбора.Вставить("Проведен",Ложь);
		ПараметрыВыбора = новый Структура("Отбор",ЗначениеОтбора);
		ОткрытьФорму("Документ.ПриходныйОрдерСклад.Форма.ФормаВыбора",ПараметрыВыбора,Элемент);
       		
		СтандартнаяОбработка = Ложь;
		   //--- АК bara  ИП-00015916.000.00000001
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		ФормаВыбора = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
		ФормаВыбора.Отбор.Организация.Установить(Организация);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		
		//++ АК 15.12.2017 luza ИП-00017451
		//ФормаВыбора = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьФормуВыбора(, Элемент);
		//ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
		//ФормаВыбора.Отбор.Организация.Установить(Организация);
		//СтандартнаяОбработка = Ложь;	
		
		
		//-- АК 15.12.2017 luza ИП-00017451
	КонецЕсли;	
	
	Если СтандартнаяОбработка = Ложь Тогда
		ЕСли ТипЗнч(Элемент.Значение) <> Тип("ДокументСсылка.ПриходныйОрдерСклад")  Тогда       // АК bara  ИП-00015916.000.00000001		
			ФормаВыбора.Открыть();
		КонецЕсли;          // АК bara  ИП-00015916.000.00000001		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		
		ЭтотОбъект.ДокументОснование = ВыбранноеЗначение;
		СтандартнаяОбработка = Ложь;
		Если ЭтоНовый()=Ложь Тогда 
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "Перезаполнить документ по выбранному приходному ордеру?";
			Ответ = Вопрос(Текст, Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		КонтрагентЗапомнить = Контрагент;
		ДоговорЗапомнить = ДоговорКонтрагента;
		ОрганизаяЗапомнить = Организация;
		//+++ АК bara  ИП-00015916.000.00000001		
		ЭтотОбъект.Товары.Очистить();
		ЭтотОбъект.Услуги.Очистить();
		ЭтотОбъект.Оборудование.Очистить();	
		ЭтотОбъект.ПриходныеОрдера.Очистить();		
		ЭтотОбъект.ДокументыОснования.Очистить();		
		ЭтотОбъект.ОбработкаЗаполненияЭкспорт(ВыбранноеЗначение);  
		ЭтотОбъект.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120210");
		ЭтотОбъект.Организация = ОрганизаяЗапомнить;
		ЭтотОбъект.Контрагент = КонтрагентЗапомнить;
		ЭтотОбъект.ДоговорКонтрагента = ДоговорЗапомнить;
		ОбновлениеОтображения();
		//--- АК bara  ИП-00015916.000.00000001

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		ЭтотОбъект.ДокументОснование = ВыбранноеЗначение;
		
		//+++АК SaMi 30.01.2017 
		ЭтотОбъект.СтруктурнаяЕдиница 	= ВыбранноеЗначение.ЦФО;
		ЭтотОбъект.СтатьяДДС 			= ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств;
		//---АК SaMi  30.01.2017 
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		
		ЭтотОбъект.ДокументОснование = ВыбранноеЗначение;
		
		
		ЭтотОбъект.СтруктурнаяЕдиница 	= ВыбранноеЗначение.ЦФО;
		ЭтотОбъект.СтатьяДДС 			= ВыбранноеЗначение.СтатьяДДС;
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	

КонецПроцедуры

Процедура ПроизвестиУплатуНДФЛПриИзменении(Элемент)
	
	Если ЭтотОбъект.ПроизвестиУплатуНДФЛ Тогда
		ЭтотОбъект.Товары.Очистить();	
	КонецЕсли;
	
	УстановитьДоступностьНДФЛ();
	
КонецПроцедуры

//+++ZEZA

//
//
Процедура ДействияФормыДействиеФайлы(Кнопка)
	
	//
	ТЗ_СписокФайлов = Неопределено;
	Если НЕ ДополнительныеСвойства.Свойство("ТЗ_СписокФайлов", ТЗ_СписокФайлов) Тогда
		
		//
		ТЗ_СписокФайлов = Новый ТаблицаЗначений;
		ТЗ_СписокФайлов.Колонки.Добавить("ИмяФайла");
		ТЗ_СписокФайлов.Колонки.Добавить("ПолноеИмяФайла");
		ТЗ_СписокФайлов.Колонки.Добавить("АдресВоВременномХранилище");
		
		//
		ДополнительныеСвойства.Вставить("ТЗ_СписокФайлов", ТЗ_СписокФайлов);
		
	КонецЕсли;	
	
	//
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВладелецСсылка"	, Ссылка);
	ПараметрыОткрытия.Вставить("ТЗ_СписокФайлов", ТЗ_СписокФайлов);
	
	//
	Форма = ПолучитьФорму("Обработка.АК_ПрикреплениеФайлов.Форма.Форма", ПараметрыОткрытия, ЭтаФорма);
	Результат = Форма.ОткрытьМодально();
	
	//
	Если Результат <> Неопределено Тогда
	
		//
		ТЗ_СписокФайлов.Очистить();
		Для каждого СтрокаТЗ Из Результат Цикл
			
			//
			НоваяСтрока = ТЗ_СписокФайлов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
		КонецЦикла; 
		
		//
		ДополнительныеСвойства.Вставить("ТЗ_СписокФайлов", ТЗ_СписокФайлов);
		
	КонецЕсли; 
	
КонецПроцедуры

//+++АК SUVV 2018.02.28 ИП-00017941
//Функция ПолучитьСтатьюДРПоСтатьеДДС(СтатьяДДС, Счет)
//	
//	//
//	Результат = Неопределено;
//	
//	//
//	ТЗ =
//	"ВЫБРАТЬ
//	|	СоответствияСтатейСчетов.СтатьяДР,
//	|	СоответствияСтатейСчетов.СтатьяДДС,
//	|	СоответствияСтатейСчетов.Счет
//	|ПОМЕСТИТЬ ТЗ
//	|ИЗ
//	|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
//	|ГДЕ
//	|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС
//	|	И СоответствияСтатейСчетов.Счет = &Счет
//	|	И НЕ СоответствияСтатейСчетов.Счет.Ссылка ЕСТЬ NULL 
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	СоответствияСтатейСчетов.СтатьяДР,
//	|	СоответствияСтатейСчетов.СтатьяДДС,
//	|	СоответствияСтатейСчетов.Счет
//	|ИЗ
//	|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
//	|ГДЕ
//	|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС
//	|	И СоответствияСтатейСчетов.Счет.Ссылка ЕСТЬ NULL 
//	|	И ЛОЖЬ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ТЗ.СтатьяДР
//	|ИЗ
//	|	ТЗ КАК ТЗ";
//		 
//	//
//	ПЗ = Новый ПостроительЗапроса;
//	ПЗ.Текст = ТЗ;
//	
//	//
//	ПЗ.Параметры.Вставить("СтатьяДДС"	, СтатьяДДС);
//	ПЗ.Параметры.Вставить("Счет"		, Счет);
//	
//	//
//	ПЗ.Выполнить();
//	
//	//
//	Выборка = ПЗ.Результат.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СтатьяДР;
//	КонецЕсли; 
//	
//	//
//	Если НЕ ЗначениеЗаполнено(Результат) Тогда
//		Результат = СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
//	КонецЕсли; 
//	
//	//
//	Возврат Результат;
//	
//КонецФункции	
Функция ПолучитьСтатьюДРПоСтатьеДДС(ВыбДата, СтатьяДДС, Счет)
	
	Результат = Неопределено;
	
	
	//+++АК SUVV 2018.02.28 ИП-00017941
	//ТЗ =
	//"ВЫБРАТЬ
	//|	СоответствияСтатейСчетовСрезПоследних.СтатьяДР,
	//|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	//|	СоответствияСтатейСчетовСрезПоследних.Счет
	//|ПОМЕСТИТЬ ТЗ
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	//|			&ВыбДата,
	//|			СтатьяДДС = &СтатьяДДС
	//|				И Счет = &Счет
	//|				И НЕ Счет.Ссылка ЕСТЬ NULL) КАК СоответствияСтатейСчетовСрезПоследних
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	СоответствияСтатейСчетовСрезПоследних.СтатьяДР,
	//|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	//|	СоответствияСтатейСчетовСрезПоследних.Счет
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	//|			&ВыбДата,
	//|			СтатьяДДС = &СтатьяДДС
	//|				И Счет.Ссылка ЕСТЬ NULL) КАК СоответствияСтатейСчетовСрезПоследних
	//|ГДЕ
	//|	ЛОЖЬ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ТЗ.СтатьяДР
	//|ИЗ
	//|	ТЗ КАК ТЗ";
	ТЗ = "ВЫБРАТЬ
	|	СоответствияСтатейСчетов.СтатьяДР,
	|	СоответствияСтатейСчетов.СтатьяДДС,
	|	СоответствияСтатейСчетов.Счет
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоответствияСтатейСчетовСрезПоследних.СтатьяДДС КАК СтатьяДДС,
	|		СоответствияСтатейСчетовСрезПоследних.Счет КАК Счет,
	|		МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	|	ИЗ
	|		РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	|				&ВыбДата,
	|				СтатьяДДС = &СтатьяДДС
	|					И Счет = &Счет) КАК СоответствияСтатейСчетовСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|		СоответствияСтатейСчетовСрезПоследних.Счет) КАК СчетаИСтатьиМаксПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО СчетаИСтатьиМаксПериод.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	|			И СчетаИСтатьиМаксПериод.Счет = СоответствияСтатейСчетов.Счет
	|			И СчетаИСтатьиМаксПериод.МаксПериод = СоответствияСтатейСчетов.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДР,
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	СоответствияСтатейСчетовСрезПоследних.Счет
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	|			&ВыбДата,
	|			СтатьяДДС = &СтатьяДДС
	|				И Счет.Ссылка = NULL) КАК СоответствияСтатейСчетовСрезПоследних
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЗ.СтатьяДР
	|ИЗ
	|	ТЗ КАК ТЗ";
	//---АК SUVV 	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	ПЗ.Параметры.Вставить("СтатьяДДС"	, СтатьяДДС);
	ПЗ.Параметры.Вставить("Счет"		, Счет);
	ПЗ.Параметры.Вставить("ВыбДата"		, ВыбДата);
	
	ПЗ.Выполнить();
	
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтатьяДР;
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции	
//---АК SUVV

//
//
Функция ПолучитьЦФОТорговойТочки(мДата, мТорговаяТочка)

	//
	Результат = Новый Структура("ЦФО, Организация");
	
	//
	ТЗ =
	"ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Период,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата"				, мДата);
	ПЗ.Параметры.Вставить("СтруктурнаяЕдиница"	, мТорговаяТочка);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 
	
	//
	Возврат Результат;

КонецФункции

//
//
Функция ПолучитьСтруктурнуюЕдиницуУправлениеПоРазвитию()
	
	//
	Возврат Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	
КонецФункции	

//
//
Функция ПолучитьСчетаУчетаНоменклатурыБух(Номенклатура, ВидТаблицы, СчетФин)
	
	//
	Результат = Новый Структура;
	Результат.Вставить("СчетУчета"	, Неопределено);
	Результат.Вставить("СчетУчетаБУ", Неопределено);
	Результат.Вставить("СчетУчетаНУ", Неопределено);
	
	//
	ТЗ =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	NULL КАК СчетУчетаБУ,
	|	NULL КАК СчетУчетаНУ
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
	|	И ""ТОВАРЫ"" = &ВидТаблицы
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата >= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	|	И ""УСЛУГИ"" = &ВидТаблицы
	|	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатрат.Ссылка ЕСТЬ NULL 
	|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатратФин
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	|	И ""УСЛУГИ"" = &ВидТаблицы
	|	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратБУ.Ссылка ЕСТЬ NULL 
	|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатратФин
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратБУ,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	|	И ""УСЛУГИ"" = &ВидТаблицы
	|	И НЕ ПоступлениеТоваровУслугУслуги.СчетЗатратНУ.Ссылка ЕСТЬ NULL 
	|	И ПоступлениеТоваровУслугУслуги.СчетЗатрат = &СчетЗатратФин
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.Дата,
	|	ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый,
	|	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
	|	NULL
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугОборудование.Номенклатура = &Номенклатура
	|	И ""ОБОРУДОВАНИЕ"" = &ВидТаблицы
	|	И НЕ ПоступлениеТоваровУслугОборудование.СчетУчетаБУ.Ссылка ЕСТЬ NULL 
	|	И ПоступлениеТоваровУслугОборудование.СчетУчетаЗабалансовый = &СчетЗатратФин
	|	И ПоступлениеТоваровУслугОборудование.Ссылка.Дата >= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЗ.Номенклатура,
	|	МАКСИМУМ(ТЗ.Дата) КАК Дата,
	|	МАКСИМУМ(ТЗ.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(ТЗ.СчетУчетаБУ) КАК СчетУчетаБУ,
	|	МАКСИМУМ(ТЗ.СчетУчетаНУ) КАК СчетУчетаНУ
	|ИЗ
	|	ТЗ КАК ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
		 
		 
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Номенклатура"	, Номенклатура);
	ПЗ.Параметры.Вставить("ВидТаблицы"		, ВидТаблицы);
	ПЗ.Параметры.Вставить("СчетЗатратФин"	, СчетФин);
	ПЗ.Параметры.Вставить("Дата"			, ТекущаяДата() - 30*24*60*60);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка); 
	КонецЕсли; 
	
	//
	Возврат Результат;
	
КонецФункции	

//
//
Функция ПолучитьСтатьюЗатратБухПоСтатьеДР(Статья, Счет)
	
	//+++АК Susk (Суслин К.В.) 2018.01.23 ИП-00016321.01
	Возврат ОбщиеПроцедуры.ПолучитьСтатьюЗатратБухПоСтатьеДР("СтатьиЗатратБУ", Статья, Счет);
	
	//далее пока комменчу. В сентябре 2018 удалить, когда обкатаем схему.
	
	#Область ЗакоментКод_ПолучитьСтатьюЗатратБухПоСтатьеДР
	////
	//Результат = Неопределено;
	//
	////
	//ТЗ =
	//"ВЫБРАТЬ
	//|	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	//|ИЗ
	//|	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	//|ГДЕ
	//|	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	//|	И СоответствиеСтатейДРСтатьямБУ.Счет = &Счет
	//|	И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.СтатьиЗатратБУ";
	//	 
	////
	//ПЗ = Новый ПостроительЗапроса;
	//ПЗ.Текст = ТЗ;
	//
	////
	//ПЗ.Параметры.Вставить("Статья"	, Статья);
	//ПЗ.Параметры.Вставить("Счет"	, Счет);
	//
	////
	//ПЗ.Выполнить();
	//
	////
	//Выборка = ПЗ.Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Результат = Выборка.СтатьяБУ;
	//КонецЕсли; 
	//
	////
	//Возврат Результат;
	#КонецОбласти
	
	//---АК Susk (Суслин К.В.) 
	
КонецФункции	

//
//
Функция ПолучитьСтатьюПрочихДоходовРасходовБухПоСтатьеДР(Статья, Счет)
	
	//+++АК Susk (Суслин К.В.) 2018.01.23 ИП-00016321.01
	Возврат ОбщиеПроцедуры.ПолучитьСтатьюЗатратБухПоСтатьеДР("ПрочиеДоходыИРасходыБУ", Статья, Счет);
	
	//далее пока комменчу. В сентябре 2018 удалить, когда обкатаем схему.
	
	#Область ЗакоментКод_ПолучитьСтатьюПрочихДоходовРасходовБухПоСтатьеДР
	////
	//Результат = Неопределено;
	//
	////
	//ТЗ =
	//"ВЫБРАТЬ
	//|	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	//|ИЗ
	//|	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	//|ГДЕ
	//|	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	//|	И СоответствиеСтатейДРСтатьямБУ.Счет = &Счет
	//|	И СоответствиеСтатейДРСтатьямБУ.СтатьяБУ ССЫЛКА Справочник.ПрочиеДоходыИРасходыБУ";
	//	 
	////
	//ПЗ = Новый ПостроительЗапроса;
	//ПЗ.Текст = ТЗ;
	//
	////
	//ПЗ.Параметры.Вставить("Статья"	, Статья);
	//ПЗ.Параметры.Вставить("Счет"	, Счет);
	//
	////
	//ПЗ.Выполнить();
	//
	////
	//Выборка = ПЗ.Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Результат = Выборка.СтатьяБУ;
	//КонецЕсли; 
	//
	////
	//Возврат Результат;
	#КонецОбласти
	
	//---АК Susk (Суслин К.В.) 
	
КонецФункции	

//
//
Процедура УслугиСубконто1ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	//
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//mind отрубил, не дает менять субконто
	//УслугиОбработкаИнформацииОСчетеЗатратИСубконто(ТекущиеДанные);	
	
	//+++АК Susk (Суслин К.В.) 2018.08.02 
	ИзменениеСчетаИлиСубконтоДляБУ();
	//---АК Susk (Суслин К.В.) 	 
	
КонецПроцедуры

//
//
Процедура УслугиСубконто3ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(Элемент.Значение);	
	//
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//+++ZEZA
	
	//
	//УслугиОбработкаИнформацииОСчетеЗатратИСубконто(ТекущиеДанные);
	
	//---ZEZA
	
	//+++АК Susk (Суслин К.В.) 2018.08.02 	 
	ИзменениеСчетаИлиСубконтоДляБУ();
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры

//
//
Процедура УслугиОбработкаИнформацииОСчетеЗатратИСубконто(ТекущиеДанные)
	
	//
	СчетЗатрат = ТекущиеДанные.СчетЗатрат;
	
	Если ТекущиеДанные.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье Тогда
		СтатьяТовародвижения = ?(Дата >= '20150801', Справочники.СтатьиТовародвижения.ПоступлениеСырьяОтПоставщика, Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика);
	Иначе
		СтатьяТовародвижения = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
	КонецЕсли;	
	
	//
	ВидыСубконтоБух = Новый Соответствие;
	
	//
	ВидыСубконтоФин = Новый Соответствие;
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Организации")			, ЭтотОбъект.Организация);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Контрагенты")			, ЭтотОбъект.Контрагент);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтруктурныеЕдиницы")		, ЭтотОбъект.СтруктурнаяЕдиница);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО")					, ЭтотОбъект.СтруктурнаяЕдиница);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДвиженияДенежныхСредств")	, ЭтотОбъект.СтатьяДДС);
	//+++АК SUVV 2018.02.28 ИП-00017941
	//ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов")	,
	//												ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.СтатьяДДС, ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом));
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов")	,
													ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.СтатьяДДС, ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом));
	//---АК SUVV
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Склады")					, ЭтотОбъект.Склад);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.МестаХранения")			, ЭтотОбъект.СтруктурнаяЕдиница);
		
	//
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Товары")					, ТекущиеДанные.Номенклатура);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки")			, ТекущиеДанные.ТорговаяТочка);
	ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.СтатьиТовародвижения")	, СтатьяТовародвижения);	
	
	//
	Если СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Финансовый.КапитальныеВложения") Тогда
		
		//
		ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ПолучитьСтруктурнуюЕдиницуУправлениеПоРазвитию());
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТорговаяТочка) Тогда	
		
		//
		СтруктураРезультат = ПолучитьЦФОТорговойТочки(ЭтотОбъект.Дата, ТекущиеДанные.ТорговаяТочка);
		
		//
		ЦФО = СтруктураРезультат.ЦФО;
		Если ЗначениеЗаполнено(ЦФО) Тогда
			ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ЦФО);	
		КонецЕсли; 
		
	КонецЕсли;
	
	//
	Сч = 1;
	Для каждого ЭлементВидСубконто Из СчетЗатрат.ВидыСубконто Цикл
		
		//
		ЗначениеСубконто = ТекущиеДанные["Субконто" + Сч];
		
		//
		ТипЗначенияСубконто = ТипЗнч(ЗначениеСубконто);
		Если НЕ ЭлементВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗначенияСубконто) Тогда
			ТекущиеДанные["Субконто" + Сч] = ЭлементВидСубконто.ВидСубконто.ТипЗначения.ПривестиЗначение(ТекущиеДанные["Субконто" + Сч]);	
		КонецЕсли; 
		
		//
		Если ЭлементВидСубконто.ВидСубконто = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки") Тогда
			
			//
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				
				//
				ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ТорговыеТочки"), ЗначениеСубконто);
				
				//
				СтруктураРезультат = ПолучитьЦФОТорговойТочки(ЭтотОбъект.Дата, ЗначениеСубконто);
				
				//
				ЦФО = СтруктураРезультат.ЦФО;
				Если ЗначениеЗаполнено(ЦФО) Тогда
					ВидыСубконтоФин.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.ЦФО"), ЦФО);	
				КонецЕсли; 
				
			КонецЕсли; 
		
		КонецЕсли;  
		
		//
		Сч = Сч + 1;
	
	КонецЦикла; 
	
	//
	Для Сч = 0 По СчетЗатрат.ВидыСубконто.Количество() - 1 Цикл
		
		//
		ЗначениеСубконто = ВидыСубконтоФин.Получить(СчетЗатрат.ВидыСубконто[Сч].ВидСубконто);
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			
			//
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные["Субконто" + (Сч + 1)]) Тогда
				
				//
				ТекущиеДанные["Субконто" + (Сч + 1)] = ЗначениеСубконто;
				
			ИначеЕсли ТекущиеДанные["Субконто" + (Сч + 1)] <> ЗначениеСубконто Тогда
				
				//
				Если ТипЗнч(ТекущиеДанные["Субконто" + (Сч + 1)]) = ТипЗнч(ЗначениеСубконто) Тогда
					ТекущиеДанные["Субконто" + (Сч + 1)] = ЗначениеСубконто;
				КонецЕсли;
				
			КонецЕсли; 
			
			//
			//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
			//комментирую, подбор счета идёт другой процедурой. Убрать этот код с 1 сентября 2018, когда обкатаем алгоритм.
			 
			//Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
			//	ВидыСубконтоБух.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратБУ"),
			//														ПолучитьСтатьюЗатратБухПоСтатьеДР(ЗначениеСубконто, СчетЗатрат));
			//	ВидыСубконтоБух.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратБУ"),
			//														ПолучитьСтатьюПрочихДоходовРасходовБухПоСтатьеДР(ЗначениеСубконто, СчетЗатрат));
			//КонецЕсли; 
			
			//---АК Susk (Суслин К.В.) 
			
		КонецЕсли; 
		
	КонецЦикла;	
	
	//+++АК Susk (Суслин К.В.) 2018.08.03 ИП-00018930
	//комментирую, подбор счета идёт другой процедурой. Убрать этот код с 1 сентября 2018, когда обкатаем алгоритм.
	
	
	#Область КомментКод_УслугиОбработкаИнформацииОСчетеЗатратИСубконто		
	//Если ЗначениеЗаполнено(СчетЗатрат) Тогда
	//	
	//	//
	//	ВидыСубконтоБух.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"), ТекущиеДанные.Номенклатура);
	//	
	//	//
	//	
	//	Если ТекущиеДанные.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
	//		
	//		СчетаЗатрат = Справочники.Номенклатура.ПолучитьСчетаУчета(ТекущиеДанные.Номенклатура);
	//		Если СчетаЗатрат.СчетЗатрат = СчетЗатрат Тогда
	//			ТекущиеДанные.СчетЗатратБУ = СчетаЗатрат.СчетУчетаБУ;
	//            ТекущиеДанные.СчетЗатратНУ = СчетаЗатрат.СчетЗатратНУ;
	//        КонецЕсли;
	//				
	//	Иначе	
	//		СчетаЗатратБух = ПолучитьСчетаУчетаНоменклатурыБух(ТекущиеДанные.Номенклатура, "УСЛУГИ", СчетЗатрат);
	//		
	//		//
	//		ТекущиеДанные.СчетЗатратБУ = СчетаЗатратБух.СчетУчетаБУ;
	//		Для Сч = 0 По СчетЗатрат.ВидыСубконто.Количество() - 1 Цикл
	//			
	//			//
	//			ЗначениеСубконто = ВидыСубконтоБух.Получить(СчетЗатрат.ВидыСубконто[Сч].ВидСубконто);
	//			Если НЕ ЗначениеЗаполнено(ТекущиеДанные["СубконтоБУ" + (Сч + 1)]) Тогда
	//				ТекущиеДанные["СубконтоБУ" + (Сч + 1)] = ЗначениеСубконто;	
	//			КонецЕсли; 
	//			
	//		КонецЦикла;	
	//		
	//		//
	//		ТекущиеДанные.СчетЗатратНУ = СчетаЗатратБух.СчетУчетаНУ;
	//		Для Сч = 0 По СчетЗатрат.ВидыСубконто.Количество() - 1 Цикл
	//			
	//			//
	//			ЗначениеСубконто = ВидыСубконтоБух.Получить(СчетЗатрат.ВидыСубконто[Сч].ВидСубконто);
	//			Если НЕ ЗначениеЗаполнено(ТекущиеДанные["СубконтоНУ" + (Сч + 1)]) Тогда
	//				ТекущиеДанные["СубконтоНУ" + (Сч + 1)] = ЗначениеСубконто;	
	//			КонецЕсли; 
	//			
	//		КонецЦикла;	
	//    КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	//---АК Susk (Суслин К.В.) 

КонецПроцедуры

Процедура ТоварыКоличествоПретензияПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	ПосчитатьСуммуСтрокиТЧ(ТекСтрока);
	
КонецПроцедуры

//АК БЕЛН 28.03.2016++
Процедура СтатусПолученныхДокументовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекСтатус)
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатусПолученныхДокументов) Тогда
		ЭтотОбъект.СтатусПолученныхДокументов = ТекСтатус;
	    Сообщить("Нельзя очистить статус прикрепленных документов, если он был заполнен");
	Иначе
		ТекСтатус = ЭтотОбъект.СтатусПолученныхДокументов;
		ЭтотОбъект.ДокументыПолучены = ЗначениеЗаполнено(ЭтотОбъект.СтатусПолученныхДокументов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент) Экспорт
	
	Если ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
		И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
		//СтатусПолученныхДокументов=ДокументОснование.СтатусПолученныхДокументов;
		//ДокументыПолучены=ЗначениеЗаполнено(СтатусПолученныхДокументов);
		ЭтотОбъект.Товары.Очистить();		
	КонецЕсли;
	
	//++ АК 15.12.2017 luza ИП-00017451
	//Заполнение по документу основанию
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) = Истина 
		И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
			ЭтотОбъект.Заявка = ЭтотОбъект.ДокументОснование;
			ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ЭтотОбъект.Заявка.СчетУчетаРасчетов;
			ЭтотОбъект.СтатьяДДС = ЭтотОбъект.Заявка.СтатьяДДС;			
			ЭтотОбъект.СтруктурнаяЕдиница 	= ЭтотОбъект.Заявка.ЦФО;			
	КонецЕсли;	
	//-- АК 15.12.2017 luza ИП-00017451
	
	
КонецПроцедуры
//АК БЕЛН 28.03.2016--
//---ZEZA

Процедура ДействияФормыВыгрузитьВБП(Кнопка)
	
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		Сообщить("Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
	
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Документ был изменен. Сначала нужно записать документ");
		Возврат;
	КонецЕсли;
	
	//
	ТЗВыгрузки = Новый ТаблицаЗначений;
	ТЗВыгрузки.Колонки.Добавить("Вид");
	ТЗВыгрузки.Колонки.Добавить("УИН");
	СтрокаПодключения = ПолныеПрава.ПолучитьСтрокуПодключения_Бух();
	v82COMОбъект = Новый COMОбъект(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
	
	Попытка
		v82 = v82COMОбъект.Connect(СтрокаПодключения);
		ПодключениеУстановлено = Истина;
	Исключение
		ПодключениеУстановлено = Ложь;
		Сообщить("Не удалось подключитьс к базе бухгалтерии");
		Возврат;
	КонецПопытки;
	
	///////////////////////////////
	ЗапросДатыЗапрета = v82.NewObject("Запрос");  
			
	ЗапросДатыЗапрета.Текст =
	"ВЫБРАТЬ
	|	ГраницыЗапретаИзмененияДанных.Организация.ИНН КАК ИНН,
	|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	|ИЗ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	|ГДЕ	
	//+++susk <без задачи>
	//|	ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
	|	ГраницыЗапретаИзмененияДанных.Пользователь = &Пользователь";
	
	ЗапросДатыЗапрета.УстановитьПараметр("Пользователь", v82.ПараметрыСеанса.ТекущийПользователь);
	//---susk
	
	ДатыЗапрета = ЗапросДатыЗапрета.Выполнить().Выгрузить();
	
	ДатаЗапрета = Неопределено;
	Если ДатыЗапрета.Количество() > 0 Тогда
		НашлиДата = ДатыЗапрета.Найти(ЭтотОбъект.Организация.ИНН, "ИНН");
		Если НЕ НашлиДата = Неопределено Тогда
			ДатаЗапрета = НашлиДата.ГраницаЗапретаИзменений;
			Если НашлиДата.ГраницаЗапретаИзменений > ЭтотОбъект.Дата Тогда //Передумали, опять не грузим
				Сообщить("В бухгалтерии закрыт период, документ не будет выгружен");
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
				
	////////////////////////////////
	
	ОбъектОбработки = v82.Обработки.АК_ИмпортДанныхИз_1С_ФУ_Бухгалтерия.Создать();
	НоваяСтрока = ТЗВыгрузки.Добавить();
	НоваяСтрока.УИН = СокрЛП(ЭтотОбъект.Ссылка.УникальныйИдентификатор());
	НоваяСтрока.Вид = ЭтотОбъект.Ссылка.Метаданные().Имя;
	ОбъектОбработки.ИмпортДокументовСервер(ТЗВыгрузки);
	
	Предупреждение("Документ обработан");
	
КонецПроцедуры

//АК БЕЛН 19.04.2016++
Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	Если ТипЗнч(ЭлементыФормы.ДокументыОснования.ТекущиеДанные.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")
			И ЗначениеЗаполнено(ЭлементыФормы.ДокументыОснования.ТекущиеДанные.ДокументОснование) Тогда
		//СтатусПолученныхДокументов=ДокументОснование.СтатусПолученныхДокументов;
		//ДокументыПолучены=ЗначениеЗаполнено(СтатусПолученныхДокументов);
		ЭтотОбъект.Товары.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭлементыФормы.ДокументыОснования.ТекущиеДанные.ДокументОснование) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		
		ФормаВыбора = Документы.ПриходныйОрдерСклад.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Отбор.Поставщик.Установить(ЭтотОбъект.Контрагент);
		ФормаВыбора.Отбор.Организация.Установить(ЭтотОбъект.Организация);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(ЭлементыФормы.ДокументыОснования.ТекущиеДанные.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		ФормаВыбора=Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Отбор.Контрагент.Установить(ЭтотОбъект.Контрагент);
		ФормаВыбора.Отбор.Организация.Установить(ЭтотОбъект.Организация);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;	
	
	Если СтандартнаяОбработка = Ложь Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		
		ЭлементыФормы.ДокументыОснования.ТекущиеДанные.ДокументОснование = ВыбранноеЗначение;
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		ЭлементыФормы.ДокументыОснования.ТекущиеДанные.ДокументОснование = ВыбранноеЗначение;
		СтандартнаяОбработка = Ложь;
		
		//+++АК SaMi 30.01.2017 
		СтруктурнаяЕдиница 	= ВыбранноеЗначение.ЦФО;
		СтатьяДДС 			= ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств;
		//---АК SaMi  30.01.2017 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораТовары()
	
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	//
	мСписокВыбора = мКолонкиТовары.СтавкаНДС.ЭлементУправления.СписокВыбора;
	мСписокВыбора.Очистить();
	
	Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		
		мСписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
		
	Иначе
		
		// посмотрим режимы заполнения в характеристике
		СтрСтавкиПоХарактеристике = СтруктураСтавкиНДСИзХарактеристики(ТекДанные.Номенклатура);
		
		Если СтрСтавкиПоХарактеристике.ВыборСтавкиНДСВручную Тогда
			
			мСписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
			мСписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
			мСписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18);
			
		ИначеЕсли ЗначениеЗаполнено(СтрСтавкиПоХарактеристике.СтавкаНДС) Тогда
			
			мСписокВыбора.Добавить(СтрСтавкиПоХарактеристике.СтавкаНДС);
			
		Иначе	
			
			Если ЗначениеЗаполнено(ТекДанные.Номенклатура.СтавкаНДС) Тогда
				мСписокВыбора.Добавить(ТекДанные.Номенклатура.СтавкаНДС);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСписокВыбораТовары();

КонецПроцедуры
 

Процедура ЗаполнитьСписокВыбораУслуги()
	
	ТекДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
    //
	мСписокВыбора = мКолонкиУслуги.СтавкаНДС.ЭлементУправления.СписокВыбора;
	мСписокВыбора.Очистить();
	
	Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		
		мСписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
		
	Иначе
		
		Если ТекДанные.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			
			мСписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
			мСписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
			мСписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18);
			
			Если ТекДанные.Номенклатура.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
					И ТекДанные.Номенклатура.СтавкаНДС <> Перечисления.СтавкиНДС.НДС10
					И ТекДанные.Номенклатура.СтавкаНДС <> Перечисления.СтавкиНДС.НДС18 Тогда
				мСписокВыбора.Добавить(ТекДанные.Номенклатура.СтавкаНДС);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекДанные.Номенклатура.СтавкаНДС) Тогда
				мСписокВыбора.Добавить(ТекДанные.Номенклатура.СтавкаНДС);
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСписокВыбораУслуги();

КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьФормуДляРедактированияРеквизитовВЗакрытомПериоде(Кнопка)
	
	Если Модифицированность() Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли; 
	
	//
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		ФормаРедактирования = ЭтотОбъект.ПолучитьФорму("ФормаОбычнаяРедактированияДокументаВЗакрытомПериоде", ЭтаФорма);
		ФормаРедактирования.Открыть();
	КонецЕсли;
	
КонецПроцедуры

//АК БЕЛН 19.04.2016--

Процедура ДействияФормыОтправитьУведомление(Кнопка)
	
	ТекстПисьма = "" + ЭтотОбъект.Номер + " от " + Формат(ЭтотОбъект.Дата, "ДФ=dd.MM.yyyy") +
					Символы.ПС + ЭтотОбъект.Контрагент.НаименованиеПолное + Символы.ПС + ЭтотОбъект.Комментарий;
	//+++ AK suvv 23.04.2018 ИП-00018461 				
	//ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаОтправкиУведомления",
	//				Новый Структура("ТекстПисьма, ТемаПисьма, Контрагент", ТекстПисьма, "Полезная информация от бухгалтерии", ЭтотОбъект.Контрагент));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаОтправкиУведомления",
					Новый Структура("ТекстПисьма, ТемаПисьма, Контрагент, Организация", ТекстПисьма, "Полезная информация от бухгалтерии", ЭтотОбъект.Контрагент, ЭтотОбъект.Организация));
	//--- AK				
КонецПроцедуры

//

Процедура ОткрытьФайлИзКаталога(Знач пИмяФайла, Каталог)
	
	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	Состояние("Сохраняется файл: " + пИмяФайла);
	
	Файлы = НайтиФайлы(Каталог, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(пИмяФайла), Истина);
	Если Файлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьФайл(Файлы[0].ПолноеИмя, ИмяКаталога + "\" + пИмяФайла);
	
	Состояние("Файл сохранен как: " + пИмяФайла);
	
	РаботаСФайлами.ОткрытьФайлДополнительнойИнформации(ИмяКаталога, пИмяФайла);
	
КонецПроцедуры	

// Сохранение на диск файла и его открытие.
//
Процедура ОткрытьФайлИзХранилища(Знач пИмяФайла, Хранилище, СпособПерезаписи = "", ВопросОПерезаписи = Истина)
	
	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	Состояние("Сохраняется файл: " + пИмяФайла);
	
	пИмяФайла = ПолучитьИмяВременногоФайла(Прав(пИмяФайла, 4));
	
	Состояние("Файл сохранен как: " + пИмяФайла);
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	Если РаботаСФайлами.СохранитьФайлНаДиске(Хранилище, ИмяВременногоФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи) Тогда
		РаботаСФайлами.ОткрытьФайлДополнительнойИнформации(ИмяКаталога, пИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ОткрытьФайл(Кнопка)
//	
//	ВремХранилище = Неопределено;
//	Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
//		ВремХранилище = СчетНаОплату;
//	ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
//		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
//		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
//		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
//		Если Файлы.Количество() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
//	КонецЕсли;
//	
//	ОткрытьФайлИзХранилища(СчетНаОплатуИмяФайла, ВремХранилище, "", Ложь);
//	
//КонецПроцедуры

//
Функция ВыбратьФайл()
		
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФайла.Фильтр = "Все файлы (*.*)|*.*";
	
	//АК БЕЛН 25.03.2016++
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		ДиалогФайла.Каталог = РаботаСДиалогамиКлиент.ПолучитьПапкуКонтрагента(ЭтотОбъект.Контрагент.Наименование);	
	КонецЕсли; 
	//АК БЕЛН 25.03.2016--
	
	ВнешняяОбработка = Неопределено;
	
	Если ДиалогФайла.Выбрать() Тогда
		
		ПолноеИмяФайла = ДиалогФайла.ПолноеИмяФайла;
				
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогФайла.ПолноеИмяФайла);
	
	КомментарийКФайлу = Файл.Имя + Символы.ПС + "размер:" + Файл.Размер() + " байт; изменен:" + Файл.ПолучитьВремяИзменения() +
						"; сохранен в ИБ:" + ТекущаяДата();
	
	СтруктураВозврата = Новый Структура("КомментарийКФайлу,ПолноеИмяФайла,ИмяФайла", КомментарийКФайлу, ПолноеИмяФайла, Файл.Имя);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохранить файл
//
Процедура СохранитьФайл(Знач пИмяФайла, Хранилище, СпособПерезаписи = "")

	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	Состояние("Сохраняется файл: " + пИмяФайла);
	
	пИмяФайла = ПолучитьИмяВременногоФайла(Прав(пИмяФайла, 4));

	пИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	РаботаСФайлами.СохранитьФайлНаДиске(Хранилище, пИмяФайла, Ложь, СпособПерезаписи);
	
	Состояние("Файл сохранен как: " + пИмяФайла);

КонецПроцедуры

//Процедура КоманднаяПанельФайлаИсточникаЗаменитьФайл(Кнопка)
//	
//	ЗначениеВозврата = ВыбратьФайл();
//	Если ЗначениеВозврата = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	пИмяФайла   = ЗначениеВозврата.ИмяФайла;
//	
//	СчетНаОплату = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
//	
//	СчетНаОплатуИмяФайла = пИмяФайла;
//	СчетНаОплатуПолноеИмяФайла   = ЗначениеВозврата.ПолноеИмяФайла;
//	//ЭлементыФормы.СчетНаОплату.ЦветТекста = Новый Цвет(0, 0, 0);
//КонецПроцедуры

//Процедура КоманднаяПанельФайлаИсточникаСохранитьФайлНаДиск(Кнопка)
//	
//	Каталог=ПолучитьПапкуКонтрагента();
//	Режим = РежимДиалогаВыбораФайла.Сохранение;
//	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим);
//	ДиалогОткрытия.ПолноеИмяФайла = СчетНаОплатуИмяФайла;
//	ДиалогОткрытия.Каталог = Каталог;
//	Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла);
//	Если ЗначениеЗаполнено(Расширение) Тогда
//		ДиалогОткрытия.Фильтр = Расширение + "|*." + Расширение;
//	КонецЕсли;
//	ДиалогОткрытия.Заголовок = "Выбор файла для сохранения";
//	Если НЕ ДиалогОткрытия.Выбрать() Тогда
//		Возврат;
//	Иначе
//		ИмяФайлаДляСохранения = ДиалогОткрытия.ПолноеИмяФайла;
//		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайлаДляСохранения);
//		Если НЕ ЗначениеЗаполнено(Расширение) Тогда
//			ИмяФайлаДляСохранения = ИмяФайлаДляСохранения+"."+Расширение;
//		КонецЕсли;
//		ДвоичныеДанные = СчетНаОплату.Получить();
//		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
//			ДвоичныеДанные.Записать(ИмяФайлаДляСохранения);		
//		ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
//			КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
//			КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
//			Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
//			Если Файлы.Количество() = 0 Тогда
//				Возврат;
//			КонецЕсли;
//			КопироватьФайл(Файлы[0].ПолноеИмя,ИмяФайлаДляСохранения);
//		КонецЕсли;
//	КонецЕсли;
//	//ВремХранилище = Неопределено;
//	//Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
//	//	ВремХранилище = СчетНаОплату;
//	//ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
//	//	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
//	//	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
//	//	Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
//	//	Если Файлы.Количество() = 0 Тогда
//	//		Возврат;
//	//	КонецЕсли;
//	//	ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
//	//КонецЕсли;
//	//
//	//СохранитьФайл(СчетНаОплатуИмяФайла, ВремХранилище, "");
//	
//КонецПроцедуры

Функция ПолучитьПапкуКонтрагента()
	
	Папка = "";
	Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		Папка = РаботаСДиалогамиКлиент.ПолучитьПапкуКонтрагента(ЭтотОбъект.Контрагент.Наименование);
	КонецЕсли;
	
	Возврат Папка;
	
КонецФункции


Процедура КоманднаяПанельФайлаИсточникаУдалитьФайл(Кнопка)
	
	СчетНаОплату 				= Новый ХранилищеЗначения(Неопределено);
	СчетНаОплатуИмяФайла 		= "";
	СчетНаОплатуПолноеИмяФайла 	= "";
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1ЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	пИмяФайла = ЗначениеВозврата.ИмяФайла;
	
	ЭтотОбъект.РасходнаяНакладная 			= Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	ЭтотОбъект.РасходнаяНакладнаяИмяФайла 	= пИмяФайла;
	//Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
	//	ЗаписатьБезКонтроля();
	//КонецЕсли;	
	//ЭлементыФормы.РасходнаяНакладная.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1Действие(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.РасходнаяНакладная.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.РасходнаяНакладная;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.РасходнаяНакладнаяИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Расходные накладные\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.РасходнаяНакладнаяИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	ОткрытьФайлИзХранилища(ЭтотОбъект.РасходнаяНакладнаяИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1СохранитьФайлНаДиск(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.РасходнаяНакладная.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.РасходнаяНакладная;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.РасходнаяНакладнаяИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Расходные накладные\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.РасходнаяНакладнаяИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	СохранитьФайл(ЭтотОбъект.РасходнаяНакладнаяИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2ЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	пИмяФайла = ЗначениеВозврата.ИмяФайла;
	
	ЭтотОбъект.АктОбОказанииУслуг 			= Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	ЭтотОбъект.АктОбОказанииУслугИмяФайла 	= пИмяФайла;
	
	//Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
	//	ЗаписатьБезКонтроля();
	//КонецЕсли;	
	
	//ЭлементыФормы.АктОбОказанииУслуг.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2Действие(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.АктОбОказанииУслуг.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.АктОбОказанииУслуг;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.АктОбОказанииУслугИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Акт об оказании услуг\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.АктОбОказанииУслугИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	ОткрытьФайлИзХранилища(ЭтотОбъект.АктОбОказанииУслугИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2СохранитьФайлНаДиск(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.АктОбОказанииУслуг.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.АктОбОказанииУслуг;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.АктОбОказанииУслугИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Акт об оказании услуг\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.АктОбОказанииУслугИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	СохранитьФайл(ЭтотОбъект.АктОбОказанииУслугИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2УдалитьФайл(Кнопка)
	
	ЭтотОбъект.АктОбОказанииУслуг 			= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.АктОбОказанииУслугИмяФайла 	= "";
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1УдалитьФайл(Кнопка)
	
	ЭтотОбъект.РасходнаяНакладная 			= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.РасходнаяНакладнаяИмяФайла 	= "";
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3ЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	пИмяФайла = ЗначениеВозврата.ИмяФайла;
	
	ЭтотОбъект.СчетФактураПолученный 			= Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	ЭтотОбъект.СчетФактураПолученныйИмяФайла 	= пИмяФайла;
	
	//Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
	//	ЗаписатьБезКонтроля();
	//КонецЕсли;	
	
	//ЭлементыФормы.СчетФактураПолученный.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3Действие(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.СчетФактураПолученный.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.СчетФактураПолученный;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.СчетФактураПолученныйИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\СФ полученный\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.СчетФактураПолученныйИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	ОткрытьФайлИзХранилища(ЭтотОбъект.СчетФактураПолученныйИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3СохранитьФайлНаДиск(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.СчетФактураПолученный.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.СчетФактураПолученный;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.СчетФактураПолученныйИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\СФ полученный\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.СчетФактураПолученныйИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	СохранитьФайл(ЭтотОбъект.СчетФактураПолученныйИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3УдалитьФайл(Кнопка)
	
	ЭтотОбъект.СчетФактураПолученный 			= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.СчетФактураПолученныйИмяФайла 	= "";
	
КонецПроцедуры

//Процедура КоманднаяПанельФайлаИсточникаПечать(Кнопка)
//	
//	ВремХранилище = Неопределено;
//	Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
//		ВремХранилище = СчетНаОплату;
//	ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
//		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
//		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
//		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
//		Если Файлы.Количество() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
//	КонецЕсли;
//	
//	ПечатьФайла(СчетНаОплатуИмяФайла, ВремХранилище);
//	
//КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1Печать(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.РасходнаяНакладная.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.РасходнаяНакладная;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.РасходнаяНакладнаяИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Расходные накладные\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.РасходнаяНакладнаяИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	ПечатьФайла(ЭтотОбъект.РасходнаяНакладнаяИмяФайла, ВремХранилище);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2Печать(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.АктОбОказанииУслуг.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.АктОбОказанииУслуг;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.АктОбОказанииУслугИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Акт об оказании услуг\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.АктОбОказанииУслугИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	ПечатьФайла(ЭтотОбъект.АктОбОказанииУслугИмяФайла, ВремХранилище);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3Печать(Кнопка)
	
	ВремХранилище = Неопределено;
	
	Если ТипЗнч(ЭтотОбъект.СчетФактураПолученный.Получить()) = Тип("ДвоичныеДанные") Тогда
		
		ВремХранилище = ЭтотОбъект.СчетФактураПолученный;
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.СчетФактураПолученныйИмяФайла) Тогда
		
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\СФ полученный\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()) + "." +
												РаботаСФайлами.ПолучитьРасширениеФайла(ЭтотОбъект.СчетФактураПолученныйИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
		
	КонецЕсли;
	
	//
	ПечатьФайла(ЭтотОбъект.СчетФактураПолученныйИмяФайла, ВремХранилище);
	
КонецПроцедуры

Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


Процедура АктНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры

Процедура АктОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Акт);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры

Процедура СчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			СчетФактура = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

Процедура СчетФактураОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(СчетФактура);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры

Процедура ПриложениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Приложение = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

Процедура ПриложениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Приложение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры

Процедура УПДНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			УПД = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

Процедура УПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(УПД);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	Если Элемент.Значение = ПланыСчетов.Финансовый.НайтиПоКоду("60.7") Тогда
		Предупреждение("Счет 60.7 упразднен. Вместо него необходимо использовать счет 60.4.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОборудованиеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	//+++AK susk
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Если ПриходныеОрдера.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В документе указаны приходные ордера. Соответственно, ввести оборудование можно только по ним. Ручной ввод запрещен!", Отказ);
		ИначеЕсли ЗначениеЗаполнено(Склад) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В документе указан склад. Соответственно, ввести оборудование можно только по приходным ордерам. Ручной ввод запрещен!", Отказ);
		КонецЕсли;
	КонецЕсли;	
	
	//---AK susk	
	
	//+++АК SaMi 12.06.2017 
	Если Не Отказ И Оборудование.Количество() = 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	СделкаСПоставщиком.Ссылка
		|ИЗ
		|	Документ.СделкаСПоставщиком КАК СделкаСПоставщиком
		|ГДЕ
		|	СделкаСПоставщиком.Контрагент = &Контрагент
		|	И СделкаСПоставщиком.Проведен");
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Если Вопрос("По контрагенту <" + Контрагент + "> " + " поставки оборудования осуществляются по сделкам! Заполнить документ по предварительному поступлению?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				КоманднаяПанельОборудованиеЗаполнитьПоПредпоступлению();
			КонецЕсли; 
		КонецЕсли; 		
	КонецЕсли; 
	//---АК SaMi  12.06.2017 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи 
Процедура ПроверитьКорректностьУказанияСтатьиБУ(СтрокаТЧ)
	
	СтатьяДРФин = СтрокаТЧ.Субконто1.ОсновнаяСтатьяДоходовРасходов;
	
	Если СтатьяДРФин.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеСтатейДРСтатьямБУ.Статья,
	               |	СоответствиеСтатейДРСтатьямБУ.СтатьяБУ
	               |ИЗ
	               |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	               |ГДЕ
	               |	СоответствиеСтатейДРСтатьямБУ.Статья = &Статья
	               |	И СоответствиеСтатейДРСтатьямБУ.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)";
				   
	Запрос.УстановитьПараметр("Статья", СтатьяДРФин);
	
	ТаблицаСтатейБУИзСоответствия = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСтатейБУИзСоответствия.Найти(СтрокаТЧ.СубконтоБУ1, "СтатьяБУ") = Неопределено Тогда
		Предупреждение("Запрещено указывать статью затрат (БУ), не привязанную к статье ДР (фин)!" + Символы.ПС + 
						"Соответствие статей настраивается: Операции->Регистры сведений->Соответствие статей ДР статьям БУ.");
						
		СтрокаТЧ.СубконтоБУ1 = Справочники.СтатьиЗатратБУ.ПустаяСсылка();
		
	КонецЕсли;		
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура СтатьяДДСПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(СтатьяДДС);
		
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	//+++АК SUVV 2018.02.28 ИП-00017941
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СоответствияСтатейСчетов.СтатьяДДС,
	//|	СоответствияСтатейСчетов.СтатьяДР,
	//|	СоответствияСтатейСчетов.Счет
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	//|ГДЕ
	//|	СоответствияСтатейСчетов.СтатьяДДС = &Ссылка";				   
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &Ссылка) КАК СоответствияСтатейСчетовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетов.СтатьяДДС,
	|	СоответствияСтатейСчетов.СтатьяДР,
	|	СоответствияСтатейСчетов.Счет
	|ИЗ
	|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";			   
	Запрос.УстановитьПараметр("ВыбДата", Дата);
	//---АК SUVV
				   
	Запрос.УстановитьПараметр("Ссылка", СтатьяДДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.СтатьяДР) Тогда
			СтатьяЗатрат = Выборка.СтатьяДР;
		Иначе
			СтатьяЗатрат = СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
		КонецЕсли;
		//+++AK BARA 16581
		Если ЗначениеЗаполнено(Выборка.Счет) Тогда
			
			СчетУчетаРасчетовСКонтрагентом = Выборка.Счет; 
			
		КонецЕсли;
		//---AK BARA 16581

		ОбщегоНазначения.СообщитьОбОшибке("Изменена статья затрат по соответствию регистра ""Соответствия статей и счетов"" " + ?(ЗначениеЗаполнено(СтатьяЗатрат), " на: " + Строка(СтатьяЗатрат), ""), , , СтатусСообщения.Информация);
		
	КонецЕсли;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура РасчетСуммыНДСПоОборудованию(СтрокаТабличнойЧасти)
	
	//1. Сперва пересчитаем суммы НДС по конкретной номенклатуре
	НайдСтроки = Оборудование.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
	
	Для Каждого НСтр Из НайдСтроки Цикл
		РассчитатьСуммуНДСТабЧасти(НСтр, ВариантРасчетаНДС);
	КонецЦикла;
	
	//2. Теперь просчитаем сколько должен быть НДС по сумме номенклатуры
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
	
	НайдСтроки = Оборудование.НайтиСтроки(СтруктураПоиска);
	
	Если НайдСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщСумма = 0;
	ОБщСуммаНДС = 0;
	
	Для Каждого НСтр Из НайдСтроки Цикл
		ОбщСумма = ОбщСумма + НСтр.Сумма;
		ОбщСуммаНДС = ОбщСуммаНДС + НСтр.СуммаНДС;
	КонецЦикла;
	
	// Рассчитаем сумму НДС
	СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(ОбщСумма, Истина, ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле,
													   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)), 2);
													   
	
	РазницаСуммыНДС = СуммаНДС - ОБщСуммаНДС;
	
	// прилепим разницу на первую-попавшуюся позицию
	НайдСтроки[0].СуммаНДС = НайдСтроки[0].СуммаНДС + РазницаСуммыНДС;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура СтатьяДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);		
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура ПолеВвода1ПриИзменении(Элемент)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(СтатьяЗатрат);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура ПолеВвода1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура УслугиСубконто1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура УслугиСубконто2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура УслугиСубконто3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.30 б/н старые задачи
Процедура ЗаявкаПриИзменении(Элемент)
	//++ АК 15.12.2017 luza ИП-00017451
	//Заполнение по документу основанию
	Если ЗначениеЗаполнено(ЭтотОбъект.Заявка) = Истина 
		И ТипЗнч(ЭтотОбъект.Заявка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		ЭтотОбъект.ДокументОснование = ЭтотОбъект.Заявка;
		ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ЭтотОбъект.Заявка.СчетУчетаРасчетов;			
		ЭтотОбъект.СтруктурнаяЕдиница 	= ЭтотОбъект.Заявка.ЦФО;	
		
		ЭтотОбъект.СтатьяДДС = ЭтотОбъект.Заявка.СтатьяДДС;									
		//СтатьяДДСПриИзменении(ЭлементыФормы.СтатьяДДС);
		
		РаботаСДиалогамиДополнительный.ПроверкаВыбранногоЗначения(СтатьяДДС);
		
		Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;	
		//+++АК SUVV 2018.02.28 ИП-00017941
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	СоответствияСтатейСчетов.СтатьяДДС,
		//|	СоответствияСтатейСчетов.СтатьяДР,
		//|	СоответствияСтатейСчетов.Счет
		//|ИЗ
		//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		//|ГДЕ
		//|	СоответствияСтатейСчетов.СтатьяДДС = &Ссылка";	
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
		|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, СтатьяДДС = &Ссылка) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствияСтатейСчетов.СтатьяДДС,
		|	СоответствияСтатейСчетов.СтатьяДР,
		|	СоответствияСтатейСчетов.Счет
		|ИЗ
		|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
		|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период";
		Запрос.УстановитьПараметр("ВыбДата", Дата);
		//---АК SUVV
			  	
		Запрос.УстановитьПараметр("Ссылка", СтатьяДДС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.СтатьяДР) Тогда
				СтатьяЗатрат = Выборка.СтатьяДР;
			Иначе
				СтатьяЗатрат = СтатьяДДС.ОсновнаяСтатьяДоходовРасходов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Счет) Тогда					
				СчетУчетаРасчетовСКонтрагентом = Выборка.Счет; 					
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;	
	//-- АК 15.12.2017 luza ИП-00017451
КонецПроцедуры

//++ АК luza ИП-00017231.01 28.12.17
Процедура ГиперссылкаСчетФактураНажатие(Элемент)	
	ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");
КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//++ АК luza ИП-00017231.01 28.12.17
Процедура ВвестиСчетФактуру(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураПолученный", Отбор= Неопределено) 

	//Попытаемся найти счет-фактуру
	фСчетФактура = Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, Отбор);

	Если ДокументОбъект.ПометкаУдаления = Истина Тогда
		Предупреждение("Счет-фактуру нельзя вводить на основании документа, помеченного на удаление");
		Возврат;
	КонецЕсли;

	ОбъектСчетаФактуры = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(фСчетФактура)) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен. Сначала следует записать документ.");
			Возврат;
		КонецЕсли;

		ОбъектСчетаФактуры = Документы.СчетФактураПолученный.СоздатьДокумент();		
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		ОбъектСчетаФактуры.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект)).Открыть();
		
	Иначе
		// Откроем форму для редактирования счета-фактуры
		Если ТипЗнч(фСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			фСчетФактура.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект)).Открыть();
		Иначе			
			Предупреждение("Документ был изменен. Сначала следует записать документ.");
			Возврат;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//++ АК luza ИП-00017231.01 28.12.17
Процедура ЗаполнитьТекстПроСчетФактуру() 
	  		
	Если ЗначениеЗаполнено(ЭтотОбъект.НомерВходящегоСчетаФактуры) = Истина Или ЗначениеЗаполнено(ЭтотОбъект.ДатаВходящегоСчетаФактуры) = Истина Тогда
		ЭтаФорма.ПредъявленСФ = Истина;	
	Иначе
		ЭтаФорма.ПредъявленСФ = Ложь;				
	КонецЕсли;	
	
	Если ЭтаФорма.ПредъявленСФ = Истина Тогда
		СтрокаСФ= "№ "+?(ПустаяСтрока(ЭтотОбъект.НомерВходящегоСчетаФактуры), " ... ", СокрЛП(ЭтотОбъект.НомерВходящегоСчетаФактуры)) +" от "+ ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаВходящегоСчетаФактуры), Формат(ЭтотОбъект.ДатаВходящегоСчетаФактуры,"ДФ=dd.MM.yyyy")," ... ") + " г.";
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = СтрокаСФ;			
	Иначе			
		фСчетФактура = НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный");
		
		Если ЗначениеЗаполнено(фСчетФактура) = Истина Тогда
			СтрокаСФ= "№ "+?(ПустаяСтрока(фСчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(фСчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(фСчетФактура.ДатаВходящегоДокумента), Формат(фСчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
		Иначе		
			СтрокаСФ = "Ввести счет-фактуру";
		КонецЕсли;					
		
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = СтрокаСФ;
		
	КонецЕсли;	
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Не ПредъявленСФ;
	ЭлементыФормы.НадписьНомерСФ.Видимость = ПредъявленСФ;
	ЭлементыФормы.НадписьДатаСФ.Видимость = ПредъявленСФ;	
	ЭлементыФормы.НомерВходящегоСчетаФактуры.Видимость = ПредъявленСФ;
	ЭлементыФормы.ДатаВходящегоСчетаФактуры.Видимость = ПредъявленСФ;

		
	//ПредъявленСФПриИзменении(Неопределено);

КонецПроцедуры 
//-- АК luza ИП-00017231.01 28.12.17

//++ АК luza ИП-00017231.01 28.12.17
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если Параметр = Ссылка Тогда
			ЗаполнитьТекстПроСчетФактуру();			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//++ АК luza ИП-00017231.01 28.12.17
Процедура ПредъявленСФПриИзменении(Элемент)
	
	Если ПредъявленСФ = Истина Тогда
		фСчетФактура = НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный");
		
		Если ЗначениеЗаполнено(фСчетФактура) И ТипЗнч(фСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда			
			Ответ = Вопрос("Для указания данных счета-фактуры требуется пометить на удаление подчиненный документ <" + фСчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = фСчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				Попытка
					СчетФактураОбъект.Записать();
					СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
				Исключение
					ПредъявленСФ = Ложь;						
					Возврат;	
				Конецпопытки;	
			Иначе
				ПредъявленСФ = Ложь;						
				Возврат;
			КонецЕсли;					
		КонецЕсли;
		
		Если ЗначениеЗаполнено(мТекНомерВхСФ) Тогда
			ЭтотОбъект.НомерВходящегоСчетаФактуры = мТекНомерВхСФ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(мТекДатаВхСф) Тогда
			ЭтотОбъект.ДатаВходящегоСчетаФактуры = мТекДатаВхСф;
		КонецЕсли;
		
		СтрокаСФ= "№ "+?(ПустаяСтрока(ЭтотОбъект.НомерВходящегоСчетаФактуры), " ... ", СокрЛП(ЭтотОбъект.НомерВходящегоСчетаФактуры)) +" от "+ ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаВходящегоСчетаФактуры), Формат(ЭтотОбъект.ДатаВходящегоСчетаФактуры,"ДФ=dd.MM.yyyy")," ... ") + " г.";
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = СтрокаСФ;	
	Иначе
		мТекНомерВхСФ = ЭтотОбъект.НомерВходящегоСчетаФактуры;
	 	мТекДатаВхСф = ЭтотОбъект.ДатаВходящегоСчетаФактуры;
		
		Если ЗначениеЗаполнено(мТекНомерВхСФ) = Истина Тогда
			ЭтотОбъект.НомерВходящегоСчетаФактуры = "";
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(мТекДатаВхСф) = Истина Тогда
			ЭтотОбъект.ДатаВходящегоСчетаФактуры = Дата(1,1,1);
		КонецЕсли;
		
		фСчетФактура = НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный");
		Если ЗначениеЗаполнено(фСчетФактура) = Истина Тогда
			СтрокаСФ= "№ "+?(ПустаяСтрока(фСчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(фСчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(фСчетФактура.ДатаВходящегоДокумента), Формат(фСчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
		Иначе		
			СтрокаСФ = "Ввести счет-фактуру";
		КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = СтрокаСФ;	
	КонецЕсли;
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Не ПредъявленСФ;
	ЭлементыФормы.НадписьНомерСФ.Видимость = ПредъявленСФ;
	ЭлементыФормы.НадписьДатаСФ.Видимость = ПредъявленСФ;	
	ЭлементыФормы.НомерВходящегоСчетаФактуры.Видимость = ПредъявленСФ;
	ЭлементыФормы.ДатаВходящегоСчетаФактуры.Видимость = ПредъявленСФ;

КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530
Процедура ДействияФормыВыгрузитьВБПНов(Кнопка)
	
	Если НЕ ОбменСБП2_0.ПроверкаПередВыгрузкой(Ссылка.Пустая(), Модифицированность) Тогда
		Возврат;
	КонецЕсли;	
		
	ОбменСБП2_0.ВыгрузитьДокументВБП("ПоступлениеТоваровУслуг", "ПоступлениеТоваровУслуг", Ссылка); 
	
КонецПроцедуры	

//++ АК luza ИП-00017231.01 28.12.17
Процедура НомерВходящегоСчетаФактурыПриИзменении(Элемент)
	СтрокаСФ= "№ "+?(ПустаяСтрока(ЭтотОбъект.НомерВходящегоСчетаФактуры), " ... ", СокрЛП(ЭтотОбъект.НомерВходящегоСчетаФактуры)) +" от "+ ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаВходящегоСчетаФактуры), Формат(ЭтотОбъект.ДатаВходящегоСчетаФактуры,"ДФ=dd.MM.yyyy")," ... ") + " г.";
	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = СтрокаСФ;
КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//++ АК luza ИП-00017231.01 28.12.17
Процедура ДатаВходящегоСчетаФактурыПриИзменении(Элемент)
	СтрокаСФ= "№ "+?(ПустаяСтрока(ЭтотОбъект.НомерВходящегоСчетаФактуры), " ... ", СокрЛП(ЭтотОбъект.НомерВходящегоСчетаФактуры)) +" от "+ ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаВходящегоСчетаФактуры), Формат(ЭтотОбъект.ДатаВходящегоСчетаФактуры,"ДФ=dd.MM.yyyy")," ... ") + " г.";
	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = СтрокаСФ;
КонецПроцедуры
//-- АК luza ИП-00017231.01 28.12.17

//+++АК SHEP 2018.01.25 ИП-00017365.02
Процедура КнопкаВыбораПериодаЗаполненияНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачалоПериодаЗаполнения, ?(КонецПериодаЗаполнения = '0001-01-01', КонецПериодаЗаполнения, КонецДня(КонецПериодаЗаполнения)));
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериодаЗаполнения = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериодаЗаполнения = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

//+++АК SHEP 2018.01.25 ИП-00017365.02
Процедура ТранспортныеУслугиЗаполнитьДокументы(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(НачалоПериодаЗаполнения) ИЛИ НЕ ЗначениеЗаполнено(КонецПериодаЗаполнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан период заполнения!",, "НачалоПериодаЗаполнения");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Контрагент!",, "Контрагент");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Договор контрагента!",, "ДоговорКонтрагента");
		Возврат;
	КонецЕсли;
	
	Если ТранспортныеДокументы.Количество() > 0 Тогда
		Если Вопрос("Табличная часть «Транспортные документы» не пуста и будет перезаполнена.
			|
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ТранспортныеДокументы.Очистить();
	КонецЕсли;
	
	//+++АК sole 2018.07.03 ИП-00018321.07	
	Если 
			ЭтотОбъект.ОсновнаяПоставка
		Или ЭтотОбъект.ДополнительнаяПоставка
		Или ЭтотОбъект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ВозвратПоставщику
	Тогда
		ЗаполнитьТранспортныеДокументы();
	Иначе
		ТранспортныеУслугиЗаполнитьДокументыНаСервере();
	КонецЕсли;
	//---АК sole 2018.07.03 ИП-00018321.07
	
КонецПроцедуры

//+++АК sole 2018.07.02 ИП-00018321.07: Заменил выборку из "ДоставкаНаТТ", на "МаршрутныйЛист"
Процедура ЗаполнитьТранспортныеДокументы()
	
	//+++АК sole 2018.07.18 ИП-00018321.09
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутныйЛист.Ссылка КАК Документ,
|	МаршрутныйЛист.СуммаДопТарифа КАК СуммаДопТарифа,
|	МаршрутныйЛист.Сумма КАК СуммаДокумента,
|	МаршрутныйЛист.ПричинаПеревозки КАК ПричинаПеревозки
|
|ИЗ	Документ.МаршрутныйЛист КАК МаршрутныйЛист
|ГДЕ
|		НЕ МаршрутныйЛист.ПометкаУдаления
|	И	МаршрутныйЛист.Проведен
|	И	МаршрутныйЛист.ВидПеревозки = &ВидПеревозки 
|	И	МаршрутныйЛист.Дата >= &НачалоПериода
|	И	МаршрутныйЛист.Дата <= &КонецПериода
|	И	МаршрутныйЛист.Организация = &Организация
|	И	МаршрутныйЛист.Перевозчик = &Контрагент
|  	И 	(
|			(							
|						&ОсновнаяПоставка				
|					И	(	
|			
|								МаршрутныйЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|							ИЛИ	МаршрутныйЛист.ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
|						)
|				ИЛИ	
|						&ДополнительнаяПоставка
|					И	МаршрутныйЛист.ПричинаПеревозки <> ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка)
|					И	МаршрутныйЛист.ПричинаПеревозки <> ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
|			)
|			ИЛИ &ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ВозвратПоставщику)
|		)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ОбщиеТранспортныеРасходы.Ссылка,
|	0,
|	ОбщиеТранспортныеРасходы.Сумма,
|	ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ПустаяСсылка)
|
|ИЗ Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы	
|ГДЕ
|		ОбщиеТранспортныеРасходы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
|	И	ОбщиеТранспортныеРасходы.Проведен
|	И	ОбщиеТранспортныеРасходы.Организация = &Организация
|	И	ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
|	И	ОбщиеТранспортныеРасходы.ВидТранспортныхРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыОбщихТранспортныхРасходов.ДополнительныеУслуги)
|	И	&ВидПеревозки = ЗНАЧЕНИЕ(Справочник.АК_ВидыПеревозки.ДоставкаНаТТ)
|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериодаЗаполнения));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОсновнаяПоставка", ЭтотОбъект.ОсновнаяПоставка);
	Запрос.УстановитьПараметр("ДополнительнаяПоставка", ЭтотОбъект.ДополнительнаяПоставка);
	//---АК sole 2018.07.18 ИП-00018321.09
	
	//+++АК sole 2018.07.27 ИП-00018320.05
	Если ЭтотОбъект.ВидПеревозки.Пустая() Тогда
		ЭтотОбъект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ; 	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидПеревозки", ЭтотОбъект.ВидПеревозки);
	//---АК sole 2018.07.27 ИП-00018320.05
	
	ТранспортныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

//+++АК SHEP 2018.01.25 ИП-00017365.02
Процедура ТранспортныеУслугиЗаполнитьДокументыНаСервере()
	
	//+++АК SHEP 2018.04.27 ИП-00018321.02: добавил заполнение реквизита СуммаДопТарифа
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДоставкаНаТТ.Ссылка КАК Документ,
		|	ДоставкаНаТТ.СуммаДопТарифа КАК СуммаДопТарифа,
		|	ДоставкаНаТТ.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
		|ГДЕ
		|	ДоставкаНаТТ.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ДоставкаНаТТ.Проведен
		|	И ДоставкаНаТТ.Организация = &Организация
		|	И ДоставкаНаТТ.Контрагент = &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеТранспортныеРасходы.Ссылка,
		|	0,
		|	ОбщиеТранспортныеРасходы.Сумма
		|ИЗ
		|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
		|ГДЕ
		|	ОбщиеТранспортныеРасходы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОбщиеТранспортныеРасходы.Проведен
		|	И ОбщиеТранспортныеРасходы.Организация = &Организация
		|	И ОбщиеТранспортныеРасходы.Перевозчик = &Контрагент
		|	И ОбщиеТранспортныеРасходы.ВидТранспортныхРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыОбщихТранспортныхРасходов.ДополнительныеУслуги)");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериодаЗаполнения));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТранспортныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//+++АК SHEP 2018.01.25 ИП-00017365.02
Процедура ТранспортныеУслугиПриИзменении(Элемент)
	ЭлементыФормы.Панель1.Страницы.СтраницаТранспортныеДокументы.Видимость = ТранспортныеУслуги;
	ЭлементыФормы.КоманднаяПанель2.Кнопки.ЗаполнитьУслугиПоТранспортнымДокументам.Доступность = ТранспортныеУслуги;
	
	//+++АК sole 2018.07.27 ИП-00018320.05
	//+++АК ILIK 2018.08.08 ИП-00019494
	//Если ЭтотОбъект.ВидПеревозки.Пустая() Тогда
	Если ЭтотОбъект.ВидПеревозки.Пустая() И Не НастройкаПравДоступа.ДокументВЗакрытомПериоде(ЭтотОбъект) Тогда
	//---АК ILIK
		 ЭтотОбъект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;	
	КонецЕсли;
	//---АК sole 2018.07.27 ИП-00018320.05
	
КонецПроцедуры

//+++АК SHEP 2018.01.31 ИП-00017365.02
//+++АК SHEP 2018.04.27 ИП-00018321.02: добавил заполнение реквизита СуммаДопТарифа
Процедура ТранспортныеДокументыСуммаПодвалаОбновить()
	ТранспортныеДокументы_Колонки = ЭлементыФормы.ТранспортныеДокументы.Колонки;
	ТранспортныеДокументыСуммаДокументаИтог = ТранспортныеДокументы.Итог("СуммаДокумента");
	ТранспортныеДокументыСуммаДопТарифаИтог = ТранспортныеДокументы.Итог("СуммаДопТарифа");
	ТранспортныеДокументы_Колонки.СуммаДокумента.ТекстПодвала = Формат(ТранспортныеДокументыСуммаДокументаИтог, "ЧДЦ=2");
	ТранспортныеДокументы_Колонки.СуммаДопТарифа.ТекстПодвала = Формат(ТранспортныеДокументыСуммаДопТарифаИтог, "ЧДЦ=2");
	ТранспортныеДокументы_Колонки.Документ.ТекстПодвала = "Итого: " + Формат(ТранспортныеДокументыСуммаДокументаИтог + ТранспортныеДокументыСуммаДопТарифаИтог, "ЧДЦ=2");
КонецПроцедуры

//+++АК SHEP 2018.01.25 ИП-00017365.02
Процедура ТранспортныеДокументыДокументПриИзменении(Элемент)
Перем ТекДок;
	
	ТекущиеДанные = ЭлементыФормы.ТранспортныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ТекущиеДанные.СуммаДокумента = 0;
		ТекущиеДанные.СуммаДопТарифа = 0;
		Возврат;
	КонецЕсли;
	
	ТекДок = ТекущиеДанные.Документ;
	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
		ТекущиеДанные.СуммаДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекДок, "Сумма");
		ТекущиеДанные.СуммаДопТарифа = 0;
	Иначе
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекДок, "СуммаДокумента,СуммаДопТарифа"));
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.01.30 ИП-00017365.02
Процедура КоманднаяПанель2ЗаполнитьУслугиПоТранспортнымДокументам(Кнопка)
	
	Услуги.Очистить();
	НоваяСтрокаУслуги = Услуги.Добавить();
	ЭлементыФормы.Услуги.ТекущаяСтрока = НоваяСтрокаУслуги;
	НоваяСтрокаУслуги.СчетЗатрат = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	НоваяСтрокаУслуги.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("000620351"); //000615832
	УслугиНоменклатураПриИзменении(ЭлементыФормы.Услуги, Ложь);
	НоваяСтрокаУслуги.Количество = 1;
	НоваяСтрокаУслуги.Сумма = ТранспортныеДокументы.Итог("СуммаДокумента");
	УслугиСуммаПриИзменении(ЭлементыФормы.Услуги);
	НоваяСтрокаУслуги.Содержание = "Транспортные расходы за " + ПредставлениеПериода(НачалоПериодаЗаполнения, КонецДня(КонецПериодаЗаполнения));
	ТранспортныеРасходыПрочие = Справочники.СтатьиЗатратБУ.НайтиПоКоду("000000072");
	НоваяСтрокаУслуги.СубконтоБУ1 = ТранспортныеРасходыПрочие;
	НоваяСтрокаУслуги.СубконтоНУ1 = ТранспортныеРасходыПрочие;
	
	//+++АК SHEP 2018.04.27 ИП-00018321.02: добавил заполнение СуммаДопТарифа
	СтруктураНастроекДопТариф =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ТранспортныеРасходыПоДоставкеНаТочкуДопТариф, ЭтотОбъект.Дата);
	
	Если ЗначениеЗаполнено(СтруктураНастроекДопТариф.Счет) Тогда
		
		ТекСумма = ТранспортныеДокументы.Итог("СуммаДопТарифа");
		
		Если Истина ИЛИ ТекСумма <> 0 Тогда
			
			НоваяСтрокаУслуги = Услуги.Добавить();
			
			ЭлементыФормы.Услуги.ТекущаяСтрока = НоваяСтрокаУслуги;
			
			Услуги_Колонки = ЭлементыФормы.Услуги.Колонки;
			НоваяСтрокаУслуги.СчетЗатрат = СтруктураНастроекДопТариф.Счет;
			УслугиСчетЗатратПриИзменении(Услуги_Колонки.СчетЗатрат.ЭлементУправления);
			
			НоваяСтрокаУслуги.Номенклатура = СтруктураНастроекДопТариф.ДопРеквизит;
			УслугиНоменклатураПриИзменении(ЭлементыФормы.Услуги, Ложь);
			НоваяСтрокаУслуги.Содержание = "Транспортные расходы (доп. тариф) за " + ПредставлениеПериода(НачалоПериодаЗаполнения, КонецДня(КонецПериодаЗаполнения));
			НоваяСтрокаУслуги.Количество = 1;
			НоваяСтрокаУслуги.Сумма = ТекСумма;
			УслугиСуммаПриИзменении(ЭлементыФормы.Услуги);
			
			НоваяСтрокаУслуги.Субконто1 = СтруктураНастроекДопТариф.СтруктурнаяЕдиница;
			УслугиСубконто1ПриИзменении(Услуги_Колонки.Субконто1.ЭлементУправления);
			НоваяСтрокаУслуги.Субконто2	= СтруктураНастроекДопТариф.СтатьяДоходовРасходов;
			УслугиСубконто2ПриИзменении(Услуги_Колонки.Субконто2.ЭлементУправления);
			НоваяСтрокаУслуги.Субконто3 = СтруктураНастроекДопТариф.ЦФО;
			УслугиСубконто3ПриИзменении(Услуги_Колонки.Субконто3.ЭлементУправления);
			
			НоваяСтрокаУслуги.СубконтоБУ1 = ТранспортныеРасходыПрочие;
			НоваяСтрокаУслуги.СубконтоНУ1 = ТранспортныеРасходыПрочие;
			
		КонецЕсли;
		
	КонецЕсли;
	//+++АК SHEP 2018.04.27
	
	ПосчитатьСуммуТабличнойЧасти();
	
КонецПроцедуры

//+++АК SHEP 2018.01.30 ИП-00017365.02
Процедура ТранспортныеДокументыДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
Перем ТекДок;
	
	ТекущиеДанные = ЭлементыФормы.ТранспортныеДокументы.ТекущиеДанные;
	
	ТекДок = ТекущиеДанные.Документ;
	Если ТекДок <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыВыбора = Новый Структура;
		
		// отбор
		СтруктураОтбора = Новый Структура("Организация", Организация);
		СтруктураОтбора.Вставить("Проведен", Истина);
		Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.ОбщиеТранспортныеРасходы") Тогда
			СтруктураОтбора.Вставить("Перевозчик", Контрагент);
			СтруктураОтбора.Вставить("ВидТранспортныхРасходов", ПредопределенноеЗначение("Перечисление.ВидыОбщихТранспортныхРасходов.ДополнительныеУслуги"));
		Иначе
			СтруктураОтбора.Вставить("Контрагент", Контрагент);
		КонецЕсли;
		ПараметрыФормыВыбора.Вставить("Отбор", СтруктураОтбора);
		
		РезультатВыбора = ОткрытьФормуМодально("Документ." + ТекДок.Метаданные().Имя + ".ФормаВыбора", ПараметрыФормыВыбора, ЭтаФорма);
		Если РезультатВыбора <> Неопределено Тогда
			ТекущиеДанные.Документ = РезультатВыбора;
			ТранспортныеДокументыДокументПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.02 ИП-00016528 
Процедура ТоварыПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "КорректировкаПТУ" Тогда
		ПосчитатьСуммуСтрокиТЧ(ЭлементыФормы.Товары.ТекущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.13 ИП-00017787
Процедура АвтоподборСчетаИАналитики(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСчетАналитика = ПолучитьСтруктуруСчетаАналитикиУслугиПоСтатистике(СтрокаТабличнойЧасти.Номенклатура);
		
	ТекстВопроса = "";
		
	Если СтруктураСчетАналитика.Количество() Тогда	
			
		Если ЗначениеЗаполнено(СтруктураСчетАналитика.СчетЗатрат) Тогда
			ТекстВопроса = "-Счет затрат: " + Строка(СтруктураСчетАналитика.СчетЗатрат) + Символы.Пс;				
			
			//44-й
			Если СтруктураСчетАналитика.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения) Тогда 
			
				ДобавитьТекстПроСубконтоВВопросПоСтатистике(ТекстВопроса, СтруктураСчетАналитика.Субконто2, 2);
				ДобавитьТекстПроСубконтоВВопросПоСтатистике(ТекстВопроса, СтруктурнаяЕдиница, 3);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		Ответ = Вопрос("Заполнить счет затрат и аналитику следующими значениями по статистике: " + Символы.Пс + ТекстВопроса + "?", РежимДиалогаВопрос.ДаНет);
			
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
			
		СтрокаТабличнойЧасти.СчетЗатрат = СтруктураСчетАналитика.СчетЗатрат;
		
		Если ЗначениеЗаполнено(СтруктураСчетАналитика.СчетЗатрат) И СтруктураСчетАналитика.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ЗатратыДляРаспределения) Тогда
			СтрокаТабличнойЧасти.Субконто2 = СтруктураСчетАналитика.Субконто2;
			СтрокаТабличнойЧасти.Субконто3 = СтруктурнаяЕдиница;
		КонецЕсли;			
			
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.13 ИП-00017787
Процедура ДобавитьТекстПроСубконтоВВопросПоСтатистике(ТекстВопроса, Субконто, Счетчик)
	
	ТекстВопроса = ТекстВопроса + "-Субконто" + Строка(Счетчик) + ": " + Строка(Субконто) + Символы.ПС;
		
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.02.13 ИП-00017787
Функция ПолучитьСтруктуруСчетаАналитикиУслугиПоСтатистике(Номенклатура) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугУслуги.Номенклатура,
	               |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	               |	ПоступлениеТоваровУслугУслуги.Субконто1,
	               |	ПоступлениеТоваровУслугУслуги.Субконто2,
	               |	ПоступлениеТоваровУслугУслуги.Субконто3
	               |ПОМЕСТИТЬ Сводная
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |ГДЕ
	               |	ПоступлениеТоваровУслугУслуги.Номенклатура = &Номенклатура
	               |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &ДатаОтсчета
	               |	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сводная.СчетЗатрат,
	               |	СУММА(1) КАК Счетчик
	               |ПОМЕСТИТЬ СчетСчетчик
	               |ИЗ
	               |	Сводная КАК Сводная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Сводная.СчетЗатрат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СчетСчетчик.Счетчик) КАК Счетчик
	               |ПОМЕСТИТЬ СчетМаксимум
	               |ИЗ
	               |	СчетСчетчик КАК СчетСчетчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СчетСчетчик.СчетЗатрат) КАК СчетЗатрат1
	               |ПОМЕСТИТЬ СводнаяСчет
	               |ИЗ
	               |	СчетМаксимум КАК СчетМаксимум
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СчетСчетчик КАК СчетСчетчик
	               |		ПО СчетМаксимум.Счетчик = СчетСчетчик.Счетчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СчетСчетчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СчетМаксимум
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сводная.Субконто2,
	               |	СУММА(1) КАК Счетчик
	               |ПОМЕСТИТЬ Субконто2Счетчик
	               |ИЗ
	               |	Сводная КАК Сводная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Сводная.Субконто2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Субконто2Счетчик.Счетчик) КАК Счетчик
	               |ПОМЕСТИТЬ Субконто2Максимум
	               |ИЗ
	               |	Субконто2Счетчик КАК Субконто2Счетчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Субконто2Счетчик.Субконто2) КАК Субконто2
	               |ПОМЕСТИТЬ СводнаяСубконто2
	               |ИЗ
	               |	Субконто2Максимум КАК Субконто2Максимум
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Субконто2Счетчик КАК Субконто2Счетчик
	               |		ПО Субконто2Максимум.Счетчик = Субконто2Счетчик.Счетчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Субконто2Счетчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Субконто2Максимум
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Сводная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СводнаяСчет.СчетЗатрат1 КАК СчетЗатрат,
	               |	СводнаяСубконто2.Субконто2
	               |ИЗ
	               |	СводнаяСчет КАК СводнаяСчет,
	               |	СводнаяСубконто2 КАК СводнаяСубконто2"; 
	              // |	СводнаяСубконто3 КАК СводнаяСубконто3";		
	
	Запрос.УстановитьПараметр("ДатаОтсчета", ДобавитьМесяц(ТекущаяДата(), -6));
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Вставить("СчетЗатрат", Выборка.СчетЗатрат);
		СтруктураВозврата.Вставить("Субконто2", Выборка.Субконто2);		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.02.28 ИП-00017676.02
Процедура ПроверкаЗаполненностиРеквизитовСчетФактуры(Отказ, РежимЗаписи)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(НомерВходящегоСчетаФактуры) 
			И НЕ ЗначениеЗаполнено(ДатаВходящегоСчетаФактуры) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Дата входящего счета-фактуры""!", Отказ);
		ИначеЕсли ЗначениеЗаполнено(ДатаВходящегоСчетаФактуры) 
			И НЕ ЗначениеЗаполнено(НомерВходящегоСчетаФактуры) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Номер входящего счета-фактуры""!", Отказ);
		КонецЕсли;
	КонецЕсли;
	                
КонецПроцедуры

Процедура ПослеЗаписи()
		
	//+++АК LAGP 2018.06.20 ИП-00018875 Рассылка оповещения факторинговой компании
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "РасчетыЧерезФК") И Проведен Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "В договоре использован признак ""Расчёты через факторинговую компанию""!" + Символы.ПС + "Желате отправить письмо-уведомление факторинговой компании?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Уведомить факторинговую команию?");	
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК ILIK 2018.10.18 ИП-00019757.02
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка И Проведен Тогда
		ВыполнитьЗадачиПоДокументу();
	КонецЕсли;
	//---АК ILIK

КонецПроцедуры

//+++АК LAGP 2018.06.20 ИП-00018875 Рассылка оповещения факторинговой компании
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда		
		ФакторинговаяКомпанияДоговора = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "ФакторинговаяКомпания");
		Если ЗначениеЗаполнено(ФакторинговаяКомпанияДоговора) Тогда
			ОтправитьПисьмоПоПочте(ФакторинговаяКомпанияДоговора);				
		КонецЕсли;						
    КонецЕсли;	
 
КонецПроцедуры

//+++АК LAGP 2018.06.20 ИП-00018875 Рассылка оповещения факторинговой компании
Процедура ОтправитьПисьмоПоПочте(ФакторинговаяКомпанияДоговора)  	
	
	СтруктураНовогоПисьма = Новый Структура;
		
	Кому = Новый Массив;
	
	ЗапросАдресовЭП = Новый Запрос;
	ЗапросАдресовЭП.Текст =                                                                                   
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &ФакторинговаяКомпанияДоговора
	|	И КонтактнаяИнформация.Вид = &ВидКонтактнойИнформации";
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("Текст"							, ЗапросАдресовЭП.Текст);
	СтруктураЗапроса.Вставить("ФакторинговаяКомпанияДоговора"	, ФакторинговаяКомпанияДоговора);
	СтруктураЗапроса.Вставить("ВидКонтактнойИнформации"			, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
		
	РезультатЗапросаПолучателейРассылки = ПолныеПрава.ВыполнитьЗапрос(СтруктураЗапроса);
		
	ВыборкаДетальныеЗаписиЭП = РезультатЗапросаПолучателейРассылки.Выбрать();
	Пока ВыборкаДетальныеЗаписиЭП.Следующий() Цикл
		Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписиЭП.Представление)) Тогда
			Кому.Добавить(ВыборкаДетальныеЗаписиЭП.Представление);
		КонецЕсли; 
	КонецЦикла;
	
	Кому.Добавить("lagp@automacon.ru");
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
			
	СтрокаПредставления = "Оповещение о фактическом поступлении товара от контрагента " + Контрагент;
	СтрокаПриходныхОрдеров = "";
	Если ПриходныеОрдера.Количество() > 0 Тогда
		СтрокаПриходныхОрдеров = "Склад принял документами: " + Символы.ПС;	
	КонецЕсли;	
	Для каждого Ордер Из ПриходныеОрдера Цикл
		СтрокаПриходныхОрдеров = СтрокаПриходныхОрдеров + Ордер.ПриходныйОрдер + Символы.ПС;	
	КонецЦикла;	
	
	//+++АК LAGP 2018.07.05 ИП-00018875.01 Добавлена дополнительная строка в письмо
	ВходящийНомер 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерВходящегоДокумента");
	ВходящаяДата 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаВходящегоДокумента");
	
	Если ТипЗнч(ВходящаяДата) = Тип("Дата") Тогда
		ВходящаяДата = Формат(ВходящаяДата, "ДФ=dd.MM.yyyy");	
	КонецЕсли;	
		
	СтруктураНовогоПисьма.Вставить("Тема",	СтрокаПредставления);
	//СтруктураНовогоПисьма.Вставить("Тело", "Внимание, проведено " + Ссылка + Символы.ПС + "Сумма документа: " + СуммаДокумента + Символы.ПС + СтрокаПриходныхОрдеров);
	СтруктураНовогоПисьма.Вставить("Тело", "Внимание, проведено " + Ссылка + Символы.ПС + "Сумма документа: " + СуммаДокумента  
		+ Символы.ПС + "Входящий документ поставщика №" + ВходящийНомер + " от " + ВходящаяДата + Символы.ПС + СтрокаПриходныхОрдеров);		
	//---АК LAGP	
		
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	СпАдресов = Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп, ";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = ТабДок;	
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
 	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес.Значение;
	КонецЦикла;
	Почта.Послать(Письмо);
	Почта.Отключиться();
		
КонецПроцедуры

//+++АК sole 2018.07.17 ИП-00018320.12
Процедура ТоварыКоличествоПретензияКПеревозчикуПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	ПосчитатьСуммуСтрокиТЧ(ТекСтрока);

КонецПроцедуры

//+++АК sole 2018.07.27 ИП-00018320.05
Процедура ВидПеревозкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляФильтрации = Новый СписокЗначений();
	СписокДляФильтрации.Добавить(Справочники.АК_ВидыПеревозки.ДоставкаНаТТ);
	СписокДляФильтрации.Добавить(Справочники.АК_ВидыПеревозки.ВозвратПоставщику);
	
	ФормаВыбора = Справочники.АК_ВидыПеревозки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = СписокДляФильтрации;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ОткрытьМодально();

КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.08.02 
Процедура ИзменениеСчетаИлиСубконтоДляБУ(ИзменениеСубконто = Истина)
	
	ТекСтрока = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Проводки = ЗаполнениеДокументов.ВернутьТаблицуДляСопоставления();

	НовСтр = Проводки.Добавить();
	НовСтр.СчетДт = ТекСтрока.СчетЗатрат;		
	НовСтр.СубконтоДт1 = ТекСтрока.Субконто1;
	НовСтр.СубконтоДт2 = ТекСтрока.Субконто2;
	НовСтр.СубконтоДт3 = ТекСтрока.Субконто3;		
	НовСтр.НомерСтроки = ТекСтрока.НомерСтроки;
	
	ЗаполнениеДокументов.ПроставитьСчетИСубконтоБУВДокумент(ЭтотОбъект, Проводки, "Услуги", 3, "БУ");
	
	Если ИзменениеСубконто Тогда
		
		Для НомерСубконто = 1 По 3 Цикл
			БухгалтерскийУчет.ЗаменитьСубконтоНУ(ТекСтрока.СчетЗатратБУ, ТекСтрока.СчетЗатратНУ, НомерСубконто, ТекСтрока["СубконтоБУ" + Строка(НомерСубконто)], ТекСтрока["СубконтоНУ" + Строка(НомерСубконто)]);
		КонецЦикла;

	Иначе
		
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекСтрока.СчетЗатратБУ, 
			ТекСтрока.СубконтоБУ1, мКолонкиУслуги.СубконтоБУ1,
			ТекСтрока.СубконтоБУ2, мКолонкиУслуги.СубконтоБУ2,
			ТекСтрока.СубконтоБУ3, мКолонкиУслуги.СубконтоБУ3);
			
		ЗаполнитьСчетНалоговогоУчета();		
				
	КонецЕсли;	
	
КонецПроцедуры

//+++АК ILIK 2018.10.10 ИП-00019835
Процедура ЗаполнитьКППКонтрагента(Заменить = Ложь)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоНовый() Или Заменить Тогда
		КППКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ПоступлениеТоваровУслуг.Контрагент.КПП) КАК КППКонтрагента
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |		ПО ПоступлениеТоваровУслуг.Ссылка = ЗначенияСвойствОбъектов.Объект
		               |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КППКонтрагента))
		               |ГДЕ
		               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КППКонтрагента = Выборка.КППКонтрагента;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.10.18 ИП-00019757.02
Процедура ВыполнитьЗадачиПоДокументу()
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка,
	               |	ЗадачаИсполнителя.Ответственный,
	               |	ЗадачаИсполнителя.Исполнитель
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.НеПроведенПТУ)
	               |	И ЗадачаИсполнителя.ОбъектЗадачи = &ОбъектЗадачи
	               |	И НЕ ЗадачаИсполнителя.Выполнена";
	Запрос.УстановитьПараметр("ОбъектЗадачи", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Ответственный = Выборка.Исполнитель;
		ЗадачаОбъект.Выполнена = Истина;
		ЗадачаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

//+++ АК luza 20.09.2018 ИП-00019881
Процедура ЗаполнитьПрикрепленныеФайлы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	МАКСИМУМ(ЭДО_СопоставлениеДокументов.ДокументЭДО.ФайлPDF) КАК ДокументЭДОФайлPDF
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_СопоставлениеДокументов.ВидДокумента";
	
	Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда
			ФайлАктСверки = Стр.ДокументЭДОФайлPDF;			
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры

#Область Учет_НМА
//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура КоманднаяПанельНМАСоздатьНМА(Кнопка)
	
	Ответ = Вопрос("Будут созданы/обновлены элементы справочника Основные средства. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьОБновитьНМА();
	Модифицированность = Истина;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура УстановитьВидимостьДоступность_НМА()
	
	Видимость_НМА = ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА;
	
	Если Видимость_НМА Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница_НМА; 		
	КонецЕсли;
	
	ЭлементыФормы.Панель1.Страницы.Товары.Видимость = НЕ Видимость_НМА И ЭлементыФормы.Панель1.Страницы.Товары.Видимость;
	ЭлементыФормы.Панель1.Страницы.Услуги.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.Панель1.Страницы.Страница_НМА.Видимость = Видимость_НМА;
	ЭлементыФормы.Панель1.Страницы.Оборудование.Видимость = НЕ Видимость_НМА И ЭлементыФормы.Панель1.Страницы.Оборудование.Видимость;
	ЭлементыФормы.Панель1.Страницы.ПриходныеОрдера.Видимость = НЕ Видимость_НМА И ЭлементыФормы.Панель1.Страницы.ПриходныеОрдера.Видимость;
	ЭлементыФормы.НадписьСтруктурнаяЕдиница.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.СтруктурнаяЕдиница.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.НадписьСклад.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.Склад.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.Надпись1.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.ВариантРасчетаНДС.Видимость = НЕ Видимость_НМА;
	ЭлементыФормы.ТранспортныеУслуги.Видимость = НЕ Видимость_НМА;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура НастроитьДокумент_НМА()
	
	УстановитьВидимостьДоступность_НМА();	
	
	Если Не ЭтоНовый() И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА И НЕ ТабличноеПолеНМА.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПоступлениеТоваровУслугНМА.ОС,
		               |	ПоступлениеТоваровУслугНМА.Сумма,
		               |	ОсновныеСредства.АмортизационнаяГруппа,
		               |	ОсновныеСредства.СрокЭксплуатации КАК СрокПолезногоИспользования,
		               |	ОсновныеСредства.ВидНМА,
		               |	ОсновныеСредства.Наименование КАК ОсновноеСредствоСтрокой
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.НМА КАК ПоступлениеТоваровУслугНМА
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
		               |		ПО ПоступлениеТоваровУслугНМА.ОС = ОсновныеСредства.Ссылка
		               |ГДЕ
		               |	ПоступлениеТоваровУслугНМА.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТабличноеПолеНМА = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура ПроверкаЗаполненияРеквизитовПоНМА()
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеНМА И ТабличноеПолеНМА.Количество() Тогда
		Если мТекущийВидОперации <> ВидОперации Тогда
			Ответ = Вопрос("Табличная часть ""Поступление НМА"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НМА.Очистить();
			Иначе
				ВидОперации = мТекущийВидОперации;				
			КонецЕсли;
		КонецЕсли;
	Иначе
		МетаданныеДок = ЭтотОбъект.Метаданные();
		
		СчетчикЗаполненныхТЧ = 0;
		ТабличныеЧастиЗаполненные = "";
		
		Для Каждого Тч Из МетаданныеДок.ТабличныеЧасти Цикл
			
			Если ТЧ.Имя <> "ДокументыОснования" И ЭтотОбъект[Тч.Имя].Количество() Тогда
				ТабличныеЧастиЗаполненные = ТабличныеЧастиЗаполненные + ТЧ.Синоним + ",";
				СчетчикЗаполненныхТЧ = СчетчикЗаполненныхТЧ + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СчетчикЗаполненныхТЧ Тогда
			СутьВопроса = "";			
			ТабличныеЧастиЗаполненные = Лев(ТабличныеЧастиЗаполненные, СтрДлина(ТабличныеЧастиЗаполненные) - 1);
			
			Ответ = Вопрос(?(СчетчикЗаполненныхТЧ = 1, "Табличная часть: ", "Табличные части: ") 
					+ ТабличныеЧастиЗаполненные + ?(СчетчикЗаполненныхТЧ = 1, " будет очищена", " будут очищены") 
					+ " в документе. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для Каждого Тч Из МетаданныеДок.ТабличныеЧасти Цикл
			
					Если ТЧ.Имя <> "ДокументыОснования" И ЭтотОбъект[Тч.Имя].Количество() Тогда
						ЭтотОбъект[Тч.Имя].Очистить();	
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				ВидОперации = мТекущийВидОперации;				
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура СоздатьОбновитьНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ				   
				   |	ТЗ_НМА.ОсновноеСредствоСтрокой,
	               |	ТЗ_НМА.ОС,
	               |	ТЗ_НМА.АмортизационнаяГруппа,
	               |	ТЗ_НМА.СрокПолезногоИспользования,
	               |	ТЗ_НМА.ВидНМА
	               |ПОМЕСТИТЬ НМАДокумента
	               |ИЗ
	               |	&ТЗ_НМА КАК ТЗ_НМА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НМАДокумента.ОсновноеСредствоСтрокой,
	               |	ЕСТЬNULL(ОсновныеСредства.Ссылка, ЕСТЬNULL(ОсновныеСредстваНаименование.Ссылка, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка))) КАК ОССсылка,
	               |	НМАДокумента.АмортизационнаяГруппа,
	               |	НМАДокумента.СрокПолезногоИспользования,
	               |	НМАДокумента.ВидНМА,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновныеСредства.АмортизационнаяГруппа, ЕСТЬNULL(ОсновныеСредстваНаименование.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка))) <> НМАДокумента.АмортизационнаяГруппа
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НужноМенятьАМГруппу,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновныеСредства.СрокЭксплуатации, ЕСТЬNULL(ОсновныеСредстваНаименование.СрокЭксплуатации, 0)) <> НМАДокумента.СрокПолезногоИспользования
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НужноМенятьСрок,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновныеСредства.ВидНМА, ЕСТЬNULL(ОсновныеСредстваНаименование.ВидНМА, ЗНАЧЕНИЕ(Перечисление.ВидыНМА.ПустаяСсылка))) <> НМАДокумента.ВидНМА
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НужноМенятьВидНМА
	               |ИЗ
	               |	НМАДокумента КАК НМАДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |		ПО НМАДокумента.ОС = ОсновныеСредства.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредстваНаименование
	               |		ПО НМАДокумента.ОсновноеСредствоСтрокой = ОсновныеСредстваНаименование.Наименование";	
	
	Запрос.УстановитьПараметр("ТЗ_НМА", ТабличноеПолеНМА);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоздатьОбновитьЭлементНМА(Выборка);	
		
	КонецЦикла;
	
	//обновим теперь все реквизиты по НМА в табличном поле
	ОбновитьРеквизитыНМАВТабличномПоле();	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура СоздатьОбновитьЭлементНМА(ВыборкаЗапроса)
	
	ЕстьИзмененияЭлемента = ВыборкаЗапроса.НужноМенятьАМГруппу
			ИЛИ ВыборкаЗапроса.НужноМенятьСрок
			ИЛИ ВыборкаЗапроса.НужноМенятьВидНМА;
			
	Если ВыборкаЗапроса.ОССсылка.Пустая() Тогда
		ОСОбъект = Справочники.ОсновныеСредства.СоздатьЭлемент();
		ОСОбъект.Наименование = ВыборкаЗапроса.ОсновноеСредствоСтрокой;
		ОСОбъект.ВидОсновногоСредства = Перечисления.ВидыОсновныхСредств.НеметериальныйАктив;
		
		//дальше будем менять ам группу или срок или вид, поэтому 2 раза записывать смысла нет. Запишу дальше.
		Если НЕ ЕстьИзмененияЭлемента Тогда
			ОСОбъект.Записать();
		КонецЕсли;			
	Иначе
		ОСОбъект = ВыборкаЗапроса.ОССсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ВыборкаЗапроса.НужноМенятьАМГруппу И ЗначениеЗаполнено(ВыборкаЗапроса.АмортизационнаяГруппа) Тогда
		ОСОбъект.АмортизационнаяГруппа = ВыборкаЗапроса.АмортизационнаяГруппа;
	КонецЕсли;
	
	Если ВыборкаЗапроса.НужноМенятьСрок И ЗначениеЗаполнено(ВыборкаЗапроса.СрокПолезногоИспользования) Тогда
		ОСОбъект.СрокЭксплуатации = ВыборкаЗапроса.СрокПолезногоИспользования;
	КонецЕсли;
	
	Если ВыборкаЗапроса.НужноМенятьВидНМА И ЗначениеЗаполнено(ВыборкаЗапроса.ВидНМА) Тогда
		ОСОбъект.ВидНМА = ВыборкаЗапроса.ВидНМА;
	КонецЕсли;
	
	Если ЕстьИзмененияЭлемента Тогда
		ОСОбъект.Записать();
	КонецЕсли;
	
	НайдСтроки = ТабличноеПолеНМА.НайтиСтроки(Новый Структура("ОсновноеСредствоСтрокой", ВыборкаЗапроса.ОсновноеСредствоСтрокой));
	
	МассивНМА_Рекв = Новый Массив;
	
	Для Каждого НСтр Из НайдСтроки Цикл
		НСтр.ОсновноеСредствоСтрокой = ОСОбъект.Наименование; //могут указать нма1, а объект называется НМА1. Поэтому зановлю ему название тоже.
		НСтр.ОС = ОСОбъект.Ссылка;		
	КонецЦикла;	
			
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура ПроставитьРеквизитыНМАВСтрокуИзОбъектаНМА(Строка, НМА)
	
	Строка.АмортизационнаяГруппа = НМА.АмортизационнаяГруппа;
	Строка.СрокПолезногоИспользования = НМА.СрокЭксплуатации;
	Строка.ВидНМА = НМА.ВидНМА;	
	Строка.ОсновноеСредствоСтрокой = НМА.Наименование;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура ОбновитьРеквизитыНМАВТабличномПоле(ДляСтроки = Неопределено)
	
	МассивЭлементов = Новый Массив;
	
	Если ДляСтроки <> Неопределено Тогда
		МассивЭлементов.Добавить(ДляСтроки.ОС);
	Иначе
		Для Каждого Стр Из ТабличноеПолеНМА Цикл
			МассивЭлементов.Добавить(Стр.ОС);
		КонецЦикла;
	КонецЕсли;
	
	//получаем значения реквизитов сразу для списка
	СоответствиеЗначенийРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭлементов, "АмортизационнаяГруппа, СрокЭксплуатации, ВидНМА, Наименование");
	
	//проставляем в строки, где НМА из списка значения реквизитов
	Для Каждого ЭлНМА Из МассивЭлементов Цикл
		
		ЗначенияРеквизитов = СоответствиеЗначенийРеквизитов.Получить(ЭлНМА);
		
		Если ДляСтроки <> Неопределено Тогда
			ПроставитьРеквизитыНМАВСтрокуИзОбъектаНМА(ДляСтроки,ЗначенияРеквизитов);
		Иначе
			НайдСтрокиТЧ = ТабличноеПолеНМА.НайтиСтроки(Новый Структура("ОС", ЭлНМА));
			
			Для Каждого НСтр Из НайдСтрокиТЧ Цикл
				ПроставитьРеквизитыНМАВСтрокуИзОбъектаНМА(НСтр, ЗначенияРеквизитов);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура ТабличноеПолеНМАОСПриИзменении(Элемент)
	
	ОбновитьРеквизитыНМАВТабличномПоле(ЭлементыФормы.ТабличноеПолеНМА.ТекущиеДанные);		
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура ТабличноеПолеНМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.22 ИП-00020055
Процедура ЗаполнитьТЧДокументаПоНМА()
	
	НМА.Очистить();
	
	НМА.Загрузить(ТабличноеПолеНМА);
	
КонецПроцедуры

#КонецОбласти
	
// {{ АК Молчанов С.А. 20.11.2018 ИП-00019934_01
Процедура КоманднаяПанельТранспортныеДокументыДействиеСравнитьДанные(Кнопка)
	Если Модифицированность Или ЭтоНовый() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельТранспортныеДокументыДействиеСравнитьДанныеЗавершение", ЭтаФорма), "Для продолжения требуется сохранить документ. Записать?",РежимДиалогаВопрос.ДаНет);		
		Возврат;
	КонецЕсли;	
	ОткрытьФормуСравненияДанных();
КонецПроцедуры

Процедура КоманднаяПанельТранспортныеДокументыДействиеСравнитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			ОткрытьФормуСравненияДанных();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;		
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФормуСравненияДанных()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаНаДокумент",Ссылка);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",Истина);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаСравненияДанныхПоТранспортнымУслугам",ПараметрыФормы,ЭтаФорма);
КонецПроцедуры
// АК Молчанов С.А. 20.11.2018 ИП-00019934_01 }}


//
мКолонкиТовары 			= ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги 			= ЭлементыФормы.Услуги.Колонки;
мКолонкиОборудование 	= ЭлементыФормы.Оборудование.Колонки;
мТекущийВидОперации 	= ВидОперации;

