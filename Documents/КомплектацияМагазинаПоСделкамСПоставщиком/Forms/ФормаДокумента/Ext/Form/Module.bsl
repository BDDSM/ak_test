
&НаКлиенте
Процедура ПодобратьИзСделок(Команда)
	//Если ЕстьОплаты() Тогда // теперь функция просто заполняет вспомогательный реквизит
	//	//Сообщить("Строки комплектации участвуют в оплатах. Редактирование документа ограничено!");
	//	//Возврат;
	//КонецЕсли;	
	ТекДанные=Элементы.Комплектация.ТекущиеДанные;
	ТекКонтр=Неопределено;
	Если ТекДанные<>Неопределено Тогда
		ТекКонтр=ТекДанные.Сделка.Контрагент;
	КонецЕсли;	
	Парам=Новый Структура;
	Парам.Вставить("ЗакрыватьПриВыборе",Ложь);
	Парам.Вставить("Контрагент",ТекКонтр);
	Парам.Вставить("ТЧ",ПолучитьТЧСервер());
	Парам.Вставить("Ссылка",Объект.Ссылка);
	
	ОткрытьФорму("Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Форма.ФормаПодбораИзСделок",Парам,ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ЕстьОплаты()
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	//ТекстЗапроса="ВЫБРАТЬ
	//|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка КАК Заявка,
	//|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Комплектация,
	//|	ЗаявкаНаРасходованиеСредствТорговыеТочки.СтрокаКомплектации
	//|ИЗ
	//|	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
	//|ГДЕ
	//|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Комплектация = &Комплектация
	//|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.СтрокаКомплектации В(&СтрокаКомплектации)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РасходИзБанкаСтруктурныеЕдиницы.Ссылка,
	//|	РасходИзБанкаСтруктурныеЕдиницы.Комплектация,
	//|	РасходИзБанкаСтруктурныеЕдиницы.СтрокаКомплектации
	//|ИЗ
	//|	Документ.РасходИзБанка.СтруктурныеЕдиницы КАК РасходИзБанкаСтруктурныеЕдиницы
	//|ГДЕ
	//|	РасходИзБанкаСтруктурныеЕдиницы.Комплектация = &Комплектация
	//|	И РасходИзБанкаСтруктурныеЕдиницы.СтрокаКомплектации В(&СтрокаКомплектации)";
	//Запрос=Новый Запрос(ТекстЗапроса);			 
	//Запрос.УстановитьПараметр("Комплектация",Объект.Ссылка);
	//Запрос.УстановитьПараметр("СтрокаКомплектации",Объект.Комплектация.Выгрузить().ВыгрузитьКолонку("УИН_Строки"));
	//ТЗ=Запрос.Выполнить().Выгрузить();
	//ЗначениеВРеквизитФормы(ТЗ,"ОплаченныеСтроки");
	////Выборка=Запрос.Выполнить().Выбрать();
	//Если ТЗ.Количество()>0 Тогда
	//	Возврат Истина;
	//КонецЕсли;	
	//Возврат Ложь;
КонецФункции	

&НаСервере
Функция ПолучитьТЧСервер()
	НеоплаченныеСтроки=Новый Массив;
	Для Каждого Стр Из Объект.Комплектация Цикл
		Если ЗначениеЗаполнено(Стр.Предпоступление) Тогда
			Продолжить;
		КонецЕсли;	
		//Оплаченные=ОплаченныеСтроки.НайтиСтроки(Новый Структура("СтрокаКомплектации",Стр.УИН_Строки));
		Оплаченные=ОплатыПоКомплектации.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки));
		
		Если Оплаченные.Количество()=0 Тогда
			НеоплаченныеСтроки.Добавить(Стр);
		КонецЕсли;	
	КонецЦикла;	
	Возврат Объект.Комплектация.Выгрузить(НеоплаченныеСтроки);
	
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Форма.ФормаПодбораИзСделок" Тогда
		
		//Объект.Комплектация.Очистить();
		//НеоплаченныеСтроки=Новый Массив;
		ВыбранныеСтроки=ВыбранноеЗначение.ВыбранныеСтроки;
		ВыбКонтрагент=ВыбранноеЗначение.Контрагент;
		ОчиститьНеоплаченныеСтрокиНаСервере(ВыбКонтрагент);
		
		Для каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
			НоваяСтрока = Объект.Комплектация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбраннаяСтрока);
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ШаблоныКомплектаций.Форма.ФормаВыбора" Тогда
		ОбработатьВыборШаблонаСервер(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПредпоступлениеПоКомплектации.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ТД = Элементы.Комплектация.ТекущиеДанные;
			ТД.Предпоступление = ВыбранноеЗначение;
			
			ДанныеСтроки = Новый Структура("Сделка,Номенклатура,Количество,УИН_СтрокиСделки,УИН_Строки,Цена,ДатаГотовности");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки,ТД);
			
			ДобавитьДанныеТекущейСтрокиВДокумент(ДанныеСтроки,ТД.Предпоступление);
			Записать();
		КонецЕсли;	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПредпоступлениеПоКомплектации.Форма.ФормаДокумента" Тогда	
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ТД = Элементы.Комплектация.ТекущиеДанные;
			ТД.Предпоступление = ВыбранноеЗначение;
			Записать();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеоплаченныеСтрокиНаСервере(ВыбКонтрагент)
	//	Для Каждого Стр Из Объект.Комплектация Цикл
	Кол=Объект.Комплектация.Количество()-1;
	Для й=0 По Кол Цикл
		Стр=Объект.Комплектация[Кол-й] ;
		Если ЗначениеЗаполнено(ВыбКонтрагент)И Стр.Сделка.Контрагент<>ВыбКонтрагент Тогда
			Продолжить;
		КонецЕсли;	
		//Оплаченные=ОплаченныеСтроки.НайтиСтроки(Новый Структура("СтрокаКомплектации",Стр.УИН_Строки));
		Оплаченные=ОплатыПоКомплектации.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки));
		Если Оплаченные.Количество()=0 Тогда
			//НеоплаченныеСтроки.Добавить(Стр);
			Объект.Комплектация.Удалить(Стр);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьВыборШаблонаСервер(ВыбранноеЗначение)
	Шаблон = ВыбранноеЗначение.Состав.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Шаблон.ВыгрузитьКолонку("Номенклатура"));
	//Запрос.УстановитьПараметр("Контрагент"	, Объект.Контрагент);
	Запрос.УстановитьПараметр("Контрагенты", Шаблон.ВыгрузитьКолонку("Контрагент"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Номенклатура,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа КАК УИН_СтрокиСделки,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Остаток,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Сделка.Контрагент В (&Контрагенты)) КАК ТоварыККомплектацииСделокСПоставщикамиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка.Дата";
	ДоступныеОстатки = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Номенклатура,Контрагент");
	Для Каждого СтрокаШаблона Из Шаблон Цикл
		
		Распределить = СтрокаШаблона.Количество;
		
		//СтруктураОтбора.Номенклатура = СтрокаШаблона.Номенклатура;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрокаШаблона);
		СтрокиОстатков = ДоступныеОстатки.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОстатка Из СтрокиОстатков Цикл
			НоваяСтрока = Объект.Комплектация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			
			Если СтрокаОстатка.Остаток >= Распределить Тогда
				НоваяСтрока.Количество = Распределить;
				Распределить = 0;
			Иначе
				НоваяСтрока.Количество = СтрокаОстатка.Остаток;
				Распределить = Распределить - НоваяСтрока.Количество;
			КонецЕсли;	
			Если Распределить = 0 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если Распределить <> 0 Тогда
			НоваяСтрока = Объект.Комплектация.Добавить();
			НоваяСтрока.Количество		= Распределить;
			НоваяСтрока.Номенклатура	= СтрокаШаблона.Номенклатура;
			//НоваяСтрока.Контрагент		= СтрокаШаблона.Контрагент;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура КомплектацияНоменклатураПриИзменении(Элемент)
	ПодобратьСделкуПоПозиции();
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Сделка будет подобрана автоматически. Продолжить?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьСделкуПоПозиции()
	ТекущиеДанные=Объект.Комплектация.НайтиПоИдентификатору(Элементы.Комплектация.ТекущаяСтрока);
	Если ТекущиеДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	ТекстЗапроса="ВЫБРАТЬ ПЕРВЫЕ 1
	|	СделкаСПоставщикомГрафикОплат.Номенклатура,
	|	СделкаСПоставщикомГрафикОплат.ДатаГотовности,
	|	СделкаСПоставщикомГрафикОплат.Ссылка КАК Сделка,
	|	СделкаСПоставщикомГрафикОплат.УИН_Строки КАК УИН_СтрокиСделки,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Остаток,
	|	ЛОЖЬ КАК Пометка,
	|	0 КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки КАК ТоварыККомплектацииСделокСПоставщикамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	|		ПО ТоварыККомплектацииСделокСПоставщикамиОстатки.Сделка = СделкаСПоставщикомГрафикОплат.Ссылка
	|			И ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа = СделкаСПоставщикомГрафикОплат.УИН_Строки
	|			И ТоварыККомплектацииСделокСПоставщикамиОстатки.Номенклатура = СделкаСПоставщикомГрафикОплат.Номенклатура
	|ГДЕ
	|	(СделкаСПоставщикомГрафикОплат.Ссылка.Контрагент = &Контрагент
	|			ИЛИ &ПоВсемКонтрагентам)
	|	И СделкаСПоставщикомГрафикОплат.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СделкаСПоставщикомГрафикОплат.Ссылка.Дата";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("Номенклатура",ТекущиеДанные.Номенклатура);
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Запрос.УстановитьПараметр("ПоВсемКонтрагентам",Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсемКонтрагентам",Истина);
	КонецЕсли;	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущиеДанные.Сделка=Выборка.Сделка;
		ТекущиеДанные.УИН_СтрокиСделки=Выборка.УИН_СтрокиСделки;
		Если ТекущиеДанные.Количество>Выборка.Остаток Тогда
			Сообщить("Выбранное в данной строке количество превышает остаток неукомплектованной номенклатуры по позиции. Обратите внимание");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя="СтраницаСводно" Тогда
		ЗаполнитьСводныеДанныеНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводныеДанныеНаСервере()
	ТЗ=Объект.Комплектация.Выгрузить();
	ТЗ.Колонки.Добавить("Контрагент");
	Для каждого Стр Из ТЗ Цикл
		Стр.Контрагент=Стр.Сделка.Контрагент;
	КонецЦикла;	
	ТЗ.Свернуть("Контрагент,Номенклатура","Количество");
	ЗначениеВРеквизитФормы(ТЗ,"СводнаяТаблица");
КонецПроцедуры	

&НаКлиенте
Процедура КомплектацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

//АК_БЕЛН_06.04.2016++
&НаКлиенте                                                                     
Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("УИН_Строки", Элемент.ТекущиеДанные.УИН_Строки);
		Элементы.УслугиПоСчетам.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Стр = Объект.Услуги.Добавить();
	Стр.УИН_Строки = Новый УникальныйИдентификатор;
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Услуги.ТекущиеДанные<>Неопределено Тогда
		Стр=Объект.УслугиПоСчетам.Добавить();
		Стр.УИН_Строки=Элементы.Услуги.ТекущиеДанные.УИН_Строки;
		Стр.ФормаОплаты=ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичные");
	КонецЕсли;  
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Удалить строку?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Отказ=Истина;	
	КонецЕсли; 
	
	Если Не Отказ Тогда
		Кол=Объект.УслугиПоСчетам.Количество()-1;
		Для Сч=0 По Кол Цикл
			Если Объект.УслугиПоСчетам[Кол-Сч].УИН_Строки=Элементы.Услуги.ТекущиеДанные.УИН_Строки Тогда
				ТекСтрока = Объект.УслугиПоСчетам[Кол-Сч];
				УслугиПоСчетамПередУдалениемСервер(ТекСтрока.Заявка,Отказ,ТекСтрока.НомерСтроки);
				Если Не Отказ Тогда
					Объект.УслугиПоСчетам.Удалить(Кол-Сч);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Контрагент", Элементы.УслугиПоСчетам.ТекущиеДанные.Контрагент);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Документ.СделкаСПоставщиком.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамСделкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Сделка.СуммаСделки;
	
	Сум = 0;
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		Если СтрокаТЧ.УИН_Строки = ТекДанные.УИН_Строки Тогда                                               
			Сум = Сум + СтрокаТЧ.Сумма;
		КонецЕсли; 
	КонецЦикла;
	Элементы.Услуги.ТекущиеДанные.Сумма = Сум;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявки(Команда)
	
	Если Модифицированность
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли;
	
	МасНомеров = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Заявка) И  НЕ ЗначениеЗаполнено(СтрокаТЧ.РасходИзБанка) Тогда
			МасНомеров.Добавить(СтрокаТЧ.НомерСтроки);
		КонецЕсли; 
	КонецЦикла;
	СоответствиеНомеровИЗаявок = Новый Соответствие;
	
	//
	СоздатьЗаявкиСервер(Объект.Ссылка, МасНомеров, СоответствиеНомеровИЗаявок);
	
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		ТекЗаявка = СоответствиеНомеровИЗаявок.Получить(СтрокаТЧ.НомерСтроки);
		Если ЗначениеЗаполнено(ТекЗаявка) Тогда
			СтрокаТЧ.Заявка = ТекЗаявка;
		КонецЕсли; 
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
//+++АК SUVV 2018.02.28 ИП-00017941
//Функция ПолучитьСчетУчетаРасчетовПоСтатьеДДС(мСтатьяДДС)
Функция ПолучитьСчетУчетаРасчетовПоСтатьеДДС(ВыбДата, мСтатьяДДС)
	
	//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(мСтатьяДДС);
	МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(ВыбДата, мСтатьяДДС);
	//---АК SUVV
	
	Если МассивСчетов.Количество() = 1 Тогда
		Возврат ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
	Иначе
		Возврат Планысчетов.Финансовый.РасчетыСПоставщиками;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьЗаявкиСервер(Ссылка, МасНомеров, СоответствиеНомеровИЗаявок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыАвтоакцепта.Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыАвтоакцепта КАК КонтрагентыАвтоакцепта";
	
	Результат = Запрос.Выполнить();
	
	МассивКонтрагентов = Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);
	Запрос.УстановитьПараметр("МасНомерСтроки"	, МасНомеров);
	Запрос.УстановитьПараметр("Услуга"			, Ссылка.Услуги.ВыгрузитьКолонку("Услуга"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
	|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка <> &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка.Проведен
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга В(&Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Сумма) КАК Сумма,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|ПОМЕСТИТЬ втГотовыеСуммы
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.СтатьяДДС КАК УслугаСтатьяДДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов КАК УслугаСтатьяДР,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент КАК Контрагент,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент.Организация КАК ОрганизацияКонтрагента,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент.Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДоговорКонтрагента.Организация КАК ОрганизацияДоговора,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Сумма КАК Сумма,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСтроки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.СтавкаНДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Аванс,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСчета,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДатаСчета,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ФормаОплаты,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Комментарий,
	|	ЕСТЬNULL(вт.Сумма, 0) КАК СуммаИзрасходовано,
	|	ЕСТЬNULL(втГотовыеСуммы.Сумма, 0) КАК СуммаИзрасходованоЭтотДок
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка = КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка
	|			И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки = КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга = вт.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГотовыеСуммы КАК втГотовыеСуммы
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки = втГотовыеСуммы.УИН_Строки
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСтроки В(&МасНомерСтроки)";
	
	Результат = Запрос.Выполнить();
	
	//
	мДокЗаявки				= Документы.ЗаявкаНаРасходованиеСредств;
	мДемниченко 			= Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	мСтатусНеАкцептована 	= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
	мСтатусАкцептована 		= Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована;
	ТекОтветственный		= глЗначениеПеременной("глТекущийПользователь");
	ТекЦФО 					= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	ТекТорговаяТочка 		= Ссылка.Магазин;
	ТекИнициаторЗаявки		= Ссылка.Ответственный.ФизЛицо;
	Счет443					= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	
	//
	ВыборкаДДС = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//Счет = Справочники.БанковскиеСчета.НайтиПоКоду("000001100");   
	
	СоотУслуги = Новый Соответствие;
	Пока ВыборкаДДС.Следующий() Цикл
		
		ОбЗаявки = мДокЗаявки.СоздатьДокумент();	
		
		ОрганизацияДок = ?(ЗначениеЗаполнено(ВыборкаДДС.ОрганизацияКонтрагента), ВыборкаДДС.ОрганизацияКонтрагента, ВыборкаДДС.ОрганизацияДоговора);
		Счет=ОрганизацияДок.ОсновнойБанковскийСчет;
		ОбЗаявки.ДокументОснование 		= Ссылка;
		ОбЗаявки.ИнициаторЗаявки 		= ТекИнициаторЗаявки;
		ОбЗаявки.Организация 			= ОрганизацияДок;
		//ОбЗаявки.БанковскийСчетКасса 	= ВыборкаДДС.БанковскийСчет;              
		ОбЗаявки.Контрагент 		 	= ВыборкаДДС.Контрагент;
		ОбЗаявки.ДоговорКонтрагента		= ВыборкаДДС.ДоговорКонтрагента;
		ОбЗаявки.БанковскийСчетПолучателя = ВыборкаДДС.Контрагент.ОсновнойБанковскийСчет;
		ОбЗаявки.СтавкаНДС 		 		= ?(ЗначениеЗаполнено(ВыборкаДДС.СтавкаНДС)		, ВыборкаДДС.СтавкаНДС	, Перечисления.СтавкиНДС.БезНДС);
		ОбЗаявки.ФормаОплаты		 	= ?(ЗначениеЗаполнено(ВыборкаДДС.ФормаОплаты)	, ВыборкаДДС.ФормаОплаты, Перечисления.ФормыОплаты.Безналичные);
		ОбЗаявки.СтатьяДвиженияДенежныхСредств = ВыборкаДДС.УслугаСтатьяДДС;
		Если ВыборкаДДС.Сумма+?(СоотУслуги.Получить(ВыборкаДДС.Услуга)=Неопределено,0,СоотУслуги.Получить(ВыборкаДДС.Услуга))+
			ВыборкаДДС.СуммаИзрасходовано+ВыборкаДДС.СуммаИзрасходованоЭтотДок>ВыборкаДДС.Услуга.СуммаНормативная Тогда
			//Если МассивКонтрагентов.Найти(ВыборкаДДС.Контрагент)=Неопределено Тогда
			ОбЗаявки.Статус                 = мСтатусНеАкцептована;
		Иначе	
			ОбЗаявки.Статус                 = мСтатусАкцептована;
			ОбЗаявки.ДатаАкцептования       =ТекущаяДата();
			ОбЗаявки.КтоАкцептовал          =ТекОтветственный;
			ОбЗаявки.АкцептованыВсеСтроки   =Истина;
			СоотУслуги.Вставить(ВыборкаДДС.Услуга,?(СоотУслуги.Получить(ВыборкаДДС.Услуга)=Неопределено,0,СоотУслуги.Получить(ВыборкаДДС.Услуга))+ВыборкаДДС.Сумма);
		КонецЕсли; 
		ОбЗаявки.Ответственный 			= ТекОтветственный;
		ОбЗаявки.ЦФО					= ТекЦФО;
		
		ОбЗаявки.Дата					= ТекущаяДата();
		ТекДата = ОбЗаявки.Дата + 86400;
		Пока ДеньНедели(ТекДата)<>2
			И ДеньНедели(ТекДата)<>4 Цикл
			ТекДата = ТекДата + 86400;
		КонецЦикла; 
		ОбЗаявки.ДатаРасхода 			= ТекДата;
		
		ОбЗаявки.НазначениеПлатежа		= "Услуги при открытии магазина";
		
		//+++АК GEYV 23.07.2015
		Если НЕ ВыборкаДДС.УслугаСтатьяДР.Пустая() Тогда
			ОбЗаявки.СчетЗатрат = ОбщегоНазначения.ПолучитьСчет44ДляДр(ВыборкаДДС.УслугаСтатьяДР);
		КонецЕсли;
		Если ОбЗаявки.СчетЗатрат.Пустая() Тогда
			ОбЗаявки.СчетЗатрат = Счет443;
		КонецЕсли;                                    
		//---АК
		
		ОбЗаявки.ЗаполнитьСчетКонтрагента();
		
		НоваяСтрока = ОбЗаявки.ТорговыеТочки.Добавить();
		НоваяСтрока.ТорговаяТочка 	= ТекТорговаяТочка;
		НоваяСтрока.ЦФО 			= ТекЦФО;
		Если МассивКонтрагентов.Найти(ВыборкаДДС.Контрагент)<>Неопределено Тогда
			НоваяСтрока.Управляющий 			= ТекОтветственный;
			НоваяСтрока.ДатаАкцепта			= ТекущаяДата();
			НоваяСтрока.Статус			= мСтатусАкцептована;    
		КонецЕсли;
		// акцептант
		АкцептантПоСтатьеДДС 	= ОбЗаявки.ПолучитьАкцептантаПоСтатьеДДС();	
		НоваяСтрока.Управляющий = ОбЗаявки.ПолучитьУправляющегоВСтрокеТЧТТ(НоваяСтрока.ТорговаяТочка, АкцептантПоСтатьеДДС, мДемниченко);
		НоваяСтрока.Сумма 		= ВыборкаДДС.Сумма;// + ?(ДанныеЗаполнения.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху, СтрТЧ.СуммаНДС, 0);
		НоваяСтрока.Период 		= НачалоМесяца(ТекущаяДата());
		
		ОбЗаявки.СуммаДокумента = ОбЗаявки.ТорговыеТочки.Итог("Сумма");
		ОбЗаявки.ПересчитатьСуммуНДСДокумент();
		
		НайденнаяСтрока = Ссылка.УслугиПоСчетам[ВыборкаДДС.НомерСтроки - 1];
		ДД 	= НайденнаяСтрока.ХранилищеФайла.Получить();
		ОбЗаявки.СчетНаОплату 			= Новый ХранилищеЗначения(ДД);	
		ОбЗаявки.СчетНаОплатуИмяФайла 	= НайденнаяСтрока.ИмяФайла;
		ОбЗаявки.СчетНаОплатуПолноеИмяФайла 	= НайденнаяСтрока.ИмяФайлаПолное;
		ОбЗаявки.Аванс					= ВыборкаДДС.Аванс;
		ОбЗаявки.НазначениеПлатежа		= ?(ОбЗаявки.Аванс, "Аванс ", "") + ВыборкаДДС.Услуга + " " + 
		?(ЗначениеЗаполнено(ВыборкаДДС.НомерСчета), "Счет №" + ВыборкаДДС.НомерСчета + " от " +
		Формат(ВыборкаДДС.ДатаСчета, "ДФ=dd.MM.yyyy"), "") + " " + ТекТорговаяТочка;
		
		ОбЗаявки.БанковскийСчетКасса	= Счет;
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//ОбЗаявки.АК_СчетУчетаРасчетов	= ПолучитьСчетУчетаРасчетовПоСтатьеДДС(ВыборкаДДС.УслугаСтатьяДДС);
		ОбЗаявки.АК_СчетУчетаРасчетов	= ПолучитьСчетУчетаРасчетовПоСтатьеДДС(ОбЗаявки.Дата, ВыборкаДДС.УслугаСтатьяДДС);
		//---АК SUVV
		
		ОбЗаявки.Комментарий			= ВыборкаДДС.Комментарий;
		ОбЗаявки.ПериодОтработки		= ТекущаяДата();
		
		Попытка
			ОбЗаявки.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбЗаявки.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки; 
		СоответствиеНомеровИЗаявок.Вставить(ВыборкаДДС.НомерСтроки, ОбЗаявки.Ссылка);
		
		Сообщить("Создана "+?(ОбЗаявки.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована,"неакцептованная ","акцептованная ") + ОбЗаявки.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.УслугиПоСчетам.ТекущиеДанные;
	РассчитатьСуммуНДСТабЧасти(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти) Экспорт
	
	//УчитыватьНДС = Истина;
	//СуммаВключаетНДС = (Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	//
	//СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	//												   УчитыватьНДС, СуммаВключаетНДС,
	//												   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
	ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
КонецПроцедуры

//&НаКлиенте
//Процедура ВариантРасчетаНДСПриИзменении(Элемент)
//	Для Каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
//		
//		Если Объект.ВариантРасчетаНДС=ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда
//			СтрокаТЧ.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
//		Иначе
//		КонецЕсли;
//		РассчитатьСуммуНДСТабЧасти(СтрокаТЧ);
//		
//	КонецЦикла;	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаменитьФайл(Команда)
//	СтруктураВозврат = ОткрытьФормуМодально("Справочник.ДополнительныеСоглашения.Форма.ФормаВыбораФайла");
//	
//	Если СтруктураВозврат <> Неопределено
//			И СтруктураВозврат.БылВыборФайла Тогда
//		
//		Для Каждого ЭлементСписка Из СтруктураВозврат.СписокФайлов Цикл
//			//Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
//			Файл = Новый Файл(ЭлементСписка.Значение);
//			Если Файл.Существует() Тогда
//				АдресХранилища = "";
//				//ПоместитьФайл(АдресХранилища,, Файл.ПолноеИмя,, Новый УникальныйИдентификатор);
//				АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый УникальныйИдентификатор);
//				
//				ДобавитьФайлНаСервере(АдресХранилища, Файл.Имя, Файл.ПолноеИмя);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.УслугиПоСчетам.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//СтандартнаяОбработка = Ложь;
	//Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Если Диалог.Выбрать() Тогда
	//	Элементы.УслугиПоСчетам.ТекущиеДанные.ИмяФайлаПолное = Диалог.ПолноеИмяФайла;
	//	//Элементы.УслугиПоСчетам.ТекущиеДанные. = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));
	//	Файл = Новый Файл(Элементы.УслугиПоСчетам.ТекущиеДанные.ИмяФайлаПолное );
	//	Если Файл.Существует() Тогда
	//		АдресХранилища = "";
	//		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый УникальныйИдентификатор);
	//		
	//		ДобавитьФайлНаСервере(АдресХранилища, Файл.Имя, Файл.ПолноеИмя,Элементы.УслугиПоСчетам.ТекущаяСтрока);
	//		//Модифицированность=Истина;
	//	КонецЕсли;
	//КонецЕсли;
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Элементы.УслугиПоСчетам.ТекущиеДанные.Счет = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			//
			//НоваяСтрока = ПрикрепленныеФайлы.Добавить();
			//НоваяСтрока.Файл = СсылкаНаФайл;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлНаСервере(АдресХранилища, ИмяФайла, ИмяФайлаПолное,Идентиф) 
	
	ИмяКаталога = "\\server00\Temp";
	
	Расширешие = "";
	
	Если Найти(НРег(ИмяФайла), ".doc") > 0 Тогда
		Расширешие = ".doc"; 	
	ИначеЕсли Найти(НРег(ИмяФайла), ".docx") > 0 Тогда
		Расширешие = ".docx";	
	ИначеЕсли Найти(НРег(ИмяФайла), ".xls") > 0 Тогда  		
		Расширешие = ".xls";
	ИначеЕсли Найти(НРег(ИмяФайла), ".jpg") > 0 Тогда
		Расширешие = ".jpg";
	ИначеЕсли Найти(НРег(ИмяФайла), ".jpeg") > 0 Тогда
		Расширешие = ".jpeg";
	ИначеЕсли Найти(НРег(ИмяФайла), ".pdf") > 0 Тогда	
		Расширешие = ".pdf";
	КонецЕсли;
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Расширешие);
	//ДвоичныеДанные = пХранилище.Получить();  
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		//ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		ЭтотОбъект1 = РеквизитФормыВЗначение("Объект");
		НомСтр=Объект.УслугиПоСчетам.НайтиПоИдентификатору(Идентиф).НомерСтроки;
		НовСтрока = ЭтотОбъект1.УслугиПоСчетам[НомСтр-1];
		НовСтрока.ХранилищеФайла 	= Новый ХранилищеЗначения(ДвоичныеДанныеИзХранилища);
		НовСтрока.ИмяФайла 			= ИмяФайла;
		НовСтрока.ИмяФайлаПолное 	= ИмяФайлаПолное;
		//НовСтрока.Пользователь=ПараметрыСеанса.ТекущийПользователь;
		//НовСтрока.ДатаДобавления=ТекущаяДата();
		
		УстановитьПривилегированныйРежим(Истина);
		ЭтотОбъект1.Записать();
		ЗначениеВДанныеФормы(ЭтотОбъект1, Объект);
		
		Элементы.УслугиПоСчетам.Обновить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка=Ложь;
	//ТекущаяСтрокаИд = Элементы.УслугиПоСчетам.ТекущаяСтрока;
	//ПечатьФайла(ТекущаяСтрокаИд, Ложь);
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ТекущиеДанные.Счет);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФайла(Идентификатор, СразуПечать = Истина) Экспорт   	
	
	ТекущиеДанные = Объект.УслугиПоСчетам.НайтиПоИдентификатору(Идентификатор);
	пИмяФайла = ТекущиеДанные.ИмяФайла;
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(ХранилищеЗначенияСервер(Идентификатор));
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
			//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
			//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Файл.Расширение);
	//ДвоичныеДанные = пХранилище.Получить();
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;	
	КонецЕсли;    	
	
КонецПроцедуры

&НаСервере
Функция ХранилищеЗначенияСервер(ИдентификаторСтроки)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущиеДанные = ЭтотОбъект.УслугиПоСчетам[ИдентификаторСтроки]; 
	
	Возврат ПоместитьВоВременноеХранилище(ТекущиеДанные.ХранилищеФайла.Получить(), Новый УникальныйИдентификатор);	
	
КонецФункции

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции
//__________________________

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаАктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.УслугиПоСчетам.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//СтандартнаяОбработка = Ложь;
	//Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Если Диалог.Выбрать() Тогда
	//	Элементы.УслугиПоСчетам.ТекущиеДанные.ИмяФайлаПолноеАкт = Диалог.ПолноеИмяФайла;
	//	//Элементы.УслугиПоСчетам.ТекущиеДанные. = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));
	//	Файл = Новый Файл(Элементы.УслугиПоСчетам.ТекущиеДанные.ИмяФайлаПолноеАкт );
	//	Если Файл.Существует() Тогда
	//		АдресХранилища = "";
	//		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый УникальныйИдентификатор);
	//		
	//		ДобавитьФайлАктНаСервере(АдресХранилища, Файл.Имя, Файл.ПолноеИмя,Элементы.УслугиПоСчетам.ТекущаяСтрока);
	//		//Модифицированность=Истина;
	//	КонецЕсли;
	//КонецЕсли;	
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Элементы.УслугиПоСчетам.ТекущиеДанные.Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			//
			//НоваяСтрока = ПрикрепленныеФайлы.Добавить();
			//НоваяСтрока.Файл = СсылкаНаФайл;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлАктНаСервере(АдресХранилища, ИмяФайла, ИмяФайлаПолное,Идентиф) 
	
	ИмяКаталога = "\\server00\Temp";
	
	Расширешие = "";
	
	Если Найти(НРег(ИмяФайла), ".doc") > 0 Тогда
		Расширешие = ".doc"; 	
	ИначеЕсли Найти(НРег(ИмяФайла), ".docx") > 0 Тогда
		Расширешие = ".docx";	
	ИначеЕсли Найти(НРег(ИмяФайла), ".xls") > 0 Тогда  		
		Расширешие = ".xls";
	ИначеЕсли Найти(НРег(ИмяФайла), ".jpg") > 0 Тогда
		Расширешие = ".jpg";
	ИначеЕсли Найти(НРег(ИмяФайла), ".jpeg") > 0 Тогда
		Расширешие = ".jpeg";
	ИначеЕсли Найти(НРег(ИмяФайла), ".pdf") > 0 Тогда	
		Расширешие = ".pdf";
	КонецЕсли;
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Расширешие);
	//ДвоичныеДанные = пХранилище.Получить();  
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		//ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		ЭтотОбъект1 = РеквизитФормыВЗначение("Объект");
		НомСтр=Объект.УслугиПоСчетам.НайтиПоИдентификатору(Идентиф).НомерСтроки;
		НовСтрока = ЭтотОбъект1.УслугиПоСчетам[НомСтр-1];
		НовСтрока.ХранилищеФайлаАкт 	= Новый ХранилищеЗначения(ДвоичныеДанныеИзХранилища);
		НовСтрока.ИмяФайлаАкт 			= ИмяФайла;
		НовСтрока.ИмяФайлаПолноеАкт 	= ИмяФайлаПолное;
		//НовСтрока.Пользователь=ПараметрыСеанса.ТекущийПользователь;
		//НовСтрока.ДатаДобавления=ТекущаяДата();
		
		УстановитьПривилегированныйРежим(Истина);
		ЭтотОбъект1.Записать();
		ЗначениеВДанныеФормы(ЭтотОбъект1, Объект);
		
		Элементы.УслугиПоСчетам.Обновить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаАктОткрытие(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка=Ложь;
	//ТекущаяСтрокаИд = Элементы.УслугиПоСчетам.ТекущаяСтрока;
	//ПечатьФайлаАкта(ТекущаяСтрокаИд, Ложь);
	
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ТекущиеДанные.Акт);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФайлаАкта(Идентификатор, СразуПечать = Истина) Экспорт   	
	
	ТекущиеДанные = Объект.УслугиПоСчетам.НайтиПоИдентификатору(Идентификатор);
	пИмяФайла = ТекущиеДанные.ИмяФайлаАкт;
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(ХранилищеЗначенияАктаСервер(Идентификатор));
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
			//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
			//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Файл.Расширение);
	//ДвоичныеДанные = пХранилище.Получить();
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;	
	КонецЕсли;    	
	
КонецПроцедуры

&НаСервере
Функция ХранилищеЗначенияАктаСервер(ИдентификаторСтроки)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущиеДанные = ЭтотОбъект.УслугиПоСчетам[ИдентификаторСтроки]; 
	
	Возврат ПоместитьВоВременноеХранилище(ТекущиеДанные.ХранилищеФайлаАкт.Получить(), Новый УникальныйИдентификатор);	
	
КонецФункции

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаАктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры
//_________________________________
&НаКлиенте
Процедура УслугиПоСчетамЗаявкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Заявка) И ТипЗнч(ТекДанные.Заявка)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		ТекДанные.Сумма			= ЗначРекв(ТекДанные.Заявка,"СуммаДокумента");
		ТекДанные.СуммаНДС		= ЗначРекв(ТекДанные.Заявка,"СуммаНДС");
		ТекДанные.СтавкаНДС		= ЗначРекв(ТекДанные.Заявка,"СтавкаНДС");
		ТекДанные.Аванс			= ЗначРекв(ТекДанные.Заявка,"Аванс");
		ТекДанные.ФормаОплаты	= ЗначРекв(ТекДанные.Заявка,"ФормаОплаты");
		УслугиПоСчетамСуммаПриИзменении(Неопределено);
		//Отказ = АкцептованаЗаявка(ТекДанные.Заявка);
		//Отказ=ЗначениеЗаполнено(ТекДанные.Заявка);
		Отказ = Ложь;
		Элементы.УслугиПоСчетамАванс.ТолькоПросмотр=Отказ;
		//Элементы.УслугиПоСчетамКонтрагент.ТолькоПросмотр=Отказ;
		//Элементы.УслугиПоСчетамДоговорКонтрагента.ТолькоПросмотр=Отказ;
		Элементы.УслугиПоСчетамСтавкаНДС.ТолькоПросмотр=Отказ;
		Элементы.УслугиПоСчетамСуммаНДС.ТолькоПросмотр=Отказ;
		Элементы.УслугиПоСчетамСумма.ТолькоПросмотр=Отказ;
		Элементы.УслугиПоСчетамФормаОплаты.ТолькоПросмотр=Отказ;
		//Элементы.УслугиПоСчетамЗаявка.ТолькоПросмотр=Отказ;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезконтекста
Функция ЗначРекв(Ссылка,Рекв)
	Возврат Ссылка[Рекв]
КонецФункции // ()

&НаКлиенте                                                             
Процедура УслугиПоСчетамСуммаПриИзменении(Элемент)
	
	Сум = 0;
	ТекУИНСтроки = Элементы.УслугиПоСчетам.ТекущиеДанные.УИН_Строки;
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		Если СтрокаТЧ.УИН_Строки = ТекУИНСтроки Тогда
			Сум = Сум + СтрокаТЧ.Сумма;
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаТЧ Из Объект.Услуги Цикл
		Если СтрокаТЧ.УИН_Строки = ТекУИНСтроки Тогда
			СтрокаТЧ.Сумма = Сум;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	УслугиПоСчетамСтавкаНДСПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомплект(Команда)
	
	//Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//	Предупреждение("Контрагент должен быть заполнен!");
	//	Возврат;
	//КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("Владелец", Объект.Контрагент);
	ОткрытьФорму("Справочник.ШаблоныКомплектаций.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере

Процедура ЗаполнитьТаблицуОплатСервер()
	ТекстЗапроса="ВЫБРАТЬ
	|	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации КАК УИН_Строки,
	|	РасчетыПоСделкамСПоставщиками.Регистратор КАК Заявка
	|ИЗ
	|	РегистрНакопления.РасчетыПоСделкамСПоставщиками КАК РасчетыПоСделкамСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	|		ПО РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации = КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_Строки
	|			И (РасчетыПоСделкамСПоставщиками.Комплектация = КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка
	|				ИЛИ РасчетыПоСделкамСПоставщиками.Комплектация = КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Предпоступление)
	|ГДЕ
	|	(РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
	|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.РасходИзБанка
	|			ИЛИ РасчетыПоСделкамСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
	|	И КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка = &Комплектация
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСделкамСПоставщиками.УИН_СтрокиКомплектации,
	|	РасчетыПоСделкамСПоставщиками.Регистратор";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Комплектация",Объект.Ссылка);
	ТЗ=Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТЗ,"ОплатыПоКомплектации");
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Комплектация магазина по сделкам с поставщиком");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	Иначе
		
	КонецЕсли;
	
	Если РольДоступна("КомплектацияУслуги")
		И НЕ РольДоступна("КомплектацияБезУслуг") Тогда
		
		Элементы.СтраницаКомплектация.Видимость	= Ложь;
		Элементы.СтраницаСводно.Видимость		= Ложь;
		
	ИначеЕсли НЕ РольДоступна("КомплектацияУслуги")
		И РольДоступна("КомплектацияБезУслуг") Тогда
		
		Элементы.СтраницаУслуги.Видимость = Ложь;
		
	КонецЕсли;
	
	//+++АК POZM 2018.05.06 ИП-00018375 
	ПравоРедактированияПредкомплектации = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеПредкомплектации, Ложь);
	ПравоУправлятьПризнакомПоступленияПоПредкомплектации = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.УстановкаПризнакаПоступилПоПредкомплектации, Ложь);
	
	Если НЕ ПравоРедактированияПредкомплектации Тогда
		Элементы.ГруппаОсновныхКолонок.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	Если НЕ ПравоУправлятьПризнакомПоступленияПоПредкомплектации Тогда
		Элементы.ПлановаяКомплектацияОборудованиеПоставленоНаОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;	
	//---АК POZM 
	
	ТекстЗапроса="ВЫБРАТЬ
	|	СУММА(ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты) КАК ВЗаявке,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка.Оплачено
	|				ТОГДА ЗаявкаНаУслугиМатериалыОплата.СуммаОплаты
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплачено,
	|	ЗаявкаНаУслугиМатериалыОплата.Ссылка КАК Заявка,
	|	МАКСИМУМ(ЗаявкаНаУслугиМатериалыОплата.РасходИзБанка) КАК РасходИзБанка
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Оплата КАК ЗаявкаНаУслугиМатериалыОплата
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыОплата.Ссылка В(&Заявки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаУслугиМатериалыОплата.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Заявки",Объект.УслугиПоСчетам.Выгрузить().ВыгрузитьКолонку("Заявка"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строки = Объект.УслугиПоСчетам.НайтиСтроки(Новый Структура("Заявка",Выборка.Заявка));
		Для Каждого Стр Из Строки Цикл
			Стр.СуммаОплатВЗаявке = Выборка.ВЗаявке;
			Стр.СуммаОплатВЗаявкеОплаченная = Выборка.Оплачено;
			Если Выборка.Оплачено = Стр.Сумма Тогда
				Стр.СтрокаОплачена = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.РасходИзБанка) И Не ЗначениеЗаполнено(Стр.РасходИзБанка) Тогда
				Стр.РасходИзБанка = Выборка.РасходИзБанка;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
	ЗаполнитьПредпоступленияСервер();
	
	//+++АК POZM 2018.06.09 ИП-00018375 
	ЗаполнитьКэшНоменклатурыПоставщиков();
	//---АК POZM 
КонецПроцедуры

//+++АК POZM 2018.05.08 ИП-00018375 
&НаСервере
Процедура ЗаполнитьПредкомплектациюСервер()
	Объект.ПлановаяКомплектация.Очистить();
	ТекстЗапроса="ВЫБРАТЬ
	|	МестаХраненияВМагазинах.Магазин,
	|	МестаХраненияВМагазинах.МестоВыкладки
	|ИЗ
	|	РегистрСведений.МестаХраненияВМагазинах КАК МестаХраненияВМагазинах
	|ГДЕ
	|	МестаХраненияВМагазинах.Магазин = &Магазин";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		
		НС = Объект.ПлановаяКомплектация.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		
		
	КонецЦикла; 
	
КонецПроцедуры	
//---АК POZM 

&НаСервере
Процедура ЗаполнитьПредпоступленияСервер()
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//Если ПараметрыОтчета.СбросНастроек Тогда	
	СхемаКомпоновкиДанных = Документы.КомплектацияМагазинаПоСделкамСПоставщиком.ПолучитьМакет("ОтчетПоПредпоступлениям"); 
	
	//СхемаКомпоновкиДанных.Параметры.Магазин.Значение = ПараметрыОтчета.Точка;
	
	ЭтаФорма["АдресСхемы"] = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	СхемаКомпоновкиДанных.Параметры.Магазин.Значение = Объект.Магазин;
	//Для Каждого ЭлементОтбора Из СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы	Цикл
	//	Если СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Магазин" Тогда
	//		ЭлементОтбора.Использование = Истина;
	//		ЭлементОтбора.ПравоеЗначение = Объект.Магазин;
	//		Прервать;
	//	КонецЕсли;	
	//КонецЦикла;	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	//Иначе
	//	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	//КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТабПредпоступления.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТабПредпоступления);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры	

&НаКлиенте
Процедура УслугиУслугаПриИзменении(Элемент)
	
	Элементы.Услуги.ТекущиеДанные.СуммаНормативная = ЗначРекв(Элементы.Услуги.ТекущиеДанные.Услуга,"СуммаНормативная");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ТекСтрока.СтавкаНДС = ТекСтрока.ДоговорКонтрагента.СтавкаНДС;
	
	РассчитатьСуммуНДСТабЧасти(ТекСтрока);
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамАвансПриИзменении(Элемент)
	
	ФлАванс = Элементы.УслугиПоСчетам.ТекущиеДанные.Аванс;
	Если ЗначениеЗаполнено(Элементы.УслугиПоСчетам.ТекущиеДанные.Заявка) Тогда
		ТекЗаявка = Элементы.УслугиПоСчетам.ТекущиеДанные.Заявка;
		УстановитьАванс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАванс()
	
	ОбъектЗаявки = ТекЗаявка.ПолучитьОбъект();	
	ОбъектЗаявки.Аванс = ФлАванс;
	ОбъектЗаявки.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПлатежки(Команда)
	
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекЗаявка = ТекущиеДанные.Заявка;
	ТекРасход = ТекущиеДанные.РасходИзБанка;
	Если ЗначениеЗаполнено(ТекЗаявка) ИЛИ ЗначениеЗаполнено(ТекРасход) Тогда
		СоотПечФ = Новый Соответствие;
		ПечатьПлатежкиСервер(СоотПечФ);
		Если СоотПечФ.Количество() = 0 Тогда
			Сообщить("Не оформлен документ Расход из банка");
		КонецЕсли; 
		Для каждого Эл Из СоотПечФ Цикл
			Эл.Значение.Показать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьПлатежкиСервер(СоотПечФ)
	
	Если Не ЗначениеЗаполнено(ТекРасход) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ТекЗаявка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходИзБанка.Ссылка
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	НЕ РасходИзБанка.ПометкаУдаления
		|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходИзБанка.Ссылка
		|ИЗ
		|	Документ.РасходИзБанка КАК РасходИзБанка
		|ГДЕ
		|	НЕ РасходИзБанка.ПометкаУдаления
		|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств";
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектРасход = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ТабДок = ОбъектРасход.ПечатьПлатежногоПоручения();
			СоотПечФ.Вставить(ВыборкаДетальныеЗаписи.Ссылка, ТабДок);
		КонецЦикла;
	Иначе
		ОбъектРасход = ТекРасход.ПолучитьОбъект();
		ТабДок = ОбъектРасход.ПечатьПлатежногоПоручения();
		СоотПечФ.Вставить(ТекРасход, ТабДок);
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура УслугиПоСчетамФормаОплатыПриИзменении(Элемент)
	
	ТекФормаОплаты = Элементы.УслугиПоСчетам.ТекущиеДанные.ФормаОплаты;
	Если ЗначениеЗаполнено(Элементы.УслугиПоСчетам.ТекущиеДанные.Заявка) Тогда
		ТекЗаявка = Элементы.УслугиПоСчетам.ТекущиеДанные.Заявка;
		УстановитьФормуОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуОплаты()
	ОбъектЗаявки=ТекЗаявка.ПолучитьОбъект();	
	ОбъектЗаявки.ФормаОплаты=ТекФормаОплаты;
	ОбъектЗаявки.Записать();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамПослеУдаления(Элемент)
	Сум=0;	
	Для каждого Стр Из Объект.УслугиПоСчетам Цикл
		Если Стр.УИН_Строки=Элементы.УслугиПоСчетам.ТекущиеДанные.УИН_Строки Тогда
			Сум=Сум+Стр.Сумма;
		КонецЕсли; 
	КонецЦикла;
	Для каждого Стр Из Объект.Услуги Цикл
		Если Стр.УИН_Строки=Элементы.УслугиПоСчетам.ТекущиеДанные.УИН_Строки Тогда
			Стр.Сумма=Сум;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаСервереБезКонтекста
Функция АкцептованаЗаявка(Заявка)
	Возврат Заявка.Статус=Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована;
КонецФункции // ()

&НаКлиенте
Процедура УслугиПоСчетамПередУдалением(Элемент, Отказ)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Удалить строку?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Отказ=Истина;	
	КонецЕсли; 
	
	Если Не Отказ Тогда
		ТекСтрока = Элементы.УслугиПоСчетам.ТекущиеДанные;
		УслугиПоСчетамПередУдалениемСервер(ТекСтрока.Заявка,Отказ,ТекСтрока.НомерСтроки);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура УслугиПоСчетамПередУдалениемСервер(Заявка,Отказ,НомерСтроки)
	Если ЗначениеЗаполнено(Заявка) и ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") И Заявка.Статус=Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована и УдаляемыеЗаявки.НайтиПоЗначению(Заявка)=Неопределено Тогда
		УдаляемыеЗаявки.Добавить(Заявка);
	КонецЕсли;
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") И Заявка.Статус=Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		Отказ=истина;
		Сообщить("В строке "+Строка(НомерСтроки)+" заявка акцептована, удаление невозможно");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.УслугиПоСчетам.ТекущиеДанные;
	Если ТекСтрока=Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	//Отказ = АкцептованаЗаявка(ТекСтрока.Заявка);
	//Отказ=ЗначениеЗаполнено(ТекСтрока.Заявка);
	Отказ = Ложь;
	Элементы.УслугиПоСчетамАванс.ТолькоПросмотр=Отказ;
	//Элементы.УслугиПоСчетамКонтрагент.ТолькоПросмотр=Отказ;
	//Элементы.УслугиПоСчетамДоговорКонтрагента.ТолькоПросмотр=Отказ;
	Элементы.УслугиПоСчетамСтавкаНДС.ТолькоПросмотр=Отказ;
	Элементы.УслугиПоСчетамСуммаНДС.ТолькоПросмотр=Отказ;
	Элементы.УслугиПоСчетамСумма.ТолькоПросмотр=Отказ;
	Элементы.УслугиПоСчетамФормаОплаты.ТолькоПросмотр=Отказ;
	//Элементы.УслугиПоСчетамЗаявка.ТолькоПросмотр=Отказ;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	мДокЗаявки				= Документы.ЗаявкаНаРасходованиеСредств;
	мДемниченко 			= Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	мСтатусНеАкцептована 	= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
	ТекОтветственный		= глЗначениеПеременной("глТекущийПользователь");
	ТекЦФО 					= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	ТекТорговаяТочка 		= Объект.Магазин;
	ТекИнициаторЗаявки		= Объект.Ответственный.ФизЛицо;
	Счет443					= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	Счет=Справочники.БанковскиеСчета.НайтиПоКоду("000001100"); 
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого стр Из ДокументОбъект.УслугиПоСчетам Цикл
		Если ЗначениеЗаполнено(Стр.Заявка) И ТипЗнч(Стр.Заявка)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") и МодифицированныеСтроки.НайтиПоЗначению(Стр.НомерСтроки)<>Неопределено и Не Стр.Заявка.Статус=Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			ОбЗаявки=Стр.Заявка.ПолучитьОбъект();
			ОрганизацияДок = ?(ЗначениеЗаполнено(Стр.Контрагент.Организация), Стр.Контрагент.Организация, Стр.ДоговорКонтрагента.Организация);
			ОбЗаявки.ДокументОснование 		= Объект.Ссылка;
			//ОбЗаявки.ИнициаторЗаявки 		= ТекИнициаторЗаявки;
			ОбЗаявки.Организация 			= ОрганизацияДок;
			//ОбЗаявки.БанковскийСчетКасса 	= ВыборкаДДС.БанковскийСчет;              
			ОбЗаявки.Контрагент 		 	= Стр.Контрагент;
			ОбЗаявки.ДоговорКонтрагента		= Стр.ДоговорКонтрагента;
			ОбЗаявки.БанковскийСчетПолучателя = Стр.Контрагент.ОсновнойБанковскийСчет;
			ОбЗаявки.СтавкаНДС 		 		= ?(ЗначениеЗаполнено(Стр.СтавкаНДС)		, Стр.СтавкаНДС	, Перечисления.СтавкиНДС.БезНДС);
			ОбЗаявки.ФормаОплаты		 	= ?(ЗначениеЗаполнено(Стр.ФормаОплаты)	, Стр.ФормаОплаты, Перечисления.ФормыОплаты.Безналичные);
			ОбЗаявки.СтатьяДвиженияДенежныхСредств = Объект.Услуги.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки))[0].Услуга.СтатьяДДС;
			//ОбЗаявки.Статус                 = мСтатусНеАкцептована;
			ОбЗаявки.Ответственный 			= ТекОтветственный;
			ОбЗаявки.ЦФО					= ТекЦФО;
			
			ОбЗаявки.Дата					= Объект.Дата;
			ТекДата = ОбЗаявки.Дата + 86400;
			Пока ДеньНедели(ТекДата)<>2
				И ДеньНедели(ТекДата)<>4 Цикл
				ТекДата = ТекДата + 86400;
			КонецЦикла; 
			ОбЗаявки.ДатаРасхода 			= ТекДата;
			
			ОбЗаявки.НазначениеПлатежа		= "Услуги при открытии магазина";
			
			//+++АК GEYV 23.07.2015
			//Если НЕ стр.УслугаСтатьяДР.Пустая() Тогда
			//	ОбЗаявки.СчетЗатрат = ОбщегоНазначения.ПолучитьСчет44ДляДр(ВыборкаДДС.УслугаСтатьяДР);
			//КонецЕсли;
			//Если ОбЗаявки.СчетЗатрат.Пустая() Тогда
			//	ОбЗаявки.СчетЗатрат = Счет443;
			//КонецЕсли;
			//---АК
			
			//ОбЗаявки.ЗаполнитьСчетКонтрагента();
			
			//ОбЗаявки.ТорговыеТочки.Очистить();
			НоваяСтрока = ОбЗаявки.ТорговыеТочки[0];
			//НоваяСтрока.ТорговаяТочка 	= ТекТорговаяТочка;
			//НоваяСтрока.ЦФО 			= ТекЦФО;
			
			// акцептант
			//АкцептантПоСтатьеДДС 	= ОбЗаявки.ПолучитьАкцептантаПоСтатьеДДС();	
			//НоваяСтрока.Управляющий = ОбЗаявки.ПолучитьУправляющегоВСтрокеТЧТТ(НоваяСтрока.ТорговаяТочка, АкцептантПоСтатьеДДС, мДемниченко);
			НоваяСтрока.Сумма 		= стр.Сумма;// + ?(ДанныеЗаполнения.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху, СтрТЧ.СуммаНДС, 0);
			НоваяСтрока.Период 		= НачалоМесяца(Объект.Дата);
			
			ОбЗаявки.СуммаДокумента = ОбЗаявки.ТорговыеТочки.Итог("Сумма");
			ОбЗаявки.ПересчитатьСуммуНДСДокумент();
			
			НайденнаяСтрока = стр;
			ДД 	= НайденнаяСтрока.ХранилищеФайла.Получить();
			ОбЗаявки.СчетНаОплату 			= Новый ХранилищеЗначения(ДД);	
			ОбЗаявки.СчетНаОплатуИмяФайла 	= НайденнаяСтрока.ИмяФайла;
			ОбЗаявки.СчетНаОплатуПолноеИмяФайла 	= НайденнаяСтрока.ИмяФайлаПолное;
			ОбЗаявки.Аванс					= стр.Аванс;
			ОбЗаявки.НазначениеПлатежа		= ?(ОбЗаявки.Аванс, "Аванс ", "") + Объект.Услуги.НайтиСтроки(Новый Структура("УИН_Строки",Стр.УИН_Строки))[0].Услуга + " " + 
			?(ЗначениеЗаполнено(стр.НомерСчета), "Счет №" + стр.НомерСчета + " от " +
			Формат(стр.ДатаСчета, "ДФ=dd.MM.yyyy"), "") + " " + ТекТорговаяТочка;
			
			ОбЗаявки.БанковскийСчетКасса=Счет;
			ОбЗаявки.Комментарий=стр.Комментарий;
			ОбЗаявки.ПериодОтработки=Объект.Дата;
			Попытка
				ОбЗаявки.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбЗаявки.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			Сообщить("Перезаполнена "+ОбЗаявки.Ссылка);
		КонецЕсли; 
	КонецЦикла; 
	МодифицированныеСтроки.Очистить();	
	Для каждого Эл Из УдаляемыеЗаявки Цикл
		ОбъектЗаявки=Эл.Значение.ПолучитьОбъект();
		Сообщить("Удалена "+Эл.Значение);	
		ОбъектЗаявки.Удалить();
	КонецЦикла;
	УдаляемыеЗаявки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Фл=Ложь;
	Для каждого Стр Из Объект.УслугиПоСчетам Цикл
		Если Не ЗначениеЗаполнено(Стр.Заявка) И Не ЗначениеЗаполнено(Стр.РасходИзБанка) Тогда
			Фл=Истина;
		КонецЕсли; 
	КонецЦикла;
	Если Фл Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Создать недостающие заявки по услугам?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			//СоздатьЗаявки(Неопределено);
			СоздатьЗаявкиНаУслугиМатериалы(Неопределено);
			Записать();
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамКонтрагентПриИзменении(Элемент)
	Элементы.УслугиПоСчетам.ТекущиеДанные.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ПолучитьОрганизацию(),
	Элементы.УслугиПоСчетам.ТекущиеДанные.Контрагент, ?(Не ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата));
	ТекСтрока = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ТекСтрока.СтавкаНДС = ТекСтрока.Контрагент.СтавкаНДС;
	РассчитатьСуммуНДСТабЧасти(ТекСтрока);
	
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная)
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьОрганизацию()
	Возврат Справочники.Организации.НайтиПоКоду("000000006");	
КонецФункции // ()

&НаКлиенте
Процедура КомплектацияАктПодписанПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияАктПодписанОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные=Элементы.Комплектация.ТекущиеДанные;
	//Если Элемент.Имя="КомплектацияАктПодписан" Тогда
	Элемент.ПодчиненныеЭлементы.КомплектацияАктПодписан.ТолькоПросмотр=ЕстьОплатыПоСтроке(ТекущиеДанные.УИН_Строки);
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЕстьОплатыПоСтроке(УИН_Строки);
	Строки=ОплатыПоКомплектации.НайтиСтроки(Новый Структура("УИН_Строки",УИН_Строки));
	Если Строки.Количество()=0 Тогда
		Возврат Ложь;
	Иначе 
		Сообщить("По строке есть оплаты, редактирование запрещено");
		Возврат истина;
		
	КонецЕсли;	  
КонецФункции

&НаКлиенте
Процедура КомплектацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Элемент.ПодчиненныеЭлементы.КомплектацияАктПодписан.ТолькоПросмотр=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПередНачаломИзменения(Элемент, Отказ)
	ТекущийПредпоступление = Элементы.Комплектация.ТекущиеДанные.Предпоступление;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Элементы.УслугиПоСчетам.ТекущиеДанные.Заявка) Тогда
		МодифицированныеСтроки.Добавить(Элементы.УслугиПоСчетам.ТекущиеДанные.НомерСтроки);
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	МагазинПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплектацияМагазинаПоСделкамСПоставщиком.Ссылка
		|ИЗ
		|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком КАК КомплектацияМагазинаПоСделкамСПоставщиком
		|ГДЕ
		|	КомплектацияМагазинаПоСделкамСПоставщиком.Ссылка <> &Ссылка
		|	И КомплектацияМагазинаПоСделкамСПоставщиком.Ссылка.Проведен
		|	И КомплектацияМагазинаПоСделкамСПоставщиком.Ссылка.Магазин = &Магазин";
		
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Сообщить("Уже есть комплектация по этому магазину");
			Объект.Магазин=Неопределено;
		КонецЕсли;
	КонецЕсли; 
			
КонецПроцедуры
//АК_БЕЛН_06.04.2016--


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ПереченьКонтрагентов="";
	ЭтоПервый=Истина;
	
	ТекстЗапроса="ВЫБРАТЬ
	|	ПредпоступлениеПоКомплектации.Контрагент
	|ИЗ
	|	Документ.ПредпоступлениеПоКомплектации КАК ПредпоступлениеПоКомплектации
	|ГДЕ
	|	ПредпоступлениеПоКомплектации.Проведен
	|	И ПредпоступлениеПоКомплектации.Магазин = &Магазин
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредпоступлениеПоКомплектации.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредпоступлениеПоКомплектации.Контрагент.Наименование";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТЗ Цикл
		ТекущийОбъект.ПереченьКонтрагентов=ТекущийОбъект.ПереченьКонтрагентов+?(ЭтоПервый,"",", ")+Стр.Контрагент;
		ЭтоПервый=Ложь;
	КонецЦикла;
		
	ПереброситьФайлыЕслиНужно(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПереброситьФайлыЕслиНужно(Док)
	//Док=РеквизитФормыВЗначение("Объект");
	Для Каждого Стр Из Док.УслугиПоСчетам Цикл
		Если ЗначениеЗаполнено(Стр.ИмяФайла) И Не ЗначениеЗаполнено(Стр.Счет) Тогда
			ДД 	= Стр.ХранилищеФайла.Получить();
			ИмяФайла = Стр.ИмяФайла;
			Длина=СтрДлина(ИмяФайла)-1;
			Расш="";
			Для й=0 По Длина Цикл
				Если Прав(ИмяФайла,1)<>"." Тогда
					Расш=Прав(ИмяФайла,1)+Расш;
					ИмяФайла = Лев(ИмяФайла,СтрДлина(ИмяФайла)-1);
				Иначе
					Прервать;
				КонецЕсли;		
			КонецЦикла;	
			Если й= Длина Тогда
				Расширение = "";
			Иначе
				Расширение = Расш;
			КонецЕсли;	
			Стр.Счет = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", Стр.ИмяФайла, ДД), Расширение);
			Стр.ХранилищеФайла = Неопределено;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Стр.ИмяФайлаАкт) И Не ЗначениеЗаполнено(Стр.Акт) Тогда
			ДД 	= Стр.ХранилищеФайлаАкт.Получить();
			ИмяФайла = Стр.ИмяФайлаАкт;
			Длина=СтрДлина(ИмяФайла)-1;
			Расш="";
			Для й=0 По Длина Цикл
				Если Прав(ИмяФайла,1)<>"." Тогда
					Расш=Прав(ИмяФайла,1)+Расш;
					ИмяФайла = Лев(ИмяФайла,СтрДлина(ИмяФайла)-1);
				Иначе
					Прервать;
				КонецЕсли;		
			КонецЦикла;	
			Если й= Длина Тогда
				Расширение = "";
			Иначе
				Расширение = Расш;
			КонецЕсли;	
			Стр.Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", Стр.ИмяФайлаАкт, ДД), Расширение);
			Стр.ХранилищеФайлаАкт = Неопределено;
			
		КонецЕсли;	
		
	КонецЦикла;	
	//НайденнаяСтрока = Ссылка.УслугиПоСчетам[ВыборкаДДС.НомерСтроки - 1];
	//ЗначениеВРеквизитФормы(Док,"Объект");	
КонецПроцедуры	


&НаКлиенте
Процедура ОчиститьСтрокиБезСделок(Команда)
	ОчиститьСтрокиБезСделокСервер();
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокиБезСделокСервер()
	Кол=Объект.Комплектация.Количество()-1;
	Для й=0 По Кол Цикл
		Стр=Объект.Комплектация[Кол-й] ;
		Если Не ЗначениеЗаполнено(Стр.Сделка) Тогда
			Объект.Комплектация.Удалить(Стр);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиУслугаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУслугаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Строки=Объект.Услуги.НайтиСтроки(Новый Структура("Услуга",ВыбранноеЗначение));
	Для Каждого Стр Из Строки Цикл
		Сообщение=Новый СообщениеПользователю;
		Сообщение.Текст="Услуга "+ВыбранноеЗначение+" уже есть в строке "+Стр.НомерСтроки;
		//Сообщение.Поле = Стр;
		Сообщение.УстановитьДанные(Стр);
		Сообщение.Сообщить();
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходИзБанка(Команда)
	Если Модифицированность
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли;
	
	МасНомеров = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Заявка) И НЕ ЗначениеЗаполнено(СтрокаТЧ.РасходИзБанка) Тогда
			МасНомеров.Добавить(СтрокаТЧ.НомерСтроки);
		КонецЕсли; 
	КонецЦикла;
	СоответствиеНомеровИЗаявок = Новый Соответствие;
	
	//
	СоздатьРасходыИзБанкаСервер(Объект.Ссылка,МасНомеров, СоответствиеНомеровИЗаявок);
	
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		//Если Не ЗначениеЗаполнено(СтрокаТЧ.РасходИзБанка) И НЕ СтрокаТЧ.Аванс Тогда
		//	Ошибка=Ложь;
		//	Если Не ЗначениеЗаполнено(СтрокаТЧ.ИмяФайлаПолноеАкт) Тогда
		//		Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" нет вложения скана акта. Документ оплаты не будет создан");
		//		Ошибка=Истина;
		//	КонецЕсли;	
		//	Если Не ЗначениеЗаполнено(СтрокаТЧ.ИмяФайлаПолноеАкт) Тогда
		//		Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" нет вложения скана акта. Документ оплаты не будет создан");
		//		Ошибка=Истина;
		//	КонецЕсли;	
		//	Если Ошибка Тогда
		//		Продолжить;
		//	КонецЕсли;	
		//КонецЕсли;	
		ТекРасход = СоответствиеНомеровИЗаявок.Получить(СтрокаТЧ.НомерСтроки);
		Если ЗначениеЗаполнено(ТекРасход) Тогда
			// Надо дозаполнить и попытаться провести
			П = Новый Структура("Ключ", ТекРасход);
			ТекПП=ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта",П);
			СтатьяДвиженияДенежныхСредств=ТекПП.СтатьяДвиженияДенежныхСредств;			
			ТекПП.ОрганизацияПриИзменении(ТекПП.ЭлементыФормы.Организация);
			ТекПП.КонтрагентПриИзменении(ТекПП.ЭлементыФормы.Контрагент);
			ТекПП.ДоговорКонтрагентаПриИзменении(ТекПП.ЭлементыФормы.ДоговорКонтрагента);
			ТекПП.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств ;// а то её меняют в предыдущих обработчиках 
			ТекПП.УстановитьСчетаУчетаБУ();
			ТекПП.УстановитьСтатьюДДС_БУ_ПоУмолчанию();
			Попытка
				ТекПП.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
				ТекПП.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;	
			Сообщить("Сформирован документ "+ТекРасход);
			СтрокаТЧ.РасходИзБанка = ТекРасход;
		КонецЕсли; 
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СоздатьРасходыИзБанкаСервер(Ссылка, МасНомеров, СоответствиеНомеровИЗаявок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтрагентыАвтоакцепта.Контрагент
	//|ИЗ
	//|	РегистрСведений.КонтрагентыАвтоакцепта КАК КонтрагентыАвтоакцепта";
	//
	//Результат = Запрос.Выполнить();
	//
	//МассивКонтрагентов = Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);
	Запрос.УстановитьПараметр("МасНомерСтроки"	, МасНомеров);
	Запрос.УстановитьПараметр("Услуга"			, Ссылка.Услуги.ВыгрузитьКолонку("Услуга"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
	|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка <> &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка.Проведен
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга В(&Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Сумма) КАК Сумма,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|ПОМЕСТИТЬ втГотовыеСуммы
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.РасходИзБанка <> ЗНАЧЕНИЕ(Документ.РасходИзБанка.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.СтатьяДДС КАК УслугаСтатьяДДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов КАК УслугаСтатьяДР,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент КАК Контрагент,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент.Организация КАК ОрганизацияКонтрагента,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент.Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДоговорКонтрагента.Организация КАК ОрганизацияДоговора,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Сумма КАК Сумма,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСтроки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.СтавкаНДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Аванс,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСчета,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДатаСчета,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ФормаОплаты,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Комментарий,
	|	ЕСТЬNULL(вт.Сумма, 0) КАК СуммаИзрасходовано,
	|	ЕСТЬNULL(втГотовыеСуммы.Сумма, 0) КАК СуммаИзрасходованоЭтотДок
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка = КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка
	|			И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки = КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга = вт.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГотовыеСуммы КАК втГотовыеСуммы
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки = втГотовыеСуммы.УИН_Строки
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСтроки В(&МасНомерСтроки)";
	
	Результат = Запрос.Выполнить();
	
	ТекЦФО 					= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	ТекТорговаяТочка 		= Ссылка.Магазин;
	ВыборкаДДС = Результат.Выбрать();
	
	СоотУслуги = Новый Соответствие;
	
	Пока ВыборкаДДС.Следующий() Цикл
		Платёжка = Документы.РасходИзБанка.СоздатьДокумент();
		Платёжка.Организация = ?(ЗначениеЗаполнено(ВыборкаДДС.ОрганизацияКонтрагента), ВыборкаДДС.ОрганизацияКонтрагента, ВыборкаДДС.ОрганизацияДоговора);
		Платёжка.СчетОрганизации = Платёжка.Организация.ОсновнойБанковскийСчет;
		Платёжка.Дата = ТекущаяДата();
		Платёжка.ДоговорКонтрагента = ВыборкаДДС.ДоговорКонтрагента;
		Платёжка.Контрагент = ВыборкаДДС.Контрагент;
		Платёжка.СуммаДокумента =  ВыборкаДДС.Сумма;
		Платёжка.ДокументОснование = Ссылка;
		Платёжка.УИН_СтрокиОснования = ВыборкаДДС.УИН_Строки;
		Платёжка.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Платёжка.СтатьяДвиженияДенежныхСредств = ВыборкаДДС.УслугаСтатьяДДС;
		Платёжка.ЦФО = ТекЦФО;
		Платёжка.ТорговаяТочка = ТекТорговаяТочка;
		Платёжка.ЗаявкаНаРасходованиеСредств = Ссылка;
		Платёжка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		Платёжка.НазначениеПлатежа = ?(ВыборкаДДС.Аванс, "Аванс ", "") + ВыборкаДДС.Услуга + " " + 
		?(ЗначениеЗаполнено(ВыборкаДДС.НомерСчета), "Счет №" + ВыборкаДДС.НомерСчета + " от " +
		Формат(ВыборкаДДС.ДатаСчета, "ДФ=dd.MM.yyyy"), "") + " " + ТекТорговаяТочка;
		Платёжка.ОчередностьПлатежа = 5;
		ТекДата = Платёжка.Дата + 86400;
		Пока ДеньНедели(ТекДата)<>2
			И ДеньНедели(ТекДата)<>4 Цикл
			ТекДата = ТекДата + 86400;
		КонецЦикла; 
		Платёжка.Дата = ТекДата;
		Платёжка.ОбменДанными.Загрузка=Истина;
		Платёжка.Записать(РежимЗаписиДокумента.Запись);
		СоответствиеНомеровИЗаявок.Вставить(ВыборкаДДС.НомерСтроки, Платёжка.Ссылка);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеУслуг(Команда)
	Если Модифицированность
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные=Элементы.УслугиПоСчетам.ТекущиеДанные;
	ТекущиеДанныеУслуг=Элементы.Услуги.ТекущиеДанные;
	Парам=Новый Структура("Контрагент,ДоговорКонтрагента,Сумма,СтавкаНДС,ПоступлениеУслуг");
	ЗаполнитьЗначенияСвойств(Парам,ТекущиеДанные);
	Док=СоздатьПоступлениеПоСтроке(Парам,ТекущиеДанныеУслуг.Услуга);
	Если ЗначениеЗаполнено(Док) Тогда
		ТекущиеДанные.ПоступлениеУслуг=Док;
		Парам=Новый Структура;
		Парам.Вставить("Ключ",Док);
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента",Парам);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СоздатьПоступлениеПоСтроке(ТекущиеДанные,Услуга)
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПоступлениеУслуг) Тогда
		Док=Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Док.Дата=ТекущаяДата();
	Иначе
		Док=ТекущиеДанные.ПоступлениеУслуг.ПолучитьОбъект();
		Док.Услуги.Очистить();
	КонецЕсли;	
	
	Док.ДокументОснование	= Объект.Ссылка;
	Док.Организация 		= ТекущиеДанные.ДоговорКонтрагента.Организация;
	Док.Контрагент 			= ТекущиеДанные.Контрагент;
	Док.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
	Док.СтруктурнаяЕдиница 	= Объект.Магазин;
	//ЭтотОбъект.СтатьяДДС 			= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Док.ВариантРасчетаНДС 	= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	
	//Если ДанныеЗаполнения.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
	//	ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ОпределитьСчетУчетаПоДокументуРасходИзБанка(ДанныеЗаполнения);
	//КонецЕсли;
	НоваяСтрока = Док.Услуги.Добавить();
	
	//НоваяСтрока.Номенклатура = Услуга;
	//ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(НоваяСтрока, Док);
	НоваяСтрока.Содержание = Услуга.Наименование;
	НоваяСтрока.Количество 	= 1;
	НоваяСтрока.Цена 		= ТекущиеДанные.Сумма;
	НоваяСтрока.СтавкаНДС 	= ТекущиеДанные.СтавкаНДС;
	
	НоваяСтрока.СчетЗатрат 		= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	НоваяСтрока.Субконто1 		= Объект.Магазин;
	НоваяСтрока.Субконто2 		= Объект.Контрагент.СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов;
	НоваяСтрока.Субконто3 		= ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Объект.Магазин, Объект.Дата);
	
	Док.ПосчитатьСуммуСтрокиТЧ(НоваяСтрока);
	
	Док.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
	//Док.ОбменДанными.Загрузка = Истина;
	Док.СтатьяДДС=Услуга.СтатьяДДС;
	Если Док.Проведен Тогда
		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе	
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;	
	Возврат Док.Ссылка;
КонецФункции

&НаКлиенте
Процедура СоздатьЗаявкиНаУслугиМатериалы(Команда)
	Если Модифицированность
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли;
	
	МасНомеров = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Заявка) И НЕ ЗначениеЗаполнено(СтрокаТЧ.РасходИзБанка) Тогда
			МасНомеров.Добавить(СтрокаТЧ.НомерСтроки);
		КонецЕсли; 
	КонецЦикла;
	СоответствиеНомеровИЗаявок = Новый Соответствие;
	
	//
	СоздатьЗаявкиНаУслугиМатериалыСервер(Объект.Ссылка,МасНомеров, СоответствиеНомеровИЗаявок);
	
	Для каждого СтрокаТЧ Из Объект.УслугиПоСчетам Цикл
		
		ТекЗаявка = СоответствиеНомеровИЗаявок.Получить(СтрокаТЧ.НомерСтроки);
		Если ЗначениеЗаполнено(ТекЗаявка) Тогда
			
			//ТекПП = ТекЗаявка.ПолучитьОбъект();
			//Попытка
			//	ТекПП.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//	ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
			//	ТекПП.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;	
			ОткрытьЗначение(ТекЗаявка);
			Сообщить("Сформирован документ "+ТекЗаявка);
			СтрокаТЧ.Заявка = ТекЗаявка;
		КонецЕсли; 
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаявкиНаУслугиМатериалыСервер(Ссылка, МасНомеров, СоответствиеНомеровИЗаявок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтрагентыАвтоакцепта.Контрагент
	//|ИЗ
	//|	РегистрСведений.КонтрагентыАвтоакцепта КАК КонтрагентыАвтоакцепта";
	//
	//Результат = Запрос.Выполнить();
	//
	//МассивКонтрагентов = Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);
	Запрос.УстановитьПараметр("МасНомерСтроки"	, МасНомеров);
	Запрос.УстановитьПараметр("Услуга"			, Ссылка.Услуги.ВыгрузитьКолонку("Услуга"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
	|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка <> &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка.Проведен
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга В(&Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Сумма) КАК Сумма,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|ПОМЕСТИТЬ втГотовыеСуммы
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка <> НЕОПРЕДЕЛЕНО
	|	И НЕ КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.СтатьяДДС КАК УслугаСтатьяДДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.СтатьяДДС.ОсновнаяСтатьяДоходовРасходов КАК УслугаСтатьяДР,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент КАК Контрагент,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент.Организация КАК ОрганизацияКонтрагента,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Контрагент.Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДоговорКонтрагента.Организация КАК ОрганизацияДоговора,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Сумма КАК Сумма,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСтроки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.СтавкаНДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Аванс,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСчета,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДатаСчета,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ФормаОплаты,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Комментарий,
	|	ЕСТЬNULL(вт.Сумма, 0) КАК СуммаИзрасходовано,
	|	ЕСТЬNULL(втГотовыеСуммы.Сумма, 0) КАК СуммаИзрасходованоЭтотДок,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.СуммаНДС,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Счет,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.ДатаПоступления,
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга.НеИспользоватьАвтоакцепт
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка = КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка
	|			И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки = КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга = вт.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГотовыеСуммы КАК втГотовыеСуммы
	|		ПО КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки = втГотовыеСуммы.УИН_Строки
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = &Ссылка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.НомерСтроки В(&МасНомерСтроки)";
	
	Результат = Запрос.Выполнить();
	
	ТекЦФО 					= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	ТекТорговаяТочка 		= Ссылка.Магазин;
	ВыборкаДДС = Результат.Выбрать();
	
	СоотУслуги = Новый Соответствие;
	ТекОтветственный=ПараметрыСеанса.ТекущийПользователь;
	Пока ВыборкаДДС.Следующий() Цикл
		Заявка = Документы.ЗаявкаНаУслугиМатериалы.СоздатьДокумент();
		Заявка.Организация = ?(ЗначениеЗаполнено(ВыборкаДДС.ОрганизацияКонтрагента), ВыборкаДДС.ОрганизацияКонтрагента, ВыборкаДДС.ОрганизацияДоговора);
		//Заявка.СчетОрганизации = Заявка.Организация.ОсновнойБанковскийСчет;
		Заявка.Дата = ТекущаяДата();
		Заявка.ДоговорКонтрагента = ВыборкаДДС.ДоговорКонтрагента;
		Заявка.Контрагент = ВыборкаДДС.Контрагент;
		Заявка.СуммаДокумента =  ВыборкаДДС.Сумма;
		Заявка.ДокументОснование = Ссылка;
		Заявка.УИН_СтрокиОснования = ВыборкаДДС.УИН_Строки;
		//Заявка.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Заявка.СтатьяДДС = ВыборкаДДС.УслугаСтатьяДДС;
		Заявка.ЦФО = ТекЦФО;
		Заявка.Комментарий = ВыборкаДДС.Комментарий;
		
		//+++АК LAGP 2018.01.16 ИП-00017662 Определяем акцептанта для ЗаявкиНаУслугиМатериалы, по ЦФО
		//Курвяков = Справочники.Пользователи.НайтиПоНаименованию("Курвяков Евгений");
		//Заявка.Акцептант = Курвяков;
		//+++АК ILIK 2018.09.21 ИП-00019851
		//АкцептантПоЦФО 		= ПолучитьАкцептанта(Заявка.Дата, ТекТорговаяТочка);
		//---АК ILIK
		//---АК LAGP
		
		//Заявка.СтруктурнаяЕдиница = ТекТорговаяТочка;
		Заявка.ДатаПоступления = ВыборкаДДС.ДатаПоступления;
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Заявка.СтатьяДДС);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Заявка.Дата, Заявка.СтатьяДДС);
		//---АК SUVV
		Если МассивСчетов.Количество() = 1 Тогда
			Заявка.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Иначе
			Заявка.СчетУчетаРасчетов = Планысчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заявка.Контрагент) Тогда
			Заявка.ВариантРасчетаНДС = ?(Заявка.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		КонецЕсли;
		
		
		
		СтрокаОплат=Заявка.Оплата.Добавить();
		СтрокаОплат.Аванс=ВыборкаДДС.Аванс;
		СтрокаОплат.СуммаОплаты = ВыборкаДДС.Сумма;
		//Заявка.ЗаявкаНаРасходованиеСредств = Ссылка;
		//Заявка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		//+++АК sils 11.09.2018 ИП-00019764
		//СтрокаОплат.НазначениеПлатежа = ?(ВыборкаДДС.Аванс, "Аванс ", "") + ВыборкаДДС.Услуга + " " + 
		//?(ЗначениеЗаполнено(ВыборкаДДС.НомерСчета), "Счет №" + ВыборкаДДС.НомерСчета + " от " +
		//Формат(ВыборкаДДС.ДатаСчета, "ДФ=dd.MM.yyyy"), "") + " " + ТекТорговаяТочка;
		СтрокаОплат.НазначениеПлатежа = "Оплата по счету №" + ?(ЗначениеЗаполнено(ВыборкаДДС.НомерСчета), ВыборкаДДС.НомерСчета, "___") + 
			" от " + Формат(ВыборкаДДС.ДатаСчета, "ДФ=dd.MM.yyyy") + " за " + ?(ВыборкаДДС.Аванс, "Аванс ", "") + 
			ВыборкаДДС.Услуга + " " + ТекТорговаяТочка + Символы.ПС + 
			"Сумма " + Формат(ВыборкаДДС.Сумма, "ЧДЦ=2; ЧРД=-") + Символы.ПС +
			"В т.ч. НДС (" + СокрЛП(ВыборкаДДС.СтавкаНДС) + ") " + Формат(ВыборкаДДС.СуммаНДС, "ЧДЦ=2; ЧРД=-");
		//---АК
		//Заявка.ОчередностьПлатежа = 5;
		ТекДата = Заявка.Дата + 86400;
		Пока ДеньНедели(ТекДата)<>2
			И ДеньНедели(ТекДата)<>4 Цикл
			ТекДата = ТекДата + 86400;
		КонецЦикла; 
		СтрокаОплат.ДатаПлатежа = ТекДата;
		
		Заявка.Ответственный 			= ТекОтветственный;
		//+++АК POZM 2018.06.14 ИП-00018108 
		Заявка.ЗаполнитьАкцептантаПоОтветственному();
		//---АК POZM 
		
		ТекущееЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Объект.Магазин,ТекущаяДата());
		
		СтрокаУслуг=Заявка.Услуги.Добавить();
		СтрокаУслуг.СтруктурнаяЕдиница=ТекТорговаяТочка;
		СтрокаУслуг.Номенклатура=ВыборкаДДС.Услуга;
		СтрокаУслуг.Количество=1;
		СтрокаУслуг.Цена=ВыборкаДДС.Сумма;
		СтрокаУслуг.Сумма=ВыборкаДДС.Сумма;
		СтрокаУслуг.СтавкаНДС=ВыборкаДДС.СтавкаНДС;
		СтрокаУслуг.СуммаНДС=ВыборкаДДС.СуммаНДС;
		СтрокаУслуг.Комментарий = ВыборкаДДС.Услуга;
		Если ТекущееЦФО = ТекЦФО Тогда
			СтрокаУслуг.Подтверждающий = Справочники.Пользователи.НайтиПоНаименованию("Мышакова Марина");
		КонецЕсли;	
		
		Если ВыборкаДДС.Сумма+?(СоотУслуги.Получить(ВыборкаДДС.Услуга)=Неопределено,0,СоотУслуги.Получить(ВыборкаДДС.Услуга))+
			ВыборкаДДС.СуммаИзрасходованоЭтотДок>ВыборкаДДС.Услуга.СуммаНормативная Тогда
			//Если МассивКонтрагентов.Найти(ВыборкаДДС.Контрагент)=Неопределено Тогда
			//ОбЗаявки.Статус                 = мСтатусНеАкцептована;
			СтрокаУслуг.Подтверждено=Истина;
			СтрокаУслуг.ПодтвердилПользователь=ТекОтветственный;
			СтрокаУслуг.КоличествоПолучено=СтрокаУслуг.Количество;
			СтрокаУслуг.ПодтвердилДата = ТекущаяДата();
			//+++АК ILIK 2018.09.21 ИП-00019851
			//СтрокаУслуг.Акцептант = АкцептантПоЦФО;
			СтрокаУслуг.Акцептант = Заявка.Акцептант;
			//---АК ILIK
		Иначе	
			//СтрокаОплат.Акцептовал = ТекОтветственный;
			//СтрокаОплат.АкцептовалДата = ТекущаяДата();
			//СтрокаОплат.Акцептована = Истина;
			//СоотУслуги.Вставить(ВыборкаДДС.Услуга,?(СоотУслуги.Получить(ВыборкаДДС.Услуга)=Неопределено,0,СоотУслуги.Получить(ВыборкаДДС.Услуга))+ВыборкаДДС.Сумма);
			//
			СтрокаУслуг.Подтверждено=Истина;
			СтрокаУслуг.ПодтвердилПользователь=ТекОтветственный;
			СтрокаУслуг.КоличествоПолучено=СтрокаУслуг.Количество;
			СтрокаУслуг.ПодтвердилДата = ТекущаяДата();
			
			//+++АК LAGP 2018.01.16 ИП-00017662 Определяем акцептанта для ЗаявкиНаУслугиМатериалы, по ЦФО
			//СтрокаУслуг.Акцептант = Курвяков;
			//+++АК ILIK 2018.09.21 ИП-00019851
			//СтрокаУслуг.Акцептант = АкцептантПоЦФО;		
			СтрокаУслуг.Акцептант = Заявка.Акцептант;
			//---АК ILIK
			Если НЕ ВыборкаДДС.УслугаНеИспользоватьАвтоакцепт Тогда
				//СтрокаУслуг.Акцептовал = Курвяков;
				//+++АК ILIK 2018.09.21 ИП-00019851
				//Если НЕ ЗначениеЗаполнено(АкцептантПоЦФО) Тогда
				Если НЕ ЗначениеЗаполнено(Заявка.Акцептант) Тогда
				//---АК ILIK
					Сообщить("Акцептант не найден.");
				Иначе
					СтрокаУслуг.АкцептовалДата = ТекущаяДата();
					СтрокаУслуг.Акцептована = Истина;
					СтрокаУслуг.АвтоАкцепт = Истина;					
					//+++АК ILIK 2018.09.21 ИП-00019851
					//СтрокаУслуг.Акцептовал = АкцептантПоЦФО;
					СтрокаУслуг.Акцептовал = Заявка.Акцептант;
					//---АК ILIK
				КонецЕсли;
				//---АК LAGP
			КонецЕсли;	
		КонецЕсли; 
		
		//НайденнаяСтрока = Ссылка.УслугиПоСчетам[ВыборкаДДС.НомерСтроки - 1];
		//ДД 	= НайденнаяСтрока.ХранилищеФайла.Получить();
		//ИмяФайла = НайденнаяСтрока.ИмяФайла;
		//Длина=СтрДлина(ИмяФайла)-1;
		//Расш="";
		//Для й=0 По Длина Цикл
		//	Если Прав(ИмяФайла,1)<>"." Тогда
		//		Расш=Прав(ИмяФайла,1)+Расш;
		//		ИмяФайла = Лев(ИмяФайла,СтрДлина(ИмяФайла)-1);
		//	Иначе
		//		Прервать;
		//	КонецЕсли;		
		//КонецЦикла;	
		//Если й= Длина Тогда
		//	Расширение = "";
		//Иначе
		//	Расширение = Расш;
		//КонецЕсли;	
		//Заявка.СчетНаОплату = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", НайденнаяСтрока.ИмяФайла, ДД), Расширение);
		Заявка.СчетНаОплату = ВыборкаДДС.Счет;
		Заявка.НомерСчета = ВыборкаДДС.НомерСчета;
		Заявка.ДатаСчета = ВыборкаДДС.ДатаСчета;
		
		//+++АК POZM 2018.02.01 ИП-00017764 
		Заявка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику;
		//---АК POZM 
		
		Заявка.ОбменДанными.Загрузка=Истина;
		Заявка.Записать(РежимЗаписиДокумента.Запись);
		СоответствиеНомеровИЗаявок.Вставить(ВыборкаДДС.НомерСтроки, Заявка.Ссылка);
	КонецЦикла;
	
	
КонецПроцедуры

//+++АК ILIK 2018.09.21 ИП-00019851
#Область АК_ОтключенныйКод
////+++АК LAGP 2018.01.16 ИП-00017662 Определяем акцептанта для ЗаявкиНаУслугиМатериалы, по ЦФО
//&НаСервереБезКонтекста
//Функция ПолучитьАкцептанта(ДатаСреза, СтруктурнаяЕдиница)
//	
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("ЦФО", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
//	СтруктураПараметров.Вставить("Акцептант", Справочники.Пользователи.ПустаяСсылка());
//	СтруктураПараметров.Вставить("УправляющийФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
//	СтруктураПараметров.Вставить("ТипРолиУправляющий", ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"));
//	СтруктураПараметров.Вставить("ТипРолиНачСтроитель", ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("NachBuilder"));
//	СтруктураПараметров.Вставить("ДатаСреза", ДатаСреза);
//	СтруктураПараметров.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
//	
//	//ЦФО 				= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
//	//Акцептант 			= Справочники.Пользователи.ПустаяСсылка();
//	//УправляющийФизЛицо 	= Справочники.ФизическиеЛица.ПустаяСсылка();
//	//ТипРолиУправляющий 	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"); 	// Роль не предопределена
//	//ТипРолиНачСтроитель	= ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("NachBuilder"); 				// Роль не предопределена 
//	
//	ЗапросЦФО = Новый Запрос;
//	ЗапросЦФО.Текст = 
//	"ВЫБРАТЬ
//	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
//	|ИЗ
//	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦФОСтруктурныхЕдиницСрезПоследних";
//	
//	ЗапросЦФО.УстановитьПараметр("ДатаСреза", СтруктураПараметров.ДатаСреза);
//	ЗапросЦФО.УстановитьПараметр("СтруктурнаяЕдиница", СтруктураПараметров.СтруктурнаяЕдиница);
//	
//	ВыборкаЗапросаЦФО = ЗапросЦФО.Выполнить().Выбрать();
//	
//	Если ВыборкаЗапросаЦФО.Количество() > 0 Тогда
//		ВыборкаЗапросаЦФО.Следующий();			
//		СтруктураПараметров.ЦФО = ВыборкаЗапросаЦФО.ЦФО;
//	Иначе	
//		СтруктураПараметров.ЦФО = ПолучитьЦФОПоУправляющему(СтруктураПараметров);	
//	КонецЕсли;	
//	
//	Если ЗначениеЗаполнено(СтруктураПараметров.ЦФО) Тогда
//		СтруктураПараметров.Акцептант = ПолучитьАкцептантаПоЦФО(СтруктураПараметров);			
//	КонецЕсли;		
//	
//	//второй проход, если ЦФО есть, но по нему не найден акцептант, ищем по косвенному ЦФО (через управляющего)																						   
//	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Акцептант) И ВыборкаЗапросаЦФО.Количество() > 0 Тогда
//		СтруктураПараметров.ЦФО = ПолучитьЦФОПоУправляющему(СтруктураПараметров);
//		СтруктураПараметров.Акцептант = ПолучитьАкцептантаПоЦФО(СтруктураПараметров);
//	КонецЕсли;	
//	
//	Возврат СтруктураПараметров.Акцептант;
//	
//КонецФункции

////+++АК LAGP 2018.01.17 ИП-00017662 Оптимизация кода
//&НаСервереБезКонтекста
//Функция ПолучитьАкцептантаПоЦФО(СтруктураПараметров)
//	
//	ЗапросАкцептанта = Новый Запрос;
//	ЗапросАкцептанта.Текст = 
//	"ВЫБРАТЬ
//	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
//	|ИЗ
//	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
//	|			&ДатаСреза,
//	|			Объект = &СтруктурнаяЕдиница
//	|				И ТИПЗНАЧЕНИЯ(Объект) = ТИП(Справочник.СтруктурныеЕдиницы)
//	|				И ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних";
//	
//	ЗапросАкцептанта.УстановитьПараметр("ДатаСреза", СтруктураПараметров.ДатаСреза);
//	ЗапросАкцептанта.УстановитьПараметр("СтруктурнаяЕдиница", СтруктураПараметров.ЦФО);
//	ЗапросАкцептанта.УстановитьПараметр("ТипРоли", СтруктураПараметров.ТипРолиНачСтроитель);
//	
//	ВыборкаЗапросаАкцептанта = ЗапросАкцептанта.Выполнить().Выбрать();
//	Если ВыборкаЗапросаАкцептанта.Количество() > 0 Тогда
//		ВыборкаЗапросаАкцептанта.Следующий();	
//		Акцептанты = ВыборкаЗапросаАкцептанта.РольПользователя.СоставРоли;	
//		Если Акцептанты.Количество() > 0 Тогда
//			ОтборПользователя = Новый Структура;
//			ОтборПользователя.Вставить("ФизЛицо", Акцептанты[0].Сотрудник);
//			
//			ВыборкаПользователь = Справочники.Пользователи.Выбрать(,, ОтборПользователя,);
//			ВыборкаПользователь.Следующий();
//			Если ЗначениеЗаполнено(ВыборкаПользователь.Ссылка) Тогда					
//				СтруктураПараметров.Акцептант = ВыборкаПользователь.Ссылка;
//			КонецЕсли;	
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СтруктураПараметров.Акцептант;
//	
//КонецФункции	

////+++АК LAGP 2018.01.17 ИП-00017662 Оптимизация кода
//&НаСервереБезКонтекста
//Функция ПолучитьЦФОПоУправляющему(СтруктураПараметров)
//	
//	ЗапросЦФО = Новый Запрос;
//	ЗапросЦФО.Текст = 
//	"ВЫБРАТЬ
//	|	СоответствиеОбъектРольСрезПоследних.РольПользователя
//	|ИЗ
//	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
//	|			&ДатаСреза,
//	|			Объект = &СтруктурнаяЕдиница
//	|				И ТИПЗНАЧЕНИЯ(Объект) = ТИП(Справочник.СтруктурныеЕдиницы)
//	|				И ТипРоли = &ТипРоли) КАК СоответствиеОбъектРольСрезПоследних";
//	
//	ЗапросЦФО.УстановитьПараметр("ДатаСреза", СтруктураПараметров.ДатаСреза);
//	ЗапросЦФО.УстановитьПараметр("СтруктурнаяЕдиница", СтруктураПараметров.СтруктурнаяЕдиница);
//	ЗапросЦФО.УстановитьПараметр("ТипРоли", СтруктураПараметров.ТипРолиУправляющий);
//	
//	ВыборкаЗапросаЦФО = ЗапросЦФО.Выполнить().Выбрать();
//	Если ВыборкаЗапросаЦФО.Количество() > 0 Тогда
//		ВыборкаЗапросаЦФО.Следующий();	
//		Сотрудники = ВыборкаЗапросаЦФО.РольПользователя.СоставРоли;
//		Если Сотрудники.Количество() > 0 Тогда
//			СтруктураПараметров.УправляющийФизЛицо = Сотрудники[0].Сотрудник;	
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(СтруктураПараметров.УправляющийФизЛицо) Тогда
//		
//		ОтборПользователя = Новый Структура;
//		ОтборПользователя.Вставить("ФизЛицо", СтруктураПараметров.УправляющийФизЛицо);
//		
//		НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо", СтруктураПараметров.УправляющийФизЛицо);
//		
//		Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
//			
//			ЗапросЦФО = Новый Запрос;
//			ЗапросЦФО.Текст = 
//			"ВЫБРАТЬ
//			|	ПользователиПоЦФОСрезПоследних.ЦФО
//			|ИЗ
//			|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&ДатаСреза, Сотрудник = &Сотрудник) КАК ПользователиПоЦФОСрезПоследних";
//			
//			ЗапросЦФО.УстановитьПараметр("ДатаСреза", СтруктураПараметров.ДатаСреза);
//			ЗапросЦФО.УстановитьПараметр("Сотрудник", НайденныйПользователь);
//			
//			ВыборкаЗапросаЦФО = ЗапросЦФО.Выполнить().Выбрать();
//			
//			Если ВыборкаЗапросаЦФО.Количество() > 0 Тогда
//				ВыборкаЗапросаЦФО.Следующий();			
//				СтруктураПараметров.ЦФО = ВыборкаЗапросаЦФО.ЦФО;
//			КонецЕсли; 					
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СтруктураПараметров.ЦФО;
//	
//КонецФункции	
#КонецОбласти
//---АК ILIK

&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	//СпрОбъект.УстановитьНовыйКод("0");
	СпрОбъект.Наименование = СтрокаТаблицы.Представление;
	СпрОбъект.Расширение = РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	АвансыБезДаты = Объект.УслугиПоСчетам.НайтиСтроки(Новый Структура("Аванс,ДатаПоступления",Истина,Дата(1,1,1)));
	Для Каждого АвансБезДаты из АвансыБезДаты Цикл
		Если Не ЗначениеЗаполнено(АвансБездаты.Заявка) Тогда
			Отказ = истина;
			Сообщить("В строке "+АвансБезДаты.НомерСтроки+" не заполнена плановая дата поступления");
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЗаявкуНаСервере(Заявка,СуммаОплатВЗаявкеОплаченная)
	
	Если ЗначениеЗаполнено(Заявка) И ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы") Тогда
		Если СуммаОплатВЗаявкеОплаченная>0 Тогда
			Сообщить("По заявке есть оплаты, она не будет перезаполнена");
			Возврат;
		КонецЕслИ;	
		Док=Заявка.ПолучитьОбъект();
		СтрокиЗаявки = Объект.УслугиПоСчетам.НайтиСтроки(Новый Структура("Заявка",Заявка));
		СтрокаЗаявки = СтрокиЗаявки[0];
		СтрокиУслуг = Объект.Услуги.НайтиСтроки(Новый Структура("УИН_Строки",СтрокаЗаявки.УИН_Строки));
		Услуга = СтрокиУслуг[0].Услуга;
		Док.Услуги.Очистить();
		
		
		Док.ДоговорКонтрагента = СтрокаЗаявки.ДоговорКонтрагента;
		Док.Контрагент = СтрокаЗаявки.Контрагент;
		Док.СуммаДокумента =  СтрокаЗаявки.Сумма;
		Док.ДокументОснование = Объект.Ссылка;
		Док.УИН_СтрокиОснования = СтрокаЗаявки.УИН_Строки;
		Док.Комментарий = СтрокаЗаявки.Комментарий;
		Курвяков = Справочники.Пользователи.НайтиПоНаименованию("Курвяков Евгений");
		Док.ДатаПоступления = СтрокаЗаявки.ДатаПоступления;
		//+++АК SUVV 2018.02.28 ИП-00017941
		//МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Док.СтатьяДДС);
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Док.Дата, Док.СтатьяДДС);
		//---АК SUVV
		Если МассивСчетов.Количество() = 1 Тогда
			Док.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Иначе
			Док.СчетУчетаРасчетов = Планысчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.Контрагент) Тогда
			Док.ВариантРасчетаНДС = ?(Док.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
		КонецЕсли;
		
		Док.Услуги.Очистить();		
		СтрокаУслуг=Док.Услуги.Добавить();
		СтрокаУслуг.СтруктурнаяЕдиница=Объект.Магазин;
		//СтрокаУслуг.Номенклатура=СтрокаЗаявки.Услуга;
		СтрокаУслуг.Количество=1;
		СтрокаУслуг.Цена=СтрокаЗаявки.Сумма;
		СтрокаУслуг.Сумма=СтрокаЗаявки.Сумма;
		СтрокаУслуг.СтавкаНДС=СтрокаЗаявки.СтавкаНДС;
		СтрокаУслуг.СуммаНДС=СтрокаЗаявки.СуммаНДС;
		СтрокаУслуг.Комментарий = Услуга;
		ТекущееЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Объект.Магазин,ТекущаяДата());
		ТекЦФО 					= Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
		Если ТекущееЦФО = ТекЦФО Тогда
			СтрокаУслуг.Подтверждающий = Справочники.Пользователи.НайтиПоНаименованию("Мышакова Марина");
		КонецЕсли;	
		СуммаВЭтомДокументе = 0;
		СтрокиЭтогоДокумента=Объект.УслугиПоСчетам.НайтиСтроки(Новый Структура("УИН_Строки",СтрокаЗаявки.УИН_Строки));
		Для Каждого Стр Из СтрокиЭтогоДокумента Цикл
			Если Стр.Заявка<>Заявка И ЗначениеЗаполнено(Стр.Заявка) Тогда
				СуммаВЭтомДокументе = СуммаВЭтомДокументе+Стр.Сумма;
			КонецЕсли;	
		КонецЦикла;	
		
		//ТекстЗапроса="ВЫБРАТЬ
		//|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга,
		//|	СУММА(КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Сумма) КАК Сумма
		//|ИЗ
		//|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
		//|ГДЕ
		//|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка <> &Ссылка
		//|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка.Проведен
		//|	И КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга = &Услуга
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга";
		//Запрос = Новый Запрос(ТекстЗапроса);
		//Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		//Запрос.УстановитьПараметр("Услуга",Услуга);
		//Выборка = Запрос.Выполнить().Выбрать();
		УжеПотрачено=0;
		//Если Выборка.Следующий() Тогда
		//	УжеПотрачено=Выборка.Сумма;
		//КонецЕсли;	
		
		Если СтрокаЗаявки.Сумма+
			УжеПотрачено+СуммаВЭтомДокументе>Услуга.СуммаНормативная Тогда
			
		Иначе	
			
			СтрокаУслуг.Подтверждено=Истина;
			СтрокаУслуг.ПодтвердилПользователь=Объект.Ответственный;
			СтрокаУслуг.КоличествоПолучено=СтрокаУслуг.Количество;
			СтрокаУслуг.ПодтвердилДата = ТекущаяДата();
			СтрокаУслуг.Акцептант = Курвяков;
			СтрокаУслуг.Акцептовал = Курвяков;
			СтрокаУслуг.АкцептовалДата = ТекущаяДата();
			СтрокаУслуг.Акцептована = Истина;
			СтрокаУслуг.АвтоАкцепт = Истина;
		КонецЕсли; 
		
		Док.СчетНаОплату = СтрокаЗаявки.Счет;
		Док.НомерСчета = СтрокаЗаявки.НомерСчета;
		Док.ДатаСчета = СтрокаЗаявки.ДатаСчета;
		
		Док.ОбменДанными.Загрузка=Истина;
		//+++ AK suvv 08.08.2018 ИП-00019493
		Док.Записать(?(Док.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		//--- AK suvv
		
		Сообщить("Перезаполнен "+Заявка);
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиПоСчетамДатаПоступленияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамНомерСчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамДатаСчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамИмяФайлаАктПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УслугиПоСчетам.ТекущиеДанные;
	ПерезаполнитьЗаявкуНаСервере(ТекущиеДанные.Заявка,ТекущиеДанные.СуммаОплатВЗаявкеОплаченная);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамЗаявкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамЗаявкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоСчетамЗаявкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПредпоступлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Комплектация.ТекущиеДанные;
	Если СокрЛП(ТД.УИН_Строки) = "" Тогда
		ТД.УИН_Строки = Новый УникальныйИдентификатор();
	КонецЕсли;	
	Режим = Новый СписокЗначений;
	Режим.Добавить(1,"Выбрать существующий");
	Режим.Добавить(2,"Создать новый");
	Режим.Добавить(3,"Отмена");
	Текст = "ru = ""Выбрать из существующих или создать новый?"";";
	
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = 3 Тогда
		Возврат;
	КонецЕсли;
	Если Ответ = 1 Тогда
		Парам = Новый Структура;
		Парам.Вставить("Отбор",Новый Структура("Контрагент",ТД.Сделка.Контрагент));
		ОткрытьФорму("Документ.ПредпоступлениеПоКомплектации.ФормаВыбора",Парам,ЭтаФорма);
	Иначе
		Парам = Новый Структура;
		Парам.Вставить("Контрагент",ТД.Сделка.Контрагент);
		ДанныеСтроки = Новый Структура("Сделка,Номенклатура,Количество,УИН_СтрокиСделки,УИН_Строки,Цена,ДатаГотовности");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,ТД);
		Парам.Вставить("ТекущиеДанные",ДанныеСтроки);
		ОткрытьФорму("Документ.ПредпоступлениеПоКомплектации.ФормаОбъекта",Парам,ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПредпоступлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
	//	ТД = Элементы.Комплектация.ТекущиеДанные;
	//	ТД.Предпоступление = ВыбранноеЗначение;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеТекущейСтрокиВДокумент(ДанныеСтроки,Предпоступление);
	Док = Предпоступление.ПолучитьОбъект();
	НС = Док.Товары.Найти(ДанныеСтроки.УИН_Строки);
	Если НС = Неопределено Тогда
		НС = Док.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НС,ДанныеСтроки,,);
		НС.Сумма = НС.Количество*НС.Цена;
		НС.СтавкаНДС = НС.Номенклатура.СтавкаНДС;
		Если Не ЗначениеЗаполнено(НС.СтавкаНДС) Тогда
			НС.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;	
		НС.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НС.Сумма,
		Истина, Истина,
		УчетНДС.ПолучитьСтавкуНДС(НС.СтавкаНДС));
	КонецЕсли;	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	

&НаКлиенте
Процедура КомплектацияПредпоступлениеОчистка(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТекущейСтрокиИзДокумента(ДанныеСтроки,Предпоступление);
	Док = Предпоступление.ПолучитьОбъект();
	НС = Док.Товары.Найти(ДанныеСтроки.УИН_Строки);
	Если НС = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	Док.Товары.Удалить(НС);
	Док.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры	

&НаКлиенте
Процедура КомплектацияПредпоступлениеПриИзменении(Элемент)
	ТД = Элементы.Комплектация.ТекущиеДанные;
	ДанныеСтроки = Новый Структура("Сделка,Номенклатура,Количество,УИН_СтрокиСделки,УИН_Строки,Цена,ДатаГотовности");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки,ТД);
	УдалитьДанныеТекущейСтрокиИзДокумента(ДанныеСтроки,ТекущийПредпоступление);
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПредпоступленияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОписаниеОбработкиРасшифровки = ОбработатьРасшифровкуКл( Расшифровка, СтандартнаяОбработка); 
	
	Если ОписаниеОбработкиРасшифровки <> Неопределено Тогда
		ОбработатьРасшифровкуОтчета(ОписаниеОбработкиРасшифровки);	
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработатьРасшифровкуОтчета(ОписаниеОбработкиРасшифровки)
	
	ОбработатьРасшифровку(ОписаниеОбработкиРасшифровки);
	
КонецПроцедуры

Процедура ОбработатьРасшифровку(ОписаниеОбработкиРасшифровки) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ЭтаФорма["АдресДанныхРасшифровки"]);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма["АдресСхемы"]);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, 
	ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	//
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТабПредпоступления.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТабПредпоступления);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Функция ОбработатьРасшифровкуКл( Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки,
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	ДополнительныеПункты = Новый СписокЗначений;
	ДополнительныеПункты.Добавить("НовыйДок","Создать новый документ предпоступления");
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия,ДоступныеДействия,ДополнительныеПункты);
	
	ОписаниеОбработкиРасшифровки = Неопределено;
	
	Если ВыполненноеДействие = "НовыйДок" Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ЭтаФорма["АдресДанныхРасшифровки"]);
		ЗначениеРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
		Парам = Новый Структура();
		Парам.Вставить("Магазин",Объект.Магазин);
		Если ТипЗнч(ЗначениеРасшифровки) = Тип("СправочникСсылка.Контрагенты") Тогда
			Контрагент = ЗначениеРасшифровки;
		ИначеЕсли	ТипЗнч(ЗначениеРасшифровки) = Тип("ДокументСсылка.ПредпоступлениеПоКомплектации") Тогда
			Контрагент = ЗначениеРасшифровки.Контрагент;
		ИначеЕсли	ТипЗнч(ЗначениеРасшифровки) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЗначениеРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
			Если	ТипЗнч(ЗначениеРасшифровки) = Тип("ДокументСсылка.ПредпоступлениеПоКомплектации") Тогда
				Контрагент = ЗначениеРасшифровки.Контрагент;
			КонецЕсли;	
		КонецЕсли;	
		Парам.Вставить("Контрагент",Контрагент);
		
		ОткрытьФорму("Документ.ПредпоступлениеПоКомплектации.ФормаОбъекта",Парам);
	ИначеЕсли Не (ПараметрВыполненногоДействия = Неопределено) Тогда
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрВыполненногоДействия);
			
		Иначе
			
			ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Расшифровка, ПараметрВыполненногоДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОбработкиРасшифровки;
	
КонецФункции


&НаКлиенте
Процедура ОбновитьПредкомплектации(Команда)
	ЗаполнитьПредпоступленияСервер();
КонецПроцедуры


&НаКлиенте
Процедура НовыйПредпоступление(Команда)
	Парам = Новый Структура;
	Парам.Вставить("Магазин",Объект.Магазин);
	ОткрытьФорму("Документ.ПредпоступлениеПоКомплектации.ФормаОбъекта",Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+++АК SHEP 2017.11.09 ИП-00017193
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.Группа2.ТекущаяСтраница = Элементы.СтраницаУслуги;
		Группа2ПриСменеСтраницы(Элементы.Группа2, Элементы.СтраницаУслуги);
	КонецЕсли;
	//---АК SHEP 2017.11.09
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

//+++АК POZM 2018.05.06 ИП-00018375 
&НаКлиенте
Процедура ПлановаяКомплектацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ ПравоРедактированияПредкомплектации Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяКомплектацияПередУдалением(Элемент, Отказ)
	Если НЕ ПравоРедактированияПредкомплектации Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПлановаяКомплектацияОборудованиеБУПриИзменении(Элемент)
	ТД = Элементы.ПлановаяКомплектация.ТекущиеДанные;
	Если ТД.ОборудованиеБУ И ТипЗнч(ТД.Источник)<> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ТД.Источник = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	ИначеЕсли НЕ ТД.ОборудованиеБУ И ТипЗнч(ТД.Источник)<> Тип("СправочникСсылка.Контрагенты") Тогда
		ТД.Источник = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПлановаяКомплектацияИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.ПлановаяКомплектация.ТекущиеДанные;
	Если ТД.ОборудованиеБУ Тогда
		ВыбЗн = ОткрытьФормуМодально("Справочник.СтруктурныеЕдиницы.ФормаВыбора");
	Иначе
		ВыбЗн = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора");
	КонецЕсли;
	ПлановаяКомплектацияИсточникНачалоВыбораФрагмент(ВыбЗн, ТД);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяКомплектацияИсточникНачалоВыбораФрагмент(Знач ВыбЗн, Знач ТД)
	
	ТД.Источник = ВыбЗн;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмоКонтрагентамНаСервере()
	Док = РеквизитФормыВЗначение("Объект");
	Док.ОтправитьПисьмаПоПлановойКомплектации();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоКонтрагентам(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ ЭтаФорма.Модифицированность = Истина Тогда
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Нужно записать документ для отправки письма";
	    Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	ОтправитьПисьмоКонтрагентамНаСервере();
КонецПроцедуры
//+++АК POZM 2018.06.09 ИП-00018375 
&НаКлиенте
Процедура ПлановаяКомплектацияОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТД = Элементы.ПлановаяКомплектация.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.Источник) И ТД.ОборудованиеБУ = Ложь Тогда
		СтандартнаяОбработка=Ложь;
		//+++АК POZM 2018.06.28 ИП-00018375.01
		Парам = Новый Структура();
		#Область АК_ОтключенныйКод 
		//НоменклатураПоставщика=ВыбратьНоменклатуруПоставщика(ТД.Источник);
		//Парам.Вставить("Отбор",Новый Структура("Ссылка",НоменклатураПоставщика));
		#КонецОбласти 
		Парам.Вставить("Отбор",Новый Структура("Контрагент",ТД.Источник));
		Парам.Вставить("Отображение",ОтображениеТаблицы.Список);       
		Если ЗначениеЗаполнено(ТД.ТипОборудования) Тогда
			Парам.Отбор.Вставить("ТипХолодильника",ТД.ТипОборудования);
		КонецЕсли;	
		//---АК POZM 
		
		
		РезультатВыбора = Неопределено;
       
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораНоменклатурыСделок",Парам,,,,, Новый ОписаниеОповещения("ПлановаяКомплектацияОборудованиеНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ТД", ТД)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяКомплектацияОборудованиеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТД = ДополнительныеПараметры.ТД;
	
	
	РезультатВыбора = Результат;		
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ТД.Оборудование = РезультатВыбора.Номенклатура;
		СтрокиОборудования = НоменклатураПоставщиков.НайтиСтроки(Новый Структура("Номенклатура",РезультатВыбора.Номенклатура));
		Если СтрокиОборудования.Количество()>0 Тогда
			ТД.ТипОборудования = СтрокиОборудования[0].ТипОборудования;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Функция ВыбратьНоменклатуруПоставщика(КонтрагентСсылка)
	
	Возврат НоменклатураПоставщиков.Выгрузить(Новый Структура("Контрагент",КонтрагентСсылка)).ВыгрузитьКолонку("Номенклатура");
	
КонецФункции


//---АК POZM 

//+++АК POZM 2018.06.09 ИП-00018375 
Процедура 	ЗаполнитьКэшНоменклатурыПоставщиков()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СделкаСПоставщиком.Контрагент
	               |ПОМЕСТИТЬ ПоставщикиОборудования
	               |ИЗ
	               |	Документ.СделкаСПоставщиком КАК СделкаСПоставщиком
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СделкаСПоставщиком.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныПоставщиков.Номенклатура,
	               |	ЦеныПоставщиков.Поставщик КАК Контрагент,
	               |	ЦеныПоставщиков.Номенклатура.ТипХолодильника КАК ТипОборудования
	               |ИЗ
	               |	ПоставщикиОборудования КАК ПоставщикиОборудования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	               |		ПО ПоставщикиОборудования.Контрагент = ЦеныПоставщиков.Поставщик";
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	ТЗ = Результат.Выгрузить();
	ЗначениеВРеквизитФормы(ТЗ,"НоменклатураПоставщиков");
КонецПроцедуры	


&НаКлиенте
Процедура ПлановаяКомплектацияПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Имя = "ПлановаяКомплектацияИсточник" Тогда
		ТД = Элементы.ПлановаяКомплектация.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТД.Источник) Тогда
			Если ТД.ОборудованиеБУ Тогда
				ТД.Источник = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			Иначе
				ТД.Источник = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры
//---АК POZM 

//+++АК POZM 2018.07.03 ИП-00018375.02 
&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Применить дату поступления для всех строк?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	УстановитьДатуПоступленияДляВсехСтрокПредкомплектации();
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуПоступленияДляВсехСтрокПредкомплектации()
	Для Каждого Стр Из Объект.ПлановаяКомплектация Цикл
		
		Стр.ДатаПоступления = ДатаПоступления;
		
	КонецЦикла;	
КонецПроцедуры	


&НаКлиенте
Процедура ПлановаяКомплектацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Для Каждого Стр Из Объект.ПлановаяКомплектация Цикл
		Если Не ЗначениеЗаполнено(Стр.ДатаПоступления) Тогда
			Стр.ДатаПоступления = ДатаПоступления;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

//+++АК POZM 2018.07.03 ИП-00018375.02 
&НаСервере
Процедура ПередЗаписьюСервер()
	Если Объект.ПлановаяКомплектация.Количество() > 0 И Не ЗначениеЗаполнено(Объект.ОтветственныйЗаПредкомплектацию) Тогда
		Объект.ОтветственныйЗаПредкомплектацию = ПараметрыСеанса.ТекущийПользователь;
	КонецЕСЛИ;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюСервер();
КонецПроцедуры
//---АК POZM 