Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Процедура УправлениеОтображнением()
	
	Если ВводОстатков Тогда
		СчетЗатрат = ПланыСчетов.Финансовый.СобственныеСредства;
		ЭлементыФормы.СчетЗатрат.ТолькоПросмотр		= Истина;
		ЭлементыФормы.НадписьСчетЗатрат.Доступность	= Ложь;
	КонецЕсли
	
КонецПроцедуры

Процедура УстановитьДоступностьЗаявки()
	
	ЭлементыФормы.ЗаявкаНаРасходованиеСредств.Доступность = (ЭтотОбъект.Организация = Справочники.Организации.Избенка);
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, );
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	УправлениеОтображнением();
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	УстановитьДоступностьЗаявки();
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры


Процедура ДействияФормыПерейтиВЖурналПроводок(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьДоступностьЗаявки();	
	
КонецПроцедуры

Процедура СчетЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Финансовый.ПолучитьФормуВыбора(,Элемент,);
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить("44.2");
	СписокОтбора.Добавить("44.3");
	СписокОтбора.Добавить("44.4");
	СписокОтбора.Добавить("68.1");
	СписокОтбора.Добавить("68.2");
	ФормаВыбора.ПланСчетовСписок.Отбор.Код.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Код.Значение      = СписокОтбора;
	ФормаВыбора.ПланСчетовСписок.Отбор.Код.Использование = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н = 1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт" + н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт" + н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоДт" + н]) = Тип("СправочникСсылка.Организации") Тогда
			СписокПараметров.Вставить("Организация", ЭтотОбъект["СубконтоДт" + н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	
КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Элемент)
	
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетЗатрат), 0, СчетЗатрат.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто;
		Если Флаг Тогда
			ЭлементыФормы["НадписьСубконтоДт"+К].Заголовок = СчетЗатрат.ВидыСубконто[К-1].ВидСубконто.Наименование;
		КонецЕсли;
		ЭлементыФормы["СубконтоДт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоДт" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры

Процедура СчетЗатратПриИзменении(Элемент)
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоДт1, ЭлементыФормы.СубконтоДт1,
	СубконтоДт2, ЭлементыФормы.СубконтоДт2,                                 
	СубконтоДт3, ЭлементыФормы.СубконтоДт3);

КонецПроцедуры

Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеСредствНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора(, Элемент);
	
	мОтбор = ФормаВыбора.ДокументСписок.Отбор;
	мОтбор.Организация.Установить(ЭтотОбъект.Организация);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	
	мОтбор.СтатьяДвиженияДенежныхСредств.Использование 	= Истина;
	мОтбор.СтатьяДвиженияДенежныхСредств.ВидСравнения 	= ВидСравнения.ВСписке;
	МассивСтатейДДС = ДопМодульСервер.ПолучитьСтатьиДДСОплатаЗП();
	СписокСтатейДДС = Новый СписокЗначений;
	СписокСтатейДДС.ЗагрузитьЗначения(МассивСтатейДДС);
	мОтбор.СтатьяДвиженияДенежныхСредств.Значение 		= СписокСтатейДДС;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.СтатьяДвиженияДенежныхСредств.Доступность = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


Процедура КоманднаяПанель1Заполнить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не заполнео поле Организация. Загрузка не возможна", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Очистить табличную часть перед загрузкой?", РежимДиалогаВопрос.ДаНетОтмена);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Начисления.Очистить();;
		КонецЕсли; 
	КонецЕсли; 
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Открыть файл с данными";
	ДиалогВыбораФайла.Фильтр    = "Файл Excel (*.xls)|*.xls";
	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	xl = Новый COMОбъект("Excel.Application");
	xl_документ = xl.Workbooks.Open(ДиалогВыбораФайла.ПолноеИмяФайла);
	xl_лист  = xl_документ.Sheets(1);
	
    ТЧ = Новый ОписаниеТипов ("Число",,,Новый КвалификаторыЧисла(15,2));
	
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |ГДЕ
	               |	СотрудникиОрганизаций.Организация = &Организация
	               |	И СотрудникиОрганизаций.Физлицо = &Физлицо";
	запрос.УстановитьПараметр("Организация",Организация);
	й=0;
	КоличествоПустых = 10;
	Пока КоличествоПустых>0 Цикл	
		й = й + 1;
		ФИО = СокрЛП(xl_лист.cells(й,1).value);
		Если НЕ ЗначениеЗаполнено(ФИО) Тогда
			КоличествоПустых = КоличествоПустых - 1;
			Продолжить;
		КонецЕсли;
		ФЛ = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО).Ссылка;
		Если ФЛ.Пустая() Тогда
			ПозицияПробела = Найти(ФИО," ");
			Фамилия = Лев(ФИО,ПозицияПробела-1);
			ИО = Сред(ФИО,ПозицияПробела+1);
			ПозицияПробела = Найти(ИО," ");
			Имя = Лев(ИО,ПозицияПробела-1);
			ФИ = Фамилия+ " "+Имя;
			ФЛ = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИ,Ложь).Ссылка;
			Если ФЛ.Пустая() Тогда
				//й = й + 1;
				Сообщить("Не найден ФЛ "+ФИО);
				Продолжить;
			КонецЕсли;			
		КонецЕсли;			
		запрос.УстановитьПараметр("Физлицо",ФЛ);
		результат = запрос.Выполнить().Выбрать();
		Если результат.Количество() = 0 Тогда
			Сообщить("Не найден сотрудник организации "+Организация+ " - "+ФИО);
			Продолжить;
		Иначе
			результат.Следующий();
			Сотрудник =  результат.Ссылка;
		КонецЕсли;
		
		Начислено 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,2).value));
		НДФЛ 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,3).value));
		ФСС 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,4).value));
		ПФСтраховая 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,5).value));
		ПФНакопительная 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,6).value));
		ФФОМС 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,7).value));
		ТФОМС 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,8).value));
		НСиПЗ 		= ТЧ.ПривестиЗначение(СокрЛП(xl_лист.cells(й,9).value));
		
		НоваяСтрока 				= Начисления.Добавить();	
		НоваяСтрока.Сотрудник 		= Сотрудник;
		НоваяСтрока.Физлицо			= ФЛ;
		НоваяСтрока.Результат		= Начислено;
		НоваяСтрока.НДФЛ			= НДФЛ;
		НоваяСтрока.ФСС				= ФСС;
		НоваяСтрока.ПФСтраховая		= ПФСтраховая;
		НоваяСтрока.ПФНакопительная = ПФНакопительная;
		НоваяСтрока.ФФОМС			= ФФОМС;
		НоваяСтрока.ТФОМС			= ТФОМС;
		НоваяСтрока.НСиПЗ			= НСиПЗ;
	КонецЦикла;
	xl.quit();
	Сообщить("Всё");

КонецПроцедуры

Процедура КоманднаяПанель1ДобавитьИзФайла(Кнопка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст="Текст";
	Фильтр = НСтр(Текст)+"(*.xls)|*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл для импорта";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		xl = Новый COMОбъект("Excel.Application");
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			xl_документ = xl.Workbooks.Open(ИмяФайла);
			xl_лист  = xl_документ.Sheets(1);
			
			й=0;
			КоличествоПустых = 10;
			Пока КоличествоПустых>0 Цикл	
				й = й + 1;
				ФИО	= СокрЛП(xl_лист.cells(й,1).value);
				Если НЕ ЗначениеЗаполнено(ФИО) Тогда
					КоличествоПустых = КоличествоПустых - 1;
					Продолжить;
				КонецЕсли;
				ФизЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(ФИО));
				Если ФизЛицо.Пустая() Тогда
					Сообщить("Не нашёл физлицо: "+ФИО+" в строке "+й);
				КонецЕсли;
				попытка
					Сумма 		= Число(СокрЛП(xl_лист.cells(й,2).value));
				исключение
					Сообщить("Не смог привести в числу значение "+xl_лист.cells(й,2).value+" в строке "+й);
				Конецпопытки;	
				
				НоваяСтрока = Начисления.Добавить();	
				НоваяСтрока.ФизЛицо 	=  ФизЛицо;
				Если ЗначениеЗаполнено(ФизЛицо) Тогда
					НоваяСтрока.Сотрудник=Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("ФизЛицо",ФизЛицо);
				КонецЕсли;	
				НоваяСтрока.Результат	=  Сумма;
			КонецЦикла;
		КонецЦикла;
		xl.quit();
		Сообщить("Всё");
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ТекущиеДанные.ФизЛицо = ТекущиеДанные.Сотрудник.ФизЛицо;
	Иначе
		ТекущиеДанные.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

//+++АК sils 08.06.2018 ИП-00018876
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Начисление зарплаты работникам организаций");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
КонецПроцедуры
