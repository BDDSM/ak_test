
Процедура ВывестиТабДокумент()
	
	СхемаКомпоновкиДанных = Отчеты.ОтчетПоНаличиюСогласованногоАктаСверкиЗаПериод_.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	мНастройкиОтчета = СхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
	
	//
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеДляФормирования", Объект.ДанныеОтчета.Выгрузить());
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, мНастройкиОтчета);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ТабДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Параметры.Свойство("ДанныеОтчета") Тогда
		МассивСтруктур = ЭтаФорма.Параметры.ДанныеОтчета;
		Для Каждого СтруктураЗначений Из МассивСтруктур Цикл
			НоваяСтрока = Объект.ДанныеОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗначений);
		КонецЦикла;
	КонецЕсли;

	//
	ВывестиТабДокумент();
	
КонецПроцедуры


Функция ПолучитьТекущиеАктыСверки(ТолькоНеобработанные = Ложь)
	
	Запрос = Новый Запрос;
	Если ТолькоНеобработанные Тогда
		ТаблицаОтчета = Объект.ДанныеОтчета.Выгрузить(Новый Структура("Обработана", Ложь));
	Иначе
		ТаблицаОтчета = Объект.ДанныеОтчета.Выгрузить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаОтчета"	, ТаблицаОтчета);
	ВремТаблица = ТаблицаОтчета.Скопировать(, "Организация");
	ВремТаблица.Свернуть("Организация");
	Запрос.УстановитьПараметр("МассивОрг"		, ВремТаблица.ВыгрузитьКолонку("Организация"));
	ВремТаблица = ТаблицаОтчета.Скопировать(, "Контрагент");
	ВремТаблица.Свернуть("Контрагент");
	Запрос.УстановитьПараметр("МассивКонтр"		, ВремТаблица.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("ДатаОкончания"	, Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("Счет"			, Объект.Счет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтчета.Организация КАК Организация,
	|	ТаблицаОтчета.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТТаблицаОтчета
	|ИЗ
	|	&ТаблицаОтчета КАК ТаблицаОтчета
	|ГДЕ
	|	ТаблицаОтчета.АктСверкиФин = ЗНАЧЕНИЕ(Документ.АктСверкиВзаиморасчетов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧСписокСчетов.Ссылка.Организация КАК Организация,
	|	ТЧСписокСчетов.Ссылка.Контрагент КАК Контрагент,
	|	ТЧСписокСчетов.Ссылка КАК Ссылка,
	|	ТЧСписокСчетов.Ссылка.Дата КАК Дата,
	|	ТЧСписокСчетов.Ссылка.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ АктыСверки_После__
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.СписокСчетов КАК ТЧСписокСчетов
	|ГДЕ
	|	ТЧСписокСчетов.Счет В ИЕРАРХИИ(&Счет)
	|	И ТЧСписокСчетов.УчаствуетВРасчетах
	|	И НЕ ТЧСписокСчетов.Ссылка.ДатаОкончания < &ДатаОкончания
	|	И НЕ ТЧСписокСчетов.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыСверки_После__.Организация КАК Организация,
	|	АктыСверки_После__.Контрагент КАК Контрагент,
	|	АктыСверки_После__.Ссылка КАК Ссылка,
	|	АктыСверки_После__.Дата КАК Дата
	|ПОМЕСТИТЬ АктыСверки_После_
	|ИЗ
	|	АктыСверки_После__ КАК АктыСверки_После__
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктыСверки_После__.Организация КАК Организация,
	|			АктыСверки_После__.Контрагент КАК Контрагент,
	|			МИНИМУМ(АктыСверки_После__.ДатаОкончания) КАК ДатаОкончания
	|		ИЗ
	|			АктыСверки_После__ КАК АктыСверки_После__
	|		
	|		СГРУППИРОВАТЬ ПО
	|			АктыСверки_После__.Организация,
	|			АктыСверки_После__.Контрагент) КАК МаксДатыОкончания
	|		ПО (МаксДатыОкончания.Организация = АктыСверки_После__.Организация)
	|			И (МаксДатыОкончания.Контрагент = АктыСверки_После__.Контрагент)
	|			И (МаксДатыОкончания.ДатаОкончания = АктыСверки_После__.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыСверки_После_.Организация КАК Организация,
	|	АктыСверки_После_.Контрагент КАК Контрагент,
	|	АктыСверки_После_.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ АктыСверки_После
	|ИЗ
	|	АктыСверки_После_ КАК АктыСверки_После_
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктыСверки_После_.Организация КАК Организация,
	|			АктыСверки_После_.Контрагент КАК Контрагент,
	|			МАКСИМУМ(АктыСверки_После_.Дата) КАК Дата
	|		ИЗ
	|			АктыСверки_После_ КАК АктыСверки_После_
	|		
	|		СГРУППИРОВАТЬ ПО
	|			АктыСверки_После_.Организация,
	|			АктыСверки_После_.Контрагент) КАК МаксДаты
	|		ПО (МаксДаты.Организация = АктыСверки_После_.Организация)
	|			И (МаксДаты.Контрагент = АктыСверки_После_.Контрагент)
	|			И (МаксДаты.Дата = АктыСверки_После_.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыСверкиДо.Организация КАК Организация,
	|	АктыСверкиДо.Контрагент КАК Контрагент,
	|	МАКСИМУМ(АктыСверкиДо.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТАктыСверкиДо
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧСписокСчетов.Ссылка.Организация КАК Организация,
	|		ТЧСписокСчетов.Ссылка.Контрагент КАК Контрагент,
	|		ТЧСписокСчетов.Ссылка.ДатаОкончания КАК ДатаОкончания
	|	ИЗ
	|		Документ.АктСверкиВзаиморасчетов.СписокСчетов КАК ТЧСписокСчетов
	|	ГДЕ
	|		ТЧСписокСчетов.Счет В ИЕРАРХИИ(&Счет)
	|		И ТЧСписокСчетов.УчаствуетВРасчетах
	|		И ТЧСписокСчетов.Ссылка.ДатаОкончания < &ДатаОкончания
	|		И ТЧСписокСчетов.Ссылка.СверкаСогласована
	|		И НЕ ТЧСписокСчетов.Ссылка.ПометкаУдаления) КАК АктыСверкиДо
	|
	|СГРУППИРОВАТЬ ПО
	|	АктыСверкиДо.Организация,
	|	АктыСверкиДо.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТаблицаОтчета.Организация КАК Организация,
	|	ВТТаблицаОтчета.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(АктСверкиВзаиморасчетов.Ссылка, ЗНАЧЕНИЕ(Документ.АктСверкиВзаиморасчетов.ПустаяСсылка)) КАК АктСверки,
	|	ЕСТЬNULL(ВТАктыСверкиДо.ДатаОкончания, ЕСТЬNULL(ПервыеДаты.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПоследняяДатаОкончания
	|ИЗ
	|	ВТТаблицаОтчета КАК ВТТаблицаОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктыСверки_После КАК АктСверкиВзаиморасчетов
	|		ПО (АктСверкиВзаиморасчетов.Организация = ВТТаблицаОтчета.Организация)
	|			И (АктСверкиВзаиморасчетов.Контрагент = ВТТаблицаОтчета.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктыСверкиДо КАК ВТАктыСверкиДо
	|		ПО (ВТАктыСверкиДо.Организация = ВТТаблицаОтчета.Организация)
	|			И (ВТАктыСверкиДо.Контрагент = ВТТаблицаОтчета.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
	|			ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
	|			МИНИМУМ(ФинансовыйОстаткиИОбороты.Период) КАК Период
	|		ИЗ
	|			РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
	|					,
	|					,
	|					Регистратор,
	|					,
	|					Счет В ИЕРАРХИИ (&Счет),
	|					,
	|					Субконто1 В (&МассивОрг)
	|						И Субконто2 В (&МассивКонтр)) КАК ФинансовыйОстаткиИОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФинансовыйОстаткиИОбороты.Субконто1,
	|			ФинансовыйОстаткиИОбороты.Субконто2) КАК ПервыеДаты
	|		ПО (ПервыеДаты.Организация = ВТТаблицаОтчета.Организация)
	|			И (ПервыеДаты.Контрагент = ВТТаблицаОтчета.Контрагент)";
	
	ТекущиеАктыСверки = Запрос.Выполнить().Выгрузить();
	
	//
	МассивСтруктур = Новый Массив;
	ПустойАкт = Документы.АктСверкиВзаиморасчетов.ПустаяСсылка();
	СтруктураОтбора = Новый Структура("Организация, Контрагент");
	Для Каждого СтрокаТЧ Из ТаблицаОтчета Цикл
		
		ТекОрганизация 	= СтрокаТЧ.Организация;
		ТекКонтрагент 	= СтрокаТЧ.Контрагент;
		
		СтруктураДляМассива = Новый Структура;
		СтруктураДляМассива.Вставить("Организация"	, ТекОрганизация);
		СтруктураДляМассива.Вставить("Контрагент"	, ТекКонтрагент);
		СтруктураДляМассива.Вставить("АктСверкиФин"	, СтрокаТЧ.АктСверкиФин);
		СтруктураДляМассива.Вставить("ПоследнийАкт"	, СтрокаТЧ.ПоследнийАктФин);
		СтруктураДляМассива.Вставить("АктСверкиСоздать", ПустойАкт);
		
		Если СтрокаТЧ.АктСверкиФин.Пустая() Тогда
			СтруктураОтбора.Организация = ТекОрганизация;
			СтруктураОтбора.Контрагент 	= ТекКонтрагент;
			СтрокиАктов = ТекущиеАктыСверки.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаАкта Из СтрокиАктов Цикл
				СтруктураДляМассива.Вставить("АктСверкиСоздать"			, СтрокаАкта.АктСверки);
				СтруктураДляМассива.Вставить("ПоследняяДатаОкончания"	, СтрокаАкта.ПоследняяДатаОкончания);
			КонецЦикла;
		КонецЕсли;
		МассивСтруктур.Добавить(СтруктураДляМассива);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаКлиенте
Процедура ПакетнаяПечать(Команда)
	
	Если Объект.ДанныеОтчета.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для печати!");
		Возврат;
	КонецЕсли;
	
	Если Этаформа.Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала надо записать документ!");
		Возврат;
	КонецЕсли;
	
	МассивСтруктур = ПолучитьТекущиеАктыСверки();
	
	//
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивСтруктур"	, МассивСтруктур);
	СтруктураПараметров.Вставить("ДатаОкончания"	, Объект.ДатаОкончания);
	
	ОткрытьФорму("Отчет.ОтчетПоНаличиюСогласованногоАктаСверкиЗаПериод_.Форма.ФормаПечати", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетнаяПечатьНеобработанные(Команда)
	
	Если Объект.ДанныеОтчета.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для печати!");
		Возврат;
	КонецЕсли;
	
	Если Этаформа.Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала надо записать документ!");
		Возврат;
	КонецЕсли;
	
	МассивСтруктур = ПолучитьТекущиеАктыСверки(Истина);
	
	//
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивСтруктур"	, МассивСтруктур);
	СтруктураПараметров.Вставить("ДатаОкончания"	, Объект.ДатаОкончания);
	
	ОткрытьФорму("Отчет.ОтчетПоНаличиюСогласованногоАктаСверкиЗаПериод_.Форма.ФормаПечати", СтруктураПараметров);
	
КонецПроцедуры
