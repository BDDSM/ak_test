
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФУНКЦИИ И ПРОЦЕДУРЫ МОДУЛЯ МЕНЕДЖЕРА

//Стандартная процедура модуля менеджера для заполнения ДанныхВыбора
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	//Получение данных выбора 
	Если Параметры.Свойство("ДополнительныеПараметры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ТекстПоиска) Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры = "ПодборДляТехнологовПоставщик" Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Таб_Поставщики.Поставщик КАК Ссылка,
			|	ВЫРАЗИТЬ(Таб_Поставщики.Поставщик.Наименование КАК СТРОКА(500)) КАК Наименование,
			|	Таб_Поставщики.Поставщик.Код КАК Код
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Номенклатура,
			|		ДоступныеХарактеристики.Объект КАК Характеристика
			|	ИЗ
			|		(ВЫБРАТЬ
			|			СоответствиеОбъектРольСрезПоследних.Объект КАК Характеристика
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейСоставРоли.Ссылка
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				РолиПользователейТипыРолей.Ссылка.Родитель
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				ИСТИНА
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейТипыРолей.Ссылка.Родитель) КАК Таб_ФункциональныеРоли
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|						&Период,
			|						ТипРолиID = ""TechnologPoKachestvu""
			|							И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследних
			|				ПО Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя) КАК Таб_ДоступныеХарактеристики
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДоступныеХарактеристики
			|			ПО Таб_ДоступныеХарактеристики.Характеристика = ДоступныеХарактеристики.Объект
			|				И (ДоступныеХарактеристики.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)
			|	ГДЕ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец,
			|		ДоступныеХарактеристики.Объект
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец,
			|		ДоступныеХарактеристики.Объект
			|	ИЗ
			|		(ВЫБРАТЬ
			|			СоответствиеОбъектРольСрезПоследних.Объект КАК Контрагент
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейСоставРоли.Ссылка
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				РолиПользователейТипыРолей.Ссылка.Родитель
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				ИСТИНА
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейТипыРолей.Ссылка.Родитель) КАК Таб_ФункциональныеРоли
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|						&Период,
			|						ТипРолиID = ""TechnologPoKachestvu""
			|							И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследних
			|				ПО Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя) КАК Таб_ДоступныеКонтрагенты
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДоступныеХарактеристики
			|			ПО Таб_ДоступныеКонтрагенты.Контрагент = ДоступныеХарактеристики.Значение
			|				И (ДоступныеХарактеристики.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)
			|	ГДЕ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец,
			|		ДоступныеХарактеристики.Объект) КАК Таб_ДоступнаяНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
			|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
			|			ЦеныПоставщиковСрезПоследних.Поставщик КАК Поставщик
			|		ИЗ
			|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(&Период, ) КАК ЦеныПоставщиковСрезПоследних
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЦеныПоставщиковСрезПоследних.Номенклатура,
			|			ЦеныПоставщиковСрезПоследних.Характеристика,
			|			ЦеныПоставщиковСрезПоследних.Поставщик) КАК Таб_Поставщики
			|		ПО Таб_ДоступнаяНоменклатура.Номенклатура = Таб_Поставщики.Номенклатура
			|			И Таб_ДоступнаяНоменклатура.Характеристика = Таб_Поставщики.Характеристика
			|ГДЕ
			|	Таб_Поставщики.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	И Таб_Поставщики.Поставщик.Наименование ПОДОБНО &Наименование
			|	И НЕ Таб_Поставщики.Поставщик.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ЦеныПоставщиковСрезПоследних.Поставщик,
			|	ЦеныПоставщиковСрезПоследних.Поставщик.Наименование,
			|	ЦеныПоставщиковСрезПоследних.Поставщик.Код
			|ИЗ
			|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
			|			&Период,
			|			НЕ &ЭтоТовары
			|				И &ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|				И ВЫБОР
			|					КОГДА &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
			|						ТОГДА Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
			|					ИНАЧЕ Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			|				КОНЕЦ
			|				И Поставщик.Наименование ПОДОБНО &Наименование) КАК ЦеныПоставщиковСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныПоставщиковСрезПоследних.Поставщик,
			|	ЦеныПоставщиковСрезПоследних.Поставщик.Наименование,
			|	ЦеныПоставщиковСрезПоследних.Поставщик.Код
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			Запрос.УстановитьПараметр("Период", Параметры.Период);
			Запрос.УстановитьПараметр("Наименование", "%" + Параметры.ТекстПоиска + "%");
			Запрос.УстановитьПараметр("ОтборПоПользователю", Параметры.ОтборПоПользователю);
			Запрос.УстановитьПараметр("ТекущийПользователь", Параметры.ТекущийПользователь);
			Запрос.УстановитьПараметр("ТипРолиТехнолог",  Перечисления.ТипыРолейПользователейМОС.Технолог);
			Запрос.УстановитьПараметр("ВидНоменклатуры", Параметры.ВидНоменклатуры);
			Запрос.УстановитьПараметр("ЭтоТовары", Параметры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар);
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ДанныеВыбора.Добавить(Выборка.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.ДополнительныеПараметры = "ПодборДляТехнологовНоменклатура" Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Таб_ДоступнаяНоменклатура.Номенклатура КАК Ссылка,
			|	Таб_ДоступнаяНоменклатура.Номенклатура.Наименование КАК Наименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец КАК Номенклатура,
			|		ДоступныеХарактеристики.Объект КАК Характеристика
			|	ИЗ
			|		(ВЫБРАТЬ
			|			СоответствиеОбъектРольСрезПоследних.Объект КАК Характеристика
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейСоставРоли.Ссылка
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				РолиПользователейТипыРолей.Ссылка.Родитель
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				ИСТИНА
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейТипыРолей.Ссылка.Родитель) КАК Таб_ФункциональныеРоли
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|						&Период,
			|						ТипРолиID = ""TechnologPoKachestvu""
			|							И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследних
			|				ПО Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя) КАК Таб_ДоступныеХарактеристики
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДоступныеХарактеристики
			|			ПО Таб_ДоступныеХарактеристики.Характеристика = ДоступныеХарактеристики.Объект
			|				И (ДоступныеХарактеристики.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)
			|	ГДЕ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Наименование ПОДОБНО &Наименование
			|		И ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец,
			|		ДоступныеХарактеристики.Объект
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец,
			|		ДоступныеХарактеристики.Объект
			|	ИЗ
			|		(ВЫБРАТЬ
			|			СоответствиеОбъектРольСрезПоследних.Объект КАК Контрагент
			|		ИЗ
			|			(ВЫБРАТЬ
			|				РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейСоставРоли.Ссылка
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				РолиПользователейТипыРолей.Ссылка.Родитель
			|			ИЗ
			|				Справочник.Пользователи КАК Пользователи
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			|						ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
			|					ПО Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
			|			ГДЕ
			|				ИСТИНА
			|				И ВЫБОР
			|						КОГДА &ОтборПоПользователю
			|							ТОГДА Пользователи.Ссылка = &ТекущийПользователь
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|				И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				РолиПользователейТипыРолей.Ссылка.Родитель) КАК Таб_ФункциональныеРоли
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|						&Период,
			|						ТипРолиID = ""TechnologPoKachestvu""
			|							И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследних
			|				ПО Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя) КАК Таб_ДоступныеКонтрагенты
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДоступныеХарактеристики
			|			ПО Таб_ДоступныеКонтрагенты.Контрагент = ДоступныеХарактеристики.Значение
			|				И (ДоступныеХарактеристики.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)
			|	ГДЕ
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец.Наименование ПОДОБНО &Наименование
			|		И ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец,
			|		ДоступныеХарактеристики.Объект) КАК Таб_ДоступнаяНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
			|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
			|			ЦеныПоставщиковСрезПоследних.Поставщик КАК Поставщик
			|		ИЗ
			|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
			|					&Период,
			|					ВЫБОР
			|						КОГДА &ОтборПоПоставщику = ЗНАЧЕНИЕ(СПРАВОЧНИК.КОНТРАГЕНТЫ.ПУСТАЯССЫЛКА)
			|							ТОГДА ИСТИНА
			|						ИНАЧЕ Поставщик = &ОтборПоПоставщику
			|					КОНЕЦ) КАК ЦеныПоставщиковСрезПоследних
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЦеныПоставщиковСрезПоследних.Номенклатура,
			|			ЦеныПоставщиковСрезПоследних.Характеристика,
			|			ЦеныПоставщиковСрезПоследних.Поставщик) КАК Таб_Поставщики
			|		ПО Таб_ДоступнаяНоменклатура.Номенклатура = Таб_Поставщики.Номенклатура
			|			И Таб_ДоступнаяНоменклатура.Характеристика = Таб_Поставщики.Характеристика
			|ГДЕ
			|	Таб_Поставщики.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	И НЕ Таб_Поставщики.Поставщик.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	Таб_ДоступнаяНоменклатура.Номенклатура,
			|	Таб_ДоступнаяНоменклатура.Номенклатура.Наименование
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Таб_Характеристики.Ссылка,
			|	Таб_Характеристики.Наименование
			|ИЗ
			|	(ВЫБРАТЬ
			|		Номенклатура.Ссылка КАК Ссылка,
			|		Номенклатура.Наименование КАК Наименование,
			|		Номенклатура.Код КАК Код,
			|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
			|	ИЗ
			|		Справочник.Номенклатура КАК Номенклатура
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|			ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
			|				И (ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ)
			|				И (ХарактеристикиНоменклатуры.Владелец.НеВедетсяУчетПоХарактеристикам = ЛОЖЬ)
			|	ГДЕ
			|		ВЫБОР
			|				КОГДА &ЭтоТовары
			|					ТОГДА ЛОЖЬ
			|				ИНАЧЕ ВЫБОР
			|							КОГДА &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
			|								ТОГДА Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
			|							ИНАЧЕ Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			|						КОНЕЦ
			|						И НЕ Номенклатура.ПометкаУдаления
			|			КОНЕЦ) КАК Таб_Характеристики
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
			|			ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика,
			|			ЦеныПоставщиковСрезПоследних.Поставщик КАК Поставщик
			|		ИЗ
			|			РегистрСведений.ЦеныПоставщиков.СрезПоследних(
			|					&Период,
			|					ВЫБОР
			|						КОГДА &ОтборПоПоставщику = ЗНАЧЕНИЕ(СПРАВОЧНИК.КОНТРАГЕНТЫ.ПУСТАЯССЫЛКА)
			|							ТОГДА ВЫБОР
			|									КОГДА &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
			|										ТОГДА Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
			|									КОГДА &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Оборудование)
			|										ТОГДА Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			|									ИНАЧЕ ЛОЖЬ
			|								КОНЕЦ
			|						ИНАЧЕ Поставщик = &ОтборПоПоставщику
			|					КОНЕЦ) КАК ЦеныПоставщиковСрезПоследних
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЦеныПоставщиковСрезПоследних.Номенклатура,
			|			ЦеныПоставщиковСрезПоследних.Характеристика,
			|			ЦеныПоставщиковСрезПоследних.Поставщик) КАК Таб_Поставщики
			|		ПО Таб_Характеристики.Ссылка = Таб_Поставщики.Номенклатура
			|ГДЕ
			|	Таб_Поставщики.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	И НЕ Таб_Поставщики.Поставщик.ПометкаУдаления
			|	И Таб_Характеристики.Наименование ПОДОБНО &Наименование
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование";
			
			Запрос.УстановитьПараметр("Период", Параметры.Период);
			Запрос.УстановитьПараметр("Наименование", "%" + Параметры.ТекстПоиска + "%");
			Запрос.УстановитьПараметр("ОтборПоПользователю", Параметры.ОтборПоПользователю);
			Запрос.УстановитьПараметр("ТекущийПользователь", Параметры.ТекущийПользователь);
			Запрос.УстановитьПараметр("ОтборПоПоставщику", Параметры.Поставщик);
			Запрос.УстановитьПараметр("ТипРолиТехнолог", Перечисления.ТипыРолейПользователейМОС.Технолог);
			Запрос.УстановитьПараметр("ВидНоменклатуры", Параметры.ВидНоменклатуры);
			Запрос.УстановитьПараметр("ЭтоТовары", Параметры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар);
			

			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ДанныеВыбора.Добавить(Выборка.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОЧТОЙ

// Процедура предназначена для отправки письма с запросом руководителю для установки новых цен поставщиков
//
// Параметры:
//  ДокументСсылка       - <Тип.ДокументСсылка.ИзменениеЗакупочныхЦен>
//  СтруктураПараметров  - <Тип.Структура> - Содержит структуру дополнительных параметров для отправки
//
Процедура ОтправитьЗапросРуководителюНаИзменениеЦен(СтруктураПараметров) Экспорт

	 СтруктураПисьма = ПолучитьСтруктуруПисьма();
	 
	 СтруктураПисьма.Вставить("ДокументСсылка", СтруктураПараметров.ДокументСсылка);
	 СтруктураПисьма.Вставить("СтруктураПараметров", СтруктураПараметров);
	 
	 ЗаполнитьСтруктуруПисьма(СтруктураПисьма);
	 
	 Если СтруктураПараметров.Свойство("ПосмотретьОтчет") И СтруктураПараметров.ПосмотретьОтчет Тогда
		СтруктураПараметров.Вставить("ТекстHTML", СтруктураПисьма.Текст);
		Возврат;
	 КонецЕсли;
	 
	 ОтправитьПисьмо(СтруктураПисьма);
	 
	 СтруктураПараметров.Вставить("ОшибкаОтправки", СтруктураПисьма.ОшибкаОтправки);
	 СтруктураПараметров.Вставить("ОписаниеОшибки", СтруктураПисьма.ОписаниеОшибки);
	 
КонецПроцедуры // ОтправитьЗапросРуководителюНаИзменениеЦен()

// Функция Формирует основную структуру письма
//
// Возвращаемое значение:
//   <Тип.Стуктура>   - Сформированная структура данных
//
Функция ПолучитьСтруктуруПисьма() Экспорт
	
	Возврат Новый Структура("Отправитель, Получатели, Тема, Текст, Вложения, СтруктураШапки, СтруктураТаблиц");

КонецФункции // ПолучитьСтруктуруПисьма()

// Заполнение основных значений структуры письма в зависимсти
// от назначения
//
// Параметры:
//  СтруктураПисьма  - <Тип.Стуктура> - входящая структура письма
//
Процедура ЗаполнитьОсновныеЗначенияСтруктурыПисьма(СтруктураПисьма)

	
КонецПроцедуры // ЗаполнитьОсновныеЗначенияСтруктурыПисьма()

// Процедура заполняет структуру письма данными перед отправкой
// Параметры:
//  СтруктураПисьма  - <Тип.Структура> -  Структура письма для заполнения
//
Процедура ЗаполнитьСтруктуруПисьма(СтруктураПисьма)

	СтруктураПисьма.Отправитель = ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru");  
    СтруктураПисьма.Получатели  = ПолучитьСтрокуЭлектронныхАдресовРуководителей(СтруктураПисьма.ДокументСсылка);
	СтруктураПисьма.Тема        = "Запрос " + СтруктураПисьма.ДокументСсылка; 
	СтруктураПисьма.Текст       = СформироватьТекстПисьмаИзменениеЗакупочныхЦен(СтруктураПисьма);
	
КонецПроцедуры // ЗаполнитьСтруктуруПисьма()

// Функция возвращает ссылку на учетную запись пользователя по реккизиту "Логин"
//
// Возвращаемое значение:
//   <Тип.СправочникСсылка.УчетныеЗаписиЭлектроннойПочты>  
//
Функция ПолучитьУчетнуюЗаписьДляРассылки(Адрес) Экспорт
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("Логин", Адрес); 
	
КонецФункции

// Функция возвращает массив электронных адресов руководителей
//
// Возвращаемое значение:
//   <Тип.Строка>  - Строка, с разделителем адресов ";" 
//
Функция ПолучитьСтрокуЭлектронныхАдресовРуководителей(ДокументСсылка) Экспорт
	
	СтрокаАдресов = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РуководителиИзменениеЦен.Сотрудник,
	|	РуководителиИзменениеЦен.ЭлектронныйАдрес КАК ЭлектронныйАдрес
	|ИЗ
	|	Документ.ИзменениеЗакупочныхЦен КАК ИзменениеЗакупочныхЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РуководителиИзменениеЦен КАК РуководителиИзменениеЦен
	|		ПО ИзменениеЗакупочныхЦен.ВидНоменклатуры = РуководителиИзменениеЦен.ВидНоменклатуры
	|ГДЕ
	|	РуководителиИзменениеЦен.ПравоПодтверждения
	|	И ИзменениеЗакупочныхЦен.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаАдресов = СтрокаАдресов + СокрЛП(Выборка.ЭлектронныйАдрес) + ";" ;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокаАдресов;
	
КонецФункции

// Функция возвращает сгенерировнный текст письма в HTML формате
//
// Возвращаемое значение:
//   <Тип.Строка>  - текст HTML
//
Функция СформироватьТекстПисьмаИзменениеЗакупочныхЦен(СтруктураПисьма) Экспорт
	
	Если СтруктураПисьма.СтруктураПараметров.Свойство("ТолькоОтклоненные")
		И СтруктураПисьма.СтруктураПараметров.ТолькоОтклоненные Тогда
		ТолькоОтклоненные = Истина;
	Иначе 
		ТолькоОтклоненные = Ложь;
	КонецЕсли;

	//Внешние наборы данных
	ДанныеSQL = ПолучитьДанныеПоРасчетуПотерьSQL(СтруктураПисьма.ДокументСсылка.Товары.Выгрузить(), 
					Новый Структура("Дата, ТолькоОтклоненные, ВидНоменклатуры", СтруктураПисьма.СтруктураПараметров.Дата, ТолькоОтклоненные, СтруктураПисьма.СтруктураПараметров.ВидНоменклатуры));
	
	//Заполнение настроек		
	Если ДанныеSQL.Итог("СокрВариантОтчета") > 0 И СтруктураПисьма.СтруктураПараметров.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар Тогда
		ИмяВарианта = "Основной";
	ИначеЕсли  СтруктураПисьма.СтруктураПараметров.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		ИмяВарианта = "Упаковка";
	ИначеЕсли СтруктураПисьма.СтруктураПараметров.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		ИмяВарианта = "Оборудование";	
	Иначе
		ИмяВарианта = "Сокращенный";
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("МакетТаблиц");
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта).Настройки;
	
	//Заполнение параметров
	НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("Ссылка").Значение = СтруктураПисьма.ДокументСсылка;
	
	//Установка отборов
	Если ТолькоОтклоненные Тогда
	
		ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыПодтвержденияИзмененияЦен.Отклонено;
		ЭлементОтбора.Использование  = Истина;

	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанных")); 

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("ДанныеSQL", ДанныеSQL)); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ТабДок = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Запись в HTML файл
	
	МассивДляУдаления = Новый Массив();
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	МассивДляУдаления.Добавить(ИмяФайла);
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();	
	
	ТекстовыйДокумент = Неопределено;
	
	//Заполнение кнопок для согласования

	Если СтруктураПисьма.СтруктураПараметров.Свойство("ПосмотретьОтчет")
		И СтруктураПисьма.СтруктураПараметров.ПосмотретьОтчет Тогда
		
		ТекстКнопок  = "";
		
	Иначе
		
		ПараметрыКнопок = Новый Структура("НомерЗаявки, ID_MESSAGE, TYPE_MESSAGE, GUID_Заявки",	СтруктураПисьма.ДокументСсылка.Номер, 
		Строка(Новый УникальныйИдентификатор()), 9, Строка(СтруктураПисьма.ДокументСсылка.УникальныйИдентификатор())); 
		
		СтруктураПисьма.Вставить("ПараметрыКнопок", ПараметрыКнопок);
		
		ТекстКнопок  = ПолучитьОформлениеКнопок(ПараметрыКнопок);
		
	КонецЕсли;

	//Дополнительный комментарий
	УдалитьТекстТаблицаВРазработке = "<BR>* - дополнительные колонки для проверки расчетных показателей (после тестирования будут скрыты).";
	УдалитьТекстТаблицаВРазработке = "<BR>"; 
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "</BODY>", УдалитьТекстТаблицаВРазработке + ТекстКнопок + Символы.ПС + "</BODY>");  
	
	//Заменить кодировку, поскольку при открытии в некоторых старых браузерах некоректно отображаются символы
	ТекстHTML = СтрЗаменить(ТекстHTML,"CHARSET=utf-8", "CHARSET=windows-1251"); 
	
	//Удаление временных файлов
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Возврат ТекстHTML;
	
КонецФункции

// Функция возвращает сгенерировнный текст кнопок для согласования в HTML формате
//
// Возвращаемое значение:
//   <Тип.Строка>  - текст HTML
//
Функция ПолучитьОформлениеКнопок(СтруктураПараметров)
	
	ТекстCSS = 
	"
	|<P><P>
	|
	|<style>
	|
	|a.Agree{
	|  color: #fff; /* цвет текста */
	|  text-decoration: none; /* убирать подчёркивание у ссылок */
	|  user-select: none; /* убирать выделение текста */
	|  background: rgb(46,139,87); /* фон кнопки */
	|  padding: .4em 1.5em; /* отступ от текста */
	|  outline: none; /* убирать контур в Mozilla */
	|} 
	|
	|a.Decline{
	|  color: #fff; /* цвет текста */
	|  text-decoration: none; /* убирать подчёркивание у ссылок */
	|  user-select: none; /* убирать выделение текста */
	|  background: rgb(212,75,56); /* фон кнопки */
	|  padding: .4em 1.5em; /* отступ от текста */
	|  outline: none; /* убирать контур в Mozilla */
	|} 
	|
	|a.Agree:hover { background: rgb(60,179,113); } /* при наведении курсора мышки */
	|a.Agree:active { background: rgb(0,100,0); } /* при нажатии */
	|
	|a.Decline:hover { background: rgb(232,95,76); } /* при наведении курсора мышки */
	|a.Decline:active { background: rgb(152,15,0); } /* при нажатии */
	|
	|</style>
	|
	|<a href=""#Agree"" class=""Agree"">Согласовать</a> 
	|<a href=""#Decline"" class=""Decline"">Отклонить</a> 
	|
	|</P></P>";
	
	пТекстСсылкиНаКнопкуAgree   = "mailto:vkusvill.333@gmail.com?reply-to=vkusvill.333@gmail.com&subject=Согласование запроса на изменение цен №" + СтруктураПараметров.НомерЗаявки + 

								  "&body=GUID%20" + СтруктураПараметров.GUID_Заявки + 
								  "%20ID_MESSAGE%20" + СтруктураПараметров.ID_MESSAGE + 
							      "%20TYPE_MESSAGE%20" + СтруктураПараметров.TYPE_MESSAGE + "%20Акцептировано"+"%0D%0A%0D%0AКомментарий{ }";
	
	пТекстСсылкиНаКнопкуDecline	= "mailto:vkusvill.333@gmail.com?reply-to=vkusvill.333@gmail.com&subject=Согласование запроса на изменение цен №" + СтруктураПараметров.НомерЗаявки + 

								  "&body=GUID%20" + СтруктураПараметров.GUID_Заявки + 
								  "%20ID_MESSAGE%20" + СтруктураПараметров.ID_MESSAGE + 
								  "%20TYPE_MESSAGE%20" + СтруктураПараметров.TYPE_MESSAGE + "%20Отклонено"+"%0D%0A%0D%0AКомментарий{ }";
	
	ТекстCSS  = СтрЗаменить(ТекстCSS, "#Agree", пТекстСсылкиНаКнопкуAgree); 
	ТекстCSS  = СтрЗаменить(ТекстCSS, "#Decline", пТекстСсылкиНаКнопкуDecline); 
	
	Возврат ТекстCSS;
	
КонецФункции //ПолучитьОформлениеКнопок()

// Функция возвращает сгенерировнный текст кнопок для согласования в HTML формате
//
// Возвращаемое значение:
//   <Тип.Строка>  - текст HTML
//
Функция РазработкаПолучитьОформлениеКнопок(СтруктураПараметров)
	
	ТекстCSS =	
	"<P>
    |<textarea id=""comment""; placeholder=""Введите комментарий!"" cols=""60"" rows=""3"" maxlength=""150"" autofocus></textarea>
	|</P>
	|
	|<script>
	|function isEmpty(str) {
	|  if (str.trim() == '') 
	|    return true;
	|    
	|  return false;
	|}
	|
	|function getComment() {
	|  
	|  text = document.getElementById(""comment"").value;
	|
	|  if (isEmpty(text) == true) {
	|  return """";
	|  }
	|  else { 
	|  return '%0D%0A%0D%0Acomment{' + text + '}';
	|  }
	|}
	|
	|</script>
	|
	|<P></P>
	|
	|<style>
	|
	|a.Agree{
	|  color: #fff; /* цвет текста */
	|  text-decoration: none; /* убирать подчёркивание у ссылок */
	|  user-select: none; /* убирать выделение текста */
	|  background: rgb(46,139,87); /* фон кнопки */
	|  padding: .4em 1.5em; /* отступ от текста */
	|  outline: none; /* убирать контур в Mozilla */
	|} 
	|
	|a.Decline{
	|  color: #fff; /* цвет текста */
	|  text-decoration: none; /* убирать подчёркивание у ссылок */
	|  user-select: none; /* убирать выделение текста */
	|  background: rgb(212,75,56); /* фон кнопки */
	|  padding: .4em 1.5em; /* отступ от текста */
	|  outline: none; /* убирать контур в Mozilla */
	|} 
	|
	|a.Agree:hover { background: rgb(60,179,113); } /* при наведении курсора мышки */
	|a.Agree:active { background: rgb(0,100,0); } /* при нажатии */
	|
	|a.Decline:hover { background: rgb(232,95,76); } /* при наведении курсора мышки */
	|a.Decline:active { background: rgb(152,15,0); } /* при нажатии */
	|
	|</style>
	|
	|<a href=""#Agree"" class=""Agree"">Согласовать</a> 
	|<a href=""#Decline"" class=""Decline"">Отклонить</a> 
	|
	|</P></P>";
	
	пТекстСсылкиНаКнопкуAgree   = "hrefAgree"" onclick=""this.href = " +
								  "'mailto:vkusvill.333@gmail.com?reply-to=vkusvill.333@gmail.com&subject=Согласование%20запроса%20на%20изменение%20цен%20№" + СтруктураПараметров.НомерЗаявки + 
								  "&body=GUID%20" + СтруктураПараметров.GUID_Заявки + 
								  "%20ID_MESSAGE%20" + СтруктураПараметров.ID_MESSAGE + 
							      "%20TYPE_MESSAGE%20" + СтруктураПараметров.TYPE_MESSAGE + "%20Акцептировано';";
	
	пТекстСсылкиНаКнопкуDecline	= "hrefDecline"" onclick=""this.href = " +
								  "'mailto:vkusvill.333@gmail.com?reply-to=vkusvill.333@gmail.com&subject=Согласование%20запроса%20на%20изменение%20цен%20№" + СтруктураПараметров.НомерЗаявки + 
								  "&body=GUID%20" + СтруктураПараметров.GUID_Заявки + 
								  "%20ID_MESSAGE%20" + СтруктураПараметров.ID_MESSAGE + 
								  "%20TYPE_MESSAGE%20" + СтруктураПараметров.TYPE_MESSAGE + "%20Отклонено'+ getComment();";

	ТекстCSS  = СтрЗаменить(ТекстCSS, "#Agree", пТекстСсылкиНаКнопкуAgree); 
	ТекстCSS  = СтрЗаменить(ТекстCSS, "#Decline", пТекстСсылкиНаКнопкуDecline); 
	
	Возврат ТекстCSS;
	
КонецФункции //ПолучитьОформлениеКнопок()

// Процедура Отправляет письма по заданной стрруктуре 
// Параметры:
//  СтруктураПисьма  - <Тип.Структура> -  Структура письма для заполнения
//
Процедура ОтправитьПисьмо(СтруктураПисьма) Экспорт
	
	МассивПолучатели = Документы.ЗапросОстатковУпаковкиУПоставщиков.РазложитьСтрокуВМассивПодстрок(СтруктураПисьма.Получатели,";");
	
	Почта   = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(СтруктураПисьма.Отправитель);
	
	Письмо  = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	
	Письмо.Тема = СтруктураПисьма.Тема;
	
	Письмо.ИмяОтправителя  = СокрЛП(СтруктураПисьма.Отправитель);
	Письмо.Отправитель     = СокрЛП(СтруктураПисьма.Отправитель);
	
	//Удаление дублей электронынх адресов
	СоответствиеАдресов = Новый Соответствие();
	
	Для Каждого ЭлементПолучатель Из МассивПолучатели Цикл
		Если ЗначениеЗаполнено(ЭлементПолучатель) Тогда
			СоответствиеАдресов.Вставить(СокрЛП(ЭлементПолучатель),СокрЛП(ЭлементПолучатель));
		КонецЕсли;	
	КонецЦикла;	
	
	//Добавление получателей
	СтрокаПолучателейТест = "";
	Для Каждого ЭлементПолучатель Из СоответствиеАдресов Цикл
		Если ЗначениеЗаполнено(ЭлементПолучатель.Ключ) Тогда
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = СокрЛП(ЭлементПолучатель.Ключ);
			Получатель.ОтображаемоеИмя = СокрЛП(ЭлементПолучатель.Значение);
			СтрокаПолучателейТест      = СтрокаПолучателейТест + Получатель.Адрес + "; ";
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	
	ТекстСообщения.Текст = СтруктураПисьма.Текст; 
	
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;

	Если СтруктураПисьма.Свойство("ВложениеПуть") Тогда
		Если ТипЗнч(СтруктураПисьма.ВложениеПуть) = Тип("ДвоичныеДанные") Тогда
			Письмо.Вложения.Добавить(СтруктураПисьма.ВложениеПуть, СтруктураПисьма.ИмяФайла);
		Иначе
			Письмо.Вложения.Добавить(Новый ДвоичныеДанные(СтруктураПисьма.ВложениеПуть), СтруктураПисьма.ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПисьма.Свойство("Копии") Тогда
		Если ТипЗнч(СтруктураПисьма.Копии) = Тип("Массив") Тогда
			Для каждого ЭлементМассива Из СтруктураПисьма.Копии Цикл
				Получатель = Письмо.Копии.Добавить();
				Получатель.Адрес           = СокрЛП(ЭлементМассива);
				Получатель.ОтображаемоеИмя = СокрЛП(ЭлементМассива);
			КонецЦикла;
		Иначе
			Получатель = Письмо.Копии.Добавить();
			Получатель.Адрес           = СокрЛП(СтруктураПисьма.Копии);
			Получатель.ОтображаемоеИмя = СокрЛП(СтруктураПисьма.Копии);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПисьма.Вставить("ОшибкаОтправки", Ложь);
	СтруктураПисьма.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		Почта.Послать(Письмо);
		Почта.Отключиться();

		Если СтруктураПисьма.Свойство("ПараметрыКнопок") Тогда
			
			СтруктураПисьма.Вставить("ИдентификаторСообщения", Лев(Письмо.ИдентификаторСообщения, 36));

			ДобавитьЗаписьРегистрАкцептЗаявок(СтруктураПисьма);
			
			РегистрыСведений.ОчередьДокументовДляОтправки.УдалитьЗаписьИзДокументыДляОтправки(СтруктураПисьма.ДокументСсылка);
			
		КонецЕсли;
		
		#Если Не ФоновыеЗадания Тогда
		Сообщить(НСтр("ru = 'Письмо отправлено успешно!'"));
		#КонецЕсли
		
	Исключение
		
		ОписаниеОшибки =  СтрЗаменить("ТекущаяДата : ТекущийПользователь " + Строка(ОписаниеОшибки()), "ТекущаяДата", Строка(ТекущаяДата())); 
		ОписаниеОшибки =  СтрЗаменить(ОписаниеОшибки, "ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		
		СтруктураПисьма.ОшибкаОтправки = Истина;
		СтруктураПисьма.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		#Если Не ФоновыеЗадания Тогда
			Сообщить(НСтр("ru = 'Ошибка при отправке письма'") + ОписаниеОшибки);
		#КонецЕсли

	КонецПопытки;
	
КонецПроцедуры

// Добавление записи в регистр АкцептЗаявок
// Используется для обработки заявки при согласовании из электронного письма
// Параметры:
//  <СруктураКнопок>  - <Тип.Структура> - Структура необходимых полей
Процедура ДобавитьЗаписьРегистрАкцептЗаявок(СтруктураПисьма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись 							= РегистрыСведений.АкцептЗаявок.СоздатьМенеджерЗаписи();
	
	Запись.GUID_Загрузки 			= СтруктураПисьма.ПараметрыКнопок.ID_MESSAGE;
	Запись.GUID_Заявки 				= СтруктураПисьма.ПараметрыКнопок.GUID_Заявки;
	Запись.ДатаОтправки 			= ТекущаяДата();
	Запись.ЗаявкаНаУслугиМатериалы  = СтруктураПисьма.ДокументСсылка;
	Запись.ИдентификаторСообщения   = СтруктураПисьма.ИдентификаторСообщения;
	Запись.ОтправленаНаАкцепт		= Истина;
	Запись.ТипЗаявки 				= СтруктураПисьма.ПараметрыКнопок.TYPE_MESSAGE;
	
	Запись.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры //ДобавитьЗаписьРегистрАкцептЗаявок()

// Обработка статуса документа на основании данных из письма
//
// Параметры:
//  ДокументСсылка       - <Тип.ДокументСсылка> - Документ для обработки
//  СтруктураПараметров  - <Тип.Структура> - Структура данных, которая хранит 
//                         данные по выполненному действию (Согласовано, Отклонено) 
Процедура ОбработатьСогласованиеДокументаИзПисьма(ДокументСсылка, СтруктураПараметров) Экспорт

	Статус = Перечисления.СтатусыПодтвержденияИзмененияЦен.ПустаяСсылка();
	
	Если СтруктураПараметров.Согласовано И НЕ СтруктураПараметров.Отклонено Тогда
		
		Статус = Перечисления.СтатусыПодтвержденияИзмененияЦен.Согласовано;
		
	ИначеЕсли НЕ СтруктураПараметров.Согласовано И СтруктураПараметров.Отклонено Тогда
		
		Статус = Перечисления.СтатусыПодтвержденияИзмененияЦен.Отклонено;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Статус) Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ФоновоеЗадание");
		
		ДокументОбъект.Статус = Статус;
		
		Для каждого строка Из ДокументОбъект.Товары Цикл
			Строка.Статус = Статус;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Примечание) Тогда
			ДокументОбъект.Комментарий = СтруктураПараметров.Примечание;
		КонецЕсли;
		
		
		Попытка
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтправлятьУведомления", Истина);
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ОтправитьУведомленияТехнологамИзменениеЦен(ДокументСсылка);
			
		Исключение
			
			Попытка
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ОтправлятьУведомления", Ложь);
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				ЗаписьЖурналаРегистрации("СогласованиеЦенПоставщиков", УровеньЖурналаРегистрации.Ошибка, , , 
							СтрЗаменить("Не удалось ""записать"" документ &Документ при согласовании через e-mail: ", "&Документ", ДокументОбъект)  + ОписаниеОшибки());
							
			КонецПопытки;
						
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСогласованиеДокументаИзПисьма()

// Процедура формирует и вызывает отправку письмем технологам и помощникам технологов о согласовании/отклонении цен руководителем
//
// Параметры:
//  ДокументСсылка  - <Тип.ДокументСсылка.ИзменениеЗакупочныхЦен> 
//
Процедура ОтправитьУведомленияТехнологамИзменениеЦен(ДокументСсылка) Экспорт
	
	Если Не ПолучитьЗначениеНастройкиПодсистемы("УведомленияТехнологамПриСогласовании") Тогда
		Возврат;
	КонецЕсли;
	
	//Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	
	СтруктураПисьма.Вставить("ДокументСсылка", ДокументСсылка);
	СтруктураПисьма.Вставить("Отправитель", ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru")); 
	СтруктураПисьма.Вставить("ИмяМакета", "МакетИзменениеСтатуса");
	СтруктураПисьма.Вставить("Получатели",     Неопределено);
	СтруктураПисьма.Вставить("МассивСтрок",    Неопределено);	
	СтруктураПисьма.Вставить("ОшибкаОтправки", Неопределено);
	СтруктураПисьма.Вставить("ОписаниеОшибки", Неопределено);
	СтруктураПисьма.Вставить("Тема", "Установлен статус документа " + ДокументСсылка); 
	СтруктураПисьма.Вставить("Текст", "");

	//Формирование массивов строк документа и адресов получателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеЗакупочныхЦенТовары.НомерСтроки,
	|	ИзменениеЗакупочныхЦенТовары.Номенклатура,
	|	ИзменениеЗакупочныхЦенТовары.Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ИзменениеЗакупочныхЦен.Товары КАК ИзменениеЗакупочныхЦенТовары
	|ГДЕ
	|	ИзменениеЗакупочныхЦенТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	|ПОМЕСТИТЬ ВТ_ТоварыПроизводители
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)
	|			И (ЗначенияСвойствОбъектов.Значение ССЫЛКА Справочник.Контрагенты)
	|			И ВТ_Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.ТипРоли.Код
	|ПОМЕСТИТЬ ВТ_БрендМенеджеры
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли.Код = ""BrendManager""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователей.Ссылка КАК РольБрендменеджер,
	|	СоответствиеОбъектРольСрезПоследних.Объект КАК РольТехнолога
	|ПОМЕСТИТЬ ВТ_БрендМенеджерыТехнологов
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект ССЫЛКА Справочник.РолиПользователей) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователей.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И РолиПользователей.ТипРоли = СоответствиеОбъектРольСрезПоследних.ТипРоли
	|ГДЕ
	|	РолиПользователей.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_БрендМенеджеры.Ссылка
	|			ИЗ
	|				ВТ_БрендМенеджеры КАК ВТ_БрендМенеджеры)
	|	И НЕ СоответствиеОбъектРольСрезПоследних.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТоварыПроизводители.НомерСтроки,
	|	ВТ_ТоварыПроизводители.Номенклатура,
	|	ВТ_ТоварыПроизводители.Характеристика,
	|	ЕСТЬNULL(СоответствиеОбъектРоль.РольПользователя, ЕСТЬNULL(СоответствиеОбъектРольКонтрагенты.РольПользователя, ""Не установлена роль"")) КАК ДоступнаяРольПользователя
	|ПОМЕСТИТЬ ВТ_ТоварыРоли
	|ИЗ
	|	ВТ_ТоварыПроизводители КАК ВТ_ТоварыПроизводители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
	|		ПО (СоответствиеОбъектРоль.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры)
	|			И (СоответствиеОбъектРоль.ТипРолиID = ""TechnologPoKachestvu"")
	|			И ВТ_ТоварыПроизводители.Характеристика = СоответствиеОбъектРоль.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРольКонтрагенты
	|		ПО (СоответствиеОбъектРольКонтрагенты.Объект ССЫЛКА Справочник.Контрагенты)
	|			И (СоответствиеОбъектРольКонтрагенты.ТипРолиID = ""TechnologPoKachestvu"")
	|			И ВТ_ТоварыПроизводители.Производитель = СоответствиеОбъектРольКонтрагенты.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РолиПользователей.Ссылка,
	|	РолиПользователей.Код,
	|	РолиПользователей.Родитель
	|ПОМЕСТИТЬ ВТ_ОсновныеРолиТехнологов
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|ГДЕ
	|	РолиПользователей.ТипРоли = &ТипРолиТехнолог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РолиПользователейТипыРолей.Ссылка.Родитель,
	|	РолиПользователейТипыРолей.Ссылка,
	|	РолиПользователейТипыРолей.ТипРоли
	|ПОМЕСТИТЬ ВТ_РолиТехнологов
	|ИЗ
	|	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейТипыРолей.ТипРоли,
	|	РолиПользователейТипыРолей.Ссылка.Родитель,
	|	РолиПользователейТипыРолей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеРолиТехнологов.Ссылка КАК Родитель,
	|	ВТ_ОсновныеРолиТехнологов.Ссылка КАК ФункциональнаяРоль,
	|	ЛОЖЬ КАК ПолучателиБренд
	|ПОМЕСТИТЬ ВТ_ФункциональныеРолиРодители
	|ИЗ
	|	ВТ_ОсновныеРолиТехнологов КАК ВТ_ОсновныеРолиТехнологов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РолиТехнологов.Родитель,
	|	ВТ_РолиТехнологов.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_РолиТехнологов КАК ВТ_РолиТехнологов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_БрендМенеджерыТехнологов.РольТехнолога,
	|	ВТ_БрендМенеджерыТехнологов.РольБрендменеджер,
	|	ИСТИНА
	|ИЗ
	|	ВТ_БрендМенеджерыТехнологов КАК ВТ_БрендМенеджерыТехнологов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таб_Итоговая.Родитель КАК Родитель,
	|	Таб_Итоговая.ФункциональнаяРоль КАК ФункциональнаяРоль,
	|	Таб_Итоговая.Сотрудник КАК Сотрудник,
	|	Таб_Итоговая.НомерСтроки,
	|	Таб_Итоговая.Номенклатура,
	|	Таб_Итоговая.Характеристика,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(500)) КАК Представление,
	|	КонтактнаяИнформация.Тип,
	|	ЛОЖЬ КАК ДопРассылка,
	|	Таб_Итоговая.ПолучателиБренд
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ФункциональныеРолиРодители.Родитель КАК Родитель,
	|		ВТ_ФункциональныеРолиРодители.ФункциональнаяРоль КАК ФункциональнаяРоль,
	|		РолиПользователейСоставРоли.Сотрудник КАК Сотрудник,
	|		ВТ_ТоварыРоли.НомерСтроки КАК НомерСтроки,
	|		ВТ_ТоварыРоли.Номенклатура КАК Номенклатура,
	|		ВТ_ТоварыРоли.Характеристика КАК Характеристика,
	|		ВТ_ФункциональныеРолиРодители.ПолучателиБренд КАК ПолучателиБренд
	|	ИЗ
	|		ВТ_ТоварыРоли КАК ВТ_ТоварыРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФункциональныеРолиРодители КАК ВТ_ФункциональныеРолиРодители
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ПО ВТ_ФункциональныеРолиРодители.ФункциональнаяРоль = РолиПользователейСоставРоли.Ссылка
	|			ПО ВТ_ТоварыРоли.ДоступнаяРольПользователя = ВТ_ФункциональныеРолиРодители.Родитель) КАК Таб_Итоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
	|			И Таб_Итоговая.Сотрудник = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И Таб_Итоговая.Родитель <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РуководителиИзменениеЦен.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВЫРАЗИТЬ(РуководителиИзменениеЦен.ЭлектронныйАдрес КАК СТРОКА(500)),
	|	NULL,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ИзменениеЗакупочныхЦен КАК ИзменениеЗакупочныхЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РуководителиИзменениеЦен КАК РуководителиИзменениеЦен
	|		ПО ИзменениеЗакупочныхЦен.ВидНоменклатуры = РуководителиИзменениеЦен.ВидНоменклатуры
	|ГДЕ
	|	РуководителиИзменениеЦен.ПолучатьРассылку
	|	И ИзменениеЗакупочныхЦен.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	ФункциональнаяРоль,
	|	Сотрудник
	|ИТОГИ ПО
	|	Родитель
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипРолиТехнолог", Перечисления.ТипыРолейПользователейМОС.Технолог);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПолучателиДоп = "";

		ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРодитель.Следующий() Цикл
			
			МассивСтрок  = Новый Массив();
			Получатели   = "";

			МассивСтрокБренд  = Новый Массив();
            ПолучателиБренд   = "";
			
			ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.ПолучателиБренд Тогда
					
					МассивСтрокБренд.Добавить(ВыборкаДетальныеЗаписи.НомерСтроки);
					
					ПолучателиБренд = ПолучателиБренд + ВыборкаДетальныеЗаписи.Представление + ";";
					
				Иначе
					
					МассивСтрок.Добавить(ВыборкаДетальныеЗаписи.НомерСтроки);
					
					Если ВыборкаДетальныеЗаписи.ДопРассылка Тогда
						ПолучателиДоп = ПолучателиДоп + ВыборкаДетальныеЗаписи.Представление + ";";
					Иначе
						Получатели = Получатели + ВыборкаДетальныеЗаписи.Представление + ";" ;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Получатели) Тогда 
				
				СтруктураПисьма.МассивСтрок   = МассивСтрок;
				СтруктураПисьма.Получатели    = Получатели;
				
				СформироватьПисьмоУведомление(СтруктураПисьма);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПолучателиБренд) Тогда 
				
				СтруктураПисьма.МассивСтрок   = МассивСтрокБренд;
				СтруктураПисьма.Получатели    = ПолучателиБренд;
				
				СформироватьПисьмоУведомление(СтруктураПисьма);
				
			КонецЕсли;

		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПолучателиДоп) Тогда
			
			СтруктураПисьма.МассивСтрок = Истина;
			СтруктураПисьма.Получатели  = ПолучателиДоп;
			
			СформироватьПисьмоУведомление(СтруктураПисьма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

// Процедура формирует и вызывает отправку письмем получателям в случае повышения цен
//
// Параметры:
//  ДокументСсылка  - <Тип.ДокументСсылка.ИзменениеЗакупочныхЦен> 
//
Процедура ОтправитьУведомленияОПовышенииЦенЦен(ДокументСсылка) Экспорт
	
	Если Не ПолучитьЗначениеНастройкиПодсистемы("УведомленияПриУстановкеБолееВысокойЦены") Тогда
		Возврат;
	КонецЕсли;
	
	//Контроль наличия повышения цен
	ОтправлятьУведомление = Ложь;
	Для каждого Строка из ДокументСсылка.Товары Цикл
		Если Строка.Цена < Строка.ЦенаНовая Тогда
			ОтправлятьУведомление = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтправлятьУведомление Тогда
		Возврат;
	КонецЕсли;
	
	//Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	
	СтруктураПисьма.Вставить("ДокументСсылка", ДокументСсылка);
	СтруктураПисьма.Вставить("Отправитель", ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru"));
	СтруктураПисьма.Вставить("ИмяМакета", "МакетПоУвеличениюЦены");
	СтруктураПисьма.Вставить("Получатели",     Неопределено);
	СтруктураПисьма.Вставить("МассивСтрок",    Истина);
	СтруктураПисьма.Вставить("ОшибкаОтправки", Неопределено);
	СтруктураПисьма.Вставить("ОписаниеОшибки", Неопределено);
	СтруктураПисьма.Вставить("Тема", "Повышение цены " + ДокументСсылка); 
	СтруктураПисьма.Вставить("Текст", "");

	//Формирование массивов адресов получателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РуководителиИзменениеЦен.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(РуководителиИзменениеЦен.ЭлектронныйАдрес КАК СТРОКА(500)) КАК Представление,
	|	ИСТИНА КАК ДопРассылка
	|ИЗ
	|	Документ.ИзменениеЗакупочныхЦен КАК ИзменениеЗакупочныхЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РуководителиИзменениеЦен КАК РуководителиИзменениеЦен
	|		ПО ИзменениеЗакупочныхЦен.ВидНоменклатуры = РуководителиИзменениеЦен.ВидНоменклатуры
	|ГДЕ
	|	РуководителиИзменениеЦен.ПолучатьПовышеннаяЦена
	|	И ИзменениеЗакупочныхЦен.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Получатели   = "";
			
			Получатели = Получатели + Выборка.Представление + ";";
			
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(Получатели) Тогда 
			
			СтруктураПисьма.Получатели    = Получатели;
			
			СформироватьПисьмоУведомление(СтруктураПисьма);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры  

// Процедура формирует и вызывает отправку письмем получателям в случае ручного повышения цен
//
// Параметры:
//  ТаблицаНовыхЦен  - <Тип.ТаблицаЗначений> Таблица новых цен 
//
Процедура ОтправитьУведомленияОРучномПовышенииЦен(ТаблицаНовыхЦен) Экспорт
	
	Если Не ПолучитьЗначениеНастройкиПодсистемы("УведомленияПриУстановкеБолееВысокойЦены") Тогда
		Возврат;
	КонецЕсли;
	
	//Формирование структуры письма
	СтруктураПисьма = Новый Структура();
	
	СтруктураПисьма.Вставить("Отправитель", ПолучитьУчетнуюЗаписьДляРассылки("no-reply@vkusvill.ru"));
	СтруктураПисьма.Вставить("ИмяМакета", "МакетПоРучномуУвеличениюЦены");
	СтруктураПисьма.Вставить("ВнешнийНабор", "ТаблицаНовыхЦен");
	СтруктураПисьма.Вставить("ТаблицаНовыхЦен", ТаблицаНовыхЦен);
	СтруктураПисьма.Вставить("Получатели",     Неопределено);
	СтруктураПисьма.Вставить("ОшибкаОтправки", Неопределено);
	СтруктураПисьма.Вставить("ОписаниеОшибки", Неопределено);
	СтруктураПисьма.Вставить("Тема", "Ручное повышение закопочных цен поставщиков"); 
	СтруктураПисьма.Вставить("Текст", "");

	//Формирование массивов адресов получателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РуководителиИзменениеЦен.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(РуководителиИзменениеЦен.ЭлектронныйАдрес КАК СТРОКА(500)) КАК Представление,
	|	ИСТИНА КАК ДопРассылка
	|ИЗ
	|	РегистрСведений.РуководителиИзменениеЦен КАК РуководителиИзменениеЦен
	|ГДЕ
	|	РуководителиИзменениеЦен.ПолучатьПовышеннаяЦена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Получатели   = "";
		
		Пока Выборка.Следующий() Цикл
			Получатели = Получатели + Выборка.Представление + ";";
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(Получатели) Тогда 
			
			СтруктураПисьма.Получатели   = Получатели;
			
			СформироватьПисьмоУведомление(СтруктураПисьма);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры  

// Формирует тексты писем по заданному имени макета 
//
// Параметры:
//
//  СтруктураПисьма - <Тип.Структура> 
//
//  Основные параметры структуры:
//
//  ДокументСсылка  - <Тип.ВиИзменениеЗакупочныхЦенд> - Документ для отправки уведомлений
//                 
//  МассивНомеровСтрок  - <Тип.Массив> - Массив строк документа, которые должны быть разосланы
//
Процедура СформироватьПисьмоУведомление(СтруктураПисьма);

	//Формирование текста HTML письма 
	
	СхемаКомпоновкиДанных = ПолучитьМакет(СтруктураПисьма.ИмяМакета);
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной").Настройки;
	
	//Заполнение параметров
	Если СтруктураПисьма.Свойство("ДокументСсылка") Тогда
		НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("Ссылка").Значение = СтруктураПисьма.ДокументСсылка;
	КонецЕсли;
	
	Если СтруктураПисьма.Свойство("МассивСтрок") Тогда
		НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("МассивСтрок").Значение = СтруктураПисьма.МассивСтрок;
		НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("ВсеСтроки").Значение   = СтруктураПисьма.МассивСтрок = Истина;
	КонецЕсли;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанных")); 

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	Если СтруктураПисьма.Свойство("ВнешнийНабор") Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура(СтруктураПисьма.ВнешнийНабор, СтруктураПисьма[СтруктураПисьма.ВнешнийНабор]));
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ТабДок = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Запись в HTML файл
	
	МассивДляУдаления = Новый Массив();
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	МассивДляУдаления.Добавить(ИмяФайла);
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	
	СтруктураПисьма.Текст = ТекстовыйДокумент.ПолучитьТекст();	
	
	//Удаление временных файлов
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	//Отправка письма
	ОтправитьПисьмо(СтруктураПисьма);

КонецПроцедуры // СформироватьПисьмоУведомление(ДокументСсылка, МассивНомеровСтрок, МассивАдресовПолучателей);()

// Возвращает признак использования настройки подсистемы
//
// Параметры:
//  ИмяНастройки  - <Тип.Строка> - Имя настройки подсистемы
//
// Возвращаемое значение:
//   <Тип.Произвольный>   - Значение настройки подсистемы
//
Функция ПолучитьЗначениеНастройкиПодсистемы(ИмяНастройки)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый ФиксированнаяСтруктура(РегистрыСведений.ИзменениеЗакупочныхЦенНастройки.Получить(Новый Структура("Использование", Истина)));
	
	Если СтруктураНастроек.Свойство(ИмяНастройки)Тогда
		Возврат СтруктураНастроек[ИмяНастройки];
	КонеЦесли;

	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеНастройкиПодсистемы()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С SQL

// Функция возвращает сформированную таблицу значений для внешнего набора данных
//
// Возвращаемое значение:
//   <Тип.ТаблицаЗначений> 
//
Функция ПолучитьДанныеПоРасчетуПотерьSQL(ТаблицаТоваров, СтруктураПараметров) 
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("_id_tov"		      , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗначений.Колонки.Добавить("_id_kontr"		  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗначений.Колонки.Добавить("_Поставка30ДнейШт"  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗначений.Колонки.Добавить("_Поставка90ДнейШт"  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗначений.Колонки.Добавить("_Продажи30ДнейШт"	  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗначений.Колонки.Добавить("_Продажи30ДнейРуб"  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗначений.Колонки.Добавить("_Себестоимость"	  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 4)));
	ТаблицаЗначений.Колонки.Добавить("_Себестоимость1C"	  , Новый ОписаниеТипов("Число"	, Новый КвалификаторыЧисла(15, 5)));
	ТаблицаЗначений.Колонки.Добавить("_ЭтоОвощи"	      , Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("_ЭтоУпаковка"	      , Новый ОписаниеТипов("Булево"));

	Возврат ЗаполнитьТаблицуПотерьSQL(ТаблицаЗначений, ТаблицаТоваров, СтруктураПараметров);
	
КонецФункции

// Функция заполяет сформированную таблицу значений для внешнего набора данных
//
// Возвращаемое значение:
//   <Тип.ТаблицаЗначений> 
//
Функция ЗаполнитьТаблицуПотерьSQL(ТаблицаЗначений, ТаблицаТоваров, СтруктураПараметров) 
	
	Если СтруктураПараметров.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
		ТаблицаПродажSQL = ТаблицаЗначений.Скопировать();
	Иначе
		ТаблицаПродажSQL = ПолучитьДанныеОПоступленияхПродажахSQL(ТаблицаЗначений, ПолучитьСтруктуруПараметровДляSQL(ТаблицаТоваров, СтруктураПараметров)); 
	КонецЕсли;
	
	// Тестовые данные(для отладки генерации HTML текста письма)
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ_Товары Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаТоваров);
	Запрос.Выполнить();
	
    Запрос.Текст = "Выбрать * ПОМЕСТИТЬ ВТ_ДанныеSQL Из &ВременнаяТаблица Как ВременнаяТаблица";
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаПродажSQL);
	Запрос.Выполнить();
	
	//При выборке из Цен номенклатуры для _ЦенаРозничная используется последняя установленная цена по номенклатуре
	//В рабочей базе есть несколько позиций, цена для которых заведена в разрезе Характеристики
	//Пока нет информации каким образом обрабатывать такие цены.
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК СсылкаСтавкаНДС,
	|	ВЫБОР
	|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНдС.НДС20)
	|			ТОГДА 20
	|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНдС.НДС18)
	|			ТОГДА 18
	|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНдС.НДС13)
	|			ТОГДА 13
	|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНдС.НДС10)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК _НДС
	|ПОМЕСТИТЬ ВТ_КоэфСтавокНДС
	|ИЗ
	|	Перечисление.СтавкиНДС КАК СтавкиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ВТ_КоэфСтавокНДС._НДС КАК _НДС_Номенклатуры
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоэфСтавокНДС КАК ВТ_КоэфСтавокНДС
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура.СтавкаНДС = ВТ_КоэфСтавокНДС.СсылкаСтавкаНДС
	|ГДЕ
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК _НомерСтроки,
	|	ВТ_Товары.Поставщик КАК _Поставщик,
	|	ВТ_Товары.Номенклатура КАК _Товар,
	|	ВТ_Товары.Характеристика КАК _Характеристика,
	|	ВТ_Товары.Цена КАК _Цена,
	|	ВТ_Товары.ЦенаНовая КАК _ЦенаНовая,
	|	ВТ_Товары.Дата КАК _Дата,
	|	ВТ_Товары.ДатаНачала КАК _ДатаНовая,
	|	ВТ_Товары.Поставщик.СтавкаНДС КАК _СтавкаНДС,
	|	ВТ_Товары.Номенклатура.БезУпаковки КАК _ЭтоБезУпаковки,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.БезУпаковки
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СокрВариантОтчета,
	|	0 КАК _Наценка,
	|	ВТ_ЦеныНоменклатуры.Цена КАК _ЦенаРозничная,
	|	0 КАК _Рост,
	|	ВТ_ДанныеSQL._Поставка30ДнейШт КАК _Поставка30ДнейШт,
	//Это не опечатка (для Упаковки расчет 90 дней. Используется для отображения в отчете ↓)
	|	ВТ_ДанныеSQL._Поставка30ДнейШт КАК _Поставка90ДнейШт, 
	//Это не опечатка (для Упаковки рассчет 90 дней Используется для отображения в отчете ↑)
	|	0 КАК _ПоставкаПотери,
	|	ВТ_ДанныеSQL._Продажи30ДнейШт КАК _Продажи30ДнейШт,
	|	ВТ_ДанныеSQL._Продажи30ДнейРуб КАК _Продажи30ДнейРуб,
	|	0 КАК _ПродажиПотери,
	|	ВТ_ДанныеSQL._Себестоимость КАК _Себестоимость,
	|	РАЗНОСТЬДАТ(ВТ_Товары.Дата, НАЧАЛОПЕРИОДА(ВТ_Товары.ДатаНачала, ДЕНЬ), ЧАС) / 24 / 30 КАК _КвоМесяцевДоПереоценки,
	|	ВТ_ДанныеSQL._ЭтоОвощи КАК _ЭтоОвощи,
	|	ВТ_ДанныеSQL._ЭтоУпаковка КАК _ЭтоУпаковка,
	|	ВТ_КоэфСтавокНДС._НДС,
	|	ВЫБОР
	|		КОГДА ВТ_ЦеныНоменклатуры._НДС_Номенклатуры = 0
	|			ТОГДА ВТ_ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ВТ_ЦеныНоменклатуры.Цена / (100 + ВТ_ЦеныНоменклатуры._НДС_Номенклатуры) * 100
	|	КОНЕЦ КАК _ЦенаРозничнаяБезНДС,
	|	ЕСТЬNULL(СебестоимостьТоваровСрезПоследних.Себестоимость, 0) КАК _Себестоимость1C
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеSQL КАК ВТ_ДанныеSQL
	|		ПО ВТ_Товары.Номенклатура.id_tov = ВТ_ДанныеSQL._id_tov
	|			И (ВТ_Товары.Характеристика.id_kontr = ВТ_ДанныеSQL._id_kontr
	|				ИЛИ ВТ_ДанныеSQL._id_kontr = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|		ПО ВТ_Товары.Номенклатура = ВТ_ЦеныНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоэфСтавокНДС КАК ВТ_КоэфСтавокНДС
	|		ПО ВТ_Товары.Поставщик.СтавкаНДС = ВТ_КоэфСтавокНДС.СсылкаСтавкаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&Период, ) КАК СебестоимостьТоваровСрезПоследних
	|		ПО ВТ_Товары.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	_НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КоэфСтавокНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЦеныНоменклатуры";
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция инициирует подключение к базе SQL и заполняет таблицы для внешнего источника данных
//
// Возвращаемое значение:
//   <Тип.ТаблицаЗначений> 
//
Функция ПолучитьДанныеОПоступленияхПродажахSQL(ТаблицаЗначений, СтруктураПараметров) 
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = ADOСоединение;
	Command.CommandTimeout = 300;
	
	Command.CommandType = 4;
    Command.CommandText = "M2.dbo.GetPostProd_idTovidKontr";
	
	//ADO Create parameter method
	//200 - adVarChar
	
	param1 = Command.CreateParameter("@id_Tov",200,1,СтрДлина(СтруктураПараметров.id_tov_param),СтруктураПараметров.id_tov_param);
 	Command.Parameters.Append(param1);
	
	param2 = Command.CreateParameter("@id_kontr",200,1,СтрДлина(СтруктураПараметров.id_kontr_param),СтруктураПараметров.id_kontr_param);
	Command.Parameters.Append(param2);
	
	param3 = Command.CreateParameter("@kday",3,1,,?(СтруктураПараметров.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал,-90,-30));
	Command.Parameters.Append(param3);
	
	param4 = Command.CreateParameter("@DateIns",200,1,30, Формат(СтруктураПараметров.date, "ДФ=yyyyMMdd"));
	Command.Parameters.Append(param4);
                                                              
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	
	RecordSet = Command.Execute();
	
	Если НЕ RecordSet.EOF() Тогда

		Пока RecordSet.EOF() = 0 Цикл
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
					
			НоваяСтрока._id_tov           = RecordSet.Fields(RecordSet.Fields.Item(0).Name).Value;
			НоваяСтрока._id_kontr         = RecordSet.Fields(RecordSet.Fields.Item(1).Name).Value;
			НоваяСтрока._Себестоимость    = RecordSet.Fields(RecordSet.Fields.Item(2).Name).Value;
			НоваяСтрока._Поставка30ДнейШт = RecordSet.Fields(RecordSet.Fields.Item(3).Name).Value;
			НоваяСтрока._Продажи30ДнейШт  = RecordSet.Fields(RecordSet.Fields.Item(4).Name).Value;
			НоваяСтрока._Продажи30ДнейРуб = RecordSet.Fields(RecordSet.Fields.Item(5).Name).Value;
			НоваяСтрока._ЭтоОвощи         = RecordSet.Fields(RecordSet.Fields.Item(6).Name).Value;
			НоваяСтрока._ЭтоУпаковка      = RecordSet.Fields(RecordSet.Fields.Item(7).Name).Value;
					
			RecordSet.MoveNext();
		
		КонецЦикла;
		
	КонецЕсли;

	ADOСоединение.Close();
	
	Возврат ТаблицаЗначений;

КонецФункции

// Функция получает идентификаторы товаров/поставщиков и преобразует их в структуру параметров для хранимой процедуры
//
// Параметры:
//  ТаблицаТоваров  - <Тип.ТаблицаЗначений> - Таблица значений, которая содержит всю информацию из табличной части "Товары" 
//                                            документа "Изменение закупочных цен".
// Параметры:
//  СтруктураПараметров  - Структура.ТолькоОтклоненные - ТолькоОтклоненные Дополнительный отбор, который позволяет определить, какие строки актуальны для 
//										                 при формировании запроса в SQL (В случае, если "Технолог" высылает запрос повторно и только по ранее отклоненным позициям)
//                       - Структура.Дата - Дата документа "Изменение закупочных цен".
// Возвращаемое значение:
//   <Тип.Структура>   - Структура параметров, для установки при вызове хранимой процедуры
//
Функция ПолучитьСтруктуруПараметровДляSQL(ТаблицаТоваров, СтруктураПараметров)

	ДополнительныйОтбор = ?(СтруктураПараметров.ТолькоОтклоненные, "ВТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодтвержденияИзмененияЦен.Отклонено)", "ИСТИНА"); 
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаТоваров);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ 
	|ВТ.Номенклатура.id_tov КАК id_tov,
	|ВТ.Характеристика.id_kontr КАК id_kontr
	|ИЗ
	| ВТ КАК ВТ
	|ГДЕ
	| ИСТИНА";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", ДополнительныйОтбор); 
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		id_tov_param   = "";
		id_kontr_param = "";
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.id_tov) Тогда
				id_tov_param = id_tov_param + Формат(Выборка.id_tov, "ЧГ=0") + ",";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.id_kontr) Тогда
				id_kontr_param = id_kontr_param + Формат(Выборка.id_kontr, "ЧГ=0") + ",";
			Иначе
				id_kontr_param = id_kontr_param + "0,";
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(id_tov_param) И НЕ ЗначениеЗаполнено(id_kontr_param) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Новый Структура("id_tov_param, id_kontr_param, date, ВидНоменклатуры", 
						"" + Лев(id_tov_param, СтрДлина(id_tov_param)-1) + "", 
			    				"" + Лев(id_kontr_param, СтрДлина(id_kontr_param)-1) + "", 
											СтруктураПараметров.Дата, СтруктураПараметров.ВидНоменклатуры); 
 
	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруПараметровДляSQL()

