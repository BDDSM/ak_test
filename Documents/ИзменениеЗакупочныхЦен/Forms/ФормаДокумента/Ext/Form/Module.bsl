#Область ОбластьПеременных

&НаКлиенте
Перем ВидСтандартнаяОбработка;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Изменение закупочных цен");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	ЗаполнитьШапкуДокумента();
	
	ЗаполнитьОтветственныхРуководителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокФормы();
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

//+++АК ILIK 2018.08.06 ИП-00019438
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		Отказ = Истина;
		СтрокаСообщения = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВидСтандартнаяОбработка = Истина Тогда
		СтандартнаяОбработка = Истина;
	Иначе
		Если Объект.Товары.Количество() > 0 Тогда 
			ВидСтандартнаяОбработка = Ложь;
			СтандартнаяОбработка    = Ложь;
			
			Оповещение = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьВопросЗавершение", ЭтаФорма);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена! Продолжить?'", "ru"), РежимДиалогаВопрос.ДаНет, 15 );
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ЗаполнитьОтветственныхРуководителей();
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если ПравоПодтверждения И Элемент.ТекущийЭлемент.Имя = "ТоварыСтатус" Тогда
		Отказ = Истина;
		ОбновитьСтатусСтроки();
	Иначе
		Отказ = НЕ ЕстьВозможностьРедактированияСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = НЕ ЕстьВозможностьРедактированияСтроки(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ТоварыПоставщикНачалоВыбора(,,);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = НЕ ЕстьВозможностьРедактированияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ОчиститьДанныеСтроки(Элемент.ТекущиеДанные, Истина, Истина);
		
		Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыбор", ЭтаФорма);

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		ТекущаяНоменклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекущийПоставщик    = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
		ТекущийПоставщик    = Элементы.Товары.ТекущиеДанные.Поставщик;
	КонецЕсли;

	СтруктураПараметров = Новый Структура("Период, ОтборПоПользователю, ТекущийПользователь, ЗакрыватьПриВыборе, Поставщик, ТекущееЗначение, ВидНоменклатуры", 
				Объект.Дата, НЕ ПравоПодтверждения, ТекущийПользователь, Истина, ТекущийПоставщик, ТекущаяНоменклатура, Объект.ВидНоменклатуры);
	
	ОткрытьФорму("Документ.ИзменениеЗакупочныхЦен.Форма.ФормаВыбораНоменклатуры", СтруктураПараметров, Элементы.ТоварыНоменклатура,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные, Истина, Истина);
	Иначе
		КонтрольВыбораНоменклатурыЗапетДублей(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Неопределено Тогда
		СтандартнаяОбработка = Истина;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыбор", ЭтаФорма);
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		ТекущийПоставщик    = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		ТекущийПоставщик    = Элементы.Товары.ТекущиеДанные.Поставщик;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Период, ОтборПоПользователю, ТекущийПользователь, ЗакрыватьПриВыборе, ТекущееЗначение, ВидНоменклатуры", 
			Объект.Дата, НЕ ПравоПодтверждения, ТекущийПользователь, Истина, ТекущийПоставщик, Объект.ВидНоменклатуры); 
	
	ОткрытьФорму("Документ.ИзменениеЗакупочныхЦен.Форма.ФормаВыбораПоставщика", СтруктураПараметров, Элементы.ТоварыНоменклатура,ЭтаФорма.УникальныйИдентификатор,,,Оповещение,);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		
		ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные, Истина, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбор (Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Свойство("Номенклатура") Тогда
			
			Элементы.Товары.ТекущиеДанные.Номенклатура   = Результат.Номенклатура;
			Элементы.Товары.ТекущиеДанные.Характеристика = Результат.Характеристика;
			
			КонтрольВыбораНоменклатурыЗапетДублей("ТоварыНоменклатура");
			
			Если НЕ ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
				ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные, Истина, Истина);
				Возврат;
			КонецЕсли;

			ЗаполнитьСтрокуТабличнойЧасти(Элементы.Товары.ТекущиеДанные, Ложь, Ложь);
			
			Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы.ТоварыЦенаНовая;

			Если НЕ Результат.ВсяНоменклатура И Элементы.Товары.ТекущиеДанные.Поставщик <> Результат.Поставщик Тогда
				Элементы.Товары.ТекущиеДанные.Поставщик = Результат.Поставщик;
			КонецЕсли;
			
		ИначеЕсли Результат.Свойство("Поставщик") Тогда
			
			Элементы.Товары.ТекущиеДанные.Поставщик = Результат.Поставщик;
			
			ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные, Истина, Истина);
			
			ВыборНоменклатуры = Истина; 
			
			ЗаполнитьСтрокуТабличнойЧасти(Элементы.Товары.ТекущиеДанные, ВыборНоменклатуры, Истина);
			
			#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
				
				Если ВыборНоменклатуры Тогда
					
					Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
					
					ТоварыНоменклатураНачалоВыбора( , ,Ложь);
					
				КонецЕсли;
				
			#КонецЕсли

			Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.Номенклатура = ВыбранноеЗначение;

	ЗаполнитьСтрокуТабличнойЧасти(ТекущаяСтрока, Ложь, Ложь);
	
	КонтрольВыбораНоменклатурыЗапетДублей("ТоварыНоменклатура");
	
	Если НЕ ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные, Истина, Истина);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущийЭлемент = Элементы.Товары.ПодчиненныеЭлементы.ТоварыЦенаНовая;

	//Обновление данных при подборе через "ввод по строке"
	КэшХарактеристикаНоменклатуры = ТекущаяСтрока.Характеристика;
	ПодключитьОбработчикОжидания("ОбновитьТекущуюСтрокуВыборЧерезВвод", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
     ОбновитьСтрокуТабличнойЧасти(Элементы.Товары.ТекущиеДанные);
	 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьДанныеСтроки(Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработатьСтатусыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьПоставщикаПоЧастиТекста(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьНоменклатуруПоЧастиТекста(Текст);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КонтрольВыбораНоменклатурыЗапетДублей(Элемент.Имя);

	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ДатаНачала) И Элементы.Товары.ТекущиеДанные.ДатаНачала < НачалоДня(ТекущаяДата()) И Не ПравоРедактированияДаты Тогда
		Элементы.Товары.ТекущиеДанные.ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	КонтрольВыбораНоменклатурыЗапетДублей(Элемент.Имя);
	
	ТоварыДатаПоПриИзменении(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаНачалаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	КонтрольВыбораНоменклатурыЗапетДублей(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ДатаПо) И Элементы.Товары.ТекущиеДанные.ДатаПо < Элементы.Товары.ТекущиеДанные.ДатаНачала Тогда
		Элементы.Товары.ТекущиеДанные.ДатаПо = Элементы.Товары.ТекущиеДанные.ДатаНачала;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если РежимТестирования Тогда
		ЗаполнитьДополнительнуюИнформациюРежимТестирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначениеЯчейки(Элемент.ТекущиеДанные, Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомманд

&НаКлиенте
Процедура КомандаРежимТестирования(Команда)
	
	ОбновитьВидимостьРежимаТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Записать();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСогласовать(Команда)
	
	УстановитьСтатусыТабличнойЧасти(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтклонить(Команда)
	
	УстановитьСтатусыТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПосмотретьОтчет(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированностьОтчет", ЭтаФорма, ), 
			 НСтр("ru = 'Перед формированием отчета документ будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;

	ПредварительныйПросмотрОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗначение(Команда)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначениеЯчейки(Элементы.Товары.ТекущиеДанные, Элементы.Товары.ТекущийЭлемент.Имя, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьЗаявку(Команда)
	
	//+++АК ILIK 2018.08.06 ИП-00019438
	//Если НЕ ПравоПодтверждения И НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
	Если НЕ ПравоПодтверждения И (НЕ ЗначениеЗаполнено(Объект.Статус) Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Ошибка")) Тогда
	//---АК ILIK
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированность", ЭтаФорма, Новый Структура("Назначение", "ОтправитьЗаявкуНаКлиенте()")), 
			НСтр("ru = 'После отправки запроса руководителю, возможность редактирования документа будет недоступна! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПроверитьВозможностьОтправкиДокумента("ОтправитьЗаявкуНаКлиенте()");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьЗаявкуОтклоненные(Команда)
	
	//+++АК ILIK 2018.08.06 ИП-00019438
	//Если НЕ ПравоПодтверждения И НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
	Если НЕ ПравоПодтверждения И (НЕ ЗначениеЗаполнено(Объект.Статус) Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Ошибка")) Тогда
	//---АК ILIK
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированность", ЭтаФорма, Новый Структура("Назначение", "ОтправитьЗаявкуОтклоненныеНаКлиенте()")), 
			НСтр("ru = 'После отправки запроса руководителю, возможность редактирования документа будет недоступна! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПроверитьВозможностьОтправкиДокумента("ОтправитьЗаявкуНаКлиентеОтклоненные()");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьОтклоненные(Команда)
	
	Назначение = "СкопироватьОтклоненныеВНовыйДокумент()";
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированность", ЭтаФорма, Новый Структура("Назначение, СтатусОбновлен", "СкопироватьОтклоненныеВНовыйДокумент()")), 
				НСтр("ru = 'Перед копированием документ будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе

		Выполнить(Назначение);
		
	КонецЕсли;
	               
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьЦены(Команда)
	
	ОбновитьЦеныТоваровНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьОтчетПоСтруктуреТехнологов(Команда)
	
	ОткрытьФорму("Отчет.ИзменениеЗакупочныхЦенРассылкаТехнологам.Форма");
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВидСтандартнаяОбработка = Истина;
		
		Объект.Товары.Очистить();
		
		Модифицированность = Истина;
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработкаВыбораВидНоменклатуры", ЭтаФорма), Элементы.ВидНоменклатуры.СписокВыбора, Элементы.ВидНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВидНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ВидНоменклатуры = Результат.Значение;
		ЗаполнитьОтветственныхРуководителей();
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуДокумента()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Ответственный = ТекущийПользователь;
		
		ЭтаФорма.Модифицированность = Истина;
		
		Объект.АвтоПереоценкаВсехТМ = Истина;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственныхРуководителей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РуководителиИзменениеЦен.Сотрудник,
	|	РуководителиИзменениеЦен.ЭлектронныйАдрес,
	|	РуководителиИзменениеЦен.ВидНоменклатуры,
	|	ВЫБОР
	|		КОГДА РуководителиИзменениеЦен.Сотрудник = &ТекущийПользователь
	|				И РуководителиИзменениеЦен.ПравоПодтверждения
	|				И РуководителиИзменениеЦен.ВидНоменклатуры = &ВидНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПравоПодтверждения
	|ИЗ
	|	РегистрСведений.РуководителиИзменениеЦен КАК РуководителиИзменениеЦен";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаРуководителей.Добавить(), Выборка);	
		
		Если Выборка.ПравоПодтверждения Тогда
			ПравоПодтверждения = Выборка.ПравоПодтверждения;
		КонецЕсли;
			
	КонецЦикла;     	
	
	ОбновитьДоступностьПодтверждения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПодтверждения()
	
	//Коммандный интерфейс
	Элементы.ФормаКомандаСогласовать.Видимость = ПравоПодтверждения;
	Элементы.ФормаКомандаОтклонить.Видимость   = ПравоПодтверждения;
	
	Элементы.ФормаПровести.Видимость           = ПравоПодтверждения;
	
	Элементы.ФормаПровестиИЗакрыть.Видимость         = ПравоПодтверждения;
	Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = ПравоПодтверждения;
	
	Элементы.ФормаКомандаЗаписатьИЗакрыть.Видимость         = НЕ ПравоПодтверждения;
	Элементы.ФормаКомандаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не ПравоПодтверждения;

	//Элементы формы
	Элементы.Дата.ТолькоПросмотр = Не ПравоПодтверждения;
	Элементы.Номер.ТолькоПросмотр = Не ПравоПодтверждения;
	
	Элементы.Статус.ТолькоПросмотр = Не ПравоПодтверждения;
	Элементы.ТоварыСтатус.ТолькоПросмотр = Не ПравоПодтверждения;
	
	Элементы.ТоварыКомментарийРуководитель.ТолькоПросмотр = Не ПравоПодтверждения;
	Элементы.ТоварыКомментарийТехнолог.ТолькоПросмотр = ПравоПодтверждения;
	
	Элементы.Ответственный.ТолькоПросмотр = Не ПравоПодтверждения;
	Элементы.Комментарий.ТолькоПросмотр   = Не ПравоПодтверждения;
	
	//Возможность редектирования (дополнительные права)
	ПравоРедактированияДаты = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеДатыИзменениеЗакупочныхЦен, Ложь);
	
	//Отображение автоотметки 
	Элементы.ТоварыХарактеристика.АвтоОтметкаНезаполненного = Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВозможностьРедактированияСтроки(Добавление = Ложь)
	
	Если ПравоПодтверждения Тогда
		Возврат Истина;
	КонецЕсли;

	Если Элементы.Товары.ТекущиеДанные = Неопределено И Не Добавление Тогда
		Возврат Истина;
	Иначе
		
		ИзменятьДанные = Истина;
		
		//Если запрос уже отправлен, включается проверка возможности редактирвоания данных
		//+++АК ILIK 2018.08.06 ИП-00019438
		//Если ЗначениеЗаполнено(Объект.Статус) Тогда
		Если ЗначениеЗаполнено(Объект.Статус) И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Ошибка") Тогда
		//---АК ILIK
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные; 
			
			ИзменятьДанные = Ложь;

			Если  ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Статус) Тогда
				
				Если Элементы.Товары.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.ОтправленЗапрос") Тогда
					//+++АК ILIK 2018.08.06 ИП-00019438
					//Сообщить(НСтр("ru = 'Запрещено редактировать данные отправленные на утверждение руководителю!'"));
					СтрокаСообщения = "Запрещено редактировать данные отправленные на утверждение руководителю!";
					//---АК ILIK
				Иначе
					//+++АК ILIK 2018.08.06 ИП-00019438
					//Сообщить(НСтр("ru = 'Запрещено редактировать данные обработанные руководителем!'"));
					СтрокаСообщения = "Запрещено редактировать данные обработанные руководителем!";
					//---АК ILIK
				КонецЕсли;
			Иначе
				//+++АК ILIK 2018.08.06 ИП-00019438
				//Сообщить(СтрЗаменить(НСтр("ru = 'Запрещено редактировать данные в статусе СтатусДокумента!'"), "СтатусДокумента", Объект.Статус ));
				СтрокаСообщения = СтрЗаменить("Запрещено редактировать данные в статусе СтатусДокумента!", "СтатусДокумента", Объект.Статус);
				//---АК ILIK
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ВидНоменклатуры <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар") Тогда
			
			НайденныеСтроки = ТаблицаРуководителей.НайтиСтроки(Новый Структура("Сотрудник, ВидНоменклатуры", ТекущийПользователь, Объект.ВидНоменклатуры));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				//+++АК ILIK 2018.08.06 ИП-00019438
				//Сообщить(НСтр("ru = '"+СтрЗаменить(СтрЗаменить(СтрЗаменить("Пользователю Пользователь запрещено редактировать данные по виду номенклуры ВидНоменклатуры!",
				//							"Пользователь",ТекущийПользователь),"ВидНоменклатуры", Объект.ВидНоменклатуры), "Материал", "Упаковка")+"'"));
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС)
												  + СтрЗаменить(СтрЗаменить(СтрЗаменить("Пользователю Пользователь запрещено редактировать данные по виду номенклуры ВидНоменклатуры!",
																						"Пользователь", ТекущийПользователь), "ВидНоменклатуры", Объект.ВидНоменклатуры), "Материал", "Упаковка");
				//---АК ILIK
				ИзменятьДанные = Ложь;	
			КонецЕсли;
			
		КонецЕсли;
		
		//+++АК ILIK 2018.08.06 ИП-00019438
		Если Не ПустаяСтрока(СтрокаСообщения) Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
		КонецЕсли;
		//---АК ILIK
		
		Возврат ИзменятьДанные;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КонтрольВыбораНоменклатуры()
	
	Если Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыНоменклатура"
		ИЛИ Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыХарактеристика"
		ИЛИ Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыДатаНачала" Тогда
		
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) И ЗначениеЗаполнено(ТекДанные.Характеристика) И ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаНачала", ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.ДатаНачала);
			
			СтрокиТаб = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТаб.Количество() > 1 Тогда
				
				Оповещение = Новый ОписаниеОповещения("КонтрольВыбораНоменклатурыВопросЗавершение", ЭтаФорма, СтруктураПоиска);
				
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Уже есть строка с данной номенклатурой, характеристикой и датой. Показать?'"), РежимДиалогаВопрос.ДаНет, 15 );
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВыбораНоменклатурыЗапетДублей(ИмяКолонки)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		
		ТекДанные = Элементы.Товары.ТекущиеДанные;

		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) И ЗначениеЗаполнено(ТекДанные.Характеристика) И ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаНачала", ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.ДатаНачала);
			
			СтрокиТаб = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТаб.Количество() > 1 Тогда
				
				ПоказатьПредупреждение(,НСтр("ru = 'Уже есть строка с данной номенклатурой, характеристикой и датой!'"),10, "Контроль внесения ""дублей""");
				
				ТекДанные[СтрЗаменить(ИмяКолонки, "Товары","")] = Неопределено;     
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВыбораНоменклатурыВопросЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Товары.Удалить(Элементы.Товары.ТекущиеДанные);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ДопПараметры);
		
		Элементы.Товары.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Элементы.Товары.ВыделенныеСтроки.Добавить(НайденныеСтроки[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюСтрокуВыборЧерезВвод() Экспорт
	
    Этаформа.ПодчиненныеЭлементы.Товары.ТекущиеДанные.Характеристика = КэшХарактеристикаНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуТабличнойЧасти(ТекущиеДанные, ВыборНоменклатуры, ЗаменаПоставщика = Истина);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			
			СтруктураЦен = ПолучитьСтруктуруХарактеристикЦен(Новый Структура("Номенклатура, Характеристика, Период, Поставщик, ДокументСсылка, ТекущийПользователь, ПравоПодтверждения, ВидНоменклатуры", 
										ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, Объект.Дата, ТекущиеДанные.Поставщик, Объект.Ссылка, ТекущийПользователь, ПравоПодтверждения, Объект.ВидНоменклатуры));
			
			Если СтруктураЦен <> Неопределено Тогда
				
				ТекущиеДанные.Цена = СтруктураЦен.Цена;
				ТекущиеДанные.Дата = СтруктураЦен.Дата;
				ТекущиеДанные.Характеристика = СтруктураЦен.Характеристика;
				
				Если ЗаменаПоставщика ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда 
					ТекущиеДанные.Поставщик = СтруктураЦен.Поставщик;
				КонецЕсли;

				Модифицированность = Истина;
			Иначе
				ОчиститьДанныеСтроки(ТекущиеДанные, Ложь, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуТабличнойЧасти(ТекущиеДанные)
	
	СтруктураСтроки = ПолучитьСтруктуруЦенНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, Объект.Дата);
	
	Если СтруктураСтроки <> Неопределено Тогда
	 	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруХарактеристикЦен(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	МАКСИМУМ(ЦеныПоставщиков.Период) КАК Период,
	|	ЦеныПоставщиков.Номенклатура,
	|	ЦеныПоставщиков.Характеристика
	|ПОМЕСТИТЬ ВТ_ПоследниеДаты
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|ГДЕ
	|	ЦеныПоставщиков.Номенклатура = &Владелец
	|	И ВЫБОР
	|			КОГДА &Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ИЛИ &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Оборудование)
	|				ТОГДА ЦеныПоставщиков.Характеристика = &Характеристика
	|			КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И &ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныПоставщиков.Характеристика В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ДоступныеХарактеристики.Объект КАК Характеристика
	|					ИЗ
	|						(ВЫБРАТЬ
	|							СоответствиеОбъектРольСрезПоследних.Объект КАК Характеристика
	|						ИЗ
	|							(ВЫБРАТЬ
	|								РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
	|							ИЗ
	|								Справочник.Пользователи КАК Пользователи
	|									ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|										ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|										ПО
	|											РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка
	|									ПО
	|										Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	|							ГДЕ
	|								РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
	|								И ВЫБОР
	|									КОГДА &ОтборПоПользователю
	|										ТОГДА Пользователи.Ссылка = &ТекущийПользователь
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|							СГРУППИРОВАТЬ ПО
	|								РолиПользователейСоставРоли.Ссылка
	|		
	|							ОБЪЕДИНИТЬ
	|		
	|							ВЫБРАТЬ
	|								РолиПользователейТипыРолей.Ссылка.Родитель
	|							ИЗ
	|								Справочник.Пользователи КАК Пользователи
	|									ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|										ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|										ПО
	|											РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка
	|									ПО
	|										Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	|							ГДЕ
	|								ИСТИНА
	|								И ВЫБОР
	|									КОГДА &ОтборПоПользователю
	|										ТОГДА Пользователи.Ссылка = &ТекущийПользователь
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|							СГРУППИРОВАТЬ ПО
	|								РолиПользователейТипыРолей.Ссылка.Родитель) КАК Таб_ФункциональныеРоли
	|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРолиID = ""TechnologPoKachestvu""
	|									И Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры) КАК СоответствиеОбъектРольСрезПоследних
	|								ПО
	|									Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя) КАК Таб_ДоступныеХарактеристики
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДоступныеХарактеристики
	|							ПО
	|								Таб_ДоступныеХарактеристики.Характеристика = ДоступныеХарактеристики.Объект
	|									И ДоступныеХарактеристики.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ГДЕ
	|						ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
	|					СГРУППИРОВАТЬ ПО
	|						ДоступныеХарактеристики.Объект
	|		
	|					ОБЪЕДИНИТЬ
	|		
	|					ВЫБРАТЬ
	|						ДоступныеХарактеристики.Объект
	|					ИЗ
	|						(ВЫБРАТЬ
	|							СоответствиеОбъектРольСрезПоследних.Объект КАК Контрагент
	|						ИЗ
	|							(ВЫБРАТЬ
	|								РолиПользователейСоставРоли.Ссылка КАК ФункциональнаяРоль
	|							ИЗ
	|								Справочник.Пользователи КАК Пользователи
	|									ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|										ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|										ПО
	|											РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка
	|									ПО
	|										Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	|							ГДЕ
	|								РолиПользователейТипыРолей.ТипРоли.Код = ""TechnologPoKachestvu""
	|								И ВЫБОР
	|									КОГДА &ОтборПоПользователю
	|										ТОГДА Пользователи.Ссылка = &ТекущийПользователь
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|							СГРУППИРОВАТЬ ПО
	|								РолиПользователейСоставРоли.Ссылка
	|		
	|							ОБЪЕДИНИТЬ
	|		
	|							ВЫБРАТЬ
	|								РолиПользователейТипыРолей.Ссылка.Родитель
	|							ИЗ
	|								Справочник.Пользователи КАК Пользователи
	|									ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|										ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|										ПО
	|											РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка
	|									ПО
	|										Пользователи.ФизЛицо = РолиПользователейСоставРоли.Сотрудник
	|							ГДЕ
	|								ИСТИНА
	|								И ВЫБОР
	|									КОГДА &ОтборПоПользователю
	|										ТОГДА Пользователи.Ссылка = &ТекущийПользователь
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|							СГРУППИРОВАТЬ ПО
	|								РолиПользователейТипыРолей.Ссылка.Родитель) КАК Таб_ФункциональныеРоли
	|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Период, ТипРолиID = ""TechnologPoKachestvu""
	|									И Объект ССЫЛКА Справочник.Контрагенты) КАК СоответствиеОбъектРольСрезПоследних
	|								ПО
	|									Таб_ФункциональныеРоли.ФункциональнаяРоль = СоответствиеОбъектРольСрезПоследних.РольПользователя) КАК Таб_ДоступныеКонтрагенты
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДоступныеХарактеристики
	|							ПО
	|								Таб_ДоступныеКонтрагенты.Контрагент = ДоступныеХарактеристики.Значение
	|									И ДоступныеХарактеристики.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	|					ГДЕ
	|						ВЫРАЗИТЬ(ДоступныеХарактеристики.Объект КАК Справочник.ХарактеристикиНоменклатуры).Неактивная = ЛОЖЬ
	|					СГРУППИРОВАТЬ ПО
	|						ДоступныеХарактеристики.Объект)
	|		КОНЕЦ
	|	И ЦеныПоставщиков.Период <= &Период
	|	И ВЫБОР
	|			КОГДА &Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ЦеныПоставщиков.Поставщик = &Поставщик
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДокументСсылка <> ЗНАЧЕНИЕ(Документ.ИзменениеЗакупочныхЦен.ПустаяСсылка)
	|				ТОГДА ЦеныПоставщиков.Документ <> &ДокументСсылка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЦеныПоставщиков.Период <= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныПоставщиков.Номенклатура,
	|	ЦеныПоставщиков.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПоследниеДаты.Период,
	|	ВТ_ПоследниеДаты.Номенклатура,
	|	ВТ_ПоследниеДаты.Характеристика,
	|	ЦеныПоставщиков.Цена,
	|	ЦеныПоставщиков.Поставщик
	|ПОМЕСТИТЬ ВТ_ЦеныПоставщиков
	|ИЗ
	|	ВТ_ПоследниеДаты КАК ВТ_ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|		ПО ВТ_ПоследниеДаты.Номенклатура = ЦеныПоставщиков.Номенклатура
	|			И ВТ_ПоследниеДаты.Характеристика = ЦеныПоставщиков.Характеристика
	|			И ВТ_ПоследниеДаты.Период = ЦеныПоставщиков.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ВТ_ЦеныПоставщиков.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ВТ_ЦеныПоставщиков.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель,
	|	ЕСТЬNULL(ВТ_ЦеныПоставщиков.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Дата,
	|	ЕСТЬNULL(ВТ_ЦеныПоставщиков.Цена, 0) КАК Цена
	|ИЗ
	|	ВТ_ЦеныПоставщиков КАК ВТ_ЦеныПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО (ЗначенияСвойствОбъектов.Объект = СправочникХарактеристикиНоменклатуры.Ссылка)
	|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ПО ВТ_ЦеныПоставщиков.Характеристика = СправочникХарактеристикиНоменклатуры.Ссылка
	|			И ВТ_ЦеныПоставщиков.Номенклатура = СправочникХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	ВТ_ЦеныПоставщиков.Номенклатура = &Владелец
	|	И ВЫБОР
	|			КОГДА &Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА СправочникХарактеристикиНоменклатуры.Ссылка = &Характеристика
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА НЕ СправочникХарактеристикиНоменклатуры.Неактивная
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	//Обнаружена ситуация, где в строке характеристика не соответствует номенклатуре.
	//Возникает при копировании документа с неполным заполнением
	Если ЗначениеЗаполнено(СтруктураПараметров.Характеристика) И СтруктураПараметров.Характеристика.Владелец <> СтруктураПараметров.Номенклатура Тогда
		СтруктураПараметров.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("Владелец", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Поставщик", СтруктураПараметров.Поставщик);
	Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураПараметров.ДокументСсылка);
	Запрос.УстановитьПараметр("ОтборПоПользователю", Не СтруктураПараметров.ПравоПодтверждения);
	Запрос.УстановитьПараметр("ТекущийПользователь", СтруктураПараметров.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТипРолиТехнолог",  Перечисления.ТипыРолейПользователейМОС.Технолог);
	Запрос.УстановитьПараметр("ВидНоменклатуры", СтруктураПараметров.ВидНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Новый Структура("Номенклатура, Характеристика, Поставщик, Дата, Цена", 
								Выборка.Номенклатура, Выборка.Характеристика, Выборка.Поставщик, Выборка.Дата, Выборка.Цена);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЦенНоменклатуры(Номенклатура, Характеристика, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЦеныПоставщиков.Период) КАК Период,
	|	ЦеныПоставщиков.Номенклатура,
	|	ЦеныПоставщиков.Характеристика
	|ПОМЕСТИТЬ ВТ_ПоследниеДаты
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|ГДЕ
	|	ЦеныПоставщиков.Номенклатура = &Номенклатура
	|	И ЦеныПоставщиков.Характеристика = &Характеристика
	|	И ЦеныПоставщиков.Период <= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныПоставщиков.Номенклатура,
	|	ЦеныПоставщиков.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПоследниеДаты.Период КАК Дата,
	|	ВТ_ПоследниеДаты.Номенклатура,
	|	ВТ_ПоследниеДаты.Характеристика,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, 0) КАК Цена
	|ИЗ
	|	ВТ_ПоследниеДаты КАК ВТ_ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков КАК ЦеныПоставщиков
	|		ПО ВТ_ПоследниеДаты.Номенклатура = ЦеныПоставщиков.Номенклатура
	|			И ВТ_ПоследниеДаты.Характеристика = ЦеныПоставщиков.Характеристика
	|			И ВТ_ПоследниеДаты.Период = ЦеныПоставщиков.Период";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Новый Структура("Дата, Цена", Выборка.Дата, Выборка.Цена);
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусДокумента(ОтправкаПисьма = Ложь, ЗаписыватьДокумент = Ложь) 
	
	//Установка статуса отправки запроса
	Если ОтправкаПисьма Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.ОтправленЗапрос");
			Для Каждого Строка Из Объект.Товары Цикл
				Если НЕ ЗначениеЗаполнено(Строка.Статус) Тогда
					 Строка.Статус = Объект.Статус; 
				КонецЕсли;
			КонецЦикла;
			
			Если ЗаписыватьДокумент Тогда
				Записать();
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	////Установка остальных статусов  2018.06.26 Отключено по просьбе
	//Если НЕ ЗначениеЗаполнено(Объект.Статус) 
	//	ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Отклонено")
	//	ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.ОтправленЗапрос") Тогда
	//	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Согласовано");
	//Иначе
	//	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Отклонено");
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСтроки() 
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	//+++АК ILIK 2018.09.07 ИП-00019438
	ПроверитьЗаполнениеОбязательныхПолей(,, ТекущиеДанные.ПолучитьИдентификатор());
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
		Возврат;
	КонецЕсли;
	//---АК ILIK
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Статус) 
		ИЛИ ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Отклонено") Тогда
		ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Согласовано");
	Иначе
		ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Отклонено");
	КонецЕсли;
	
	ОбработатьСтатусыДокумента(Ложь);
	
	ОбновитьМодифицированностьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСтроки(ТекущиеДанные, ОчищатьНоменклатуру = Ложь, ОчищатьХарактеристику = Ложь)
	
	ТекущиеДанные.Дата = Дата(1,1,1);
	ТекущиеДанные.Цена = 0;
	ТекущиеДанные.ЦенаНовая = 0;
	
	Если ОчищатьНоменклатуру Тогда
		ТекущиеДанные.Номенклатура   = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если ОчищатьХарактеристику Тогда
		ТекущиеДанные.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатусыДокумента(ОбработкаТабличнойЧасти = Ложь) 
	
	Если ОбработкаТабличнойЧасти Тогда
		Для каждого Строка Из Объект.Товары Цикл
			Строка.Статус = Объект.Статус;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствиеСтатусов = Новый Соответствие();
	
	Для каждого Строка Из Объект.Товары Цикл
		СоответствиеСтатусов.Вставить(Строка.Статус, Строка.Статус);
	КонецЦикла;		
	
	ОбновитьЗаголовок = Ложь;
	Если СоответствиеСтатусов.Количество() = 1 Тогда
		Объект.Статус = Строка.Статус;
		ОбновитьЗаголовок = Истина;
	ИначеЕсли СоответствиеСтатусов.Количество() > 0 Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.ЧастичноСогласовано");
		ОбновитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ОбновитьЗаголовок Тогда
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Этаформа.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = Строка(Объект.Ссылка) + ?(Объект.ПометкаУдаления, "(Помечен на удаление)", "") 
								+ ?(ЗначениеЗаполнено(Объект.Статус), " " + Объект.Статус, " Новый ");
	КонецЕсли;
	
	Элементы.НадписьРольПользователя.Заголовок = ?(ПравоПодтверждения, "Текущая роль: Руководитель", "Текущая роль: Технолог");
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьСтатусыТабличнойЧасти(Согласовано = Ложь)
	
	//+++АК ILIK 2018.09.07 ИП-00019438
	ПроверитьЗаполнениеОбязательныхПолей();
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
		Возврат;
	КонецЕсли;
	//---АК ILIK
	
	Если Согласовано Тогда
		УстановленныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Согласовано");
	Иначе
		УстановленныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.Отклонено");
	КонецЕсли;

	Объект.Статус = УстановленныйСтатус;
	
	Для каждого Строка Из Объект.Товары Цикл
		Строка.Статус = УстановленныйСтатус;
	КонецЦикла;
	
	ОбновитьЗаголовокФормы();
	
	ОбновитьМодифицированностьФормы();
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьМодифицированностьФормы()
	
	Если НЕ ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьВозможностьОтправкиДокумента(Назначение, ОбновлятьСтатус = Истина)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированность", ЭтаФорма, Новый Структура("Назначение", Назначение)), 
				НСтр("ru = 'Перед отправкой документ будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		//+++АК ILIK 2018.08.06 ИП-00019438
		//Если ОбновлятьСтатус Тогда
		//	ОбновитьСтатусДокумента(Истина, Истина);
		//КонецЕсли;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗаписьПередКомандой", Истина);
		ПараметрыЗаписи.Вставить("ОтправкаЗаявки", ОбновлятьСтатус);
		
		Записать(ПараметрыЗаписи);
		//---АК ILIK
		
		Выполнить(Назначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияВопросаМодифицированность(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		//+++АК ILIK 2018.08.06 ИП-00019438
		//Если НЕ ДополнительныеПараметры.Свойство("СтатусОбновлен") Тогда 
		//	ОбновитьСтатусДокумента(Истина, Ложь);
		//КонецЕсли;
		
		//Записать();
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗаписьПередКомандой", Истина);
		ПараметрыЗаписи.Вставить("ОтправкаЗаявки", НЕ ДополнительныеПараметры.Свойство("СтатусОбновлен"));
		
		Записать(ПараметрыЗаписи);
		//---АК ILIK
		
		Выполнить(ДополнительныеПараметры.Назначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияВопросаМодифицированностьОтчет(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		//+++АК ILIK 2018.08.06 ИП-00019438
		//Записать();
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗаписьПередКомандой", Истина);
		
		Записать(ПараметрыЗаписи);
		//---АК ILIK
		
		ПредварительныйПросмотрОтчета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьПисьмаТехнологам(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтправкаПисемТехнологам", ЭтаФорма, Новый Структура("Назначение, СтатусОбновлен", "ОтправитьПисьмаТехнологамСервер()")), 
		  НСтр("ru = 'Отправить письма технологам с информацией о ценах по текущему документу?'"), РежимДиалогаВопрос.ДаНет);
		  
КонецПроцедуры
	  
&НаКлиенте
Процедура ПослеЗакрытияВопросаОтправкаПисемТехнологам(Результат, ДополнительныеПараметры) Экспорт
	
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаМодифицированность", ЭтаФорма, Новый Структура("Назначение, СтатусОбновлен", ДополнительныеПараметры.Назначение)), 
				НСтр("ru = 'Перед отправкой документ будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе

		Выполнить(ДополнительныеПараметры.Назначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОтправитьПисьмо()
	
КонецПроцедуры

&НаКлиенте 
Процедура ОтправитьЗаявкуНаКлиенте()
	
	ОтправитьЗаявкуНаСервере(Новый Структура("ТолькоОтклоненные, Дата, ВидНоменклатуры", Ложь, Объект.Дата, Объект.ВидНоменклатуры));
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОтправитьЗаявкуНаКлиентеОтклоненные()
	
	ОтправитьЗаявкуНаСервере(Новый Структура("ТолькоОтклоненные, Дата, ВидНоменклатуры", Истина, Объект.Дата, Объект.ВидНоменклатуры));

КонецПроцедуры

&НаСервере
Процедура ОтправитьЗаявкуНаСервере(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ПосмотретьОтчет") И СтруктураПараметров.ПосмотретьОтчет Тогда
		
		СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
		 
		Документы.ИзменениеЗакупочныхЦен.ОтправитьЗапросРуководителюНаИзменениеЦен(СтруктураПараметров);
		
	Иначе
		
		//+++АК ILIK 2018.08.06 ИП-00019438
		// код перенесен в форму, событие ПередЗаписью
		
		ОтказОтправки = ?(ПустаяСтрока(СтрокаСообщения), Ложь, Истина);
		//---АК ILIK
				
		//Формирование и отправка отчета фоновым заданием(Таблица Расчет потерь SQL может формироваться несколько минут) 
		Если ОтказОтправки = Ложь Тогда
			
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить(Объект.Ссылка);
			МассивПараметров.Добавить(ЗначениеВСтрокуВнутр(СтруктураПараметров));
			
			ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ОтправитьПисьмоФоновоеЗадание", МассивПараметров, Новый УникальныйИдентификатор(), "Отправка запроса на изменения цен поставщиков"); 
			
		//+++АК ILIK 2018.08.06 ИП-00019438
		//	Сообщить(НСтр("ru = 'Письмо успешно добавлено в очередь для отправки!'"));
			СтрокаСообщения = "Письмо успешно добавлено в очередь для отправки!";
		//Иначе
		//	Сообщить(НСтр("ru = 'Перед отправкой должны быть заполнены все обязательные поля!'"), СтатусСообщения.ОченьВажное);
		//---АК ILIK
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПоставщикаПоЧастиТекста(Текст)
	
    Возврат ПолучитьДанныеВыбора(Тип("ДокументСсылка.ИзменениеЗакупочныхЦен"), 
			Новый Структура("ДополнительныеПараметры, ТекстПоиска, Период, ОтборПоПользователю, ТекущийПользователь, ВидНоменклатуры", "ПодборДляТехнологовПоставщик", Текст, Объект.Дата, Не ПравоПодтверждения, ТекущийПользователь, Объект.ВидНоменклатуры));
	
КонецФункции

&НаКлиенте
Функция ПолучитьНоменклатуруПоЧастиТекста(Текст)
	
    Возврат ПолучитьДанныеВыбора(Тип("ДокументСсылка.ИзменениеЗакупочныхЦен"), 
			Новый Структура("ДополнительныеПараметры, ТекстПоиска, Период, ОтборПоПользователю, Поставщик, ТекущийПользователь, ВидНоменклатуры", "ПодборДляТехнологовНоменклатура", 
				Текст, Объект.Дата, Не ПравоПодтверждения, Элементы.Товары.ТекущиеДанные.Поставщик, ТекущийПользователь, Объект.ВидНоменклатуры));
	
КонецФункции

&НаКлиенте
Процедура ПредварительныйПросмотрОтчета()
	
	//+++АК ILIK 2018.08.06 ИП-00019438
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
        Возврат;
	КонецЕсли;
	//---АК ILIK
	
	СтруктураПараметров = Новый Структура("ТолькоОтклоненные, Дата , ПосмотретьОтчет, ВидНоменклатуры", Ложь, Объект.Дата, Истина, Объект.ВидНоменклатуры);
	
	ОтправитьЗаявкуНаСервере(СтруктураПараметров);
	
	Если СтруктураПараметров.ПосмотретьОтчет Тогда
		ОткрытьФорму("Документ.ИзменениеЗакупочныхЦен.Форма.ФормаРасчетПотерьSQL", Новый Структура("ТекстHTML", СтруктураПараметров.ТекстHTML), ЭтаФорма, Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеЯчейки(ТекущиеДанные, ИмяЯчейки, СтандартнаяОбработка, ОткрытьЗначение = Ложь)
	
	//Возможность открытия по двойному клику "заблокированных" ячеек
	Если ТекущиеДанные <> Неопределено Тогда
		Если Элементы.Товары.ПодчиненныеЭлементы[ИмяЯчейки].ТолькоПросмотр ИЛИ ОткрытьЗначение Тогда
			СтандартнаяОбработка = Ложь;
			ТекущееЗначение = ТекущиеДанные[СтрЗаменить(ИмяЯчейки, "Товары","")];
			Если ЗначениеЗаполнено(ТекущееЗначение)
				И (ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.Номенклатура")
					ИЛИ (ПравоПодтверждения И ОткрытьЗначение И ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры"))  
						ИЛИ ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.Контрагенты")) Тогда
						
				ОткрытьЗначение(ТекущееЗначение);
						
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтклоненныеВНовыйДокумент()
	
	//+++АК ILIK 2018.08.06 ИП-00019438
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
        Возврат;
	КонецЕсли;
	//---АК ILIK
	
	ОткрытьФорму("Документ.ИзменениеЗакупочныхЦен.Форма.ФормаДокумента", Новый Структура("Основание", 
	Новый Структура("Основание, ТолькоОтклоненные", Объект.Ссылка, Истина)), ЭтаФорма, Новый УникальныйИдентификатор());

КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныТоваровНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ЗаполнитьТаблицуЦенамиПоставщиков(Объект.Ссылка);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

//+++АК ILIK 2018.08.06 ИП-00019438
&НаКлиенте
Процедура ОчиститьСтрокуСообщения(ДополнительныеПараметры) Экспорт
	СтрокаСообщения = "";
КонецПроцедуры

//+++АК ILIK 2018.09.07 ИП-00019438
&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхПолейВСтроке(СтрокаТовары, СписокОбязятельныхПолей)
	Для Каждого ОбязательноеПоле Из СписокОбязятельныхПолей Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары[ОбязательноеПоле.Значение]) Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС)
							+ "В строке номер """ + СокрЛП(СтрокаТовары.НомерСтроки) + """ табличной части ""Товары"": "
							+ "Не заполнено значение реквизита """ + ОбязательноеПоле.Представление + """!";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//+++АК ILIK 2018.08.06 ИП-00019438
&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхПолей(Отказ = Неопределено, ПараметрыЗаписи = Неопределено, ИдентификаторСтроки = Неопределено)
	СписокОбязятельныхПолей = Новый СписокЗначений;
	СписокОбязятельныхПолей.Добавить("Номенклатура", "Номенклатура");
	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар Тогда
		СписокОбязятельныхПолей.Добавить("Характеристика", "Характеристика");
	КонецЕсли;
	СписокОбязятельныхПолей.Добавить("Поставщик", "Поставщик");
	СписокОбязятельныхПолей.Добавить("ЦенаНовая", "Цена новая");
	СписокОбязятельныхПолей.Добавить("ДатаНачала", "Дата (начала)");
	Если ЗначениеЗаполнено(ПараметрыЗаписи) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СписокОбязятельныхПолей.Добавить("Статус", "Статус");
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ПроверитьЗаполнениеОбязательныхПолейВСтроке(СтрокаТовары, СписокОбязятельныхПолей);
		КонецЦикла;
	Иначе
		ПроверитьЗаполнениеОбязательныхПолейВСтроке(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки), СписокОбязятельныхПолей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Статус) И Объект.Статус <> Перечисления.СтатусыПодтвержденияИзмененияЦен.Ошибка)
	  Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не ПустаяСтрока(СтрокаСообщения) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		ОбновитьСтатусДокументаСервер(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.08.06 ИП-00019438
&НаСервере
Процедура ОбновитьСтатусДокументаСервер(ПараметрыЗаписи)
	Если ПустаяСтрока(СтрокаСообщения) Тогда
		Если ПараметрыЗаписи.Свойство("ОтправкаЗаявки") И ПараметрыЗаписи.ОтправкаЗаявки Тогда
			Объект.Статус = Перечисления.СтатусыПодтвержденияИзмененияЦен.ОтправленЗапрос;
			
			Для Каждого Строка Из Объект.Товары Цикл
				Если Не ЗначениеЗаполнено(Строка.Статус) Тогда
					 Строка.Статус = Объект.Статус; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Объект.Статус = Перечисления.СтатусыПодтвержденияИзмененияЦен.Ошибка;
	КонецЕсли;
КонецПроцедуры

//+++АК ILIK 2018.08.06 ИП-00019438
&НаСервере
Процедура ПроверитьНаличиеКомплектов(Отказ)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// перенесено из ОбработкаПроверкиЗаполнения
	
	//+++АК LAGP 2018.08.02 ИП-00019302 Проверка на наличие комплектов (нельзя) в документе.
	//Проверка на наличие комплектов в табличной части (не у всех комплектов есть признак "это комплект" в карточке номенклатуры)
	МассивТоваров = ДокументОбъект.Товары.ВыгрузитьКолонку("Номенклатура");
	
	ЗапросКомплектов = Новый Запрос;
	ЗапросКомплектов.Текст = "ВЫБРАТЬ
	                         |	СоставКомплектаСрезПоследних.Комплект,
	                         |	СоставКомплектаСрезПоследних.Характеристика
	                         |ИЗ
	                         |	РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаДокумента, Комплект В (&НоменклатураКомплект)) КАК СоставКомплектаСрезПоследних";
	ЗапросКомплектов.УстановитьПараметр("НоменклатураКомплект", МассивТоваров);
	ЗапросКомплектов.УстановитьПараметр("ДатаДокумента", ДокументОбъект.Дата);
	
	ВыборкаДетальныеЗаписиКомплектов = ЗапросКомплектов.Выполнить().Выбрать();	
	Пока ВыборкаДетальныеЗаписиКомплектов.Следующий() Цикл
		НайденнаяСтрокаКомплектВДокументе = ДокументОбъект.Товары.Найти(ВыборкаДетальныеЗаписиКомплектов.Комплект, "Номенклатура");
		Если ЗначениеЗаполнено(НайденнаяСтрокаКомплектВДокументе) И НайденнаяСтрокаКомплектВДокументе.Характеристика = ВыборкаДетальныеЗаписиКомплектов.Характеристика Тогда
			//+++АК ILIK 2018.08.06 ИП-00019438
			//ОбщегоНазначения.СообщитьОбОшибке("Строка № " + НайденнаяСтрокаКомплектВДокументе.НомерСтроки + " комплект! Невозможно сохранение!", Истина);
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + "Строка № " + НайденнаяСтрокаКомплектВДокументе.НомерСтроки + " комплект! Невозможно сохранение!";
			//---АК ILIK
			Отказ = Истина;	
		КонецЕсли;	
	КонецЦикла;
	//---АК LAGP
КонецПроцедуры

#КонецОбласти

#Область УДАЛИТЬ_ОбластьТестирования

&НаКлиенте
Процедура УДАЛИТЬКомандаОчиститьСтатусы(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УДАЛИТЬПослеЗакрытияВопросаОчиститьСтатусы", ЭтаФорма, ), 
		        НСтр("ru = 'Очистить статусы документа?'"), РежимДиалогаВопрос.ДаНет);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УДАЛИТЬПослеЗакрытияВопросаОчиститьСтатусы(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодтвержденияИзмененияЦен.ПустаяСсылка");
		
		Для каждого Строка Из Объект.Товары Цикл
			Строка.Статус = Объект.Статус;
		КонецЦикла;
		
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УДАЛИТЬКомандаПравоПодтверждения(Команда)
	
	ПравоПодтверждения = Не ПравоПодтверждения;
	
	ОбновитьЗаголовокФормы();

	ОбновитьДоступностьПодтверждения();

КонецПроцедуры

&НаКлиенте
Процедура УДАЛИТЬКомандаПоказатьТекстЗапросаХранимойПроцедуры(Команда)

	Сообщить(ВывестиТекстОбращенияКХранимойПроцедуреSQL());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьРежимаТестирования()

	РежимТестирования = Не РежимТестирования;
	
	//Кнопки коммандной панели
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаУДАЛИТЬКомандаОчиститьСтатусы.Видимость = РежимТестирования;
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаУДАЛИТЬКомандаПравоПодтверждения.Видимость = РежимТестирования;
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаУДАЛИТЬКомандаПоказатьТекстЗапросаХранимойПроцедуры.Видимость =  РежимТестирования;
	
	//Элементы формы
	Элементы.ТекущийПользователь.Видимость = РежимТестирования;
	
	Элементы.ДекорацияНадписьДопИнформацияРежимТестирования.Видимость =  РежимТестирования;

	//Дополнительные действия
	ЗаполнитьДополнительнуюИнформациюРежимТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительнуюИнформациюРежимТестирования()
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ДекорацияНадписьДопИнформацияРежимТестирования.Заголовок = "";
		
	Иначе
		СтруктураДанных = ПолучитьСтруктуруДанныхРежимТестирования(Новый Структура("Номенклатура, Характеристика, Поставщик", 
									Элементы.Товары.ТекущиеДанные.Номенклатура, Элементы.Товары.ТекущиеДанные.Характеристика, Элементы.Товары.ТекущиеДанные.Поставщик));
									
		ДополнительнаяИнформация = "";
		
		Для каждого ЭлементСтруктуры ИЗ СтруктураДанных Цикл
			  ДополнительнаяИнформация = ДополнительнаяИнформация + " " + ЭлементСтруктуры.Значение;
		КонецЦикла;
									
		Элементы.ДекорацияНадписьДопИнформацияРежимТестирования.Заголовок = ДополнительнаяИнформация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхРежимТестирования(СтруктураПараметров)
	
	СтруктураДанных = Новый Структура();
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Номенклатура) Тогда
		СтруктураДанных.Вставить("id_tov", "id_tov: " + СтруктураПараметров.Номенклатура.id_tov);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Характеристика) Тогда
		СтруктураДанных.Вставить("id_kontr", "id_kontr: " + СтруктураПараметров.Поставщик.ИД);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция ВывестиТекстОбращенияКХранимойПроцедуреSQL()

	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", Объект.Товары.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ *, 
	|ВТ.Номенклатура.id_tov КАК id_tov,
	|ВТ.Характеристика.id_kontr КАК id_kontr
	|ИЗ
	| ВТ КАК ВТ
	|ГДЕ
	| ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		id_tov_param   = "";
		id_kontr_param = "";
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.id_tov) Тогда
				id_tov_param = id_tov_param + Формат(Выборка.id_tov, "ЧГ=0") + ",";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.id_kontr) Тогда
				id_kontr_param = id_kontr_param + Формат(Выборка.id_kontr, "ЧГ=0") + ",";
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(id_tov_param) И НЕ ЗначениеЗаполнено(id_kontr_param) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id_tov_param   = "" + Лев(id_tov_param, СтрДлина(id_tov_param)-1) + "";
		id_kontr_param = "" + Лев(id_kontr_param, СтрДлина(id_kontr_param)-1) + "";
		
		ТекстВызова = "EXEC M2.dbo.GetPostProd_idTovidKontr @id_tov = &id_tov_param , @id_kontr = &id_kontr_param, @kday = -30";
		
		ТекстВызова = СтрЗаменить(ТекстВызова, "&id_tov_param",  id_tov_param);
		ТекстВызова = СтрЗаменить(ТекстВызова, "&id_kontr_param", id_kontr_param);

		Возврат ТекстВызова;
		
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОтправитьПисьмаТехнологамСервер()
	
	Документы.ИзменениеЗакупочныхЦен.ОтправитьУведомленияТехнологамИзменениеЦен(Объект.Ссылка);
	
КонецПроцедуры

//+++АК POZM 2018.08.03 ИП-00019333 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+++АК ILIK 2018.08.06 ИП-00019438
	//ПроверитьЗаполнениеДокументаСервер(Отказ);
	ПроверитьЗаполнениеДокументаСервер(Отказ, ПараметрыЗаписи);
	
	ОбновитьЗаголовокФормы();
	
	Если Не ПустаяСтрока(СтрокаСообщения) И Не ПараметрыЗаписи.Свойство("ЗаписьПередКомандой") Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОчиститьСтрокуСообщения", ЭтаФорма), СтрокаСообщения);
	КонецЕсли;
	//---АК ILIK
	
КонецПроцедуры

&НаСервере
//+++АК ILIK 2018.08.06 ИП-00019438
//Процедура ПроверитьЗаполнениеДокументаСервер(Отказ)
Процедура ПроверитьЗаполнениеДокументаСервер(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.Статус <> Перечисления.СтатусыПодтвержденияИзмененияЦен.Согласовано 
		   И Объект.Статус <> Перечисления.СтатусыПодтвержденияИзмененияЦен.ЧастичноСогласовано Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + "Проводить можно только документы со статусом «Согласовано» или «Частично согласовано»";
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ПроверитьНаличиеКомплектов(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Статус) И Объект.Статус <> Перечисления.СтатусыПодтвержденияИзмененияЦен.ОтправленЗапрос И Объект.Статус <> Перечисления.СтатусыПодтвержденияИзмененияЦен.Ошибка Тогда
		Отказ = РеквизитФормыВЗначение("Объект").ПроверитьВозможностьИзмененияДанных();
		Если Отказ Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + "Запрещено редактировать данные обработанные руководителем!";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеОбязательныхПолей(Отказ, ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
//---АК ILIK

	ТекстЗапроса="ВЫБРАТЬ
	             |	ТабДок.Номенклатура
	             |ПОМЕСТИТЬ ТЧДокумента
	             |ИЗ
	             |	&ТЧ КАК ТабДок
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СпрНоменклатура.ТорговаяМарка
	             |ИЗ
	             |	ТЧДокумента КАК ТЧДокумента
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	             |		ПО ТЧДокумента.Номенклатура = СпрНоменклатура.Ссылка
	             |ГДЕ
	             |	(СпрНоменклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.Вкусвилл)
	             |			ИЛИ СпрНоменклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.Избенка)
	             |			ИЛИ СпрНоменклатура.ТорговаяМарка = ЗНАЧЕНИЕ(Справочник.ТорговыеМарки.ЗеленаяЛиния))
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СпрНоменклатура.ТорговаяМарка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТЧ",Объект.Товары.Выгрузить());
	
	ТЗМарок = Запрос.Выполнить().Выгрузить();
	Если ТЗМарок.Количество() > 1 Тогда
		//+++АК ILIK 2018.08.06 ИП-00019438
		//Сообщение = Новый СообщениеПользователю();
		//Сообщение.Текст = "Установка цен по разным торговым маркам запрещена!";
		//Сообщение.Поле = "Товары";
		//Сообщение.Сообщить();
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + "Установка цен по разным торговым маркам запрещена!";
		Объект.Статус = Перечисления.СтатусыПодтвержденияИзмененияЦен.Ошибка;
		//---АК ILIK
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

//---АК POZM

#КонецОбласти
