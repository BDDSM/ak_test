
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	//Если Оценки.Количество() = 0 Тогда
	//	Оценки.Добавить();
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
	//	Если ЭтотОбъект.Количество = 0 И НЕ ЭтотОбъект.Номенклатура.Весовой Тогда
	//		ЭтотОбъект.Количество = 1;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда ЭтотОбъект.Закрыта = Истина; КонецЕсли;
	
	// заполняем таблицу значений для проведения операций на sql
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЗадачаТехнологаНаДегустациюОценки.НомерСтроки) КАК НомерСтроки,
			|	ЗадачаТехнологаНаДегустацию.Номенклатура,
			|	ЗадачаТехнологаНаДегустацию.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ДокЗаданиеТехнологаНаДегустацию.ЕдиницаИзмерения,
			|	ДокЗаданиеТехнологаНаДегустацию.Цена,
			|	ЗадачаТехнологаНаДегустациюОценки.ДатаПроизводства,
			|	СУММА(ЗадачаТехнологаНаДегустациюОценки.Количество) КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваровБыло
			|ИЗ
			|	Документ.ЗадачаТехнологаНаДегустацию.Оценки КАК ЗадачаТехнологаНаДегустациюОценки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗадачаТехнологаНаДегустацию КАК ЗадачаТехнологаНаДегустацию
			|		ПО ЗадачаТехнологаНаДегустациюОценки.Ссылка = ЗадачаТехнологаНаДегустацию.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаНаДегустацию КАК ДокЗаданиеТехнологаНаДегустацию
			|		ПО (ЗадачаТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию = ДокЗаданиеТехнологаНаДегустацию.Ссылка)
			|ГДЕ
			|	ЗадачаТехнологаНаДегустациюОценки.Ссылка = &Ссылка
			|	И ЗадачаТехнологаНаДегустацию.Проведен
			|	И НЕ ЗадачаТехнологаНаДегустациюОценки.Количество = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачаТехнологаНаДегустацию.Номенклатура,
			|	ЗадачаТехнологаНаДегустацию.ХарактеристикаНоменклатуры,
			|	ДокЗаданиеТехнологаНаДегустацию.ЕдиницаИзмерения,
			|	ДокЗаданиеТехнологаНаДегустацию.Цена,
			|	ЗадачаТехнологаНаДегустациюОценки.ДатаПроизводства
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.НомерСтроки,
			|	ТаблицаТоваров.ДатаПроизводства,
			|	ТаблицаТоваров.Количество
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	НЕ ТаблицаТоваров.Количество = 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ЗадачаТехнологаНаДегустациюОценки.НомерСтроки) КАК НомерСтроки,
			|	ЗадачаТехнологаНаДегустацию.Номенклатура,
			|	ЗадачаТехнологаНаДегустацию.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ДокЗаданиеТехнологаНаДегустацию.ЕдиницаИзмерения,
			|	ДокЗаданиеТехнологаНаДегустацию.Цена,
			|	ЗадачаТехнологаНаДегустациюОценки.ДатаПроизводства,
			|	СУММА(ЗадачаТехнологаНаДегустациюОценки.Количество) КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваровСтало
			|ИЗ
			|	ТаблицаТоваров КАК ЗадачаТехнологаНаДегустациюОценки
			|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ЗадачаТехнологаНаДегустацию КАК ЗадачаТехнологаНаДегустацию
			|		ПО (ИСТИНА)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеТехнологаНаДегустацию КАК ДокЗаданиеТехнологаНаДегустацию
			|		ПО (ЗадачаТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию = ДокЗаданиеТехнологаНаДегустацию.Ссылка)
			|ГДЕ
			|	ЗадачаТехнологаНаДегустацию.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачаТехнологаНаДегустацию.Номенклатура,
			|	ЗадачаТехнологаНаДегустацию.ХарактеристикаНоменклатуры,
			|	ДокЗаданиеТехнологаНаДегустацию.ЕдиницаИзмерения,
			|	ДокЗаданиеТехнологаНаДегустацию.Цена,
			|	ЗадачаТехнологаНаДегустациюОценки.ДатаПроизводства
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИСТИНА КАК Сторно,
			|	ТаблицаТоваровБыло.НомерСтроки,
			|	ТаблицаТоваровБыло.Номенклатура,
			|	ТаблицаТоваровБыло.Характеристика,
			|	ТаблицаТоваровБыло.ЕдиницаИзмерения,
			|	ТаблицаТоваровБыло.Количество - ЕСТЬNULL(ТаблицаТоваровСтало.Количество, 0) КАК Количество,
			|	ТаблицаТоваровБыло.ДатаПроизводства,
			|	ТаблицаТоваровБыло.Цена,
			|	ТаблицаТоваровБыло.Цена * (ТаблицаТоваровБыло.Количество - ЕСТЬNULL(ТаблицаТоваровСтало.Количество, 0)) КАК Сумма
			|ИЗ
			|	ТаблицаТоваровБыло КАК ТаблицаТоваровБыло
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровСтало КАК ТаблицаТоваровСтало
			|		ПО ТаблицаТоваровБыло.ДатаПроизводства = ТаблицаТоваровСтало.ДатаПроизводства
			|ГДЕ
			|	ТаблицаТоваровБыло.Количество > ЕСТЬNULL(ТаблицаТоваровСтало.Количество, 0)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЛОЖЬ,
			|	ТаблицаТоваровСтало.НомерСтроки,
			|	ТаблицаТоваровСтало.Номенклатура,
			|	ТаблицаТоваровСтало.Характеристика,
			|	ТаблицаТоваровСтало.ЕдиницаИзмерения,
			|	ТаблицаТоваровСтало.Количество - ЕСТЬNULL(ТаблицаТоваровБыло.Количество, 0),
			|	ТаблицаТоваровСтало.ДатаПроизводства,
			|	ТаблицаТоваровСтало.Цена,
			|	ТаблицаТоваровСтало.Цена * (ТаблицаТоваровСтало.Количество - ЕСТЬNULL(ТаблицаТоваровБыло.Количество, 0))
			|ИЗ
			|	ТаблицаТоваровСтало КАК ТаблицаТоваровСтало
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровБыло КАК ТаблицаТоваровБыло
			|		ПО ТаблицаТоваровСтало.ДатаПроизводства = ТаблицаТоваровБыло.ДатаПроизводства
			|ГДЕ
			|	ТаблицаТоваровСтало.Количество > ЕСТЬNULL(ТаблицаТоваровБыло.Количество, 0)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сторно УБЫВ");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТаблицаТоваров_ТоварныеОперации = Оценки.Выгрузить(, "НомерСтроки,ДатаПроизводства,Количество");
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров_ТоварныеОперации);
		
		ТаблицаДвижений_ТоварныеОперации = Запрос.Выполнить().Выгрузить();
		Если ТаблицаДвижений_ТоварныеОперации.Количество() > 0 И ТаблицаДвижений_ТоварныеОперации.НайтиСтроки(Новый Структура("Сторно", Ложь)).Количество() > 0 Тогда ID_Doc_SQL = Строка(Новый УникальныйИдентификатор()); КонецЕсли;
		ДополнительныеСвойства.Вставить("ТаблицаДвижений_ТоварныеОперации", ТаблицаДвижений_ТоварныеОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
Перем ТаблицаДвижений_ТоварныеОперации;
	
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	// изменений не было, ничего не делаем
	Если НЕ (ДополнительныеСвойства.Свойство("ТаблицаДвижений_ТоварныеОперации", ТаблицаДвижений_ТоварныеОперации) И ТаблицаДвижений_ТоварныеОперации.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипСкладскогоОрдера = "ПриходныйОрдерСклад";
	
	ОрдерНаСкладОбъект = Документы[ТипСкладскогоОрдера].СоздатьДокумент();
	ОрдерНаСкладОбъект.Дата = ТекущаяДата();
	ОрдерНаСкладОбъект.Заполнить(Ссылка);
	
	// если предыдущий складской ордер не пустой, сторнируем
	Если ЗначениеЗаполнено(Документы.ЗадачаТехнологаНаДегустацию.ПолучитьОрдерНаСклад(Ссылка)) Тогда
		ОрдерНаСкладОбъект.Товары.Очистить();
		
		Для Каждого СтрокаТД Из ТаблицаДвижений_ТоварныеОперации Цикл
			СтрокаТЧ = ОрдерНаСкладОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТД, "Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПроизводства");
			Если ТипСкладскогоОрдера = "ПеремещениеСклад" Тогда
				СтрокаТЧ.КоличествоОтправитель = ?(СтрокаТД.Сторно, -СтрокаТД.Количество, СтрокаТД.Количество);
				СтрокаТЧ.КоличествоПолучатель  = СтрокаТЧ.КоличествоОтправитель;
			Иначе
				СтрокаТЧ.Количество = ?(СтрокаТД.Сторно, -СтрокаТД.Количество, СтрокаТД.Количество);
			КонецЕсли;
		КонецЦикла;
		
		ОрдерНаСкладОбъект.Товары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПроизводства",
			?(ТипСкладскогоОрдера = "ПеремещениеСклад", "КоличествоОтправитель,КоличествоПолучатель", "Количество,КоличествоКоробок,КоличествоПаллет"));
	КонецЕсли;
	
	ОрдерНаСкладОбъект.Записать();
	ДополнительныеСвойства.Вставить("ОрдерНаСклад", ОрдерНаСкладОбъект.Ссылка);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьЗаданиеТехнологаНаДегустацию()
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
Перем ИДДок, ТочкаПолучатель, КодОперации, КодОбратнойОперации, ТаблицаДвижений_ТоварныеОперации;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию,
		|	ЗадачаТехнологаНаДегустацию.Номенклатура,
		|	ЗадачаТехнологаНаДегустацию.ХарактеристикаНоменклатуры,
		|	ЗадачаТехнологаНаДегустацию.Магазин,
		|	ЗадачаТехнологаНаДегустациюОценки.Оценка,
		|	ЗадачаТехнологаНаДегустациюОценки.ДатаПроизводства,
		|	ЗадачаТехнологаНаДегустациюОценки.Количество,
		|	ЗадачаТехнологаНаДегустациюОценки.Комментарий
		|ИЗ
		|	Документ.ЗадачаТехнологаНаДегустацию.Оценки КАК ЗадачаТехнологаНаДегустациюОценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗадачаТехнологаНаДегустацию КАК ЗадачаТехнологаНаДегустацию
		|		ПО ЗадачаТехнологаНаДегустациюОценки.Ссылка = ЗадачаТехнологаНаДегустацию.Ссылка
		|ГДЕ
		|	ЗадачаТехнологаНаДегустациюОценки.Ссылка = &Ссылка
		|	И НЕ ЗадачаТехнологаНаДегустациюОценки.Оценка = 0");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ДвиженияОценки = ЭтотОбъект.Движения.ОценкиЗадачТехнологаНаДегустацию;
	ДвиженияОценки.Записывать = Истина;
	ДвиженияОценки.Загрузить(Запрос.Выполнить().Выгрузить());
	//ДвиженияОценки.Записать();
	
	// изменений не было, ничего не делаем
	Если НЕ (ДополнительныеСвойства.Свойство("ТаблицаДвижений_ТоварныеОперации", ТаблицаДвижений_ТоварныеОперации) И ТаблицаДвижений_ТоварныеОперации.Количество() > 0) Тогда
		// обновляем суммы реализованного возврата
		ОбновитьЗаданиеТехнологаНаДегустацию();
		Возврат;
	КонецЕсли;
	
	// проверяем остатки (если есть сторнирующие операции, проверяем, чтобы новое кол-во не превышало остаток)
	ПроверятьНаличиеОстатков = (Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	Если ПроверятьНаличиеОстатков Тогда
		Попытка
			ТорговаяТочкаПоАйпи = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
		Исключение
			ТорговаяТочкаПоАйпи = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецПопытки;
		ПолныеПрава.УстановитьТекущийМагазин(Магазин);
		
		Попытка
			
			ТЗнДляОстатков = ТаблицаДвижений_ТоварныеОперации.Скопировать(Новый Структура("Сторно", Ложь), "Номенклатура,Количество");
			Если ТЗнДляОстатков.Количество() > 0 Тогда
				ТЗнДляОстатков.Свернуть("Номенклатура", "Количество");
				ТЗнОстатков = ВнешниеДанные.ПолучитьТаблицуОстатковПоМассивуНоменклатурыПоТДОст(ТЗнДляОстатков.ВыгрузитьКолонку("Номенклатура"));
				
				Для Каждого СтрокаТД Из ТЗнДляОстатков Цикл
					
					ТекНоменклатура = СтрокаТД.Номенклатура;
					МассивСтрокТЧ = ТЗнОстатков.НайтиСтроки(Новый Структура("Номенклатура", ТекНоменклатура));
					Если МассивСтрокТЧ.Количество() = 1 Тогда
						ТЗнОстатков_Остаток = МассивСтрокТЧ[0].Остаток;
					Иначе
						ТЗнОстатков_Остаток = 0;
					КонецЕсли;
					
					// уменьшаем проверяемое кол-во на сторнируемое кол-во
					ТекКоличество = СтрокаТД.Количество;
					МассивСтрокТЧ = ТаблицаДвижений_ТоварныеОперации.НайтиСтроки(Новый Структура("Номенклатура,Сторно", ТекНоменклатура, Истина));
					Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
						ТекКоличество = ТекКоличество - СтрокаТЧ.Количество;
					КонецЦикла;
					
					// проверяем наличие остатков, только если количество увеличилось
					Если ТекКоличество > 0 И ТекКоличество > ТЗнОстатков_Остаток Тогда
						
				        Сообщение = Новый СообщениеПользователю();
				        Сообщение.Текст = "По номенклатуре '" + Строка(ТекНоменклатура) + "' количество (" + СтрокаТД.Количество +
							") превышает возможный остаток (" + (ТЗнОстатков_Остаток + СтрокаТД.Количество - ТекКоличество) + ")";
						
						Сообщение.Поле 	= "Оценки[0].Количество";
						
				        Сообщение.УстановитьДанные(ЭтотОбъект);
				        Сообщение.Сообщить();
				        Отказ = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			
			ПолныеПрава.УстановитьТекущийМагазин(ТорговаяТочкаПоАйпи);
			ВызватьИсключение ОписаниеОшибки();
			
		КонецПопытки;
		
		ПолныеПрава.УстановитьТекущийМагазин(ТорговаяТочкаПоАйпи);
		Если Отказ Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	// проводим перемещение на новый виртуальный склад "Задание на дегустацию"
	ОрдерНаСклад = "";
	ДополнительныеСвойства.Свойство("ОрдерНаСклад", ОрдерНаСклад);
	Если ЗначениеЗаполнено(ОрдерНаСклад) Тогда
		ОрдерНаСкладОбъект = ОрдерНаСклад.ПолучитьОбъект();
		ОрдерНаСкладОбъект.ПометкаУдаления = Ложь;
		ОрдерНаСкладОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	ПроводитьОперацииМагазина = (Магазин.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин И Магазин.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	Если ПроводитьОперацииМагазина И НЕ Отказ Тогда
		НомерТочкиПоАйпи = Магазин.НомерТочки;
		//ИДДок = Строка(Ссылка.УникальныйИдентификатор());
		ИдСсылкиСтр = Строка(Ссылка.УникальныйИдентификатор());
		ИДДок = Строка(Новый УникальныйИдентификатор());
		
		ИДНоменклатуры = Документы.МП_ЗадачаТехнолога.ВернутьИДНоменклатуры(ЭтотОбъект.Номенклатура);
		ИДХарактеристики = Документы.МП_ЗадачаТехнолога.ВернутьИДХарактеристики(ЭтотОбъект.ХарактеристикаНоменклатуры);
		ТекРозничнаяЦена = Документы.МП_ЗадачаТехнолога.РозничнаяЦена(ЭтотОбъект.Номенклатура);
		
		ОбработкаОбъект = Документы.МП_ЗадачаТехнолога.ПолучитьИПодключитьВнешнююОбработкуТоварныеОперации();
		//ОбработкаОбъект.УдалитьВсеСтрокиДокумента(ИДДок, НомерТочкиПоАйпи);
		
		ПредТипЗадания = Неопределено; ПредСторно = Неопределено; ЕстьДвиженияТД = Ложь;
		Для Каждого СтрокаТД Из ТаблицаДвижений_ТоварныеОперации Цикл
			
			ТекТипЗадания = "ЗадачаТехнологаНаДегустацию";
			//Если ТекТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.УбратьСПолок ИЛИ ТекТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки Тогда
			Если ТекТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВернутьНаПолки Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСторно = СтрокаТД.Сторно;
			Если ТекСторно <> ПредСторно И ЕстьДвиженияТД Тогда
				//Отказ = НЕ ОбработкаОбъект.ПровестиДок(ИДДок, КодОперации, ТекущаяДата(), НомерТочкиПоАйпи);
				ТекстОшибки = Документы.МП_ЗадачаТехнолога.ТоварныеОперации_ПровестиДок(ИдСсылкиСтр, ИДДок, ?(ПредСторно, КодОбратнойОперации, КодОперации), ТекущаяДата(), НомерТочкиПоАйпи, Истина); //Обязательно = ПредСторно
				//Если НЕ ПустаяСтрока(ТекстОшибки) Тогда Сообщить("Документ не проведён по причине: " + ТекстОшибки); Отказ = Истина; Возврат; КонецЕсли;
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда ВызватьИсключение "Документ не проведён по причине: " + ТекстОшибки; Возврат; КонецЕсли;
				
				ЕстьДвиженияТД = Ложь;
				ИДДок = ?(ТекСторно, Строка(Новый УникальныйИдентификатор()), ID_Doc_SQL);
			КонецЕсли;
			ПредСторно = ТекСторно;
			
			Если ТекТипЗадания <> ПредТипЗадания Тогда
				РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ПолучитьТочкуПолучателяИКодыОпераций(ТекТипЗадания, ТочкаПолучатель, КодОперации, КодОбратнойОперации);
				ПредТипЗадания = ТекТипЗадания;
				ИДДок = ?(ТекСторно, Строка(Новый УникальныйИдентификатор()), ID_Doc_SQL);
			КонецЕсли;
			
			//+++АК SHEP 20161025: отключил проверку
			// если операция не принята сервером, то сторнировать её не будем
			//Если ТекСторно И НЕ ТоварныеОперации_ОперацияПринятаСервером(ИДДок, СтрокаТД.КлючСтрокиСтр, НомерТочкиПоАйпи) Тогда
			//	Продолжить;
			//КонецЕсли;
			//---АК SHEP 
			
			РозничнаяСумма = СтрокаТД.Количество * ТекРозничнаяЦена;
			Отказ = НЕ ОбработкаОбъект.ДобавитьНовуюСтрокуТовародвижения(
				ИДНоменклатуры,
				СтрокаТД.Количество, СтрокаТД.НомерСтроки, ТекущаяДата(), ИДДок, ?(ТекСторно, КодОбратнойОперации, КодОперации),
				ТочкаПолучатель, РозничнаяСумма, 0, Строка(Новый УникальныйИдентификатор),
				ИДХарактеристики, СтрокаТД.ДатаПроизводства,,,,, НомерТочкиПоАйпи);
				
			Если Отказ Тогда Возврат; КонецЕсли;
			
			ЕстьДвиженияТД = Истина;
			
		КонецЦикла;
		
		Если ЕстьДвиженияТД Тогда
			
			ТекстОшибки = Документы.МП_ЗадачаТехнолога.ТоварныеОперации_ПровестиДок(ИдСсылкиСтр, ИДДок, ?(ТекСторно, КодОбратнойОперации, КодОперации), ТекущаяДата(), НомерТочкиПоАйпи, Истина); //Обязательно = ТекСторно
			//Если НЕ ПустаяСтрока(ТекстОшибки) Тогда Сообщить("Документ не проведён по причине: " + ТекстОшибки); Отказ = Истина; Возврат; КонецЕсли;
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда ВызватьИсключение "Документ не проведён по причине: " + ТекстОшибки; Возврат; КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// обновляем информацию по заданию
	ОбновитьЗаданиеТехнологаНаДегустацию();
	
КонецПроцедуры
