//+++АК BELN 2018.11.06 ИП-00019252      
Функция ДоступнаПечать() Экспорт
	Если РольДоступна("Технолог") И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("Кладовщик") И НЕ РольДоступна("ОператорСклада")  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияДополнительныхПравПользователя.Значение
			|ИЗ
			|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
			|ГДЕ
			|	ЗначенияДополнительныхПравПользователя.Право = &Право
			|	И ЗначенияДополнительныхПравПользователя.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Право", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Разрешить печать расходных ордеров"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ЕстьПраво=Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЕстьПраво=ВыборкаДетальныеЗаписи.Значение=Истина;
		КонецЦикла;
		Возврат ЕстьПраво;

	Иначе	
		Возврат Истина;	
	КонецЕсли; 	

КонецФункции // ()
//---АК BELN 2018.11.06


Функция ПолучитьДоговорКонтрагента(мКонтрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", мКонтрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ДоговорыКонтрагентов.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	//+++АК LAGP 2018.04.28 ИП-00018531 Добавил упорядочивание по убыванию, для получения самого свежего договора
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка1 = РезультатыЗапроса[0].Выбрать();
	Если Выборка1.Следующий() Тогда
		Если Выборка1.Количество > 0 Тогда
			Если Выборка1.Количество > 1
				И НЕ мКонтрагент.ОсновнойДоговорКонтрагента.пустая() Тогда
				Возврат мКонтрагент.ОсновнойДоговорКонтрагента
			КонецЕсли;
			
			Выборка2 = РезультатыЗапроса[1].Выбрать();
			Выборка2.Следующий();
			Возврат Выборка2.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

Функция ПечатьРасходныйОрдер_Товары(Ссылка, МенятьСтатусДокумента = Истина) Экспорт 
	//+++АК BELN 2018.07.16 ИП-00019201      
	Если ТипЗнч(Ссылка)=Тип("Массив") Тогда
		Если МенятьСтатусДокумента Тогда
			Для каждого Эл Из Ссылка Цикл
				Если НЕ Эл.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
					ДокОбъект = Эл.ПолучитьОбъект();
					ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
					ДокОбъект.Записать(?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КонецЕсли;				
			КонецЦикла; 
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.Дата
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО (СоставПаллеты.РасходныйОрдер = РасходныйОрдерСклад.Ссылка)
		|			И (СоставПаллеты.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	(РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
		|			ИЛИ РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Перемещение))
		|	И РасходныйОрдерСклад.Ссылка В(&Ссылка)
		|	И СоставПаллеты.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ДатаДок=Дата(1,1,1);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Паллета=Справочники.СоставПаллеты.НайтиПоРеквизиту("РасходныйОрдер",ВыборкаДетальныеЗаписи.Ссылка);
			Если Не ЗначениеЗаполнено(Паллета) Тогда
				ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
				ОбъектПаллеты.РасходныйОрдер=ВыборкаДетальныеЗаписи.Ссылка;
				Попытка
					ОбъектПаллеты.Записать();
				Исключение
					Сообщить("Повторите попытку печати");
					Возврат Новый Соответствие;
				КонецПопытки; 
			КонецЕсли; 	
			Если ВыборкаДетальныеЗаписи.Дата>ДатаДок Тогда
				ДатаДок=ВыборкаДетальныеЗаписи.Дата;	
			КонецЕсли; 
		КонецЦикла;
		
		
		
		
		
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
		Запрос.Параметры.Вставить("ДатаСреза", КонецДня(ДатаДок));
		//АК БЕЛН 13.07.2016++
		Запрос.Параметры.Вставить("ДатаСрезаКоробки", КонецДня(ДатаДок)-24*60*60);
		//АК БЕЛН 13.07.2016-
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация.НаименованиеСокращенное, """") КАК ОрганизацияНаименование,
		|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	РасходныйОрдерСклад.ВерсияДанных,
		|	РасходныйОрдерСклад.ПометкаУдаления,
		|	РасходныйОрдерСклад.Номер,
		|	РасходныйОрдерСклад.Дата,
		|	РасходныйОрдерСклад.ДатаРаспределения,
		|	РасходныйОрдерСклад.Проведен,
		|	РасходныйОрдерСклад.ВидОперации,
		|	РасходныйОрдерСклад.Склад,
		|	РасходныйОрдерСклад.Склад.ДляШтучногоТовара,
		|	РасходныйОрдерСклад.Перевозчик.Наименование КАК ПеревозчикНаименование,
		|	РасходныйОрдерСклад.Перевозчик,
		|	РасходныйОрдерСклад.Водитель.Наименование КАК ВодительНаименование,
		|	РасходныйОрдерСклад.Водитель,
		|	РасходныйОрдерСклад.Автор,
		|	РасходныйОрдерСклад.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Характеристика,
		|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА РасходныйОрдерСклад.ПровереноОператором
		|				ТОГДА РасходныйОрдерСклад.Товары.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Количество,
		|		КоличествоУРЗ,
		|		Номенклатура.Наименование КАК Наименование,
		|		Характеристика.Наименование,
		|		ДатаПроизводства КАК ДатаПрзв
		|	),
		|	РасходныйОрдерСклад.Получатель,
		|	РасходныйОрдерСклад.Расходники.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.Наименование КАК Наименование,
		|		ЕдиницаИзмерения,
		|		Отгружено
		|	),
		|	РасходныйОрдерСклад.ЕстьРасходники,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
		|	РасходныйОрдерСклад.Комментарий,
		|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|		ПО РасходныйОрдерСклад.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоВКоробкеСрезПоследних.Характеристика КАК Объект,
		|	КоличествоВКоробкеСрезПоследних.Количество КАК Значение,
		|	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
		|			&ДатаСрезаКоробки,
		|			Характеристика В
		|				(ВЫБРАТЬ
		|					РасходныйОрдерСкладТовары.Характеристика
		|				ИЗ
		|					Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|				ГДЕ
		|					РасходныйОрдерСкладТовары.Ссылка В (&Ссылка))) КАК КоличествоВКоробкеСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставПаллеты.Ссылка,
		|	СоставПаллеты.РасходныйОрдер КАК РасходныйОрдер,
		|	ЕСТЬNULL(СоставПаллеты.РасходныйОрдер.Склад.ДляШтучногоТовара, ЛОЖЬ) КАК ДляШтучногоТовара,
		|	СоставПаллеты.РасходныйОрдер.Склад КАК Склад,
		|	СоставПаллеты.ИД,
		|	СоставПаллеты.РасходныйОрдер.Получатель КАК Получатель
		|ИЗ
		|	Справочник.СоставПаллеты КАК СоставПаллеты
		|ГДЕ
		|	СоставПаллеты.РасходныйОрдер В(&Ссылка)
		|	И СоставПаллеты.ПометкаУдаления = ЛОЖЬ
		|ИТОГИ ПО
		|	РасходныйОрдер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование,
		|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.СтруктурноеПодразделение
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Документ В(&Ссылка)
		|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Маршрут КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.МаршрутНаименование,
		|	МаршрутныйЛистРасходныеОрдера.МаршрутПолноеНаименование,
		|	СоставПаллеты.Ссылка КАК ссылка1,
		|	СоставПаллеты.ИД,
		|	СоставПаллеты.РасходныйОрдер КАК СсылкаРО,
		|	СоставПаллеты.РасходныйОрдер.Получатель КАК Получатель,
		|	СоставПаллеты.РасходныйОрдер.Склад КАК Склад,
		|	МаршрутныйЛистРасходныеОрдера.ДокументКоличествоПаллет КАК КоличествоПаллет,
		|	АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота
		|ИЗ
		|	вт КАК МаршрутныйЛистРасходныеОрдера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО (СоставПаллеты.РасходныйОрдер = МаршрутныйЛистРасходныеОрдера.Документ)
		|			И (СоставПаллеты.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
		|		ПО МаршрутныйЛистРасходныеОрдера.СтруктурноеПодразделение = АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение
		|			И МаршрутныйЛистРасходныеОрдера.МаршрутНаименование = АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование КАК ПолноеНаименование,
		|	МаршрутныйЛистРасходныеОрдера.Документ КАК Документ
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Документ В(&Ссылка)
		|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
		|ИТОГИ ПО
		|	Документ";
		
		
		Результаты = Запрос.ВыполнитьПакет();
		ВыборкаРО 			= Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТабХарактеристики 	= Результаты[1].Выгрузить();
		//+++АК BELN 2018.11.28 ИП-00020565      
		ВыборкаМарш = Результаты[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КоличествоКоробокПоОрдерам = ПосчитатьКоличесвоКоробок(Ссылка);
		//---АК BELN 2018.11.28    
		ВыборкаПал = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СоотРО=Новый Соответствие();
		
		Пока ВыборкаРО.Следующий() Цикл
			Выборка=ВыборкаРО.Выбрать();
			ВыборкаМарш.Сбросить();
			ВыборкаПал.Сбросить();
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
			ТабДок.РазмерКолонтитулаСнизу	= 0;
			ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху 	= 5;
			ТабДок.ПолеСнизу 	= 5;
			ТабДок.ПолеСлева 	= 5;
			ТабДок.ПолеСправа 	= 5;
			ТабДок.АвтоМасштаб	= Истина;
			
			Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Товары");
			
			
			
			ОбластьМаршрут          = Макет.ПолучитьОбласть("Маршрут");
			ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
			ОбластьСклад	 		= Макет.ПолучитьОбласть("Склад");
			ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель");
			ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
			ОбластьШапкаТаблицыРМ 	= Макет.ПолучитьОбласть("ШапкаТаблицыРМ");
			ОбластьСтрокаРМ 		= Макет.ПолучитьОбласть("СтрокаРМ");
			ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
			ОбластьПодвалТаблицыРМ 	= Макет.ПолучитьОбласть("ПодвалТаблицыРМ");
			ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
			ОбластьВремяПечати 		= Макет.ПолучитьОбласть("ВремяПечати");
			ОбластьИтог         	= Макет.ПолучитьОбласть("Итог");
			
			ТабДок.Очистить();
			
			ВставлятьРазделительСтраниц = Ложь;
			Пока Выборка.Следующий() Цикл
				
				Если ВставлятьРазделительСтраниц Тогда
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ОбластьМаршрут.Параметры.Маршрут = Выборка.Маршрут;
				ТабДок.Вывести(ОбластьМаршрут);
				
				ОбластьЗаголовок.Параметры.Заполнить(Выборка);
				ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=DD");
				//+++АК sole 2018.09.07 ИП-00019639
				//ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
				//---АК sole 2018.09.07 ИП-00019639
				
				ТабДок.Вывести(ОбластьЗаголовок);
				
				ОбластьСклад.Параметры.Заполнить(Выборка);
				//АК БЕЛН 06.02.2017++
				ОбластьСклад.Параметры.Маршрут = Выборка.МаршрутПолноеНаименование;
				//АК БЕЛН 06.02.2017--
				//АК БЕЛН 06.02.2017++
				ТабНоменклатура = Выборка.Товары.Выгрузить();
				ТабНоменклатура.Сортировать("Наименование");
				ТабНоменклатура.Колонки.Добавить("ПолученоТТ", Новый ОписаниеТипов("Число"));
				КоличествоВУпаковке=0;
				ИтогКолУпак=0;
				Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
					СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый структура("СтруктурнаяЕдиница, Объект", Выборка.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
					КоличествоВУпаковке = 0;
					Если СтрокиХарактеристика.Количество() > 0 Тогда
						КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
					КонецЕсли;	
					
					Если КоличествоВУпаковке > 0 Тогда
						ИтогКолУпак = ИтогКолУпак+Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
					КонецЕсли;	
				КонецЦикла;
				ОбластьСклад.Параметры.Коробок =ИтогКолУпак;
				//АК БЕЛН 06.02.2017++
				
				
				
				Если ЗначениеЗаполнено(Выборка.ОтгружаетсяИзЗоны)
					И Выборка.ОтгружаетсяИзЗоны <> Выборка.Склад Тогда
					ОбластьСклад.Параметры.Склад = СокрЛП(ОбластьСклад.Параметры.Склад) + " (через " + СокрЛП(Выборка.ОтгружаетсяИзЗоны) + ")";
				КонецЕсли;	
				ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
				
				ОбластьПолучатель.Параметры.Заполнить(Выборка);
				ТабДок.Вывести(ОбластьПолучатель, Выборка.Уровень());
				
				Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
					ОбластьКоммент          = Макет.ПолучитьОбласть("Комментарий");
					ОбластьКоммент.Параметры.Комментарий = СокрЛП(Выборка.Комментарий);
					ТабДок.Вывести(ОбластьКоммент);
				КонецЕсли;	
				
				ТабДок.Вывести(ОбластьШапкаТаблицы);
				
				
				
				// Строка
				КолвоКор 	= 0;
				КолвоЕд 	= 0;
				КолвоУРЗ 	= 0;
				КолвоТТ 	= 0;
				ИтогКолУпак = 0;
				Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
					ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
					СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый структура("СтруктурнаяЕдиница, Объект", Выборка.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
					КоличествоВУпаковке = 0;
					Если СтрокиХарактеристика.Количество() > 0 Тогда
						КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
					КонецЕсли;	
					Если КоличествоВУпаковке > 0 Тогда
						ОбластьСтрока.Параметры.КолУпакУРЗ = Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
						ОбластьСтрока.Параметры.КолУпак = Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
					Иначе				
						ОбластьСтрока.Параметры.КолУпакУРЗ = "";
						ОбластьСтрока.Параметры.КолУпак = "";
					КонецЕсли;
					
					Если КоличествоВУпаковке > 0 Тогда
						КолвоКор = КолвоКор + Окр(ВыборкаНоменклатура.КоличествоУРЗ/КоличествоВУпаковке,1);
						ИтогКолУпак = ИтогКолУпак+Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
					КонецЕсли;	
					КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
					КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
					
					//КолвоТТ 	= КолвоТТ 	+ ВыборкаНоменклатура.ПолученоТТ;
					
					ТабДок.Вывести(ОбластьСтрока);
				КонецЦикла;
				
				// Подвал
				ТабДок.Вывести(ОбластьПодвалТаблицы);
				ОбластьИтог.Параметры.ИтогКор 	= КолвоКор;
				ОбластьИтог.Параметры.ИтогУРЗ 	= КолвоУРЗ;
				ОбластьИтог.Параметры.ИтогЕд 	= КолвоЕд;
				ОбластьИтог.Параметры.ИтогКолУпак 	= ИтогКолУпак;
				//ОбластьИтог.Параметры.ИтогТТ 	= КолвоТТ;
				ТабДок.Вывести(ОбластьИтог);
				
				Если Выборка.ЕстьРасходники Тогда
					ТабДок.Вывести(ОбластьШапкаТаблицыРМ);
					ВыборкаРасходники = Выборка.Расходники.Выбрать();
					
					Пока ВыборкаРасходники.Следующий() Цикл
						ОбластьСтрокаРМ.Параметры.Заполнить(ВыборкаРасходники);
						ТабДок.Вывести(ОбластьСтрокаРМ);
					КонецЦикла;
					ТабДок.Вывести(ОбластьПодвалТаблицыРМ);
				КонецЕсли;
				ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Выборка.Автор;
				
				ТабДок.Вывести(ОбластьПодвал);
				
				ВставлятьРазделительСтраниц = Истина;
				ТабДок.Вывести(ОбластьВремяПечати);
				//АК БЕЛН 13.07.2016++
				Если Выборка.ВидОперации=Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку
					или Выборка.ВидОперации=Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение  Тогда
					//Паллета=Справочники.СоставПаллеты.НайтиПоРеквизиту("РасходныйОрдер",Выборка.Ссылка);
					//Если Не ЗначениеЗаполнено(Паллета) Тогда
					//	ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
					//	ОбъектПаллеты.РасходныйОрдер=Выборка.Ссылка;
					//	Попытка
					//		ОбъектПаллеты.Записать();
					//	Исключение
					//		Сообщить("Повторите попытку печати");
					//		Возврат Новый ТабличныйДокумент;
					//	КонецПопытки; 
					//КонецЕсли; 
					Фл=Ложь;
					Если ВыборкаПал.НайтиСледующий(Новый Структура("РасходныйОрдер",Выборка.Ссылка)) Тогда
						ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
						Фл=Истина;
					КонецЕсли;
					ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
					
					УчаствуетВМаршруте = "";
					
					Если ВыборкаМарш.НайтиСледующий(Новый Структура("Документ",Выборка.Ссылка)) Тогда
						ВыборкаМ = ВыборкаМарш.Выбрать();
						Если ВыборкаМ.Следующий() Тогда
							//УчаствуетВМаршруте = ВыборкаМ.Маршрут;
							УчаствуетВМаршруте = Строка(ВыборкаМ.Маршрут);
						КонецЕсли;	
					КонецЕсли; 
					
					
					Если Фл Тогда
						//ВыборкаДетальныеЗаписи=ВыборкаПал.Выбрать();	
						//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						//	
						//	//+++АК sole 2018.09.10 ИП-00019639
						//	Если ВыборкаДетальныеЗаписи.ДляШтучногоТовара Тогда
						//		Область = Макет.ПолучитьОбласть("Этикетка1");
						//		ОбластьНиз =  Макет.ПолучитьОбласть("ЭтикеткаНиз1");	
						//	Иначе
						//		Область = Макет.ПолучитьОбласть("Этикетка");
						//		ОбластьНиз = Макет.ПолучитьОбласть("ЭтикеткаНиз");
						//	КонецЕсли;
						//	//---АК sole 2018.09.10 ИП-00019639
						//	
						//	ОбластьСтр = Макет.ПолучитьОбласть("СтрокаПал");
						//	Область.Параметры.ТорговаяТочка = ВыборкаДетальныеЗаписи.Получатель;
						//	ШтрихКод = "850" + Прав("000000000000" + Формат(ВыборкаДетальныеЗаписи.ИД, "ЧГ=0"), 12);
						//	ТабДок1 = Новый ТабличныйДокумент();
						//	
						//	//+++LAGP 2018.02.09 ИП-00017892 Добавлен вывод склада в этикетку
						//	Область.Параметры.Склад = Выборка.Склад;
						//	//---LAGP
						//	
						//	Область.Параметры.Паллета = "ИД "+ВыборкаДетальныеЗаписи.ИД+" "+Строка(ВыборкаДетальныеЗаписи.РасходныйОрдер)+
						//	?(ВыборкаДетальныеЗаписи.ДляШтучногоТовара,Символы.ПС+"Коробка склада штучного товара "+Строка(ВыборкаДетальныеЗаписи.Склад),"");
						//	Область.Параметры.МаршЛист = УчаствуетВМаршруте;
						//	//Область.Параметры.МаршЛистДоп = ВыборкаМ.ПолноеНаименование;
						//	
						//	Рисунок 					= ?(ВыборкаДетальныеЗаписи.ДляШтучногоТовара,Область.Рисунки["ШтрихКодПал2"],Область.Рисунки["ШтрихКодПал"]);
						//	
						//	//+++АК sole 2018.09.07 ИП-00019639
						//	//ПараметрыШК = Новый Структура();
						//	//ПараметрыШК.Вставить("Ширина", Рисунок.Ширина);
						//	//ПараметрыШК.Вставить("Высота", Рисунок.Высота);
						//	//ПараметрыШК.Вставить("ТипКода", 4);
						//	//ПараметрыШК.Вставить("ОтображатьТекст", Ложь);
						//	//ПараметрыШК.Вставить("РазмерШрифта", 10);
						//	//ПараметрыШК.Вставить("Штрихкод", Штрихкод);
						//	//Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
						//	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Штрихкод, 0, 300);
						//	Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
						//	//---АК sole 2018.09.07 ИП-00019639
						//	
						//	Область.Параметры.ШК = ШтрихКод;
						//	Если Не Выборка.СкладДляШтучногоТовара Тогда
						//		Область.Параметры.Коробок=КолвоКор;
						//	КонецЕсли; 
						//	ТабДок1.Вывести(Область);
						//	Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Состав Цикл
						//		ОбластьСтр.Параметры.Заполнить(Стр);
						//		ТабДок1.Вывести(ОбластьСтр);
						//	КонецЦикла; 
						//	Если ТабДок.ПроверитьВывод(ТабДок1) Тогда
						//	     ТабДок.Вывести(ТабДок1);
						//	Иначе
						//	     ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
						//	     ТабДок.Вывести(ТабДок1);
						//	КонецЕсли; 
						//КонецЦикла;
						//+++АК BELN 2018.11.28 ИП-00020565      
						ЗаполнитьТДПаллеты(ТабДок,ВыборкаМарш,КоличествоКоробокПоОрдерам);
						//---АК BELN 2018.11.28     
					КонецЕсли; 
					
				КонецЕсли; 
				СоотРО.Вставить(Выборка.Ссылка,ТабДок); 
				Прервать;
				//АК БЕЛН 13.07.2016--
			КонецЦикла;
			
			
			
		КонецЦикла; 
		Возврат СоотРО;
	Иначе	
		//---АК BELN 2018.07.16 	
		Если МенятьСтатусДокумента Тогда
			Если НЕ Ссылка.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
				ДокОбъект = Ссылка.ПолучитьОбъект();
				ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
				ДокОбъект.Записать(?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;	
		КонецЕсли;	
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
		ТабДок.РазмерКолонтитулаСнизу	= 0;
		ТабДок.РазмерКолонтитулаСверху 	= 0;
		ТабДок.ПолеСверху 	= 5;
		ТабДок.ПолеСнизу 	= 5;
		ТабДок.ПолеСлева 	= 5;
		ТабДок.ПолеСправа 	= 5;
		ТабДок.АвтоМасштаб	= Истина;
		
		//АК БЕЛН 13.07.2016++
		Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Товары");
		//Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("АК_РасходныйОрдер_Товары");
		//АК БЕЛН 13.07.2016--
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
		Запрос.Параметры.Вставить("ДатаСреза", КонецДня(Ссылка.Дата));
		//АК БЕЛН 13.07.2016++
		Запрос.Параметры.Вставить("ДатаСрезаКоробки", КонецДня(Ссылка.Дата)-24*60*60);
		//АК БЕЛН 13.07.2016-
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация.НаименованиеСокращенное, """") КАК ОрганизацияНаименование,
		|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	РасходныйОрдерСклад.ВерсияДанных,
		|	РасходныйОрдерСклад.ПометкаУдаления,
		|	РасходныйОрдерСклад.Номер,
		|	РасходныйОрдерСклад.Дата,
		|	РасходныйОрдерСклад.ДатаРаспределения,
		|	РасходныйОрдерСклад.Проведен,
		|	РасходныйОрдерСклад.ВидОперации,
		|	РасходныйОрдерСклад.Склад,
		|	РасходныйОрдерСклад.Перевозчик.Наименование КАК ПеревозчикНаименование,
		|	РасходныйОрдерСклад.Перевозчик,
		|	РасходныйОрдерСклад.Водитель.Наименование КАК ВодительНаименование,
		|	РасходныйОрдерСклад.Водитель,
		|	РасходныйОрдерСклад.Автор,
		|	РасходныйОрдерСклад.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Характеристика,
		|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА РасходныйОрдерСклад.ПровереноОператором
		|					ИЛИ РасходныйОрдерСклад.Комментарий = ""Сформирован по распределению для Интернет магазинов""
		|				ТОГДА РасходныйОрдерСклад.Товары.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Количество,
		|		КоличествоУРЗ,
		|		Номенклатура.Наименование КАК Наименование,
		|		Характеристика.Наименование,
		|		ДатаПроизводства КАК ДатаПрзв,
		|		Номенклатура.id_tov КАК id_tov
		|	),
		|	РасходныйОрдерСклад.Получатель,
		|	РасходныйОрдерСклад.Расходники.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.Наименование КАК Наименование,
		|		ЕдиницаИзмерения,
		|		Отгружено
		|	),
		|	РасходныйОрдерСклад.ЕстьРасходники,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
		|	РасходныйОрдерСклад.Комментарий,
		|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование,
		|	РасходныйОрдерСклад.Склад.Код КАК КодСклада
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|		ПО РасходныйОрдерСклад.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоВКоробкеСрезПоследних.Характеристика КАК Объект,
		|	КоличествоВКоробкеСрезПоследних.Количество КАК Значение,
		|	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
		|			&ДатаСрезаКоробки,
		|			Характеристика В
		|				(ВЫБРАТЬ
		|					РасходныйОрдерСкладТовары.Характеристика
		|				ИЗ
		|					Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|				ГДЕ
		|					РасходныйОрдерСкладТовары.Ссылка = &Ссылка)) КАК КоличествоВКоробкеСрезПоследних";
		
		Результаты = Запрос.ВыполнитьПакет();
		Выборка 			= Результаты[0].Выбрать();
		ТабХарактеристики 	= Результаты[1].Выгрузить();
		
		////АК БЕЛН 13.07.2016++
		//Запрос.Текст = 	
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
		//|	СертификатыНаПродукциюСрезПоследних.Характеристика,
		//|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
		//|ПОМЕСТИТЬ вт
		//|ИЗ
		//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
		//|		ПО РасходныйОрдерСкладТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
		//|			И РасходныйОрдерСкладТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
		//|			И (КОНЕЦПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
		//|ГДЕ
		//|	РасходныйОрдерСкладТовары.Ссылка =&Ссылка
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
		//|	СертификатыНаПродукциюСрезПоследних.Характеристика
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	СертификатыНаПродукцию.Номенклатура,
		//|	СертификатыНаПродукцию.Характеристика,
		//|	СертификатыНаПродукцию.РегистрационныйНомер,
		//|	СертификатыНаПродукцию.ДействуетДо
		//|ИЗ
		//|	вт КАК вт
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
		//|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
		//|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
		//|			И вт.Период = СертификатыНаПродукцию.Период";
		//ВыборкаСертификаты=Запрос.Выполнить().Выбрать();
		//АК БЕЛН 13.07.2016--
		
		
		
		
		ОбластьМаршрут          = Макет.ПолучитьОбласть("Маршрут");
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьСклад	 		= Макет.ПолучитьОбласть("Склад");
		ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель");
		ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
		ОбластьШапкаТаблицыРМ 	= Макет.ПолучитьОбласть("ШапкаТаблицыРМ");
		ОбластьСтрокаРМ 		= Макет.ПолучитьОбласть("СтрокаРМ");
		ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьПодвалТаблицыРМ 	= Макет.ПолучитьОбласть("ПодвалТаблицыРМ");
		ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
		ОбластьВремяПечати 		= Макет.ПолучитьОбласть("ВремяПечати");
		ОбластьИтог         	= Макет.ПолучитьОбласть("Итог");
		
		ТабДок.Очистить();
		
		ВставлятьРазделительСтраниц = Ложь;
		Пока Выборка.Следующий() Цикл
			
			// +++ AK GOLV ИП-00020442.01
			Если Выборка.КодСклада = "100004507" Тогда
				ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицыСКодом");
				ОбластьСтрока 			= Макет.ПолучитьОбласть("СтрокаСКодом");				
			Иначе
				ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
				ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");				
			КонецЕсли;
			// --- GOLV
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьМаршрут.Параметры.Маршрут = Выборка.Маршрут;
			ТабДок.Вывести(ОбластьМаршрут);
			
			ОбластьЗаголовок.Параметры.Заполнить(Выборка);
			ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=DD");
			//+++АК sole 2018.09.07 ИП-00019639
			//ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
			//---АК sole 2018.09.07 ИП-00019639
			
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ОбластьСклад.Параметры.Заполнить(Выборка);
			//АК БЕЛН 06.02.2017++
			ОбластьСклад.Параметры.Маршрут = Выборка.МаршрутПолноеНаименование;
			//АК БЕЛН 06.02.2017--
			//АК БЕЛН 06.02.2017++
			ТабНоменклатура = Выборка.Товары.Выгрузить();
			ТабНоменклатура.Колонки.Добавить("ПолученоТТ", Новый ОписаниеТипов("Число"));
			КоличествоВУпаковке=0;
			ИтогКолУпак=0;
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый структура("СтруктурнаяЕдиница, Объект", Выборка.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
				КоличествоВУпаковке = 0;
				Если СтрокиХарактеристика.Количество() > 0 Тогда
					КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
				КонецЕсли;	
				
				Если КоличествоВУпаковке > 0 Тогда
					ИтогКолУпак = ИтогКолУпак+Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				КонецЕсли;	
			КонецЦикла;
			ОбластьСклад.Параметры.Коробок =ИтогКолУпак;
			//АК БЕЛН 06.02.2017++
			
			
			
			Если ЗначениеЗаполнено(Выборка.ОтгружаетсяИзЗоны)
				И Выборка.ОтгружаетсяИзЗоны <> Выборка.Склад Тогда
				ОбластьСклад.Параметры.Склад = СокрЛП(ОбластьСклад.Параметры.Склад) + " (через " + СокрЛП(Выборка.ОтгружаетсяИзЗоны) + ")";
			КонецЕсли;	
			ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
			
			ОбластьПолучатель.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьПолучатель, Выборка.Уровень());
			
			Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
				ОбластьКоммент          = Макет.ПолучитьОбласть("Комментарий");
				ОбластьКоммент.Параметры.Комментарий = СокрЛП(Выборка.Комментарий);
				ТабДок.Вывести(ОбластьКоммент);
			КонецЕсли;	
			
			ТабДок.Вывести(ОбластьШапкаТаблицы);
			
			
			//РасчитыватьПолученоТТ = ЗначениеЗаполнено(Выборка.Получатель)
			//							И ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			//							И ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Ложь;
			//Если РасчитыватьПолученоТТ Тогда
			//	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(
			//								?(ЗначениеЗаполнено(Выборка.ДатаРаспределения), Выборка.ДатаРаспределения, Выборка.Дата),
			//								?(ЗначениеЗаполнено(Выборка.ДатаРаспределения),	Выборка.ДатаРаспределения, Выборка.Дата),
			//								Выборка.Получатель);
			//								
			//	///////////////////////
			//	Запрос = Новый Запрос();
			//	Запрос.УстановитьПараметр("Таб", ТабНоменклатура);
			//	Запрос.УстановитьПараметр("ДатаРаспределения", НачалоДня(?(ЗначениеЗаполнено(Выборка.ДатаРаспределения), Выборка.ДатаРаспределения, Выборка.Дата)));
			//	Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			//	Запрос.УстановитьПараметр("Получатель", Выборка.Получатель);
			//	Запрос.Текст = "ВЫБРАТЬ
			//				   |	РасходныйОрдерСкладТовары.Номенклатура,
			//				   |	РасходныйОрдерСкладТовары.Количество
			//				   |ПОМЕСТИТЬ ВТ_ТекТовары
			//				   |ИЗ
			//				   |	&Таб КАК РасходныйОрдерСкладТовары
			//				   |;
			//				   |
			//				   |////////////////////////////////////////////////////////////////////////////////
			//				   |ВЫБРАТЬ
			//				   |	РасходныйОрдерСкладТовары.Номенклатура,
			//				   |	РасходныйОрдерСкладТовары.Количество,
			//				   |	РасходныйОрдерСкладТовары.Ссылка
			//				   |ИЗ
			//				   |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
			//				   |ГДЕ
			//				   |	НАЧАЛОПЕРИОДА(ВЫБОР
			//				   |				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
			//				   |					ТОГДА РасходныйОрдерСкладТовары.Ссылка.Дата
			//				   |				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
			//				   |			КОНЕЦ, ДЕНЬ) = &ДатаРаспределения
			//				   |	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &Получатель
			//				   |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = Истина
			//				   |	И РасходныйОрдерСкладТовары.Ссылка <> &Ссылка
			//				   |
			//				   |ОБЪЕДИНИТЬ ВСЕ
			//				   |
			//				   |ВЫБРАТЬ
			//				   |	ВТ_ТекТовары.Номенклатура,
			//				   |	ВТ_ТекТовары.Количество,
			//				   |	ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
			//				   |ИЗ
			//				   |	ВТ_ТекТовары КАК ВТ_ТекТовары
			//				   |;
			//				   |
			//				   |////////////////////////////////////////////////////////////////////////////////
			//				   |УНИЧТОЖИТЬ ВТ_ТекТовары";
			//	
			//	ТабРаспределение = Запрос.Выполнить().Выгрузить();
			//	ТабРаспределение.Колонки.Добавить("Коэффициент");
			//	Для Каждого СтрокаНоменклатура Из ТабНоменклатура Цикл
			//		СтрокиРаспределение = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатура.Номенклатура));
			//		СуммаКоличеств = 0;
			//		Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
			//			СуммаКоличеств = СуммаКоличеств + СтрокаРаспр.Количество;
			//		КонецЦикла;	
			//		Если СуммаКоличеств = 0 Тогда
			//			Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
			//				Если НЕ ЗначениеЗаполнено(СтрокаРаспр.Ссылка) Тогда
			//					СтрокаРаспр.Коэффициент = 1;
			//					Прервать;
			//				КонецЕсли;	
			//			КонецЦикла;	
			//		Иначе
			//			Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
			//				СтрокаРаспр.Коэффициент = СтрокаРаспр.Количество / СуммаКоличеств;
			//			КонецЦикла;
			//		КонецЕсли;	
			//	КонецЦикла;
			//	///////////////////////
			//								
			//								
			//	Для Каждого СтрокаТаб Из ТабНоменклатура Цикл
			//		СтрокаОстаток = ТабДанные.Найти(СтрокаТаб.Номенклатура, "Номенклатура");
			//		Если СтрокаОстаток <> Неопределено Тогда
			//			СтрокиКоэф = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура, Количество", СтрокаТаб.Номенклатура, СтрокаТаб.Количество));
			//			Коэф = 0;
			//			Если СтрокиКоэф.Количество() > 0 Тогда
			//				Коэф = СтрокиКоэф[0].Коэффициент
			//			КонецЕсли;	
			//			СтрокаТаб.ПолученоТТ = Окр(СтрокаОстаток.Поступило * Коэф, 3);
			//		Иначе
			//			СтрокаТаб.ПолученоТТ = 0;
			//		КонецЕсли;
			//	КонецЦикла;
			//	
			//	//Для Каждого СтрокаДанные Из ТабДанные Цикл
			//	//	Если СтрокаДанные.Поступило <= 0 Тогда
			//	//		Продолжить;
			//	//	КонецЕсли;
			//	//	СтрокиТоваров = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
			//	//	Если СтрокиТоваров.Количество() > 0 Тогда
			//	//		 СтрокиТоваров[0].ПолученоТТ = СтрокиТоваров[0].ПолученоТТ + СтрокаДанные.Поступило;
			//	//	КонецЕсли;	
			//	//КонецЦикла;
			//КонецЕсли;
			
			// Строка
			КолвоКор 	= 0;
			КолвоЕд 	= 0;
			КолвоУРЗ 	= 0;
			КолвоТТ 	= 0;
			ИтогКолУпак = 0;
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
				//АК БЕЛН 13.07.2016++
				//ТекстСертификатов = "";
				//Пока ВыборкаСертификаты.НайтиСледующий(Новый Структура("Номенклатура,характеристика",ВыборкаНоменклатура.Номенклатура,ВыборкаНоменклатура.Характеристика)) Цикл
				//	Сертификат=СтрЗаменить(ВыборкаСертификаты.РегистрационныйНомер,".jpg;","");
				//	Сертификат=СтрЗаменить(Сертификат,".jpeg;","");
				//	ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " до " +
				//												Формат(ВыборкаСертификаты.ДействуетДо,"ДФ=dd.MM.yyyy");
				//КонецЦикла;
				//ВыборкаСертификаты.Сбросить();											
				//Если НЕ ТекстСертификатов = "" Тогда
				//	ТекстСертификатов = Сред(ТекстСертификатов, 3);
				//КонецЕсли;
				//ОбластьСтрока.Параметры.Сертификат = ТекстСертификатов + ".";
				//АК БЕЛН 13.07.2016--
				СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый структура("СтруктурнаяЕдиница, Объект", Выборка.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
				КоличествоВУпаковке = 0;
				Если СтрокиХарактеристика.Количество() > 0 Тогда
					КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
				КонецЕсли;	
				Если КоличествоВУпаковке > 0 Тогда
					ОбластьСтрока.Параметры.КолУпакУРЗ = Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
					ОбластьСтрока.Параметры.КолУпак = Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				Иначе				
					ОбластьСтрока.Параметры.КолУпакУРЗ = "";
					ОбластьСтрока.Параметры.КолУпак = "";
				КонецЕсли;
				
				Если КоличествоВУпаковке > 0 Тогда
					КолвоКор = КолвоКор + Окр(ВыборкаНоменклатура.КоличествоУРЗ/КоличествоВУпаковке,1);
					ИтогКолУпак = ИтогКолУпак+Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				КонецЕсли;	
				КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
				КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
				
				//КолвоТТ 	= КолвоТТ 	+ ВыборкаНоменклатура.ПолученоТТ;
				
				ТабДок.Вывести(ОбластьСтрока);
			КонецЦикла;
			
			// Подвал
			ТабДок.Вывести(ОбластьПодвалТаблицы);
			ОбластьИтог.Параметры.ИтогКор 	= КолвоКор;
			ОбластьИтог.Параметры.ИтогУРЗ 	= КолвоУРЗ;
			ОбластьИтог.Параметры.ИтогЕд 	= КолвоЕд;
			ОбластьИтог.Параметры.ИтогКолУпак 	= ИтогКолУпак;
			//ОбластьИтог.Параметры.ИтогТТ 	= КолвоТТ;
			ТабДок.Вывести(ОбластьИтог);
			
			Если Выборка.ЕстьРасходники Тогда
				ТабДок.Вывести(ОбластьШапкаТаблицыРМ);
				ВыборкаРасходники = Выборка.Расходники.Выбрать();
				
				Пока ВыборкаРасходники.Следующий() Цикл
					ОбластьСтрокаРМ.Параметры.Заполнить(ВыборкаРасходники);
					ТабДок.Вывести(ОбластьСтрокаРМ);
				КонецЦикла;
				ТабДок.Вывести(ОбластьПодвалТаблицыРМ);
			КонецЕсли;
			ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Выборка.Автор;
			
			ТабДок.Вывести(ОбластьПодвал);
			
			ВставлятьРазделительСтраниц = Истина;
			ТабДок.Вывести(ОбластьВремяПечати);
			//АК БЕЛН 13.07.2016++
			Если Ссылка.ВидОперации=Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку или Ссылка.ВидОперации=Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение  Тогда
				Паллета=Справочники.СоставПаллеты.НайтиПоРеквизиту("РасходныйОрдер",Ссылка);
				Если Не ЗначениеЗаполнено(Паллета) Тогда
					ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
					ОбъектПаллеты.РасходныйОрдер=Ссылка;
					Попытка
						ОбъектПаллеты.Записать();
					Исключение
						Сообщить("Повторите попытку печати");
						Возврат Новый ТабличныйДокумент;
					КонецПопытки; 
				КонецЕсли; 
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СоставПаллеты.Ссылка,
				|	СоставПаллеты.РасходныйОрдер,
				|	ЕстьNull(СоставПаллеты.РасходныйОрдер.Склад.ДляШтучногоТовара,Ложь) КАК ДляШтучногоТовара,
				|	СоставПаллеты.РасходныйОрдер.Склад КАК Склад,
				|	СоставПаллеты.ИД,
				|	СоставПаллеты.РасходныйОрдер.Получатель КАК Получатель
				|ИЗ
				|	Справочник.СоставПаллеты КАК СоставПаллеты
				|ГДЕ
				|	СоставПаллеты.РасходныйОрдер = &РасходныйОрдер
				|	И СоставПаллеты.ПометкаУдаления = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("РасходныйОрдер", Ссылка);
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
				
				УчаствуетВМаршруте = "";
				Запрос = Новый Запрос();
				Запрос.Текст = 		"////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
				|	МаршрутныйЛистРасходныеОрдера.Документ,
				|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование,
				|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование,
				|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет,
				|	МаршрутныйЛистРасходныеОрдера.Ссылка.СтруктурноеПодразделение
				|ПОМЕСТИТЬ вт
				|ИЗ
				|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
				|ГДЕ
				|	МаршрутныйЛистРасходныеОрдера.Документ =(&Ссылка)
				|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаршрутныйЛистРасходныеОрдера.Маршрут КАК Маршрут,
				|	МаршрутныйЛистРасходныеОрдера.Документ,
				|	МаршрутныйЛистРасходныеОрдера.МаршрутНаименование,
				|	МаршрутныйЛистРасходныеОрдера.МаршрутПолноеНаименование,
				|	СоставПаллеты.Ссылка КАК ссылка1,
				|	СоставПаллеты.ИД,
				|	СоставПаллеты.РасходныйОрдер КАК СсылкаРО,
				|	СоставПаллеты.РасходныйОрдер.Получатель КАК Получатель,
				|	СоставПаллеты.РасходныйОрдер.Склад КАК Склад,
				|	МаршрутныйЛистРасходныеОрдера.ДокументКоличествоПаллет КАК КоличествоПаллет,
				|	АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота
				|ИЗ
				|	вт КАК МаршрутныйЛистРасходныеОрдера
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
				|		ПО (СоставПаллеты.РасходныйОрдер = МаршрутныйЛистРасходныеОрдера.Документ)
				|			И (СоставПаллеты.ПометкаУдаления = ЛОЖЬ)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
				|		ПО МаршрутныйЛистРасходныеОрдера.СтруктурноеПодразделение = АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение
				|			И МаршрутныйЛистРасходныеОрдера.МаршрутНаименование = АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута";
				
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				
				
				
				Результаты = Запрос.ВыполнитьПакет();
				//+++АК BELN 2018.11.28 ИП-00020565      
				КоличествоКоробокПоОрдерам = ПосчитатьКоличесвоКоробок(Ссылка);
				//---АК BELN 2018.11.28    
				
				
				ВыборкаМ = Запрос.Выполнить().Выбрать();
				Если ВыборкаМ.Следующий() Тогда
					//УчаствуетВМаршруте = ВыборкаМ.Маршрут;
					УчаствуетВМаршруте = Строка(ВыборкаМ.Маршрут);
					//+++АК BELN 2018.11.28 ИП-00020565      
					ЗаполнитьТДПаллеты(ТабДок,ВыборкаМ,КоличествоКоробокПоОрдерам);
					//---АК BELN 2018.11.28     
					
				КонецЕсли;	
				//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				////+++АК sole 2018.09.10 ИП-00019639
				//Если ВыборкаДетальныеЗаписи.ДляШтучногоТовара Тогда
				//	Область = Макет.ПолучитьОбласть("Этикетка1");
				//	ОбластьНиз =  Макет.ПолучитьОбласть("ЭтикеткаНиз1");	
				//Иначе
				//	Область = Макет.ПолучитьОбласть("Этикетка");
				//	ОбластьНиз = Макет.ПолучитьОбласть("ЭтикеткаНиз");
				//КонецЕсли;
				////---АК sole 2018.09.10 ИП-00019639
				
				//
				//ОбластьСтр = Макет.ПолучитьОбласть("СтрокаПал");
				//Область.Параметры.ТорговаяТочка = ВыборкаДетальныеЗаписи.Получатель;
				//ШтрихКод = "850" + Прав("000000000000" + Формат(ВыборкаДетальныеЗаписи.ИД, "ЧГ=0"), 12);
				//ТабДок1 = Новый ТабличныйДокумент();
				//
				////+++LAGP 2018.02.09 ИП-00017892 Добавлен вывод склада в этикетку
				//Область.Параметры.Склад = Ссылка.Склад;
				////---LAGP
				//
				//Область.Параметры.Паллета = "ИД "+ВыборкаДетальныеЗаписи.ИД+" "+Строка(ВыборкаДетальныеЗаписи.РасходныйОрдер)+
				//?(ВыборкаДетальныеЗаписи.ДляШтучногоТовара,Символы.ПС+"Коробка склада штучного товара "+Строка(ВыборкаДетальныеЗаписи.Склад),"");
				//Область.Параметры.МаршЛист = УчаствуетВМаршруте;
				////Область.Параметры.МаршЛистДоп = ВыборкаМ.ПолноеНаименование;
				//
				//Рисунок 					= ?(ВыборкаДетальныеЗаписи.ДляШтучногоТовара,Область.Рисунки["ШтрихКодПал2"],Область.Рисунки["ШтрихКодПал"]);
				//
				////+++АК sole 2018.09.07 ИП-00019639
				////ПараметрыШК = Новый Структура();
				////ПараметрыШК.Вставить("Ширина", Рисунок.Ширина);
				////ПараметрыШК.Вставить("Высота", Рисунок.Высота);
				////ПараметрыШК.Вставить("ТипКода", 4);
				////ПараметрыШК.Вставить("ОтображатьТекст", Ложь);
				////ПараметрыШК.Вставить("РазмерШрифта", 10);
				////ПараметрыШК.Вставить("Штрихкод", Штрихкод);
				////Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
				//ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Штрихкод, 0, 300);
				//Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
				//
				//ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьНиз,Выборка.Ссылка);
				////---АК sole 2018.09.07 ИП-00019639
				//
				//Область.Параметры.ШК = ШтрихКод;
				//Если Не Ссылка.Склад.ДляШтучногоТовара Тогда
				//	Область.Параметры.Коробок=КолвоКор;
				//КонецЕсли; 
				//ТабДок1.Вывести(Область);
				//Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Состав Цикл
				//	ОбластьСтр.Параметры.Заполнить(Стр);
				//	ТабДок1.Вывести(ОбластьСтр);
				//КонецЦикла;
				//ТабДок1.Вывести(ОбластьНиз);
				//Если ТабДок.ПроверитьВывод(ТабДок1) Тогда
				//     ТабДок.Вывести(ТабДок1);
				//Иначе
				//     ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				//     ТабДок.Вывести(ТабДок1);
				//КонецЕсли; 
				//КонецЦикла;
			КонецЕсли; 
			Прервать;
			//АК БЕЛН 13.07.2016--
		КонецЦикла;
		
		Возврат ТабДок;
		
	КонецЕсли; 	
	
КонецФункции

//АК БЕЛН 13.07.2016++
Функция ПечатьРасходныйОрдер_ТоварыССертификатами(Ссылка, МенятьСтатусДокумента = Истина) Экспорт 
	
	Если МенятьСтатусДокумента Тогда
		Если НЕ Ссылка.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
			ДокОбъект = Ссылка.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
			ДокОбъект.Записать(?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;	
	КонецЕсли;	
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб	= Истина;
	
	//АК БЕЛН 13.07.2016++
	//Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Товары");
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("АК_РасходныйОрдер_Товары");
	//АК БЕЛН 13.07.2016--
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("ДатаСреза", КонецДня(Ссылка.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация.НаименованиеСокращенное, """") КАК ОрганизацияНаименование,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	РасходныйОрдерСклад.ВерсияДанных,
	|	РасходныйОрдерСклад.ПометкаУдаления,
	|	РасходныйОрдерСклад.Номер,
	|	РасходныйОрдерСклад.Дата,
	|	РасходныйОрдерСклад.ДатаРаспределения,
	|	РасходныйОрдерСклад.Проведен,
	|	РасходныйОрдерСклад.ВидОперации,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Перевозчик.Наименование КАК ПеревозчикНаименование,
	|	РасходныйОрдерСклад.Перевозчик,
	|	РасходныйОрдерСклад.Водитель.Наименование КАК ВодительНаименование,
	|	РасходныйОрдерСклад.Водитель,
	|	РасходныйОрдерСклад.Автор,
	|	РасходныйОрдерСклад.Товары.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА РасходныйОрдерСклад.ПровереноОператором
	|				ТОГДА РасходныйОрдерСклад.Товары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Количество,
	|		КоличествоУРЗ,
	|		Номенклатура.Наименование КАК Наименование,
	|		Характеристика.Наименование,
	|		ДатаПроизводства КАК ДатаПрзв
	|	),
	|	РасходныйОрдерСклад.Получатель,
	|	РасходныйОрдерСклад.Расходники.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК Наименование,
	|		ЕдиницаИзмерения,
	|		Отгружено
	|	),
	|	РасходныйОрдерСклад.ЕстьРасходники,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	РасходныйОрдерСклад.Комментарий,
	|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО РасходныйОрдерСклад.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоВКоробкеСрезПоследних.Характеристика КАК Объект,
	|	КоличествоВКоробкеСрезПоследних.Количество КАК Значение,
	|	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|			&ДатаСреза,
	|			Характеристика В
	|				(ВЫБРАТЬ
	|					РасходныйОрдерСкладТовары.Характеристика
	|				ИЗ
	|					Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|				ГДЕ
	|					РасходныйОрдерСкладТовары.Ссылка = &Ссылка)) КАК КоличествоВКоробкеСрезПоследних";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка 			= Результаты[0].Выбрать();
	ТабХарактеристики 	= Результаты[1].Выгрузить();
	
	//АК БЕЛН 13.07.2016++
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
	|			И (КОНЕЦПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
	|			И СертификатыНаПродукциюСрезПоследних.Удален = Ложь
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка =&Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыНаПродукцию.Номенклатура,
	|	СертификатыНаПродукцию.Характеристика,
	|	СертификатыНаПродукцию.РегистрационныйНомер,
	|	СертификатыНаПродукцию.ДействуетДо
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
	|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
	|			И вт.Период = СертификатыНаПродукцию.Период";
	ВыборкаСертификаты=Запрос.Выполнить().Выбрать();
	//АК БЕЛН 13.07.2016--
	
	
	
	
	ОбластьМаршрут          = Макет.ПолучитьОбласть("Маршрут");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 		= Макет.ПолучитьОбласть("Склад");
	ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОбластьШапкаТаблицыРМ 	= Макет.ПолучитьОбласть("ШапкаТаблицыРМ");
	ОбластьСтрокаРМ 		= Макет.ПолучитьОбласть("СтрокаРМ");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодвалТаблицыРМ 	= Макет.ПолучитьОбласть("ПодвалТаблицыРМ");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 		= Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьИтог         	= Макет.ПолучитьОбласть("Итог");
	
	ТабДок.Очистить();
	
		ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьМаршрут.Параметры.Маршрут = Выборка.Маршрут;
		ТабДок.Вывести(ОбластьМаршрут);
		
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=DD");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.Заполнить(Выборка);
		Если ЗначениеЗаполнено(Выборка.ОтгружаетсяИзЗоны)
			И Выборка.ОтгружаетсяИзЗоны <> Выборка.Склад Тогда
			ОбластьСклад.Параметры.Склад = СокрЛП(ОбластьСклад.Параметры.Склад) + " (через " + СокрЛП(Выборка.ОтгружаетсяИзЗоны) + ")";
		КонецЕсли;	
		ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
		
		ОбластьПолучатель.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьПолучатель, Выборка.Уровень());
		
		Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
			ОбластьКоммент          = Макет.ПолучитьОбласть("Комментарий");
			ОбластьКоммент.Параметры.Комментарий = СокрЛП(Выборка.Комментарий);
			ТабДок.Вывести(ОбластьКоммент);
		КонецЕсли;	
		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		ТабНоменклатура = Выборка.Товары.Выгрузить();
		ТабНоменклатура.Колонки.Добавить("ПолученоТТ", Новый ОписаниеТипов("Число"));
		
		//РасчитыватьПолученоТТ = ЗначениеЗаполнено(Выборка.Получатель)
		//							И ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
		//							И ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Ложь;
		//Если РасчитыватьПолученоТТ Тогда
		//	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(
		//								?(ЗначениеЗаполнено(Выборка.ДатаРаспределения), Выборка.ДатаРаспределения, Выборка.Дата),
		//								?(ЗначениеЗаполнено(Выборка.ДатаРаспределения),	Выборка.ДатаРаспределения, Выборка.Дата),
		//								Выборка.Получатель);
		//								
		//	///////////////////////
		//	Запрос = Новый Запрос();
		//	Запрос.УстановитьПараметр("Таб", ТабНоменклатура);
		//	Запрос.УстановитьПараметр("ДатаРаспределения", НачалоДня(?(ЗначениеЗаполнено(Выборка.ДатаРаспределения), Выборка.ДатаРаспределения, Выборка.Дата)));
		//	Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		//	Запрос.УстановитьПараметр("Получатель", Выборка.Получатель);
		//	Запрос.Текст = "ВЫБРАТЬ
		//				   |	РасходныйОрдерСкладТовары.Номенклатура,
		//				   |	РасходныйОрдерСкладТовары.Количество
		//				   |ПОМЕСТИТЬ ВТ_ТекТовары
		//				   |ИЗ
		//				   |	&Таб КАК РасходныйОрдерСкладТовары
		//				   |;
		//				   |
		//				   |////////////////////////////////////////////////////////////////////////////////
		//				   |ВЫБРАТЬ
		//				   |	РасходныйОрдерСкладТовары.Номенклатура,
		//				   |	РасходныйОрдерСкладТовары.Количество,
		//				   |	РасходныйОрдерСкладТовары.Ссылка
		//				   |ИЗ
		//				   |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		//				   |ГДЕ
		//				   |	НАЧАЛОПЕРИОДА(ВЫБОР
		//				   |				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
		//				   |					ТОГДА РасходныйОрдерСкладТовары.Ссылка.Дата
		//				   |				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
		//				   |			КОНЕЦ, ДЕНЬ) = &ДатаРаспределения
		//				   |	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &Получатель
		//				   |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = Истина
		//				   |	И РасходныйОрдерСкладТовары.Ссылка <> &Ссылка
		//				   |
		//				   |ОБЪЕДИНИТЬ ВСЕ
		//				   |
		//				   |ВЫБРАТЬ
		//				   |	ВТ_ТекТовары.Номенклатура,
		//				   |	ВТ_ТекТовары.Количество,
		//				   |	ЗНАЧЕНИЕ(Документ.РасходныйОрдерСклад.ПустаяСсылка)
		//				   |ИЗ
		//				   |	ВТ_ТекТовары КАК ВТ_ТекТовары
		//				   |;
		//				   |
		//				   |////////////////////////////////////////////////////////////////////////////////
		//				   |УНИЧТОЖИТЬ ВТ_ТекТовары";
		//	
		//	ТабРаспределение = Запрос.Выполнить().Выгрузить();
		//	ТабРаспределение.Колонки.Добавить("Коэффициент");
		//	Для Каждого СтрокаНоменклатура Из ТабНоменклатура Цикл
		//		СтрокиРаспределение = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатура.Номенклатура));
		//		СуммаКоличеств = 0;
		//		Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
		//			СуммаКоличеств = СуммаКоличеств + СтрокаРаспр.Количество;
		//		КонецЦикла;	
		//		Если СуммаКоличеств = 0 Тогда
		//			Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
		//				Если НЕ ЗначениеЗаполнено(СтрокаРаспр.Ссылка) Тогда
		//					СтрокаРаспр.Коэффициент = 1;
		//					Прервать;
		//				КонецЕсли;	
		//			КонецЦикла;	
		//		Иначе
		//			Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
		//				СтрокаРаспр.Коэффициент = СтрокаРаспр.Количество / СуммаКоличеств;
		//			КонецЦикла;
		//		КонецЕсли;	
		//	КонецЦикла;
		//	///////////////////////
		//								
		//								
		//	Для Каждого СтрокаТаб Из ТабНоменклатура Цикл
		//		СтрокаОстаток = ТабДанные.Найти(СтрокаТаб.Номенклатура, "Номенклатура");
		//		Если СтрокаОстаток <> Неопределено Тогда
		//			СтрокиКоэф = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура, Количество", СтрокаТаб.Номенклатура, СтрокаТаб.Количество));
		//			Коэф = 0;
		//			Если СтрокиКоэф.Количество() > 0 Тогда
		//				Коэф = СтрокиКоэф[0].Коэффициент
		//			КонецЕсли;	
		//			СтрокаТаб.ПолученоТТ = Окр(СтрокаОстаток.Поступило * Коэф, 3);
		//		Иначе
		//			СтрокаТаб.ПолученоТТ = 0;
		//		КонецЕсли;
		//	КонецЦикла;
		//	
		//	//Для Каждого СтрокаДанные Из ТабДанные Цикл
		//	//	Если СтрокаДанные.Поступило <= 0 Тогда
		//	//		Продолжить;
		//	//	КонецЕсли;
		//	//	СтрокиТоваров = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
		//	//	Если СтрокиТоваров.Количество() > 0 Тогда
		//	//		 СтрокиТоваров[0].ПолученоТТ = СтрокиТоваров[0].ПолученоТТ + СтрокаДанные.Поступило;
		//	//	КонецЕсли;	
		//	//КонецЦикла;
		//КонецЕсли;
		
		// Строка
		КолвоКор 	= 0;
		КолвоЕд 	= 0;
		КолвоУРЗ 	= 0;
		КолвоТТ 	= 0;
		ИтогКолУпак = 0;
		Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			//АК БЕЛН 13.07.2016++
			ТекстСертификатов = "";
			Пока ВыборкаСертификаты.НайтиСледующий(Новый Структура("Номенклатура,характеристика",ВыборкаНоменклатура.Номенклатура,ВыборкаНоменклатура.Характеристика)) Цикл
				Сертификат=СтрЗаменить(ВыборкаСертификаты.РегистрационныйНомер,".jpg;","");
				Сертификат=СтрЗаменить(Сертификат,".jpeg;","");
				Если ВыборкаСертификаты.ДействуетДо > '30000101' Тогда
					ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " бессрочный";
				Иначе	
					ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " до " +
															Формат(ВыборкаСертификаты.ДействуетДо,"ДФ=dd.MM.yyyy");
				КонецЕсли;											
			КонецЦикла;
			ВыборкаСертификаты.Сбросить();											
			Если НЕ ТекстСертификатов = "" Тогда
				ТекстСертификатов = Сред(ТекстСертификатов, 3);
			КонецЕсли;
			ОбластьСтрока.Параметры.Сертификат = ТекстСертификатов + ".";
			//АК БЕЛН 13.07.2016--
			СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый структура("СтруктурнаяЕдиница, Объект", Выборка.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
			КоличествоВУпаковке = 0;
			Если СтрокиХарактеристика.Количество() > 0 Тогда
				КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
			КонецЕсли;	
			Если КоличествоВУпаковке > 0 Тогда
				ОбластьСтрока.Параметры.КолУпакУРЗ = Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
				ОбластьСтрока.Параметры.КолУпак = Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
			Иначе				
				ОбластьСтрока.Параметры.КолУпакУРЗ = "";
				ОбластьСтрока.Параметры.КолУпак = "";
			КонецЕсли;
			
			Если КоличествоВУпаковке > 0 Тогда
				КолвоКор = КолвоКор + Окр(ВыборкаНоменклатура.КоличествоУРЗ/КоличествоВУпаковке,1);
				ИтогКолУпак = ИтогКолУпак+Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
			КонецЕсли;	
			КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
			КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
			
			//КолвоТТ 	= КолвоТТ 	+ ВыборкаНоменклатура.ПолученоТТ;
			
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		// Подвал
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ОбластьИтог.Параметры.ИтогКор 	= КолвоКор;
		ОбластьИтог.Параметры.ИтогУРЗ 	= КолвоУРЗ;
		ОбластьИтог.Параметры.ИтогЕд 	= КолвоЕд;
		ОбластьИтог.Параметры.ИтогКолУпак 	= ИтогКолУпак;
		//ОбластьИтог.Параметры.ИтогТТ 	= КолвоТТ;
		ТабДок.Вывести(ОбластьИтог);
		
		Если Выборка.ЕстьРасходники Тогда
			ТабДок.Вывести(ОбластьШапкаТаблицыРМ);
			ВыборкаРасходники = Выборка.Расходники.Выбрать();
			
			Пока ВыборкаРасходники.Следующий() Цикл
				ОбластьСтрокаРМ.Параметры.Заполнить(ВыборкаРасходники);
				ТабДок.Вывести(ОбластьСтрокаРМ);
			КонецЦикла;
			ТабДок.Вывести(ОбластьПодвалТаблицыРМ);
		КонецЕсли;
		ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Выборка.Автор;
		
		ТабДок.Вывести(ОбластьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
		ТабДок.Вывести(ОбластьВремяПечати);
		
		
		//АК БЕЛН 13.07.2016++
		//Паллета=Справочники.СоставПаллеты.НайтиПоРеквизиту("РасходныйОрдер",Ссылка);
		//Если Не ЗначениеЗаполнено(Паллета) Тогда
		//	ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
		//	ОбъектПаллеты.РасходныйОрдер=Ссылка;
		//	ОбъектПаллеты.Записать();
		//КонецЕсли; 
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	СоставПаллеты.Ссылка
		//	|ИЗ
		//	|	Справочник.СоставПаллеты КАК СоставПаллеты
		//	|ГДЕ
		//	|	СоставПаллеты.РасходныйОрдер = &РасходныйОрдер
		//	|	И СоставПаллеты.ПометкаУдаления = ЛОЖЬ";

		//Запрос.УстановитьПараметр("РасходныйОрдер", Ссылка);

		//Результат = Запрос.Выполнить();

		//ВыборкаДетальныеЗаписи = Результат.Выбрать();
		//Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		//ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
		//	
		//УчаствуетВМаршруте = "";
		//Запрос = Новый Запрос();
		//Запрос.Текст = "ВЫБРАТЬ
		//			   |	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование КАК Маршрут
		//			   |ИЗ
		//			   |	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		//			   |ГДЕ
		//			   |	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
		//			   |	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ";
		//Запрос.УстановитьПараметр("Документ", Ссылка);
		//Выборка = Запрос.Выполнить().Выбрать();
		//Если Выборка.Следующий() Тогда
		//	УчаствуетВМаршруте = Выборка.Маршрут;
		//КонецЕсли;	
		//		
		//Область = Макет.ПолучитьОбласть("Этикетка");
		//ОбластьСтр = Макет.ПолучитьОбласть("СтрокаПал");
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	Область.Параметры.ТорговаяТочка = Ссылка.Получатель;
		//	ШтрихКод = "850" + Прав("000000000000" + Формат(ВыборкаДетальныеЗаписи.Ссылка.ИД, "ЧГ=0"), 12);
		//	ТабДок1 = Новый ТабличныйДокумент();
		//				Область.Параметры.Паллета = "ИД "+ВыборкаДетальныеЗаписи.Ссылка.ИД+" "+Строка(ВыборкаДетальныеЗаписи.Ссылка.РасходныйОрдер)+Символы.ПС+"Маршрут: " + УчаствуетВМаршруте;
		//	
		//	Рисунок 					= Область.Рисунки["ШтрихКодПал"];
		//	
		//	ПараметрыШК = Новый Структура();
		//	ПараметрыШК.Вставить("Ширина", Рисунок.Ширина);
		//	ПараметрыШК.Вставить("Высота", Рисунок.Высота);
		//	ПараметрыШК.Вставить("ТипКода", 4);
		//	ПараметрыШК.Вставить("ОтображатьТекст", Ложь);
		//	ПараметрыШК.Вставить("РазмерШрифта", 10);
		//	ПараметрыШК.Вставить("Штрихкод", Штрихкод);
		//	Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
		//	Область.Параметры.ШК = ШтрихКод;
		//	ТабДок1.Вывести(Область);
		//	Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Состав Цикл
		//		ОбластьСтр.Параметры.Заполнить(Стр);
		//		ТабДок1.Вывести(ОбластьСтр);
		//	КонецЦикла; 
		//	Если ТабДок.ПроверитьВывод(ТабДок1) Тогда
		//		 ТабДок.Вывести(ТабДок1);
		//	Иначе
		//		 ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//		 ТабДок.Вывести(ТабДок1);
		//	КонецЕсли; 
		//КонецЦикла;
 
		//АК БЕЛН 13.07.2016--
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции
//АК БЕЛН 13.07.2016--


Функция ПечатьРасходныйОрдерРеклМатериалы_Товары(Ссылка) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб	= Истина;
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдерРеклМатериалы_Товары");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("ДатаСреза", КонецДня(Ссылка.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация.НаименованиеСокращенное, """") КАК ОрганизацияНаименование,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация,
	|	РасходныйОрдерСклад.ВерсияДанных,
	|	РасходныйОрдерСклад.ПометкаУдаления,
	|	РасходныйОрдерСклад.Номер,
	|	РасходныйОрдерСклад.Дата,
	|	РасходныйОрдерСклад.ДатаРаспределения,
	|	РасходныйОрдерСклад.Проведен,
	|	РасходныйОрдерСклад.ВидОперации,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Перевозчик.Наименование КАК ПеревозчикНаименование,
	|	РасходныйОрдерСклад.Перевозчик,
	|	РасходныйОрдерСклад.Водитель.Наименование КАК ВодительНаименование,
	|	РасходныйОрдерСклад.Водитель,
	|	РасходныйОрдерСклад.Автор,
	|	РасходныйОрдерСклад.Получатель,
	|	РасходныйОрдерСклад.Комментарий,
	|	ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).ОсновнойСклад КАК ОсновнойСклад,
	|	ВЗ_Маршруты.Ссылка.Наименование КАК Маршрут,АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО РасходныйОрдерСклад.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаршрутыТорговыеТочки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|			МАКСИМУМ(МаршрутыТорговыеТочки.Ссылка) КАК Ссылка
	|		ИЗ
	|			Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
	|		ГДЕ
	|			МаршрутыТорговыеТочки.Ссылка.НеУчаствуетВТранспортнойСистеме = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			МаршрутыТорговыеТочки.СтруктурнаяЕдиница,
	|			МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение) КАК ВЗ_Маршруты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
	|		ПО ВЗ_Маршруты.СтруктурноеПодразделение = АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение
	|			И ВЗ_Маршруты.Ссылка.Наименование = АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута
	|		ПО РасходныйОрдерСклад.Получатель = ВЗ_Маршруты.СтруктурнаяЕдиница
	|			И (ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).ОсновнойСклад = ВЗ_Маршруты.СтруктурноеПодразделение)
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура.Наименование КАК Наименование,
	|	РасходныйОрдерСкладТовары.Характеристика.Наименование,
	//+++АК sils 27.04.2018 ИП-00018026
	|	РасходныйОрдерСкладТовары.Пол,
	//---АК
	|	РасходныйОрдерСкладТовары.Количество КАК Колво,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) * РасходныйОрдерСкладТовары.Количество КАК Сумма,
	|	РасходныйОрдерСкладТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаСреза, ) КАК ЦеныПоставщиковСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = ЦеныПоставщиковСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = ЦеныПоставщиковСрезПоследних.Характеристика
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка 			= Результаты[0].Выбрать();
	ТабНоменклатура 	= Результаты[1].Выгрузить();
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 		= Макет.ПолучитьОбласть("Склад");
	ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьИтог         	= Макет.ПолучитьОбласть("Итог");
	ОбластьРазделитель     	= Макет.ПолучитьОбласть("Разделитель");
	//+++АК sils 27.04.2018 ИП-00018026
	флВидимостьПола = Ложь;
	Для Каждого СтрокаТовар Из Ссылка.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура) и
			СтрокаТовар.Номенклатура.ВидРекламногоМатериала = Перечисления.ПодразделРекламныхМатериалов.ФормаДляДействующихВВ Тогда
			флВидимостьПола = Истина;
		КонецЕсли;	
	КонецЦикла;
	Если флВидимостьПола Тогда
		ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы_Пол");
		ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка_Пол");
	КонецЕсли;
	//---АК
	//АК БЕЛН 14.03.2017++

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСкладТорговыеТочки.Магазин
		|ИЗ
		|	Документ.РасходныйОрдерСклад.ТорговыеТочки КАК РасходныйОрдерСкладТорговыеТочки
		|ГДЕ
		|	РасходныйОрдерСкладТорговыеТочки.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ТЗМагазины = Результат.Выгрузить();
	СтрПолучатель="";
	Для каждого Стр Из ТЗМагазины Цикл
		СтрПолучатель=СтрПолучатель+", "+Стр.Магазин;
	КонецЦикла; 
	Если ТЗМагазины.Количество()>0 Тогда
		СтрПолучатель=Сред(СтрПолучатель,2);
		ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель1");
	КонецЕсли; 
	ОбластьЗаголовок1 		= Макет.ПолучитьОбласть("Заголовок1");
	ОбластьЗаголовок1.Параметры.Рассылка=Ссылка.Основание.Рассылка;
	
	ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок1,Ссылка);
	Если ТЗМагазины.Количество()=0 Тогда

		//АК БЕЛН 14.03.2017--
		ВставлятьРазделительСтраниц = Ложь;
		Пока Выборка.Следующий() Цикл
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьЗаголовок.Параметры.Заполнить(Выборка);
			ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=DD");
			
			ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ОбластьСклад.Параметры.Заполнить(Выборка);
			ОбластьСклад.Параметры.ПеревозчикНаименование = СокрЛП(ОбластьСклад.Параметры.ПеревозчикНаименование) + ?(ЗначениеЗаполнено(ОбластьСклад.Параметры.ПеревозчикНаименование), Символы.ПС, "") + Выборка.ОсновнойСклад;
			ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
			ОбластьПолучатель.Параметры.Заполнить(Выборка);
			//АК БЕЛН 14.03.2017++
			//ОбластьЗаголовок1.Параметры.Заполнить(Выборка);
			//ОбластьЗаголовок1.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=DD");
			
			Если ЗначениеЗаполнено(СтрПолучатель) Тогда
				ОбластьПолучатель.Параметры.Получатель=СтрПолучатель;
			КонецЕсли; 
			//АК БЕЛН 14.03.2017
			//+++АК BELN 2018.11.28 ИП-00020693            
			Ворота=СокрЛП(СтрЗаменить(Строка(Выборка.Ворота),"Северный",""));
			
			ВоротаСтрокой = ?(Найти(Выборка.Маршрут,"ворота")=0 И ЗначениеЗаполнено(Ворота),
			" (ворота "+Ворота+")","");
			//---АК BELN 2018.11.28 
			
			ОбластьПолучатель.Параметры.ВодительНаименование = СокрЛП(ОбластьПолучатель.Параметры.ВодительНаименование)
			+ ?(ЗначениеЗаполнено(ОбластьПолучатель.Параметры.ВодительНаименование), Символы.ПС, "") + Выборка.Маршрут
			//+++АК BELN 2018.11.28 ИП-00020693            
			+ВоротаСтрокой;
			//---АК BELN 2018.11.28 
			ТабДок.Вывести(ОбластьПолучатель, Выборка.Уровень());
			Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
				ОбластьКоммент          = Макет.ПолучитьОбласть("Комментарий");
				ОбластьКоммент.Параметры.Комментарий = СокрЛП(Выборка.Комментарий);
				ТабДок.Вывести(ОбластьКоммент);
			КонецЕсли;	
			ТабДок.Вывести(ОбластьШапкаТаблицы);
			// Строка
			Сумма 	= 0;
			Колво 	= 0;
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
				Сумма 	= Сумма 	+ ВыборкаНоменклатура.Сумма;
				ТабДок.Вывести(ОбластьСтрока);
			КонецЦикла;
			
			// Подвал
			ТабДок.Вывести(ОбластьПодвалТаблицы);
			ОбластьИтог.Параметры.ИтогСумма 	= Сумма;
			ТабДок.Вывести(ОбластьИтог);
			
			ТабДок.Вывести(ОбластьПодвал);
			
			ВставлятьРазделительСтраниц = Истина;
			
		КонецЦикла;
	//АК БЕЛН 14.03.2017++
	КонецЕсли;	
    Если ТЗМагазины.Количество()>0 Тогда
		//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		Сч=0;
		Кол=Цел(ТЗМагазины.Количество()/3)+?(Цел(ТЗМагазины.Количество()/3)=ТЗМагазины.Количество()/3,0,1);
		Для Ит=1 по Кол Цикл
			Сч=Сч+1;
			Если Сч=6 Тогда
				ТабДок.Вывести(ОбластьЗаголовок1);
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			    Сч=0;
			Иначе
				ТабДок.Вывести(ОбластьЗаголовок1);
				ТабДок.Вывести(ОбластьРазделитель);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	//Сч=0;
	Для каждого Рис Из ТабДок.Рисунки Цикл
		Если Рис.Высота<0 и Рис.Высота>-30 Тогда
			Верх=Рис.Верх;
			Рис.Верх=Верх+7;//318;
			Рис.Высота=-33;
		КонецЕсли; 	
	КонецЦикла; 
	//ТабДок.Рисунки.D1.Высота=-20;
	//ТабДок.Рисунки.D2.Высота=ТабДок.Рисунки.D1.Высота*2.3;
	//ТабДок.Рисунки.D3.Высота=ТабДок.Рисунки.D1.Высота*2.3;
	
	
	//АК БЕЛН 14.03.2017--
	
	Возврат ТабДок;
	
КонецФункции

//АК БЕЛН 14.03.2017++
Процедура ДобавитьШтрихкодВОбластьДокумента(Область,Ссылка) Экспорт
	Штрихкод=ОбщегоНазначенияКлиентСервер.ПолучитьШтрихкодПоУИНу(Ссылка);
	//
	//Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	//Рисунок.Имя="ШтрихКод";
	//Рисунок.Ширина=130;
	//Рисунок.Высота=20;
	//Параметры = Новый Структура();
	//Параметры.Вставить("Ширина", 130);
	//Параметры.Вставить("Высота", 20);
	//Параметры.Вставить("ТипКода", 4);
	//Параметры.Вставить("ОтображатьТекст", Ложь);
	//Параметры.Вставить("РазмерШрифта", 14);
	//Параметры.Вставить("Штрихкод", Штрихкод);
	//ВнешняяКомпонента = ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	//Рисунок.Картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Параметры);
	
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Штрихкод, 0, 190);
	
	Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
		
		//+++АК kats 2018.11.26 ИП-00019751
		
	//	Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	//	Рисунок.Имя="QrКод";
	//	Рисунок.Ширина = 35;
	//	Рисунок.Высота = 35;
	//	Рисунок.Лево = 0;
	//	//Рисунок.Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	//	
	//	КартинкаQRКода = Новый Картинка(ДанныеQRКода);
	//
	//	Рисунок.Картинка = КартинкаQRКода;
	//	
	//	
	//	Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	//	Рисунок.Имя="QrКод1";
	//	Рисунок.Ширина = 35;
	//	Рисунок.Высота = 35;
	//	Рисунок.Лево = 85;
	//	//Рисунок.Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	//	
	//	КартинкаQRКода = Новый Картинка(ДанныеQRКода);
	//
	//	Рисунок.Картинка = КартинкаQRКода;
	//	
	//	Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	//	Рисунок.Имя="QrКод2";
	//	Рисунок.Ширина = 35;
	//	Рисунок.Высота = 35;
	//	Рисунок.Лево = 170;
	//	//Рисунок.Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	//	
	//	КартинкаQRКода = Новый Картинка(ДанныеQRКода);
	//
	//	Рисунок.Картинка = КартинкаQRКода;
	
	Для н = 1 По 3 Цикл
	
		Область.Рисунки["qr" + н].Картинка = Новый Картинка(ДанныеQRКода);
	
	КонецЦикла; 
	
	//---АК kats 2018.11.26
	
	КонецЕсли;
	
	
	
	
	
КонецПроцедуры	
//АК БЕЛН 14.03.2017--


Функция ПечатьРасходныйОрдер_Оборудование(Ссылка) Экспорт 
	
	ТабДок	= Новый ТабличныйДокумент;
	Макет	= Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Оборудование");
	
	ТабДок.Очистить();
	
	//Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Номер			= Ссылка.Номер;
	Область.Параметры.Дата			= Формат(Ссылка.Дата, "ДЛФ=DD");
	Область.Параметры.Склад			= Ссылка.Склад;
	Область.Параметры.ВидОперации	= Ссылка.ВидОперации;
	Область.Параметры.Получатель	= Ссылка.Получатель;
	ТабДок.Вывести(Область);
	
	//Шапка
	Область	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(Область);
	
	//Тело
	Область = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТЧ Из Ссылка.Оборудование Цикл
		ТекОборудование = СтрокаТЧ.Оборудование;
		Область.Параметры.НомерСтроки	= СтрокаТЧ.НомерСтроки;
		Область.Параметры.ОС			= ТекОборудование;
		Область.Параметры.ИнвНомер		= ТекОборудование.ИнвентарныйНомер;
		Область.Параметры.ЗавНомер		= ТекОборудование.ЗаводскойНомер;
		Область.Параметры.Количество	= 1;
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	//Итог
	Область	= Макет.ПолучитьОбласть("Итог");
	Область.Параметры.ИтогоКоличество = Ссылка.Оборудование.Количество();
	ТабДок.Вывести(Область);
	
	//Подвал
	Область	= Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Область);
	
	//Время печати
	Область = Макет.ПолучитьОбласть("ВремяПечати");
	Область.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Ссылка.Автор;
	ТабДок.Вывести(Область);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьТОРГ13(Ссылка, МассивТоваров = Неопределено) Экспорт 
	//+++АК BELN 2018.07.16 ИП-00019201      
	Если ТипЗнч(Ссылка)=Тип("Массив") Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации["ЮрАдресОрганизации"]);
		
		Запрос.УстановитьПараметр("ВидТелефона",                Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		Запрос.УстановитьПараметр("ВидФактическийАдресФизЛицо", Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
		Запрос.УстановитьПараметр("ВидЮридическийАдресФизЛицо", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
		Запрос.УстановитьПараметр("ВидФактическийАдрес",        Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		Запрос.УстановитьПараметр("ВидЮридическийАдрес",        Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Запрос.УстановитьПараметр("ПустойБанк", Справочники.Банки.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.ВерсияДанных,
		|	РасходныйОрдерСклад.ПометкаУдаления,
		|	РасходныйОрдерСклад.Номер,
		|	РасходныйОрдерСклад.Дата,
		|	РасходныйОрдерСклад.Проведен,
		|	РасходныйОрдерСклад.ВидОперации,
		|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСклад.Склад.Владелец) КАК ОтправительПодразделение,
		|	РасходныйОрдерСклад.Склад.Владелец.Адрес КАК ОтправительПодразделениеАдрес,
		|	РасходныйОрдерСклад.Автор,
		|	РасходныйОрдерСклад.Автор.ФизЛицо КАК ФизЛицоОтправителя,
		|	РасходныйОрдерСклад.Автор.ФизЛицо.Должность КАК ДолжностьОтправителя,
		|	РасходныйОрдерСклад.Автор.ФизЛицо.Наименование КАК ФИООтправителя,
		|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСклад.Получатель) КАК ПолучательПодразделение,
		|	РасходныйОрдерСклад.Получатель.Адрес КАК ПолучательПодразделениеАдрес,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация
		|	КОНЕЦ КАК Организация,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ТОГДА РасходныйОрдерСклад.Организация.НаименованиеПолное
		|			ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.НаименованиеПолное
		|		КОНЕЦ КАК СТРОКА(1000)) КАК ПолноеНаименование,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация.ИНН
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.ИНН
		|	КОНЕЦ КАК ИНН,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация.СвидетельствоСерияНомер
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.СвидетельствоСерияНомер
		|	КОНЕЦ КАК СвидетельствоСерияНомер,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация.СвидетельствоДатаВыдачи
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.СвидетельствоДатаВыдачи
		|	КОНЕЦ КАК СвидетельствоДатаВыдачи,
		|	МАКСИМУМ(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))) КАК ЮридическийАдрес,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КонтИнформация.Вид = &ВидТелефона
		|				ТОГДА ВЫРАЗИТЬ(КонтИнформация.Представление КАК СТРОКА(1000))
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК Телефон,
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """") КАК НомерСчета,
		|	ЕСТЬNULL(Банки.Ссылка, &ПустойБанк) КАК Банк,
		|	ЕСТЬNULL(Банки.Код, """") КАК БИК,
		|	ЕСТЬNULL(Банки.КоррСчет, """") КАК КоррСчет,
		|	МАКСИМУМ(Факсимиле.Ссылка) КАК СсылкаПодпись,
		|	РасходныйОрдерСклад.Склад
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияПериодическая.СрезПоследних(
		|				,
		|				Тип = &Тип
		|					И Вид = &Вид) КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Объект = РасходныйОрдерСклад.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтИнформация
		|		ПО (ВЫБОР
		|				КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА РасходныйОрдерСклад.Организация
		|				ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация
		|			КОНЕЦ = КонтИнформация.Объект)
		|			И (КонтИнформация.Вид В (&ВидЮридическийАдресФизЛицо, &ВидФактическийАдресФизЛицо, &ВидЮридическийАдрес, &ВидФактическийАдрес, &ВидТелефона))
		|			И (КонтИнформация.Тип В (&ТипАдрес, &ТипТелефон))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ПО (БанковскиеСчета.Ссылка = ВЫБОР
		|				КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА РасходныйОрдерСклад.Организация.ОсновнойБанковскийСчет
		|				ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.ОсновнойБанковскийСчет
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|		ПО (ВЫБОР
		|				КОГДА БанковскиеСчета.БанкДляРасчетов = &ПустойБанк
		|					ТОГДА БанковскиеСчета.Банк
		|				ИНАЧЕ БанковскиеСчета.БанкДляРасчетов
		|			КОНЕЦ = Банки.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Факсимиле КАК Факсимиле
		|		ПО РасходныйОрдерСклад.Автор.ФизЛицо = Факсимиле.ФизЛицо
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&ТекущийДокумент)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.ВерсияДанных,
		|	РасходныйОрдерСклад.ПометкаУдаления,
		|	РасходныйОрдерСклад.Номер,
		|	РасходныйОрдерСклад.Дата,
		|	РасходныйОрдерСклад.Проведен,
		|	РасходныйОрдерСклад.ВидОперации,
		|	РасходныйОрдерСклад.Склад.Владелец.Адрес,
		|	РасходныйОрдерСклад.Автор,
		|	РасходныйОрдерСклад.Автор.ФизЛицо,
		|	РасходныйОрдерСклад.Автор.ФизЛицо.Должность,
		|	РасходныйОрдерСклад.Автор.ФизЛицо.Наименование,
		|	РасходныйОрдерСклад.Получатель.Адрес,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация
		|	КОНЕЦ,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ТОГДА РасходныйОрдерСклад.Организация.НаименованиеПолное
		|			ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.НаименованиеПолное
		|		КОНЕЦ КАК СТРОКА(1000)),
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация.ИНН
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.ИНН
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация.СвидетельствоСерияНомер
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.СвидетельствоСерияНомер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация.СвидетельствоДатаВыдачи
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация.СвидетельствоДатаВыдачи
		|	КОНЕЦ,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"),
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """"),
		|	ЕСТЬNULL(Банки.Ссылка, &ПустойБанк),
		|	ЕСТЬNULL(Банки.Код, """"),
		|	ЕСТЬNULL(Банки.КоррСчет, """"),
		|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСклад.Склад.Владелец),
		|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерСклад.Получатель)" ;
		
		Шапка = Запрос.Выполнить().Выбрать();
		
		ДатаДок=Дата(1,1,1);
		Пока Шапка.Следующий() Цикл
			Если Шапка.Дата>ДатаДок Тогда
				ДатаДок=Шапка.Дата;
			КонецЕсли; 
		КонецЦикла; 
		Шапка.Сбросить();
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("Период",			 ДатаДок);
		Запрос.УстановитьПараметр("ТЗ",	 МассивТоваров);
		
		Запрос.Текст =
		?(ТипЗнч(МассивТоваров) = Тип("ТаблицаЗначений") И МассивТоваров.Количество() > 0,"Выбрать ТЗ.Ссылка,ТЗ.Номенклатура Поместить  МассивТоваров из &ТЗ ТЗ
		|;","")+"
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК Номер,Товары.Ссылка,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество КАК КоличествоМест,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК EдиницаИзмеренияКодПоОКЕИ,
		|	Товары.Номенклатура.id_tov КАК ТоварКод,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК Сумма,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
		|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения,
		|	Товары.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И Товары.Ссылка.Получатель = ЦеныНоменклатурыСрезПоследних.ТорговаяТочка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
		|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов1.Объект
		|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|ГДЕ
		|	Товары.Ссылка в (&ТекущийДокумент)
		| " + ?(ТипЗнч(МассивТоваров) = Тип("ТаблицаЗначений") И МассивТоваров.Количество() > 0, "И (Товары.Номенклатура,Товары.Ссылка) В (Выбрать МассивТоваров.Номенклатура,МассивТоваров.Ссылка из МассивТоваров)", "") + "
		| 
		|УПОРЯДОЧИТЬ ПО
		|	Номер Итоги по Товары.Ссылка";
		
		ВыборкаНом = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Соот=Новый Соответствие;
		
		Пока 		Шапка.Следующий() Цикл
			ВыборкаНом.Сбросить();
			
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ13";
			ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ТабДок.РазмерКолонтитулаСнизу	= 0;
			ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху	= 5;
			ТабДок.ПолеСнизу 	= 5;
			ТабДок.ПолеСлева 	= 5;
			ТабДок.ПолеСправа 	= 5;
			ТабДок.АвтоМасштаб = Истина;
			
			Сведения = Новый Структура("ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
			Сведения.Вставить("Свидетельство", "");
			
			Сведения.Вставить("ПолноеНаименование",    Шапка.ПолноеНаименование);
			Сведения.Вставить("ИНН",              Шапка.ИНН);
			Сведения.Вставить("Телефоны",         СокрЛП(Шапка.Телефон));
			Сведения.Вставить("НомерСчета",       Шапка.НомерСчета);
			Сведения.Вставить("Банк",             Шапка.Банк);
			Сведения.Вставить("БИК",              Шапка.БИК);
			Сведения.Вставить("КоррСчет",         Шапка.КоррСчет);
			Сведения.Вставить("ЮридическийАдрес", СокрЛП(Шапка.ЮридическийАдрес));
			
			
			
			
			Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("ТОРГ13");
			
			ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Шапка");
			ОбластьИтогиПоСтранице 	= Макет.ПолучитьОбласть("ИтогиПоСтранице");
			ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМаршрут 			= Макет.ПолучитьОбласть("Маршрут");
			ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
			ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
			ОбластьВсего	 		= Макет.ПолучитьОбласть("Всего");
			//+++АК BELN 2018.03.12 ИП-00018098 
			ОбластьПустая	 		= Макет.ПолучитьОбласть("Пустая");
			//---АК BELN 2018.03.12 
			
			НомерЛиста = 1;
			ТабДок.Очистить();
			
			ОбластьМаршрут.Параметры.Маршрут = Шапка.Маршрут;
			ТабДок.Вывести(ОбластьМаршрут);
			
			ОбластьЗаголовок.Параметры.Заполнить(Шапка);
			
			ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(Сведения);
			
			//+++АК LAGP 2018.02.07 По просьбе Алёны Каргиной
			//ОбластьЗаголовок.Параметры.ОтправительВидДеятельности 	= "Склад";
			ОбластьЗаголовок.Параметры.ОтправительВидДеятельности = Шапка.Склад;
			//---АК LAGP
			
			ОбластьЗаголовок.Параметры.ПолучательВидДеятельности 	= "Розница";
			ОбластьЗаголовок.Параметры.Дата = Формат(Шапка.Дата,"ДЛФ=DD");
			//+++АК MIND 2018.02.04 роспотребнадзор затребовал адрес
			ОбластьЗаголовок.Параметры.ОтправительПодразделение 	= Шапка.ОтправительПодразделение + ", " + Шапка.ОтправительПодразделениеАдрес;
			ОбластьЗаголовок.Параметры.ПолучательПодразделение 	= Шапка.ПолучательПодразделение + ", " + Шапка.ПолучательПодразделениеАдрес;
			//---АК MIND 
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ТабДок.Вывести(ОбластьШапкаТаблицы);
			
			ИтогКоличествоМестПоСтранице = 0;
			ИтогоКоличествоМест = 0;
			ИтогоСумма = 0;
			ИтогоСуммаПоСтранице = 0;
			
			КоличествоСтрок = 0;
			НомерСтроки = 0;
			Если ВыборкаНом.НайтиСледующий(Новый Структура("Ссылка",Шапка.Ссылка)) Тогда
				ВыборкаНоменклатура=ВыборкаНом.Выбрать();
				КоличествоСтрок = ВыборкаНоменклатура.Количество();
				
				Пока ВыборкаНоменклатура.Следующий() Цикл
					
					Если ВыборкаНоменклатура.КоличествоМест = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НомерСтроки = НомерСтроки + 1;
					
					ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
					КоличествоВУпаковке = 1;
					
					НаименованиеТовара = СокрЛП(ВыборкаНоменклатура.Номенклатура);
					
					//+++ gusd
					Если ЗначениеЗаполнено(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)
						И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)) Тогда
						
						НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика) + ")";
						
					КонецЕсли;
					//--- gusd
					//+++ АК BARA ИП-00018040      01.03.2018
					Если ЗначениеЗаполнено(ВыборкаНоменклатура.Характеристика) Тогда
						НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.Характеристика;
					КонецЕсли;
					
					//Если ЗначениеЗаполнено(ВыборкаНоменклатура.Производитель) Тогда
					//	НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.Производитель;
					//КонецЕсли;
					//--- АК BARA ИП-00018040
					
					Если ЗначениеЗаполнено(ВыборкаНоменклатура.СтранаПроисхождения) Тогда
						НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.СтранаПроисхождения;
					КонецЕсли;
					
					ОбластьСтрока.Параметры.Номенклатура = НаименованиеТовара;
					
					КоличествоМест = Окр(ВыборкаНоменклатура.КоличествоМест/КоличествоВУпаковке,1);
					
					ОбластьСтрока.Параметры.КоличествоВОдномМесте = КоличествоВУпаковке;
					ОбластьСтрока.Параметры.КоличествоМест = КоличествоМест;
					
					МассивВыводимыхОбластей = Новый Массив;
					МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
					МассивВыводимыхОбластей.Добавить(ОбластьИтогиПоСтранице);
					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьВсего);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
					КонецЕсли;
					//+++АК BELN 2018.03.12 ИП-00018098      
					МассивВыводимыхОбластей.Добавить(ОбластьПустая);
					//---АК BELN 2018.03.12  
					#Если Клиент Тогда
						Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда	
						#Иначе	
							Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда
							#КонецЕсли
							
							ОбластьИтогиПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
							ОбластьИтогиПоСтранице.Параметры.ИтогСуммыПоСтранице = ИтогоСуммаПоСтранице;
							ТабДок.Вывести(ОбластьИтогиПоСтранице);
							
							ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
							НомерЛиста = НомерЛиста + 1;
							ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Лист: "+ НомерЛиста;
							ТабДок.Вывести(ОбластьШапкаТаблицы);
							ТабДок.Вывести(ОбластьСтрока);
							ИтогоКоличествоМест = ИтогоКоличествоМест + КоличествоМест;
							ИтогКоличествоМестПоСтранице = 0;
							ИтогоСумма = ИтогоСумма + ВыборкаНоменклатура.Сумма;
							ИтогоСуммаПоСтранице = 0;
							
						Иначе
							
							ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + КоличествоМест;
							ИтогоКоличествоМест = ИтогоКоличествоМест + КоличествоМест;
							ИтогоСумма = ИтогоСумма + ВыборкаНоменклатура.Сумма;
							ИтогоСуммаПоСтранице = ИтогоСуммаПоСтранице + ВыборкаНоменклатура.Сумма;
							ТабДок.Вывести(ОбластьСтрока);
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли; 
				ОбластьВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличествоМест;
				ОбластьВсего.Параметры.ИтогСуммыВсего = ИтогоСумма;
				
				ТабДок.Вывести(ОбластьВсего);
				//+++АК SHEP 20160812: выводим подпись оператора
				ФизЛицоОтправителя = Шапка.ФизЛицоОтправителя;
				Если ЗначениеЗаполнено(ФизЛицоОтправителя) Тогда
					ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, Шапка, "ДолжностьОтправителя");
					ОбластьПодвал.Параметры.ФИООтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицоОтправителя);
					
					Факсимиле = Шапка.СсылкаПодпись;
					Если ЗначениеЗаполнено(Факсимиле) Тогда
						КартинкаПодпись = Факсимиле.Подпись.Получить();
						Если ТипЗнч(КартинкаПодпись) = Тип("Картинка") Тогда
							ОбластьПодвал.Рисунки.ПодписьОтправителя.Картинка = КартинкаПодпись;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//---АК SHEP 20160812
				ТабДок.Вывести(ОбластьПодвал);
				
				Соот.Вставить(Шапка.Ссылка,ТабДок);
			КонецЦикла;
			Возврат Соот;
	Иначе	
		//---АК BELN 2018.07.16 ИП-00019201 
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ13";
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.РазмерКолонтитулаСнизу	= 0;
		ТабДок.РазмерКолонтитулаСверху 	= 0;
		ТабДок.ПолеСверху	= 5;
		ТабДок.ПолеСнизу 	= 5;
		ТабДок.ПолеСлева 	= 5;
		ТабДок.ПолеСправа 	= 5;
		ТабДок.АвтоМасштаб = Истина;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.ВерсияДанных,
		|	РасходныйОрдерСклад.ПометкаУдаления,
		|	РасходныйОрдерСклад.Номер,
		|	РасходныйОрдерСклад.Дата,
		|	РасходныйОрдерСклад.Проведен,
		|	РасходныйОрдерСклад.ВидОперации,
		|	Представление(РасходныйОрдерСклад.Склад.Владелец) КАК ОтправительПодразделение,
		|	РасходныйОрдерСклад.Склад.Владелец.Адрес КАК ОтправительПодразделениеАдрес,
		|	РасходныйОрдерСклад.Автор,
		//+++АК SHEP 20160812: печать подписей оператора
		|	РасходныйОрдерСклад.Автор.ФизЛицо КАК ФизЛицоОтправителя,
		|	РасходныйОрдерСклад.Автор.ФизЛицо.Должность КАК ДолжностьОтправителя,
		|	РасходныйОрдерСклад.Автор.ФизЛицо.Наименование КАК ФИООтправителя,
		//---АК SHEP 20160812
		|	Представление(РасходныйОрдерСклад.Получатель) КАК ПолучательПодразделение,
		|	РасходныйОрдерСклад.Получатель.Адрес КАК ПолучательПодразделениеАдрес,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерСклад.Организация
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация
		|	КОНЕЦ КАК Организация,
		|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка = &ТекущийДокумент" ;
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("Период",			 Ссылка.Дата);
		Запрос.УстановитьПараметр("МассивТоваров",	 МассивТоваров);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК Номер,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество КАК КоличествоМест,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК EдиницаИзмеренияКодПоОКЕИ,
		|	Товары.Номенклатура.id_tov КАК ТоварКод,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК Сумма,
		|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
		|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения,
		|	Товары.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И Товары.Ссылка.Получатель = ЦеныНоменклатурыСрезПоследних.ТорговаяТочка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
		|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов1.Объект
		|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
		|ГДЕ
		|	Товары.Ссылка = &ТекущийДокумент
		| " + ?(ТипЗнч(МассивТоваров) = Тип("Массив") И МассивТоваров.Количество() > 0, "И Товары.Номенклатура В (&МассивТоваров)", "") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
		
		ВыборкаНоменклатура = Запрос.Выполнить().Выбрать();
		
		Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("ТОРГ13");
		
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Шапка");
		ОбластьИтогиПоСтранице 	= Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМаршрут 			= Макет.ПолучитьОбласть("Маршрут");
		ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
		ОбластьВсего	 		= Макет.ПолучитьОбласть("Всего");
		//+++АК BELN 2018.03.12 ИП-00018098 
		ОбластьПустая	 		= Макет.ПолучитьОбласть("Пустая");
		//---АК BELN 2018.03.12 
		
		НомерЛиста = 1;
		ТабДок.Очистить();
		
		ОбластьМаршрут.Параметры.Маршрут = Шапка.Маршрут;
		ТабДок.Вывести(ОбластьМаршрут);
		
		ОбластьЗаголовок.Параметры.Заполнить(Шапка);
		
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
		
		//+++АК LAGP 2018.02.07 По просьбе Алёны Каргиной
		//ОбластьЗаголовок.Параметры.ОтправительВидДеятельности 	= "Склад";
		ОбластьЗаголовок.Параметры.ОтправительВидДеятельности = Ссылка.Склад;
		//---АК LAGP
		
		ОбластьЗаголовок.Параметры.ПолучательВидДеятельности 	= "Розница";
		ОбластьЗаголовок.Параметры.Дата = Формат(Шапка.Дата,"ДЛФ=DD");
		//+++АК MIND 2018.02.04 роспотребнадзор затребовал адрес
		ОбластьЗаголовок.Параметры.ОтправительПодразделение 	= Шапка.ОтправительПодразделение + ", " + Шапка.ОтправительПодразделениеАдрес;
		ОбластьЗаголовок.Параметры.ПолучательПодразделение 	= Шапка.ПолучательПодразделение + ", " + Шапка.ПолучательПодразделениеАдрес;
		//---АК MIND 
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		ИтогКоличествоМестПоСтранице = 0;
		ИтогоКоличествоМест = 0;
		ИтогоСумма = 0;
		ИтогоСуммаПоСтранице = 0;
		
		КоличествоСтрок = ВыборкаНоменклатура.Количество();
		НомерСтроки = 0;
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			Если ВыборкаНоменклатура.КоличествоМест = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			КоличествоВУпаковке = 1;
			
			НаименованиеТовара = СокрЛП(ВыборкаНоменклатура.Номенклатура);
			
			//+++ gusd
			Если ЗначениеЗаполнено(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)
				И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)) Тогда
				
				НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика) + ")";
				
			КонецЕсли;
			//--- gusd
			//+++ АК BARA ИП-00018040      01.03.2018
			Если ЗначениеЗаполнено(ВыборкаНоменклатура.Характеристика) Тогда
				НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.Характеристика;
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ВыборкаНоменклатура.Производитель) Тогда
			//	НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.Производитель;
			//КонецЕсли;
			//--- АК BARA ИП-00018040
			
			Если ЗначениеЗаполнено(ВыборкаНоменклатура.СтранаПроисхождения) Тогда
				НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.СтранаПроисхождения;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Номенклатура = НаименованиеТовара;
			
			КоличествоМест = Окр(ВыборкаНоменклатура.КоличествоМест/КоличествоВУпаковке,1);
			
			ОбластьСтрока.Параметры.КоличествоВОдномМесте = КоличествоВУпаковке;
			ОбластьСтрока.Параметры.КоличествоМест = КоличествоМест;
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			МассивВыводимыхОбластей.Добавить(ОбластьИтогиПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			КонецЕсли;
			//+++АК BELN 2018.03.12 ИП-00018098      
			МассивВыводимыхОбластей.Добавить(ОбластьПустая);
			//---АК BELN 2018.03.12  
			#Если Клиент Тогда
				Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда	
				#Иначе	
					Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда
					#КонецЕсли
					
					ОбластьИтогиПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
					ОбластьИтогиПоСтранице.Параметры.ИтогСуммыПоСтранице = ИтогоСуммаПоСтранице;
					ТабДок.Вывести(ОбластьИтогиПоСтранице);
					
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
					НомерЛиста = НомерЛиста + 1;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Лист: "+ НомерЛиста;
					ТабДок.Вывести(ОбластьШапкаТаблицы);
					ТабДок.Вывести(ОбластьСтрока);
					ИтогоКоличествоМест = ИтогоКоличествоМест + КоличествоМест;
					ИтогКоличествоМестПоСтранице = 0;
					ИтогоСумма = ИтогоСумма + ВыборкаНоменклатура.Сумма;
					ИтогоСуммаПоСтранице = 0;
					
				Иначе
					
					ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + КоличествоМест;
					ИтогоКоличествоМест = ИтогоКоличествоМест + КоличествоМест;
					ИтогоСумма = ИтогоСумма + ВыборкаНоменклатура.Сумма;
					ИтогоСуммаПоСтранице = ИтогоСуммаПоСтранице + ВыборкаНоменклатура.Сумма;
					ТабДок.Вывести(ОбластьСтрока);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбластьВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличествоМест;
			ОбластьВсего.Параметры.ИтогСуммыВсего = ИтогоСумма;
			
			ТабДок.Вывести(ОбластьВсего);
			//+++АК SHEP 20160812: выводим подпись оператора
			ФизЛицоОтправителя = Шапка.ФизЛицоОтправителя;
			Если ЗначениеЗаполнено(ФизЛицоОтправителя) Тогда
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, Шапка, "ДолжностьОтправителя");
				ОбластьПодвал.Параметры.ФИООтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицоОтправителя);
				
				Факсимиле = Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо", Шапка.ФизЛицоОтправителя);
				Если ЗначениеЗаполнено(Факсимиле) Тогда
				    КартинкаПодпись = Факсимиле.Подпись.Получить();
					Если ТипЗнч(КартинкаПодпись) = Тип("Картинка") Тогда
						ОбластьПодвал.Рисунки.ПодписьОтправителя.Картинка = КартинкаПодпись;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//---АК SHEP 20160812
			ТабДок.Вывести(ОбластьПодвал);
			
			Возврат ТабДок;
	
	
	
	КонецЕсли; 
		
КонецФункции
	
Функция ПечатьМ11(Ссылка) Экспорт

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	РасходныйОрдерСкладТовары.Ссылка.Номер,
|	РасходныйОрдерСкладТовары.Ссылка.Дата,
|	"" КАК Фирма,
|								"" КАК КодПоОКПО,
|	РасходныйОрдерСкладТовары.Номенклатура.Код КАК НоменклатураКод,
|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
|	РасходныйОрдерСкладТовары.Количество,
|	0 КАК СуммаБезНДС,
|	0 КАК СуммаНДС,
|	РасходныйОрдерСкладТовары.Характеристика,
|	РасходныйОрдерСкладТовары.Ссылка.Склад,
|	РасходныйОрдерСкладТовары.Ссылка.Получатель,
|	РасходныйОрдерСкладТовары.Ссылка.Автор,
|	РасходныйОрдерСкладТовары.Ссылка.Комментарий,
|	ВЫБОР
|		КОГДА РасходныйОрдерСкладТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|				И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
|			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация
|		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Организация
|	КОНЕЦ КАК Организация,
|	ВЫБОР
|		КОГДА РасходныйОрдерСкладТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|				И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
|			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация.ИНН
|		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Организация.ИНН
|	КОНЕЦ КАК ОрганизацияИНН,
|	ВЫБОР
|		КОГДА РасходныйОрдерСкладТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|				И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
|			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация.КПП
|		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Организация.КПП
|	КОНЕЦ КАК ОрганизацияКПП,
|	ВЫБОР
|		КОГДА РасходныйОрдерСкладТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|				И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
|			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация.КодПоОКАТО
|		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Организация.КодПоОКАТО
|	КОНЕЦ КАК ОрганизацияКодПоОКАТО,
|	ВЫБОР
|		КОГДА РасходныйОрдерСкладТовары.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
|				И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
|			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация.КодПоОКПО
|		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Организация.КодПоОКПО
|	КОНЕЦ КАК ОрганизацияКодПоОКПО,
|	РасходныйОрдерСкладТовары.Номенклатура,
|	ВетеринарныеРазрешенияСрезПоследних.Период,
|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
|	ВетеринарныеРазрешенияСрезПоследних.Серия,
|	ВетеринарныеРазрешенияСрезПоследних.Номер КАК ВетНомер,
|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения
|ИЗ
|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
|		ПО РасходныйОрдерСкладТовары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов1.Объект
|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения)),
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
|		ПО РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
|ГДЕ
|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка";

Запрос.УстановитьПараметр("Ссылка", Ссылка);
Запрос.УстановитьПараметр("ДатаКон", КонецДня(Ссылка.Дата));
Запрос.УстановитьПараметр("СсылкаДата", Ссылка.МоментВремени());	//SelV в рамках СОД№18521 2012-01-31 : // 

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
Первая = Истина;
СуммаИтого = 0;
Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("М11");
ТабДок = Новый ТабличныйДокумент;

Маршрут = Макет.ПолучитьОбласть("Маршрут");
Шапка 	= Макет.ПолучитьОбласть("Шапка");
Подвал 	= Макет.ПолучитьОбласть("Подвал");

// Зададим параметры макета
ТабДок.АвтоМасштаб = Истина;

ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М11";

КоличествоСтрок = Выборка.Количество();
НомерСтроки     = 0;

Пока Выборка.Следующий() Цикл

НомерСтроки = НомерСтроки + 1;

Если Первая Тогда
	
	Шапка.Параметры.Фирма = Ссылка.Организация.НаименованиеПолное + " ИНН:" + Строка(Ссылка.Организация.ИНН) + "; " + СокрЛП(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Ссылка.Организация, ТекущаяДата()).ЮридическийАдрес); 
	Шапка.Параметры.Номер = Выборка.Номер;
	Шапка.Параметры.КодОКПО = Ссылка.Организация.КодПоОКПО;
	Шапка.Параметры.ДатаДок = Выборка.Дата;
	Шапка.Параметры.ПодразделениеОтправитель = Выборка.Склад;
	Шапка.Параметры.ПодразделениеПолучатель = Выборка.Получатель;
	
	Шапка.Параметры.ДатаПодразделение = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + " " + Выборка.Получатель;
	Строка = Макет.ПолучитьОбласть("Строка");
	
	Маршрут.Параметры.Маршрут = Выборка.Маршрут;
	ТабДок.Вывести(Маршрут);
	
	ТабДок.Вывести(Шапка);
	Первая = Ложь;
	
	//ВетВрач = Выборка.ВетеринарныйВрач;
	//ВетНомер = Выборка.ВетНомер + Цел((Ссылка.Дата - Выборка.Период) / 86400);
	//ВетСерия = Выборка.Серия;
	
КонецЕсли;

НаименованиеТовара = СокрЛП(Выборка.Номенклатура);
Если ЗначениеЗаполнено(Выборка.Производитель) Тогда
	НаименованиеТовара = НаименованиеТовара + ", " + Выборка.Производитель;
КонецЕсли;

Если ЗначениеЗаполнено(Выборка.СтранаПроисхождения) Тогда
	НаименованиеТовара = НаименованиеТовара + ", " + Выборка.СтранаПроисхождения;
КонецЕсли;
Строка.Параметры.МатЦенность = НаименованиеТовара;

Строка.Параметры.Код = Выборка.НоменклатураКод;
Строка.Параметры.ЕдиницаИзмеренияКод = Выборка.ЕдиницаИзмеренияКод;
Строка.Параметры.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
Строка.Параметры.КоличествоЗатребовано = Выборка.Количество;
Строка.Параметры.КоличествоОтпущено = Выборка.Количество;
Если Выборка.Количество = 0 Тогда
	Строка.Параметры.МатериалЦенаБезНДС = 0;
Иначе
	Строка.Параметры.МатериалЦенаБезНДС = Выборка.СуммаБезНДС / Выборка.Количество;
КонецЕсли;
Строка.Параметры.МатериалСумма = Выборка.СуммаБезНДС;
СуммаИтого = СуммаИтого + Выборка.СуммаБезНДС;

// Проверим вывод
СтрокаСПодвалом = Новый Массив;
СтрокаСПодвалом.Добавить(Строка);
Если НомерСтроки = КоличествоСтрок Тогда           
	СтрокаСПодвалом.Добавить(Подвал);
КонецЕсли;

#Если Клиент Тогда
	Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДок, СтрокаСПодвалом) Тогда	
	#Иначе	
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДок, СтрокаСПодвалом) Тогда
		#КонецЕсли
		
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	ТабДок.Вывести(Строка);
	
КонецЦикла; 

Подвал.Параметры.СуммаИтого = СуммаИтого;
//Подвал.Параметры.ВетНомер = Строка(ВетСерия) + " №" + Строка(ВетНомер);			
//Подвал.Параметры.Врач = ВетВрач;	

ТабДок.Вывести(Подвал);

Возврат ТабДок;
КонецФУнкции

Функция ПечатьАкт(Ссылка) Экспорт 

ТабДок = Новый ТабличныйДокумент;
Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Акт");
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	РасходныйОрдерСклад.Ссылка,
|	РасходныйОрдерСклад.ВерсияДанных,
|	РасходныйОрдерСклад.ПометкаУдаления,
|	РасходныйОрдерСклад.Номер,
|	РасходныйОрдерСклад.Дата,
|	РасходныйОрдерСклад.Проведен,
|	РасходныйОрдерСклад.Склад,
|	РасходныйОрдерСклад.Автор,
|	РасходныйОрдерСклад.Товары.(
|		Ссылка,
|		НомерСтроки,
|		Номенклатура,
|		Характеристика,
|		ЕдиницаИзмерения,
|		Количество
|	),
|	РасходныйОрдерСклад.ВидОперации
|ИЗ
|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
|ГДЕ
|	РасходныйОрдерСклад.Ссылка = &Ссылка" ;
Запрос.Параметры.Вставить("Ссылка", Ссылка);
Выборка = Запрос.Выполнить().Выбрать();

ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");


ТабДок.Очистить();

ВставлятьРазделительСтраниц = Ложь;
Пока Выборка.Следующий() Цикл
	Если ВставлятьРазделительСтраниц Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(Выборка);
	ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьСклад.Параметры.Заполнить(Выборка);
	ОбластьСклад.Параметры.ПричинаСписания = Выборка.ВидОперации;
	ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ВыборкаНоменклатура = Выборка.Товары.Выбрать();
	Итог = 0;
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
		Итог = Итог + ВыборкаНоменклатура.Количество;
		ТабДок.Вывести(ОбластьСтрока, ВыборкаНоменклатура.Уровень());
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ИтогКоличество = Итог;
	ТабДок.Вывести(ОбластьПодвал);
	
	ОбластьПодписи 	= Макет.ПолучитьОбласть("Подписи");
	ТабДок.Вывести(ОбластьПодписи);
	
	ОбластьВремяПечати.Параметры.ВремяПечати = "["+ТекущаяДата()+"] "+"Автор: "+Выборка.Автор;//+", Редактор: "+Выборка.Редактор;
	
	ВставлятьРазделительСтраниц = Истина;
	ТабДок.Вывести(ОбластьВремяПечати);
КонецЦикла;

Возврат ТабДок;
КонецФункции

//+++АК SHEP 2018.05.03 ИП-00018453: добавил организацию
Функция ПолучитьСкладПереработчика(Получатель, Организация = Неопределено) Экспорт

Если НЕ ЗначениеЗаполнено(Получатель) Тогда
	Возврат Справочники.Склады.ПустаяСсылка();
КонецЕсли;	

УстановитьПривилегированныйРежим(Истина);

Запрос = Новый Запрос(
"ВЫБРАТЬ ПЕРВЫЕ 1
|	Склады.Ссылка КАК Склад
|ИЗ
|	Справочник.Склады КАК Склады
|ГДЕ
|	НЕ Склады.ПометкаУдаления
|	И Склады.Контрагент = &Контрагент
|	И Склады.Владелец = &Владелец");
Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Получатель.ГоловнойКонтрагент),Получатель.ГоловнойКонтрагент,Получатель));
//+++АК SHEP 2018.05.03 ИП-00018453
//Запрос.УстановитьПараметр("Владелец", Справочники.СтруктурныеЕдиницы.СторонняяПереработка);
СтруктурныеЕдиницыСторонняяПереработка = ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Организация);
Запрос.УстановитьПараметр("Владелец", СтруктурныеЕдиницыСторонняяПереработка);
//---АК SHEP 2018.05.03

Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий()Тогда
	Возврат Выборка.Склад;
КонецЕсли;

Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
               |	Склады.Ссылка
               |ИЗ
               |	Справочник.Склады КАК Склады
               |ГДЕ
               |	Склады.Владелец = &Владелец
               |	И Склады.Контрагент = &Контрагент";
			   
Результат = Запрос.Выполнить();
Если Результат.Пустой() Тогда
	Склад = Справочники.Склады.СоздатьЭлемент();
	Склад.Наименование 	= ?(ЗначениеЗаполнено(Получатель.ГоловнойКонтрагент),Получатель.ГоловнойКонтрагент,Получатель).Наименование;
	//+++АК SHEP 2018.05.03 ИП-00018453
	//Склад.Владелец		= Справочники.СтруктурныеЕдиницы.СторонняяПереработка;
	Склад.Владелец		= СтруктурныеЕдиницыСторонняяПереработка;
	Если ЗначениеЗаполнено(Организация) Тогда
		Склад.Организация = Организация;
	КонецЕсли;
	//---АК SHEP 2018.05.03
	Склад.ВидСклада		= Перечисления.ВидыСкладов.Производство;
	Склад.Контрагент	= ?(ЗначениеЗаполнено(Получатель.ГоловнойКонтрагент),Получатель.ГоловнойКонтрагент,Получатель);

	Попытка
		Склад.Записать();
		Возврат Склад.Ссылка;
	Исключение
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецПопытки;
Иначе
	Возврат Справочники.Склады.ПустаяСсылка();
КонецЕсли;	

КонецФункции

Функция ПечатьТОРГ12_ДляТочки(СсылкаНаДокумент) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	//+++АК KIRN 2018.04.16 ИП-00018209^01
	//+++АК SHEP 2018.10.04 ИП-00020060
	//Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(СсылкаНаДокумент.Организация) ТОгда
	Если ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Получатель")) Тогда
	//---АК SHEP 2018.10.04
		ПечататьРТУ = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	РеализацияТоваровУслугРасходныеОрдера.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		               |	РеализацияТоваровУслугРасходныеОрдера.Ссылка.Проведен КАК Проведен,
		               |	РеализацияТоваровУслугРасходныеОрдера.Ссылка КАК РТУ
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
		               |ГДЕ
		               |	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер = &РасходныйОрдер
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Проведен УБЫВ,
		               |	ПометкаУдаления";
		Запрос.УстановитьПараметр("РасходныйОрдер", СсылкаНаДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		ЕСли Выборка.Следующий() Тогда
			РТУ = Выборка.РТУ;
			ПечататьРТУ = Истина;
		КонецЕСли;
		
		Если ПечататьРТУ ТОгда
			ТабДок = Документы.РеализацияТоваровУслуг.ПечатьТорг12(РТУ);
			ТабДок.АвтоМасштаб 				= Истина;
			Возврат ТабДок;
		КонецЕСли;  
	КонецЕСли;
	//---АК KIRN 
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДок", СсылкаНаДокумент.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	РасходныйОрдер.Получатель.Город КАК Город,
	|	РасходныйОрдер.Получатель.Улица КАК Улица,
	|	РасходныйОрдер.Получатель.Дом КАК Дом,
	|	ЕстьNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, РасходныйОрдер.Получатель.Организация) КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	ЕстьNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, РасходныйОрдер.Получатель.Организация) КАК Покупатель,
	|	ЕстьNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, РасходныйОрдер.Получатель.Организация) КАК Плательщик,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель.Наименование КАК СТРОКА(200)) КАК Получатель,
	//+++АК SHEP 20160812: печать подписей оператора
	|	РасходныйОрдер.Автор.ФизЛицо КАК ФизЛицоКладовщика,
	|	РасходныйОрдер.Автор.ФизЛицо.Должность КАК ДолжностьКладовщика,
	|	РасходныйОрдер.Автор.ФизЛицо.Наименование КАК ФИОКладовщика,
	//---АК SHEP 20160812
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаДок, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО РасходныйОрдер.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Период",			 СсылкаНаДокумент.Дата);
	
	Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК Номер,
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	Товары.Номенклатура.Код КАК ТоварКод,
	|	Товары.Количество,
	|	Товары.Количество КАК КоличествоМест,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	Товары.ЕдиницаИзмерения КАК ВидУпаковки,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоВОдномМесте,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК Сумма,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество - 100 * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество / 110 КАК СуммаНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК СуммаВВалютеДокумента,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество - 100 * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество / 110 КАК СуммаНДСВВалютеДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения,
	|	Товары.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика,
	|	Товары.Характеристика
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И Товары.Ссылка.Получатель = ЦеныНоменклатурыСрезПоследних.ТорговаяТочка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|ГДЕ
	|	Товары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	Запрос.Текст = Текст;
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	//ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 4;
	ТабДокумент.ПолеСлева          = 4;
	ТабДокумент.ПолеСнизу          = 4;
	ТабДокумент.ПолеСправа         = 4;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
	
	ОбластьМакетаМаршрут          = Макет.ПолучитьОбласть("НаименованиеМаршрута");
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("ШапкаТочка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("ПодвалТочка");
	
	ОбластьМакетаМаршрут.Параметры.Маршрут = Шапка.Маршрут;
	ТабДокумент.Вывести(ОбластьМакетаМаршрут);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.Город) <> "" Тогда
		//ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		//	СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
		//ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		//	СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		//ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
		//	"", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки
		//	+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = СокрЛП(Шапка.Получатель) + ", " + Шапка.Город + ", " + Шапка.Улица + ", " + Шапка.Дом;
		
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе);
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
	
	Если ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика="" Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика=ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя;
	КонецЕсли;	
	
	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = Шапка.ДатаДокумента;
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;
	
	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		НаименованиеТовара = СокрЛП(ВыборкаСтрок.Номенклатура);
		
		//+++ gusd
		Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
			И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
			
			НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
			
		КонецЕсли;
		//--- gusd
		
		//+++ АК BARA ИП-00018040      01.03.2018
		Если ЗначениеЗаполнено(ВыборкаСтрок.Характеристика) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Характеристика;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВыборкаСтрок.Производитель) Тогда
		//	НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.Производитель;
		//КонецЕсли;
		//--- АК BARA ИП-00018040
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.СтранаПроисхождения) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаСтрок.СтранаПроисхождения;
		КонецЕсли;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = НаименованиеТовара;
		
		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;
		
		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		
		Если НЕ Шапка.СуммаВключаетНДС ИЛИ СуммаНДС = 0 Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		//Если НомерСтроки = 1 Тогда
		//	СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		//КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		#Если Клиент Тогда
			Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
			#Иначе	
				Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
				#КонецЕсли
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
					
					// Очистим итоги по странице
					ИтогоМестНаСтранице       = 0;
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаНаСтранице      = 0;
					ИтогоНДСНаСтранице        = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоМест       = ИтогоМест       + КоличествоМест;
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			
	КонецЦикла;
		
	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
	
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
	
	ТабДокумент.Вывести(ОбластьМакетаВсего);
	
	// Выводим подвал документа
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
	
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	//+++АК SHEP 20160812: выводим подпись оператора
	ФизЛицоКладовщика = Шапка.ФизЛицоКладовщика;
	Если ЗначениеЗаполнено(ФизЛицоКладовщика) Тогда
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, Шапка, "ДолжностьКладовщика");
		ОбластьМакетаПодвал.Параметры.ФИОКладовщика = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицоКладовщика);
		
		Факсимиле = Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо", ФизЛицоКладовщика);
		Если ЗначениеЗаполнено(Факсимиле) Тогда
			КартинкаПодпись = Факсимиле.Подпись.Получить();
			Если ТипЗнч(КартинкаПодпись) = Тип("Картинка") Тогда
				ОбластьМакетаПодвал.Рисунки.ПодписьКладовщикаТочка.Картинка = КартинкаПодпись;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20160812
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьМ15(Ссылка,ПодписьИПечать=Ложь,ЕстьОшибки=Ложь) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	
	ТекДоговор = ПолучитьДоговорКонтрагента(Ссылка.Получатель);
	ТекстОшибки="";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"		, Ссылка);
	Запрос.УстановитьПараметр("Контрагент"			, Ссылка.Получатель);
	Запрос.УстановитьПараметр("ДоговорКонтрагента"	, ТекДоговор);
	//Запрос.УстановитьПараметр("Организация"			, ?(НЕ Ссылка.Организация.Пустая(), Ссылка.Организация, Ссылка.Склад.Владелец.Организация));
	
	//+++АК LAGP 2018.04.28 ИП-00018531 Исправить вывод организации в печатной форме М-15 (берется организация из договора)	
	//Запрос.УстановитьПараметр("Организация"			, ?(НЕ ТекДоговор.Пустая(), ТекДоговор.Организация, Справочники.Организации.ПустаяСсылка()));
	ТекДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Организация = ?(НЕ Ссылка.Организация.Пустая(), Ссылка.Организация, ?(НЕ ТекДоговор.Пустая(), ТекДоговор.Организация, Справочники.Организации.ПустаяСсылка()));
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если Ссылка.Товары.Количество() > 0 Тогда
			Организация = Ссылка.Товары[0].Номенклатура.ТорговаяМарка.ОрганизацияЗакупки; //+++АК LAGP 2018.05.22 ИП-00018531 Условие дописано по просьбе Алёны Каргиной.	
		КонецЕсли;
	КонецЕсли;		
	Запрос.УстановитьПараметр("Организация"	, Организация);
	//---АК LAGP 2018.04.28
	
	Запрос.Текст =
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТДоговор
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|ГДЕ
	//|	ДоговорыКонтрагентов.Владелец = &Контрагент
	//|	И ДоговорыКонтрагентов.Организация = &Организация
	//|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	"ВЫБРАТЬ
	|	РасходныйОрдерСклад.Номер КАК Номер,
	|	РасходныйОрдерСклад.Дата КАК ДатаСоставления,
	|	РасходныйОрдерСклад.Дата КАК ДатаДокумента,
	|	&Организация КАК Организация,
	|	&Организация КАК ЮрФизЛицо,
	|	&Организация КАК Руководители,
	|	РасходныйОрдерСклад.Склад КАК Отправитель,
	|	РасходныйОрдерСклад.Склад.Наименование КАК ОтправительНаименование,
	|	РасходныйОрдерСклад.Получатель.Код КАК КонтрагентКод,
	|	РасходныйОрдерСклад.Получатель КАК Контрагент,
	|	РасходныйОрдерСклад.Получатель КАК Получатель,
	|	РасходныйОрдерСклад.Получатель.Наименование КАК ПолучательНаименование,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасходныйОрдерСклад.Автор.ФизЛицо КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка = &ТекущийДокумент";
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговор КАК ВТДоговор
	//|		ПО (ИСТИНА)
	//|	ЕСТЬNULL(ВТДоговор.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВТДоговор";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент"	, Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСреза"			, Ссылка.Дата);
	ЗапросПоТоварам.УстановитьПараметр("МассивНоменклатуры"	, Ссылка.Товары.ВыгрузитьКолонку("Номенклатура"));
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК Номер,
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, 0) * Товары.Количество * (100 / (100 + ВЫБОР
	|		КОГДА Товары.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		КОГДА Товары.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ)) КАК Сумма,
	|	0 КАК СуммаНДС,
	|	Товары.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаСреза, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныПоставщиков
	|		ПО Товары.Номенклатура = ЦеныПоставщиков.Номенклатура
	|			И Товары.Характеристика = ЦеныПоставщиков.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
	
	
	Макет = ПолучитьОбщийМакет("М15");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_М15";
	
	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	#Если Клиент Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	#Иначе	
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	#КонецЕсли
	ОбластьМакета.Параметры.ОрганизацияПоОКПО       = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента          = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ОбластьМакета.Параметры.Основание        		= Шапка.ДоговорКонтрагента;
	
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления);
	#Если Клиент Тогда
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	#Иначе	
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	#КонецЕсли
	ОбластьМакета.Параметры.КонтрагентНаименование 	= ПредставлениеКонтрагента;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	НомерСтраницы   = 1;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС    = 0;
	ИтогоВсегоСНДС   = 0;
	Ном              = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Ном = Ном + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;		
		
		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			НомерСтраницы	= НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		
		СуммаСНДС	= ВыборкаСтрокТовары.Сумма;
		//СуммаСНДС	= (ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, Окр(ВыборкаСтрокТовары.СуммаНДС, 2)));
		СуммаНДС    = Окр(ВыборкаСтрокТовары.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;
		
		Количество 	= ВыборкаСтрокТовары.Количество;
		Цена		= ?(Количество = 0, 0, СуммаБезНДС / Количество);
		
		ОбластьМакета.Параметры.Количество	= Количество;
		ОбластьМакета.Параметры.СуммаСНДС	= СуммаСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС	= СуммаБезНДС;
		ОбластьМакета.Параметры.СуммаНДС	= СуммаНДС;
		ОбластьМакета.Параметры.Цена		= Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) +
		?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика), " (" + СокрЛП(ВыборкаСтрокТовары.Характеристика.Наименование) + ")", "");// + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по документу
	ОбластьПодвала.Параметры.Заполнить(Шапка);
	
	ФамилияИмяОтчествоФизЛица     				= ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоОтпускПроизвел 			= ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьПодвала.Параметры.ФИОРуководителя 	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	ОбластьПодвала.Параметры.ФИОГлавБухгалтера  = Руководители.ГлавныйБухгалтерПредставление;
	
	ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
	ОбластьПодвала.Параметры.ИтогНДС       = Формат(ИтогоВсегоСНДС - ИтогоСуммаБезНДС, "ЧГ=");
	
	ТабДокумент.Вывести(ОбластьПодвала);
	Если ПодписьИПечать Тогда
		ТекОрганизация = Запрос.Параметры.Организация;
		//Если ЗначениеЗаполнено(ТекОрганизация) Тогда
			Попытка
				ПечатьОрганизации = ТекОрганизация.Печать.Получить();
				Если ТипЗнч(ПечатьОрганизации) = Тип("Картинка") Тогда
					//ОбластьМакета.Рисунки.Очистить();
					НачСтрокаТаблицы = ТабДокумент.ВысотаТаблицы - 2; КонСтрокаТаблицы = ТабДокумент.ВысотаТаблицы+8;
					РисунокПодписи = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			    	РисунокПодписи.Расположить(ТабДокумент.Область(НачСтрокаТаблицы, 6, КонСтрокаТаблицы, 8));
					РисунокПодписи.Узор 		= ТипУзораТабличногоДокумента.БезУзора;
			    	РисунокПодписи.ЦветФона 	= Новый Цвет; // автоцвет (прозрачный чтоб полоску подчеркивания видно было)
			    	РисунокПодписи.Линия 		= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
			    	РисунокПодписи.Картинка 	= ПечатьОрганизации;
					РисунокПодписи.Высота = 50;
					РисунокПодписи.Ширина = 50;
					//РисунокПодписи.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
				КонецЕсли;
			Исключение
				ЕстьОшибки = Истина;
				ТекстОшибки = "Не удалось загрузить печать для организации "+Строка(ТекОрганизация)+Символы.ПС;
			КонецПопытки;
		//КонецЕсли;
		НачСтрокаТаблицы = ТабДокумент.ВысотаСтраницы-5; КонСтрокаТаблицы = НачСтрокаТаблицы+1;
		
		Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
			Попытка
				ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Шапка.ОтветственноеЛицо).Получить();
				Если ТипЗнч(ПодписьДиректора) = Тип("Картинка") Тогда
			    	ТабДокумент.Рисунки.Подпись1.Картинка 	= ПодписьДиректора;
				КонецЕсли;
			Исключение
				ЕстьОшибки = Истина;
				ТекстОшибки=ТекстОшибки+"Не удалось получить подпись для отв.лица: "+Строка(Шапка.ОтветственноеЛицо)+Символы.ПС;
			КонецПопытки;
		Иначе 	
			//ЕстьОшибки = Истина;
			ТекстОшибки= "Не заполнен автор расходного ордера.";			
		КонецЕсли;
		
		// ГлавныйБухгалтер
		Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
			Попытка
				ПодписьДиректора = ОбщегоНазначения.ПолучитьПодписьФизлица(Руководители.ГлавныйБухгалтер).Получить();
				Если ТипЗнч(ПодписьДиректора) = Тип("Картинка") Тогда
			    	ТабДокумент.Рисунки.Подпись2.Картинка 	= ПодписьДиректора;
				КонецЕсли;
			Исключение
				ЕстьОшибки = Истина;
				ТекстОшибки=ТекстОшибки+"Не удалось загрузить подпись гл.бухгалтера";
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли;
		
	Если ЕстьОшибки Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьНовыхСертификатов(МассивСсылок,Пакетная=Ложь) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_Сертификаты";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Ссылка.Получатель КАК ТТ,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """""""") КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ТорговаяТочка_Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО Товары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|ГДЕ
	|	Товары.Ссылка В(&ТекущийДокумент)
	|	И Товары.Ссылка.ВидОперации = &ВидОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Ссылка.Получатель,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"""""),
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер
	|ПОМЕСТИТЬ ТЗ_Сертификаты
	|ИЗ
	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	|			&ТекущаяДата,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Номенклатура
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Характеристика
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И (ДействуетДо >= &ТекущаяДата
	|					ИЛИ ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|				И НЕ ДатаДобавленияФайла = ДАТАВРЕМЯ(1, 1, 1)
	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) <= 17
	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) >= 0) КАК СертификатыНаПродукциюСрезПоследних
	|ГДЕ СертификатыНаПродукциюСрезПоследних.Удален = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ТорговаяТочка_Номенклатура.ТТ,
	|	ТЗ_ТорговаяТочка_Номенклатура.Номенклатура,
	|	ТЗ_ТорговаяТочка_Номенклатура.Характеристика,
	|	ТЗ_Сертификаты.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов,
	|	ТЗ_Сертификаты.ДатаДобавленияФайла,
	|	ТЗ_Сертификаты.РегистрационныйНомер,
	|	ТЗ_ТорговаяТочка_Номенклатура.Маршрут,
	|	ТЗ_ТорговаяТочка_Номенклатура.ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ДатаДобавленияСертификата
	|ИЗ
	|	ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Сертификаты КАК ТЗ_Сертификаты
	|		ПО ТЗ_ТорговаяТочка_Номенклатура.Номенклатура = ТЗ_Сертификаты.Номенклатура
	|			И ТЗ_ТорговаяТочка_Номенклатура.Характеристика = ТЗ_Сертификаты.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ДатаДобавленияСертификата.ТТ,
	|	ТЗ_ДатаДобавленияСертификата.Номенклатура,
	|	ТЗ_ДатаДобавленияСертификата.Характеристика,
	|	ТЗ_ДатаДобавленияСертификата.ХранилищеСертификатов,
	|	ТЗ_ДатаДобавленияСертификата.ДатаДобавленияФайла,
	|	ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноВыводить,
	|	ТЗ_ДатаДобавленияСертификата.Маршрут,
	|	ТЗ_ДатаДобавленияСертификата.ПорядокСортировки КАК ПорядокСортировки
	|ИЗ
	|	ТЗ_ДатаДобавленияСертификата КАК ТЗ_ДатаДобавленияСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеСертификаты КАК ОтправленныеСертификаты
	|		ПО ТЗ_ДатаДобавленияСертификата.ТТ = ОтправленныеСертификаты.ТорговаяТочка
	|			И ТЗ_ДатаДобавленияСертификата.Номенклатура = ОтправленныеСертификаты.Номенклатура
	|			И ТЗ_ДатаДобавленияСертификата.Характеристика = ОтправленныеСертификаты.Характеристика
	|			И ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер = ОтправленныеСертификаты.РегистрационныйНомер
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки";
	
	
	
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТТ_Выгрузка = Выгрузка.Скопировать();
	ТТ_Выгрузка.Свернуть("ТТ");
	
	//+++АК BELN 2018.07.17 ИП-00019201      
	Если Пакетная Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйОрдерСклад.Получатель,
			|	РасходныйОрдерСклад.Ссылка,
			|	Выразить(РасходныйОрдерСклад.Получатель как Справочник.СтруктурныеЕдиницы).НомерТочки  НомерТочки
			|ИЗ
			|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
			|ГДЕ
			|	РасходныйОрдерСклад.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗРО = РезультатЗапроса.Выгрузить();
		

		
		Соот=Новый Соответствие;
		Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Сертификаты");
		Для каждого СтрокаТТ Из ТЗРО Цикл
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");	
			ОбластьРисунок   = Макет.ПолучитьОбласть("Рисунок");
			Отбор = Новый Структура;
			Отбор.Вставить("ТТ", СтрокаТТ.Получатель);
			НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_Сертификаты";
			ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ТабДок.РазмерКолонтитулаСнизу	= 0;
			ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху	= 5;
			ТабДок.ПолеСнизу 	= 5;
			ТабДок.ПолеСлева 	= 5;
			ТабДок.ПолеСправа 	= 5;
			ТабДок.АвтоМасштаб = Истина;
			
			Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
				ТаблицаИменФайлов = СтрокаНайденная.ХранилищеСертификатов.Получить();
				Если ТаблицаИменФайлов = Неопределено Тогда
					Продолжить;			
				КонецЕсли; 
				Если ТаблицаИменФайлов.Количество() = 0 Тогда
					Продолжить;			
				КонецЕсли; 
				СчетчикСтраниц = 1;
				ВсегоСтраниц = ТаблицаИменФайлов.Количество();			
				Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
					ОбластьЗаголовок.Параметры.ТорговаяТочка = "Маршрут: " + Строка(СтрокаНайденная.Маршрут) + "   < "+ Строка(СтрокаТТ.НомерТочки) + " >   "+ Строка(СтрокаТТ.Получатель);
					ОбластьЗаголовок.Параметры.Номенклатура = Строка(СтрокаНайденная.Номенклатура) + Символы.ПС + Строка(СтрокаНайденная.Характеристика);   
					ОбластьЗаголовок.Параметры.НомерСтр = СчетчикСтраниц;	
					ОбластьЗаголовок.Параметры.ВсегоСтр = ВсегоСтраниц;
					ТабДок.Вывести(ОбластьЗаголовок);
					
					ОбластьРисунок.Рисунки.D1.Картинка = Новый Картинка(СтрокаИмяФайла.ИмяФайла);
					//Сообщить(СтрокаИмяФайла.ИмяФайла);
					ТабДок.Вывести(ОбластьРисунок);
					
					СчетчикСтраниц = СчетчикСтраниц + 1;
				КонецЦикла; 
			КонецЦикла; 
			Соот.Вставить(СтрокаТТ.Ссылка,ТабДок);
		КонецЦикла; 
		
		Возврат Соот;
	Иначе	
	//---АК BELN 2018.07.17 	
		
		Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Сертификаты");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");	
		ОбластьРисунок   = Макет.ПолучитьОбласть("Рисунок");
		Для каждого СтрокаТТ Из ТТ_Выгрузка Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ТТ", СтрокаТТ.ТТ);
			НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
			Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
				ТаблицаИменФайлов = СтрокаНайденная.ХранилищеСертификатов.Получить();
				Если ТаблицаИменФайлов = Неопределено Тогда
					Продолжить;			
				КонецЕсли; 
				Если ТаблицаИменФайлов.Количество() = 0 Тогда
					Продолжить;			
				КонецЕсли; 
				СчетчикСтраниц = 1;
				ВсегоСтраниц = ТаблицаИменФайлов.Количество();			
				Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
					ОбластьЗаголовок.Параметры.ТорговаяТочка = "Маршрут: " + Строка(СтрокаНайденная.Маршрут) + "   < "+ Строка(СтрокаТТ.ТТ.НомерТочки) + " >   "+ Строка(СтрокаТТ.ТТ);
					ОбластьЗаголовок.Параметры.Номенклатура = Строка(СтрокаНайденная.Номенклатура) + Символы.ПС + Строка(СтрокаНайденная.Характеристика);   
					ОбластьЗаголовок.Параметры.НомерСтр = СчетчикСтраниц;	
					ОбластьЗаголовок.Параметры.ВсегоСтр = ВсегоСтраниц;
					ТабДок.Вывести(ОбластьЗаголовок);
					
					ОбластьРисунок.Рисунки.D1.Картинка = Новый Картинка(СтрокаИмяФайла.ИмяФайла);
					//Сообщить(СтрокаИмяФайла.ИмяФайла);
					ТабДок.Вывести(ОбластьРисунок);
					
					СчетчикСтраниц = СчетчикСтраниц + 1;
				КонецЦикла; 
			КонецЦикла; 
			
		КонецЦикла; 
		
		Возврат ТабДок;
	КонецЕсли; 
	
	
КонецФункции

Функция ПечатьНовыхСертификатовСтрока(ИмяФайла = "") Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("СертификатыСтрокой");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок.Параметры.ИмяФайла = ИмяФайла;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	Возврат ТабДок;
КонецФункции // ()

Функция ПечатьНовыхСертификатовHTML(МассивСсылок, КаталогВременныхФайловКлиент, ТаблицаФайловДляКопирования, ТаблицаОтправленныхСертификатов) Экспорт 
	
	ТаблицаФайловДляКопирования.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	Товары.Ссылка.Получатель КАК ТТ,
	//	|	Товары.Номенклатура,
	//	|	Товары.Характеристика,
	//	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """""""") КАК Маршрут,
	//	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК ПорядокСортировки
	//	|ПОМЕСТИТЬ ТЗ_ТорговаяТочка_Номенклатура
	//	|ИЗ
	//	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	//	|		ПО Товары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	//	|ГДЕ
	//	|	Товары.Ссылка В(&ТекущийДокумент)
	//	|	И Товары.Ссылка.ВидОперации = &ВидОперации
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Товары.Номенклатура,
	//	|	Товары.Ссылка.Получатель,
	//	|	Товары.Характеристика,
	//	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"""""),
	//	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	//	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	//	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	//	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	//	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер
	//	|ПОМЕСТИТЬ ТЗ_Сертификаты
	//	|ИЗ
	//	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	//	|			&ТекущаяДата,
	//	|			Номенклатура В
	//	|					(ВЫБРАТЬ
	//	|						ТЗ_ТорговаяТочка_Номенклатура.Номенклатура
	//	|					ИЗ
	//	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	//	|				И Характеристика В
	//	|					(ВЫБРАТЬ
	//	|						ТЗ_ТорговаяТочка_Номенклатура.Характеристика
	//	|					ИЗ
	//	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	//	|				И (ДействуетДо >= &ТекущаяДата
	//	|					ИЛИ ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	//	|				И НЕ ДатаДобавленияФайла = ДАТАВРЕМЯ(1, 1, 1)
	//	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) <= 17
	//	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) >= 0) КАК СертификатыНаПродукциюСрезПоследних
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТЗ_ТорговаяТочка_Номенклатура.ТТ,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.Номенклатура,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.Характеристика,
	//	|	ТЗ_Сертификаты.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов,
	//	|	ТЗ_Сертификаты.ДатаДобавленияФайла,
	//	|	ТЗ_Сертификаты.РегистрационныйНомер,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.Маршрут,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.ПорядокСортировки
	//	|ПОМЕСТИТЬ ТЗ_ДатаДобавленияСертификата
	//	|ИЗ
	//	|	ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Сертификаты КАК ТЗ_Сертификаты
	//	|		ПО ТЗ_ТорговаяТочка_Номенклатура.Номенклатура = ТЗ_Сертификаты.Номенклатура
	//	|			И ТЗ_ТорговаяТочка_Номенклатура.Характеристика = ТЗ_Сертификаты.Характеристика
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТЗ_ДатаДобавленияСертификата.ТТ,
	//	|	ТЗ_ДатаДобавленияСертификата.Номенклатура,
	//	|	ТЗ_ДатаДобавленияСертификата.Характеристика,
	//	|	ТЗ_ДатаДобавленияСертификата.ХранилищеСертификатов,
	//	|	ТЗ_ДатаДобавленияСертификата.ДатаДобавленияФайла,
	//	|	ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер,
	//	|	ВЫБОР
	//	|		КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК НужноВыводить,
	//	|	ТЗ_ДатаДобавленияСертификата.Маршрут,
	//	|	ТЗ_ДатаДобавленияСертификата.ПорядокСортировки КАК ПорядокСортировки
	//	|ИЗ
	//	|	ТЗ_ДатаДобавленияСертификата КАК ТЗ_ДатаДобавленияСертификата
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеСертификаты КАК ОтправленныеСертификаты
	//	|		ПО ТЗ_ДатаДобавленияСертификата.ТТ = ОтправленныеСертификаты.ТорговаяТочка
	//	|			И ТЗ_ДатаДобавленияСертификата.Номенклатура = ОтправленныеСертификаты.Номенклатура
	//	|			И ТЗ_ДатаДобавленияСертификата.Характеристика = ОтправленныеСертификаты.Характеристика
	//	|			И ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер = ОтправленныеСертификаты.РегистрационныйНомер
	//	|ГДЕ
	//	|	ВЫБОР
	//	|			КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЛОЖЬ
	//	|		КОНЕЦ = ИСТИНА
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ПорядокСортировки";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Получатель КАК ТТ,
	|	ТовАссортимент.Номенклатура,
	|	ТовАссортимент.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ТорговаяТочка_Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК ДокТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО ДокТовары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|			ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекущаяДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ГДЕ
	|			ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|			И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Товары.Ссылка.Получатель,
	|			Товары.Номенклатура,
	|			Товары.Характеристика
	|		ИЗ
	|			Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ГДЕ
	|			Товары.Ссылка В(&ТекущийДокумент)
	|			И Товары.Ссылка.ВидОперации = &ВидОперации
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Товары.Ссылка.Получатель,
	|			СоставКомплектаСрезПоследних.Составляющая.Владелец,
	|			СоставКомплектаСрезПоследних.Составляющая
	|		ИЗ
	|			Документ.РасходныйОрдерСклад.Товары КАК Товары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ТекущаяДата, ) КАК СоставКомплектаСрезПоследних
	|				ПО Товары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|		ГДЕ
	|			Товары.Ссылка В(&ТекущийДокумент)
	|			И Товары.Ссылка.ВидОперации = &ВидОперации) КАК ТовАссортимент
	|		ПО ДокТовары.Получатель = ТовАссортимент.ТорговаяТочка
	|ГДЕ
	|	ДокТовары.Ссылка В(&ТекущийДокумент)
	|	И ДокТовары.ВидОперации = &ВидОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Получатель,
	|	ТовАссортимент.Номенклатура,
	|	ТовАссортимент.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"),
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер
	|ПОМЕСТИТЬ ТЗ_Сертификаты
	|ИЗ
	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	|			&ТекущаяДата,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Номенклатура
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Характеристика
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И (ДействуетДо >= &ТекущаяДата
	|					ИЛИ ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|				И НЕ ДатаДобавленияФайла = ДАТАВРЕМЯ(1, 1, 1)
	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) <= 3
	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) >= 0) КАК СертификатыНаПродукциюСрезПоследних
	|ГДЕ СертификатыНаПродукциюСрезПоследних.Удален = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ТорговаяТочка_Номенклатура.ТТ,
	|	ТЗ_ТорговаяТочка_Номенклатура.Номенклатура,
	|	ТЗ_ТорговаяТочка_Номенклатура.Характеристика,
	|	ТЗ_Сертификаты.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов,
	|	ТЗ_Сертификаты.ДатаДобавленияФайла,
	|	ТЗ_Сертификаты.РегистрационныйНомер,
	|	ТЗ_ТорговаяТочка_Номенклатура.Маршрут,
	|	ТЗ_ТорговаяТочка_Номенклатура.ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ДатаДобавленияСертификата
	|ИЗ
	|	ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Сертификаты КАК ТЗ_Сертификаты
	|		ПО ТЗ_ТорговаяТочка_Номенклатура.Номенклатура = ТЗ_Сертификаты.Номенклатура
	|			И ТЗ_ТорговаяТочка_Номенклатура.Характеристика = ТЗ_Сертификаты.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ДатаДобавленияСертификата.ТТ,
	|	ТЗ_ДатаДобавленияСертификата.Номенклатура,
	|	ТЗ_ДатаДобавленияСертификата.Характеристика,
	|	ТЗ_ДатаДобавленияСертификата.ХранилищеСертификатов,
	|	ТЗ_ДатаДобавленияСертификата.ДатаДобавленияФайла,
	|	ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноВыводить,
	|	ТЗ_ДатаДобавленияСертификата.Маршрут,
	|	ТЗ_ДатаДобавленияСертификата.ПорядокСортировки КАК ПорядокСортировки
	|ИЗ
	|	ТЗ_ДатаДобавленияСертификата КАК ТЗ_ДатаДобавленияСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеСертификаты КАК ОтправленныеСертификаты
	|		ПО ТЗ_ДатаДобавленияСертификата.ТТ = ОтправленныеСертификаты.ТорговаяТочка
	|			И ТЗ_ДатаДобавленияСертификата.Номенклатура = ОтправленныеСертификаты.Номенклатура
	|			И ТЗ_ДатаДобавленияСертификата.Характеристика = ОтправленныеСертификаты.Характеристика
	|			И ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер = ОтправленныеСертификаты.РегистрационныйНомер
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки";
	
	
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат "";	
	КонецЕсли;
	
	ТТ_Выгрузка = Выгрузка.Скопировать();
	ТТ_Выгрузка.Свернуть("ТТ");
	
	СтрокаHTML = "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 11.00.9600.17728""></HEAD>
	|<BODY>
	|";
	
	СтрокаДобHTML = "";
	МассивОбработанныхФайлов = Новый Массив;
	Для каждого СтрокаТТ Из ТТ_Выгрузка Цикл   		
		
		Отбор = Новый Структура;
		Отбор.Вставить("ТТ", СтрокаТТ.ТТ);
		НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
		Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
			
			ТаблицаИменФайлов = СтрокаНайденная.ХранилищеСертификатов.Получить();
			Если ТаблицаИменФайлов = Неопределено Тогда
				Продолжить;			
			КонецЕсли; 
			Если ТаблицаИменФайлов.Количество() = 0 Тогда
				Продолжить;			
			КонецЕсли; 
			
			НовСтрокаСертификата = ТаблицаОтправленныхСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаСертификата, СтрокаНайденная);
			НовСтрокаСертификата.ТорговаяТочка = СтрокаНайденная.ТТ;
			
			СчетчикСтраниц = 1;
			ВсегоСтраниц = ТаблицаИменФайлов.Количество();	
			
			Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
				
				СтрокаДобHTML = СтрокаДобHTML + "<P><small>" + Строка(СтрокаНайденная.Маршрут) +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"<big>" + "< "+ Строка(СтрокаТТ.ТТ.НомерТочки) + " >" + "</big>" +  
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				Строка(СтрокаТТ.ТТ) + 				
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp" + 
				
				"Стр. №" + Строка(СчетчикСтраниц) + " из " + Строка(ВсегоСтраниц) + "</small>";
				СтрокаДобHTML = СтрокаДобHTML + "<P><small>" + Строка(СтрокаНайденная.Номенклатура) + "  --  " + Строка(СтрокаНайденная.Характеристика) + "</small></P>";
				СтрокаДобHTML = СтрокаДобHTML + "<P>" + "<IMG src=""Путь"" width=""640"" height=""880""></P>";
				
				Файл = Новый Файл(Строка(СтрокаИмяФайла.ИмяФайла));
				Если Файл.Существует() = Истина Тогда
					ПолноеИмяФайла = СтрЗаменить(Строка(КаталогВременныхФайловКлиент + Файл.Имя), "\\", "\");
					СтрокаДобHTML = СтрЗаменить(СтрокаДобHTML, "Путь", ПолноеИмяФайла);
					
					Если МассивОбработанныхФайлов.Найти(Строка(СтрокаИмяФайла.ИмяФайла)) = Неопределено Тогда
						
						АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Строка(СтрокаИмяФайла.ИмяФайла)), Новый УникальныйИдентификатор);
						НовСтрока = ТаблицаФайловДляКопирования.Добавить();
						НовСтрока.АдресХранилища = АдресХранилища;
						НовСтрока.ПолноеИмяФайла = ПолноеИмяФайла;
						
						МассивОбработанныхФайлов.Добавить(Строка(СтрокаИмяФайла.ИмяФайла));
					КонецЕсли;
				КонецЕсли;
				
				СчетчикСтраниц = СчетчикСтраниц + 1;
			КонецЦикла; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат СтрокаHTML + СтрокаДобHTML + "</BODY></HTML>";
	
КонецФункции

//+++АК KIRN 2018.04.13 

Функция ПечатьВсехСертификатов(МассивСсылок,Пакетная=Ложь) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_Сертификаты";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Ссылка.Получатель КАК ТТ,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """""""") КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ТорговаяТочка_Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО Товары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|ГДЕ
	|	Товары.Ссылка В(&ТекущийДокумент)
	|	И Товары.Ссылка.ВидОперации = &ВидОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Ссылка.Получатель,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"""""),
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер
	|ПОМЕСТИТЬ ТЗ_Сертификаты
	|ИЗ
	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	|			&ТекущаяДата,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Номенклатура
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Характеристика
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И (ДействуетДо >= &ТекущаяДата
	|					ИЛИ ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|				И НЕ ДатаДобавленияФайла = ДАТАВРЕМЯ(1, 1, 1)
	//|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) <= 17
	//|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) >= 0
	|) КАК СертификатыНаПродукциюСрезПоследних
	|ГДЕ СертификатыНаПродукциюСрезПоследних.Удален = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ТорговаяТочка_Номенклатура.ТТ,
	|	ТЗ_ТорговаяТочка_Номенклатура.Номенклатура,
	|	ТЗ_ТорговаяТочка_Номенклатура.Характеристика,
	|	ТЗ_Сертификаты.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов,
	|	ТЗ_Сертификаты.ДатаДобавленияФайла,
	|	ТЗ_Сертификаты.РегистрационныйНомер,
	|	ТЗ_ТорговаяТочка_Номенклатура.Маршрут,
	|	ТЗ_ТорговаяТочка_Номенклатура.ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ДатаДобавленияСертификата
	|ИЗ
	|	ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Сертификаты КАК ТЗ_Сертификаты
	|		ПО ТЗ_ТорговаяТочка_Номенклатура.Номенклатура = ТЗ_Сертификаты.Номенклатура
	|			И ТЗ_ТорговаяТочка_Номенклатура.Характеристика = ТЗ_Сертификаты.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ДатаДобавленияСертификата.ТТ,
	|	ТЗ_ДатаДобавленияСертификата.Номенклатура,
	|	ТЗ_ДатаДобавленияСертификата.Характеристика,
	|	ТЗ_ДатаДобавленияСертификата.ХранилищеСертификатов,
	|	ТЗ_ДатаДобавленияСертификата.ДатаДобавленияФайла,
	|	ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноВыводить,
	|	ТЗ_ДатаДобавленияСертификата.Маршрут,
	|	ТЗ_ДатаДобавленияСертификата.ПорядокСортировки КАК ПорядокСортировки
	|ИЗ
	|	ТЗ_ДатаДобавленияСертификата КАК ТЗ_ДатаДобавленияСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеСертификаты КАК ОтправленныеСертификаты
	|		ПО ТЗ_ДатаДобавленияСертификата.ТТ = ОтправленныеСертификаты.ТорговаяТочка
	|			И ТЗ_ДатаДобавленияСертификата.Номенклатура = ОтправленныеСертификаты.Номенклатура
	|			И ТЗ_ДатаДобавленияСертификата.Характеристика = ОтправленныеСертификаты.Характеристика
	|			И ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер = ОтправленныеСертификаты.РегистрационныйНомер
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки";
	
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТТ_Выгрузка = Выгрузка.Скопировать();
	ТТ_Выгрузка.Свернуть("ТТ");
	
	Если Пакетная Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйОрдерСклад.Получатель,
			|	РасходныйОрдерСклад.Ссылка,
			|	Выразить(РасходныйОрдерСклад.Получатель как Справочник.СтруктурныеЕдиницы).НомерТочки  НомерТочки
			|ИЗ
			|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
			|ГДЕ
			|	РасходныйОрдерСклад.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗРО = РезультатЗапроса.Выгрузить();
		

		
		Соот=Новый Соответствие;
		Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Сертификаты");
		Для каждого СтрокаТТ Из ТЗРО Цикл
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");	
			ОбластьРисунок   = Макет.ПолучитьОбласть("Рисунок");
			Отбор = Новый Структура;
			Отбор.Вставить("ТТ", СтрокаТТ.Получатель);
			НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерСклад_Сертификаты";
			ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ТабДок.РазмерКолонтитулаСнизу	= 0;
			ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху	= 5;
			ТабДок.ПолеСнизу 	= 5;
			ТабДок.ПолеСлева 	= 5;
			ТабДок.ПолеСправа 	= 5;
			ТабДок.АвтоМасштаб = Истина;
			
			Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
				ТаблицаИменФайлов = СтрокаНайденная.ХранилищеСертификатов.Получить();
				Если ТаблицаИменФайлов = Неопределено Тогда
					Продолжить;			
				КонецЕсли; 
				Если ТаблицаИменФайлов.Количество() = 0 Тогда
					Продолжить;			
				КонецЕсли; 
				СчетчикСтраниц = 1;
				ВсегоСтраниц = ТаблицаИменФайлов.Количество();			
				Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
					ОбластьЗаголовок.Параметры.ТорговаяТочка = "Маршрут: " + Строка(СтрокаНайденная.Маршрут) + "   < "+ Строка(СтрокаТТ.НомерТочки) + " >   "+ Строка(СтрокаТТ.Получатель);
					ОбластьЗаголовок.Параметры.Номенклатура = Строка(СтрокаНайденная.Номенклатура) + Символы.ПС + Строка(СтрокаНайденная.Характеристика);   
					ОбластьЗаголовок.Параметры.НомерСтр = СчетчикСтраниц;	
					ОбластьЗаголовок.Параметры.ВсегоСтр = ВсегоСтраниц;
					ТабДок.Вывести(ОбластьЗаголовок);
					
					ОбластьРисунок.Рисунки.D1.Картинка = Новый Картинка(СтрокаИмяФайла.ИмяФайла);
					//Сообщить(СтрокаИмяФайла.ИмяФайла);
					ТабДок.Вывести(ОбластьРисунок);
					
					СчетчикСтраниц = СчетчикСтраниц + 1;
				КонецЦикла; 
			КонецЦикла; 
			Соот.Вставить(СтрокаТТ.Ссылка,ТабДок);
		КонецЦикла; 
		
		Возврат Соот;
	Иначе	
	//---АК BELN 2018.07.17 	

		

	
	
	
	
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Сертификаты");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");	
	ОбластьРисунок   = Макет.ПолучитьОбласть("Рисунок");
	Для каждого СтрокаТТ Из ТТ_Выгрузка Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ТТ", СтрокаТТ.ТТ);
		НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
		Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
			ТаблицаИменФайлов = СтрокаНайденная.ХранилищеСертификатов.Получить();
			Если ТаблицаИменФайлов = Неопределено Тогда
				Продолжить;			
			КонецЕсли; 
			Если ТаблицаИменФайлов.Количество() = 0 Тогда
				Продолжить;			
			КонецЕсли; 
			СчетчикСтраниц = 1;
			ВсегоСтраниц = ТаблицаИменФайлов.Количество();			
			Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
				ОбластьЗаголовок.Параметры.ТорговаяТочка = "Маршрут: " + Строка(СтрокаНайденная.Маршрут) + "   < "+ Строка(СтрокаТТ.ТТ.НомерТочки) + " >   "+ Строка(СтрокаТТ.ТТ);
				ОбластьЗаголовок.Параметры.Номенклатура = Строка(СтрокаНайденная.Номенклатура) + Символы.ПС + Строка(СтрокаНайденная.Характеристика);   
				ОбластьЗаголовок.Параметры.НомерСтр = СчетчикСтраниц;	
				ОбластьЗаголовок.Параметры.ВсегоСтр = ВсегоСтраниц;
				ТабДок.Вывести(ОбластьЗаголовок);
				
				ОбластьРисунок.Рисунки.D1.Картинка = Новый Картинка(СтрокаИмяФайла.ИмяФайла);
				//Сообщить(СтрокаИмяФайла.ИмяФайла);
				ТабДок.Вывести(ОбластьРисунок);
				
				СчетчикСтраниц = СчетчикСтраниц + 1;
			КонецЦикла; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ТабДок;
	КонецЕсли;	
КонецФункции

//---АК KIRN 

//+++АК KIRN 2018.04.13 ИП-00018209^01 
Функция ПечатьВсехСертификатовHTML(МассивСсылок, КаталогВременныхФайловКлиент, ТаблицаФайловДляКопирования, ТаблицаОтправленныхСертификатов) Экспорт 
	
	ТаблицаФайловДляКопирования.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	Товары.Ссылка.Получатель КАК ТТ,
	//	|	Товары.Номенклатура,
	//	|	Товары.Характеристика,
	//	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """""""") КАК Маршрут,
	//	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК ПорядокСортировки
	//	|ПОМЕСТИТЬ ТЗ_ТорговаяТочка_Номенклатура
	//	|ИЗ
	//	|	Документ.РасходныйОрдерСклад.Товары КАК Товары
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	//	|		ПО Товары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	//	|ГДЕ
	//	|	Товары.Ссылка В(&ТекущийДокумент)
	//	|	И Товары.Ссылка.ВидОперации = &ВидОперации
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Товары.Номенклатура,
	//	|	Товары.Ссылка.Получатель,
	//	|	Товары.Характеристика,
	//	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"""""),
	//	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	//	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	//	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	//	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	//	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер
	//	|ПОМЕСТИТЬ ТЗ_Сертификаты
	//	|ИЗ
	//	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	//	|			&ТекущаяДата,
	//	|			Номенклатура В
	//	|					(ВЫБРАТЬ
	//	|						ТЗ_ТорговаяТочка_Номенклатура.Номенклатура
	//	|					ИЗ
	//	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	//	|				И Характеристика В
	//	|					(ВЫБРАТЬ
	//	|						ТЗ_ТорговаяТочка_Номенклатура.Характеристика
	//	|					ИЗ
	//	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	//	|				И (ДействуетДо >= &ТекущаяДата
	//	|					ИЛИ ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	//	|				И НЕ ДатаДобавленияФайла = ДАТАВРЕМЯ(1, 1, 1)
	//	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) <= 17
	//	|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) >= 0) КАК СертификатыНаПродукциюСрезПоследних
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТЗ_ТорговаяТочка_Номенклатура.ТТ,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.Номенклатура,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.Характеристика,
	//	|	ТЗ_Сертификаты.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов,
	//	|	ТЗ_Сертификаты.ДатаДобавленияФайла,
	//	|	ТЗ_Сертификаты.РегистрационныйНомер,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.Маршрут,
	//	|	ТЗ_ТорговаяТочка_Номенклатура.ПорядокСортировки
	//	|ПОМЕСТИТЬ ТЗ_ДатаДобавленияСертификата
	//	|ИЗ
	//	|	ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Сертификаты КАК ТЗ_Сертификаты
	//	|		ПО ТЗ_ТорговаяТочка_Номенклатура.Номенклатура = ТЗ_Сертификаты.Номенклатура
	//	|			И ТЗ_ТорговаяТочка_Номенклатура.Характеристика = ТЗ_Сертификаты.Характеристика
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТЗ_ДатаДобавленияСертификата.ТТ,
	//	|	ТЗ_ДатаДобавленияСертификата.Номенклатура,
	//	|	ТЗ_ДатаДобавленияСертификата.Характеристика,
	//	|	ТЗ_ДатаДобавленияСертификата.ХранилищеСертификатов,
	//	|	ТЗ_ДатаДобавленияСертификата.ДатаДобавленияФайла,
	//	|	ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер,
	//	|	ВЫБОР
	//	|		КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК НужноВыводить,
	//	|	ТЗ_ДатаДобавленияСертификата.Маршрут,
	//	|	ТЗ_ДатаДобавленияСертификата.ПорядокСортировки КАК ПорядокСортировки
	//	|ИЗ
	//	|	ТЗ_ДатаДобавленияСертификата КАК ТЗ_ДатаДобавленияСертификата
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеСертификаты КАК ОтправленныеСертификаты
	//	|		ПО ТЗ_ДатаДобавленияСертификата.ТТ = ОтправленныеСертификаты.ТорговаяТочка
	//	|			И ТЗ_ДатаДобавленияСертификата.Номенклатура = ОтправленныеСертификаты.Номенклатура
	//	|			И ТЗ_ДатаДобавленияСертификата.Характеристика = ОтправленныеСертификаты.Характеристика
	//	|			И ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер = ОтправленныеСертификаты.РегистрационныйНомер
	//	|ГДЕ
	//	|	ВЫБОР
	//	|			КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЛОЖЬ
	//	|		КОНЕЦ = ИСТИНА
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ПорядокСортировки";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Получатель КАК ТТ,
	|	ТовАссортимент.Номенклатура,
	|	ТовАссортимент.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки КАК ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ТорговаяТочка_Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК ДокТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО ДокТовары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|			ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(&ТекущаяДата, ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ГДЕ
	|			ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ
	|			И ТоварныйАссортиментТочекСрезПоследних.Запрещена = ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Товары.Ссылка.Получатель,
	|			Товары.Номенклатура,
	|			Товары.Характеристика
	|		ИЗ
	|			Документ.РасходныйОрдерСклад.Товары КАК Товары
	|		ГДЕ
	|			Товары.Ссылка В(&ТекущийДокумент)
	|			И Товары.Ссылка.ВидОперации = &ВидОперации
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Товары.Ссылка.Получатель,
	|			СоставКомплектаСрезПоследних.Составляющая.Владелец,
	|			СоставКомплектаСрезПоследних.Составляющая
	|		ИЗ
	|			Документ.РасходныйОрдерСклад.Товары КАК Товары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ТекущаяДата, ) КАК СоставКомплектаСрезПоследних
	|				ПО Товары.Характеристика = СоставКомплектаСрезПоследних.Характеристика
	|		ГДЕ
	|			Товары.Ссылка В(&ТекущийДокумент)
	|			И Товары.Ссылка.ВидОперации = &ВидОперации) КАК ТовАссортимент
	|		ПО ДокТовары.Получатель = ТовАссортимент.ТорговаяТочка
	|ГДЕ
	|	ДокТовары.Ссылка В(&ТекущийДокумент)
	|	И ДокТовары.ВидОперации = &ВидОперации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Получатель,
	|	ТовАссортимент.Номенклатура,
	|	ТовАссортимент.Характеристика,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """"),
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПорядокСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	СертификатыНаПродукциюСрезПоследних.ХранилищеИменФайловСертификата,
	|	СертификатыНаПродукциюСрезПоследних.ДатаДобавленияФайла,
	|	СертификатыНаПродукциюСрезПоследних.РегистрационныйНомер
	|ПОМЕСТИТЬ ТЗ_Сертификаты
	|ИЗ
	|	РегистрСведений.СертификатыНаПродукцию.СрезПоследних(
	|			&ТекущаяДата,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Номенклатура
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						ТЗ_ТорговаяТочка_Номенклатура.Характеристика
	|					ИЗ
	|						ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура)
	|				И (ДействуетДо >= &ТекущаяДата
	|					ИЛИ ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|				И НЕ ДатаДобавленияФайла = ДАТАВРЕМЯ(1, 1, 1)
	//|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) <= 3
	//|				И РАЗНОСТЬДАТ(ДатаДобавленияФайла, &ТекущаяДата, ДЕНЬ) >= 0
	|) КАК СертификатыНаПродукциюСрезПоследних
	|ГДЕ СертификатыНаПродукциюСрезПоследних.Удален = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ТорговаяТочка_Номенклатура.ТТ,
	|	ТЗ_ТорговаяТочка_Номенклатура.Номенклатура,
	|	ТЗ_ТорговаяТочка_Номенклатура.Характеристика,
	|	ТЗ_Сертификаты.ХранилищеИменФайловСертификата КАК ХранилищеСертификатов,
	|	ТЗ_Сертификаты.ДатаДобавленияФайла,
	|	ТЗ_Сертификаты.РегистрационныйНомер,
	|	ТЗ_ТорговаяТочка_Номенклатура.Маршрут,
	|	ТЗ_ТорговаяТочка_Номенклатура.ПорядокСортировки
	|ПОМЕСТИТЬ ТЗ_ДатаДобавленияСертификата
	|ИЗ
	|	ТЗ_ТорговаяТочка_Номенклатура КАК ТЗ_ТорговаяТочка_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_Сертификаты КАК ТЗ_Сертификаты
	|		ПО ТЗ_ТорговаяТочка_Номенклатура.Номенклатура = ТЗ_Сертификаты.Номенклатура
	|			И ТЗ_ТорговаяТочка_Номенклатура.Характеристика = ТЗ_Сертификаты.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ДатаДобавленияСертификата.ТТ,
	|	ТЗ_ДатаДобавленияСертификата.Номенклатура,
	|	ТЗ_ДатаДобавленияСертификата.Характеристика,
	|	ТЗ_ДатаДобавленияСертификата.ХранилищеСертификатов,
	|	ТЗ_ДатаДобавленияСертификата.ДатаДобавленияФайла,
	|	ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноВыводить,
	|	ТЗ_ДатаДобавленияСертификата.Маршрут,
	|	ТЗ_ДатаДобавленияСертификата.ПорядокСортировки КАК ПорядокСортировки
	|ИЗ
	|	ТЗ_ДатаДобавленияСертификата КАК ТЗ_ДатаДобавленияСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеСертификаты КАК ОтправленныеСертификаты
	|		ПО ТЗ_ДатаДобавленияСертификата.ТТ = ОтправленныеСертификаты.ТорговаяТочка
	|			И ТЗ_ДатаДобавленияСертификата.Номенклатура = ОтправленныеСертификаты.Номенклатура
	|			И ТЗ_ДатаДобавленияСертификата.Характеристика = ОтправленныеСертификаты.Характеристика
	|			И ТЗ_ДатаДобавленияСертификата.РегистрационныйНомер = ОтправленныеСертификаты.РегистрационныйНомер
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОтправленныеСертификаты.ДатаОтправки ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки";
	
	
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат "";	
	КонецЕсли;
	
	ТТ_Выгрузка = Выгрузка.Скопировать();
	ТТ_Выгрузка.Свернуть("ТТ");
	
	СтрокаHTML = "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<META name=GENERATOR content=""MSHTML 11.00.9600.17728""></HEAD>
	|<BODY>
	|";
	
	СтрокаДобHTML = "";
	МассивОбработанныхФайлов = Новый Массив;
	Для каждого СтрокаТТ Из ТТ_Выгрузка Цикл   		
		
		Отбор = Новый Структура;
		Отбор.Вставить("ТТ", СтрокаТТ.ТТ);
		НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
		Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
			
			ТаблицаИменФайлов = СтрокаНайденная.ХранилищеСертификатов.Получить();
			Если ТаблицаИменФайлов = Неопределено Тогда
				Продолжить;			
			КонецЕсли; 
			Если ТаблицаИменФайлов.Количество() = 0 Тогда
				Продолжить;			
			КонецЕсли; 
			
			НовСтрокаСертификата = ТаблицаОтправленныхСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаСертификата, СтрокаНайденная);
			НовСтрокаСертификата.ТорговаяТочка = СтрокаНайденная.ТТ;
			
			СчетчикСтраниц = 1;
			ВсегоСтраниц = ТаблицаИменФайлов.Количество();	
			
			Для каждого СтрокаИмяФайла Из ТаблицаИменФайлов Цикл
				
				СтрокаДобHTML = СтрокаДобHTML + "<P><small>" + Строка(СтрокаНайденная.Маршрут) +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"<big>" + "< "+ Строка(СтрокаТТ.ТТ.НомерТочки) + " >" + "</big>" +  
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				Строка(СтрокаТТ.ТТ) + 				
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp" + 
				
				"Стр. №" + Строка(СчетчикСтраниц) + " из " + Строка(ВсегоСтраниц) + "</small>";
				СтрокаДобHTML = СтрокаДобHTML + "<P><small>" + Строка(СтрокаНайденная.Номенклатура) + "  --  " + Строка(СтрокаНайденная.Характеристика) + "</small></P>";
				СтрокаДобHTML = СтрокаДобHTML + "<P>" + "<IMG src=""Путь"" width=""640"" height=""880""></P>";
				
				Файл = Новый Файл(Строка(СтрокаИмяФайла.ИмяФайла));
				Если Файл.Существует() = Истина Тогда
					ПолноеИмяФайла = СтрЗаменить(Строка(КаталогВременныхФайловКлиент + Файл.Имя), "\\", "\");
					СтрокаДобHTML = СтрЗаменить(СтрокаДобHTML, "Путь", ПолноеИмяФайла);
					
					Если МассивОбработанныхФайлов.Найти(Строка(СтрокаИмяФайла.ИмяФайла)) = Неопределено Тогда
						
						АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Строка(СтрокаИмяФайла.ИмяФайла)), Новый УникальныйИдентификатор);
						НовСтрока = ТаблицаФайловДляКопирования.Добавить();
						НовСтрока.АдресХранилища = АдресХранилища;
						НовСтрока.ПолноеИмяФайла = ПолноеИмяФайла;
						
						МассивОбработанныхФайлов.Добавить(Строка(СтрокаИмяФайла.ИмяФайла));
					КонецЕсли;
				КонецЕсли;
				
				СчетчикСтраниц = СчетчикСтраниц + 1;
			КонецЦикла; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат СтрокаHTML + СтрокаДобHTML + "</BODY></HTML>";
	
КонецФункции
//---АК KIRN 


//+++АК GEYV 09.06.2015
Функция ПечатьСтоимостьНоменклатуры(Ссылка) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Макет = ПолучитьМакет("СтоимостьНоменклатуры");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Количество,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * РасходныйОрдерСкладТовары.Количество КАК Стоимость
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ТипЦен = &ТипЦен
	|					И ТорговаяТочка = &ТорговаяТочка) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(Стоимость)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦен.ОсновнойТипЦенПродаж);
	Запрос.УстановитьПараметр("ТорговаяТочка", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	//ТабДок.НачатьАвтогруппировкуСтрок();
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	
	ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла;
	
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДок.Вывести(ОбластьОбщийИтог);
	//ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	//ТабДок.Вывести(ОбластьПодвалТаблицы);
	//ТабДок.Вывести(ОбластьПодвал);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат ТабДок;
	
	
КонецФункции // ПечатьСтоимостьНоменклатуры()
//---АК

//+++АК GEYV 17.07.15
Функция ПечатьМХ1(Ссылка) Экспорт 
	
	ЗапросОрганизация = Новый Запрос;
	
	ЗапросОрганизация.Текст =
	
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресОрганизации
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК ПеремещениеСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|			И ПеремещениеСклад.Склад.Контрагент = КонтактнаяИнформация.Объект
	|ГДЕ
	|	ПеремещениеСклад.Ссылка = &ТекущийДокумент";
	
	ЗапросОрганизация.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	ВыборкаОрганизация = ЗапросОрганизация.Выполнить().Выбрать();
	ВыборкаОрганизация.Следующий();
	
	ЗапросКонтрагент = Новый Запрос;
	
	ЗапросКонтрагент.Текст =
	
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресКонтрагента
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК ПеремещениеСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ( КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ПеремещениеСклад.Получатель.Контрагент = КонтактнаяИнформация.Объект
	|ГДЕ
	|	ПеремещениеСклад.Ссылка = &ТекущийДокумент";
	
	ЗапросКонтрагент.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	ВыборкаКонтрагент = ЗапросКонтрагент.Выполнить().Выбрать();
	ВыборкаКонтрагент.Следующий();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеСкладТовары.Ссылка.Номер КАК НомерДокумента,
	|	ПеремещениеСкладТовары.Ссылка.Дата КАК ДатаДокумента,
	|	ПеремещениеСкладТовары.Ссылка.Склад.Контрагент КАК НаименованиеПолноеОрганизации,
	|	ПеремещениеСкладТовары.Ссылка.Получатель КАК Заказчик,
	|	ПеремещениеСкладТовары.Номенклатура КАК Артикул,
	|	ПеремещениеСкладТовары.Характеристика КАК Товар,
	|	ПеремещениеСкладТовары.Количество КАК Количество,
	|	0 КАК СуммаНДС,
	|	ПеремещениеСкладТовары.ЕдиницаИзмерения КАК ЕденицаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, &ПустойКонтрагент) ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, &ПустойКонтрагент)
	|		ИНАЧЕ &ПустойКонтрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПеремещениеСкладТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеСкладТовары.НомерСтроки
	|ПОМЕСТИТЬ ВыборкаНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК ПеремещениеСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ПеремещениеСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Значение ССЫЛКА Справочник.Контрагенты)
	|			И (ЗначенияСвойствОбъектов.Свойство = &Производитель)
	|ГДЕ
	|	ПеремещениеСкладТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеСкладТовары.Ссылка.Номер,
	|	ПеремещениеСкладТовары.Ссылка.Дата,
	|	ПеремещениеСкладТовары.Ссылка.Склад.Контрагент,
	|	ПеремещениеСкладТовары.Ссылка.Получатель,
	|	ПеремещениеСкладТовары.Количество,
	|	ПеремещениеСкладТовары.ЕдиницаИзмерения,
	|	ПеремещениеСкладТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, &ПустойКонтрагент) ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, &ПустойКонтрагент)
	|		ИНАЧЕ &ПустойКонтрагент
	|	КОНЕЦ,
	|	ПеремещениеСкладТовары.НомерСтроки,
	|	ПеремещениеСкладТовары.Характеристика,
	|	ПеремещениеСкладТовары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаДокумента,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаНоменклатура.НомерДокумента,
	|	ВыборкаНоменклатура.ДатаДокумента,
	|	ВыборкаНоменклатура.НаименованиеПолноеОрганизации,
	|	ВыборкаНоменклатура.Заказчик,
	|	ВыборкаНоменклатура.Артикул,
	|	ВыборкаНоменклатура.Товар,
	|	ВыборкаНоменклатура.Количество,
	|	ВыборкаНоменклатура.СуммаНДС,
	|	ВыборкаНоменклатура.ЕденицаИзмерения,
	|	ВыборкаНоменклатура.Контрагент,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПоступления,
	|	ВыборкаНоменклатура.Номенклатура КАК Номенклатура,
	|	ВыборкаНоменклатура.НомерСтроки
	|ПОМЕСТИТЬ ВыборкаПоступление
	|ИЗ
	|	ВыборкаНоменклатура КАК ВыборкаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ВыборкаНоменклатура.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ВыборкаНоменклатура.ДатаДокумента >= ПоступлениеТоваровУслугТовары.Ссылка.Дата
	|			И (ВЫБОР
	|				КОГДА ВыборкаНоменклатура.Контрагент = &ПустойКонтрагент
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВыборкаНоменклатура.Контрагент = ПоступлениеТоваровУслугТовары.Ссылка.Контрагент
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаНоменклатура.НомерДокумента,
	|	ВыборкаНоменклатура.НаименованиеПолноеОрганизации,
	|	ВыборкаНоменклатура.ДатаДокумента,
	|	ВыборкаНоменклатура.Заказчик,
	|	ВыборкаНоменклатура.Артикул,
	|	ВыборкаНоменклатура.Товар,
	|	ВыборкаНоменклатура.ЕденицаИзмерения,
	|	ВыборкаНоменклатура.Контрагент,
	|	ВыборкаНоменклатура.Количество,
	|	ВыборкаНоменклатура.СуммаНДС,
	|	ВыборкаНоменклатура.Номенклатура,
	|	ВыборкаНоменклатура.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаПоступление.НомерДокумента,
	|	ВыборкаПоступление.ДатаДокумента,
	|	ВыборкаПоступление.НаименованиеПолноеОрганизации,
	|	ВыборкаПоступление.Заказчик,
	|	ВыборкаПоступление.Артикул,
	|	ВыборкаПоступление.Товар,
	|	ВыборкаПоступление.Количество,
	|	ВыборкаПоступление.СуммаНДС,
	|	ВыборкаПоступление.ЕденицаИзмерения,
	|	ВыборкаПоступление.Контрагент,
	|	ВыборкаПоступление.ДатаПоступления,
	|	ВыборкаПоступление.Номенклатура,
	|	ВыборкаПоступление.НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Дата2
	|ПОМЕСТИТЬ ВыборкаПоступления2
	|ИЗ
	|	ВыборкаПоступление КАК ВыборкаПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ВыборкаПоступление.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ВыборкаПоступление.ДатаДокумента >= ПоступлениеТоваровУслугТовары.Ссылка.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаПоступление.ДатаДокумента,
	|	ВыборкаПоступление.НаименованиеПолноеОрганизации,
	|	ВыборкаПоступление.НомерДокумента,
	|	ВыборкаПоступление.Заказчик,
	|	ВыборкаПоступление.Артикул,
	|	ВыборкаПоступление.ЕденицаИзмерения,
	|	ВыборкаПоступление.Контрагент,
	|	ВыборкаПоступление.ДатаПоступления,
	|	ВыборкаПоступление.Номенклатура,
	|	ВыборкаПоступление.Товар,
	|	ВыборкаПоступление.СуммаНДС,
	|	ВыборкаПоступление.НомерСтроки,
	|	ВыборкаПоступление.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаПоступления2.НомерДокумента,
	|	ВыборкаПоступления2.ДатаДокумента,
	|	ВыборкаПоступления2.НаименованиеПолноеОрганизации,
	|	ВыборкаПоступления2.Заказчик,
	|	ВыборкаПоступления2.Артикул,
	|	ВыборкаПоступления2.Товар,
	|	ВыборкаПоступления2.Количество,
	|	ВыборкаПоступления2.СуммаНДС,
	|	ВыборкаПоступления2.ЕденицаИзмерения,
	|	ВыборкаПоступления2.Контрагент,
	|	ВыборкаПоступления2.ДатаПоступления,
	|	ВыборкаПоступления2.Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Количество, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ (ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС) / ПоступлениеТоваровУслугТовары.Количество
	|		КОНЕЦ) КАК Цена,
	|	ВыборкаПоступления2.НомерСтроки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Количество, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма / ПоступлениеТоваровУслугТовары.Количество
	|		КОНЕЦ) КАК ЦенаБезНДС,
	|	ВыборкаПоступления2.Дата2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПоступлениеТоваровУслугТовары.СуммаНДС, 0) = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьНДС
	|ПОМЕСТИТЬ ВыборкаЦена
	|ИЗ
	|	ВыборкаПоступления2 КАК ВыборкаПоступления2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ВыборкаПоступления2.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И (ВЫБОР
	|				КОГДА ВыборкаПоступления2.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВыборкаПоступления2.Дата2 = ПоступлениеТоваровУслугТовары.Ссылка.Дата
	|				ИНАЧЕ ВыборкаПоступления2.ДатаПоступления = ПоступлениеТоваровУслугТовары.Ссылка.Дата
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ВыборкаПоступления2.Контрагент = &ПустойКонтрагент
	|					ТОГДА ИСТИНА
	|				КОГДА ВыборкаПоступления2.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВыборкаПоступления2.Контрагент = ПоступлениеТоваровУслугТовары.Ссылка.Контрагент
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаПоступления2.ДатаДокумента,
	|	ВыборкаПоступления2.НаименованиеПолноеОрганизации,
	|	ВыборкаПоступления2.НомерДокумента,
	|	ВыборкаПоступления2.Заказчик,
	|	ВыборкаПоступления2.Артикул,
	|	ВыборкаПоступления2.Товар,
	|	ВыборкаПоступления2.ЕденицаИзмерения,
	|	ВыборкаПоступления2.Контрагент,
	|	ВыборкаПоступления2.ДатаПоступления,
	|	ВыборкаПоступления2.Номенклатура,
	|	ВыборкаПоступления2.Количество,
	|	ВыборкаПоступления2.СуммаНДС,
	|	ВыборкаПоступления2.НомерСтроки,
	|	ВыборкаПоступления2.Дата2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаЦена.НомерДокумента,
	|	ВыборкаЦена.ДатаДокумента,
	|	ВыборкаЦена.НаименованиеПолноеОрганизации,
	|	ВыборкаЦена.Заказчик,
	|	ВыборкаЦена.Артикул,
	|	ВыборкаЦена.Товар,
	|	ВыборкаЦена.Количество,
	|	ВыборкаЦена.СуммаНДС,
	|	ВыборкаЦена.ЕденицаИзмерения,
	|	ВыборкаЦена.Контрагент,
	|	ВыборкаЦена.ДатаПоступления,
	|	ВыборкаЦена.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВыборкаЦена.ЕстьНДС
	|			ТОГДА ВыборкаЦена.Количество * ВыборкаЦена.ЦенаБезНДС * 1.18
	|		ИНАЧЕ ВыборкаЦена.Количество * ВыборкаЦена.ЦенаБезНДС
	|	КОНЕЦ КАК Сумма,
	|	ВыборкаЦена.ЦенаБезНДС КАК Цена,
	|	ВыборкаЦена.Дата2
	|ИЗ
	|	ВыборкаЦена КАК ВыборкаЦена
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыборкаЦена.НомерСтроки";
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Производитель", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Производитель"));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_МХ1";
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("МХ1");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"); 
	
	//ПредставлениеОрганизации = ""; 	
	//Попытка
	//	ПредставлениеОрганизации = Выборка.НаименованиеПолноеОрганизации.НаименованиеПолное; 
	//	ПредставлениеОрганизации = ПредставлениеОрганизации + ", "; 
	//	ПредставлениеОрганизации = ПредставлениеОрганизации + ВыборкаОрганизация.АдресОрганизации; 
	//Исключение
	//КонецПопытки;
	//ПредставлениеКонтрагента = ""; 
	//Попытка
	//	ПредставлениеКонтрагента = Выборка.Заказчик.Наименование;                     Ис
	//	ПредставлениеКонтрагента = ПредставлениеКонтрагента + ", "; 
	//	ПредставлениеКонтрагента = ПредставлениеКонтрагента + Выборка.Заказчик.Адрес; 
	//Исключение
	//КонецПопытки;
	
	//ОбластьМакета.Параметры.ПредставлениеОрганизации = ?(Выборка.НаименованиеПолноеОрганизации = null, "", Выборка.НаименованиеПолноеОрганизации.Наименование) + ", " + ?(ВыборкаОрганизация.АдресОрганизации = null, ВыборкаОрганизация.АдресОрганизации, "");
	//ОбластьМакета.Параметры.ПредставлениеКонтрагента = ?(Выборка.Заказчик = null,"", Выборка.Заказчик.Наименование) + ", " + ?(ВыборкаКонтрагент.АдресКонтрагента = null, ВыборкаКонтрагент.АдресКонтрагента, "");
	
	ОбластьМакета.Параметры.НомерДокумента =  Выборка.НомерДокумента;
	ОбластьМакета.Параметры.ДатаДокумента =  Выборка.ДатаДокумента;
	
	
	//ОбработаемЗаголовок
	
	ПредставлениеКонтрагента = ""; 
	ПредставлениеОрганизации = ""; 
	ПредставлениеСтруктурноеЕдиница = ""; 
	
	Контрагент = Неопределено;
	
	Если Ссылка.Получатель.Пустая() Тогда
		
	ИначеЕсли ТипЗнч(Ссылка.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")  Тогда	
		
		Контрагент = ОбщегоНазначения.ПолучитьКонтрагентаПоСЕ(Ссылка.Получатель);
		ПредставлениеСтруктурноеЕдиница = Строка(Ссылка.Получатель); 
		
	ИначеЕсли ТипЗнч(Ссылка.Получатель) = Тип("СправочникСсылка.Склады")  Тогда	
		
		Контрагент = Ссылка.Получатель.Контрагент;
		ПредставлениеСтруктурноеЕдиница = Строка(Ссылка.Получатель.Владелец); 
		
	ИначеЕсли ТипЗнч(Ссылка.Получатель) = Тип("СправочникСсылка.Контрагенты")  Тогда
		
		Контрагент = Ссылка.Получатель;
		
	Иначе
		
		ПредставлениеКонтрагента = Строка(Ссылка.Получатель); 
		
	КонецЕсли;
	
	Если Контрагент <> Неопределено И Не Контрагент.Пустая() Тогда
		
		СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент,Ссылка.Дата);
		
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,Телефоны");
		
	КонецЕсли;
	
	Если Ссылка.Склад.Контрагент.Пустая() = Ложь Тогда
		
		СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Ссылка.Склад.Контрагент,Ссылка.Дата);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
		СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,Телефоны");
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ПредставлениеКонтрагента; 
	ОбластьМакета.Параметры.СтруктурноеПодразделение = ПредставлениеСтруктурноеЕдиница; 
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Ном = 0;
	НомерСтраницы = 1;
	НомерСтроки = 0;
	ИтогоСумма = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаПоСтранице = 0;
	ИтогоКоличествоПоСтранице = 0;
	КоличествоСтрок = Выборка.Количество();
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Ном         = Ном + 1;
		
		ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;              
		ОбластьМакетаСтрока.Параметры.Заполнить(Выборка);
		
		Если Ном = 1 Тогда // первая срока
			
			ОбластьМакетаШапка.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаСтрока);
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;	
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоКоличествоПоСтранице = ИтогоКоличествоПоСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаПоСтранице = ИтогоСуммаПоСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ИтогоКоличествоПоСтранице = 0;
				ИтогоСуммаПоСтранице = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьМакетаШапка.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьМакетаШапка);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		ИтогоКоличествоПоСтранице = ИтогоКоличествоПоСтранице + Выборка.Количество;
		ИтогоСуммаПоСтранице = ИтогоСуммаПоСтранице + Выборка.Сумма;
		
		ИтогоСумма = ИтогоСумма + Выборка.Сумма; 
		ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
		
	КонецЦикла;
	//
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоКоличествоПоСтранице = ИтогоКоличествоПоСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаПоСтранице = ИтогоСуммаПоСтранице;
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	ОбластьМакетаИтого.Параметры.ИтогоСумма = ИтогоСумма;	
	ОбластьМакетаИтого.Параметры.ИтогоКоличество =  ИтогоКоличество;
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции

//---АК 
//+++АК BELN 2018.07.31  ИП-00019402
Функция ПечатьТОРГ12Утилизация(СсылкаНаОбъект) Экспорт
	Перем ПодразделениеОтветственныхЛиц;

	// шапка
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Номер = """"
	|			ТОГДА ВозвратТоваровПоставщику.Номер
	|		ИНАЧЕ ВозвратТоваровПоставщику.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВозвратТоваровПоставщику.Дата
	|		ИНАЧЕ ВозвратТоваровПоставщику.Дата
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК ЮрФизЛицо,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВозвратТоваровПоставщику.Организация КАК Контрагент,
	|	ВозвратТоваровПоставщику.Организация КАК Руководители,
	|	"""" КАК АдресДоставки,
	|	"""" КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.Организация КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	"""" КАК Покупатель,
	|	"""" КАК Плательщик,
	|	 ИСТИНА
	|		 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	// товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	, СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ДатаСреза"		, СсылкаНаОбъект.Дата);
	//Запрос.УстановитьПараметр("Поставщик"		, СсылкаНаОбъект.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.НомерСтроки КАК Номер,
	|	ВозвратТоваровПоставщику.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовараУПоставщика,
	|	ВозвратТоваровПоставщику.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщику.Количество,
	|	ВозвратТоваровПоставщику.Количество КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ВозвратТоваровПоставщику.Коэффициент,
	|	ВозвратТоваровПоставщику.Коэффициент КАК КоличествоВОдномМесте,
	|	ВозвратТоваровПоставщику.Цена КАК Цена,
	|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.Сумма КАК СуммаВВалютеДокумента,
	|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС СтавкаНДС,
	|	1 КАК ID
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаСреза, ) КАК ЦеныПоставщиков
	|		ПО (ЦеныПоставщиков.Номенклатура = ВозвратТоваровПоставщику.Номенклатура)
	|			И (ЦеныПоставщиков.Поставщик = &Поставщик)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.НомерСтроки КАК Номер,
	|	ВозвратТоваровПоставщику.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовараУПоставщика,
	|	ВозвратТоваровПоставщику.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщику.Количество,
	|	ВозвратТоваровПоставщику.Количество КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения КАК ВидУпаковки,
	|	1 Коэффициент,
	|	1 КАК КоличествоВОдномМесте,
	|	ЕстьNUll(ЦеныПоставщиков.Цена,0) КАК Цена,
	|	ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество КАК Сумма,
	//|	СуммаБезНДС = 100 * ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество / (100 + ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС);
	|	 ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество - 100 * ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество / (100 + 
	|Выбор когда
	| ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС20) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС20_120) Тогда
	|	 20

	|когда ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС10) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС10_110) Тогда
	|	 10

	|когда ВозвратТоваровПоставщику.Номенклатура.ставкаНДС = Значение(Перечисление.СтавкиНДС.НДС18) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС18_118) Тогда
	|	 18
	|	
	|когда ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС13) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС13_113) Тогда
	|	 13
	|иначе 0
	|Конец
	|
	|)
	|	КАК СуммаНДС,
	|	ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество  КАК СуммаВВалютеДокумента,
	|	 ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество - 100 * ЕстьNUll(ЦеныПоставщиков.Цена,0)*ВозвратТоваровПоставщику.Количество / (100 + 
	|Выбор когда
	| ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС20) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС20_120) Тогда
	|	 20

	|когда ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС10) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС10_110) Тогда
	|	 10

	|когда ВозвратТоваровПоставщику.Номенклатура.ставкаНДС = Значение(Перечисление.СтавкиНДС.НДС18) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС18_118) Тогда
	|	 18
	|	
	|когда ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС13) ИЛИ ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС13_113) Тогда
	|	 13
	|иначе 0
	|Конец
	|
	|)
	| СуммаНДСВВалютеДокумента,
	|ВозвратТоваровПоставщику.Номенклатура.СтавкаНДС СтавкаНДС,
	|	1 КАК ID
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаСреза, ) КАК ЦеныПоставщиков
	|		ПО (ЦеныПоставщиков.Номенклатура = ВозвратТоваровПоставщику.Номенклатура)
	|			И (ЦеныПоставщиков.Характеристика = ВозвратТоваровПоставщику.Характеристика)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 10;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 10;
	ТабДокумент.ПолеСправа         = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ТОРГ12");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо			, Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель	, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель			, Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель	, Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
			"", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки
			+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();

	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ТекНаименованиеТовара = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.НаименованиеТовараУПоставщика)
				И НЕ ВРег(ТекНаименованиеТовара) = ВРег(СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика)) Тогда
			
			ТекНаименованиеТовара = ТекНаименованиеТовара + " (" + СокрЛП(ВыборкаСтрок.НаименованиеТовараУПоставщика) + ")";
			
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = ТекНаименованиеТовара;
		//ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
	
		Если НЕ Шапка.СуммаВключаетНДС
				ИЛИ СуммаНДС = 0 Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		#Если Клиент Тогда
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда	
		#Иначе	
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		#КонецЕсли

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок,, ",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест,, ",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Справочники.Валюты.НайтиПоКоду("643"));
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;
	

КонецФункции // ()
 

//---АК BELN 2018.07.31 


////////////////////////////////////////////////////////
// Печать ТОРГ-12 и создание пакета документов (

Функция ПечатьТорг12(РасходныйОрдер, МассивОшибок) Экспорт
	//+++АК BELN 2018.07.31 ИП-00019402
	Если РасходныйОрдер.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой
		ИЛИ РасходныйОрдер.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Утилизация
		ИЛИ РасходныйОрдер.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки
		Тогда
	
		Возврат ПечатьТОРГ12Утилизация(РасходныйОрдер);	
	
	КонецЕсли; 	
	//---АК BELN 2018.07.31 
	
	НачатьТранзакцию();
	
	
	ВидДокумента = ?(РасходныйОрдер.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Реализация, 
	"РеализацияТоваровУслуг", 
	"ВозвратТоваровПоставщику"); 
	
	СформированныйДокумент = ПроверитьНаличиеРасходногоОрдераВДокументах(ВидДокумента, РасходныйОрдер);
	
	Если СформированныйДокумент = Неопределено Тогда
		СоздатьОбновитьДокументНаОснованииРасходногоОрдера(ВидДокумента, РасходныйОрдер, СформированныйДокумент, МассивОшибок);
	Иначе
		Если СформированныйДокумент.Проведен Тогда
			Сообщить("На основании данного документа уже создан и проведен документ " + Строка(СформированныйДокумент));
		Иначе
			СоздатьОбновитьДокументНаОснованииРасходногоОрдера(ВидДокумента, РасходныйОрдер, СформированныйДокумент, МассивОшибок);
		КонецЕсли;
	КонецЕсли;
	
	ВозвращаемыеРеквизиты = Новый Структура;
	
	Если МассивОшибок.Количество()>0 Тогда
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Если ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.РеализацияТоваровУслуг)Тогда
		Попытка
			ДокументОбъект = СформированныйДокумент.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Проверим и сообщим об отличиях в табличных частях если они есть
	Если СформированныйДокумент.Проведен Тогда
		ПроверитьОтличиеТабличныхЧастей(СформированныйДокумент, РасходныйОрдер, МассивОшибок, ВидДокумента);
	КонецЕсли;
	
	Возврат Документы[ВидДокумента].СоздатьДокумент().ПечатьТорг12(СформированныйДокумент);
	
КонецФункции

//+++ak golv
Функция ПечатьТТН(Ссылка) Экспорт
	
	Перем ТабДокумент;
	
	ОбщийДокумент = Новый ТабличныйДокумент;
	
	// группы товаров
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", Ссылка);
	
	//+++AK VERN 2016.07.06 12796
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация КАК ОрганизацияТТ,
	//|	РасходныйОрдерСкладТовары.Ссылка.Перевозчик КАК Перевозчик,
	//|	РасходныйОрдерСкладТовары.Ссылка.Водитель КАК Водитель,
	//|	РасходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//|ГДЕ
	//|	РасходныйОрдерСкладТовары.Ссылка В(&МассивДокументов)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РасходныйОрдерСклад.Получатель.Организация КАК ОрганизацияТТ,
	//|	РасходныйОрдерСклад.Перевозчик КАК Перевозчик,
	//|	РасходныйОрдерСклад.Водитель КАК Водитель,
	//|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдер,
	//|	РасходныйОрдерСклад.Склад.Владелец.Организация КАК Организация,
	//|	РасходныйОрдерСклад.Дата КАК Дата
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	//|ГДЕ
	//|	РасходныйОрдерСклад.Ссылка В(&МассивДокументов)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	РасходныйОрдерСклад.Номер
	//|ИТОГИ
	//|	МАКСИМУМ(Организация),
	//|	МАКСИМУМ(Дата)
	//|ПО
	//|	ОрганизацияТТ,
	//|	Перевозчик,
	//|	Водитель";
	////|	И РасходныйОрдерСклад.Склад.Владелец.Организация = &Организация";
	
	//+++AK VERN 2016.07.06 12796 Добавим вывод автомобиля в ТТН
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//+++АК KIRN 2018.04.12  
	|	РасходныйОрдерСкладТовары.Ссылка.Получатель.КонтрагентСтороннейРозницы КАК ОрганизацияТТ,
	//|	РасходныйОрдерСкладТовары.Ссылка.Получатель.Организация КАК ОрганизацияТТ,
	//---АК KIRN 
	|	РасходныйОрдерСкладТовары.Ссылка.Перевозчик КАК Перевозчик,
	|	РасходныйОрдерСкладТовары.Ссылка.Водитель КАК Водитель,
	|	РасходныйОрдерСкладТовары.Номенклатура.Родитель.Наименование КАК ГруппаТоваров
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//+++АК KIRN 2018.04.12 ИП-00018209 
	|	РасходныйОрдерСклад.Получатель.КонтрагентСтороннейРозницы КАК ОрганизацияТТ,
	//|	РасходныйОрдерСклад.Получатель.Организация КАК ОрганизацияТТ,
	//---АК KIRN 
	|	РасходныйОрдерСклад.Перевозчик КАК Перевозчик,
	|	РасходныйОрдерСклад.Водитель КАК Водитель,
	|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдер,
	//+++АК KIRN 2018.04.02 ИП-00018240
	|	ВЫБОР
	|		КОГДА РасходныйОрдерСклад.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдерСклад.Организация
	|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	РасходныйОрдерСклад.Получатель.КонтрагентСтороннейРозницы КАК Контрагент,
	//|	РасходныйОрдерСклад.Склад.Владелец.Организация КАК Организация,
	//---АК KIRN 
	|	РасходныйОрдерСклад.Дата КАК Дата,
	|	РасходныйОрдерСклад.Автомобиль КАК Автомобиль
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерСклад.Номер
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Дата)
	|ПО
	|	ОрганизацияТТ,
	|	Перевозчик,
	|	Автомобиль,
	|	Водитель
	|;
	//АК БЕЛН 13.07.2016++
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
	|			И (КОНЕЦПЕРИОДА(РасходныйОрдерСкладТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
	|			И СертификатыНаПродукциюСрезПоследних.Удален = Ложь
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыНаПродукцию.Номенклатура,
	|	СертификатыНаПродукцию.Характеристика,
	|	СертификатыНаПродукцию.РегистрационныйНомер,
	|	СертификатыНаПродукцию.ДействуетДо
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
	|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
	|			И вт.Период = СертификатыНаПродукцию.Период";
	//АК БЕЛН 13.07.2016--
	//---AK VERN
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаГруппТоваров = РезультатыЗапроса[0].Выгрузить();
	
	
	
	СтруктураОтбора = Новый Структура("ОрганизацияТТ, Перевозчик, Водитель");
	//ДатаНаПечать = Формат(ЭтотОбъект.ДатаТТН, "ДФ=""дд.ММ.гг""");
	
	Макет = ПолучитьМакет("ТТН");
	ОбластьМакета1 = Макет.ПолучитьОбласть("Страница1");
	ОбластьМакета2 = Макет.ПолучитьОбласть("Страница2");
	
	ВыборкаПоОрганизацииТТ = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОрганизацияТТ");
	//АК БЕЛН 13.07.2016++
	ВыборкаСертификаты=РезультатыЗапроса[3].Выбрать();
	//АК БЕЛН 13.07.2016--
	Пока ВыборкаПоОрганизацииТТ.Следующий() Цикл
		ТекОрганизацияТТ = ВыборкаПоОрганизацииТТ.ОрганизацияТТ;
		ВыборкаПоПеревозчикам = ВыборкаПоОрганизацииТТ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Перевозчик");
		Пока ВыборкаПоПеревозчикам.Следующий() Цикл
			ТекПеревозчик = ВыборкаПоПеревозчикам.Перевозчик;
			//+++AK VERN 2016.07.06 12796 нам надо вывести автомобиль в ттн, потенциально это добавляет еще комбинации, поэтому добавим еще обход итогов
			ВыборкаПоАвтомобилям = ВыборкаПоПеревозчикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Автомобиль");
			Пока ВыборкаПоАвтомобилям.Следующий() Цикл
				ТекАвтомобиль = ВыборкаПоАвтомобилям.Автомобиль;
			//---AK VERN
				ВыборкаПоВодителям = ВыборкаПоАвтомобилям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Водитель");
				Пока ВыборкаПоВодителям.Следующий() Цикл
					ТекВодитель = ВыборкаПоВодителям.Водитель;
					
					ТабДокумент = Новый ТабличныйДокумент;
					
					// Страница 1
					ДатаНаПечать = Формат(ВыборкаПоВодителям.Дата, "ДФ=""дд.ММ.гг""");
					ОбластьМакета1.Параметры.ДатаТТН = ДатаНаПечать;
					
					СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоВодителям.Организация, ВыборкаПоВодителям.Дата);
					ОбластьМакета1.Параметры.Грузоотправитель = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
															СведенияОбОрганизации, "НаименованиеСокращенное,ФактическийАдрес,Телефоны");
					//+++АК KIRN 2018.04.12 ИП-00018209
					Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(ВыборкаПоВодителям.Организация) Тогда
						СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоВодителям.ОрганизацияТТ, ВыборкаПоВодителям.Дата);
						ОбластьМакета1.Параметры.Грузополучатель = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
							СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
					Иначе
						СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекОрганизацияТТ, ВыборкаПоВодителям.Дата);
						ОбластьМакета1.Параметры.Грузополучатель = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(
								СведенияОбОрганизации, "НаименованиеСокращенное,ФактическийАдрес,Телефоны");
					КонецЕсли;
					//---АК KIRN 
					
					СтруктураОтбора.ОрганизацияТТ 	= ТекОрганизацияТТ;
					СтруктураОтбора.Перевозчик 		= ТекПеревозчик;
					СтруктураОтбора.Водитель 		= ТекВодитель;
					СтрокиТаблицыГрупп = ТаблицаГруппТоваров.НайтиСтроки(СтруктураОтбора);
					СтрокаГрупп = "";
					Для Каждого СтрокаТаблицы Из СтрокиТаблицыГрупп Цикл
						СтрокаГрупп = СтрокаГрупп + "; " + СокрЛП(СтрокаТаблицы.ГруппаТоваров);
					КонецЦикла;
					Если НЕ СтрокаГрупп = "" Тогда
						СтрокаГрупп = Сред(СтрокаГрупп, 3);
					КонецЕсли;
					ОбластьМакета1.Параметры.НаименованиеГруза = СтрокаГрупп;
					
					ТекстОрдеров = "";
					Выборка = ВыборкаПоВодителям.Выбрать();
					Пока Выборка.Следующий() Цикл
						ТекстОрдеров = ТекстОрдеров + "; " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.РасходныйОрдер) + " от " +
																	ДатаНаПечать;
					КонецЦикла;
					Если НЕ ТекстОрдеров = "" Тогда
						ТекстОрдеров = Сред(ТекстОрдеров, 3);
					КонецЕсли;
					ОбластьМакета1.Параметры.ПереченьДокументов = "Расходные ордера: " + ТекстОрдеров + ".";
					//АК БЕЛН 13.07.2016++
					//ТекстСертификатов = "";
					//Пока ВыборкаСертификаты.Следующий() Цикл
					//	Сертификат=СтрЗаменить(ВыборкаСертификаты.РегистрационныйНомер,".jpg;","");
					//	Сертификат=СтрЗаменить(Сертификат,".jpeg;","");
					//	ТекстСертификатов = ТекстСертификатов + "; " + Сертификат + " до " +
					//												Формат(ВыборкаСертификаты.ДействуетДо,"ДФ=dd.MM.yyyy");
					//КонецЦикла;
					//Если НЕ ТекстСертификатов = "" Тогда
					//	ТекстСертификатов = Сред(ТекстСертификатов, 3);
					//КонецЕсли;
					//ОбластьМакета1.Параметры.ПереченьДокументов = ОбластьМакета1.Параметры.ПереченьДокументов+" Сертификаты: " + ТекстСертификатов + ".";
					//АК БЕЛН 13.07.2016--
					ТабДокумент.Вывести(ОбластьМакета1);
					
					// Страница 2
					ИмяВодителя = СокрЛП(ТекВодитель.Наименование);
					ОбластьМакета2.Параметры.Перевозчик 	= СокрЛП(ТекПеревозчик.Наименование);
					ОбластьМакета2.Параметры.Водитель 		= ИмяВодителя;
					ОбластьМакета2.Параметры.Руководитель 	=
										ОбщегоНазначения.ФамилияИнициалыФизЛица(СокрЛП(ВыборкаПоВодителям.Организация.ГенеральныйДиректор));
					ОбластьМакета2.Параметры.ФИОВодителя 	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ИмяВодителя);
					ОбластьМакета2.Параметры.ДатаТТН 		= ДатаНаПечать;
					
					//+++AK VERN 2016.07.06 12796 нам надо вывести автомобиль в ттн, добавили еще обход итогов
					НомерАвтомобиля = СокрЛП(ТекАвтомобиль.Наименование);
					ОбластьМакета2.Параметры.НомерАвтомобиля= НомерАвтомобиля;
					//---AK VERN
					
					ТабДокумент.Вывести(ОбластьМакета2);
					
					ТабДокумент.АвтоМасштаб = Истина;
					
					//ТабДокумент.Показать("Печать ТТН");
					ОбщийДокумент.Вывести(ТабДокумент);
					ОбщийДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЦикла;
			//+++AK VERN 2016.07.06 12796 нам надо вывести автомобиль в ттн, добавили еще обход итогов
			КонецЦикла;
			//---AK VERN
		КонецЦикла;
	КонецЦикла;	
	
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;	
	
КонецФункции
//---ak golv


Функция ПроверитьНаличиеРасходногоОрдераВДокументах(ВидДокумента, РасходныйОрдер)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РасходныеОрдера.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ВидДокумента + ".РасходныеОрдера КАК РасходныеОрдера
	|ГДЕ
	|	НЕ РасходныеОрдера.Ссылка.ПометкаУдаления
	|	И РасходныеОрдера.РасходныйОрдер = &РасходныйОрдер");
	
	Запрос.УстановитьПараметр("РасходныйОрдер", РасходныйОрдер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()Тогда
		Возврат Выборка.Документ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьОбновитьДокументНаОснованииРасходногоОрдера(ВидДокумента, РасходныйОрдер, Документ = Неопределено, МассивОшибок)
	
	Если Документ = Неопределено Тогда
		ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
		ДокументОбъект.Дата = РасходныйОрдер.Дата;
	Иначе
		ДокументОбъект = Документ.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.Заполнить(РасходныйОрдер);
	ДокументОбъект.Комментарий = "Создан на основании " + Строка(РасходныйОрдер);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.НомерИсходящегоДокумента = ДокументОбъект.Номер;
		ДокументОбъект.ДатаИсходящегоДокумента = ДокументОбъект.Дата;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Документ = ДокументОбъект.Ссылка;
	Исключение
		МассивОшибок.Добавить("Не удалось создать документ " + ?(ВидДокумента = "РеализацияТоваровУслуг", "реализации", "возврата") + " по причине " + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	// Попробуем провести
	//если происходит отказ в проведении, то рубит всю транзакцию, вынесем проведение за транзакцию
	//Если ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.РеализацияТоваровУслуг)Тогда
	//	Попытка
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОтличиеТабличныхЧастей(Документ, РасходныйОрдер, МассивОшибок, ВидДокумента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	РасходныйОрдерСкладТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &РасходныйОрдер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.ЕдиницаИзмерения,
	|	-ТаблицаДокумента.Количество
	|ИЗ
	|	Документ." + ВидДокумента + ".Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаб.Номенклатура,
	|	ВремТаб.ЕдиницаИзмерения,
	|	СУММА(ВремТаб.Количество) КАК Количество
	|ИЗ
	|	ВремТаб КАК ВремТаб
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремТаб.Номенклатура,
	|	ВремТаб.ЕдиницаИзмерения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВремТаб.Количество) <> 0");
	
	Запрос.УстановитьПараметр("РасходныйОрдер", РасходныйОрдер);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		МассивОшибок.Добавить("В документах различное количество по следующим позициям товаров:");	
	КонецЕсли;
	
	Пока Выборка.Следующий()Цикл
		
		МассивОшибок.Добавить(" - " + Выборка.Номенклатура.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

//АК_БЕЛН_10.03.2016++
Процедура ПечатьВетСвидетельство2(СсылкаНаДокумент, МассивПечФорм) Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|				где РасходныйОрдерСкладТовары.Ссылка в (&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 1
	|		КОГДА втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 2
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 3
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 4
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет,
	|	втНоменклатура.Номенклатура,
	|	ВетеринарныеГруппыПереченьНоменклатуры.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарныеГруппы.ПереченьНоменклатуры КАК ВетеринарныеГруппыПереченьНоменклатуры
	|		ПО (НЕ ВетеринарныеГруппыПереченьНоменклатуры.Ссылка.ПометкаУдаления)
	|			И (втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	МИНИМУМ(втГруппы.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втГруппыМакс
	|ИЗ
	|	втГруппы КАК втГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа.НаименованиеПолное КАК Группа
	|ПОМЕСТИТЬ втВетГруппы
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыМакс КАК втГруппыМакс
	|		ПО втГруппы.Номенклатура = втГруппыМакс.Номенклатура
	|			И втГруппы.Приоритет = втГруппыМакс.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа,
	|	втГруппы.Группа.НаименованиеПолное";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01
	ИзменитьТекстЗапроса_2_1(Запрос);
//---АК KOPA

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = Запрос.Выполнить();
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование ПОДОБНО &Наименование";
	
	Запрос1.УстановитьПараметр("Наименование", "%мороз%");
	
	РезультатЗапроса = Запрос1.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасСкл=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСкл.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МасСкл"		, МасСкл);
	
	
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Корм",Справочники.Номенклатура.НайтиПоКоду("000623185"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
	|	РасходныйОрдер.Получатель КАК ПолучательСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация.НаименованиеСокращенное
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	|	РасходныйОрдер.Склад.Владелец.Адрес КАК СкладВладелецАдрес,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Регион КАК ПолучательСсылкаРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Район КАК ПолучательСсылкаРайон,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Город КАК ПолучательСсылкаГород,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК ПолучательСсылкаНомерТочки,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Адрес КАК ПолучательСсылкаАдрес,
	|	РасходныйОрдер.Склад.ТемпературныйРежимВерхняяГраница КАК ТемпературныйРежимВерхняяГраница,
	|	РасходныйОрдер.Склад.ТемпературныйРежимНижняяГраница КАК ТемпературныйРежимНижняяГраница,
	|	РасходныйОрдер.Склад,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Склад В (&МасСкл)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлЗаморозка,
	|	РасходныйОрдер.Склад.Наименование КАК СкладНаименование,
	|	РасходныйОрдер.Склад.Владелец.id_TT КАК id_tt,
	|	РасходныйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
	|		ПО РасходныйОрдер.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
	|ГДЕ
	|	РасходныйОрдер.Ссылка В(&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	""кг"" КАК ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество * РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоТТ) КАК КоличествоТТ,
	|	СУММА(РасходныйОрдерСкладТовары.Отклонение) КАК Отклонение,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	СУММА(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)) КАК КолвоВКоробке,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель) КАК НоменклатураРодитель
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|			И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|	И РасходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И РасходныйОрдерСкладТовары.Количество > 0
	|	И НЕ РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ (&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Ссылка,
	|	НоменклатураРодитель,
	|	Производитель";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01 
	ИзменитьТекстЗапроса_2_2(Запрос);
//---АК KOPA

	Результаты = Запрос.ВыполнитьПакет();
	ТЗШапка = Результаты[0].Выгрузить();
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|ПОМЕСТИТЬ втНом
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка в (&ТекущийДокумент)	
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.Ссылка.Дата,
	|	втНом.Ссылка КАК Расходник
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	втНом КАК втНом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО втНом.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|			И втНом.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|			И втНом.ДатаПроизводства = ПриходныйОрдерСкладТовары.ДатаПроизводства
	|			И втНом.Ссылка.Склад.Владелец = ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	|			И (ВЫБОР
	|				КОГДА втНом.Ссылка.Склад В (&МасСкл)
	|					ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -3) И втНом.Ссылка.Дата
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -1) И втНом.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.отпоставщика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСОрдерами.Ссылка КАК Приходник,
	|	втНоменклатураСОрдерами.Ссылка.Дата КАК ПриходникДата,
	|	втНоменклатураСОрдерами.Номенклатура КАК Номенклатура,
	|	втНоменклатураСОрдерами.Характеристика КАК Характеристика,
	|	втНоменклатураСОрдерами.ДатаПроизводства КАК ДатаПроизводства,
	|	втВетГруппы.Группа КАК Группа,
	|	втНоменклатураСОрдерами.Дата КАК Дата,
	|	втНоменклатураСОрдерами.Расходник 
	|ИЗ
	|	втОрдера КАК втНоменклатураСОрдерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = втНоменклатураСОрдерами.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	втНоменклатураСОрдерами.Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01 
	ИзменитьТекстЗапроса_2_3(Запрос);	
//---АК KOPA	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗОрдерВсе = РезультатЗапроса.Выгрузить();
	
	
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствСерия,
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствНомер,
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствДата,
	|	ВетСвидетельстваПоступлений.АдресПроизводителя,
	|	ВетСвидетельстваПоступлений.ДокПоступления КАК Приходник,
	|	втОрдера.Расходник КАК Расходник,
	|	ВетСвидетельстваПоступлений.ИнформацияОбИсследовании
	|ИЗ
	|	втОрдера КАК втОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО втОрдера.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВетСвидетельстваПоступлений.ДокПоступления.Дата,
	|	ВетСвидетельстваПоступлений.ДокПоступления.Ссылка";	
	
	
	ТЗПереченьВетСвВа=Запрос.Выполнить().Выгрузить();	
	ТЗПереченьВетСвВа.Индексы.Добавить("Приходник,Расходник");	
	
	ВыбСсылка=Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыбСсылка.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	МасПроизвод=Новый Массив;
	Пока ВыбСсылка.Следующий() Цикл
		ВыбТовар=ВыбСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбТовар.Следующий() Цикл
			ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыбПроизвод.Следующий() Цикл
				МасПроизвод.Добавить(ВыбПроизвод.Производитель);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ВыбСсылка.Сбросить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК ЮридическийАдрес
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияПериодическая.СрезПоследних(
	|				&ДатаСреза,
	|				Объект В (&Ссылка)
	|					И Тип = &Тип
	|					И Вид = &Вид) КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МасПроизвод);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗКонтр = РезультатЗапроса.Выгрузить();
	
	
	Для каждого ЭлДок Из СсылкаНаДокумент Цикл
		Если ВыбСсылка.НайтиСледующий(Новый Структура("Ссылка",ЭлДок)) Тогда
			Шапка=ТЗШапка.НайтиСтроки(Новый Структура("Ссылка",ЭлДок))[0];
			
			ВыбТовар=ВыбСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			ТабДок	= Новый ТабличныйДокумент;
			ТабДок.ИмяПараметровПечати="ПечатьВетСвидетельство2";	
			Макет	= Документы.РасходныйОрдерСклад.ПолучитьМакет("ВетСвидетельствоФорма2");
			ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
			ОбластьТаблица.Параметры.ДатаДень		= Прав("0"+Строка(День(ТекущаяДата())),2);
			ОбластьТаблица.Параметры.ДатаМесяц		= формат(ТекущаяДата(),"ДФ=ММММ");
			ОбластьТаблица.Параметры.ДатаГод		= Прав(СтрЗаменить(Год(ТекущаяДата()),Символы.НПП,""),2);
			Ном=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭлДок);
			
			
			Если Шапка.id_tt = 8 Тогда
				ОбластьТаблица.Параметры.АдмОкруг = "Южный административный округ";
				ПрефОкр="08";
			Иначе
				ОбластьТаблица.Параметры.АдмОкруг = "Северный административный округ";
				ПрефОкр="04";
			КонецЕсли;
			Счетчик			= 0;
			СчетчикПроизвод			= 0;
			ТоварСписок		= "";
			ТоварКоличество	= "";
			ТоварВыработан	= "";
			ДатыПроизводста 	= "";
			КолвоПоз=0;
			ТЗВетСвва=Новый ТаблицаЗначений;
			ТЗВетСвва.Колонки.Добавить("НоменклатураРодитель");
			ТЗВетСвва.Колонки.Добавить("Производитель");
			ТЗВетСвва.Колонки.Добавить("СпСтрок");
			СпОрдера=Новый СписокЗначений;
			
			СоотНомРодИКол=Новый Соответствие;
			МасПроизвод=Новый Массив;
			Пока ВыбТовар.Следующий() Цикл
				КолПроизвод=0;
				ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыбПроизвод.Следующий() Цикл
					КолвоПоз=КолвоПоз+1;
					КолПроизвод=КолПроизвод+1;
					МасПроизвод.Добавить(ВыбПроизвод.Производитель);
				КонецЦикла;
				СоотНомРодИКол.Вставить(ВыбТовар.НоменклатураРодитель,КолПроизвод);
			КонецЦикла;
			ВыбТовар.Сбросить();
			
			
			
			
			КолНомРод=Новый Соответствие;
			КолКоробНомРод=0;
			ПредНомРодитель=Неопределено;
			ИтогКол=Новый Соответствие;
			ИтогКоробок=0;
			ЕдИзм="";
			СпИсследования=Новый СписокЗначений;
			Пока ВыбТовар.Следующий() Цикл
				
				ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СчПроизвод=0;
				Пока ВыбПроизвод.Следующий() Цикл
					
					Если Счетчик=20 И КолвоПоз>20 Тогда
						
						Кол=СпОрдера.Количество();
						НаименованиеПоставщика="";
						НаименованиеПоставщика=Шапка.ОрганизацияНаименованиеСокращенное;
						АдресОтправления="";
						АдресОтправления=Шапка.СкладВладелецАдрес;
						
						
						Если ТипЗнч(Шапка.ПолучательСсылка)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
							АдресПолучения=Шапка.ПолучательСсылкаАдрес;
							НППолуч=?(Строка(Шапка.ПолучательСсылкаРегион)="Москва","г."+Шапка.ПолучательСсылкаРегион,Шапка.ПолучательСсылкаРегион);
							РайонПолуч=Строка(Шапка.ПолучательСсылкаРайон);
							ГородПолуч=Строка(Шапка.ПолучательСсылкаГород)
						Иначе	
							АдресПолучения="";
							НППолуч="";
							РайонПолуч="";
							ГородПолуч="";
						КонецЕсли; 
						НПОтправ="";//?(ЗначениеЗаполнено(Шапка.Склад.Владелец.Регион),Шапка.Склад.Владелец.Регион,"г.Москва");
						ОбластьТаблица.Параметры.Организация	= НаименованиеПоставщика+" "+АдресОтправления;
						ИтогКолСтр="";
						Для каждого ЭлЕд Из ИтогКол Цикл
							ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
						КонецЦикла; 
						ОбластьТаблица.Параметры["ТоварКоличество1"]=?(Не ЗначениеЗаполнено(ОбластьТаблица.Параметры["ТоварКоличество1"]),"",ОбластьТаблица.Параметры["ТоварКоличество1"])+" Итого: "+ИтогКолСтр+"/"+ИтогКоробок+" мест.";
						
						
						ОбластьТаблица.Параметры.ДатыПроизводства	= ДатыПроизводста;
						
						ОбластьТаблица.Параметры.АдресОтправления				= ""+НПОтправ+", "+АдресОтправления+", "+Шапка.ОрганизацияНаименованиеСокращенное;
						ОбластьТаблица.Параметры.Температура					= "автотранспортом, "+НПОтправ+" - "+НППолуч+", "
						+РайонПолуч+", "+ГородПолуч+", "+АдресПолучения+", "+СформироватьСтрокуТемпературы(Шапка);
						
						НомерДатаНакладной="";
						НомерДатаНакладной				= "ТТН №"+ Ном+" от "+ Формат(Шапка.ДатаДокумента,"ДФ=dd.MM.yyyy");
						
						ОбластьТаблица.Параметры.НаименованиеИАдресПолучателя	= ""+Шапка.ОрганизацияНаименованиеСокращенное
						+" ("+Строка(Шапка.ПолучательСсылкаНомерТочки)+") "+", "+АдресПолучения+", "+НомерДатаНакладной;
						
						СпВет=Новый СписокЗначений;
						АдресПроизводителя="";
						Для каждого СтрВет Из ТЗВетСвва Цикл
							Если СтрВет.СпСтрок.Количество()>0 Тогда
								Кол=СтрВет.СпСтрок.Количество();
								Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-1].Значение)=Неопределено Тогда
									СпВет.Добавить(СтрВет.СпСтрок[Кол-1].Значение);
								КонецЕсли; 
								Если Найти(нрег(Шапка.СкладНаименование),"мороз")<>0 Тогда
									Если СтрВет.СпСтрок.Количество()>1 Тогда
										Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-2].Значение)=Неопределено Тогда
											СпВет.Добавить(СтрВет.СпСтрок[Кол-2].Значение);
										КонецЕсли; 
									КонецЕсли;
									Если СтрВет.СпСтрок.Количество()>2 Тогда
										Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-3].Значение)=Неопределено Тогда
											СпВет.Добавить(СтрВет.СпСтрок[Кол-3].Значение);
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
						Если СпВет.Количество()>0 Тогда
							ОбластьТаблица.Параметры.ВетСвВо="";
							Для СчВет=1 По СпВет.Количество() Цикл
								ОбластьТаблица.Параметры.ВетСвВо=ОбластьТаблица.Параметры.ВетСвВо+" "+СпВет[СчВет-1].Значение;
							КонецЦикла; 
						КонецЕсли; 
						
						СтрИсследования="";
						Для каждого ЭлИсл Из СпИсследования Цикл
							СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
						КонецЦикла;
						ОбластьТаблица.Параметры.Исследования			= 	СтрИсследования;
						СпИсследования=Новый СписокЗначений;
						
						ОбластьТаблица.Параметры.РазрешениеПредседателя			= "РАЗРЕШЕНИЕ НА ВЫВОЗ КВ Г. МОСКВЫ 77-"+ПрефОкр+"-"+Прав("00"+ДеньГода(ТекущаяДата()),3)+
						" от "+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+" г.";
						ОбластьТаблица.Параметры.Ветврач=Шапка.ВетеринарныйВрач;			 
						ТабДок.Вывести(ОбластьТаблица);
						ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
						ТабДок.ПолеСлева 				= 15;		
						ТабДок.ОтображатьСетку			= Ложь;
						ТабДок.Защита					= Ложь;
						ТабДок.ТолькоПросмотр			= Истина;
						ТабДок.ОтображатьЗаголовки		= Ложь;
						//ТабДок.РазмерКолонтитулаСнизу	= 0;
						//ТабДок.РазмерКолонтитулаСверху 	= 0;
						ТабДок.ПолеСверху 				= 5;
						ТабДок.ПолеСнизу 				= 5;
						ТабДок.ПолеСправа 				= 5;
						ТабДок.АвтоМасштаб				= Истина;
						//ТабДок.Показать();
						МассивПечФорм.Добавить(ТабДок);
						
						КолвоПоз=КолвоПоз-20;
						ТабДок	= Новый ТабличныйДокумент;
						ТабДок.ИмяПараметровПечати="ПечатьВетСвидетельство2";	
						Счетчик			= 0;
						СчетчикПроизвод			= 0;
						ТоварСписок		= "";
						ТоварКоличество	= "";
						ТоварВыработан	= "";
						ДатыПроизводста 	= "";
						ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
						ОбластьТаблица.Параметры.ДатаДень		= Прав("0"+Строка(День(ТекущаяДата())),2);
						ОбластьТаблица.Параметры.ДатаМесяц		= формат(ТекущаяДата(),"ДФ=ММММ");
						ОбластьТаблица.Параметры.ДатаГод		= Прав(СтрЗаменить(Год(ТекущаяДата()),Символы.НПП,""),2);
						Если Шапка.id_tt = 8 Тогда
							ОбластьТаблица.Параметры.АдмОкруг = "Южный административный округ";
							ПрефОкр="08";
						Иначе
							ОбластьТаблица.Параметры.АдмОкруг = "Северный административный округ";
							ПрефОкр="04";
						КонецЕсли;
						
						ТЗВетСвва=Новый ТаблицаЗначений;
						ТЗВетСвва.Колонки.Добавить("НоменклатураРодитель");
						ТЗВетСвва.Колонки.Добавить("Производитель");
						ТЗВетСвва.Колонки.Добавить("СпСтрок");
						СпОрдера=Новый СписокЗначений;
						КолНомРод=Новый Соответствие;
						КолКоробНомРод=0;
						СоотНомРодИКол.Вставить(ПредНомРодитель,СоотНомРодИКол.Получить(ПредНомРодитель)-СчПроизвод);
						СчПроизвод=0;
						ИтогКол=Новый Соответствие;
						ИтогКоробок=0;
					КонецЕсли; 
					ПредНомРодитель=ВыбТовар.НоменклатураРодитель;
					СчПроизвод=СчПроизвод+1;
					СтрокаТовар=ВыбПроизвод.Выбрать();
					КолКороб=0;
					СпДП=Новый СписокЗначений;
					СпВетСвид=Новый СписокЗначений;
					АдресПроизводителя="";
					Пока СтрокаТовар.Следующий() Цикл
						//
						КолКороб=КолКороб+?(СтрокаТовар.КолвоВКоробке = 0, 0, ?(Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)=0,1,Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)));
						ЕдИзм=СтрокаТовар.ЕдиницаИзмерения;
						ЕдКолИтог=?(ИтогКол.Получить(ЕдИзм)=Неопределено,0,ИтогКол.Получить(ЕдИзм));
						
						ИтогКол.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
						
						ЕдКолИтог=?(КолНомРод.Получить(ЕдИзм)=Неопределено,0,КолНомРод.Получить(ЕдИзм));
						
						КолНомРод.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
						
						
						ИтогКоробок=ИтогКоробок+?(СтрокаТовар.КолвоВКоробке = 0, 0, ?(Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)=0,1,Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)));
						
						Если Не Шапка.ФлЗаморозка Тогда
							Если ЗначениеЗаполнено(СтрокаТовар.ДатаПроизводства) Тогда
								Если СпДП.НайтиПоЗначению(СтрокаТовар.ДатаПроизводства)=Неопределено Тогда
									СпДП.Добавить(СтрокаТовар.ДатаПроизводства);
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли; 
						
						
						ТЗОрдер=ТЗОрдерВсе.НайтиСтроки(Новый Структура("Расходник",ЭлДок));
						Для каждого Стр Из ТЗОрдер Цикл
							Если СтрокаТовар.Номенклатура=Стр.Номенклатура И СтрокаТовар.Характеристика=Стр.Характеристика И ?(Шапка.ФлЗаморозка,Истина,СтрокаТовар.ДатаПроизводства=Стр.ДатаПроизводства) Тогда                                                 
								МасСтрВет=ТЗПереченьВетСвВа.НайтиСтроки(Новый Структура("Приходник,Расходник",Стр.Приходник,ЭлДок));
								Для каждого СтрВет Из МасСтрВет Цикл
									Если ЗначениеЗаполнено(СтрВет.ДанныеВетСвидетельствСерия) Тогда
										ВетСвВо=""+СтрВет.ДанныеВетСвидетельствСерия+"№"+СтрВет.ДанныеВетСвидетельствНомер+" от "+Формат(СтрВет.ДанныеВетСвидетельствДата,"ДФ=dd.MM.yyyy");
										Если СпВетСвид.НайтиПоЗначению(ВетСвВо)=Неопределено Тогда
											СпВетСвид.Добавить(ВетСвВо);
										КонецЕсли; 
									КонецЕсли;
									Если ЗначениеЗаполнено(СокрЛП(СтрВет.АдресПроизводителя)) Тогда
										АдресПроизводителя=СтрВет.АдресПроизводителя;
									КонецЕсли;
									Если ЗначениеЗаполнено(СокрЛП(СтрВет.ИнформацияОбИсследовании)) и СпИсследования.НайтиПоЗначению(СокрЛП(СтрВет.ИнформацияОбИсследовании))=Неопределено Тогда
										СпИсследования.Добавить(СокрЛП(СтрВет.ИнформацияОбИсследовании));
									КонецЕсли;
								КонецЦикла; 
								//Если СпОрдера.НайтиПоЗначению(Стр.Приходник)=Неопределено Тогда
								СпОрдера.Добавить(Стр);
								//КонецЕсли;
								Если Шапка.ФлЗаморозка Тогда
									ДатаПрЗаморозка=?(ЗначениеЗаполнено(Стр.ДатаПроизводства),
									Сред(Формат(Стр.ДатаПроизводства,"ДФ=dd.MM.yyyy"),4),Сред(Формат(Стр.ПриходникДата,"ДФ=dd.MM.yyyy"),4));
									Если ЗначениеЗаполнено(ДатаПрЗаморозка) Тогда
										Если СпДП.НайтиПоЗначению(ДатаПрЗаморозка)=Неопределено Тогда
											СпДП.Добавить(ДатаПрЗаморозка);
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
					КонецЦикла;
					Счетчик			= Счетчик+1;
					СчетчикПроизвод			= ?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и Не Счетчик=20,СчетчикПроизвод,СчетчикПроизвод+1);
					СчетчикПроизвод=?(СчетчикПроизвод=0,1,СчетчикПроизвод);
					
					СведенияОПроизводителе       = ТЗКонтр.НайтиСтроки(Новый Структура("Ссылка",ВыбПроизвод.Производитель))[0];
					
					АдресОтправления=ПолучитьАдресБезИндекса(СведенияОПроизводителе.ЮридическийАдрес);
					
					
					
					КолКоробНомРод=КолКоробНомРод+КолКороб;
					
					ТоварСписок		=  ТоварСписок+" "+Строка(Счетчик)+") "+?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и не Счетчик=20,"",ВыбТовар.НоменклатураРодитель);
					
					ИтогКолСтр="";
					Для каждого ЭлЕд Из КолНомРод Цикл
						ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
					КонецЦикла; 
					ТоварКоличество	=  ТоварКоличество+" "+Строка(Счетчик)+") "+?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и не Счетчик=20,"",""+ИтогКолСтр+" / "+КолКоробНомРод+" мест");
					
					ТоварВыработан	= Строка(Счетчик)+") "+СведенияОПроизводителе.Представление+" "+СокрЛП(АдресПроизводителя);
					Маркировка= Строка(Счетчик)+") "+СведенияОПроизводителе.Представление;
					
					
					Если СчПроизвод=СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) или Счетчик=20 Тогда
						ОбластьТаблица.Параметры["ТоварСписок1"]		= ?(ОбластьТаблица.Параметры["ТоварСписок1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварСписок1"])+" "+ТоварСписок;
						ОбластьТаблица.Параметры["ТоварКоличество1"]	= ?(ОбластьТаблица.Параметры["ТоварКоличество1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварКоличество1"])+" "+ТоварКоличество;
					КонецЕсли; 
					
					СтрТоварВыработан1=?(ОбластьТаблица.Параметры["ТоварВыработан1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан1"]);
					СтрТоварВыработан2=?(ОбластьТаблица.Параметры["ТоварВыработан2"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан2"]);
					
					Если СтрДлина(СтрТоварВыработан1)+СтрДлина(ТоварВыработан)+1<365 и Не ЗначениеЗаполнено(СтрТоварВыработан2) Тогда
						ОбластьТаблица.Параметры["ТоварВыработан1"]		= ?(ОбластьТаблица.Параметры["ТоварВыработан1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан1"])+" "+СокрЛП(ТоварВыработан);
					Иначе	
						ОбластьТаблица.Параметры["ТоварВыработан2"]		= ?(ОбластьТаблица.Параметры["ТоварВыработан2"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан2"])+" "+СокрЛП(ТоварВыработан);
					КонецЕсли; 
					ОбластьТаблица.Параметры["Маркировка"]		= ?(ОбластьТаблица.Параметры["Маркировка"]=Неопределено,"",ОбластьТаблица.Параметры["Маркировка"])+" "+Маркировка;
					
					
					Если СчПроизвод=СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) или Счетчик=20  Тогда
						КолНомРод=Новый Соответствие;
						КолКоробНомРод=0;
						ТоварСписок		=  "";
						ТоварКоличество ="";
					КонецЕсли; 
					
					
					
					ТекДП="";
					Если Шапка.ФлЗаморозка и СпДП.Количество()>1 Тогда
						ТекДП=ТекДП+" "+Формат(СпДП[0].Значение,"ДФ=dd.MM.yy")+"-"+Формат(СпДП[СпДП.Количество()-1].Значение,"ДФ=dd.MM.yy");
					Иначе	
						Для каждого Эл Из СпДП Цикл
							ТекДП=ТекДП+" "+Формат(Эл.Значение,"ДФ=dd.MM.yy");
						КонецЦикла; 
					КонецЕсли; 
					
					ДатыПроизводста = ДатыПроизводста+" "+?(ТекДП="","",""+Счетчик+") "+ТекДП);
					
					НовСтр=ТЗВетСвва.Добавить();
					НовСтр.НоменклатураРодитель=ВыбПроизвод.НоменклатураРодитель;
					НовСтр.Производитель=ВыбПроизвод.Производитель;
					НовСтр.СпСтрок=СпВетСвид;
					
				КонецЦикла;
				
			КонецЦикла; 
			
			
			
			Кол=СпОрдера.Количество();
			НаименованиеПоставщика="";
			НаименованиеПоставщика=Шапка.ОрганизацияНаименованиеСокращенное;
			АдресОтправления="";
			АдресОтправления=Шапка.СкладВладелецАдрес;
			
			
			//СведенияОбОрганизации       = ТЗКонтр.НайтиСтроки(Новый Структура("Ссылка",ВыбПроизвод.Производитель))[0];
			Если ТипЗнч(Шапка.ПолучательСсылка)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				АдресПолучения=Шапка.ПолучательСсылкаАдрес;
				НППолуч=?(Строка(Шапка.ПолучательСсылкаРегион)="Москва","г."+Шапка.ПолучательСсылкаРегион,Шапка.ПолучательСсылкаРегион);
				РайонПолуч=Строка(Шапка.ПолучательСсылкаРайон);
				ГородПолуч=Строка(Шапка.ПолучательСсылкаГород)
			Иначе	
				АдресПолучения="";
				НППолуч="";
				РайонПолуч="";
				ГородПолуч="";
			КонецЕсли; 
			
			НПОтправ="";//?(ЗначениеЗаполнено(Шапка.Склад.Владелец.Регион),Шапка.Склад.Владелец.Регион,"г.Москва");
			ОбластьТаблица.Параметры.Организация	= НаименованиеПоставщика+" "+АдресОтправления;
			
			ИтогКолСтр="";
			Для каждого ЭлЕд Из ИтогКол Цикл
				ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
			КонецЦикла; 
			ОбластьТаблица.Параметры["ТоварКоличество1"]=?(Не ЗначениеЗаполнено(ОбластьТаблица.Параметры["ТоварКоличество1"]),"",ОбластьТаблица.Параметры["ТоварКоличество1"])+" Итого: "+ИтогКолСтр+"/"+ИтогКоробок+" мест.";
			
			ОбластьТаблица.Параметры.ДатыПроизводства	= ДатыПроизводста;
			
			
			
			
			ОбластьТаблица.Параметры.АдресОтправления				= ""+НПОтправ+", "+АдресОтправления+", "+Шапка.ОрганизацияНаименованиеСокращенное;
			ОбластьТаблица.Параметры.Температура					= "автотранспортом, "+НПОтправ+" - "+НППолуч+", "+РайонПолуч+", "+ГородПолуч+", "+АдресПолучения+", "+СформироватьСтрокуТемпературы(Шапка);
			
			НомерДатаНакладной="";
			НомерДатаНакладной				= "ТТН №"+ Ном+" от "+ Формат(Шапка.ДатаДокумента,"ДФ=dd.MM.yyyy");
			
			ОбластьТаблица.Параметры.НаименованиеИАдресПолучателя	= ""+Шапка.ОрганизацияНаименованиеСокращенное
			+" ("+Строка(Шапка.ПолучательСсылкаНомерТочки)+")"+", "+АдресПолучения+", "+НомерДатаНакладной;
			
			
			СпВет=Новый СписокЗначений;
			Для каждого СтрВет Из ТЗВетСвва Цикл
				Если СтрВет.СпСтрок.Количество()>0 Тогда
					Кол=СтрВет.СпСтрок.Количество();
					Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-1].Значение)=Неопределено Тогда
						СпВет.Добавить(СтрВет.СпСтрок[Кол-1].Значение);
					КонецЕсли; 
					Если Найти(нрег(Шапка.СкладНаименование),"мороз")<>0 Тогда
						Если СтрВет.СпСтрок.Количество()>1 Тогда
							Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-2].Значение)=Неопределено Тогда
								СпВет.Добавить(СтрВет.СпСтрок[Кол-2].Значение);
							КонецЕсли; 
						КонецЕсли;
						Если СтрВет.СпСтрок.Количество()>2 Тогда
							Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-3].Значение)=Неопределено Тогда
								СпВет.Добавить(СтрВет.СпСтрок[Кол-3].Значение);
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			Если СпВет.Количество()>0 Тогда
				ОбластьТаблица.Параметры.ВетСвВо="";
				Для СчВет=1 По СпВет.Количество() Цикл
					ОбластьТаблица.Параметры.ВетСвВо=ОбластьТаблица.Параметры.ВетСвВо+" "+СпВет[СчВет-1].Значение;
				КонецЦикла; 
			КонецЕсли; 
			
			СтрИсследования="";
			Для каждого ЭлИсл Из СпИсследования Цикл
				СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
			КонецЦикла;
			ОбластьТаблица.Параметры.Исследования			= 	СтрИсследования;
			
			ОбластьТаблица.Параметры.РазрешениеПредседателя			= "РАЗРЕШЕНИЕ НА ВЫВОЗ КВ Г. МОСКВЫ 77-"
			+ПрефОкр+"-"+Прав("00"+ДеньГода(ТекущаяДата()),3)+" от "+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+" г.";
			ОбластьТаблица.Параметры.Ветврач=Шапка.ВетеринарныйВрач;			 
			ТабДок.Вывести(ОбластьТаблица);
			ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
			ТабДок.ПолеСлева 				= 15;		
			ТабДок.ОтображатьСетку			= Ложь;
			ТабДок.Защита					= Ложь;
			ТабДок.ТолькоПросмотр			= Истина;
			ТабДок.ОтображатьЗаголовки		= Ложь;
			//ТабДок.РазмерКолонтитулаСнизу	= 0;
			//ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху 				= 5;
			ТабДок.ПолеСнизу 				= 5;
			ТабДок.ПолеСправа 				= 5;
			ТабДок.АвтоМасштаб				= Истина;
			МассивПечФорм.Добавить(ТабДок);
			
			ВыбСсылка.Сбросить();
		КонецЕсли; 	
		
		
	КонецЦикла; 
	//ТабДок.Показать();
КонецПроцедуры //ПечатьВетСвидетельство2(СсылкаНаДокумент) Экспорт 

Процедура ПечатьВетСвидетельство3(СсылкаНаДокумент, МассивПечФорм) Экспорт 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Корм",Справочники.Номенклатура.НайтиПоКоду("000623185"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка в (&Ссылка)
	|	И РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ(&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 1
	|		КОГДА втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 2
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 3
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 4
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет,
	|	втНоменклатура.Номенклатура,
	|	ВетеринарныеГруппыПереченьНоменклатуры.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарныеГруппы.ПереченьНоменклатуры КАК ВетеринарныеГруппыПереченьНоменклатуры
	|		ПО (НЕ ВетеринарныеГруппыПереченьНоменклатуры.Ссылка.ПометкаУдаления)
	|			И (втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	МИНИМУМ(втГруппы.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втГруппыМакс
	|ИЗ
	|	втГруппы КАК втГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа.НаименованиеПолное КАК Группа
	|ПОМЕСТИТЬ втВетГруппы
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыМакс КАК втГруппыМакс
	|		ПО втГруппы.Номенклатура = втГруппыМакс.Номенклатура
	|			И втГруппы.Приоритет = втГруппыМакс.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа,
	|	втГруппы.Группа.НаименованиеПолное";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01 
	ИзменитьТекстЗапроса_3_1(Запрос);
//---АК KOPA
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование ПОДОБНО &Наименование";
	
	Запрос1.УстановитьПараметр("Наименование", "%мороз%");
	
	РезультатЗапроса = Запрос1.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасСкл=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСкл.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МасСкл"		, МасСкл);
	
	
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Ссылка КАК Ссылка,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	ВЫРАЗИТЬ(Выразить(РасходныйОрдер.Получатель как Справочник.СтруктурныеЕдиницы).Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
	|	РасходныйОрдер.Получатель КАК ПолучательСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация.НаименованиеСокращенное
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация.НаименованиеСокращенное
	|	КОНЕЦ ОрганизацияНаименованиеСокращенное,
	|	РасходныйОрдер.Склад.Владелец.Адрес СкладВладелецАдрес,
	|Выразить(РасходныйОрдер.Получатель как Справочник.СтруктурныеЕдиницы).Регион ПолучательСсылкаРегион,
	|Выразить(РасходныйОрдер.Получатель как Справочник.СтруктурныеЕдиницы).Район ПолучательСсылкаРайон,
	|Выразить(РасходныйОрдер.Получатель как Справочник.СтруктурныеЕдиницы).Город ПолучательСсылкаГород,
	|Выразить(РасходныйОрдер.Получатель как Справочник.СтруктурныеЕдиницы).НомерТочки ПолучательСсылкаНомерТочки,
	
	|Выразить(РасходныйОрдер.Получатель как Справочник.СтруктурныеЕдиницы).Адрес ПолучательСсылкаАдрес,
	|	РасходныйОрдер.Склад.ТемпературныйРежимВерхняяГраница ТемпературныйРежимВерхняяГраница,
	|	РасходныйОрдер.Склад.ТемпературныйРежимНижняяГраница ТемпературныйРежимНижняяГраница,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Склад В (&МасСкл)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлЗаморозка,
	|	РасходныйОрдер.Склад,РасходныйОрдер.Склад.Наименование СкладНаименование,РасходныйОрдер.Склад.Владелец.id_tt  id_tt
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
	|		ПО РасходныйОрдер.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
	|ГДЕ
	|	РасходныйОрдер.Ссылка в (&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	""кг"" КАК ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество * РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоТТ) КАК КоличествоТТ,
	|	СУММА(РасходныйОрдерСкладТовары.Отклонение) КАК Отклонение,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	СУММА(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)) КАК КолвоВКоробке,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель) КАК НоменклатураРодитель
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|			И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка в (&ТекущийДокумент)
	|	И РасходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И РасходныйОрдерСкладТовары.Количество > 0
	|	И  РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ (&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО Ссылка
	|	НоменклатураРодитель,
	|	Производитель";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01
	ИзменитьТекстЗапроса_3_2(Запрос);
//---АК KOPA

	Результаты = Запрос.ВыполнитьПакет();
	ТЗШапка = Результаты[0].Выгрузить();
	
	ВыбСсылка=Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыбСсылка.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|ПОМЕСТИТЬ втНом
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка в (&ТекущийДокумент)	
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.Ссылка.Дата,
	|	втНом.Ссылка КАК Расходник
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	втНом КАК втНом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО втНом.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|			И втНом.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|			И втНом.ДатаПроизводства = ПриходныйОрдерСкладТовары.ДатаПроизводства
	|			И втНом.Ссылка.Склад.Владелец = ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	|			И (ВЫБОР
	|				КОГДА втНом.Ссылка.Склад В (&МасСкл)
	|					ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -3) И втНом.Ссылка.Дата
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -1) И втНом.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.отпоставщика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСОрдерами.Ссылка КАК Приходник,
	|	втНоменклатураСОрдерами.Ссылка.Дата КАК ПриходникДата,
	|	втНоменклатураСОрдерами.Номенклатура КАК Номенклатура,
	|	втНоменклатураСОрдерами.Характеристика КАК Характеристика,
	|	втНоменклатураСОрдерами.ДатаПроизводства КАК ДатаПроизводства,
	|	втВетГруппы.Группа КАК Группа,
	|	втНоменклатураСОрдерами.Дата КАК Дата,
	|	втНоменклатураСОрдерами.Расходник 
	|ИЗ
	|	втОрдера КАК втНоменклатураСОрдерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = втНоменклатураСОрдерами.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	втНоменклатураСОрдерами.Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01 
	ИзменитьТекстЗапроса_3_3(Запрос);
//---АК KOPA
	
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗОрдерВсе = РезультатЗапроса.Выгрузить();
	
	
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствСерия,
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствНомер,
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствДата,
	|	ВетСвидетельстваПоступлений.АдресПроизводителя,
	|	ВетСвидетельстваПоступлений.ДокПоступления КАК Приходник,
	|	втОрдера.Расходник КАК Расходник,
	|	ВетСвидетельстваПоступлений.ИнформацияОбИсследовании
	|ИЗ
	|	втОрдера КАК втОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО втОрдера.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВетСвидетельстваПоступлений.ДокПоступления.Дата,
	|	ВетСвидетельстваПоступлений.ДокПоступления.Ссылка";	
	
	
	ТЗПереченьВетСвВа=Запрос.Выполнить().Выгрузить();	
	ТЗПереченьВетСвВа.Индексы.Добавить("Приходник,Расходник");	
	
	
	
	МасПроизвод=Новый Массив;
	Пока ВыбСсылка.Следующий() Цикл
		ВыбТовар=ВыбСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбТовар.Следующий() Цикл
			ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыбПроизвод.Следующий() Цикл
				МасПроизвод.Добавить(ВыбПроизвод.Производитель);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ВыбСсылка.Сбросить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК ЮридическийАдрес
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияПериодическая.СрезПоследних(
	|				&ДатаСреза,
	|				Объект В (&Ссылка)
	|					И Тип = &Тип
	|					И Вид = &Вид) КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МасПроизвод);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗКонтр = РезультатЗапроса.Выгрузить();
	
	
	Для каждого ЭлДок Из СсылкаНаДокумент Цикл
		Если ВыбСсылка.НайтиСледующий(Новый Структура("Ссылка",ЭлДок)) Тогда
			Шапка=ТЗШапка.НайтиСтроки(Новый Структура("Ссылка",ЭлДок))[0];
			
			ВыбТовар=ВыбСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Ном=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭлДок);
			
			
			
			
			
			
			
			
			
			ТабДок	= Новый ТабличныйДокумент;
			ТабДок.ИмяПараметровПечати="ПечатьВетСвидетельство3";	
			Макет	= Документы.РасходныйОрдерСклад.ПолучитьМакет("ВетСвидетельствоФорма3");
			ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
			ОбластьТаблица.Параметры.ДатаДень		= Прав("0"+Строка(День(ТекущаяДата())),2);
			ОбластьТаблица.Параметры.ДатаМесяц		= формат(ТекущаяДата(),"ДФ=ММММ");
			ОбластьТаблица.Параметры.ДатаГод		= Прав(СтрЗаменить(Год(ТекущаяДата()),Символы.НПП,""),2);
			Если Шапка.id_tt = 8 Тогда
				ОбластьТаблица.Рисунки.АдмОкруг.Текст = "Южный административный округ";
				ПрефОкр="08";
			Иначе
				ОбластьТаблица.Рисунки.АдмОкруг.Текст = "Северный административный округ";
				ПрефОкр="04";
			КонецЕсли;
			Счетчик			= 0;
			СчетчикПроизвод			= 0;
			ТоварСписок		= "";
			ТоварКоличество	= "";
			ТоварВыработан	= "";
			ДатыПроизводста 	= "";
			КолвоПоз=0;
			ТЗВетСвва=Новый ТаблицаЗначений;
			ТЗВетСвва.Колонки.Добавить("НоменклатураРодитель");
			ТЗВетСвва.Колонки.Добавить("Производитель");
			ТЗВетСвва.Колонки.Добавить("СпСтрок");
			СпОрдера=Новый СписокЗначений;
			
			СоотНомРодИКол=Новый Соответствие;
			МасПроизвод=Новый Массив;
			Пока ВыбТовар.Следующий() Цикл
				КолПроизвод=0;
				ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыбПроизвод.Следующий() Цикл
					КолвоПоз=КолвоПоз+1;
					КолПроизвод=КолПроизвод+1;
					МасПроизвод.Добавить(ВыбПроизвод.Производитель);
				КонецЦикла;
				СоотНомРодИКол.Вставить(ВыбТовар.НоменклатураРодитель,КолПроизвод);
			КонецЦикла;
			
			ВыбТовар.Сбросить();
			КолНомРод=Новый Соответствие;
			
			
			КолКоробНомРод=0;
			ПредНомРодитель=Неопределено;
			ИтогКол=Новый Соответствие;
			ИтогКоробок=0;
			ЕдИзм="";
			СпИсследования=Новый СписокЗначений;
			Пока ВыбТовар.Следующий() Цикл
				
				ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СчПроизвод=0;
				Пока ВыбПроизвод.Следующий() Цикл
					
					Если Счетчик=20 И КолвоПоз>20 Тогда
						
						Кол=СпОрдера.Количество();
						НаименованиеПоставщика="";
						НаименованиеПоставщика=Шапка.ОрганизацияНаименованиеСокращенное;
						АдресОтправления="";
						АдресОтправления=Шапка.СкладВладелецАдрес;
						
						
						Если ТипЗнч(Шапка.ПолучательСсылка)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
							АдресПолучения=Шапка.ПолучательСсылкаАдрес;
							НППолуч=?(Строка(Шапка.ПолучательСсылкаРегион)="Москва","г."+Шапка.ПолучательСсылкаРегион,Шапка.ПолучательСсылкаРегион);
							РайонПолуч=Строка(Шапка.ПолучательСсылкаРайон);
							ГородПолуч=Строка(Шапка.ПолучательСсылкаГород)
						Иначе	
							АдресПолучения="";
							НППолуч="";
							РайонПолуч="";
							ГородПолуч="";
						КонецЕсли; 
						НПОтправ="";//?(ЗначениеЗаполнено(Шапка.Склад.Владелец.Регион),Шапка.Склад.Владелец.Регион,"г.Москва");
						ОбластьТаблица.Параметры.Организация	= НаименованиеПоставщика+" "+АдресОтправления;
						ИтогКолСтр="";
						Для каждого ЭлЕд Из ИтогКол Цикл
							ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
						КонецЦикла; 
						ОбластьТаблица.Параметры["ТоварКоличество1"]=?(Не ЗначениеЗаполнено(ОбластьТаблица.Параметры["ТоварКоличество1"]),"",ОбластьТаблица.Параметры["ТоварКоличество1"])+" Итого: "+ИтогКолСтр+"/"+ИтогКоробок+" мест.";
						
						
						
						ОбластьТаблица.Параметры.АдресОтправления				= ""+НПОтправ+", "+АдресОтправления+", "+Шапка.ОрганизацияНаименованиеСокращенное;
						ОбластьТаблица.Параметры.Температура					= "автотранспортом, "+НПОтправ+" - "+НППолуч+", "+РайонПолуч+", "+ГородПолуч+", "+АдресПолучения+", "
						+СформироватьСтрокуТемпературы(Шапка);
						
						НомерДатаНакладной="";
						НомерДатаНакладной				= "ТТН №"+ Ном+" от "+ Формат(Шапка.ДатаДокумента,"ДФ=dd.MM.yyyy");
						//КонецЕсли; 
						
						ОбластьТаблица.Параметры.НаименованиеИАдресПолучателя	= ""+Шапка.ОрганизацияНаименованиеСокращенное+" ("+Строка(Шапка.ПолучательСсылкаНомерТочки)+") "
						+", "+АдресПолучения+", "+НомерДатаНакладной;
						
						СпВет=Новый СписокЗначений;
						АдресПроизводителя="";
						Для каждого СтрВет Из ТЗВетСвва Цикл
							Если СтрВет.СпСтрок.Количество()>0 Тогда
								Кол=СтрВет.СпСтрок.Количество();
								Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-1].Значение)=Неопределено Тогда
									СпВет.Добавить(СтрВет.СпСтрок[Кол-1].Значение);
								КонецЕсли; 
								Если Найти(нрег(Шапка.СкладНаименование),"мороз")<>0 Тогда
									Если СтрВет.СпСтрок.Количество()>1 Тогда
										Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-2].Значение)=Неопределено Тогда
											СпВет.Добавить(СтрВет.СпСтрок[Кол-2].Значение);
										КонецЕсли; 
									КонецЕсли;
									Если СтрВет.СпСтрок.Количество()>2 Тогда
										Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-3].Значение)=Неопределено Тогда
											СпВет.Добавить(СтрВет.СпСтрок[Кол-3].Значение);
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
						Если СпВет.Количество()>0 Тогда
							ОбластьТаблица.Параметры.ВетСвВо="";
							Для СчВет=1 По СпВет.Количество() Цикл
								ОбластьТаблица.Параметры.ВетСвВо=ОбластьТаблица.Параметры.ВетСвВо+" "+СпВет[СчВет-1].Значение;
							КонецЦикла; 
						КонецЕсли; 
						
						СтрИсследования="";
						Для каждого ЭлИсл Из СпИсследования Цикл
							СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
						КонецЦикла;
						ОбластьТаблица.Параметры.Исследования			= 	СтрИсследования;
						СпИсследования=Новый СписокЗначений;
						
						ОбластьТаблица.Параметры.РазрешениеПредседателя			= "РАЗРЕШЕНИЕ НА ВЫВОЗ КВ Г. МОСКВЫ 77-"+ПрефОкр+"-"+Прав("00"+ДеньГода(ТекущаяДата()),3)+" от "+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+" г.";
						ОбластьТаблица.Параметры.Ветврач=Шапка.ВетеринарныйВрач;			 
						ТабДок.Вывести(ОбластьТаблица);
						ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
						ТабДок.ПолеСлева 				= 15;		
						ТабДок.ОтображатьСетку			= Ложь;
						ТабДок.Защита					= Ложь;
						ТабДок.ТолькоПросмотр			= Истина;
						ТабДок.ОтображатьЗаголовки		= Ложь;
						//ТабДок.РазмерКолонтитулаСнизу	= 0;
						//ТабДок.РазмерКолонтитулаСверху 	= 0;
						ТабДок.ПолеСверху 				= 5;
						ТабДок.ПолеСнизу 				= 5;
						ТабДок.ПолеСправа 				= 5;
						ТабДок.АвтоМасштаб				= Истина;
						//ТабДок.Показать();
						МассивПечФорм.Добавить(ТабДок);
						
						КолвоПоз=КолвоПоз-20;
						ТабДок	= Новый ТабличныйДокумент;
						ТабДок.ИмяПараметровПечати="ПечатьВетСвидетельство2";	
						Счетчик			= 0;
						СчетчикПроизвод			= 0;
						ТоварСписок		= "";
						ТоварКоличество	= "";
						ТоварВыработан	= "";
						ДатыПроизводста 	= "";
						ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
						ОбластьТаблица.Параметры.ДатаДень		= Прав("0"+Строка(День(ТекущаяДата())),2);
						ОбластьТаблица.Параметры.ДатаМесяц		= формат(ТекущаяДата(),"ДФ=ММММ");
						ОбластьТаблица.Параметры.ДатаГод		= Прав(СтрЗаменить(Год(ТекущаяДата()),Символы.НПП,""),2);
						Если Шапка.id_tt = 8 Тогда
							ОбластьТаблица.Рисунки.АдмОкруг.Текст = "Южный административный округ";
							ПрефОкр="08";
						Иначе
							ОбластьТаблица.Рисунки.АдмОкруг.Текст = "Северный административный округ";
							ПрефОкр="04";
						КонецЕсли;
						
						ТЗВетСвва=Новый ТаблицаЗначений;
						ТЗВетСвва.Колонки.Добавить("НоменклатураРодитель");
						ТЗВетСвва.Колонки.Добавить("Производитель");
						ТЗВетСвва.Колонки.Добавить("СпСтрок");
						СпОрдера=Новый СписокЗначений;
						КолНомРод=Новый Соответствие;
						КолКоробНомРод=0;
						СоотНомРодИКол.Вставить(ПредНомРодитель,СоотНомРодИКол.Получить(ПредНомРодитель)-СчПроизвод);
						СчПроизвод=0;
						ИтогКол=Новый Соответствие;
						ИтогКоробок=0;
					КонецЕсли; 
					ПредНомРодитель=ВыбТовар.НоменклатураРодитель;
					СчПроизвод=СчПроизвод+1;
					СтрокаТовар=ВыбПроизвод.Выбрать();
					КолКороб=0;
					СпДП=Новый СписокЗначений;
					СпВетСвид=Новый СписокЗначений;
					АдресПроизводителя="";
					Пока СтрокаТовар.Следующий() Цикл
						//
						КолКороб=КолКороб+?(СтрокаТовар.КолвоВКоробке = 0, 0, ?(Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)=0,1,Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)));
						ЕдИзм=СтрокаТовар.ЕдиницаИзмерения;
						ЕдКолИтог=?(ИтогКол.Получить(ЕдИзм)=Неопределено,0,ИтогКол.Получить(ЕдИзм));
						
						ИтогКол.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
						
						ЕдКолИтог=?(КолНомРод.Получить(ЕдИзм)=Неопределено,0,КолНомРод.Получить(ЕдИзм));
						
						КолНомРод.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
						
						
						ИтогКоробок=ИтогКоробок+?(СтрокаТовар.КолвоВКоробке = 0, 0, ?(Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)=0,1,Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)));
						
						Если Не Шапка.ФлЗаморозка Тогда
							Если ЗначениеЗаполнено(СтрокаТовар.ДатаПроизводства) Тогда
								Если СпДП.НайтиПоЗначению(СтрокаТовар.ДатаПроизводства)=Неопределено Тогда
									СпДП.Добавить(СтрокаТовар.ДатаПроизводства);
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли; 
						
						
						ТЗОрдер=ТЗОрдерВсе.НайтиСтроки(Новый Структура("Расходник",ЭлДок));
						Для каждого Стр Из ТЗОрдер Цикл
							Если СтрокаТовар.Номенклатура=Стр.Номенклатура И СтрокаТовар.Характеристика=Стр.Характеристика И ?(Шапка.ФлЗаморозка,Истина,СтрокаТовар.ДатаПроизводства=Стр.ДатаПроизводства) Тогда                                                 
								МасСтрВет=ТЗПереченьВетСвВа.НайтиСтроки(Новый Структура("Приходник,Расходник",Стр.Приходник,ЭлДок));
								Для каждого СтрВет Из МасСтрВет Цикл
									Если ЗначениеЗаполнено(СтрВет.ДанныеВетСвидетельствСерия) Тогда
										ВетСвВо=""+СтрВет.ДанныеВетСвидетельствСерия+"№"+СтрВет.ДанныеВетСвидетельствНомер+" от "+Формат(СтрВет.ДанныеВетСвидетельствДата,"ДФ=dd.MM.yyyy");
										Если СпВетСвид.НайтиПоЗначению(ВетСвВо)=Неопределено Тогда
											СпВетСвид.Добавить(ВетСвВо);
										КонецЕсли; 
									КонецЕсли;
									Если ЗначениеЗаполнено(СокрЛП(СтрВет.АдресПроизводителя)) Тогда
										АдресПроизводителя=СтрВет.АдресПроизводителя;
									КонецЕсли;
									Если ЗначениеЗаполнено(СокрЛП(СтрВет.ИнформацияОбИсследовании)) и СпИсследования.НайтиПоЗначению(СокрЛП(СтрВет.ИнформацияОбИсследовании))=Неопределено Тогда
										СпИсследования.Добавить(СокрЛП(СтрВет.ИнформацияОбИсследовании));
									КонецЕсли;
								КонецЦикла; 
								СпОрдера.Добавить(Стр);
								Если Шапка.ФлЗаморозка Тогда
									ДатаПрЗаморозка=?(ЗначениеЗаполнено(Стр.ДатаПроизводства),Сред(Формат(Стр.ДатаПроизводства,"ДФ=dd.MM.yyyy"),4),Сред(Формат(Стр.ПриходникДата,"ДФ=dd.MM.yyyy"),4));
									Если ЗначениеЗаполнено(ДатаПрЗаморозка) Тогда
										Если СпДП.НайтиПоЗначению(ДатаПрЗаморозка)=Неопределено Тогда
											СпДП.Добавить(ДатаПрЗаморозка);
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
					КонецЦикла;
					Счетчик			= Счетчик+1;
					СчетчикПроизвод			= ?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и Не Счетчик=20,СчетчикПроизвод,СчетчикПроизвод+1);
					СчетчикПроизвод=?(СчетчикПроизвод=0,1,СчетчикПроизвод);
					
					СведенияОПроизводителе       = ТЗКонтр.НайтиСтроки(Новый Структура("Ссылка",ВыбПроизвод.Производитель))[0];
					
					АдресОтправления=ПолучитьАдресБезИндекса(СведенияОПроизводителе.ЮридическийАдрес);
					
					
					
					КолКоробНомРод=КолКоробНомРод+КолКороб;
					
					ТоварСписок		=  ТоварСписок+" "+Строка(Счетчик)+") "+?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и не Счетчик=20,"",ВыбТовар.НоменклатураРодитель);
					
					ИтогКолСтр="";
					Для каждого ЭлЕд Из КолНомРод Цикл
						ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
					КонецЦикла; 
					ТоварКоличество	=  ТоварКоличество+" "+Строка(Счетчик)+") "+?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и не Счетчик=20,"",""+ИтогКолСтр+" / "+КолКоробНомРод+" мест");
					
					ТоварВыработан	= Строка(Счетчик)+") "+СведенияОПроизводителе.Представление+" "+СокрЛП(АдресПроизводителя);
					Маркировка= Строка(Счетчик)+") "+СведенияОПроизводителе.Представление;
					
					
					Если СчПроизвод=СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) или Счетчик=20 Тогда
						ОбластьТаблица.Параметры["ТоварСписок1"]		= ?(ОбластьТаблица.Параметры["ТоварСписок1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварСписок1"])+" "+ТоварСписок;
						ОбластьТаблица.Параметры["ТоварКоличество1"]	= ?(ОбластьТаблица.Параметры["ТоварКоличество1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварКоличество1"])+" "+ТоварКоличество;
					КонецЕсли; 
					
					СтрТоварВыработан1=?(ОбластьТаблица.Параметры["ТоварВыработан1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан1"]);
					СтрТоварВыработан2=?(ОбластьТаблица.Параметры["ТоварВыработан2"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан2"]);
					
					Если СтрДлина(СтрТоварВыработан1)+СтрДлина(ТоварВыработан)+1<268 и Не ЗначениеЗаполнено(СтрТоварВыработан2) Тогда
						ОбластьТаблица.Параметры["ТоварВыработан1"]		= ?(ОбластьТаблица.Параметры["ТоварВыработан1"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан1"])+" "+СокрЛП(ТоварВыработан);
					Иначе	
						ОбластьТаблица.Параметры["ТоварВыработан2"]		= ?(ОбластьТаблица.Параметры["ТоварВыработан2"]=Неопределено,"",ОбластьТаблица.Параметры["ТоварВыработан2"])+" "+СокрЛП(ТоварВыработан);
					КонецЕсли; 
					ОбластьТаблица.Параметры["Маркировка"]		= ?(ОбластьТаблица.Параметры["Маркировка"]=Неопределено,"",ОбластьТаблица.Параметры["Маркировка"])+" "+Маркировка;
					
					
					Если СчПроизвод=СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) или Счетчик=20  Тогда
						КолНомРод=Новый Соответствие;
						КолКоробНомРод=0;
						ТоварСписок		=  "";
						ТоварКоличество ="";
					КонецЕсли; 
					
					
					
					ТекДП="";
					Если Шапка.ФлЗаморозка и СпДП.Количество()>1 Тогда
						ТекДП=ТекДП+" "+Формат(СпДП[0].Значение,"ДФ=dd.MM.yy")+"-"+Формат(СпДП[СпДП.Количество()-1].Значение,"ДФ=dd.MM.yy");
					Иначе	
						Для каждого Эл Из СпДП Цикл
							ТекДП=ТекДП+" "+Формат(Эл.Значение,"ДФ=dd.MM.yy");
						КонецЦикла; 
					КонецЕсли; 
					
					ДатыПроизводста = ДатыПроизводста+" "+?(ТекДП="","",""+Счетчик+") "+ТекДП);
					
					НовСтр=ТЗВетСвва.Добавить();
					НовСтр.НоменклатураРодитель=ВыбПроизвод.НоменклатураРодитель;
					НовСтр.Производитель=ВыбПроизвод.Производитель;
					НовСтр.СпСтрок=СпВетСвид;
					
				КонецЦикла;
				
			КонецЦикла; 
			
			
			
			Кол=СпОрдера.Количество();
			НаименованиеПоставщика="";
			НаименованиеПоставщика=Шапка.ОрганизацияНаименованиеСокращенное;
			АдресОтправления="";
			АдресОтправления=Шапка.СкладВладелецАдрес;
			
			
			Если ТипЗнч(Шапка.ПолучательСсылка)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				АдресПолучения=Шапка.ПолучательСсылкаАдрес;
				НППолуч=?(Строка(Шапка.ПолучательСсылкаРегион)="Москва","г."+Шапка.ПолучательСсылкаРегион,Шапка.ПолучательСсылкаРегион);
				РайонПолуч=Строка(Шапка.ПолучательСсылкаРайон);
				ГородПолуч=Строка(Шапка.ПолучательСсылкаГород)
			Иначе	
				АдресПолучения="";
				НППолуч="";
				РайонПолуч="";
				ГородПолуч="";
			КонецЕсли; 
			
			НПОтправ="";//?(ЗначениеЗаполнено(Шапка.Склад.Владелец.Регион),Шапка.Склад.Владелец.Регион,"г.Москва");
			ОбластьТаблица.Параметры.Организация	= НаименованиеПоставщика+" "+АдресОтправления;
			
			ИтогКолСтр="";
			Для каждого ЭлЕд Из ИтогКол Цикл
				ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
			КонецЦикла; 
			ОбластьТаблица.Параметры["ТоварКоличество1"]=?(Не ЗначениеЗаполнено(ОбластьТаблица.Параметры["ТоварКоличество1"]),"",ОбластьТаблица.Параметры["ТоварКоличество1"])+" Итого: "+ИтогКолСтр+"/"+ИтогКоробок+" мест.";
			
			
			
			
			
			ОбластьТаблица.Параметры.АдресОтправления				= ""+НПОтправ+", "+АдресОтправления+", "+Шапка.ОрганизацияНаименованиеСокращенное;
			ОбластьТаблица.Параметры.Температура					= "автотранспортом, "+НПОтправ+" - "+НППолуч+", "+РайонПолуч+", "+ГородПолуч+", "+АдресПолучения+", "
			+СформироватьСтрокуТемпературы(Шапка);
			
			НомерДатаНакладной="";
			НомерДатаНакладной				= "ТТН №"+ Ном+" от "+ Формат(Шапка.ДатаДокумента,"ДФ=dd.MM.yyyy");
			
			ОбластьТаблица.Параметры.НаименованиеИАдресПолучателя	= ""+Шапка.ОрганизацияНаименованиеСокращенное+" ("+Строка(Шапка.ПолучательСсылкаНомерТочки)+")"
			+", "+АдресПолучения+", "+НомерДатаНакладной;
			
			СпВет=Новый СписокЗначений;
			Для каждого СтрВет Из ТЗВетСвва Цикл
				Если СтрВет.СпСтрок.Количество()>0 Тогда
					Кол=СтрВет.СпСтрок.Количество();
					Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-1].Значение)=Неопределено Тогда
						СпВет.Добавить(СтрВет.СпСтрок[Кол-1].Значение);
					КонецЕсли; 
					Если Найти(нрег(Шапка.СкладНаименование),"мороз")<>0 Тогда
						Если СтрВет.СпСтрок.Количество()>1 Тогда
							Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-2].Значение)=Неопределено Тогда
								СпВет.Добавить(СтрВет.СпСтрок[Кол-2].Значение);
							КонецЕсли; 
						КонецЕсли;
						Если СтрВет.СпСтрок.Количество()>2 Тогда
							Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-3].Значение)=Неопределено Тогда
								СпВет.Добавить(СтрВет.СпСтрок[Кол-3].Значение);
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			Если СпВет.Количество()>0 Тогда
				ОбластьТаблица.Параметры.ВетСвВо="";
				Для СчВет=1 По СпВет.Количество() Цикл
					ОбластьТаблица.Параметры.ВетСвВо=ОбластьТаблица.Параметры.ВетСвВо+" "+СпВет[СчВет-1].Значение;
				КонецЦикла; 
			КонецЕсли; 
			
			СтрИсследования="";
			Для каждого ЭлИсл Из СпИсследования Цикл
				СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
			КонецЦикла;
			ОбластьТаблица.Параметры.Исследования			= 	СтрИсследования;
			
			ОбластьТаблица.Параметры.РазрешениеПредседателя			= "РАЗРЕШЕНИЕ НА ВЫВОЗ КВ Г. МОСКВЫ 77-"+ПрефОкр+"-"+Прав("00"+ДеньГода(ТекущаяДата()),3)+" от "+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+" г.";
			ОбластьТаблица.Параметры.Ветврач=Шапка.ВетеринарныйВрач;			 
			ТабДок.Вывести(ОбластьТаблица);
			ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
			ТабДок.ПолеСлева 				= 15;		
			ТабДок.ОтображатьСетку			= Ложь;
			ТабДок.Защита					= Ложь;
			ТабДок.ТолькоПросмотр			= Истина;
			ТабДок.ОтображатьЗаголовки		= Ложь;
			//ТабДок.РазмерКолонтитулаСнизу	= 0;
			//ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху 				= 5;
			ТабДок.ПолеСнизу 				= 5;
			ТабДок.ПолеСправа 				= 5;
			ТабДок.АвтоМасштаб				= Истина;
			МассивПечФорм.Добавить(ТабДок);
			ВыбСсылка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	//ТабДок.Показать();
КонецПроцедуры //ПечатьВетСвидетельство2(СсылкаНаДокумент) Экспорт 

Процедура ПечатьВетСвидетельство4(СсылкаНаДокумент, МассивПечФорм) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|				где РасходныйОрдерСкладТовары.Ссылка в (&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 1
	|		КОГДА втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 2
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 3
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 4
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет,
	|	втНоменклатура.Номенклатура,
	|	ВетеринарныеГруппыПереченьНоменклатуры.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарныеГруппы.ПереченьНоменклатуры КАК ВетеринарныеГруппыПереченьНоменклатуры
	|		ПО (НЕ ВетеринарныеГруппыПереченьНоменклатуры.Ссылка.ПометкаУдаления)
	|			И (втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	МИНИМУМ(втГруппы.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втГруппыМакс
	|ИЗ
	|	втГруппы КАК втГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа.НаименованиеПолное КАК Группа
	|ПОМЕСТИТЬ втВетГруппы
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыМакс КАК втГруппыМакс
	|		ПО втГруппы.Номенклатура = втГруппыМакс.Номенклатура
	|			И втГруппы.Приоритет = втГруппыМакс.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа,
	|	втГруппы.Группа.НаименованиеПолное";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01
	ИзменитьТекстЗапроса_4_1(Запрос);
//---АК KOPA

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = Запрос.Выполнить();
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование ПОДОБНО &Наименование";
	
	Запрос1.УстановитьПараметр("Наименование", "%мороз%");
	
	РезультатЗапроса = Запрос1.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасСкл=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСкл.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МасСкл"		, МасСкл);
	
	
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Корм",Справочники.Номенклатура.НайтиПоКоду("000623185"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
	|	РасходныйОрдер.Получатель КАК ПолучательСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация.НаименованиеСокращенное
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	|	РасходныйОрдер.Склад.Владелец.Адрес КАК СкладВладелецАдрес,
	|	РасходныйОрдер.Склад.Владелец.Регион КАК СкладВладелецРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Регион КАК ПолучательСсылкаРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Район КАК ПолучательСсылкаРайон,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Город КАК ПолучательСсылкаГород,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК ПолучательСсылкаНомерТочки,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Адрес КАК ПолучательСсылкаАдрес,
	|	РасходныйОрдер.Склад.ТемпературныйРежимВерхняяГраница КАК ТемпературныйРежимВерхняяГраница,
	|	РасходныйОрдер.Склад.ТемпературныйРежимНижняяГраница КАК ТемпературныйРежимНижняяГраница,
	|	РасходныйОрдер.Склад,
	|	РасходныйОрдер.Склад.Наименование КАК СкладНаименование,
	|	РасходныйОрдер.Склад.Владелец.id_TT КАК id_tt,
	|	РасходныйОрдер.Автор.ФизЛицо КАК ФизЛицоОтправителя,
	|	РасходныйОрдер.Автор.ФизЛицо.Должность КАК ДолжностьОтправителя,
	|	Факсимиле.Ссылка КАК Факсимиле,
	|	Факсимиле.Подпись КАК Подпись,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Склад В (&МасСкл)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлЗаморозка,
	|	РасходныйОрдер.Ссылка,
	|	Факсимиле.ПометкаУдаления КАК ФаксимилеПометкаУдаления
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
	|		ПО РасходныйОрдер.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Факсимиле КАК Факсимиле
	|		ПО РасходныйОрдер.Автор.ФизЛицо = Факсимиле.ФизЛицо
	|ГДЕ
	|	РасходныйОрдер.Ссылка В(&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	""кг"" КАК ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество * РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоТТ) КАК КоличествоТТ,
	|	СУММА(РасходныйОрдерСкладТовары.Отклонение) КАК Отклонение,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	СУММА(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)) КАК КолвоВКоробке,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель) КАК НоменклатураРодитель
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|			И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|	И РасходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И РасходныйОрдерСкладТовары.Количество > 0
	|	И НЕ РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ (&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Ссылка,
	|	НоменклатураРодитель,
	|	Производитель";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01
	ИзменитьТекстЗапроса_4_2(Запрос);
//---АК KOPA

	Результаты = Запрос.ВыполнитьПакет();
	ТЗШапка = Результаты[0].Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|ПОМЕСТИТЬ втНом
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка в (&ТекущийДокумент)	
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.Ссылка.Дата,
	|	втНом.Ссылка КАК Расходник
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	втНом КАК втНом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО втНом.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|			И втНом.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|			И втНом.ДатаПроизводства = ПриходныйОрдерСкладТовары.ДатаПроизводства
	|			И втНом.Ссылка.Склад.Владелец = ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	|			И (ВЫБОР
	|				КОГДА втНом.Ссылка.Склад В (&МасСкл)
	|					ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -3) И втНом.Ссылка.Дата
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -1) И втНом.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.отпоставщика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСОрдерами.Ссылка КАК Приходник,
	|	втНоменклатураСОрдерами.Ссылка.Дата КАК ПриходникДата,
	|	втНоменклатураСОрдерами.Номенклатура КАК Номенклатура,
	|	втНоменклатураСОрдерами.Характеристика КАК Характеристика,
	|	втНоменклатураСОрдерами.ДатаПроизводства КАК ДатаПроизводства,
	|	втВетГруппы.Группа КАК Группа,
	|	втНоменклатураСОрдерами.Дата КАК Дата,
	|	втНоменклатураСОрдерами.Расходник 
	|ИЗ
	|	втОрдера КАК втНоменклатураСОрдерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = втНоменклатураСОрдерами.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	втНоменклатураСОрдерами.Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства";
	
//+++АК KOPA 2018.05.21 ИП-00018659.01	
	ИзменитьТекстЗапроса_4_3(Запрос);
//---АК KOPA	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗОрдерВсе = РезультатЗапроса.Выгрузить();
	
	
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствСерия,
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствНомер,
	|	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствДата,
	|	ВетСвидетельстваПоступлений.АдресПроизводителя,
	|	ВетСвидетельстваПоступлений.ДокПоступления КАК Приходник,
	|	втОрдера.Расходник КАК Расходник,
	|	ВетСвидетельстваПоступлений.ИнформацияОбИсследовании
	|ИЗ
	|	втОрдера КАК втОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО втОрдера.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВетСвидетельстваПоступлений.ДокПоступления.Дата,
	|	ВетСвидетельстваПоступлений.ДокПоступления.Ссылка";	
	
	
	ТЗПереченьВетСвВа=Запрос.Выполнить().Выгрузить();	
	ТЗПереченьВетСвВа.Индексы.Добавить("Приходник,Расходник");	
	
	ВыбСсылка=Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыбСсылка.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	МасПроизвод=Новый Массив;
	Пока ВыбСсылка.Следующий() Цикл
		ВыбТовар=ВыбСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбТовар.Следующий() Цикл
			ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыбПроизвод.Следующий() Цикл
				МасПроизвод.Добавить(ВыбПроизвод.Производитель);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ВыбСсылка.Сбросить();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК ЮридическийАдрес
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияПериодическая.СрезПоследних(
	|				&ДатаСреза,
	|				Объект В (&Ссылка)
	|					И Тип = &Тип
	|					И Вид = &Вид) КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МасПроизвод);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗКонтр = РезультатЗапроса.Выгрузить();
	
	
	Для каждого ЭлДок Из СсылкаНаДокумент Цикл
		Если ВыбСсылка.НайтиСледующий(Новый Структура("Ссылка",ЭлДок)) Тогда
			//+++АК BARA 2018.03.27  ИП-00018248   
			//Позже попросили сделать печать даже если нет факсимиле. Оставлю код на всякий случай, вдруг решать вернуть.
			//Ранее была ошибка из за того что в запросе левым соединением присоединялось факсимиле, и проверялось в что поментка удаления не ложь.
			//В документах с автором у которого нет факсимиле, 	
			//Строка кода "Шапка=ТЗШапка.НайтиСтроки(Новый Структура("Ссылка",ЭлДок))[0];" выдавала ошибку, убрал в запросе проверку. 
			//
			//Если ТЗШапка.НайтиСтроки(Новый Структура("Ссылка",ЭлДок)).Количество() = 0 Тогда
			//	Сообщить("Нету Факсимиле у автора документа "+ЭлДок+", печать не возможна.");
			//	Продолжить;
			//КонецЕсли;
			//---АК BARA 
			Шапка=ТЗШапка.НайтиСтроки(Новый Структура("Ссылка",ЭлДок))[0];
			//+++АК BARA 2018.03.27  ИП-00018248  
			//Решено вначале было выводить сообщения от отсутсвии факсимиле, но позже решили убрать их. Оставлю тут, вдруг снова передумают.
			//
			//Если  Шапка.ФаксимилеПометкаУдаления = Истина Тогда 
			//	Сообщить("Факсимиле у автора документа "+ЭлДок+", помечено на удаление.");
			//КонецЕсли;
			//Если  Шапка.Факсимиле = null Тогда 
			//	Сообщить("Отсутствует факсимиле у автора документа "+ЭлДок+".");
			//КонецЕсли;			
			//---АК BARA 
			
			ВыбТовар=ВыбСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			
			ФизЛицоОтправителя = Шапка.ФизЛицоОтправителя;
			Если ЗначениеЗаполнено(ФизЛицоОтправителя) Тогда
				//+++АК BARA 2018.03.27  ИП-00018248  
				Если  Шапка.Факсимиле <> null Тогда 
						Факсимиле = Шапка.Факсимиле;
				КонецЕсли;
				//---АК BARA 2018.03.27  ИП-00018248  
			КонецЕсли;
			Ном=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭлДок);
			
			///
			ТабДок	= Новый ТабличныйДокумент;
			ТабДок.ИмяПараметровПечати = "ПечатьВетСвидетельство4";
			
			Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("ВетСвидетельствоФорма4");
			
			ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
			ОбластьТаблица.Параметры.ДатаДень		= Прав("0" + Строка(День(ТекущаяДата())), 2);
			ОбластьТаблица.Параметры.ДатаМесяц		= формат(ТекущаяДата(), "ДФ=ММММ");
			ОбластьТаблица.Параметры.ДатаГод		= Прав(СтрЗаменить(Год(ТекущаяДата()), Символы.НПП, ""), 2);
			Если Шапка.id_tt = 8 Тогда
				ОбластьТаблица.Рисунки.АдмОкруг.Текст 	= "Южный административный округ";
				ОбластьТаблица.Рисунки.АдмОкруг1.Текст 	= "Южный административный округ";
			Иначе
				ОбластьТаблица.Рисунки.АдмОкруг.Текст 	= "Северный административный округ";
				ОбластьТаблица.Рисунки.АдмОкруг1.Текст 	= "Северный административный округ";
			КонецЕсли;
			
			Счетчик			= 0;
			СчетчикПроизвод	= 0;
			
			ТоварСписок			= "";
			ТоварКоличество		= "";
			СтрокаДатыПрва		= "";
			СтрокаПроизводитель	= "";
			СтрокаПроизводитель1= "";
			ТоварВыработан		= "";
			ДатыПроизводста 	= "";
			СпВетСвид = Новый СписокЗначений;
			АдресПроизводителя="";
			СпОрдера = Новый СписокЗначений;
			ЕдИзм="";
			ТЗСтрок = Новый ТаблицаЗначений;
			ТЗСтрок.Колонки.Добавить("НоменклатураРодитель");
			ТЗСтрок.Колонки.Добавить("Производитель");
			ТЗСтрок.Колонки.Добавить("СпСтрок");
			ТЗСтрок.Колонки.Добавить("АдресПроизводителя");
			
			ТЗВетСвва = Новый ТаблицаЗначений;
			ТЗВетСвва.Колонки.Добавить("НоменклатураРодитель");
			ТЗВетСвва.Колонки.Добавить("Производитель");
			ТЗВетСвва.Колонки.Добавить("СпСтрок");
			ТЗВетСвва.Колонки.Добавить("АдресПроизводителя");
			
			КолвоПоз = 0;
			СоотНомРодИКол = Новый Соответствие;
			
			МасПроизвод=Новый Массив;
			Пока ВыбТовар.Следующий() Цикл
				КолПроизвод=0;
				ВыбПроизвод=ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыбПроизвод.Следующий() Цикл
					КолвоПоз=КолвоПоз+1;
					КолПроизвод=КолПроизвод+1;
					МасПроизвод.Добавить(ВыбПроизвод.Производитель);
				КонецЦикла;
				СоотНомРодИКол.Вставить(ВыбТовар.НоменклатураРодитель,КолПроизвод);
			КонецЦикла;
			ВыбТовар.Сбросить();
			
			
				
			
			
			КолНомРод=Новый Соответствие;
			КолКоробНомРод=0;
			ПредНомРодитель=Неопределено;
			ИтогКол=Новый Соответствие;
			ИтогКоробок=0;
			ЕдИзм="";
			СпИсследования = Новый СписокЗначений;
			Пока ВыбТовар.Следующий() Цикл
				
				ВыбПроизвод = ВыбТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СчПроизвод=0;
				Пока ВыбПроизвод.Следующий() Цикл
					Если Счетчик=20 Тогда
						Кол=СпОрдера.Количество();
						
						
						НаименованиеПоставщика="";
						НаименованиеПоставщика=Шапка.ОрганизацияНаименованиеСокращенное;
						АдресОтправления="";
						АдресОтправления=Шапка.СкладВладелецАдрес;
						
						
						Если ТипЗнч(Шапка.ПолучательСсылка)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
							АдресПолучения=""+Шапка.ПолучательСсылкаГород+" "+Шапка.ПолучательСсылкаАдрес;
							НППолуч=Шапка.ПолучательСсылкаРегион;
						Иначе	
							АдресПолучения="";
							НППолуч="";
						КонецЕсли; 
						НПОтправ=Шапка.СкладВладелецРегион;
						ОбластьТаблица.Параметры.Организация	= НаименованиеПоставщика+" "+АдресОтправления;
						
						
						
						
						
						
						ОбластьТаблица.Параметры["ТоварКоличество"]	= ТоварКоличество+" "+СтрокаДатыПрва+" "+СтрокаПроизводитель;//?(КолвоПоз>2,"см. приложение",ТоварКоличество+" "+СтрокаДатыПрва+" "+СтрокаПроизводитель);
						ИтогКолСтр="";
						Для каждого ЭлЕд Из ИтогКол Цикл
							ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
						КонецЦикла; 
						ОбластьТаблица.Параметры["ИтогКоличество"]	= ""+ИтогКолСтр+"/"+ИтогКоробок+" мест,  картон, п/э пленка.";
						
						
						
						НомерДатаНакладной = "";
						НомерДатаНакладной				= "ТТН №"+ Ном+" от "+ Формат(Шапка.ДатаДокумента,"ДФ=dd.MM.yyyy");
						
						
						ОбластьТаблица.Параметры.ТТН	= СформироватьСтрокуТемпературы(Шапка) + "  по г. Москве";
						//СведенияОПроизводителе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,        Шапка.ДатаДокумента);
						
						// tuta ИП-00016686 начало
						ОбластьТаблица.Параметры.НаименованиеИАдресПолучателя	= Шапка.ОрганизацияНаименованиеСокращенное + " (" + Строка(Шапка.ПолучательСсылкаНомерТочки) + "), "
						+ АдресПолучения;
						// tuta ИП-00016686 окончание
						ОбластьТаблица.Параметры["Приложение2"]					= СтрокаПроизводитель1;//?(КолвоПоз>2,"см. приложение",СтрокаПроизводитель);
						стрВетСвВа="";
						СпВет=Новый СписокЗначений;
						Для каждого СтрВет Из ТЗВетСвва Цикл
							Если СтрВет.СпСтрок.Количество()>0 Тогда
								Кол=СтрВет.СпСтрок.Количество();
								Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-1].Значение)=Неопределено Тогда
									стрВетСвВа=стрВетСвВа+" "+СтрВет.СпСтрок[Кол-1].Значение;
									СпВет.Добавить(СтрВет.СпСтрок[Кол-1].Значение);
								КонецЕсли; 
								Если Найти(нрег(Шапка.СкладНаименование),"мороз")<>0 Тогда
									Если СтрВет.СпСтрок.Количество()>1 Тогда
										Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-2].Значение)=Неопределено Тогда
											стрВетСвВа=стрВетСвВа+" "+СтрВет.СпСтрок[Кол-2].Значение;
											СпВет.Добавить(СтрВет.СпСтрок[Кол-2].Значение);
										КонецЕсли; 
									КонецЕсли;
									Если СтрВет.СпСтрок.Количество()>2 Тогда
										Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-3].Значение)=Неопределено Тогда
											стрВетСвВа=стрВетСвВа+" "+СтрВет.СпСтрок[Кол-3].Значение;
											СпВет.Добавить(СтрВет.СпСтрок[Кол-3].Значение);
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
						
						ОбластьТаблица.Параметры["Приложение1"]	=
						"Вход в/с: "+стрВетСвВа;
						ОбластьТаблица.Параметры.Ветврач=Шапка.ВетеринарныйВрач;
						Если ЗначениеЗаполнено(ФизЛицоОтправителя) Тогда
							ОбластьТаблица.Параметры.ФИООтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицоОтправителя);
							
							Если ЗначениеЗаполнено(Факсимиле) Тогда
								КартинкаПодпись = Шапка.Подпись.Получить();
								Если ТипЗнч(КартинкаПодпись) = Тип("Картинка") Тогда
									ОбластьТаблица.Рисунки.ПодписьОтправителя.Картинка = КартинкаПодпись;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						
						СтрИсследования="";
						Для каждого ЭлИсл Из СпИсследования Цикл
							СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
						КонецЦикла;
						ОбластьТаблица.Параметры["Приложение"]	= СтрИсследования;//?(КолвоПоз>2,"см. приложение",СтрИсследования);
						СпИсследования=Новый СписокЗначений;
						
						ТабДок.Вывести(ОбластьТаблица);
						ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
						ТабДок.ПолеСлева 				= 15;		
						ТабДок.ОтображатьСетку			= Ложь;
						ТабДок.Защита					= Ложь;
						ТабДок.ТолькоПросмотр			= Истина;
						ТабДок.ОтображатьЗаголовки		= Ложь;
						//ТабДок.РазмерКолонтитулаСнизу	= 0;
						//ТабДок.РазмерКолонтитулаСверху 	= 0;
						ТабДок.ПолеСверху 				= 5;
						ТабДок.ПолеСнизу 				= 5;
						ТабДок.ПолеСправа 				= 5;
						ТабДок.АвтоМасштаб				= Истина;
						//ПечатьВетСвидетельство4_Оборотка(СсылкаНаДокумент,ВыбТовар,ТЗОрдер,Шапка,ТЗСтрок,ТабДок,КолвоПоз,ТЗПереченьВетСвВа);
						//ТабДок.Показать();
						МассивПечФорм.Добавить(ТабДок);
						
						
						КолвоПоз=КолвоПоз-20;
						ТабДок	= Новый ТабличныйДокумент;
						ТабДок.ИмяПараметровПечати="ПечатьВетСвидетельство4";	
						Счетчик			= 0;
						СчетчикПроизвод			= 0;
						ТоварСписок		= "";
						ТоварКоличество	= "";
						СтрокаДатыПрва="";
						СтрокаПроизводитель="";
						СтрокаПроизводитель1="";
						ТоварВыработан	= "";
						ДатыПроизводста 	= "";
						ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
						ОбластьТаблица.Параметры.ДатаДень		= Прав("0"+Строка(День(ТекущаяДата())),2);
						ОбластьТаблица.Параметры.ДатаМесяц		= формат(ТекущаяДата(),"ДФ=ММММ");
						ОбластьТаблица.Параметры.ДатаГод		= Прав(СтрЗаменить(Год(ТекущаяДата()),Символы.НПП,""),2);
						Если Шапка.id_tt = 8 Тогда
							ОбластьТаблица.Рисунки.АдмОкруг.Текст = "Южный административный округ";
							ОбластьТаблица.Рисунки.АдмОкруг1.Текст = "Южный административный округ";
						Иначе
							ОбластьТаблица.Рисунки.АдмОкруг.Текст = "Северный административный округ";
							ОбластьТаблица.Рисунки.АдмОкруг1.Текст = "Северный административный округ";
						КонецЕсли;
						СпОрдера=Новый СписокЗначений;
						
						ТЗСтрок=Новый ТаблицаЗначений;
						ТЗСтрок.Колонки.Добавить("НоменклатураРодитель");
						ТЗСтрок.Колонки.Добавить("Производитель");
						ТЗСтрок.Колонки.Добавить("СпСтрок");
						ТЗСтрок.Колонки.Добавить("АдресПроизводителя");
						
						ТЗВетСвва=Новый ТаблицаЗначений;
						ТЗВетСвва.Колонки.Добавить("НоменклатураРодитель");
						ТЗВетСвва.Колонки.Добавить("Производитель");
						ТЗВетСвва.Колонки.Добавить("СпСтрок");
						ТЗВетСвва.Колонки.Добавить("АдресПроизводителя");
						
						КолНомРод=Новый Соответствие;
						КолКоробНомРод=0;
						СоотНомРодИКол.Вставить(ПредНомРодитель,СоотНомРодИКол.Получить(ПредНомРодитель)-СчПроизвод);
						СчПроизвод=0;
						ИтогКол=Новый Соответствие;
						ИтогКоробок=0;
					КонецЕсли; 
					СтрокаТовар=ВыбПроизвод.Выбрать();
					КолКоробПоГруппе=0;
					СпТекСтр=Новый СписокЗначений;
					СпДП=Новый СписокЗначений;
					СпВетСвид=Новый СписокЗначений;
					АдресПроизводителя="";
					ПредНомРодитель=ВыбТовар.НоменклатураРодитель;
					СчПроизвод=СчПроизвод+1;
					Пока СтрокаТовар.Следующий() Цикл
						//ТоварСписок		=  Строка(Счетчик)+") "+СтрокаТовар.Номенклатура;
						//
						КолКороб=?(СтрокаТовар.КолвоВКоробке = 0, 0, ?(Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)=0,1,Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)));
						ЕдИзм=СтрокаТовар.ЕдиницаИзмерения;
						ЕдКолИтог=?(ИтогКол.Получить(ЕдИзм)=Неопределено,0,ИтогКол.Получить(ЕдИзм));
						
						ИтогКол.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
						
						ЕдКолИтог=?(КолНомРод.Получить(ЕдИзм)=Неопределено,0,КолНомРод.Получить(ЕдИзм));
						
						КолНомРод.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
						ТЗОрдер=ТЗОрдерВсе.НайтиСтроки(Новый Структура("Расходник",ЭлДок));
						Для каждого Стр Из ТЗОрдер Цикл
							Если СтрокаТовар.Номенклатура=Стр.Номенклатура И СтрокаТовар.Характеристика=Стр.Характеристика  И ?(Шапка.ФлЗаморозка,Истина,СтрокаТовар.ДатаПроизводства=Стр.ДатаПроизводства)Тогда                                                 
								МасСтрВет=ТЗПереченьВетСвВа.НайтиСтроки(Новый Структура("Приходник,Расходник",Стр.Приходник,ЭлДок));
								Для каждого СтрВет Из МасСтрВет Цикл
									Если ЗначениеЗаполнено(СтрВет.ДанныеВетСвидетельствСерия) Тогда
										ВетСвВо=""+СтрВет.ДанныеВетСвидетельствСерия+"№"+СтрВет.ДанныеВетСвидетельствНомер+" от "+Формат(СтрВет.ДанныеВетСвидетельствДата,"ДФ=dd.MM.yyyy");
										Если СпВетСвид.НайтиПоЗначению(ВетСвВо)=Неопределено Тогда
											СпВетСвид.Добавить(ВетСвВо);
										КонецЕсли; 
									КонецЕсли;
									Если ЗначениеЗаполнено(СокрЛП(СтрВет.АдресПроизводителя)) Тогда
										АдресПроизводителя=СтрВет.АдресПроизводителя;
									КонецЕсли; 
									Если ЗначениеЗаполнено(СокрЛП(СтрВет.ИнформацияОбИсследовании)) и СпИсследования.НайтиПоЗначению(СокрЛП(СтрВет.ИнформацияОбИсследовании))=Неопределено Тогда
										СпИсследования.Добавить(СокрЛП(СтрВет.ИнформацияОбИсследовании));
									КонецЕсли;
								КонецЦикла; 
								//Если СпОрдера.НайтиПоЗначению(Стр.Приходник)=Неопределено Тогда
								СпОрдера.Добавить(Стр);
								Если Шапка.ФлЗаморозка Тогда
									ДатаПрЗаморозка=?(ЗначениеЗаполнено(Стр.ДатаПроизводства),Сред(Формат(Стр.ДатаПроизводства,"ДФ=dd.MM.yyyy"),4),Сред(Формат(Стр.ПриходникДата,"ДФ=dd.MM.yyyy"),4));
									Если ЗначениеЗаполнено(ДатаПрЗаморозка) Тогда
										Если СпДП.НайтиПоЗначению(ДатаПрЗаморозка)=Неопределено Тогда
											СпДП.Добавить(ДатаПрЗаморозка);
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли; 
								//КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
						
						//ИтогКол=ИтогКол+СтрокаТовар.Количество;
						ИтогКоробок=ИтогКоробок+КолКороб;
						КолКоробПоГруппе=КолКоробПоГруппе+КолКороб;
						
						ЕдИзм=СтрокаТовар.ЕдиницаИзмерения;
						СтрукТекСтр=Новый Структура;
						СтрукТекСтр.Вставить("Ссылка");
						СтрукТекСтр.Вставить("Номенклатура");
						СтрукТекСтр.Вставить("Характеристика");
						СтрукТекСтр.Вставить("ЕдиницаИзмерения");
						СтрукТекСтр.Вставить("Количество");
						СтрукТекСтр.Вставить("КоличествоУРЗ");
						СтрукТекСтр.Вставить("КоличествоТТ");
						СтрукТекСтр.Вставить("Отклонение");
						СтрукТекСтр.Вставить("ДатаПроизводства");
						СтрукТекСтр.Вставить("Производитель");
						СтрукТекСтр.Вставить("КолвоВКоробке");
						СтрукТекСтр.Вставить("НоменклатураРодитель");
						СтрукТекСтр.Вставить("СтранаПроисхождения");
						ЗаполнитьЗначенияСвойств(СтрукТекСтр,СтрокаТовар);
						СпТекСтр.Добавить(СтрукТекСтр);
						Если Не Шапка.ФлЗаморозка Тогда
							Если ЗначениеЗаполнено(СтрокаТовар.ДатаПроизводства) Тогда
								Если СпДП.НайтиПоЗначению(СтрокаТовар.ДатаПроизводства)=Неопределено Тогда
									СпДП.Добавить(СтрокаТовар.ДатаПроизводства);
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
					Счетчик			= Счетчик+1;
					СчетчикПроизвод			= ?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) и Не Счетчик=20,СчетчикПроизвод,СчетчикПроизвод+1);
					СчетчикПроизвод=?(СчетчикПроизвод=0,1,СчетчикПроизвод);
					
					
					//ТекДП="";
					//Для каждого Эл1 Из СпДП Цикл
					//	ТекДП=ТекДП+" "+Формат(Эл1.Значение,"ДФ=dd.MM.yyyy");
					//КонецЦикла; 
					
					ТекДП="";
					Если Шапка.ФлЗаморозка и СпДП.Количество()>1 Тогда
						ТекДП=ТекДП+" "+Формат(СпДП[0].Значение,"ДФ=dd.MM.yy")+"-"+Формат(СпДП[СпДП.Количество()-1].Значение,"ДФ=dd.MM.yy");
					Иначе	
						Для каждого Эл1 Из СпДП Цикл
							ТекДП=ТекДП+" "+Формат(Эл1.Значение,"ДФ=dd.MM.yy");
						КонецЦикла; 
					КонецЕсли; 
					
					ДатыПроизводста = ДатыПроизводста+" "+Счетчик+") "+ТекДП;
					
					
					АдресОтправления="";
					СведенияОПроизводителе       = ТЗКонтр.НайтиСтроки(Новый Структура("Ссылка",ВыбПроизвод.Производитель))[0];
					АдресОтправления=ПолучитьАдресБезИндекса(СведенияОПроизводителе.ЮридическийАдрес);
					
					
					КолКоробНомРод=КолКоробНомРод+КолКороб;
					
					ИтогКолСтр="";
					Для каждого ЭлЕд Из КолНомРод Цикл
						ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
					КонецЦикла;
					
					СтрокаДатыПрва=СтрокаДатыПрва+?(ТекДП="","",Строка(Счетчик)+") "+ТекДП+" ");
					СтрокаПроизводитель=СтрокаПроизводитель+Строка(Счетчик)+") "+ВыбПроизвод.Производитель+" "+СокрЛП(АдресПроизводителя)+" ";
					СтрокаПроизводитель1=СтрокаПроизводитель1+Строка(Счетчик)+") "+ВыбПроизвод.Производитель+" ";
					
					ТоварКоличество	=  ТоварКоличество+" "+Строка(Счетчик)+") "+?(СчПроизвод<СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) 
					и не Счетчик=20,"", Строка(ВыбПроизвод.НоменклатураРодитель)+" "+ИтогКолСтр+" / "+КолКоробНомРод+" мест ");
					Если СчПроизвод=СоотНомРодИКол.Получить(ВыбТовар.НоменклатураРодитель) или Счетчик=20  Тогда
						КолНомРод=Новый Соответствие;
						КолКоробНомРод=0;
					КонецЕсли; 
					
					
					НовСтр=ТЗСтрок.Добавить();
					НовСтр.НоменклатураРодитель=ВыбПроизвод.НоменклатураРодитель;
					НовСтр.Производитель=ВыбПроизвод.Производитель;
					НовСтр.СпСтрок=СпТекСтр;
					НовСтр.АдресПроизводителя=СокрЛП(АдресПроизводителя);
					
					НовСтр=ТЗВетСвва.Добавить();
					НовСтр.НоменклатураРодитель=ВыбПроизвод.НоменклатураРодитель;
					НовСтр.Производитель=ВыбПроизвод.Производитель;
					НовСтр.СпСтрок=СпВетСвид;
					НовСтр.АдресПроизводителя=СокрЛП(АдресПроизводителя);
				КонецЦикла; 
			КонецЦикла; 
			Кол=СпОрдера.Количество();
			
			
			НаименованиеПоставщика="";
			НаименованиеПоставщика=Шапка.ОрганизацияНаименованиеСокращенное;
			АдресОтправления=Шапка.СкладВладелецАдрес;
			
			
			Если ТипЗнч(Шапка.ПолучательСсылка)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				АдресПолучения=""+Шапка.ПолучательСсылкаГород+" "+Шапка.ПолучательСсылкаАдрес;
				НППолуч=Шапка.ПолучательСсылкаРегион;
			Иначе	
				АдресПолучения="";
				НППолуч="";
			КонецЕсли; 
			НПОтправ=Шапка.СкладВладелецРегион;
			ОбластьТаблица.Параметры.Организация	= НаименованиеПоставщика+" "+АдресОтправления;
			
			
			
			
			ОбластьТаблица.Параметры["ТоварКоличество"]	= ТоварКоличество+" "+СтрокаДатыПрва+" "+СтрокаПроизводитель;//?(КолвоПоз>2,"см. приложение",ТоварКоличество+" "+СтрокаДатыПрва+" "+СтрокаПроизводитель);
			ИтогКолСтр="";
			Для каждого ЭлЕд Из ИтогКол Цикл
				ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
			КонецЦикла; 
			ОбластьТаблица.Параметры["ИтогКоличество"]	= ""+ИтогКолСтр+"/"+ИтогКоробок+" мест, картон, п/э пленка.";
			
			
			
			
			НомерДатаНакладной="";
			НомерДатаНакладной = "ТТН №" + Ном + " от " + Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
			
			
			
			ОбластьТаблица.Параметры.ТТН	=   СформироватьСтрокуТемпературы(Шапка) + "  по г. Москве";
			//СведенияОПроизводителе = ТЗКонтр.НайтиСтроки(Новый Структура("Ссылка",ВыбПроизвод.Производитель))[0];
			
			// tuta ИП-00016686 начало
			ОбластьТаблица.Параметры.НаименованиеИАдресПолучателя	= Шапка.ОрганизацияНаименованиеСокращенное + " (" + Строка(Шапка.ПолучательСсылкаНомерТочки) + "), " + АдресПолучения;
			// tuta ИП-00016686 окончание
			ОбластьТаблица.Параметры["Приложение2"]					= СтрокаПроизводитель1;//?(КолвоПоз>2,"см. приложение",СтрокаПроизводитель);
			
			СтрИсследования="";
			Для каждого ЭлИсл Из СпИсследования Цикл
				СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
			КонецЦикла;
			ОбластьТаблица.Параметры["Приложение"]	= СтрИсследования;//?(КолвоПоз>2,"см. приложение",СтрИсследования);
			
			
			стрВетСвВа="";
			СпВет=Новый СписокЗначений;
			Для каждого СтрВет Из ТЗВетСвва Цикл
				Если СтрВет.СпСтрок.Количество()>0 Тогда
					Кол=СтрВет.СпСтрок.Количество();
					Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-1].Значение)=Неопределено Тогда
						стрВетСвВа=стрВетСвВа+" "+СтрВет.СпСтрок[Кол-1].Значение;
						СпВет.Добавить(СтрВет.СпСтрок[Кол-1].Значение);
					КонецЕсли; 
					Если Найти(нрег(Шапка.СкладНаименование),"мороз")<>0 Тогда
						Если СтрВет.СпСтрок.Количество()>1 Тогда
							Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-2].Значение)=Неопределено Тогда
								стрВетСвВа=стрВетСвВа+" "+СтрВет.СпСтрок[Кол-2].Значение;
								СпВет.Добавить(СтрВет.СпСтрок[Кол-2].Значение);
							КонецЕсли; 
						КонецЕсли;
						Если СтрВет.СпСтрок.Количество()>2 Тогда
							Если СпВет.НайтиПоЗначению(СтрВет.СпСтрок[Кол-3].Значение)=Неопределено Тогда
								стрВетСвВа=стрВетСвВа+" "+СтрВет.СпСтрок[Кол-3].Значение;
								СпВет.Добавить(СтрВет.СпСтрок[Кол-3].Значение);
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			ОбластьТаблица.Параметры["Приложение1"]	= 
			//?(КолвоПоз>2,"Вход в/с: см. приложение",
			"Вход в/с: "+стрВетСвВа;
			
			Если ЗначениеЗаполнено(ФизЛицоОтправителя) Тогда
				ОбластьТаблица.Параметры.ФИООтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицоОтправителя);
				
				Если ЗначениеЗаполнено(Факсимиле) Тогда
					КартинкаПодпись = Шапка.Подпись.Получить();
					Если ТипЗнч(КартинкаПодпись) = Тип("Картинка") Тогда
						ОбластьТаблица.Рисунки.ПодписьОтправителя.Картинка = КартинкаПодпись;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьТаблица.Параметры.Ветврач=Шапка.ВетеринарныйВрач;			 
			ТабДок.Вывести(ОбластьТаблица);
			ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
			ТабДок.ПолеСлева 				= 15;		
			ТабДок.ОтображатьСетку			= Ложь;
			ТабДок.Защита					= Ложь;
			ТабДок.ТолькоПросмотр			= Истина;
			ТабДок.ОтображатьЗаголовки		= Ложь;
			//ТабДок.РазмерКолонтитулаСнизу	= 0;
			//ТабДок.РазмерКолонтитулаСверху 	= 0;
			ТабДок.ПолеСверху 				= 5;
			ТабДок.ПолеСнизу 				= 5;
			ТабДок.ПолеСправа 				= 5;
			ТабДок.АвтоМасштаб				= Истина;
			//ПечатьВетСвидетельство4_Оборотка(СсылкаНаДокумент,ВыбТовар,ТЗОрдер,Шапка,ТЗСтрок,ТабДок,КолвоПоз,ТЗПереченьВетСвВа);
			МассивПечФорм.Добавить(ТабДок);
			//ТабДок.Показать();
			//ПечатьВетСвидетельство4_Оборотка(СсылкаНаДокумент,ВыбТовар,ТЗОрдер,Шапка);
			ВыбСсылка.Сбросить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПечатьВетСвидетельство4(СсылкаНаДокумент) Экспорт

Функция СформироватьСтрокуТемпературы(Склад)
	Если Склад.ТемпературныйРежимНижняяГраница=Склад.ТемпературныйРежимВерхняяГраница Тогда
	     СтрокаРез=" t = "+Строка(Склад.ТемпературныйРежимВерхняяГраница)+" °С ";
    ИначеЕсли Склад.ТемпературныйРежимНижняяГраница=0 и Склад.ТемпературныйРежимВерхняяГраница<0 Тогда
	     СтрокаРез=" t не выше "+Строка(Склад.ТемпературныйРежимВерхняяГраница)+" °С ";
    ИначеЕсли Склад.ТемпературныйРежимНижняяГраница>0 и Склад.ТемпературныйРежимВерхняяГраница=0 Тогда
	     СтрокаРез=" t не ниже "+Строка(Склад.ТемпературныйРежимНижняяГраница)+" °С ";
	Иначе
		 ДопСимвол=?(Склад.ТемпературныйРежимВерхняяГраница>0,"+","");
	     СтрокаРез=" t=от "+Строка(Склад.ТемпературныйРежимНижняяГраница)+" до "+ДопСимвол+Строка(Склад.ТемпературныйРежимВерхняяГраница)+" °С ";
	КонецЕсли; 
	Возврат СтрокаРез

КонецФункции // ()

Функция ПолучитьАдресБезИндекса(АдресПолучения)
	АдресПолучения=СокрЛП(АдресПолучения);
	Поз=1;
	Для Сч=1 По СтрДлина(АдресПолучения) Цикл
		Если Найти("01234567890",Сред(АдресПолучения,Сч,1))>0 Тогда
			Поз=Сч+1;
		Иначе 	
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если Сред(АдресПолучения,Поз,1)="," Тогда
		АдресПолучения=Сред(АдресПолучения,Поз+1);
	Иначе	
		АдресПолучения=Сред(АдресПолучения,Поз);
	КонецЕсли;
	Возврат АдресПолучения;
КонецФункции // ()

Процедура ПечатьВетСвидетельство4_Оборотка(СсылкаНаДокумент,ВыбТовар,ТЗОрдер,Шапка,ТЗСтрок,ТабДокГлав,КолвоПоз,ТЗПереченьВетСвВа)
	//ВыбТовар.Сбросить();
	
	
	//Пока ВыбТовар.Следующий() Цикл
	//	СтрокаТовар=ВыбТовар.Выбрать();
	ФлЗаморозка=?(Найти(нрег(СсылкаНаДокумент.Склад.Наименование),"мороз")=0,Ложь,Истина);
	ТабДок	= Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	Макет	= Документы.РасходныйОрдерСклад.ПолучитьМакет("ВетСвидетельствоФорма4_Оборот");
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал	= Макет.ПолучитьОбласть("Подвал");
	ОбластьПустСтрока	= Макет.ПолучитьОбласть("ПустСтрока");
	Счетчик			= 0;
	ТоварСписок		= "";
	ТоварКоличество	= "";
	ТоварВыработан	= "";
	ДатыПроизводста 	= "";
	Если КолвоПоз<=2 Тогда
		Возврат;				
	КонецЕсли;
	ТабДок.Вывести(ОбластьШапка);
	КолПустСтрок=26;
	//Пока СтрокаТовар.Следующий() Цикл
	Для каждого СтрПроиз Из ТЗСтрок Цикл
		
		КолКороб=0;
		Кол=0;
		ЕдИзм="";
		СпВетСвид=Новый СписокЗначений;
		СтранаПроис="";
		СпДП=Новый СписокЗначений;
        КолНомРод=Новый Соответствие;
		СпИсследования=Новый СписокЗначений;
		Для каждого Эл1 Из СтрПроиз.СпСтрок Цикл
		    СтрокаТовар=Эл1.Значение;
			КолКороб=КолКороб+?(СтрокаТовар.КолвоВКоробке = 0, 0, ?(Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)=0,1,Окр(СтрокаТовар.Количество / СтрокаТовар.КолвоВКоробке)));
			Кол=Кол+СтрокаТовар.Количество;
			
			ЕдИзм=СтрокаТовар.ЕдиницаИзмерения;
			
			ЕдКолИтог=?(КолНомРод.Получить(ЕдИзм)=Неопределено,0,КолНомРод.Получить(ЕдИзм));
			
			КолНомРод.Вставить(ЕдИзм,ЕдКолИтог+СтрокаТовар.Количество);
			
			
			Для каждого Стр Из ТЗОрдер Цикл
				Если СтрокаТовар.Номенклатура=Стр.Номенклатура И СтрокаТовар.Характеристика=Стр.Характеристика И ?(ФлЗаморозка,Истина,СтрокаТовар.ДатаПроизводства=Стр.ДатаПроизводства)Тогда                                                 
					МасСтрВет=ТЗПереченьВетСвВа.НайтиСтроки(Новый Структура("Приходник",Стр.Приходник));
					Для каждого СтрВет Из МасСтрВет Цикл
						Если ЗначениеЗаполнено(СтрВет.ДанныеВетСвидетельствСерия) Тогда
							ВетСвВо=""+СтрВет.ДанныеВетСвидетельствСерия+"№"+СтрВет.ДанныеВетСвидетельствНомер+" от "+Формат(СтрВет.ДанныеВетСвидетельствДата,"ДФ=dd.MM.yyyy");
							Если СпВетСвид.НайтиПоЗначению(ВетСвВо)=Неопределено Тогда
								СпВетСвид.Добавить(ВетСвВо);
							КонецЕсли; 
						КонецЕсли;
						Если ЗначениеЗаполнено(СокрЛП(СтрВет.ИнформацияОбИсследовании)) и СпИсследования.НайтиПоЗначению(СокрЛП(СтрВет.ИнформацияОбИсследовании))=Неопределено Тогда
							СпИсследования.Добавить(СокрЛП(СтрВет.ИнформацияОбИсследовании));
						КонецЕсли;
					КонецЦикла; 
					
					Если ФлЗаморозка Тогда
						ДатаПрЗаморозка=?(ЗначениеЗаполнено(Стр.ДатаПроизводства),Сред(Формат(Стр.ДатаПроизводства,"ДФ=dd.MM.yyyy"),4),Сред(Формат(Стр.Приходник.Дата,"ДФ=dd.MM.yyyy"),4));
						Если ЗначениеЗаполнено(ДатаПрЗаморозка) Тогда
							Если СпДП.НайтиПоЗначению(ДатаПрЗаморозка)=Неопределено Тогда
								СпДП.Добавить(ДатаПрЗаморозка);
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			
			//Для каждого Стр Из ТЗОрдер Цикл
			//	Если ЗначениеЗаполнено(Стр.Приходник.ДанныеВетСвидетельствСерия) И СтрокаТовар.Номенклатура=Стр.Номенклатура И СтрокаТовар.Характеристика=Стр.Характеристика Тогда                                                 
			//		ВетСвВо=""+Стр.Приходник.ДанныеВетСвидетельствСерия+"№"+Стр.Приходник.ДанныеВетСвидетельствНомер+" от "+Формат(Стр.Приходник.ДанныеВетСвидетельствДата,"ДФ=dd.MM.yyyy");
			//		Если СпВетСвид.НайтиПоЗначению(ВетСвВо)=Неопределено Тогда
			//			СпВетСвид.Добавить(ВетСвВо);
			//		КонецЕсли; 
			//	КонецЕсли; 
			//КонецЦикла;
			//
			
			Если Не ФлЗаморозка Тогда
				Если ЗначениеЗаполнено(СтрокаТовар.ДатаПроизводства) Тогда
					Если СпДП.НайтиПоЗначению(СтрокаТовар.ДатаПроизводства)=Неопределено Тогда
						СпДП.Добавить(СтрокаТовар.ДатаПроизводства);
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			СтранаПроис=СтрокаТовар.СтранаПроисхождения;
		КонецЦикла; 
		
		
		стрВетСвВа="";
		Если СпВетСвид.Количество()>0 Тогда
			Кол=СпВетСвид.Количество();
			стрВетСвВа=СпВетСвид[Кол-1].Значение;
			Если Найти(нрег(СсылкаНаДокумент.Склад.Наименование),"мороз")<>0 Тогда
				Если СпВетСвид.Количество()>1 Тогда
					стрВетСвВа=стрВетСвВа+" "+СпВетСвид[Кол-2].Значение;
				КонецЕсли;
				Если СпВетСвид.Количество()>2 Тогда
					стрВетСвВа=стрВетСвВа+" "+СпВетСвид[Кол-3].Значение;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		ОбластьСтрока.Параметры.Наименование=СтрПроиз.НоменклатураРодитель;
		ИтогКолСтр="";
		Для каждого ЭлЕд Из КолНомРод Цикл
		    ИтогКолСтр=ИтогКолСтр+" "+ЭлЕд.Значение+" "+Строка(ЭлЕд.Ключ);
		КонецЦикла; 
		ОбластьСтрока.Параметры.МестВес=""+КолКороб+" мест/ "+ИтогКолСтр;
		ОбластьСтрока.Параметры.ВетДокумент=стрВетСвВа;
		ОбластьСтрока.Параметры.Производитель=""+СтранаПроис+" "+СтрПроиз.Производитель.Наименование+" "+СтрПроиз.АдресПроизводителя;
		
		СтрИсследования="";
		Для каждого ЭлИсл Из СпИсследования Цикл
			СтрИсследования=СтрИсследования+" "+ЭлИсл.Значение;	
		КонецЦикла;
		ОбластьСтрока.Параметры.Исследования	= СтрИсследования;
		//ТекДП="";
		//Для каждого Эл Из СпДП Цикл
		//	ТекДП=ТекДП+" "+Формат(Эл.Значение,"ДФ=dd.MM.yyyy");
		//КонецЦикла;
		
		ТекДП="";
		Если ФлЗаморозка и СпДП.Количество()>1 Тогда
			ТекДП=ТекДП+" "+Формат(СпДП[0].Значение,"ДФ=dd.MM.yy")+"-"+Формат(СпДП[СпДП.Количество()-1].Значение,"ДФ=dd.MM.yy");
		Иначе	
			Для каждого Эл1 Из СпДП Цикл
				ТекДП=ТекДП+" "+Формат(Эл1.Значение,"ДФ=dd.MM.yy");
			КонецЦикла; 
		КонецЕсли; 
		
		ОбластьСтрока.Параметры.ДатаВыработки	= ТекДП;
		ТабДок.Присоединить(ОбластьСтрока);
		КолПустСтрок=КолПустСтрок-1;
		//ТоварКоличество	=  ТоварКоличество+" "+Строка(Счетчик)+") "+СтрокаТовар.Номенклатура+" - "+КолКороб+" / "+СтрокаТовар.Количество+" "+СтрокаТовар.ЕдиницаИзмерения+" "+?(ЗначениеЗаполнено(СтрокаТовар.ДатаПроизводства)," выработан ","")+Формат(СтрокаТовар.ДатаПроизводства,"ДФ=dd.MM.yyyy")+?(СпВетСвид.Количество()>0," вет. св-ва ","")+стрВетСвВа;
	КонецЦикла;
	//ОбластьПодвал.Параметры.Ветврач=Шапка.ВетеринарныйВрач;			 
	ТабДок.Присоединить(ОбластьПодвал);
	Для Сч=1 По КолПустСтрок Цикл
		ТабДок.Присоединить(ОбластьПустСтрока);
	КонецЦикла;
	Обл=ТабДок.ПолучитьОбласть(,1,,ТабДок.ШиринаТаблицы-КолПустСтрок);
	ТабДок.Присоединить(Обл); 
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСлева 				= 15;		
	ТабДок.ОтображатьСетку			= Ложь;
	ТабДок.Защита					= Ложь;
	ТабДок.ТолькоПросмотр			= Истина;
	ТабДок.ОтображатьЗаголовки		= Ложь;
	//ТабДок.РазмерКолонтитулаСнизу	= 0;
	//ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 				= 5;
	ТабДок.ПолеСнизу 				= 0;
	ТабДок.ПолеСправа 				= 5;
	//ТабДок.АвтоМасштаб				= Истина;
	Обл=ТабДок.ПолучитьОбласть(1,1,ТабДок.ВысотаТаблицы,ТабДок.ШиринаТаблицы);
	ТабДокГлав.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокГлав.Вывести(Обл);
	//Обл.ШиринаКолонки=Обл.ШиринаКолонки*2;
	//КонецЦикла; 
КонецПроцедуры //ПечатьВетСвидетельство4_Оборотка(СсылкаНаДокумент)

Процедура ПечатьВетСвидетельство(СсылкаНаДокумент,СтрукПечФорм) Экспорт 
	
	//СтруктЕдиница = ?(ТипЗнч(СсылкаНаДокумент.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы"), СсылкаНаДокумент.Получатель, СсылкаНаДокумент.Склад.Владелец);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
		|			ТОГДА Выразить(РасходныйОрдерСклад.Получатель как Справочник.СтруктурныеЕдиницы).Регион
		|		ИНАЧЕ РасходныйОрдерСклад.Склад.Владелец.Регион
		|	КОНЕЦ КАК Регион,
		|	РасходныйОрдерСклад.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Мас2=Новый Массив;
	Мас4=Новый Массив;
	
	Мас2Итог=Новый Массив;
	Мас4Итог=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВРег(СокрЛП(ВыборкаДетальныеЗаписи.Регион)) = "МОСКВА" Тогда
			Мас4.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
		Иначе
			Мас2.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого Док Из СсылкаНаДокумент Цикл
		Если Мас4.Найти(Док)<>Неопределено Тогда
			Мас4Итог.Добавить(Док);
		КонецЕсли; 	
		Если Мас2.Найти(Док)<>Неопределено Тогда
			Мас2Итог.Добавить(Док);
		КонецЕсли; 	
	
	КонецЦикла; 
	
	
	
	
	Если Мас4Итог.Количество() Тогда
		МассивПечФорм = Новый Массив;
		ПечатьВетСвидетельство4(Мас4Итог, МассивПечФорм);
		Если СтрукПечФорм.Свойство("Форма4") Тогда
			Мас = СтрукПечФорм.Форма4;
			Для каждого Эл Из МассивПечФорм Цикл
				Мас.Добавить(Эл);
			КонецЦикла;
			СтрукПечФорм.Вставить("Форма4", Мас);
		Иначе	
			СтрукПечФорм.Вставить("Форма4", МассивПечФорм);
		КонецЕсли; 
		
		МассивПечФорм = Новый Массив;
		ПечатьВетСвидетельство3(Мас4Итог, МассивПечФорм);
		Если СтрукПечФорм.Свойство("Форма3") Тогда
			Мас = СтрукПечФорм.Форма3;
			Для каждого Эл Из МассивПечФорм Цикл
				Мас.Добавить(Эл);
			КонецЦикла;
			СтрукПечФорм.Вставить("Форма3", Мас);
		Иначе	
			СтрукПечФорм.Вставить("Форма3", МассивПечФорм);
		КонецЕсли; 
	КонецЕсли; 
	Если Мас2Итог.Количество() Тогда
		МассивПечФорм = Новый Массив;
		ПечатьВетСвидетельство2(Мас2Итог, МассивПечФорм);
		Если СтрукПечФорм.Свойство("Форма2") Тогда
			Мас = СтрукПечФорм.Форма2;
			Для каждого Эл Из МассивПечФорм Цикл
				Мас.Добавить(Эл);
			КонецЦикла;
			СтрукПечФорм.Вставить("Форма2", Мас);
		Иначе	
			СтрукПечФорм.Вставить("Форма2", МассивПечФорм);
		КонецЕсли;
		
		МассивПечФорм=Новый Массив;
		ПечатьВетСвидетельство3(Мас2Итог, МассивПечФорм);
		Если СтрукПечФорм.Свойство("Форма3") Тогда
			Мас = СтрукПечФорм.Форма3;
			Для каждого Эл Из МассивПечФорм Цикл
				Мас.Добавить(Эл);
			КонецЦикла;
			СтрукПечФорм.Вставить("Форма3", Мас);
		Иначе	
			СтрукПечФорм.Вставить("Форма3", МассивПечФорм);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
//АК_БЕЛН_10.03.2016--

#Область KOPA_ИП_00017581

//+++АК KOPA 2017.12.26 [ИП-00017581]
Функция ПолучитьЗапросПреложенияКНакладной(Ссылка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерСклад.Ссылка,
	|	РасходныйОрдерСклад.Номер,
	|	РасходныйОрдерСклад.Дата,
	|	РасходныйОрдерСклад.ВидОперации,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Автор,
	|	РасходныйОрдерСклад.Получатель,
	|	РасходныйОрдерСклад.Комментарий,
	|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны, """") КАК ОтгружаетсяИзЗоны
	|ПОМЕСТИТЬ тДокумент
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	РасходныйОрдерСкладТовары.Количество,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.НомерСтроки,
	|	тДокумент.Номер,
	|	тДокумент.Дата,
	|	тДокумент.ВидОперации,
	|	тДокумент.Склад,
	|	тДокумент.Автор,
	|	тДокумент.Получатель,
	|	тДокумент.Комментарий,
	|	тДокумент.СтруктурнаяЕдиница,
	|	тДокумент.ОтгружаетсяИзЗоны
	|ПОМЕСТИТЬ тТовары
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тДокумент КАК тДокумент
	|		ПО РасходныйОрдерСкладТовары.Ссылка = тДокумент.Ссылка
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика,
	|	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	тТовары КАК тТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
	|		ПО тТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
	|			И тТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
	|			И (КОНЕЦПЕРИОДА(тТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
	|			И (СертификатыНаПродукциюСрезПоследних.Удален = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СертификатыНаПродукциюСрезПоследних.Номенклатура,
	|	СертификатыНаПродукциюСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыНаПродукцию.Номенклатура,
	|	СертификатыНаПродукцию.Характеристика,
	|	СертификатыНаПродукцию.РегистрационныйНомер,
	|	СертификатыНаПродукцию.ДействуетДо
	|ПОМЕСТИТЬ тСертификаты
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	|		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
	|			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
	|			И вт.Период = СертификатыНаПродукцию.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВетСвидетельстваПоступлений.Номенклатура,
	|	ВетСвидетельстваПоступлений.ДокПоступления,
	|	ВетСвидетельстваПоступлений.UUID_ВСД КАК UUID_ВСД
	|ПОМЕСТИТЬ тВетСведетельства
	|ИЗ
	|	тТовары КАК тТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО тТовары.Номенклатура = ВетСвидетельстваПоступлений.Номенклатура
	|			И тТовары.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тТовары.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(тТовары.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(тТовары.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(тТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	тТовары.Количество,
	|	тТовары.ДатаПроизводства,
	|	тТовары.НомерСтроки,
	|	ЕСТЬNULL(тСертификаты.РегистрационныйНомер, """") КАК Сертификат,
	|	ЕСТЬNULL(тВетСведетельства.UUID_ВСД, """") КАК QRКод,
	|	тСертификаты.ДействуетДо,
	|	ВЫБОР
	|		КОГДА КоличествоВКоробкеСрезПоследних.Количество ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ тТовары.Количество / КоличествоВКоробкеСрезПоследних.Количество
	|	КОНЕЦ КАК КолУпак,
	|	тТовары.ВидОперации,
	|	ПРЕДСТАВЛЕНИЕ(тТовары.Склад),
	|	ПРЕДСТАВЛЕНИЕ(тТовары.Автор) КАК Автор,
	|	ПРЕДСТАВЛЕНИЕ(тТовары.Получатель) КАК Получатель,
	|	тТовары.Комментарий,
	|	тТовары.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны,
	|	тТовары.Номер,
	|	тТовары.Дата,
	|	тТовары.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	тТовары.Склад
	|ПОМЕСТИТЬ тИтог
	|ИЗ
	|	тТовары КАК тТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ тСертификаты КАК тСертификаты
	|		ПО тТовары.Характеристика = тСертификаты.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ тВетСведетельства КАК тВетСведетельства
	|		ПО тТовары.Ссылка = тВетСведетельства.ДокПоступления
	|			И тТовары.Номенклатура = тВетСведетельства.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|				&ДатаДок,
	|				(Характеристика, СтруктурнаяЕдиница) В
	|					(ВЫБРАТЬ
	|						тТовары.Характеристика,
	|						тТовары.СтруктурнаяЕдиница
	|					ИЗ
	|						тТовары КАК тТовары)) КАК КоличествоВКоробкеСрезПоследних
	|		ПО тТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И тТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тИтог.Ссылка КАК Ссылка,
	|	тИтог.Номенклатура КАК Номенклатура,
	|	тИтог.Характеристика,
	|	тИтог.ЕдиницаИзмерения,
	|	тИтог.Количество,
	|	тИтог.ДатаПроизводства,
	|	тИтог.НомерСтроки,
	|	тИтог.Сертификат,
	|	тИтог.QRКод,
	|	тИтог.ДействуетДо,
	|	тИтог.КолУпак,
	|	тИтог.ВидОперации КАК ВидОперации,
	|	тИтог.СкладПредставление КАК СкладПредставление,
	|	тИтог.Автор КАК Автор,
	|	тИтог.Комментарий КАК Комментарий,
	|	тИтог.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны,
	|	тИтог.Номер КАК Номер,
	|	тИтог.Дата КАК Дата,
	|	тИтог.СтруктурнаяЕдиница,
	|	тИтог.Склад КАК Склад,
	|	тИтог.Получатель КАК Получатель
	|ИЗ
	|	тИтог КАК тИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Номенклатура
	|ИТОГИ
	|	МАКСИМУМ(ВидОперации),
	|	МАКСИМУМ(СкладПредставление),
	|	МАКСИМУМ(Автор),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(ОтгружаетсяИзЗоны),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(Получатель)
	|ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("ДатаДок", КонецДня(Ссылка.Дата));
	
	Возврат Запрос;
КонецФункции//---АК KOPA

//+++АК KOPA 2017.12.26 [ИП-00017581]
Функция ПечатьПреложениеКНакладной_Пакет(ПараметрыКоманды,Пакетная=Ложь) Экспорт 
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ПриходныйОрдер_Печать";
		
	Если ТипЗнч(ПараметрыКоманды) = Тип("Массив") Тогда
		Массив = ПараметрыКоманды;			
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(ПараметрыКоманды);
	КонецЕсли;
	 //+++АК BELN 2018.07.17 ИП-00019201      
	 Если Пакетная Тогда
		 Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Лист_QR_коды");
		 
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	РасходныйОрдерСклад.Дата
		 |ИЗ
		 |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		 |ГДЕ
		 |	РасходныйОрдерСклад.Ссылка В(&Ссылка)";
		 
		 Запрос.УстановитьПараметр("Ссылка", Массив);
		 
		 РезультатЗапроса = Запрос.Выполнить();
		 
		 Шапка = РезультатЗапроса.Выбрать();
		 ДатаДок=Дата(1,1,1);
		 
		 Пока Шапка.Следующий() Цикл
			 Если Шапка.Дата>ДатаДок Тогда
				 ДатаДок=Шапка.Дата;
			 КонецЕсли; 
		 КонецЦикла;
		 
		 
		 
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст =
		 "ВЫБРАТЬ
		 |	РасходныйОрдерСклад.Ссылка,
		 |	РасходныйОрдерСклад.Номер,
		 |	РасходныйОрдерСклад.Дата,
		 |	РасходныйОрдерСклад.ВидОперации,
		 |	РасходныйОрдерСклад.Склад,
		 |	РасходныйОрдерСклад.Автор,
		 |	РасходныйОрдерСклад.Получатель,
		 |	РасходныйОрдерСклад.Комментарий,
		 |	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
		 |	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны, """") КАК ОтгружаетсяИзЗоны
		 |ПОМЕСТИТЬ тДокумент
		 |ИЗ
		 |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		 |		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
		 |ГДЕ
		 |	РасходныйОрдерСклад.Ссылка В(&Ссылка)
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	РасходныйОрдерСкладТовары.Ссылка,
		 |	РасходныйОрдерСкладТовары.Номенклатура,
		 |	РасходныйОрдерСкладТовары.Характеристика,
		 |	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
		 |	РасходныйОрдерСкладТовары.Количество,
		 |	РасходныйОрдерСкладТовары.ДатаПроизводства,
		 |	РасходныйОрдерСкладТовары.НомерСтроки,
		 |	тДокумент.Номер,
		 |	тДокумент.Дата,
		 |	тДокумент.ВидОперации,
		 |	тДокумент.Склад,
		 |	тДокумент.Автор,
		 |	тДокумент.Получатель,
		 |	тДокумент.Комментарий,
		 |	тДокумент.СтруктурнаяЕдиница,
		 |	тДокумент.ОтгружаетсяИзЗоны
		 |ПОМЕСТИТЬ тТовары
		 |ИЗ
		 |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тДокумент КАК тДокумент
		 |		ПО РасходныйОрдерСкладТовары.Ссылка = тДокумент.Ссылка
		 |ГДЕ
		 |	РасходныйОрдерСкладТовары.Ссылка В(&Ссылка)
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	СертификатыНаПродукциюСрезПоследних.Номенклатура,
		 |	СертификатыНаПродукциюСрезПоследних.Характеристика,
		 |	МАКСИМУМ(СертификатыНаПродукциюСрезПоследних.Период) КАК Период
		 |ПОМЕСТИТЬ вт
		 |ИЗ
		 |	тТовары КАК тТовары
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукциюСрезПоследних
		 |		ПО тТовары.Номенклатура = СертификатыНаПродукциюСрезПоследних.Номенклатура
		 |			И тТовары.Характеристика = СертификатыНаПродукциюСрезПоследних.Характеристика
		 |			И (КОНЕЦПЕРИОДА(тТовары.Ссылка.Дата, ДЕНЬ) >= СертификатыНаПродукциюСрезПоследних.Период)
		 |			И (СертификатыНаПродукциюСрезПоследних.Удален = ЛОЖЬ)
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	СертификатыНаПродукциюСрезПоследних.Номенклатура,
		 |	СертификатыНаПродукциюСрезПоследних.Характеристика
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	СертификатыНаПродукцию.Номенклатура,
		 |	СертификатыНаПродукцию.Характеристика,
		 |	СертификатыНаПродукцию.РегистрационныйНомер,
		 |	СертификатыНаПродукцию.ДействуетДо
		 |ПОМЕСТИТЬ тСертификаты
		 |ИЗ
		 |	вт КАК вт
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
		 |		ПО вт.Номенклатура = СертификатыНаПродукцию.Номенклатура
		 |			И вт.Характеристика = СертификатыНаПродукцию.Характеристика
		 |			И вт.Период = СертификатыНаПродукцию.Период
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	ВетСвидетельстваПоступлений.Номенклатура,
		 |	ВетСвидетельстваПоступлений.ДокПоступления,
		 |	ВетСвидетельстваПоступлений.UUID_ВСД КАК UUID_ВСД
		 |ПОМЕСТИТЬ тВетСведетельства
		 |ИЗ
		 |	тТовары КАК тТовары
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
		 |		ПО тТовары.Номенклатура = ВетСвидетельстваПоступлений.Номенклатура
		 |			И тТовары.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	тТовары.Ссылка,
		 |	ПРЕДСТАВЛЕНИЕ(тТовары.Номенклатура) КАК Номенклатура,
		 |	ПРЕДСТАВЛЕНИЕ(тТовары.Характеристика) КАК Характеристика,
		 |	ПРЕДСТАВЛЕНИЕ(тТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		 |	тТовары.Количество,
		 |	тТовары.ДатаПроизводства,
		 |	тТовары.НомерСтроки,
		 |	ЕСТЬNULL(тСертификаты.РегистрационныйНомер, """") КАК Сертификат,
		 |	ЕСТЬNULL(тВетСведетельства.UUID_ВСД, """") КАК QRКод,
		 |	тСертификаты.ДействуетДо,
		 |	ВЫБОР
		 |		КОГДА КоличествоВКоробкеСрезПоследних.Количество ЕСТЬ NULL
		 |			ТОГДА 0
		 |		ИНАЧЕ тТовары.Количество / КоличествоВКоробкеСрезПоследних.Количество
		 |	КОНЕЦ КАК КолУпак,
		 |	тТовары.ВидОперации,
		 |	ПРЕДСТАВЛЕНИЕ(тТовары.Склад),
		 |	ПРЕДСТАВЛЕНИЕ(тТовары.Автор) КАК Автор,
		 |	ПРЕДСТАВЛЕНИЕ(тТовары.Получатель) КАК Получатель,
		 |	тТовары.Комментарий,
		 |	тТовары.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны,
		 |	тТовары.Номер,
		 |	тТовары.Дата,
		 |	тТовары.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		 |	тТовары.Склад
		 |ПОМЕСТИТЬ тИтог
		 |ИЗ
		 |	тТовары КАК тТовары
		 |		ЛЕВОЕ СОЕДИНЕНИЕ тСертификаты КАК тСертификаты
		 |		ПО тТовары.Характеристика = тСертификаты.Характеристика
		 |		ЛЕВОЕ СОЕДИНЕНИЕ тВетСведетельства КАК тВетСведетельства
		 |		ПО тТовары.Ссылка = тВетСведетельства.ДокПоступления
		 |			И тТовары.Номенклатура = тВетСведетельства.Номенклатура
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(
		 |				&ДатаДок,
		 |				(Характеристика, СтруктурнаяЕдиница) В
		 |					(ВЫБРАТЬ
		 |						тТовары.Характеристика,
		 |						тТовары.СтруктурнаяЕдиница
		 |					ИЗ
		 |						тТовары КАК тТовары)) КАК КоличествоВКоробкеСрезПоследних
		 |		ПО тТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
		 |			И тТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	тИтог.Ссылка КАК Ссылка,
		 |	тИтог.Номенклатура КАК Номенклатура,
		 |	тИтог.Характеристика,
		 |	тИтог.ЕдиницаИзмерения,
		 |	тИтог.Количество,
		 |	тИтог.ДатаПроизводства,
		 |	тИтог.НомерСтроки,
		 |	тИтог.Сертификат,
		 |	тИтог.QRКод,
		 |	тИтог.ДействуетДо,
		 |	тИтог.КолУпак,
		 |	тИтог.ВидОперации КАК ВидОперации,
		 |	тИтог.СкладПредставление КАК СкладПредставление,
		 |	тИтог.Автор КАК Автор,
		 |	тИтог.Комментарий КАК Комментарий,
		 |	тИтог.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны,
		 |	тИтог.Номер КАК Номер,
		 |	тИтог.Дата КАК Дата,
		 |	тИтог.СтруктурнаяЕдиница,
		 |	тИтог.Склад КАК Склад,
		 |	тИтог.Получатель КАК Получатель
		 |ИЗ
		 |	тИтог КАК тИтог
		 |
		 |УПОРЯДОЧИТЬ ПО
		 |	Номенклатура
		 |ИТОГИ
		 |	МАКСИМУМ(ВидОперации),
		 |	МАКСИМУМ(СкладПредставление),
		 |	МАКСИМУМ(Автор),
		 |	МАКСИМУМ(Комментарий),
		 |	МАКСИМУМ(ОтгружаетсяИзЗоны),
		 |	МАКСИМУМ(Номер),
		 |	МАКСИМУМ(Дата),
		 |	МАКСИМУМ(Склад),
		 |	МАКСИМУМ(Получатель)
		 |ПО
		 |	Ссылка";
		 
		 Запрос.Параметры.Вставить("Ссылка", Массив);
		 Запрос.Параметры.Вставить("ДатаДок", КонецДня(ДатаДок));
		 
		 Рез=Запрос.Выполнить();
		 
		 Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 
		 ТЗНом=Рез.Выгрузить();
		 ТЗНом.Очистить();
		 
		 Соот=Новый Соответствие;
		 
		 Пока Выборка.Следующий() Цикл
			 ТабДок = Новый ТабличныйДокумент;
			 ТабДок.КлючПараметровПечати = "ПараметрыПечати_ПриходныйОрдер_Печать";
			 
			 
			 
			 
			 ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
			 ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
			 ОбластьПоставщик 	= Макет.ПолучитьОбласть("Поставщик");
			 ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			 ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
			 ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
			 ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");	
			 
			 ОбластьЗаголовок.Параметры.Заполнить(Выборка);
			 ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
			 
			 //+++АК sole 2018.09.07 ИП-00019639
			 //ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок, Выборка.Ссылка);
			 ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьЗаголовок, Выборка.Ссылка);
			 //---АК sole 2018.09.07 ИП-00019639
			 
			 ТабДок.Вывести(ОбластьЗаголовок);
			 
			 ОбластьСклад.Параметры.Заполнить(Выборка);
			 
			 Если ЗначениеЗаполнено(Выборка.ОтгружаетсяИзЗоны) И Выборка.ОтгружаетсяИзЗоны <> Выборка.Склад Тогда
				 ОбластьСклад.Параметры.Склад = ОбластьСклад.Параметры.СкладПредставление + " (через " + СокрЛП(Выборка.ОтгружаетсяИзЗоны) + ")";
			 КонецЕсли;	
			 
			 ТабДок.Вывести(ОбластьСклад);
			 
			 ОбластьПоставщик.Параметры.Заполнить(Выборка);
			 ТабДок.Вывести(ОбластьПоставщик);	
			 ТабДок.Вывести(ОбластьШапкаТаблицы);
			 ВыборкаДЗ = Выборка.Выбрать();
			 
			 
			 ТЗНом.Очистить();
			 Пока ВыборкаДЗ.Следующий() Цикл
			 	ЗаполнитьЗначенияСвойств(ТЗНом.Добавить(),ВыборкаДЗ);
			 КонецЦикла;

			 //ТЗДЗ = Выборка.Выгрузить();
			 ТЗНом.Сортировать("Номенклатура");
			 Для каждого ВыборкаДЗ из ТЗНом Цикл
			 //Пока ВыборкаДЗ.Следующий() Цикл
				 ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
				 
				 ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ВыборкаДЗ);
				 
				 Если ЗначениеЗаполнено(ВыборкаДЗ.Сертификат) Тогда
					 ДатаДо = ?(ВыборкаДЗ.ДействуетДо <> '39990101', " до " + Формат(ВыборкаДЗ.ДействуетДо, "ДФ=dd.MM.yyyy"), ""); 
					 ОбластьСтрока.Параметры.Сертификат = ВыборкаДЗ.Сертификат + ДатаДо;		
				 КонецЕсли;
				 
				 МояОбласть = ОбластьСтрока.НайтиТекст("*QRКод*");
				 МояОбласть.Текст = "";
				 
				 //++ luza 11.07.2018 ИП-00019221      
				 //ВставитьQRКод(МояОбласть, ВыборкаДЗ.QRКод, ВыборкаДЗ.НомерСтроки);
				 Если ЗначениеЗаполнено(ВыборкаДЗ.QRКод) = Истина Тогда
					 QRКод = "http://mercury.vetrf.ru/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid=" + ВыборкаДЗ.QRКод;
					 ВставитьQRКод(МояОбласть, QRКод, ВыборкаДЗ.НомерСтроки);
				 КонецЕсли;	
				 //-- luza 11.07.2018 ИП-00019221  		
				 
				 
				 ТабДок.Вывести(ОбластьСтрока);
			 КонецЦикла;
			 
			 ТабДок.Вывести(ОбластьПодвал);
			 
			 ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Выборка.Автор;
			 ТабДок.Вывести(ОбластьВремяПечати);
			 Соот.Вставить(Выборка.ссылка,ТабДок);
		 КонецЦикла; 
		 Возврат Соот;
	 Иначе	 
		 //---АК BELN 2018.07.17 
		ВставлятьРазделительСтраниц = Ложь;
		
		Для каждого Ссылка Из Массив Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
			
		    ПечатьПреложениеКНакладной(Ссылка, ТабДок);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
		Возврат ТабДок;
	
	КонецЕсли;

КонецФункции//---АК KOPA

//+++АК KOPA 2017.12.26 [ИП-00017581]
Функция ПечатьПреложениеКНакладной(Ссылка, ТабДок) Экспорт 	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Лист_QR_коды");	
	
	Запрос = ПолучитьЗапросПреложенияКНакладной(Ссылка);
	//+++АК BELN 2018.07.24 
	 Рез=Запрос.Выполнить();
	 
	 Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	 ТЗНом=Рез.Выгрузить();
	 ТЗНом.Очистить();
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	//---АК BELN 2018.07.24 
	
	Выборка.Следующий();
	
	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
	ОбластьПоставщик 	= Макет.ПолучитьОбласть("Поставщик");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");	
	
	ОбластьЗаголовок.Параметры.Заполнить(Выборка);
	ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
	
	//+++АК sole 2018.09.07 ИП-00019639
	//ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок, Ссылка);
	ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьЗаголовок, Ссылка);
	//---АК sole 2018.09.07 ИП-00019639
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьСклад.Параметры.Заполнить(Выборка);
	
	Если ЗначениеЗаполнено(Выборка.ОтгружаетсяИзЗоны) И Выборка.ОтгружаетсяИзЗоны <> Выборка.Склад Тогда
		ОбластьСклад.Параметры.Склад = ОбластьСклад.Параметры.СкладПредставление + " (через " + СокрЛП(Выборка.ОтгружаетсяИзЗоны) + ")";
	КонецЕсли;	
	
	ТабДок.Вывести(ОбластьСклад);
	
	ОбластьПоставщик.Параметры.Заполнить(Выборка);
	ТабДок.Вывести(ОбластьПоставщик);	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ВыборкаДЗ = Выборка.Выбрать();
	//+++АК BELN 2018.07.24 
	ТЗНом.Очистить();
	Пока ВыборкаДЗ.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТЗНом.Добавить(),ВыборкаДЗ);
	КонецЦикла;
	
	//ТЗДЗ = Выборка.Выгрузить();
	ТЗНом.Сортировать("Номенклатура");
	
	//---АК BELN 2018.07.24 
	Для каждого ВыборкаДЗ из ТЗНом Цикл
		ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ВыборкаДЗ);
		
		Если ЗначениеЗаполнено(ВыборкаДЗ.Сертификат) Тогда
			ДатаДо = ?(ВыборкаДЗ.ДействуетДо <> '39990101', " до " + Формат(ВыборкаДЗ.ДействуетДо, "ДФ=dd.MM.yyyy"), ""); 
			ОбластьСтрока.Параметры.Сертификат = ВыборкаДЗ.Сертификат + ДатаДо;		
		КонецЕсли;
		
		МояОбласть = ОбластьСтрока.НайтиТекст("*QRКод*");
		МояОбласть.Текст = "";
		
		//++ luza 11.07.2018 ИП-00019221      
		//ВставитьQRКод(МояОбласть, ВыборкаДЗ.QRКод, ВыборкаДЗ.НомерСтроки);
		Если ЗначениеЗаполнено(ВыборкаДЗ.QRКод) = Истина Тогда
			QRКод = "http://mercury.vetrf.ru/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid=" + ВыборкаДЗ.QRКод;
			ВставитьQRКод(МояОбласть, QRКод, ВыборкаДЗ.НомерСтроки);
		КонецЕсли;	
		//-- luza 11.07.2018 ИП-00019221  		
		
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвал);
	
	ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + Выборка.Автор;
	ТабДок.Вывести(ОбластьВремяПечати);
КонецФункции//---АК KOPA

//+++АК KOPA 2017.12.26 [ИП-00017581]
Процедура ВставитьQRКод(Область,Знач Код, Индекс)
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Код, 0, 190);
	
	Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда	
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		Область.Картинка = КартинкаQRКода;
	КонецЕсли;
КонецПроцедуры//---АК KOPA
	
#КонецОбласти

//+++АК LATV 2018.10.23 ИП-00019771.02
Функция ПечатьШКПаллеты(Расходники, ПоНомеруТТ = Ложь, Пакетная = Ложь) Экспорт

	ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Паллета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	ВЫРАЗИТЬ(РасходныйОрдерСклад.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК НомерТочки
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	СоставПаллеты.Ссылка КАК СсылкаПал,
		|	РасходныйОрдерСклад.НомерТочки КАК НомерТочки
		|ИЗ
		|	вт КАК РасходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО (СоставПаллеты.РасходныйОрдер = РасходныйОрдерСклад.Ссылка)
		|";
	
	Если ПоНомеруТТ Тогда
		Запрос.Текст = Запрос.Текст + "
			|Упорядочить по НомерТочки";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Расходники);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СсылкаПал) Тогда
			ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
			ОбъектПаллеты.РасходныйОрдер=ВыборкаДетальныеЗаписи.Ссылка;
			Попытка
				ОбъектПаллеты.Записать();
			Исключение
				Сообщить("Повторите попытку печати");
				Возврат Новый ТабличныйДокумент;
			КонецПопытки; 
		КонецЕсли; 
	КонецЦикла;
	
	КоличествоКоробокПоОрдерам = ПосчитатьКоличесвоКоробок(Расходники);
	// Запись количества паллет
	ЗаполнитьКоличествоПаллетВРасходныхОрдерахЕслиНеЗаполнено(Расходники);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование,
		|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет,
		|	МаршрутныйЛистРасходныеОрдера.Ссылка.СтруктурноеПодразделение
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
		|ГДЕ
		|	МаршрутныйЛистРасходныеОрдера.Документ В(&Документ)
		|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистРасходныеОрдера.Маршрут КАК Маршрут,
		|	МаршрутныйЛистРасходныеОрдера.Документ,
		|	МаршрутныйЛистРасходныеОрдера.МаршрутНаименование,
		|	МаршрутныйЛистРасходныеОрдера.МаршрутПолноеНаименование,
		|	СоставПаллеты.Ссылка КАК ссылка1,
		|	СоставПаллеты.ИД,
		|	СоставПаллеты.РасходныйОрдер КАК СсылкаРО,
		|	СоставПаллеты.РасходныйОрдер.Получатель КАК Получатель,
		|	СоставПаллеты.РасходныйОрдер.Склад КАК Склад,
		|	МаршрутныйЛистРасходныеОрдера.ДокументКоличествоПаллет КАК КоличествоПаллет,
		|	АК_СоответствиеВоротМаршрутамСрезПоследних.Ворота
		|ИЗ
		|	вт КАК МаршрутныйЛистРасходныеОрдера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставПаллеты КАК СоставПаллеты
		|		ПО (СоставПаллеты.РасходныйОрдер = МаршрутныйЛистРасходныеОрдера.Документ)
		|			И (СоставПаллеты.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеВоротМаршрутам.СрезПоследних КАК АК_СоответствиеВоротМаршрутамСрезПоследних
		|		ПО МаршрутныйЛистРасходныеОрдера.СтруктурноеПодразделение = АК_СоответствиеВоротМаршрутамСрезПоследних.СтруктурноеПодразделение
		|			И МаршрутныйЛистРасходныеОрдера.МаршрутНаименование = АК_СоответствиеВоротМаршрутамСрезПоследних.НомерМаршрута";
	
	Запрос.УстановитьПараметр("Документ", Расходники);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокИтог = Новый ТабличныйДокумент;
	ТабДокИтог.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДокИтог.РазмерКолонтитулаСнизу	= 0;
	ТабДокИтог.РазмерКолонтитулаСверху 	= 0;
	ТабДокИтог.ПолеСверху 	= 5;
	ТабДокИтог.ПолеСнизу 	= 5;
	ТабДокИтог.ПолеСлева 	= 5;
	ТабДокИтог.ПолеСправа 	= 5;
	ТабДокИтог.АвтоМасштаб	= Истина;
	ЭтоПервый = Истина;
	
	Соот = Новый Соответствие;
	ВыборкаДетальныеЗаписи.Сбросить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Пакетная Тогда
		
			ТабДокИтог = Новый ТабличныйДокумент;
			ТабДокИтог.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
			ТабДокИтог.РазмерКолонтитулаСнизу	= 0;
			ТабДокИтог.РазмерКолонтитулаСверху 	= 0;
			ТабДокИтог.ПолеСверху 	= 5;
			ТабДокИтог.ПолеСнизу 	= 5;
			ТабДокИтог.ПолеСлева 	= 5;
			ТабДокИтог.ПолеСправа 	= 5;
			ТабДокИтог.АвтоМасштаб	= Истина;
		
		КонецЕсли;
		
		Если Выборка.НайтиСледующий(Новый Структура("Документ",ВыборкаДетальныеЗаписи.Ссылка)) Тогда
			УчаствуетВМаршруте = Выборка.МаршрутНаименование + " " + Выборка.МаршрутПолноеНаименование;
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаполнитьТДПаллеты(ТабДокИтог,Выборка,КоличествоКоробокПоОрдерам);
		
		Если Пакетная Тогда
			Соот.Вставить(ВыборкаДетальныеЗаписи.Ссылка,ТабДокИтог);
		Иначе
			ТабДокИтог.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Выборка.Сбросить();
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Подготовлен) КАК ЗаданиеНаРазборкуПодготовлен,
		|	РасходныйОрдерСкладТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Ссылка В(&Ссылка)
		|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку <> ЗНАЧЕНИЕ(Документ.ЗаданиеНаРазборку.ПустаяСсылка)
		|	И РасходныйОрдерСкладТовары.ЗаданиеНаРазборку.Проведен
		|	И РасходныйОрдерСкладТовары.Ссылка.СборкаТерминаломЗакончена = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерСкладТовары.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Расходники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СбЗавершенаЗаполнить = Ложь;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЗаданиеНаРазборкуПодготовлен Тогда
			ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ДокОбъект.ОбменДанными.Загрузка=Истина;
			ДокОбъект.Сборщик=Справочники.ФизическиеЛица.НайтиПоКоду(?(ДокОбъект.Склад.Владелец=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"),"0001002104","0001002084"));
			ДокОбъект.СборкаТерминаломЗакончена = Истина;
			ДокОбъект.ДанныеСборкиНаМобильномУстройстве = Неопределено;
			ДокОбъект.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
			ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
			
			Мен=РегистрыСведений.СканированныеПаллеты.СоздатьМенеджерЗаписи();
			Мен.Период=ТекущаяДата();
			Мен.Ордер=ДокОбъект.Ссылка;
			Мен.Статус=Перечисления.СтатусПаллета.Собран;
			Мен.Записать();
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			Сообщить("По расходнику "+ВыборкаДетальныеЗаписи.Ссылка+" не установлен флажок СборкаТерминаломЗакончена, потому что не по всем заданиям выполнена сборка терминалом");
		КонецЕсли;
	КонецЦикла;
	
	Если Пакетная Тогда
		Возврат Соот;
	Иначе
		Возврат ТабДокИтог;
	КонецЕсли;

КонецФУнкции

//+++АК BELN 2018.11.28 ИП-00020565      
Процедура ЗаполнитьТДПаллеты(ТабДокИтог,Выборка,КоличествоКоробокПоОрдерам)
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("Паллета");
	Область = Макет.ПолучитьОбласть("Этикетка");
	ОбластьСтр = Макет.ПолучитьОбласть("Низ");
	ШтрихКод = "850" + Прав("000000000000" + Формат(Выборка.ИД, "ЧГ=0"), 12);
	
	УчаствуетВМаршруте = "";
	Область.Параметры.ТорговаяТочка = Выборка.Получатель;
	Область.Параметры.Склад = Выборка.Склад;
	
	Область.Параметры.Паллета = "ИД "+Выборка.ИД+" "+Строка(Выборка.СсылкаРО);
	
	Рисунок = Область.Рисунки["ШтрихКод"];
	
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Штрихкод, 0, 700);
	Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
	
	//+++АК BELN 2018.11.28 ИП-00020565      
	Рисунок = Область.Рисунки["ШК1"];
	Штрихкод1=ОбщегоНазначенияКлиентСервер.ПолучитьШтрихкодПоУИНу(Выборка.СсылкаРО);
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Штрихкод1, 0, 50);
	Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
	Область.Параметры.НомерПаллеты = Выборка.КоличествоПаллет;
	//---АК BELN 2018.11.28 

	
	Область.Параметры.ШК = ШтрихКод;
	//+++АК BELN 2018.11.28 ИП-00020565      
	Область.Параметры.МаршЛист = Выборка.МаршрутНаименование;
	
	Ворота=СокрЛП(СтрЗаменить(Строка(Выборка.Ворота),"Северный",""));
	
	Область.Параметры.Ворота = ?(Найти(Выборка.МаршрутНаименование,"ворота")=0 И ЗначениеЗаполнено(Ворота),
	"ворота "+Ворота,"");

	//---АК BELN 2018.11.28 
	
	КолКороб = КоличествоКоробокПоОрдерам.Получить(Выборка.СсылкаРО);
	Область.Параметры.Коробок = Строка(КолКороб);
	
	ТабДокИтог.Вывести(Область);

КонецПроцедуры
//---АК BELN 2018.11.28     

//+++АК LATV 2018.10.23 ИП-00019771.02
Процедура ЗаполнитьКоличествоПаллетВРасходныхОрдерахЕслиНеЗаполнено(Расходники)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерСклад.Ссылка,
		|	РасходныйОрдерСклад.Склад,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерСклад.КоличествоПаллет = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПаллеты,
		|	РасходныйОрдерСклад.ЭтикеткиНапечатаны
		|ИЗ
		|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
		|ГДЕ
		|	РасходныйОрдерСклад.Ссылка В(&Ссылка)
		|	И РасходныйОрдерСклад.ЭтикеткиНапечатаны < 2";
	
	Запрос.УстановитьПараметр("Ссылка", Расходники);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МестоХраненияКавказский = Справочники.Склады.НайтиПоКоду("000000295"); //Кавказский
	МестоХраненияМясо = Справочники.Склады.НайтиПоКоду("000000299"); //Мясо
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		//+++АК BELN 2018.11.12 ИП-00020008
		Если НЕ Выборка.ЕстьПаллеты И Выборка.ЭтикеткиНапечатаны=0 Тогда
		//---АК BELN 2018.11.12 
			КоличествоПаллет = ?(Выборка.Склад = МестоХраненияКавказский, 2, 1);
			РасходныйОрдер = Выборка.Ссылка.ПолучитьОбъект();
			РасходныйОрдер.КоличествоПаллет = КоличествоПаллет;
			РасходныйОрдер.ЭтикеткиНапечатаны = 2;
		//+++АК BELN 2018.11.12 ИП-00020008
		ИначеЕсли Выборка.ЭтикеткиНапечатаны=1 Тогда	
			РасходныйОрдер = Выборка.Ссылка.ПолучитьОбъект();
			РасходныйОрдер.КоличествоПаллет = РасходныйОрдер.КоличествоПаллет+1;
			РасходныйОрдер.ЭтикеткиНапечатаны = 2;
		Иначе 
			Продолжить;
		КонецЕсли; 
		//---АК BELN 2018.11.12 
		Попытка
			РасходныйОрдер.ОбменДанными.Загрузка = Истина;
			РасходныйОрдер.Записать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить количество паллет в документе %1 по причине: %2'")
				, Выборка.Ссылка, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры


//+++АК sole 2018.09.07 ИП-00019775
Функция ПосчитатьКоличесвоКоробок(Расходники)
	
	Перем Запрос;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ
|	МАКСИМУМ(РасходныйОрдерСклад.Дата) КАК ДатаСреза
|
|ИЗ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
|ГДЕ	
|		РасходныйОрдерСклад.Ссылка В (&Расходники)
|";
	Запрос.УстановитьПараметр("Расходники", Расходники);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаСреза = Выборка.ДатаСреза;
	Иначе
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Запрос.Текст =
"ВЫБРАТЬ
|	РасходныйОрдерСкладТовары.Ссылка КАК РасходныйОрдер,
|	РасходныйОрдерСкладТовары.Количество,
|	КоличествоВКоробкеСрезПоследних.Количество КАК КоличествоВКоробке
|	
|ИЗ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(&ДатаСреза) КАК КоличествоВКоробкеСрезПоследних ПО
|			КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница = РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец
|		И	КоличествоВКоробкеСрезПоследних.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура
|		И	КоличествоВКоробкеСрезПоследних.Характеристика = РасходныйОрдерСкладТовары.Характеристика
|
|ГДЕ 
|		РасходныйОрдерСкладТовары.Ссылка В (&Расходники)
|	И	ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0) <> 0
|
|УПОРЯДОЧИТЬ ПО РасходныйОрдерСкладТовары.Ссылка
|";
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	КоличествоКоробокПоОрдерам = Новый Соответствие();
	
	ПревРасходныйОрдер = Неопределено;
	КоличествоКоробокСумма = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПревРасходныйОрдер <> Выборка.РасходныйОрдер Тогда
			
			Если ЗначениеЗаполнено(ПревРасходныйОрдер)  Тогда
				КоличествоКоробокПоОрдерам.Вставить(ПревРасходныйОрдер, КоличествоКоробокСумма);
			КонецЕсли;
			
			КоличествоКоробокСумма = 0;
			ПревРасходныйОрдер = Выборка.РасходныйОрдер			
		КонецЕсли;
		
		Количество = Выборка.Количество;
		КоличествоВКоробке = Выборка.КоличествоВКоробке;
		
		КоличествоКоробок = Цел(Количество/КоличествоВКоробке);
		Остаток = Количество - КоличествоКоробок * КоличествоВКоробке;
		
		Если Остаток / КоличествоВКоробке >= 0.5 Тогда
			КоличествоКоробок = КоличествоКоробок + 1;
		КонецЕсли; 
		
		КоличествоКоробокСумма = КоличествоКоробокСумма + КоличествоКоробок;
		
	КонецЦикла;
	
	КоличествоКоробокПоОрдерам.Вставить(ПревРасходныйОрдер, КоличествоКоробокСумма);
		
	Возврат	КоличествоКоробокПоОрдерам;
	
КонецФункции

// } Печать ТОРГ-12 и создание пакета документов
////////////////////////////////////////////////////////

#Область ДоработкаПечатиВетСвидетельств

#Область _4

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_4_1(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО РасходныйОрдерСкладТовары.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|			И РасходныйОрдерСкладТовары.Номенклатура = ВетСвидетельстваПоступлений.Номенклатура
	|			И (ВетСвидетельстваПоступлений.UUID_ВСД <> """")
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&Ссылка)
	|	И ВетСвидетельстваПоступлений.ДокПоступления ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 1
	|		КОГДА втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 2
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 3
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 4
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет,
	|	втНоменклатура.Номенклатура,
	|	ВетеринарныеГруппыПереченьНоменклатуры.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарныеГруппы.ПереченьНоменклатуры КАК ВетеринарныеГруппыПереченьНоменклатуры
	|		ПО (НЕ ВетеринарныеГруппыПереченьНоменклатуры.Ссылка.ПометкаУдаления)
	|			И (втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	МИНИМУМ(втГруппы.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втГруппыМакс
	|ИЗ
	|	втГруппы КАК втГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа.НаименованиеПолное КАК Группа
	|ПОМЕСТИТЬ втВетГруппы
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыМакс КАК втГруппыМакс
	|		ПО втГруппы.Номенклатура = втГруппыМакс.Номенклатура
	|			И втГруппы.Приоритет = втГруппыМакс.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа,
	|	втГруппы.Группа.НаименованиеПолное";
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_4_2(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
	|	РасходныйОрдер.Получатель КАК ПолучательСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация.НаименованиеСокращенное
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	|	РасходныйОрдер.Склад.Владелец.Адрес КАК СкладВладелецАдрес,
	|	РасходныйОрдер.Склад.Владелец.Регион КАК СкладВладелецРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Регион КАК ПолучательСсылкаРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Район КАК ПолучательСсылкаРайон,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Город КАК ПолучательСсылкаГород,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК ПолучательСсылкаНомерТочки,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Адрес КАК ПолучательСсылкаАдрес,
	|	РасходныйОрдер.Склад.ТемпературныйРежимВерхняяГраница КАК ТемпературныйРежимВерхняяГраница,
	|	РасходныйОрдер.Склад.ТемпературныйРежимНижняяГраница КАК ТемпературныйРежимНижняяГраница,
	|	РасходныйОрдер.Склад,
	|	РасходныйОрдер.Склад.Наименование КАК СкладНаименование,
	|	РасходныйОрдер.Склад.Владелец.id_TT КАК id_tt,
	|	РасходныйОрдер.Автор.ФизЛицо КАК ФизЛицоОтправителя,
	|	РасходныйОрдер.Автор.ФизЛицо.Должность КАК ДолжностьОтправителя,
	|	Факсимиле.Ссылка КАК Факсимиле,
	|	Факсимиле.Подпись КАК Подпись,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Склад В (&МасСкл)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлЗаморозка,
	|	РасходныйОрдер.Ссылка,
	|	Факсимиле.ПометкаУдаления КАК ФаксимилеПометкаУдаления
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
	|		ПО РасходныйОрдер.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Факсимиле КАК Факсимиле
	|		ПО РасходныйОрдер.Автор.ФизЛицо = Факсимиле.ФизЛицо
	|ГДЕ
	|	РасходныйОрдер.Ссылка В(&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	""кг"" КАК ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество * РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоТТ) КАК КоличествоТТ,
	|	СУММА(РасходныйОрдерСкладТовары.Отклонение) КАК Отклонение,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	СУММА(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)) КАК КолвоВКоробке,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель) КАК НоменклатураРодитель
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|			И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = втНоменклатура.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|	И РасходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И РасходныйОрдерСкладТовары.Количество > 0
	|	И НЕ РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ (&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Ссылка,
	|	НоменклатураРодитель,
	|	Производитель";
	

КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_4_3(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|ПОМЕСТИТЬ втНом
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = втНоменклатура.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.Ссылка.Дата,
	|	втНом.Ссылка КАК Расходник
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	втНом КАК втНом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО втНом.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|			И втНом.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|			И втНом.ДатаПроизводства = ПриходныйОрдерСкладТовары.ДатаПроизводства
	|			И втНом.Ссылка.Склад.Владелец = ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	|			И (ВЫБОР
	|				КОГДА втНом.Ссылка.Склад В (&МасСкл)
	|					ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -3) И втНом.Ссылка.Дата
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -1) И втНом.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.отпоставщика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСОрдерами.Ссылка КАК Приходник,
	|	втНоменклатураСОрдерами.Ссылка.Дата КАК ПриходникДата,
	|	втНоменклатураСОрдерами.Номенклатура КАК Номенклатура,
	|	втНоменклатураСОрдерами.Характеристика КАК Характеристика,
	|	втНоменклатураСОрдерами.ДатаПроизводства КАК ДатаПроизводства,
	|	втВетГруппы.Группа КАК Группа,
	|	втНоменклатураСОрдерами.Дата КАК Дата,
	|	втНоменклатураСОрдерами.Расходник
	|ИЗ
	|	втОрдера КАК втНоменклатураСОрдерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = втНоменклатураСОрдерами.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	втНоменклатураСОрдерами.Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства";

КонецПроцедуры//---АК KOPA

#КонецОбласти

#Область _3

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_3_1(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО РасходныйОрдерСкладТовары.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|			И РасходныйОрдерСкладТовары.Номенклатура = ВетСвидетельстваПоступлений.Номенклатура
	|			И (ВетСвидетельстваПоступлений.UUID_ВСД <> """")
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&Ссылка)
	|	И ВетСвидетельстваПоступлений.ДокПоступления ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 1
	|		КОГДА втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 2
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 3
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 4
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет,
	|	втНоменклатура.Номенклатура,
	|	ВетеринарныеГруппыПереченьНоменклатуры.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарныеГруппы.ПереченьНоменклатуры КАК ВетеринарныеГруппыПереченьНоменклатуры
	|		ПО (НЕ ВетеринарныеГруппыПереченьНоменклатуры.Ссылка.ПометкаУдаления)
	|			И (втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	МИНИМУМ(втГруппы.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втГруппыМакс
	|ИЗ
	|	втГруппы КАК втГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа.НаименованиеПолное КАК Группа
	|ПОМЕСТИТЬ втВетГруппы
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыМакс КАК втГруппыМакс
	|		ПО втГруппы.Номенклатура = втГруппыМакс.Номенклатура
	|			И втГруппы.Приоритет = втГруппыМакс.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа,
	|	втГруппы.Группа.НаименованиеПолное";
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_3_2(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Ссылка КАК Ссылка,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
	|	РасходныйОрдер.Получатель КАК ПолучательСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация.НаименованиеСокращенное
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	|	РасходныйОрдер.Склад.Владелец.Адрес КАК СкладВладелецАдрес,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Регион КАК ПолучательСсылкаРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Район КАК ПолучательСсылкаРайон,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Город КАК ПолучательСсылкаГород,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК ПолучательСсылкаНомерТочки,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Адрес КАК ПолучательСсылкаАдрес,
	|	РасходныйОрдер.Склад.ТемпературныйРежимВерхняяГраница КАК ТемпературныйРежимВерхняяГраница,
	|	РасходныйОрдер.Склад.ТемпературныйРежимНижняяГраница КАК ТемпературныйРежимНижняяГраница,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Склад В (&МасСкл)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлЗаморозка,
	|	РасходныйОрдер.Склад,
	|	РасходныйОрдер.Склад.Наименование КАК СкладНаименование,
	|	РасходныйОрдер.Склад.Владелец.id_TT КАК id_tt
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
	|		ПО РасходныйОрдер.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
	|ГДЕ
	|	РасходныйОрдер.Ссылка В(&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	""кг"" КАК ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество * РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоТТ) КАК КоличествоТТ,
	|	СУММА(РасходныйОрдерСкладТовары.Отклонение) КАК Отклонение,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	СУММА(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)) КАК КолвоВКоробке,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель) КАК НоменклатураРодитель
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|			И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = втНоменклатура.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|	И РасходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И РасходныйОрдерСкладТовары.Количество > 0
	|	И РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ(&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Ссылка КАК НоменклатураРодитель,
	|	Производитель";

КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_3_3(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|ПОМЕСТИТЬ втНом
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = втНоменклатура.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.Ссылка.Дата,
	|	втНом.Ссылка КАК Расходник
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	втНом КАК втНом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО втНом.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|			И втНом.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|			И втНом.ДатаПроизводства = ПриходныйОрдерСкладТовары.ДатаПроизводства
	|			И втНом.Ссылка.Склад.Владелец = ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	|			И (ВЫБОР
	|				КОГДА втНом.Ссылка.Склад В (&МасСкл)
	|					ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -3) И втНом.Ссылка.Дата
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -1) И втНом.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.отпоставщика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСОрдерами.Ссылка КАК Приходник,
	|	втНоменклатураСОрдерами.Ссылка.Дата КАК ПриходникДата,
	|	втНоменклатураСОрдерами.Номенклатура КАК Номенклатура,
	|	втНоменклатураСОрдерами.Характеристика КАК Характеристика,
	|	втНоменклатураСОрдерами.ДатаПроизводства КАК ДатаПроизводства,
	|	втВетГруппы.Группа КАК Группа,
	|	втНоменклатураСОрдерами.Дата КАК Дата,
	|	втНоменклатураСОрдерами.Расходник
	|ИЗ
	|	втОрдера КАК втНоменклатураСОрдерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = втНоменклатураСОрдерами.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	втНоменклатураСОрдерами.Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства";
	

КонецПроцедуры//---АК KOPA

#КонецОбласти

#Область _2

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_2_1(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|		ПО РасходныйОрдерСкладТовары.Ссылка = ВетСвидетельстваПоступлений.ДокПоступления
	|			И РасходныйОрдерСкладТовары.Номенклатура = ВетСвидетельстваПоступлений.Номенклатура
	|			И (ВетСвидетельстваПоступлений.UUID_ВСД <> """")
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&Ссылка)
	|	И ВетСвидетельстваПоступлений.ДокПоступления ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 1
	|		КОГДА втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 2
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 3
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 4
	|		КОГДА втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет,
	|	втНоменклатура.Номенклатура,
	|	ВетеринарныеГруппыПереченьНоменклатуры.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарныеГруппы.ПереченьНоменклатуры КАК ВетеринарныеГруппыПереченьНоменклатуры
	|		ПО (НЕ ВетеринарныеГруппыПереченьНоменклатуры.Ссылка.ПометкаУдаления)
	|			И (втНоменклатура.Номенклатура = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура
	|				ИЛИ втНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель = ВетеринарныеГруппыПереченьНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	МИНИМУМ(втГруппы.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втГруппыМакс
	|ИЗ
	|	втГруппы КАК втГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа.НаименованиеПолное КАК Группа
	|ПОМЕСТИТЬ втВетГруппы
	|ИЗ
	|	втГруппы КАК втГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыМакс КАК втГруппыМакс
	|		ПО втГруппы.Номенклатура = втГруппыМакс.Номенклатура
	|			И втГруппы.Приоритет = втГруппыМакс.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втГруппы.Номенклатура,
	|	втГруппы.Группа,
	|	втГруппы.Группа.НаименованиеПолное";
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_2_2(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдер.Номер КАК Номер,
	|	РасходныйОрдер.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация
	|	КОНЕЦ КАК Руководители,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Наименование КАК СТРОКА(200)) КАК Получатель,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	ВетеринарныеРазрешенияСрезПоследних.ВетеринарныйВрач,
	|	РасходныйОрдер.Получатель КАК ПолучательСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходныйОрдер.Организация.НаименованиеСокращенное
	|		ИНАЧЕ РасходныйОрдер.Склад.Владелец.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	|	РасходныйОрдер.Склад.Владелец.Адрес КАК СкладВладелецАдрес,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Регион КАК ПолучательСсылкаРегион,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Район КАК ПолучательСсылкаРайон,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Город КАК ПолучательСсылкаГород,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).НомерТочки КАК ПолучательСсылкаНомерТочки,
	|	ВЫРАЗИТЬ(РасходныйОрдер.Получатель КАК Справочник.СтруктурныеЕдиницы).Адрес КАК ПолучательСсылкаАдрес,
	|	РасходныйОрдер.Склад.ТемпературныйРежимВерхняяГраница КАК ТемпературныйРежимВерхняяГраница,
	|	РасходныйОрдер.Склад.ТемпературныйРежимНижняяГраница КАК ТемпературныйРежимНижняяГраница,
	|	РасходныйОрдер.Склад,
	|	ВЫБОР
	|		КОГДА РасходныйОрдер.Склад В (&МасСкл)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлЗаморозка,
	|	РасходныйОрдер.Склад.Наименование КАК СкладНаименование,
	|	РасходныйОрдер.Склад.Владелец.id_TT КАК id_tt,
	|	РасходныйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдер.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетеринарныеРазрешения.СрезПоследних(&ДатаДок, ) КАК ВетеринарныеРазрешенияСрезПоследних
	|		ПО РасходныйОрдер.Склад.Владелец = ВетеринарныеРазрешенияСрезПоследних.Склад
	|ГДЕ
	|	РасходныйОрдер.Ссылка В(&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	""кг"" КАК ЕдиницаИзмерения,
	|	СУММА(РасходныйОрдерСкладТовары.Количество * РасходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Количество,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоУРЗ) КАК КоличествоУРЗ,
	|	СУММА(РасходныйОрдерСкладТовары.КоличествоТТ) КАК КоличествоТТ,
	|	СУММА(РасходныйОрдерСкладТовары.Отклонение) КАК Отклонение,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	СУММА(ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0)) КАК КолвоВКоробке,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель) КАК НоменклатураРодитель
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = РасходныйОрдерСкладТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РасходныйОрдерСкладТовары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(, ) КАК КоличествоВКоробкеСрезПоследних
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	|			И РасходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	|			И РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец = КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = втНоменклатура.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|	И РасходныйОрдерСкладТовары.Номенклатура.ТребуетсяВетеринарныйСертификат
	|	И РасходныйОрдерСкладТовары.Количество > 0
	|	И НЕ РасходныйОрдерСкладТовары.Номенклатура В ИЕРАРХИИ (&Корм)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЕСТЬNULL(втВетГруппы.Группа, РасходныйОрдерСкладТовары.Номенклатура.Родитель)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Ссылка,
	|	НоменклатураРодитель,
	|	Производитель";

КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.05.21 ИП-00018659.01
Процедура ИзменитьТекстЗапроса_2_3(Запрос)
	Если ИспользоватьСтарыйВариантВетСвидетельств() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|ПОМЕСТИТЬ втНом
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО РасходныйОрдерСкладТовары.Номенклатура = втНоменклатура.Номенклатура
	|ГДЕ
	|	РасходныйОрдерСкладТовары.Ссылка В(&ТекущийДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.ДатаПроизводства,
	|	РасходныйОрдерСкладТовары.Ссылка,
	|	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Ссылка,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.Ссылка.Дата,
	|	втНом.Ссылка КАК Расходник
	|ПОМЕСТИТЬ втОрдера
	|ИЗ
	|	втНом КАК втНом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ПО втНом.Номенклатура = ПриходныйОрдерСкладТовары.Номенклатура
	|			И втНом.Характеристика = ПриходныйОрдерСкладТовары.Характеристика
	|			И втНом.ДатаПроизводства = ПриходныйОрдерСкладТовары.ДатаПроизводства
	|			И втНом.Ссылка.Склад.Владелец = ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец
	|			И (ВЫБОР
	|				КОГДА втНом.Ссылка.Склад В (&МасСкл)
	|					ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -3) И втНом.Ссылка.Дата
	|				ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(втНом.Ссылка.Дата, МЕСЯЦ, -1) И втНом.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.отпоставщика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСОрдерами.Ссылка КАК Приходник,
	|	втНоменклатураСОрдерами.Ссылка.Дата КАК ПриходникДата,
	|	втНоменклатураСОрдерами.Номенклатура КАК Номенклатура,
	|	втНоменклатураСОрдерами.Характеристика КАК Характеристика,
	|	втНоменклатураСОрдерами.ДатаПроизводства КАК ДатаПроизводства,
	|	втВетГруппы.Группа КАК Группа,
	|	втНоменклатураСОрдерами.Дата КАК Дата,
	|	втНоменклатураСОрдерами.Расходник
	|ИЗ
	|	втОрдера КАК втНоменклатураСОрдерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВетГруппы КАК втВетГруппы
	|		ПО (втВетГруппы.Номенклатура = втНоменклатураСОрдерами.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	втНоменклатураСОрдерами.Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПроизводства";

КонецПроцедуры//---АК KOPA

#КонецОбласти

//+++АК KOPA 2018.05.21 ИП-00018659.01
Функция ИспользоватьСтарыйВариантВетСвидетельств() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработки.Ссылка
		|ИЗ
		|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		|ГДЕ
		|	ВнешниеОбработки.ВидОбработки = &ВидОбработки
		|	И ВнешниеОбработки.Наименование = &Наименование
		|	И НЕ ВнешниеОбработки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет);
	Запрос.УстановитьПараметр("Наименование", "СтарыйВариантВетСвидетельства");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
КонецФункции//---АК KOPA

#КонецОбласти

#Область ДвиженияДокумента

//+++АК LATV 2018.06.23 ИП-00018971
Функция ДвиженияДокумента(Ссылка) Экспорт

	ДвиженияДокумента = Новый Структура();
	ДвиженияДокумента.Вставить("Финансовый", СформироватьДвижения_Финансовый(Ссылка));
	
	Возврат ДвиженияДокумента;

КонецФункции

//+++АК LATV 2018.10.03 ИП-00019879
Функция СформироватьДвижения_Финансовый(Ссылка) Экспорт

	// Инициализация
	Отказ = Ложь;
	
	ДвиженияФин = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	
	// Получение данных документа
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, Дата, Организация,
		|ВидОперации, Статус, ПризкакПодтвержденияВФинУчете, ДатаОтраженияВФинУчете,
		|Склад, Склад.Владелец, Склад.Владелец.СторонняяПереработка, ПоставщикДляРаспределения, Основание");
	
	Если ДанныеДокумента.ПризкакПодтвержденияВФинУчете
	 Или ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки Тогда
		Если ДанныеДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан Тогда
			ТаблицаДвижений = ДвиженияФин.Выгрузить();
			Возврат ТаблицаДвижений;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
		|ГДЕ
		|	РасходныйОрдерСкладТовары.Ссылка = &РасходныйОрдер");
	
	Запрос.УстановитьПараметр("РасходныйОрдер", Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеДокумента.Вставить("Товары", Товары);
	
	// Формирование движений
	Если ДанныеДокумента.ПризкакПодтвержденияВФинУчете
	 Или ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки Тогда
		ОтразитьДвиженияПоРегиструБухгалтерии(ДанныеДокумента, ДвиженияФин, Отказ);
	КонецЕсли;
	
	Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеВСебестоимость Тогда
		АК_ОтразитьДвиженияПоСписаниюВСебестоимость(ДанныеДокумента, ДвиженияФин, Отказ);
	КонецЕсли;
	
	//обработаем движения корректирующих записей по инвентаризации по регистру бухгалтерии
	ОтразитьДвиженияБухПоКорректировкам(ДанныеДокумента, ДвиженияФин, Отказ);
	
	// Итоговые действия с движениями
	ОрганизацияВкусВилл = ОбщегоНазначенияПовтИсп.ВкусВилл(НачалоДня(ДанныеДокумента.Дата)); // Начало дня для кеширования
	АК_УчетМСФО.ЗаполнитьОрганизацию(ДвиженияФин, ?(ЗначениеЗаполнено(ДанныеДокумента.Организация), ДанныеДокумента.Организация, ОрганизацияВкусВилл));
	
	Если ДанныеДокумента.Дата >= Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		тзНеразделямыеКомплекты = Товародвижение.АК_РазобратьКомплектыВДвиженияхПо41Счёту(ДвиженияФин, Ссылка);
		
		Если тзНеразделямыеКомплекты.Количество() <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Проведение документа невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,, Отказ);
			Для Каждого Стр Из тзНеразделямыеКомплекты Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Комплект ""%1"" невозможно разбить на составляющие из-за нулевого количества всех составляющих комплекта'")
					, Стр["Наименование"]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДвижений = ДвиженияФин.Выгрузить();
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Возврат ТаблицаДвижений;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Процедура ОтразитьДвиженияБухПоКорректировкам(ДанныеДокумента, ДвиженияФин, Отказ)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	*,
		|	ISNULL(ТоварыНаСкладах.Номенклатура.ТипТовара, ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.ПустаяСсылка)) КАК НоменклатураТипТовара,
		|	ISNULL(ТоварыНаСкладах.Склад.Владелец, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СкладВладелец,
		|	ISNULL(ТоварыНаСкладах.Склад.Владелец.СторонняяПереработка, Ложь) КАК СкладВладелецСторонняяПереработка
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.Регистратор = &Регистратор");
	Запрос.УстановитьПараметр("Регистратор", ДанныеДокумента.Ссылка);
	Корректировки = Запрос.Выполнить().Выгрузить();
	
	ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Корректировки.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);	
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатериалы = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	//+++АК Susk (Суслин К.В.) 2018.10.02 ИП-00019621^02 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(Корректировки.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);	
	МассивНом = Корректировки.ВыгрузитьКолонку("Номенклатура");
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, ДанныеДокумента.Дата);
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	СчетПрочиеМатериалы = ПланыСчетов.Финансовый.ПрочиеМатериалы;
	//---АК Susk (Суслин К.В.) 
	
	//+++АК MIND 2017.11.20 есть счета, которые по просьбе Верени не нужно двигать этим документом
	// она их списывает требованием накладной за весь месяц разом в 0
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	//+++АК Susk (Суслин К.В.) 2018.10.08 ИП-00019621^02	 
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	//---АК MIND
	
	Для Каждого Движение Из Корректировки Цикл
		Если НЕ ЗначениеЗаполнено(Движение.КорректировкаПоИнвентаризации) Тогда
			Продолжить;
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
		СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(Движение.Номенклатура);
		
		Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсключитьНоменклатуруЭтоРекламныйМатериал(Движение.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
			Продолжить;
		КонецЕсли;		
		//---АК Susk (Суслин К.В.) 
		
		ДатаДвижения = Движение.КорректировкаПоИнвентаризации.Дата;
		КолвоКорректировка = Движение.Количество * ?(Движение.ВидДвижения = ВидДвиженияНакопления.Расход, -1, 1);
		Если КолвоКорректировка < 0 Тогда
			
			Если Движение.СкладВладелецСторонняяПереработка Тогда
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиПроизводителей, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиСырьяПроизводителей, ДатаДвижения);
				КонецЕсли;
			Иначе
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиУпаковки, ДатаДвижения);
				Иначе	
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_Излишки, ДатаДвижения);
				КонецЕсли;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(Движение.Номенклатура, "Номенклатура");				
				
				//Если СтрокаСчетУчета <> Неопределено
				//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
				//	И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
				//	Продолжить;
				//КонецЕсли;
				
				//---АК Susk (Суслин К.В.)  
				//---АК MIND
				
				ПроводкаНедостачи = ДвиженияФин.Добавить();
				
				ПроводкаНедостачи.Период 		= ДатаДвижения;
				ПроводкаНедостачи.НомерЖурнала	= "ТД";
				ПроводкаНедостачи.Содержание	= "Недостача товара";
				
				ЦФО	= ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Движение.СкладВладелец, ДатаДвижения);
				
				// Дт
				ПроводкаНедостачи.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаНедостачи.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				// Кт
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаНедостачи.СчетКт 							= СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаНедостачи.СубконтоКт.Товары					= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.Материалы  			= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.Склады					= Движение.Склад;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.Материалы  			= Движение.Номенклатура;
					КонецЕсли;	
				Иначе	
					Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаНедостачи.СчетКт 							= СчетМатериалы;
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.Материалы  			= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.Склады					= Движение.Склад;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаНедостачи.СчетКт 							= СчетТовары;
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаНедостачи.СубконтоКт.Товары					= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(Движение.Номенклатура, "Номенклатура");
				ПроводкаНедостачи.Сумма = ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЕсли;
			
			// Излишки	
		ИначеЕсли КолвоКорректировка > 0 Тогда
			
			Если Движение.СкладВладелецСторонняяПереработка Тогда
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиПроизводителей, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиСырьяПроизводителей, ДатаДвижения);
				КонецЕсли;
			Иначе
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиУпаковки, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_Недостачи, ДатаДвижения);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(Движение.Номенклатура, "Номенклатура");				
				//СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(Движение.Номенклатура);				
				//---АК Susk (Суслин К.В.)		
				
				//Если СтрокаСчетУчета <> Неопределено
				//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
				//	И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
				//	Продолжить;
				//КонецЕсли;
				//---АК MIND
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				
				ПроводкаИзлишки.Период 			= ДатаДвижения;
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Содержание		= "Излишки товара";
				
				// Дт
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетДт 							= СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаИзлишки.СубконтоДт.Товары				= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.Склады				= Движение.Склад;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= Движение.Номенклатура;
					КонецЕсли;	
				Иначе	
					Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаИзлишки.СчетДт 							= СчетМатериалы;
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.Склады				= Движение.Склад;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаИзлишки.СчетДт 							= СчетТовары;
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаИзлишки.СубконтоДт.Товары				= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Движение.СкладВладелец, ДатаДвижения);
				
				// Кт
				ПроводкаИзлишки.СчетКт = СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоКт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоКт.ЦФО 						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
				СтрСебестоимость = ТабСебестоимости.Найти(Движение.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоДт * СтрСебестоимость.Себестоимость;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.06.23 ИП-00018971
Процедура ОтразитьДвиженияПоРегиструБухгалтерии(ДанныеДокумента, ДвиженияФин, Отказ)

	Если ДанныеДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.Отменен Тогда
		Возврат;
	КонецЕсли;
	
	Товары = ДанныеДокумента.Товары;
	
	ДатаПроводки = ?(ДанныеДокумента.ПризкакПодтвержденияВФинУчете И ЗначениеЗаполнено(ДанныеДокумента.ДатаОтраженияВФинУчете), ДанныеДокумента.ДатаОтраженияВФинУчете, ДанныеДокумента.Дата);
	
	//+++АК Susk (Суслин К.В.) 2018.10.02 ИП-00019621^02 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);	
	МассивНом = Товары.ВыгрузитьКолонку("Номенклатура");
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, ДанныеДокумента.Дата);
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	СчетПрочиеМатериалы = ПланыСчетов.Финансовый.ПрочиеМатериалы;
	//---АК Susk (Суслин К.В.) 
	
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатериалы = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	//+++АК MIND 2017.11.20 есть счета, которые по просьбе Верени не нужно двигать этим документом
	// она их списывает требованием накладной за весь месяц разом в 0
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	//+++АК Susk (Суслин К.В.) 2018.10.02 ИП-00019621^02  
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	//---АК MIND 
	
	Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Утилизация Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ДанныеДокумента.СкладВладелец, ДатаПроводки);
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Утилизация, ДатаПроводки);
		
		ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");				
				СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);				
				//---АК Susk (Суслин К.В.)
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
					И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//---АК MIND 
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				Если ИсключитьНоменклатуруЭтоРекламныйМатериал(ТекСтрокаТовары.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
					Продолжить;
				КонецЕсли;
				//---АК Susk (Суслин К.В.) 
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				ПроводкаИзлишки.Период = ДатаПроводки;
				
				// Кт
				ПроводкаИзлишки.КоличествоКт = ТекСтрокаТовары.Количество;
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаИзлишки.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаИзлишки.СчетКт = ПланыСчетов.Финансовый.Товары;
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;	
				
				// Дт
				ПроводкаИзлишки.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				//ПроводкаИзлишки.Организация		= Организация;
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Содержание		= "Утилизация (технологом)";
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ДанныеДокумента.СкладВладелец, ДатаПроводки);
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Утилизация_Бой, ДатаПроводки);
		
		ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");				
				СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);				
				//---АК Susk (Суслин К.В.)

				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
					И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//---АК MIND
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				Если ИсключитьНоменклатуруЭтоРекламныйМатериал(ТекСтрокаТовары.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
					Продолжить;
				КонецЕсли;
				//---АК Susk (Суслин К.В.) 
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				ПроводкаИзлишки.Период = ДатаПроводки;
				
				// Кт
				ПроводкаИзлишки.КоличествоКт = ТекСтрокаТовары.Количество;
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаИзлишки.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаИзлишки.СчетКт = ПланыСчетов.Финансовый.Товары;
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				// Дт
				ПроводкаИзлишки.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Содержание		= "Утилизация (бой)";
				
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ДанныеДокумента.СкладВладелец, ДатаПроводки);
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтгрузкаТехнологу, ДатаПроводки);
		
		ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");				
				СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);				
				//---АК Susk (Суслин К.В.)

				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
					И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//---АК MIND
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				Если ИсключитьНоменклатуруЭтоРекламныйМатериал(ТекСтрокаТовары.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
					Продолжить;
				КонецЕсли;
				//---АК Susk (Суслин К.В.) 
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				ПроводкаИзлишки.Период = ДатаПроводки;
				
				// Кт
				ПроводкаИзлишки.КоличествоКт = ТекСтрокаТовары.Количество;
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаИзлишки.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаИзлишки.СчетКт = ПланыСчетов.Финансовый.Товары;
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				// Дт
				ПроводкаИзлишки.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Содержание		= "Отгрузка технологу";
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаНуждыСклада 
		ИЛИ ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаПитаниеСотрудниковСклада Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ДанныеДокумента.СкладВладелец, ДатаПроводки);
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.СписаниеНаНуждыСклада, ДатаПроводки);
		
		ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");				
				СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);				
				//---АК Susk (Суслин К.В.)

				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
					И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//---АК MIND
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				Если ИсключитьНоменклатуруЭтоРекламныйМатериал(ТекСтрокаТовары.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
					Продолжить;
				КонецЕсли;
				//---АК Susk (Суслин К.В.) 
				
				Проводка = ДвиженияФин.Добавить();
				Проводка.Период = ДатаПроводки;
				
				// Кт
				Проводка.КоличествоКт = ТекСтрокаТовары.Количество;
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					Проводка.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						Проводка.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						Проводка.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						Проводка.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						Проводка.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						Проводка.СчетКт 				= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						Проводка.СубконтоКт.Материалы  	= ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.Склады		= ДанныеДокумента.Склад;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						Проводка.СчетКт = ПланыСчетов.Финансовый.Товары;
						Проводка.СубконтоКт.МестаХранения = ДанныеДокумента.СкладВладелец;
						Проводка.СубконтоКт.Товары		  = ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				// Дт
				Проводка.СчетДт 							= СтруктураНастроек.Счет;
				Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
				
				Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаПитаниеСотрудниковСклада Тогда
					Проводка.СубконтоДт.СтатьиДоходовРасходов	= Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("c42adfbe-e152-11e5-8185-005056a00106")); //Расходы на питание сотрудников склада, код 35026
				Иначе
					Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				КонецЕсли;
				
				Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				Проводка.НомерЖурнала	= "ТД";
				
				Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаПитаниеСотрудниковСклада Тогда
					Проводка.Содержание		= "Списание на питание сотрудников склада";
				Иначе
					Проводка.Содержание		= "Списание на нужды склада";
				КонецЕсли;
				
				Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				Проводка.Сумма = Проводка.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки Тогда
		
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ДанныеДокумента.СкладВладелец, ДатаПроводки);
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.СписаниеОтходовОтПереработки, ДатаПроводки);
		
		ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");				
				СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);				
				//---АК Susk (Суслин К.В.)
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
					И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//---АК MIND
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				Если ИсключитьНоменклатуруЭтоРекламныйМатериал(ТекСтрокаТовары.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
					Продолжить;
				КонецЕсли;
				//---АК Susk (Суслин К.В.) 
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				ПроводкаИзлишки.Период = ДатаПроводки;
				
				// Кт
				ПроводкаИзлишки.КоличествоКт = ТекСтрокаТовары.Количество;
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаИзлишки.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						ПроводкаИзлишки.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаИзлишки.СчетКт = ПланыСчетов.Финансовый.Товары;
						ПроводкаИзлишки.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						ПроводкаИзлишки.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						ПроводкаИзлишки.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				// Дт
				ПроводкаИзлишки.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоДт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				//ПроводкаИзлишки.Организация		= Организация;
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Содержание		= "Отходы от переработки";
				
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		
	//+++АК CISA 2018.11.13 ИП-00019730
	ИначеЕсли ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку
		И ДанныеДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
			
		ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ДанныеДокумента.СкладВладелец, ДатаПроводки);
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтгрузкаНаМероприятие, ДатаПроводки);
		
		ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
			
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				
				//+++АК MIND 2017.11.20 исключаем из проводом счета по просьбе Верени
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");				
				СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(ТекСтрокаТовары.Номенклатура);				
				//---АК Susk (Суслин К.В.)

				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета)
					И МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//---АК MIND
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				Если ИсключитьНоменклатуруЭтоРекламныйМатериал(ТекСтрокаТовары.Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета) Тогда
					Продолжить;
				КонецЕсли;
				//---АК Susk (Суслин К.В.)
				
				Проводка = ДвиженияФин.Добавить();
				Проводка.Период = ДатаПроводки;
				
				// Кт
				Проводка.КоличествоКт = ТекСтрокаТовары.Количество;
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					Проводка.СчетКт = СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						Проводка.СубконтоКт.МестаХранения  		= ДанныеДокумента.СкладВладелец;
						Проводка.СубконтоКт.Товары				= ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						Проводка.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.Склады				= ДанныеДокумента.Склад;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						Проводка.СубконтоКт.Материалы  			= ТекСтрокаТовары.Номенклатура;
					КонецЕсли;
				Иначе
					Если ТекСтрокаТовары.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						Проводка.СчетКт 				= ПланыСчетов.Финансовый.МатералыДляВыпуска;
						Проводка.СубконтоКт.Материалы  	= ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.Склады		= ДанныеДокумента.Склад;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						Проводка.СчетКт = ПланыСчетов.Финансовый.Товары;
						Проводка.СубконтоКт.МестаХранения = ДанныеДокумента.СкладВладелец;
						Проводка.СубконтоКт.Товары		  = ТекСтрокаТовары.Номенклатура;
						Проводка.СубконтоКт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;
				
				// Дт
				Проводка.СчетДт 							= СтруктураНастроек.Счет;
				Проводка.СубконтоДт.ТорговыеТочки  			= СтруктураНастроек.СтруктурнаяЕдиница;
				
				Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаПитаниеСотрудниковСклада Тогда
					Проводка.СубконтоДт.СтатьиДоходовРасходов	= Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("c42adfbe-e152-11e5-8185-005056a00106")); //Расходы на питание сотрудников склада, код 35026
				Иначе
					Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				КонецЕсли;
				
				Проводка.СубконтоДт.ЦФО	= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);				
				Проводка.НомерЖурнала	= "ТД";				
				Проводка.Содержание		= "Списание на выездное мероприятие";
				Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
				Проводка.Сумма = Проводка.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЦикла;
			
		КонецЕсли;
		//---АК CISA
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.23 ИП-00018971
Процедура АК_ОтразитьДвиженияПоСписаниюВСебестоимость(ДанныеДокумента, ДвиженияФин, Отказ)

	Товары = ДанныеДокумента.Товары;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.СписаниеПрочихРасходов, ДанныеДокумента.Дата);
	Если Не ЗначениеЗаполнено(СтруктураНастроек.СтатьяДвиженияТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не настроен вид отражения операций в учете ""Списание прочих расходов""! Проведение невозможно.", ДанныеДокумента.Ссылка,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Товары.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
	ТаблицаКоэффициентов = ПолучитьКоэффициентыРаспределения(ДанныеДокумента);
	Если ТаблицаКоэффициентов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить базу распределения по товарам! Отсутствуют документы ПО в текущем месяце по товарам, на которые следует списать себестоимость.", ДанныеДокумента.Ссылка,,, Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаСебестоимость = ТабСебестоимость.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		Если СтрокаСебестоимость = Неопределено
			ИЛИ СтрокаСебестоимость.Себестоимость = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для товара " + СтрокаТовар.Номенклатура + " не найдена себестоимость");
			Продолжить;
		КонецЕсли;
		СуммаКРаспределению = СтрокаТовар.Количество * СтрокаСебестоимость.Себестоимость;
		КолвоКРаспределению = СтрокаТовар.Количество;
		СуммаРаспределено = 0;
		КолвоРаспределено = 0;
		Для Каждого СтрокаКоэффициент Из ТаблицаКоэффициентов Цикл
			СуммаВПроводку = Окр(СуммаКРаспределению * СтрокаКоэффициент.Коэффициент, 2);
			КолвоВПроводку = Окр(КолвоКРаспределению * СтрокаКоэффициент.Коэффициент, 3);
			Если СуммаВПроводку = 0
				И КолвоВПроводку = 0 Тогда
				Продолжить;
			КонецЕсли;
			Проводка = ДвиженияФин.Добавить();
			Проводка.Период 							= ДанныеДокумента.Дата;
			Проводка.Сумма 								= СуммаВПроводку;
			
			//Дт
			Проводка.СчетДт 							= ПланыСчетов.Финансовый.Товары;
			Проводка.СубконтоДт.МестаХранения 			= СтрокаКоэффициент.СтруктурнаяЕдиница;
			Проводка.СубконтоДт.Товары 					= СтрокаКоэффициент.Номенклатура;
			Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			
			//Кт
			Если СтрокаТовар.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
				Проводка.СчетКт 						= ПланыСчетов.Финансовый.МатералыДляВыпуска;
				Проводка.СубконтоКт.Материалы			= СтрокаТовар.Номенклатура;
				Проводка.СубконтоКт.Склады 				= ДанныеДокумента.Склад;
			Иначе
				Проводка.СчетКт							= ПланыСчетов.Финансовый.Товары;
				Проводка.СубконтоКт.МестаХранения 		= ДанныеДокумента.СкладВладелец;
				Проводка.СубконтоКт.Товары 				= СтрокаТовар.Номенклатура;
			КонецЕсли;
			Проводка.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
			Проводка.КоличествоКт = КолвоВПроводку;
			Проводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
			СуммаРаспределено = СуммаРаспределено + Проводка.Сумма;
			КолвоРаспределено = КолвоРаспределено + Проводка.КоличествоКт;
		КонецЦикла;
		Если СуммаКРаспределению - СуммаРаспределено <> 0 Тогда
			ДвиженияФин[ДвиженияФин.Количество() - 1].Сумма = ДвиженияФин[ДвиженияФин.Количество() - 1].Сумма + (СуммаКРаспределению - СуммаРаспределено);
		КонецЕсли;
		Если КолвоКРаспределению - КолвоРаспределено <> 0 Тогда
			ДвиженияФин[ДвиженияФин.Количество() - 1].КоличествоКт = ДвиженияФин[ДвиженияФин.Количество() - 1].КоличествоКт + (КолвоКРаспределению - КолвоРаспределено);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.06.23 ИП-00018971
Функция ПолучитьКоэффициентыРаспределения(ДанныеДокумента) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоМесяца(ДанныеДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДанныеДокумента.Дата));
	Запрос.УстановитьПараметр("Контрагент",		ДанныеДокумента.ПоставщикДляРаспределения);
	Запрос.УстановитьПараметр("ЗаявкаНаПечатьЭтикетки", ДанныеДокумента.Основание);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧТовары.Ссылка.Склад КАК Склад,
		|	ТЧТовары.Ссылка.Склад.Владелец КАК СтруктурнаяЕдиница,
		|	ТЧТовары.Номенклатура КАК Номенклатура,
		|	ТЧТовары.Номенклатура.ТипТовара КАК ТипТовара,
		|	СУММА(ТЧТовары.Количество * ТЧТовары.ЕдиницаИзмерения.Вес) КАК Вес
		|ПОМЕСТИТЬ ВТВеса
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК ТЧТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(&ДатаОкончания, ) КАК СебестоимостьТоваровСрезПоследних
		|		ПО ТЧТовары.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура
		|ГДЕ
		|	ТЧТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
		|	И ТЧТовары.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА НЕ ТЧТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ТЧТовары.Ссылка.ДатаДокументаПоставщика
		|			ИНАЧЕ ТЧТовары.Ссылка.Дата
		|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ТЧТовары.Ссылка.Поставщик = &Контрагент
		|	И ТЧТовары.Номенклатура.ТипТовара <> ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧТовары.Ссылка.Склад,
		|	ТЧТовары.Ссылка.Склад.Владелец,
		|	ТЧТовары.Номенклатура,
		|	ТЧТовары.Номенклатура.ТипТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТВеса.Вес) КАК Вес
		|ПОМЕСТИТЬ ВТОбщийВес
		|ИЗ
		|	ВТВеса КАК ВТВеса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВеса.Склад,
		|	ВТВеса.СтруктурнаяЕдиница,
		|	ВТВеса.Номенклатура,
		|	ВТВеса.ТипТовара,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТОбщийВес.Вес, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВТВеса.Вес / ВТОбщийВес.Вес
		|	КОНЕЦ КАК Коэффициент
		|ИЗ
		|	ВТВеса КАК ВТВеса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбщийВес КАК ВТОбщийВес
		|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
Функция ИсключитьНоменклатуруЭтоРекламныйМатериал(Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета)
	
	Если СтрокаСчетУчета.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
		
		НайдЗначенияРеквизитов = ЗначенияРеквизитовНом.Получить(Номенклатура);
		
		Если НайдЗначенияРеквизитов["ВидНоменклатуры"] <> Перечисления.ВидыНоменклатуры.Материал Тогда
			Возврат Истина;
		Иначе	
			Если НайдЗначенияРеквизитов["РекламныйМатериал"] ИЛИ НайдЗначенияРеквизитов["НеУчитыватьВЗакрытииМесяца"] Тогда		
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции		
