Перем ТекДата;
Перем ТабИзмененийВДвижениях;
Перем НеМенятьДатуПриПроведении Экспорт;
Перем СтараяОперация_Оборудование;			//нельзя в проведенных д-тах "не оборудования" менять на оборудование

//+++АК sole 2018.07.26 ИП-00018320.04
Перем ПеремещениеСкладСсылка Экспорт;
//---АК sole 2018.07.26 ИП-00018320.04

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИзмененияДвижений.Очистить();
	
	Для Каждого СтрокаТаб Из Товары Цикл
		СтрокаТаб.КоличествоУРЗ = 0;
		СтрокаТаб.КоличествоТТ = 0;
	КонецЦикла;	
	
	ПровереноОператором = Ложь;
	ДатаРаспределения = '00010101';
	ВыполнятьДвиженияДатойДокумента = Ложь;
	
	СборкаБылаПрерванаНаМобУстройстве = Ложь;
	ДанныеСборкиНаМобильномУстройстве = Новый ХранилищеЗначения(Неопределено);
	СборкаТерминаломЗакончена = Ложь;
	
	ПриемкаВМагазинеБезПересчета = 0;
	
КонецПроцедуры

//+++АК LATV 2018.07.23 ИП-00018525
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаСклад") Тогда
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратПоставщику Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку Тогда 
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.Перемещение Тогда	
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение;	
		КонецЕсли;
		
		//"Запрещенные" комбинации
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки
				ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика
				ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку Тогда
			ВызватьИсключение "Заявка имеет вид операции """ + Строка(ДанныеЗаполнения.ВидОперации) + """" + Символы.ПС +
							  "Создание расходного ордера по ней не предусмотрено";
		КонецЕсли;
		
		Основание = ДанныеЗаполнения;
		
		//Номенклатура
		Склад = ДанныеЗаполнения.Склад;
		Получатель = ДанныеЗаполнения.Получатель;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон", Дата);
		Запрос.УстановитьПараметр("Заявка", ДанныеЗаполнения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявкаНаСкладахОстатки.Номенклатура,
			|	ЗаявкаНаСкладахОстатки.Характеристика,
			|	ЗаявкаНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	ЗаявкаНаСкладахОстатки.Заявка,
			|	ЗаявкаНаСкладахОстатки.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаявкаНаСкладах.Остатки(&ДатаКон, Заявка = &Заявка) КАК ЗаявкаНаСкладахОстатки";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ЗаявкаНаСклад = Выборка.Заявка;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйОрдерСклад") Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку;	
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика  Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
		КонецЕсли;
		
		Склад						= ДанныеЗаполнения.Склад;
		Получатель					= ДанныеЗаполнения.Поставщик;
		Автор						= ПараметрыСеанса.ТекущийПользователь;
		Основание					= ДанныеЗаполнения;
		ДатаДокументаПоставщика		= ДанныеЗаполнения.Дата;
		НомерДокументаПоставщика	= ДанныеЗаполнения.Номер;
		
		//
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			
			//
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаПечатьЭтикетки") Тогда
		
		АК_ЗаполнитьДокументНаОснованииЗаявкиНаПечатиЭтикетки(ДанныеЗаполнения);
		Автор = ПараметрыСеанса.ТекущийПользователь;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы") Тогда
		
		Основание = ДанныеЗаполнения;
		Получатель = ДанныеЗаполнения.ТорговаяТочка;
		Комментарий = ДанныеЗаполнения.Комментарий;
		
		Дата				= ТекущаяДата();
		Автор				= ПараметрыСеанса.ТекущийПользователь;
		ВидОперации			= Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
		Склад				= Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Рекламная продукция").СкладТорговогоЗала;
		Статус				= Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
		ДатаРаспределения	= ТекущаяДата();
		ПровереноОператором	= Истина;
		Сборщик				= Справочники.ФизическиеЛица.ФизическоеЛицоНеНайдено;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура,
			|	ЗаявкиНаРекламныеМатериалыОстатки.Характеристика,
			|	ВЫБОР
			|		КОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|						ТОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник.Физлицо.Пол
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка)
			|				КОНЕЦ
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка)
			|	КОНЕЦ КАК Пол,
			|	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток КАК Количество,
			|	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
			|ИЗ
			|	РегистрНакопления.ЗаявкиНаРекламныеМатериалы.Остатки(&ТекДата, Заявка = &Заявка) КАК ЗаявкиНаРекламныеМатериалыОстатки
			|ГДЕ
			|	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток > 0";
		
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Заявка", Основание);
		
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		Для каждого Стр Из ДанныеЗаполнения.ТорговыеТочки Цикл
			НовСтр=ТорговыеТочки.Добавить();
			НовСтр.Магазин = Стр.Магазин;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.МП_ЗадачаТехнолога") И ЗначениеЗаполнено(ДанныеЗаполнения.СкладСклада)  Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Основание	= ДанныеЗаполнения;
		Склад		= ДанныеЗаполнения.СкладСклада;
		Организация	= Склад.Организация;
		Статус		= Перечисления.СтатусыРасходныхОрдеров.ВСборке;
		ВидОперации	= Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение;
		Получатель	= РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ВернутьСкладПеремещения(ДанныеЗаполнения.ТипЗадания);
		Автор		= глЗначениеПеременной("глТекущийПользователь");
		Комментарий	= "#создан автоматически к " + Строка(ДанныеЗаполнения);
		
		ЭтотОбъект.Товары.Очистить();
		ТабТовары = ДанныеЗаполнения.ПараметрыЗадачи;
		Для Каждого СтрокаТаб Из ТабТовары Цикл
			Если СтрокаТаб.Количество <> 0 Тогда
				СтрокаДоб = ЭтотОбъект.Товары.Добавить();
				СтрокаДоб.Номенклатура		= СтрокаТаб.Номенклатура;
				СтрокаДоб.Характеристика	= ?(СтрокаТаб.Номенклатура.НеВедетсяУчетПоХарактеристикам, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаТаб.ХарактеристикаНоменклатуры);
				СтрокаДоб.ЕдиницаИзмерения 	= СтрокаТаб.ЕдиницаИзмерения;
				СтрокаДоб.Количество		= СтрокаТаб.Количество;
				СтрокаДоб.ДатаПроизводства	= СтрокаТаб.ДатаПроизводства;
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеСклад") Тогда
		
		//+++АК sole 2018.07.26 ИП-00018320.04
		ПеремещениеСкладСсылка = ДанныеЗаполнения;
		//---АК sole 2018.07.26 ИП-00018320.04
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПеремещениеСклад.Ссылка КАК Основание,
			|	ПеремещениеСклад.СкладПолучатель КАК Склад,
			|	ПеремещениеСклад.ЭтоВозвратПоставщику КАК ЭтоВозвратПоставщику
			|ИЗ
			|	Документ.ПеремещениеСклад КАК ПеремещениеСклад
			|ГДЕ
			|	ПеремещениеСклад.Ссылка = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПеремещениеСкладТовары.НомерСтроки,
			|	ПеремещениеСкладТовары.Номенклатура,
			|	ПеремещениеСкладТовары.Характеристика,
			|	ПеремещениеСкладТовары.ЕдиницаИзмерения,
			|	ПеремещениеСкладТовары.КоличествоПолучатель КАК Количество,
			|	ПеремещениеСкладТовары.Отклонение,
			|	ПеремещениеСкладТовары.ДатаПроизводства
			|ИЗ
			|	Документ.ПеремещениеСклад.Товары КАК ПеремещениеСкладТовары
			|ГДЕ
			|	ПеремещениеСкладТовары.Ссылка = &ДокументОснование");
		
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
		Результаты = Запрос.ВыполнитьПакет();
		Шапка			= Результаты[0];
		ТаблицаТовары	= Результаты[1];
		Если Шапка.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Шапка.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если Выборка.ЭтоВозвратПоставщику Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику;
		Иначе
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение;
		КонецЕсли;
		
		ЭтотОбъект.Товары.Загрузить(ТаблицаТовары.Выгрузить());
		
	//+++АК MOSD 2018.11.27 ЗА-00019570
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВебЗаказПокупателя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =  
			"ВЫБРАТЬ
			|	ВебЗаказПокупателя.Ссылка КАК Основание,
			|	ВебЗаказПокупателя.Дата КАК Дата,
			|	ВебЗаказПокупателя.Склад КАК Склад,
			|	ВебЗаказПокупателя.Организация КАК Организация,
			|	ВебЗаказПокупателя.Заказчик КАК Получатель,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Реализация) КАК ВидОперации,
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.НеОбработан) КАК Статус
			|ИЗ
			|	Документ.ВебЗаказПокупателя КАК ВебЗаказПокупателя
			|ГДЕ
			|	ВебЗаказПокупателя.Ссылка = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаЗаполнениеНаОснованииВебЗаказаПокупателяТовары();
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());	
		
	//---АК MOSD 	 	
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаЗаполнениеНаОснованииВебЗаказаПокупателяТовары()
	Возврат "ВЫБРАТЬ
		    |	ВебЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		    |	ВебЗаказПокупателяТовары.Характеристика КАК Характеристика,
		    |	ВебЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		    |	СУММА(ВебЗаказПокупателяТовары.Количество) КАК Количество
		    |ПОМЕСТИТЬ втТовары
		    |ИЗ
		    |	Документ.ВебЗаказПокупателя.Товары КАК ВебЗаказПокупателяТовары
		    |ГДЕ
		    |	ВебЗаказПокупателяТовары.Ссылка = &ДокументОснование
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	ВебЗаказПокупателяТовары.Номенклатура,
		    |	ВебЗаказПокупателяТовары.Характеристика,
		    |	ВебЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков
		    |
		    |ИНДЕКСИРОВАТЬ ПО
		    |	Номенклатура,
		    |	Характеристика,
		    |	ЕдиницаИзмерения
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	втТовары.Номенклатура КАК Номенклатура,
		    |	втТовары.Характеристика КАК Характеристика,
		    |	втТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		    |	втТовары.Количество,
		    |	ЕСТЬNULL(ТоварыНаСкладахОстатки.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПроизводства,
		    |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, втТовары.Количество) КАК КоличествоОстаток
		    |ПОМЕСТИТЬ втОстаткиТоваров
		    |ИЗ
		    |	втТовары КАК втТовары
		    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		    |		ПО втТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		    |			И втТовары.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		    |			И втТовары.ЕдиницаИзмерения = ТоварыНаСкладахОстатки.ЕдиницаИзмерения
		    |			И (ТоварыНаСкладахОстатки.КоличествоОстаток > 0)
		    |
		    |ОБЪЕДИНИТЬ
		    |
		    |ВЫБРАТЬ
		    |	втТовары.Номенклатура,
		    |	втТовары.Характеристика,
		    |	втТовары.ЕдиницаИзмерения,
		    |	втТовары.Количество,
		    |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		    |	втТовары.Количество
		    |ИЗ
		    |	втТовары КАК втТовары
		    |
		    |ИНДЕКСИРОВАТЬ ПО
		    |	Номенклатура,
		    |	Характеристика,
		    |	ЕдиницаИзмерения,
		    |	ДатаПроизводства
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	втОстаткиТоваров.Номенклатура,
		    |	втОстаткиТоваров.Характеристика,
		    |	втОстаткиТоваров.ЕдиницаИзмерения,
		    |	втОстаткиТоваров.Количество,
		    |	втОстаткиТоваров.ДатаПроизводства,
		    |	втОстаткиТоваров.КоличествоОстаток,
		    |	СУММА(ЕСТЬNULL(втОстаткиТоваров1.КоличествоОстаток, 0)) КАК КоличествоОстатокНИ
		    |ПОМЕСТИТЬ втОстаткиНИ
		    |ИЗ
		    |	втОстаткиТоваров КАК втОстаткиТоваров
		    |		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиТоваров КАК втОстаткиТоваров1
		    |		ПО втОстаткиТоваров.Номенклатура = втОстаткиТоваров1.Номенклатура
		    |			И втОстаткиТоваров.Характеристика = втОстаткиТоваров1.Характеристика
		    |			И втОстаткиТоваров.ЕдиницаИзмерения = втОстаткиТоваров1.ЕдиницаИзмерения
		    |			И втОстаткиТоваров.ДатаПроизводства < втОстаткиТоваров1.ДатаПроизводства
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	втОстаткиТоваров.Номенклатура,
		    |	втОстаткиТоваров.Характеристика,
		    |	втОстаткиТоваров.ЕдиницаИзмерения,
		    |	втОстаткиТоваров.Количество,
		    |	втОстаткиТоваров.ДатаПроизводства,
		    |	втОстаткиТоваров.КоличествоОстаток
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	втОстаткиНИ.Номенклатура,
		    |	втОстаткиНИ.Характеристика,
		    |	втОстаткиНИ.ЕдиницаИзмерения,
		    |	втОстаткиНИ.ДатаПроизводства,
		    |	ВЫБОР
		    |		КОГДА втОстаткиНИ.Количество - втОстаткиНИ.КоличествоОстатокНИ > втОстаткиНИ.КоличествоОстаток
		    |			ТОГДА втОстаткиНИ.КоличествоОстаток
		    |		ИНАЧЕ втОстаткиНИ.Количество - втОстаткиНИ.КоличествоОстатокНИ
		    |	КОНЕЦ КАК Количество
		    |ИЗ
		    |	втОстаткиНИ КАК втОстаткиНИ
		    |ГДЕ
		    |	втОстаткиНИ.Количество > втОстаткиНИ.КоличествоОстатокНИ"; 
	
КонецФункции
//---АК MOSD 	 	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	//+++АК BARA 2018.03.29 ИП-00018166  
	Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка) = Ложь и ЗначениеЗаполнено(ЭтотОбъект.ПричинаПеревозки)=Ложь Тогда 
		ЭтотОбъект.ПричинаПеревозки = Перечисления.ПричиныПеревозки.ОсновнаяПоставка;
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Владелец.СторонняяПереработка") = Истина Тогда
	
		ВыполнятьДвиженияДатойДокумента = Истина;
	КонецЕсли;	
		
	Если СборкаТерминаломЗакончена Тогда
		ПровереноОператором = Истина;
	КонецЕсли;	
	
	Товары.Сортировать("Номенклатура");	

	Если НЕ ОбменДанными.Загрузка И ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу И
		(РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение) И НЕ ПометкаУдаления
		//+++АК BELN 2018.09.10 ИП-00019713
		И НЕ ПризкакПодтвержденияВФинУчете
		//---АК BELN 2018.09.10                                                
		Тогда
		
		Отказ = ПроверитьДоступныеСкладыПриОтгрузкеТехнологу(Склад, Товары.Выгрузить(), Отказ);
		
	//---АК mika ИП-00016990.03
	
		Если Отказ Тогда
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	//mika
	
	Если НЕ ЭтоНовый() Тогда
		СтараяОперация_Оборудование = (Ссылка.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку);
	Иначе
		СтараяОперация_Оборудование = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
	КонецЕсли;
	
	//Если документ проведен, и это не оборудование, то менять на оборудование нельзя
	НоваяОперация_Оборудование = (ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку);
	Если ЭтотОбъект.Ссылка.Проведен Тогда
		Если Не СтараяОперация_Оборудование И НоваяОперация_Оборудование Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено в проведенных документах с операциями, отличными от оборудования, менять на операции оборудования");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый()
		И НЕ ЗначениеЗаполнено(ПриемкаВМагазинеБезПересчета)
		И ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку Тогда
		//Если Склад.ПриемкаТовараМагазиномБезПересчета
		//	И Получатель.ПриемкаТовараБезПересчета Тогда
		Если Получатель.ПриемкаТовараБезПересчета Тогда
			//проверим может уже есть документ с присвоенным номером рандомным
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	МИНИМУМ(РасходныйОрдерСклад.ПриемкаВМагазинеБезПересчета) КАК ПриемкаВМагазинеБезПересчета
			               |ИЗ
			               |	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
			               |ГДЕ
			               |	РасходныйОрдерСклад.ДатаРаспределения = &ДатаРаспределения
			               |	И РасходныйОрдерСклад.Получатель = &Получатель
			               |	И РасходныйОрдерСклад.ПриемкаВМагазинеБезПересчета <> 0";
			Запрос.УстановитьПараметр("Получатель", Получатель);
			Запрос.УстановитьПараметр("ДатаРаспределения", ДатаРаспределения);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПриемкаВМагазинеБезПересчета = Выборка.ПриемкаВМагазинеБезПересчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПриемкаВМагазинеБезПересчета) Тогда
				ЗапросМагазинаСПересчетом = Новый Запрос();
				ЗапросМагазинаСПересчетом.УстановитьПараметр("Дата", ДатаРаспределения);
				ЗапросМагазинаСПересчетом.УстановитьПараметр("Магазин", Получатель);
				//+++АК BELN 2018.03.29
				УстановитьПривилегированныйРежим(Истина);
				ЗапросМагазинаСПересчетом.Текст = "ВЫБРАТЬ
				                                  |	МагазиныКПересчетуНаДату.Магазин
				                                  |ИЗ
				                                  |	РегистрСведений.МагазиныКПересчетуНаДату КАК МагазиныКПересчетуНаДату
				                                  |ГДЕ
				                                  |	МагазиныКПересчетуНаДату.Дата = &Дата
				                                  |	И МагазиныКПересчетуНаДату.Магазин = &Магазин";
				
				РезультатМагазинСПересчетом = ЗапросМагазинаСПересчетом.Выполнить();
				Если НЕ РезультатМагазинСПересчетом.Пустой() Тогда
					ПриемкаВМагазинеБезПересчета = -2;
				Иначе
					ПриемкаВМагазинеБезПересчета = -1;
				КонецЕсли;	
				ЗапросМагазинаСПересчетом.Текст = "ВЫБРАТЬ
				                                  |	МагазиныКПересчетуНаДату.Магазин
				                                  |ИЗ
				                                  |	РегистрСведений.МагазиныКПересчетуНаДатуИскл КАК МагазиныКПересчетуНаДату
				                                  |ГДЕ
				                                  |	МагазиныКПересчетуНаДату.Дата = &Дата
				                                  |	И МагазиныКПересчетуНаДату.Магазин = &Магазин";
				
				РезультатМагазинСПересчетом = ЗапросМагазинаСПересчетом.Выполнить();
				Если НЕ РезультатМагазинСПересчетом.Пустой() Тогда
					ПриемкаВМагазинеБезПересчета = 0;
				КонецЕсли;	
				
				
				
				//---АК BELN 2018.03.29 
				
				//Попытка
				//	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
				//	ПриемкаВМагазинеБезПересчета = ГСЧ.СлучайноеЧисло(1, 7) * (-1);
				//	Если ПриемкаВМагазинеБезПересчета = 2
				//		ИЛИ ПриемкаВМагазинеБезПересчета = -2 Тогда
				//		//тогда все так и оставляем, будет контрольный пересчет в магазине
				//	Иначе
				//		ПриемкаВМагазинеБезПересчета = 1 * ?(ПриемкаВМагазинеБезПересчета < 0, -1, 1);
				//	КонецЕсли;	
				//Исключение
				//КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//+++АК sils 18.07.2018 ИП-00019013
		//Если НЕ Ссылка.Проведен
		Если НЕ Ссылка.Проведен и не ЭтотОбъект.ВыполнятьДвиженияДатойДокумента
		//---АК	
			И НеМенятьДатуПриПроведении = Ложь Тогда
			Дата = ТекущаяДата();
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику Тогда
			Если НЕ ЗначениеЗаполнено(Получатель) Тогда
				Сообщение = Новый СообщениеПользователю();
			    Сообщение.Текст = "Не указан поставщик, кому происходит возврат";
			    Сообщение.Поле = "Получатель";
			    Сообщение.УстановитьДанные(ЭтотОбъект);
			    Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТекДата = ТекущаяДата(); //можно брать эту, т.к. код выполняется на сервере и дата будет серверная
		//временное разрешение для финансистов вносить документы с дивжениями датой документов
		Если НЕ ВыполнятьДвиженияДатойДокумента Тогда
			//ИЛИ ТекДата >= '20140201' Тогда
			ТабИзмененийВДвижениях = ПолучитьТаблицуИзмененийВДвижениях();
			Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
				СтрокаТаб = ИзмененияДвижений.Добавить();
				СтрокаТаб.ДатаИзменения = ТекДата;
				СтрокаТаб.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		Иначе
			Если ИзмененияДвижений.Количество() = 0 Тогда
				СтрокаТаб = ИзмененияДвижений.Добавить();
				СтрокаТаб.ДатаИзменения = Дата;
				СтрокаТаб.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;	
		КонецЕсли;	
		
		ПроверитьБлокировкуТоваровДляРаспределения(Отказ);
		
		//+++АК sils 13.06.2018 ИП-00018394
		ПроверкаРеклМатериалов(Отказ);
		//---АК
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		//Общий запрет
		ЕстьПравоОтменять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуСкладскихДокументов, Ложь);
		
		//По основным средствам разрешение может быть
		Если НоваяОперация_Оборудование Тогда
			ЕстьПравоОтменять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуСкладскихДокументовПоОС, Ложь);
		КонецЕсли;
		
		Если НЕ ЕстьПравоОтменять Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У вас нет права отменять складские документы с видом операции """ + Строка(ВидОперации) + """");
			Возврат;
		КонецЕсли;
		ИзмененияДвижений.Очистить();
		
		ПроверитьБлокировкуТоваровДляРаспределения(Отказ);
		
		//+++АК LAGP 2018.07.12 ИП-00018946 Уведомление ответственному менеджеру по контрагенту при отмене возврата
		Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику Тогда
			ПроверитьОтправитьПисьмоМенеджеру();	
		КонецЕсли;
		//---АК LAGP
		
	КонецЕсли;
	
	#Область АК_ОтключенныйКод
	//+++АК sole 2018.06.18 ИП-00018725^02
	////+++АК VERN 2016.07.21 12796.01 проверка привязки перевозчика к автомобилю
	//Если НЕ ОбменДанными.Загрузка и ЗначениеЗаполнено(Автомобиль) и НЕ ЗначениеЗаполнено(Автомобиль.Перевозчик) Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//    Сообщение.Текст = "К автомобилю "+Автомобиль+" не привязан перевозчик";
	//    Сообщение.Поле = "Автомобиль";
	//    Сообщение.УстановитьДанные(ЭтотОбъект);
	//    Сообщение.Сообщить();
	//КонецЕсли;
	////---АК VERN 2016.07.21 12796.01
	//---АК sole 2018.06.18 ИП-00018725^02 
	#КонецОбласти
	
КонецПроцедуры

//+++АК LATV 2018.06.24 ИП-00018971
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	

	Движения.ЗаявкиНаРекламныеМатериалы.Записывать = Истина;
	
	//Оборудование
	Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда
		
		ОтразитьОборудованиеПоЗаявкамНаСкладах(); //ПАА Проверить необходимость этого
		Оборудование_ВыполнитьДвижения(Отказ);
		Возврат;
		
	КонецЕсли;
	
	//Всё остальное
	//+++АК BELN 2018.08.22 ИП-00019147      
	//ОтразитьДвиженияТоварыНаСкладах(Отказ);
	ОтразитьДвиженияТоварыНаСкладах(Отказ,ДополнительныеСвойства.Свойство("ИзМП"));
	//---АК BELN 2018.08.22 
	ОтразитьДвиженияЗаявкаНаСкладах(Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеВСебестоимость Тогда
		АК_ОтразитьДвиженияПоСписаниюВСебестоимость(Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы") Тогда
		Если Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
			ОтразитьДвиженияЗаявкиНаРекламныеМатериалы(Отказ);
		КонецЕсли;
		
		ОтразитьДвиженияДвижениеКонвертовРеклама(Отказ);
	КонецЕсли;
	
	ОтразитьДвиженияПоПерсональнойУпаковке();
	
	АК_УчетМСФО.ОтразитьСостояниеОС(ЭтотОбъект);
	
	ОтразитьДвиженияПоРегиструБухгалтерии(Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ФоноваяОбработкаЗаявокНаЭтикетку",,Строка(Ссылка.УникальныйИдентификатор()),"Фоновая обработка заявок на этикетку");
	
КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//+++shae 2018.08.07 ИП-00019236  
	СкладыСервер.ПроверитьНаСоответствиеОрганизацииЗакупки(ЭтотОбъект.Организация, ЭтотОбъект.Товары.Выгрузить(), Отказ);		
	//---shae 2018.08.07 ИП-00019236  

	Если Справочники.Склады.ДвиженияЗаблокированы(Склад) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения по складу %1 заблокированы! Проведение невозможно.'"), Склад);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Склад",, Отказ);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда
		
		Если Не Оборудование_РеквизитыЗаполнены() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеВСебестоимость Тогда
		
		СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.СписаниеПрочихРасходов, Дата);
		Если Не ЗначениеЗаполнено(СтруктураНастроек.СтатьяДвиженияТоваров) Тогда
			ТекстСообщения = НСтр("ru = 'Не настроен вид отражения операций в учете ""Списание прочих расходов""! Проведение невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		ТаблицаКоэффициентов = Документы.РасходныйОрдерСклад.ПолучитьКоэффициентыРаспределения(ЭтотОбъект);
		Если ТаблицаКоэффициентов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось получить базу распределения по товарам! Отсутствуют документы ПО в текущем месяце по товарам, на которые следует списать себестоимость.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//+++АК sole 2018.07.26 ИП-00018320.04
Процедура ПриЗаписи(Отказ)
	
	ДобавитьРасходныйОрдерВЗаявкуНаПеревозку();
	
	//+++АК ILIK 2018.08.10 ИП-00019492
	Если Не Отказ Тогда
		ПометитьНаУдалениеВозвратыПоставщику();
	КонецЕсли;
	//---АК ILIK
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияТоварыНаСкладах(Отказ,ИзМП=Ложь)

	Если Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
		//перед проверкой остатков надо удалить все расходные движения
		Движения.ТоварыНаСкладах.Прочитать();
		ТабДвижения = Движения.ТоварыНаСкладах.Выгрузить();
		Движения.ТоварыНаСкладах.Очистить();
		Движения.ТоварыНаСкладах.Записать();
		Движения.ТоварыНаСкладах.Загрузить(ТабДвижения);
	Иначе
		Движения.ТоварыНаСкладах.Прочитать();
	КонецЕсли;
	
	Движения.ТоварыНаСкладах.Записывать = Истина;
	
	
	//временное разрешение для финансистов вносить документы с дивжениями датой документов
	Если НЕ ВыполнятьДвиженияДатойДокумента Тогда
		
		//+++АК BELN 2018.08.22 ИП-00019147 
		//Если ИзМП Тогда
		//	ТабИзмененийВДвиженияхПлюс=ТабИзмененийВДвижениях.СкопироватьКолонки();	
		//	ТабИзмененийВДвиженияхМинус=ТабИзмененийВДвижениях.СкопироватьКолонки();
		//	Для каждого Стр Из ТабИзмененийВДвижениях Цикл
		//		Если Стр.Количество<0 Тогда
		//			ЗаполнитьЗначенияСвойств(ТабИзмененийВДвиженияхМинус.Добавить(),Стр);
		//		КонецЕсли; 
		//		Если Стр.Количество>0 Тогда
		//			ЗаполнитьЗначенияСвойств(ТабИзмененийВДвиженияхПлюс.Добавить(),Стр);
		//		КонецЕсли; 
		//	
		//	КонецЦикла; 
		//	Если ТабИзмененийВДвиженияхПлюс.Количество()=0 И НЕ ТабИзмененийВДвиженияхМинус.Количество()=0 Тогда
		//		ТЗ=ТабИзмененийВДвиженияхМинус;
		//	ИначеЕсли НЕ ТабИзмененийВДвиженияхПлюс.Количество()=0 И ТабИзмененийВДвиженияхМинус.Количество()=0 Тогда
		//		ТЗ=ТабИзмененийВДвиженияхПлюс;
		//	Иначе	
		//	    ТабИзмененийВДвиженияхПлюс.Свернуть("Номенклатура,Характеристика","Количество");
		//		Для каждого Стр Из ТабИзмененийВДвиженияхПлюс Цикл
		//			МасСтр=ТабИзмененийВДвиженияхМинус.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",Стр.Номенклатура,,Стр.Характеристика));
		//			Кол=МасСтр.Количество();
		//			Для Сч=0 По Кол-1 Цикл
		//				Если Сч=Кол-1 Тогда
		//					МасСтр[Сч].Количество=МасСтр[Сч].Количество+Стр.Количество;
		//				Иначе
		//					ТекКол=МасСтр[Сч].Количество;
		//					МасСтр[Сч].Количество=?(МасСтр[Сч].Количество+Стр.Количество>=0,0,МасСтр[Сч].Количество+Стр.Количество);
		//					Стр.Количество=?(ТекКол+Стр.Количество<=0,0,ТекКол+Стр.Количество);
		//				КонецЕсли; 
		//			КонецЦикла; 
		//		КонецЦикла; 
		//		Кол=ТабИзмененийВДвиженияхМинус.Количество();
		//		Для Сч=0 По Кол-1 Цикл
		//			Если ТабИзмененийВДвиженияхМинус[Кол-1-Сч].Количество=0 Тогда
		//				ТабИзмененийВДвиженияхМинус.Удалить(Кол-1-Сч);
		//			КонецЕсли; 	
		//		КонецЦикла; 
		//	КонецЕсли; 
		//	ТЗ=ТабИзмененийВДвиженияхМинус;
		//	
		//	
		//КонецЕсли;
		//---АК BELN 2018.08.22 
		//	
		Для Каждого СтрокаДвижение Из ТабИзмененийВДвижениях Цикл
			//+++АК BELN 2018.08.22 ИП-00019147  
			Если ИзМП И СтрокаДвижение.Количество>0 Тогда
				Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
				Движение.Период 			= ТекДата;
				Движение.Склад 				= СтрокаДвижение.Склад;
				Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
				Движение.Характеристика 	= СтрокаДвижение.Характеристика;
				Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
				Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
				Движение.Количество 		= СтрокаДвижение.Количество;
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
			
			КонецЕсли; 
			Если ИзМП И СтрокаДвижение.Количество<0 Тогда
				Продолжить;
			КонецЕсли; 
			//---АК BELN 2018.08.22 
			
			// Это приход на склад переработки
			Если СтрокаДвижение.Склад <> Склад
					И ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку
					И СтрокаДвижение.ЭтоСкладПереработки Тогда
				Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
				
			Иначе
				Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
			КонецЕсли;
			Движение.Период 			= ТекДата;
			Движение.Склад 				= СтрокаДвижение.Склад;
			Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
			Движение.Характеристика 	= СтрокаДвижение.Характеристика;
			Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
			Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
			Движение.Количество 		= СтрокаДвижение.Количество;
			Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
			
		КонецЦикла;
		//+++АК BELN 2018.08.22  ИП-00019147 
		Если ИзМП Тогда
			
			Для Каждого СтрокаДвижение Из ТабИзмененийВДвижениях Цикл
						
				// Это приход на склад переработки
				Если СтрокаДвижение.Склад <> Склад
						И ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку
						И СтрокаДвижение.ЭтоСкладПереработки Тогда
					Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
					
				Иначе
					Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
				КонецЕсли;
				Движение.Период 			= ТекДата;
				Движение.Склад 				= СтрокаДвижение.Склад;
				Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
				Движение.Характеристика 	= СтрокаДвижение.Характеристика;
				Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
				Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
				Движение.Количество 		= СтрокаДвижение.Количество;
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
				
			КонецЦикла;
		КонецЕсли; 
	
		//если были инвентаризации между датой документа и датой изменения, то нужно выполнить сторнирующие записи для движений
		//которые могут изменить результаты инвентаризации
		//Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
		Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
		
		//---АК BELN 2018.08.22 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Таб", ТабИзмененийВДвижениях);
			Если Дата >= '20140904' Тогда
				Запрос.УстановитьПараметр("ДатаДок", Макс(Дата, ДатаРаспределения));
			Иначе	
				Запрос.УстановитьПараметр("ДатаДок", Дата);
			КонецЕсли;	
			Запрос.УстановитьПараметр("ДатаДвижений", ТекДата);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Таб.Склад,
			|	Таб.Номенклатура,
			|	Таб.Характеристика,
			|	Таб.ДатаПроизводства,
			|	Таб.ЕдиницаИзмерения,
			|	Таб.Количество
			|ПОМЕСТИТЬ ВТ_Движения
			|ИЗ
			|	&Таб КАК Таб
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Движения.Склад,
			|	ВТ_Движения.Номенклатура,
			|	ВТ_Движения.Характеристика,
			|	ВТ_Движения.ДатаПроизводства,
			|	ВТ_Движения.ЕдиницаИзмерения,
			|	ВТ_Движения.Количество * -1 КАК Количество,
			|	ВЗ_Инвентаризации.Инвентаризация
			|ИЗ
			|	ВТ_Движения КАК ВТ_Движения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ВЗ_Запрос.Номенклатура КАК Номенклатура,
			|			ВЗ_Запрос.Характеристика КАК Характеристика,
			|			ВЗ_Запрос.ДатаПроизводства КАК ДатаПроизводства,
			|			ВЗ_Запрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|			ВЗ_Запрос.Склад КАК Склад,
			|			МАКСИМУМ(ВЗ_Инвентаризации.Инвентаризация) КАК Инвентаризация
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ИнвентаризацияСкладТовары.Номенклатура КАК Номенклатура,
			|				ИнвентаризацияСкладТовары.Характеристика КАК Характеристика,
			|				ИнвентаризацияСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
			|				ИнвентаризацияСкладТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|				МИНИМУМ(ИнвентаризацияСкладТовары.Ссылка.Дата) КАК Дата,
			|				ВЫБОР
			|					КОГДА ИнвентаризацияСкладТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|						ТОГДА ИнвентаризацияСкладТовары.Склад
			|					ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
			|				КОНЕЦ КАК Склад
			|			ИЗ
			|				Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
			//+++АК Susk (Суслин К.В.) 2018.10.10 б/н по просьбе vert
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Движения КАК ВТ_Движения
			|					ПО (ВТ_Движения.Склад = ВЫБОР
			|							КОГДА ИнвентаризацияСкладТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|								ТОГДА ИнвентаризацияСкладТовары.Склад
			|							ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
			|						КОНЕЦ)
			|						И (ВТ_Движения.Номенклатура = ИнвентаризацияСкладТовары.Номенклатура)
			|						И (ВТ_Движения.Характеристика = ИнвентаризацияСкладТовары.Характеристика)
			|						И (ВТ_Движения.ДатаПроизводства = ИнвентаризацияСкладТовары.ДатаПроизводства)
			|						И (ВТ_Движения.ЕдиницаИзмерения = ИнвентаризацияСкладТовары.ЕдиницаИзмерения)
			//---АК Susk (Суслин К.В.)			 
			|			ГДЕ
			|				ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
			|				И ИнвентаризацияСкладТовары.Ссылка.Дата МЕЖДУ &ДатаДок И &ДатаДвижений
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ИнвентаризацияСкладТовары.Номенклатура,
			|				ИнвентаризацияСкладТовары.Характеристика,
			|				ИнвентаризацияСкладТовары.ДатаПроизводства,
			|				ИнвентаризацияСкладТовары.ЕдиницаИзмерения,
			|				ВЫБОР
			|					КОГДА ИнвентаризацияСкладТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|						ТОГДА ИнвентаризацияСкладТовары.Склад
			|					ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
			|				КОНЕЦ) КАК ВЗ_Запрос
			|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					ИнвентаризацияСкладТовары.Ссылка.Дата КАК Дата,
			|					ИнвентаризацияСкладТовары.Ссылка КАК Инвентаризация
			|				ИЗ
			|					Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
			|				ГДЕ
			|					ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
			|					И ИнвентаризацияСкладТовары.Ссылка.Дата МЕЖДУ &ДатаДок И &ДатаДвижений) КАК ВЗ_Инвентаризации
			|				ПО ВЗ_Запрос.Дата = ВЗ_Инвентаризации.Дата
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ВЗ_Запрос.Номенклатура,
			|			ВЗ_Запрос.Характеристика,
			|			ВЗ_Запрос.ДатаПроизводства,
			|			ВЗ_Запрос.ЕдиницаИзмерения,
			|			ВЗ_Запрос.Склад) КАК ВЗ_Инвентаризации
			|		ПО ВТ_Движения.Склад = ВЗ_Инвентаризации.Склад
			|			И ВТ_Движения.Номенклатура = ВЗ_Инвентаризации.Номенклатура
			|			И ВТ_Движения.Характеристика = ВЗ_Инвентаризации.Характеристика
			|			И ВТ_Движения.ДатаПроизводства = ВЗ_Инвентаризации.ДатаПроизводства
			|			И ВТ_Движения.ЕдиницаИзмерения = ВЗ_Инвентаризации.ЕдиницаИзмерения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Движения";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Склад <> Склад Тогда
					
					Если Дата >= '20131201' Тогда
						
						// Склад переработчика
						Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
						Движение.Период 			= ТекДата;
						Движение.Склад 				= Выборка.Склад;
						Движение.Номенклатура 		= Выборка.Номенклатура;
						Движение.Характеристика 	= Выборка.Характеристика;
						Движение.ДатаПроизводства 	= Выборка.ДатаПроизводства;
						Движение.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
						Движение.Количество 		= Выборка.Количество;
						Движение.КорректировкаПоИнвентаризации = Выборка.Инвентаризация;
						Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
					
					КонецЕсли;
					
				Иначе
					
					Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
					Движение.Период 			= ТекДата;
					Движение.Склад 				= Выборка.Склад;
					Движение.Номенклатура 		= Выборка.Номенклатура;
					Движение.Характеристика 	= Выборка.Характеристика;
					Движение.ДатаПроизводства 	= Выборка.ДатаПроизводства;
					Движение.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
					Движение.Количество 		= Выборка.Количество;
					Движение.КорректировкаПоИнвентаризации = Выборка.Инвентаризация;
					Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
					
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
	Иначе //отражение дивжений датой документа
		
		// Это приход на склад переработки
		ЭтоОтгрузкаВПереработку = Дата >= '20131201' И ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
		Если ЭтоОтгрузкаВПереработку Тогда
			СкладПер = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Получатель, Организация);
		КонецЕсли;
		
		Движения.ТоварыНаСкладах.Очистить();
		Для Каждого СтрокаДвижение Из Товары Цикл
			Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
			Движение.Период 			= Дата;
			Движение.Склад 				= Склад;
			Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
			Движение.Характеристика 	= СтрокаДвижение.Характеристика;
			Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
			Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
			Движение.Количество 		= СтрокаДвижение.Количество;
			Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
			
			Если ЭтоОтгрузкаВПереработку Тогда
				Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
				Движение.Период 			= Дата;
				Движение.Склад 				= СкладПер;
				Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
				Движение.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Движение.ДатаПроизводства 	= '00010101';
				Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
				Движение.Количество 		= СтрокаДвижение.Количество;
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияЗаявкаНаСкладах(Отказ)

	Движения.ЗаявкаНаСкладах.Записывать = Истина;
	
	Для Каждого Строка Из Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.ЗаявкаНаСклад) Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ЗаявкаНаСкладах.ДобавитьРасход();
		Движение.Период			= ТекДата;
		Движение.Номенклатура	= Строка.Номенклатура;
		Движение.Характеристика	= Строка.Характеристика;
		Движение.Количество		= Строка.Количество;
		Движение.АвторИзменений	= ПараметрыСеанса.ТекущийПользователь;
		Движение.Заявка			= Строка.ЗаявкаНаСклад;
	КонецЦикла;

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияЗаявкиНаРекламныеМатериалы(Отказ)

	флСпецодежда = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если не флСпецодежда и ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
			ВидРеклМатериала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовар.Номенклатура, "ВидРекламногоМатериала");
			Если ВидРеклМатериала = Перечисления.ПодразделРекламныхМатериалов.ФормаДляДействующихВВ Тогда
				флСпецодежда = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если флСпецодежда
	   И ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы")
	   И Основание <> Документы.ЗаявкаНаРекламныеМатериалы.ПустаяСсылка()
	   И Основание.Дата >= '20180609' Тогда
		// Надо рассчитать номенклатура к какому сотруднику относится,
		// поскольку здесь только "Пол", а "Сотрудник" есть в документе-основании
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТЗ.Номенклатура,
			|	ТЗ.Характеристика,
			|	ТЗ.Пол,
			|	ТЗ.Количество
			|ПОМЕСТИТЬ ТЗ
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура,
			|	ЗаявкиНаРекламныеМатериалыОстатки.Характеристика,
			|	ВЫБОР
			|		КОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|						ТОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник.Физлицо.Пол
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка)
			|				КОНЕЦ
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка)
			|	КОНЕЦ КАК Пол,
			|	ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник,
			|	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток КАК КоличествоЗаявки,
			|	0 КАК КоличествоРО
			|ПОМЕСТИТЬ СводныеДанные
			|ИЗ
			|	РегистрНакопления.ЗаявкиНаРекламныеМатериалы.Остатки(&ТекДата, Заявка = &Заявка) КАК ЗаявкиНаРекламныеМатериалыОстатки
			|ГДЕ
			|	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток > 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТЗ.Номенклатура,
			|	ТЗ.Характеристика,
			|	ТЗ.Пол,
			|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка),
			|	0,
			|	ТЗ.Количество
			|ИЗ
			|	ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СводныеДанные.Номенклатура КАК Номенклатура,
			|	СводныеДанные.Характеристика КАК Характеристика,
			|	СводныеДанные.Пол КАК Пол,
			|	СводныеДанные.Сотрудник КАК Сотрудник,
			|	СУММА(СводныеДанные.КоличествоЗаявки) КАК КоличествоЗаявки,
			|	СУММА(СводныеДанные.КоличествоРО) КАК КоличествоРО
			|ИЗ
			|	СводныеДанные КАК СводныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	СводныеДанные.Номенклатура,
			|	СводныеДанные.Характеристика,
			|	СводныеДанные.Пол,
			|	СводныеДанные.Сотрудник
			|ИТОГИ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Пол,
			|	Сотрудник";
		
		Запрос.УстановитьПараметр("ТекДата", Дата);
		Запрос.УстановитьПараметр("Заявка", Основание);
		Запрос.УстановитьПараметр("ТЗ", Товары.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка_Номенклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока Выборка_Номенклатура.Следующий() Цикл
			Выборка_Характеристика = Выборка_Номенклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока Выборка_Характеристика.Следующий() Цикл
				Выборка_Пол = Выборка_Характеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Пол");
				Пока Выборка_Пол.Следующий() Цикл
					КоличествоВРО = Выборка_Пол.КоличествоРО;
					Если КоличествоВРО <= 0 Тогда
						Продолжить;
					КонецЕсли;
					Выборка_Сотрудник = Выборка_Пол.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
					Пока Выборка_Сотрудник.Следующий() Цикл
						Если КоличествоВРО <= 0 Тогда
							Продолжить;
						КонецЕсли;
						Если Выборка_Сотрудник.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
							Продолжить;
						КонецЕсли;
						Если Выборка_Сотрудник.КоличествоЗаявки <= 0 Тогда
							Продолжить;
						КонецЕсли;
						РасчКоличество = Мин(КоличествоВРО, Выборка_Сотрудник.КоличествоЗаявки);
						КоличествоВРО = КоличествоВРО - РасчКоличество;
						
						Движение = Движения.ЗаявкиНаРекламныеМатериалы.ДобавитьРасход();
						Движение.Период = Дата;
						Движение.Заявка = Основание;
						
						Движение.Номенклатура = Выборка_Сотрудник.Номенклатура;
						Движение.Характеристика = Выборка_Сотрудник.Характеристика;
						Движение.Сотрудник = Выборка_Сотрудник.Сотрудник;
						
						Движение.Количество = РасчКоличество;
					КонецЦикла;
					Если КоличествоВРО > 0 Тогда
						Движение = Движения.ЗаявкиНаРекламныеМатериалы.ДобавитьРасход();
						Движение.Период = Дата;
						Движение.Заявка = Основание;
						
						Движение.Номенклатура = Выборка_Пол.Номенклатура;
						Движение.Характеристика = Выборка_Пол.Характеристика;
						Движение.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
						
						Движение.Количество = КоличествоВРО;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТовар Из Товары Цикл
			Движение = Движения.ЗаявкиНаРекламныеМатериалы.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Заявка = Основание;
			Движение.Номенклатура = СтрокаТовар.Номенклатура;
			Движение.Характеристика = СтрокаТовар.Характеристика;
			Движение.Количество = СтрокаТовар.Количество;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияДвижениеКонвертовРеклама(Отказ)

	Если Основание.ТипЗаявки = ПредопределенноеЗначение("Перечисление.ТипЗаявкиНаРекламныеМатериалы.МассоваяРассылка") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтруктурныеЕдиницы.Ссылка,
			|	СтруктурныеЕдиницы.ТипРозничнойТочки
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
		ТЗТТ = Запрос.Выполнить().Выгрузить();
		
		ЗаявкаНаНовыйМагазин	= Основание.ЗаявкаНаНовыйМагазин;
		ТипЗаявки				= Основание.ТипЗаявки;
		Для Каждого Стр Из ТорговыеТочки Цикл
			Мен = РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
			Мен.Период	= Дата;
			Мен.Заявка	= Основание;
			Мен.Ордер	= Ссылка;
			Мен.ТТ		= Стр.Магазин;
			Мен.ЗаявкаНаНовыйМагазин	= ЗаявкаНаНовыйМагазин;
			Мен.ТипЗаявки				= ТипЗаявки;
			Мен.ТипРозничнойТочки		= ТЗТТ.НайтиСтроки(Новый Структура("Ссылка",Стр.Магазин))[0].ТипРозничнойТочки;
			Мен.ПереданоВСборку			= Истина;
			Мен.Записать();
		КонецЦикла;
	Иначе
		Мен = РегистрыСведений.ДвижениеКонвертовРеклама.СоздатьМенеджерЗаписи();
		Мен.Период	= Дата;
		Мен.Заявка	= Основание;
		Мен.Ордер	= Ссылка;
		Мен.ТТ		= Основание.ТорговаяТочка;
		Мен.ЗаявкаНаНовыйМагазин	= Основание.ЗаявкаНаНовыйМагазин;
		Мен.ТипЗаявки				= Основание.ТипЗаявки;
		Мен.ТипРозничнойТочки		= Основание.ТорговаяТочка.ТипРозничнойТочки;
		Мен.ПереданоВСборку			= Истина;
		Мен.Записать();
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияПоРегиструБухгалтерии(Отказ)

	ВыполнитьДвиженияПоРегиструБухгалтерии = Ложь;
	ДополнительныеСвойства.Свойство("ОтложенноеПроведение", ВыполнитьДвиженияПоРегиструБухгалтерии); // Для совместимости
	Если ВыполнитьДвиженияПоРегиструБухгалтерии <> Истина Тогда
		ВыполнитьДвиженияПоРегиструБухгалтерии = ДопМодульСервер.ПолучитьЗначениеПраваПользователя("ФормированиеДвиженийВРБУНепосредственно", Ложь);
	КонецЕсли;
	
	Если ВыполнитьДвиженияПоРегиструБухгалтерии Тогда
		Движения.ТоварыНаСкладах.Записать(); //LATV: Эти движения используются для формирования движений в РБ Финансовый
		Движения.ТоварыНаСкладах.Записывать = Ложь;
		
		ДвиженияДокумента = Документы.РасходныйОрдерСклад.ДвиженияДокумента(Ссылка);
		Если ДвиженияДокумента.Финансовый = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Движения.Финансовый.Записывать = Истина;
		Движения.Финансовый.Загрузить(ДвиженияДокумента.Финансовый);
	Иначе
		РегистрыСведений.ОтложенныеДвиженияДокументовПоБухРегистру.ДобавитьДокументВОчередь(Ссылка, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуИзмененийВДвижениях()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладах.Склад,
	               |	ТоварыНаСкладах.Номенклатура,
	               |	ТоварыНаСкладах.Характеристика,
	               |	ТоварыНаСкладах.ДатаПроизводства,
	               |	ТоварыНаСкладах.ЕдиницаИзмерения,
	               |	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
	               |			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА 1
	               |			ИНАЧЕ -1
	               |		КОНЕЦ) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Движения
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	               |ГДЕ
	               |	ТоварыНаСкладах.Регистратор = &Регистратор
				   //+++АК SHEP 2018.05.06 ИП-00018453
	               //|	И ТоварыНаСкладах.Склад.Владелец <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)
				   |	И НЕ ТоварыНаСкладах.Склад.Владелец.СторонняяПереработка
				   //---АК SHEP 2018.05.06
	               |	И ТоварыНаСкладах.Активность = ИСТИНА
	               |	И (ТоварыНаСкладах.КорректировкаПоИнвентаризации = НЕОПРЕДЕЛЕНО
	               |			ИЛИ ТоварыНаСкладах.КорректировкаПоИнвентаризации = ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладах.Склад,
	               |	ТоварыНаСкладах.Номенклатура,
	               |	ТоварыНаСкладах.Характеристика,
	               |	ТоварыНаСкладах.ДатаПроизводства,
	               |	ТоварыНаСкладах.ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Склад КАК Склад,
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Характеристика,
	               |	РасходныйОрдерСкладТовары.ДатаПроизводства,
	               |	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
	               |	РасходныйОрдерСкладТовары.Количество КАК Количество,
	               |	РасходныйОрдерСкладТовары.ЗаявкаНаСклад
	               |ПОМЕСТИТЬ ВТ_ТабТовары
	               |ИЗ
	               |	&Товары КАК РасходныйОрдерСкладТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_Движения.Склад, ВЗ_Товары.Склад) КАК Склад,
	               |	ЕСТЬNULL(ВТ_Движения.Номенклатура, ВЗ_Товары.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_Движения.Характеристика, ВЗ_Товары.Характеристика) КАК Характеристика,
	               |	ЕСТЬNULL(ВТ_Движения.ДатаПроизводства, ВЗ_Товары.ДатаПроизводства) КАК ДатаПроизводства,
	               |	ЕСТЬNULL(ВТ_Движения.ЕдиницаИзмерения, ВЗ_Товары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	               |	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) КАК Количество,
				   //+++АК BELN 2018.08.22 ИП-00019147      
				   |	Выбор когда ВТ_Движения.Количество есть NULL Тогда Истина Иначе Ложь Конец КАК НоваяСтрока,
				   //---АК BELN 2018.08.22 
	               |	ВЗ_Товары.ЗаявкаНаСклад,
	               |	ЛОЖЬ КАК ЭтоСкладПереработки
	               |ИЗ
	               |	ВТ_Движения КАК ВТ_Движения
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ТабТовары.Склад КАК Склад,
	               |			ВТ_ТабТовары.Номенклатура КАК Номенклатура,
	               |			ВТ_ТабТовары.Характеристика КАК Характеристика,
	               |			ВТ_ТабТовары.ДатаПроизводства КАК ДатаПроизводства,
	               |			ВТ_ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |			СУММА(ВТ_ТабТовары.Количество) КАК Количество,
	               |			ВТ_ТабТовары.ЗаявкаНаСклад КАК ЗаявкаНаСклад
	               |		ИЗ
	               |			ВТ_ТабТовары КАК ВТ_ТабТовары
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ТабТовары.Склад,
	               |			ВТ_ТабТовары.Номенклатура,
	               |			ВТ_ТабТовары.Характеристика,
	               |			ВТ_ТабТовары.ДатаПроизводства,
	               |			ВТ_ТабТовары.ЕдиницаИзмерения,
	               |			ВТ_ТабТовары.ЗаявкаНаСклад) КАК ВЗ_Товары
	               |		ПО ВТ_Движения.Склад = ВЗ_Товары.Склад
	               |			И ВТ_Движения.Номенклатура = ВЗ_Товары.Номенклатура
	               |			И ВТ_Движения.Характеристика = ВЗ_Товары.Характеристика
	               |			И ВТ_Движения.ДатаПроизводства = ВЗ_Товары.ДатаПроизводства
	               |			И ВТ_Движения.ЕдиницаИзмерения = ВЗ_Товары.ЕдиницаИзмерения
	               |ГДЕ
	               |	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Движения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ТабТовары";
				   
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Товары", ?(Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан ИЛИ Статус = Перечисления.СтатусыРасходныхОрдеров.Отменен, Товары.ВыгрузитьКолонки(), Товары.Выгрузить()));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СтруктурныеЕдиницыСторонняяПереработка", ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Организация)); //+++АК SHEP 2018.05.06 ИП-00018453
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Если Дата >= '20131201' Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения,
			//|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
			//|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//|				ТОГДА -1
			//|			ИНАЧЕ 1
			//|		КОНЕЦ) КАК Количество
			|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
			|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ) КАК Количество
			|ПОМЕСТИТЬ ВТ_Движения
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Регистратор = &Регистратор
			|	И ТоварыНаСкладах.Склад = &СкладПереработкиИзСсылки
			|	И ТоварыНаСкладах.Активность = ИСТИНА
			//|	И (ТоварыНаСкладах.КорректировкаПоИнвентаризации = НЕОПРЕДЕЛЕНО
			//|			ИЛИ ТоварыНаСкладах.КорректировкаПоИнвентаризации = ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&СкладПереработки КАК Склад,
			|	РасходныйОрдерСкладТовары.Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПроизводства,
			|	РасходныйОрдерСкладТовары.ЕдиницаИзмерения,
			|	РасходныйОрдерСкладТовары.Количество КАК Количество
			|ПОМЕСТИТЬ ВТ_ТабТовары
			|ИЗ
			|	&Товары КАК РасходныйОрдерСкладТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЗ_Товары.Склад КАК Склад,
			|	ВЗ_Товары.Номенклатура КАК Номенклатура,
			|	ВЗ_Товары.Характеристика КАК Характеристика,
			|	ВЗ_Товары.ДатаПроизводства КАК ДатаПроизводства,
			|	ВЗ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЗ_Товары.Количество КАК Количество
			|ПОМЕСТИТЬ ВТ_Подготовленная
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_ТабТовары.Склад КАК Склад,
			|		ВТ_ТабТовары.Номенклатура КАК Номенклатура,
			|		ВТ_ТабТовары.Характеристика КАК Характеристика,
			|		ВТ_ТабТовары.ДатаПроизводства КАК ДатаПроизводства,
			|		ВТ_ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		СУММА(ВТ_ТабТовары.Количество) КАК Количество
			|	ИЗ
			|		ВТ_ТабТовары КАК ВТ_ТабТовары
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ВТ_ТабТовары.Склад,
			|		ВТ_ТабТовары.Номенклатура,
			|		ВТ_ТабТовары.Характеристика,
			|		ВТ_ТабТовары.ДатаПроизводства,
			|		ВТ_ТабТовары.ЕдиницаИзмерения
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВТ_Движения.Склад,
			|		ВТ_Движения.Номенклатура,
			|		ВТ_Движения.Характеристика,
			|		ВТ_Движения.ДатаПроизводства,
			|		ВТ_Движения.ЕдиницаИзмерения,
			|		ВТ_Движения.Количество
			|	ИЗ
			|		ВТ_Движения КАК ВТ_Движения) КАК ВЗ_Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Подготовленная.Склад,
			|	ВТ_Подготовленная.Номенклатура,
			|	ВТ_Подготовленная.Характеристика,
			|	ВТ_Подготовленная.ДатаПроизводства,
			|	ВТ_Подготовленная.ЕдиницаИзмерения,
			|	СУММА(ВТ_Подготовленная.Количество) КАК Количество
			|ИЗ
			|	ВТ_Подготовленная КАК ВТ_Подготовленная
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Подготовленная.Склад,
			|	ВТ_Подготовленная.Номенклатура,
			|	ВТ_Подготовленная.Характеристика,
			|	ВТ_Подготовленная.ДатаПроизводства,
			|	ВТ_Подготовленная.ЕдиницаИзмерения
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВТ_Подготовленная.Количество) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Движения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ТабТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Подготовленная");
			
			Запрос.УстановитьПараметр("Регистратор", Ссылка);
			Запрос.УстановитьПараметр("Товары", ?(Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан ИЛИ Статус = Перечисления.СтатусыРасходныхОрдеров.Отменен, Товары.ВыгрузитьКолонки(), Товары.Выгрузить()));
			//+++АК SHEP 2018.05.06 ИП-00018453
			//Запрос.УстановитьПараметр("СкладПереработки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Получатель)); 
			//Запрос.УстановитьПараметр("СкладПереработкиИзСсылки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Ссылка.Получатель)); 
			Запрос.УстановитьПараметр("СкладПереработки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Получатель, Организация));
			Запрос.УстановитьПараметр("СкладПереработкиИзСсылки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Ссылка.Получатель, Ссылка.Организация));
			//---АК SHEP 2018.05.06
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий()Цикл
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ЭтоСкладПереработки = Истина;
				
			КонецЦикла;
			
		Иначе
			
			// Сторнируем движения по складу переработки
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения,
			|	СУММА(ТоварыНаСкладах.Количество * Выбор Когда ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) Тогда -1 Иначе 1 Конец) КАК Количество
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Регистратор = &Регистратор
			//+++АК SHEP 2018.05.06 ИП-00018453
			//|	И ТоварыНаСкладах.Склад.Владелец = Значение(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)
			|	И ТоварыНаСкладах.Склад.Владелец = &СтруктурныеЕдиницыСторонняяПереработка
			//---АК SHEP 2018.05.06
			|	И ТоварыНаСкладах.Активность = ИСТИНА
			|	И (ТоварыНаСкладах.КорректировкаПоИнвентаризации = НЕОПРЕДЕЛЕНО
			|			ИЛИ ТоварыНаСкладах.КорректировкаПоИнвентаризации = ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТоварыНаСкладах.Количество) <> 0");
			
			Запрос.УстановитьПараметр("Регистратор", Ссылка);
			Запрос.УстановитьПараметр("Склад", Склад); 
			Запрос.УстановитьПараметр("СтруктурныеЕдиницыСторонняяПереработка", ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Организация)); //+++АК SHEP 2018.05.06 ИП-00018453
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий()Цикл
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ЭтоСкладПереработки = Истина;
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ПроверитьБлокировкуТоваровДляРаспределения(Отказ)
	
	//
	ЕстьБлокировка = ДопМодульСервер.ЕстьБлокировкаТоваровДляРаспределения(ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), ЭтотОбъект.Склад.Владелец);
	Если ЕстьБлокировка Тогда
		Сообщить("Есть товары, заблокированные для распределения! Проведение / отмена проведения невозможны.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция Оборудование_РеквизитыЗаполнены()
	
	Результат = Истина;
	
	//Шапка
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Получатель"" не заполнено");
		Результат = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Сборщик) Тогда
		
		//+++AK susk
		// виртуальные склады
		
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Сборщик"" не заполнено");
		//Результат = Ложь;

		Если НЕ Склад.Владелец.id_TT = 11595 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Сборщик"" не заполнено");
			Результат = Ложь;
		КонецЕсли;
		
		//---AK susk
		
	КонецЕсли;
	
	//ТЧ Оборудование
	Для Каждого СтрокаТЧ Из Оборудование Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Оборудование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена колонка ""Оборудование"" в строке " + Строка(СтрокаТЧ.НомерСтроки) + " списка ""Оборудование""");
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Процедура ОтразитьОборудованиеПоЗаявкамНаСкладах()
	
	мЗаявкаНаСкладах = ЭтотОбъект.Движения.ЗаявкаНаСкладах;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		Движение = мЗаявкаНаСкладах.ДобавитьРасход();
		Движение.Период 			= ЭтотОбъект.Дата;
		Движение.Оборудование 		= СтрокаТЧ.Оборудование;
		Движение.Количество 		= 1;
		Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
		Движение.Заявка             = СтрокаТЧ.ЗаявкаНаСклад;
	КонецЦикла;
	
	мЗаявкаНаСкладах.Записать(Истина);
	
КонецПроцедуры

//+++АК LATV 2018.06.24 ИП-00018971
Процедура Оборудование_ВыполнитьДвижения(Отказ)

	УчетОС_МСФО = АК_УчетМСФОПривилегированный.ПолучитьПараметрыУчетаОС();
	Если Дата > УчетОС_МСФО.НачалоВеденияУчета Тогда
		АК_УчетМСФО.ОтразитьСостояниеОС(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

//++АК tuga №14567
Процедура ЗаполнитьДокументПоСписаниюЗаменителяУпаковки(ДанныеЗаполнения)Экспорт
	ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
	
	//
	Основание = ДанныеЗаполнения;
	Получатель = ДанныеЗаполнения.Поставщик;
	Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	
	//++AK GREK 13.09.17 ИП-00016703
	//
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Заявка,
		|	ВложенныйЗапрос.СтандартнаяЭтикетка КАК Этикетка,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка КАК СтандартнаяЭтикетка,
		|	ЗаявкаНаПечатьЭтикеткиЭтикетки.КоличествоСоСклада
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.Заявка КАК Заявка,
		|		Таблица.Номенклатура КАК СтандартнаяЭтикетка,
		|		Таблица.КоличествоКОтгрузкеОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(, Заявка = &Заявка) КАК Таблица
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Таблица.Заявка,
		|		Таблица.Номенклатура,
		|		Таблица.КоличествоКОтгрузкеОстаток
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Заявка,
		|		АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Номенклатура,
		|		АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.КоличествоКОтгрузке
		|	ИЗ
		|		РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковки
		|	ГДЕ
		|		АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Регистратор = &Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
		|		ПО ВложенныйЗапрос.Заявка = ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка
		|ГДЕ
		|	ВложенныйЗапрос.Количество > 0
		|	И ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка = &Заявка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Заявка,
		|	ВложенныйЗапрос.СтандартнаяЭтикетка,
		|	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка,
		|	ЗаявкаНаПечатьЭтикеткиЭтикетки.КоличествоСоСклада";
		 
	Запрос.УстановитьПараметр("Заявка",ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	//
	Склад = ДанныеЗаполнения.Склад;
	
	НоменклатураДляСписания = ДанныеЗаполнения.Пустографка;
	ЕдиницаХранения = НоменклатураДляСписания.ЕдиницаХраненияОстатков;
	ЭтотОбъект.Товары.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаРасход = ЭтотОбъект.Товары.Добавить();
		СтрокаРасход.Номенклатура = НоменклатураДляСписания;
		СтрокаРасход.ЕдиницаИзмерения = ЕдиницаХранения;
		СтрокаРасход.Количество = Выборка.КоличествоСоСклада;
		СтрокаРасход.СтандартнаяЭтикетка = Выборка.СтандартнаяЭтикетка;
		СтрокаРасход.ЗаявкаНаПроизводствоПерсональнойУпаковки = Выборка.Заявка;
	КонецЦикла;
	//--AK GREK 13.09.17 ИП-00016703	
		
		
КонецПроцедуры

//+++АК susk
//оптимизировал
//
Процедура АК_ЗаполнитьДокументНаОснованииЗаявкиНаПечатиЭтикетки(ДанныеЗаполнения)
	
	//
	ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
	
	//
	Основание = ДанныеЗаполнения;
	Получатель = ДанныеЗаполнения.Поставщик;
	
	//
	Склад = ДанныеЗаполнения.Склад;
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", 727); //Склад_Упаковки_Котляково
	КонецЕсли;
	
	//
	Дата = ТекущаяДата();
	Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке;
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Заявка,
	     |	Таблица.Номенклатура,
	     |	Таблица.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	     |	Таблица.КоличествоЗаказаноОстаток,
	     |	Таблица.КоличествоКОтгрузкеОстаток,
	     |	Таблица.КоличествоКПроизводствуОстаток,
	     |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	     |ИЗ
	     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(, Заявка = &Заявка) КАК Таблица
	     |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	     |			Таблица.Номенклатура КАК Номенклатура,
	     |			Таблица.КоличествоОстаток КАК КоличествоОстаток
	     |		ИЗ
	     |			РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК Таблица
	     |		
	     |		ОБЪЕДИНИТЬ ВСЕ
	     |		
	     |		ВЫБРАТЬ
	     |			Таблица.Номенклатура,
	     |			-Таблица.КоличествоКОтгрузкеОстаток
	     |		ИЗ
	     |			РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(
	     |					,
	     |					НЕ Заявка.Ссылка ЕСТЬ NULL 
	     |						И Заявка <> &Заявка) КАК Таблица) КАК ТоварыНаСкладахОстатки
	     |		ПО Таблица.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	     |ГДЕ
	     |	Таблица.КоличествоЗаказаноОстаток > 0
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Заявка,
	     |	Таблица.Номенклатура,
	     |	Таблица.Номенклатура.ЕдиницаХраненияОстатков,
	     |	Таблица.КоличествоЗаказаноОстаток,
	     |	Таблица.КоличествоКОтгрузкеОстаток,
	     |	Таблица.КоличествоКПроизводствуОстаток";
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Склад", Склад);
	ПЗ.Параметры.Вставить("Заявка", ДанныеЗаполнения);
	
	//
	ПЗ.Выполнить();
	
	//
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить;
		КонецЕсли; 
		
		//
		КоличествоКОтгрузке = МАКС(0, мин(Выборка.КоличествоЗаказаноОстаток, Выборка.КоличествоОстаток), мин(Выборка.КоличествоКОтгрузкеОстаток, Выборка.КоличествоОстаток)); 
		Если КоличествоКОтгрузке > 0 Тогда
			
			//
			НоваяСтрока = Товары.Добавить();
			
			//
			НоваяСтрока.Номенклатура 		= Выборка.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЗаявкаНаПроизводствоПерсональнойУпаковки = Выборка.Заявка;
			
			//
			НоваяСтрока.Количество 			= КоличествоКОтгрузке;
			
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры

//+++АК LATV 2018.06.24 ИП-00018971
Процедура АК_ОтразитьДвиженияПоСписаниюВСебестоимость(Отказ)

	Движения.ТоварыНаСкладах.Очистить();
	Для Каждого СтрокаДвижение Из Товары Цикл
		
		Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
		Движение.Период 			= Дата;
		Движение.Склад 				= Склад;
		Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
		Движение.Характеристика 	= СтрокаДвижение.Характеристика;
		Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
		Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
		Движение.Количество 		= СтрокаДвижение.Количество;
		Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
		
		Если Дата >= '20131201' Тогда
			Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
			Движение.Период 			= Дата;
			Движение.Склад 				= Получатель;
			Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
			Движение.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Движение.ДатаПроизводства 	= '00010101';
			Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
			Движение.Количество 		= СтрокаДвижение.Количество;
			Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтразитьДвиженияПоПерсональнойУпаковке()
	
	//
	Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Очистить();
	Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Записать();
	
	//
	ТЗ = "ВЫБРАТЬ
	     |	Таблица.Ссылка КАК Ссылка,
	     |	Таблица.ЗаявкаНаПроизводствоПерсональнойУпаковки КАК Заявка,
	     |	Таблица.Номенклатура,
	     |	СУММА(Таблица.Количество) КАК Количество,
	     |	Таблица.СтандартнаяЭтикетка
	     |ПОМЕСТИТЬ ТЗ
	     |ИЗ
	     |	Документ.РасходныйОрдерСклад.Товары КАК Таблица
	     |ГДЕ
	     |	Таблица.Ссылка = &Ссылка
	     |	И НЕ Таблица.ЗаявкаНаПроизводствоПерсональнойУпаковки.Ссылка ЕСТЬ NULL
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	Таблица.Ссылка,
	     |	Таблица.Номенклатура,
	     |	Таблица.ЗаявкаНаПроизводствоПерсональнойУпаковки,
	     |	Таблица.СтандартнаяЭтикетка
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	Таблица.Ссылка КАК Ссылка,
	     |	Таблица.Заявка КАК Заявка,
	     |	ВЫБОР
	     |		КОГДА Таблица.СтандартнаяЭтикетка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	     |			ТОГДА Таблица.Номенклатура
	     |		КОГДА Таблица.СтандартнаяЭтикетка <> Таблица.Номенклатура
	     |			ТОГДА Таблица.Номенклатура
	     |		ИНАЧЕ Таблица.СтандартнаяЭтикетка
	     |	КОНЕЦ КАК Номенклатура,
	     |	Таблица.Количество КАК КоличествоЗаказано,
	     |	ЕСТЬNULL(ЗаявкаОстатки.КоличествоЗаказаноОстаток, 0) КАК КоличествоЗаказаноОстаток,
	     |	Таблица.Количество КАК КоличествоКОтгрузке,
	     |	ЕСТЬNULL(ЗаявкаОстатки.КоличествоКОтгрузкеОстаток, 0) КАК КоличествоКОтгрузкеОстаток,
	     |	Таблица.Количество КАК КоличествоКПроизводству,
	     |	ЕСТЬNULL(ЗаявкаОстатки.КоличествоКПроизводствуОстаток, 0) КАК КоличествоКПроизводствуОстаток
	     |ИЗ
	     |	ТЗ КАК Таблица
	     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(&Дата, ) КАК ЗаявкаОстатки
	     |		ПО Таблица.Заявка = ЗаявкаОстатки.Заявка
	     |			И (ВЫБОР
	     |				КОГДА Таблица.СтандартнаяЭтикетка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	     |					ТОГДА Таблица.Номенклатура = ЗаявкаОстатки.Номенклатура
	     |				КОГДА Таблица.СтандартнаяЭтикетка <> Таблица.Номенклатура
	     |					ТОГДА Таблица.Номенклатура = ЗаявкаОстатки.Номенклатура
	     |				ИНАЧЕ Таблица.СтандартнаяЭтикетка = ЗаявкаОстатки.Номенклатура
	     |			КОНЕЦ)
	     |ГДЕ
	     |	Таблица.Ссылка = &Ссылка
	     |	И ЕСТЬNULL(ЗаявкаОстатки.КоличествоЗаказаноОстаток, 0) > 0
	     |;
	     |
	     |////////////////////////////////////////////////////////////////////////////////
	     |ВЫБРАТЬ
	     |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка КАК СтандартнаяЭтикетка,
	     |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Товар,
	     |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Характеристика,
	     |	ВложенныйЗапрос.Номенклатура КАК Аналог,
	     |	ВложенныйЗапрос.Количество,
	     |	&Контрагент
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		ТЗ.Ссылка КАК Ссылка,
	     |		ТЗ.Заявка КАК Заявка,
	     |		ТЗ.Номенклатура КАК Номенклатура,
	     |		СУММА(ТЗ.Количество) КАК Количество,
	     |		ТЗ.СтандартнаяЭтикетка КАК СтандартнаяЭтикетка
	     |	ИЗ
	     |		ТЗ КАК ТЗ
	     |	ГДЕ
	     |		ТЗ.СтандартнаяЭтикетка <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		ТЗ.Ссылка,
	     |		ТЗ.Заявка,
	     |		ТЗ.Номенклатура,
	     |		ТЗ.СтандартнаяЭтикетка) КАК ВложенныйЗапрос
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	     |		ПО ВложенныйЗапрос.Заявка = ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка
	     |			И ВложенныйЗапрос.СтандартнаяЭтикетка = ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка";
	
	
	//
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТЗ;
	
	//
	ПЗ.Параметры.Вставить("Дата", МоментВремени());
	//???ZEZA ПЗ.Параметры.Вставить("Дата", '30010101'); //???ZEZA
	ПЗ.Параметры.Вставить("Ссылка", Ссылка);
	ПЗ.Параметры.Вставить("Контрагент",ЭтотОбъект.Получатель);
	
	//
	
	Запрос = ПЗ.ПолучитьЗапрос();
	Результат = Запрос.ВыполнитьПакет();
	
	//
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если Выборка.КоличествоКОтгрузке < Выборка.КоличествоКОтгрузкеОстаток Тогда
			//???ZEZA тут будем ругаться, а может нет			
		КонецЕсли; 
		
		//
		НоваяЗапись = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		//
		НоваяЗапись.КоличествоЗаказано = мин(НоваяЗапись.КоличествоЗаказано, Выборка.КоличествоЗаказаноОстаток);
		НоваяЗапись.КоличествоКОтгрузке = мин(НоваяЗапись.КоличествоКОтгрузке, Выборка.КоличествоКОтгрузкеОстаток);
		
		//
		НоваяЗапись.КоличествоКПроизводству = 0;
		Если НоваяЗапись.КоличествоЗаказано = Выборка.КоличествоЗаказаноОстаток Тогда //Это закрывающий расходник. Если что то висит к производству, то тоже закрываем
			НоваяЗапись.КоличествоКПроизводству = МАКС(НоваяЗапись.КоличествоКПроизводству, Выборка.КоличествоКПроизводствуОстаток);	
		КонецЕсли; 
		
		//
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		//
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.Период = Дата;
		
	КонецЦикла; 
	
	//
	Если Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Модифицированность() Тогда
		
		//
		Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Записать();
		
		//
		Попытка
			ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ФоноваяОбработкаЗаявокНаЭтикетку",,"РасходныйОрдерСклад","Фоновая обработка заявок на этикетку");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ВыборкаАналоги = Результат[2].Выбрать();
	Движения.АналогУпаковкиУПереработчика.Очистить();
	Пока ВыборкаАналоги.Следующий()Цикл
		НоваяЗапись = Движения.АналогУпаковкиУПереработчика.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаАналоги);
		НоваяЗапись.Период = Дата;
	КонецЦикла;
	Движения.АналогУпаковкиУПереработчика.Записать();
	
	//???
	////Контроль остатков
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	РасходныйОрдерСкладТовары.Номенклатура,
	//|	РасходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки,
	//|	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоОстаток
	//|ИЗ
	//|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки
	//|		ПО РасходныйОрдерСкладТовары.Номенклатура = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Номенклатура
	//|			И РасходныйОрдерСкладТовары.ЗаявкаНаПроизводствоПерсональнойУпаковки = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.ЗаявкаНаПроизводствоПерсональнойУпаковке
	//|ГДЕ
	//|	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоОстаток < 0
	//|	И РасходныйОрдерСкладТовары.Ссылка = &Ссылка";
	//Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Отказ = Истина;
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не хватает товара "+Выборка.Номенклатура+", после проведения останется" + Выборка.КоличествоОстаток;
	//	Сообщение.Сообщить();
	//КонецЦикла;
	
	
КонецПроцедуры

//mika Дата: 2017.11.17 ИП-00016990.02
Функция ПроверитьДоступныеСкладыПриОтгрузкеТехнологу(ТекущийСклад, ТаблицаТоваров, Отказ)
	
	//+++АК MIND 2017.12.27 если это выполнение отложенных движений, то никаких проверок не надо делать
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ОтложенноеПроведение")
		И ЭтотОбъект.ДополнительныеСвойства.ОтложенноеПроведение = Истина Тогда
		Возврат Отказ;
	КонецЕсли;
	//---АК MIND
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", ТаблицаТоваров);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб_Итоговая.НомерСтроки КАК НомерСтроки,
	|	Таб_Итоговая.Номенклатура КАК Номенклатура,
	|	ДоступностьТоваровНаСкладах.Склад КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.НомерСтроки КАК НомерСтроки,
	|		ВТ.Номенклатура КАК Номенклатура,
	|		ДоступностьТоваровНаСкладах.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА ДоступностьТоваровНаСкладах.Склад = &ТекущийСклад
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СкладНедоступен
	|	ИЗ
	|		ВТ КАК ВТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|			ПО ВТ.Номенклатура = ДоступностьТоваровНаСкладах.Номенклатура
	|				И (ДоступностьТоваровНаСкладах.Склад = &ТекущийСклад)
	|	ГДЕ
	|		ДоступностьТоваровНаСкладах.Склад ЕСТЬ NULL) КАК Таб_Итоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|		ПО (ДоступностьТоваровНаСкладах.Номенклатура = Таб_Итоговая.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Склад
	|ИТОГИ ПО
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТекущийСклад", ТекущийСклад);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Отказ;
		
	Иначе
		
		ТекстСообщения = "";
		
		ВыборкаНомерСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНомерСтроки.Следующий() Цикл
			
			ТекстСообщения =  ТекстСообщения + "Стр. " + ВыборкаНомерСтроки.НомерСтроки + ": Номеклатура ""&Номенклатура""";  
			
			ВыборкаНоменклатура = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ТекстСообщенияСклады = "";
			
			ЗаполнитьНоменклатуру = Истина;
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				Если ЗаполнитьНоменклатуру Тогда
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "&Номенклатура", ВыборкаНоменклатура.Номенклатура); 
					ЗаполнитьНоменклатуру = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаНоменклатура.Склад) Тогда
					ТекстСообщенияСклады = ТекстСообщенияСклады + ВыборкаНоменклатура.Склад + "; ";
				КонецЕсли;	
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + " (Доступные склады: " + ?(ЗначениеЗаполнено(ТекстСообщенияСклады), Лев(ТекстСообщенияСклады, СтрДлина(ТекстСообщенияСклады)-2), "Нет") + ")" + Символы.ПС;
			
		КонецЦикла;
	КонецЕсли;
	
	Сообщить("В табличной части ""Товары"" указаны недоступные на складе """ + ТекущийСклад + """ позиции!", СтатусСообщения.ОченьВажное);
	
	Сообщить(ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

//+++АК sils 13.06.2018 ИП-00018394
Процедура ПроверкаРеклМатериалов(Отказ)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы") и 
		Основание <> Документы.ЗаявкаНаРекламныеМатериалы.ПустаяСсылка() и 
		Основание.Дата >= '20180609' Тогда
		Если Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке Тогда
			флСпецодежда = Ложь;
			Для Каждого СтрокаТовар Из Товары Цикл
				Если не флСпецодежда и ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
					ВидРеклМатериала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовар.Номенклатура, "ВидРекламногоМатериала");
					Если ВидРеклМатериала = Перечисления.ПодразделРекламныхМатериалов.ФормаДляДействующихВВ Тогда
						флСпецодежда = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			Если флСпецодежда Тогда
				// Надо рассчитать номенклатура к какому сотруднику относится,
				// поскольку здесь только "Пол", а "Сотрудник" есть в документе-основании
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	ТЗ.Номенклатура,
				               |	ТЗ.Характеристика,
				               |	ТЗ.Пол,
				               |	ТЗ.Количество
				               |ПОМЕСТИТЬ ТЗ
				               |ИЗ
				               |	&ТЗ КАК ТЗ
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ЗаявкиНаРекламныеМатериалыОстатки.Номенклатура,
				               |	ЗаявкиНаРекламныеМатериалыОстатки.Характеристика,
				               |	ВЫБОР
				               |		КОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
				               |			ТОГДА ВЫБОР
				               |					КОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
				               |						ТОГДА ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник.Физлицо.Пол
				               |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка)
				               |				КОНЕЦ
				               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка)
				               |	КОНЕЦ КАК Пол,
				               |	ЗаявкиНаРекламныеМатериалыОстатки.Сотрудник,
				               |	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток КАК КоличествоЗаявки,
				               |	0 КАК КоличествоРО
				               |ПОМЕСТИТЬ СводныеДанные
				               |ИЗ
				               |	РегистрНакопления.ЗаявкиНаРекламныеМатериалы.Остатки(&ТекДата, Заявка = &Заявка) КАК ЗаявкиНаРекламныеМатериалыОстатки
				               |ГДЕ
				               |	ЗаявкиНаРекламныеМатериалыОстатки.КоличествоОстаток > 0
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	ТЗ.Номенклатура,
				               |	ТЗ.Характеристика,
				               |	ТЗ.Пол,
				               |	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка),
				               |	0,
				               |	ТЗ.Количество
				               |ИЗ
				               |	ТЗ КАК ТЗ
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	СводныеДанные.Номенклатура КАК Номенклатура,
				               |	СводныеДанные.Характеристика КАК Характеристика,
				               |	СводныеДанные.Пол КАК Пол,
				               |	СводныеДанные.Сотрудник КАК Сотрудник,
				               |	СУММА(СводныеДанные.КоличествоЗаявки) КАК КоличествоЗаявки,
				               |	СУММА(СводныеДанные.КоличествоРО) КАК КоличествоРО
				               |ИЗ
				               |	СводныеДанные КАК СводныеДанные
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	СводныеДанные.Номенклатура,
				               |	СводныеДанные.Характеристика,
				               |	СводныеДанные.Пол,
				               |	СводныеДанные.Сотрудник
				               |ИТОГИ ПО
				               |	Номенклатура,
				               |	Характеристика,
				               |	Пол,
				               |	Сотрудник";
							   
				Запрос.УстановитьПараметр("ТекДата", Дата);
				Запрос.УстановитьПараметр("Заявка", Основание);
				Запрос.УстановитьПараметр("ТЗ", Товары.Выгрузить());
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка_Номенклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
				Пока Выборка_Номенклатура.Следующий() Цикл
					Выборка_Характеристика = Выборка_Номенклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
					Пока Выборка_Характеристика.Следующий() Цикл
						Выборка_Пол = Выборка_Характеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Пол");
						Пока Выборка_Пол.Следующий() Цикл
							КоличествоВРО = Выборка_Пол.КоличествоРО;
							Если КоличествоВРО <= 0 Тогда
								Продолжить;
							КонецЕсли;
							Выборка_Сотрудник = Выборка_Пол.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
							Пока Выборка_Сотрудник.Следующий() Цикл
								Если КоличествоВРО <= 0 Тогда
									Продолжить;
								КонецЕсли;
								Если Выборка_Сотрудник.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
									Продолжить;
								КонецЕсли;
								Если Выборка_Сотрудник.КоличествоЗаявки <= 0 Тогда
									Продолжить;
								КонецЕсли;
								РасчКоличество = Мин(КоличествоВРО, Выборка_Сотрудник.КоличествоЗаявки);
								КоличествоВРО = КоличествоВРО - РасчКоличество;
							КонецЦикла;
							Если КоличествоВРО > 0 Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Комплект """ + СокрЛП(Выборка_Пол.Номенклатура) + " (пол " + Выборка_Пол.Пол + 
										")"" невозможно отнести на конкретных сотрудников, количество " + Выборка_Пол.КоличествоРО, СтатусСообщения.Важное);
								Отказ = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//+++АК LAGP 2018.07.12 ИП-00018946 Уведомление ответственному менеджеру по контрагенту при отмене возврата
Процедура ПроверитьОтправитьПисьмоМенеджеру()
	
	ЗапросПодчиненныхВозвратов = Новый Запрос;
	ЗапросПодчиненныхВозвратов.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка КАК ВозвратТоваровПоставщику
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.РасходныеОрдера КАК ВозвратТоваровПоставщикуРасходныеОрдера
		|ГДЕ
		|	ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка.Проведен = ИСТИНА
		|	И ВозвратТоваровПоставщикуРасходныеОрдера.РасходныйОрдер = &РасходныйОрдер";
	
	ЗапросПодчиненныхВозвратов.УстановитьПараметр("РасходныйОрдер", Ссылка);
	
	РезультатЗапросаПодчиненныхВозвратов = ЗапросПодчиненныхВозвратов.Выполнить();	

	Если НЕ РезультатЗапросаПодчиненныхВозвратов.Пустой() Тогда	
		
		Если НЕ ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
			Возврат;	
		КонецЕсли;	
		
		Кому = Новый СписокЗначений;	
		
		МенеджерПользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ОсновнойМенеджерПокупателя");
		МенеджерФизЛицо 	 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерПользователь, "ФизЛицо");
		
		ЗапросАдресовЭП = Новый Запрос;
		ЗапросАдресовЭП.УстановитьПараметр("Объект", МенеджерФизЛицо);
		ЗапросАдресовЭП.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		ВыборкаДетальныеЗаписиЭП = ЗапросАдресовЭП.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписиЭП.Следующий() Цикл
			Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписиЭП.Представление)) Тогда
				Кому.Добавить(ВыборкаДетальныеЗаписиЭП.Представление);
			КонецЕсли; 
		КонецЦикла;
		Кому.Добавить("lagp@automacon.ru");
		
		ВыборкаВозвратов = РезультатЗапросаПодчиненныхВозвратов.Выбрать();
		СтруктураПисьма = Новый Структура;
		ТемаПисьма = "Отменено проведение документа " + Ссылка + " на возврат товара поставщику.";
		ТелоПисьма = "Отменено проведение документа " + Ссылка + " на возврат товара поставщику." + Символы.ПС + "Есть подчинённые документы которые также надо снять с проведения:";
		Пока ВыборкаВозвратов.Следующий() Цикл
			ТелоПисьма = ТелоПисьма + Символы.ПС + ВыборкаВозвратов.ВозвратТоваровПоставщику;	
		КонецЦикла;	
		
		СтруктураПисьма.Вставить("Кому", Кому);
		СтруктураПисьма.Вставить("Тема", ТемаПисьма);
		СтруктураПисьма.Вставить("Тело", ТелоПисьма);
		
		ОбщегоНазначенияКлиентСервер.ОтправитьПисьмоПоПочте(СтруктураПисьма);
		
	КонецЕсли;	
		
КонецПроцедуры	

//+++АК sole 2018.07.26 ИП-00018320.04
Процедура ДобавитьРасходныйОрдерВЗаявкуНаПеревозку()
	
	Перем Запрос;
	
	Если Не ЗначениеЗаполнено(ПеремещениеСкладСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ ПЕРВЫЕ 1
|	АК_ЗаявкаНаПеревозку.Ссылка
|
|ИЗ Документ.АК_ЗаявкаНаПеревозку КАК АК_ЗаявкаНаПеревозку	
|ГДЕ
|		НЕ АК_ЗаявкаНаПеревозку.ПометкаУдаления
|	И	АК_ЗаявкаНаПеревозку.ДокументОснование = &ПеремещениеСкладСсылка 
|";
	Запрос.УстановитьПараметр("ПеремещениеСкладСсылка", ЭтотОбъект.ПеремещениеСкладСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		оЗаявкаНаПеревозку = Выборка[0].ПолучитьОбъект();
		НСтр = оЗаявкаНаПеревозку.РасходныеОрдера.Добавить();
		НСтр.РасходныйОрдер = ЭтотОбъект.Ссылка;
		оЗаявкаНаПеревозку.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

//+++АК ILIK 2018.08.10 ИП-00019492
Процедура ПометитьНаУдалениеВозвратыПоставщику()
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику
	   И ЭтотОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отменен Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка
		               |ИЗ
		               |	Документ.ВозвратТоваровПоставщику.РасходныеОрдера КАК ВозвратТоваровПоставщикуРасходныеОрдера
		               |ГДЕ
		               |	ВозвратТоваровПоставщикуРасходныеОрдера.РасходныйОрдер = &РасходныйОрдер
		               |	И НЕ ВозвратТоваровПоставщикуРасходныеОрдера.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("РасходныйОрдер", ЭтотОбъект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВозвратПоставщикуОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВозвратПоставщикуОбъект.УстановитьПометкуУдаления(Истина);
			
			Сообщить("Документ " + Строка(Выборка.Ссылка) + " помечен на удаление.", СтатусСообщения.Информация);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

НеМенятьДатуПриПроведении = Ложь;


