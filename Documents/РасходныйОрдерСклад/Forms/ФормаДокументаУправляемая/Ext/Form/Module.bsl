
&НаКлиенте
Перем ПредСклад;

&НаКлиенте
Перем СтраяДатаРаспределения; //+++АК sils 24.07.2018 ИП-00018946.02


&НаСервереБезКонтекста
Функция ПолучитьОстатокПоТовару(Склад, Номенклатура, Характеристика, ЕдиницаИзмерения, ДатаПроизводства = '00010101')
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад"			, Склад);
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"	, Характеристика);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ЕдиницаИзмерения = &ЕдиницаИзмерения
	|				И ДатаПроизводства = &ДатаПроизводства) КАК ТоварыНаСкладахОстатки";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьОстаткиПоТоварам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад"	, Объект.Склад);
	Запрос.УстановитьПараметр("Таб"		, Объект.Товары.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.Характеристика,
	|	Таб.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Таб.Номенклатура
	|					ИЗ
	|						ВТ_Товары КАК Таб)
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						Таб.Характеристика
	|					ИЗ
	|						ВТ_Товары КАК Таб)
	|				И ЕдиницаИзмерения В
	|					(ВЫБРАТЬ
	|						Таб.ЕдиницаИзмерения
	|					ИЗ
	|						ВТ_Товары КАК Таб)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Товары";

	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	СтрокаОтбора = "Номенклатура, Характеристика, ЕдиницаИзмерения";
	СтруктураОтбора = Новый Структура(СтрокаОтбора);
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ, СтрокаОтбора);
		СтрокиОстаток = ТабТовары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиОстаток.Количество() > 0 Тогда
			СтрокаТЧ.ОстатокНаСкладе = СтрокиОстаток[0].КоличествоОстаток;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПолученоТТ__()
	
	Если ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	ТоварыТТНеотправленныеСоСклада.Очистить();
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.ПолученоТТ 	= 0;
		СтрокаТаб.ОтклонениеТТ 	= 0;
	КонецЦикла;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку
			ИЛИ НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Возврат;
	КонецЕсли;
	
			
	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата)
														, ?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата)
														, Объект.Получатель);
			
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокаДоб = ТоварыТТНеотправленныеСоСклада.Добавить();
		СтрокаДоб.Номенклатура = СтрокаДанные.Номенклатура;
		СтрокаДоб.Количество = СтрокаДанные.Поступило;
	КонецЦикла;	
	
	ЗапросРеквизитовНоменклатуры = Новый Запрос;
	ЗапросРеквизитовНоменклатуры.УстановитьПараметр("Номенклатура", ТабДанные.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРеквизитовНоменклатуры.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)
	|	И НЕ Номенклатура.БезОстатков";
	ТабНеСлужебные = ЗапросРеквизитовНоменклатуры.Выполнить().Выгрузить();
	
	КолвоСтрок = ТоварыТТНеотправленныеСоСклада.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Количество = 0
			ИЛИ ТабНеСлужебные.Найти(ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Номенклатура, "Ссылка") = Неопределено Тогда
			ТоварыТТНеотправленныеСоСклада.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаДока"			, КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Таб"					, Объект.Товары.Выгрузить());
	//Запрос.УстановитьПараметр("МассивТоваров", ТабНеСлужебные.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ДатаРаспределения"	, НачалоДня(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата)));
	Запрос.УстановитьПараметр("Ссылка"				, Объект.Ссылка);
	Запрос.УстановитьПараметр("Получатель"			, Объект.Получатель);
	Запрос.УстановитьПараметр("Склад"				, Объект.Склад.Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Количество
	|ПОМЕСТИТЬ ВТ_ТекТовары
	|ИЗ
	|	&Таб КАК РасходныйОрдерСкладТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Количество КАК Количество,
	|	РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА РасходныйОрдерСкладТовары.Ссылка.Дата
	|				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	|			КОНЕЦ, ДЕНЬ) = &ДатаРаспределения
	|	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &Получатель
	|	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	|	И РасходныйОрдерСкладТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_ТекТовары.Номенклатура
	|			ИЗ
	|				ВТ_ТекТовары КАК ВТ_ТекТовары)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Количество УБЫВ,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоВКоробкеСрезПоследних.Номенклатура,
	|	КоличествоВКоробкеСрезПоследних.Характеристика,
	|	КоличествоВКоробкеСрезПоследних.Количество
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(&ДатаДока, СтруктурнаяЕдиница = &Склад) КАК КоличествоВКоробкеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТекТовары";
				   
	Результаты = Запрос.ВыполнитьПакет();
				   
	ТабРаспределение = Результаты[1].Выгрузить();
	//ТабРаспределение.Колонки.Добавить("Коэффициент");
	
	ТабКолвоВКоробке = Результаты[2].Выгрузить();
	ТабКолвоВКоробке.Индексы.Добавить("Номенклатура, Характеристика");
	//Для Каждого СтрокаНоменклатура Из Объект.Товары Цикл
	//	СтрокиРаспределение = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатура.Номенклатура));
	//	СуммаКоличеств = 0;
	//	Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
	//		СуммаКоличеств = СуммаКоличеств + СтрокаРаспр.Количество;
	//	КонецЦикла;	
	//	Если СуммаКоличеств = 0 Тогда
	//		Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
	//			Если НЕ ЗначениеЗаполнено(СтрокаРаспр.Ссылка) Тогда
	//				СтрокаРаспр.Коэффициент = 1;
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;	
	//	Иначе
	//		Для Каждого СтрокаРаспр Из СтрокиРаспределение Цикл
	//			СтрокаРаспр.Коэффициент = СтрокаРаспр.Количество / СуммаКоличеств;
	//		КонецЦикла;
	//	КонецЕсли;	
	//КонецЦикла;	
	
	КоличествоКоробокПередано = 0;
	КоличествоКоробокПринятоТТ = 0;
	КоличествоКоробокПринятоТТНоНетВРасходниках = 0;
	
	ТабКопия = Объект.Товары.Выгрузить();
	ТабКопия.Сортировать("Номенклатура, Количество Убыв");
	
	Для Каждого СтрокаТаб Из ТабКопия Цикл
		СтрокиКолвоВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		КолвоВКоробке = 0;
		Если СтрокиКолвоВКоробке.Количество() > 0 Тогда
			КолвоВКоробке = СтрокиКолвоВКоробке[0].Количество;
		КонецЕсли;	
		СтрокаОстаток = ТабДанные.Найти(СтрокаТаб.Номенклатура, "Номенклатура");
		Если СтрокаОстаток <> Неопределено Тогда
			ПринятоПоТекущейСтроке = 0;
			СтрокиРасходников = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
			Для Каждого СтрокаРасходник Из СтрокиРасходников Цикл
				КолвоПоЦиклу = Мин(СтрокаОстаток.Поступило, СтрокаРасходник.Количество);
				Если КолвоПоЦиклу <= 0 Тогда
					Продолжить;
				КонецЕсли;	
				Если СтрокаРасходник.Ссылка = Объект.Ссылка
					И СтрокаРасходник.НомерСтроки = СтрокаТаб.НомерСтроки Тогда
					ПринятоПоТекущейСтроке = ПринятоПоТекущейСтроке + КолвоПоЦиклу;
				Иначе
					КолвоПоЦиклу = 0;
				КонецЕсли;
				СтрокаРасходник.Количество = СтрокаРасходник.Количество - КолвоПоЦиклу;
				СтрокаОстаток.Поступило = СтрокаОстаток.Поступило - КолвоПоЦиклу;
			КонецЦикла;
			
			Если СтрокаОстаток.Поступило > 0 Тогда
				ПринятоПоТекущейСтроке = ПринятоПоТекущейСтроке + СтрокаОстаток.Поступило;
				СтрокаОстаток.Поступило = 0;
			КонецЕсли;	
			
				
			СтрокаТаб.ПолученоТТ = ПринятоПоТекущейСтроке;
			Объект.Товары[СтрокаТаб.НомерСтроки - 1].ПолученоТТ = ПринятоПоТекущейСтроке;
			//КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.ПолученоТТ / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
			КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.ПолученоТТ / КолвоВКоробке));
			Если КолвоВКоробке <> 0 Тогда
				Если СтрокаТаб.ПолученоТТ - Цел(СтрокаТаб.ПолученоТТ / КолвоВКоробке) * КолвоВКоробке >= 0.5 Тогда
					КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + 1;
				КонецЕсли;	
			КонецЕсли;		
		Иначе
			СтрокаТаб.ПолученоТТ = 0;
			Объект.Товары[СтрокаТаб.НомерСтроки - 1].ПолученоТТ = 0;
		КонецЕсли;
		
		//КоличествоКоробокПередано = КоличествоКоробокПередано + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.Количество / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
		КоличествоКоробокПередано = КоличествоКоробокПередано + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
		Если КолвоВКоробке <> 0 Тогда
			Если СтрокаТаб.Количество - Цел(СтрокаТаб.Количество / КолвоВКоробке) * КолвоВКоробке >= 0.5 Тогда
				КоличествоКоробокПередано = КоличествоКоробокПередано + 1;
			КонецЕсли;	
		КонецЕсли;
		
		СтрокиВНеотправленных = ТоварыТТНеотправленныеСоСклада.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		Если СтрокиВНеотправленных.Количество() > 0 Тогда
			ТоварыТТНеотправленныеСоСклада.Удалить(СтрокиВНеотправленных[0]);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.ОтклонениеТТ = СтрокаТаб.ПолученоТТ - СтрокаТаб.Количество;
	КонецЦикла;
	
	Если ТоварыТТНеотправленныеСоСклада.Количество() > 0 Тогда
		ТабТоварыВсехРасходников = ПолныеПрава.ПолучитьТаблицуТоваровПереданныхВТТ(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата), Объект.Склад, Объект.Получатель);
		Для Каждого СтрокаТаб Из ТабТоварыВсехРасходников Цикл
			СтрокиВНеотправленных = ТоварыТТНеотправленныеСоСклада.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
			Если СтрокиВНеотправленных.Количество() > 0 Тогда
				ТоварыТТНеотправленныеСоСклада.Удалить(СтрокиВНеотправленных[0]);
			КонецЕсли;
		КонецЦикла;
		ТоварыТТНеотправленныеСоСклада.Сортировать("Номенклатура");
	КонецЕсли;
	
	Для Каждого СтрокаТаб Из ТоварыТТНеотправленныеСоСклада Цикл
		СтрокиКолвоВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		КолвоВКоробке = 0;
		Если СтрокиКолвоВКоробке.Количество() > 0 Тогда
			КолвоВКоробке = СтрокиКолвоВКоробке[0].Количество;
		КонецЕсли;	
			
		//КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.Количество / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
		
		КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
		Если КолвоВКоробке <> 0 Тогда
			Если СтрокаТаб.Количество - Цел(СтрокаТаб.Количество / КолвоВКоробке) * КолвоВКоробке >= 0.5 Тогда
				КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + 1;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПолученоТТ_()
	
	Если ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	ТоварыТТНеотправленныеСоСклада.Очистить();
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.ПолученоТТ 	= 0;
		СтрокаТаб.ОтклонениеТТ 	= 0;
	КонецЦикла;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку
			ИЛИ НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Возврат;
	КонецЕсли;
	
			
	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата)
														, ?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата)
														, Объект.Получатель);
			
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокаДоб = ТоварыТТНеотправленныеСоСклада.Добавить();
		СтрокаДоб.Номенклатура = СтрокаДанные.Номенклатура;
		СтрокаДоб.Количество = СтрокаДанные.Поступило;
	КонецЦикла;
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ТекстЗапроса =
	"SELECT TovBin.UIN as TovarUID
	|	  ,CAST(master.dbo.Binary2UID(Reg._Fld5577RRef) as nvarchar(36)) as  HarUid
	|	  ,Reg._Fld5578 as kolvo
	|  FROM [IzbenkaFin].[dbo].[_InfoRg5575] (nolock) as Reg
	|LEFT OUTER JOIN (SELECT [_Period]
	|	  ,[_Fld6243RRef]
	|	  ,[_Fld5576RRef]
	|	  ,[_Fld5577RRef]
	|	  ,ROW_NUMBER() OVER (PARTITION BY _Fld6243RRef, _Fld5576RRef, _Fld5577RRef ORDER BY _Period desc) as rn
	|  FROM [IzbenkaFin].[dbo].[_InfoRg5575] (nolock)
	|  WHERE _Fld6243RRef = (SELECT _Idrref FROM [IzbenkaFin].[dbo].[_Reference42] (nolock) where _Fld758 = " + ВнешниеДанные.ФорматПоля(Объект.Склад.Владелец.id_TT) + ")
	|	and _Active = 1) as VZ_Max
	|	ON Reg._Fld6243RRef = VZ_Max._Fld6243RRef and Reg._Fld5576RRef = VZ_Max._Fld5576RRef and Reg._Fld5577RRef = VZ_Max._Fld5577RRef and Reg._Period = VZ_Max._Period and VZ_Max.rn = 1
	|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID as TovBin ON Reg._Fld5576RRef = TovBin.Ref
	|WHERE Reg._Fld6243RRef = (SELECT _Idrref FROM [IzbenkaFin].[dbo].[_Reference42] (nolock) where _Fld758 = " + ВнешниеДанные.ФорматПоля(Объект.Склад.Владелец.id_TT) + ")
	|	and Reg._Active = 1	
	|
	|SELECT TovBin.UIN TovarUID, TD.Quantity Quantity
	|	
	|FROM [SMS_REPL].[dbo].[TD_move] (nolock) as TD
	|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID as TovBin ON TD.id_tov = TovBin.id
	|where ShopNo_rep = " + ВнешниеДанные.ФорматПоля(Объект.Получатель.НомерТочки) + " and CONVERT(date, opendate) = CONVERT(date, " + ВнешниеДанные.ФорматПоля(Объект.ДатаРаспределения) + ") and operation_type = -400";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабКолвоВКоробке = Новый ТаблицаЗначений();
	ТабКолвоВКоробке.Колонки.Добавить("Номенклатура");
	ТабКолвоВКоробке.Колонки.Добавить("Характеристика");
	ТабКолвоВКоробке.Колонки.Добавить("Количество");
	
	ТабКолвоВКоробке.Индексы.Добавить("Номенклатура, Характеристика");
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабКолвоВКоробке.Добавить();
			СтрокаДоб.Номенклатура 		= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаДоб.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("HarUid").Value));
			СтрокаДоб.Количество 		= Rs.Fields("kolvo").Value;;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ТабПоступилоНоНеПроведено = Новый ТаблицаЗначений();
	ТабПоступилоНоНеПроведено.Колонки.Добавить("Номенклатура");
	ТабПоступилоНоНеПроведено.Колонки.Добавить("Количество");
	
	rs=rs.NextRecordSet();
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПоступилоНоНеПроведено.Добавить();
			СтрокаДоб.Номенклатура 	= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			СтрокаДоб.Количество 	= Rs.Fields("Quantity").Value;;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ЗапросРеквизитовНоменклатуры = Новый Запрос;
	ЗапросРеквизитовНоменклатуры.УстановитьПараметр("Номенклатура", ТабДанные.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРеквизитовНоменклатуры.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)
	|	И НЕ Номенклатура.БезОстатков";
	ТабНеСлужебные = ЗапросРеквизитовНоменклатуры.Выполнить().Выгрузить();
	
	КолвоСтрок = ТоварыТТНеотправленныеСоСклада.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Количество = 0
			ИЛИ ТабНеСлужебные.Найти(ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Номенклатура, "Ссылка") = Неопределено Тогда
			ТоварыТТНеотправленныеСоСклада.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДока"			, КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Таб"					, Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("МассивТоваров"		, ТабНеСлужебные.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ДатаРаспределения"	, НачалоДня(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата)));
	Запрос.УстановитьПараметр("Ссылка"				, Объект.Ссылка);
	Запрос.УстановитьПараметр("Получатель"			, Объект.Получатель);
	Запрос.УстановитьПараметр("Склад"				, Объект.Склад.Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Количество,
	|	&Ссылка КАК Ссылка,
	|	РасходныйОрдерСкладТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТекТовары
	|ИЗ
	|	&Таб КАК РасходныйОрдерСкладТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерСклад.Ссылка
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасходныйОрдерСклад.ДатаРаспределения, ДЕНЬ) = &ДатаРаспределения
	|	И РасходныйОрдерСклад.Получатель = &Получатель
	|	И РасходныйОрдерСклад.Ссылка <> &Ссылка
	|	И РасходныйОрдерСклад.Проведен = ИСТИНА
	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.Номенклатура КАК Номенклатура,
	|	ВЗ_Запрос.Количество КАК Количество,
	|	ВЗ_Запрос.Ссылка КАК Ссылка,
	|	ВЗ_Запрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|		РасходныйОрдерСкладТовары.Количество КАК Количество,
	|		РасходныйОрдерСкладТовары.Ссылка КАК Ссылка,
	|		РасходныйОрдерСкладТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|	ГДЕ
	|		РасходныйОрдерСкладТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_Расходники.Ссылка
	|				ИЗ
	|					ВТ_Расходники КАК ВТ_Расходники)
	|		И РасходныйОрдерСкладТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_ТекТовары.Номенклатура
	|				ИЗ
	|					ВТ_ТекТовары КАК ВТ_ТекТовары)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйОрдерСкладТовары.Номенклатура,
	|		РасходныйОрдерСкладТовары.Количество,
	|		РасходныйОрдерСкладТовары.Ссылка,
	|		РасходныйОрдерСкладТовары.НомерСтроки
	|	ИЗ
	|		ВТ_ТекТовары КАК РасходныйОрдерСкладТовары) КАК ВЗ_Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Количество УБЫВ,
	|	НомерСтроки,
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТекТовары";
				   
	Результаты = Запрос.ВыполнитьПакет();
				   
	ТабРаспределение = Результаты[2].Выгрузить();
	ТабРаспределение.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Число"));
	
	//распределим принятое ТТ
	Для Каждого СтрокаДанные Из ТабДанные Цикл
		СтрокиРаспределено = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
		Для Каждого СтрокаТаб Из СтрокиРаспределено Цикл
			КолвоПоИтерации = Мин(СтрокаТаб.Количество, СтрокаДанные.Поступило);
			Если КолвоПоИтерации <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + КолвоПоИтерации;
			СтрокаТаб.Количество = СтрокаТаб.Количество - КолвоПоИтерации;
			СтрокаДанные.Поступило = СтрокаДанные.Поступило - КолвоПоИтерации;
		КонецЦикла;
		Если СтрокиРаспределено.Количество() > 0
				И СтрокаДанные.Поступило > 0 Тогда
			СтрокиРаспределено[0].Поступило = СтрокиРаспределено[0].Поступило + СтрокаДанные.Поступило;
		КонецЕсли;	
	КонецЦикла;
	
	ТабРаспределениеНеПроведено = Результаты[2].Выгрузить();
	ТабРаспределениеНеПроведено.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Число"));
	
	//распределим принятое ТТ, но не проведенное
	Для Каждого СтрокаДанные Из ТабПоступилоНоНеПроведено Цикл
		СтрокиРаспределено = ТабРаспределениеНеПроведено.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
		Для Каждого СтрокаТаб Из СтрокиРаспределено Цикл
			КолвоПоИтерации = Мин(СтрокаТаб.Количество, СтрокаДанные.Количество);
			Если КолвоПоИтерации <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + КолвоПоИтерации;
			СтрокаТаб.Количество = СтрокаТаб.Количество - КолвоПоИтерации;
			СтрокаДанные.Количество = СтрокаДанные.Количество - КолвоПоИтерации;
		КонецЦикла;
		Если СтрокиРаспределено.Количество() > 0
				И СтрокаДанные.Количество > 0 Тогда
			СтрокиРаспределено[0].Поступило = СтрокиРаспределено[0].Поступило + СтрокаДанные.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоКоробокПередано = 0;
	КоличествоКоробокПринятоТТ = 0;
	КоличествоКоробокПринятоТТНоНетВРасходниках = 0;
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокиКолвоВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
		КолвоВКоробке = 0;
		Если СтрокиКолвоВКоробке.Количество() > 0 Тогда
			КолвоВКоробке = СтрокиКолвоВКоробке[0].Количество;
		КонецЕсли;
		СтрокиВРаспределении = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура, Ссылка, НомерСтроки", СтрокаТаб.Номенклатура, Объект.Ссылка, СтрокаТаб.НомерСтроки));
		Если СтрокиВРаспределении.Количество() > 0
				И СтрокиВРаспределении[0].Поступило > 0 Тогда
							
			СтрокаТаб.ПолученоТТ = СтрокиВРаспределении[0].Поступило;
			КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.ПолученоТТ / КолвоВКоробке));
			Если КолвоВКоробке <> 0 Тогда
				Если (СтрокаТаб.ПолученоТТ - Цел(СтрокаТаб.ПолученоТТ / КолвоВКоробке) * КолвоВКоробке) / КолвоВКоробке >= 0.5 Тогда
					КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + 1;
				КонецЕсли;	
			КонецЕсли;		
		Иначе
			СтрокаТаб.ПолученоТТ = 0;
		КонецЕсли;
		
		СтрокиВРаспределенииНеПроведено = ТабРаспределениеНеПроведено.НайтиСтроки(Новый Структура("Номенклатура, Ссылка, НомерСтроки", СтрокаТаб.Номенклатура, Объект.Ссылка, СтрокаТаб.НомерСтроки));
		Если СтрокиВРаспределенииНеПроведено.Количество() > 0
				И СтрокиВРаспределенииНеПроведено[0].Поступило > 0 Тогда
							
			СтрокаТаб.ПолученоТТНеПроведено = СтрокиВРаспределенииНеПроведено[0].Поступило;
		Иначе
			СтрокаТаб.ПолученоТТНеПроведено = 0;
		КонецЕсли;
		
		//КоличествоКоробокПередано = КоличествоКоробокПередано + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.Количество / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
		КоличествоКоробокПередано = КоличествоКоробокПередано + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
		СтрокаТаб.ОтгруженоКоробок = ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
		Если КолвоВКоробке <> 0 Тогда
			Если (СтрокаТаб.Количество - Цел(СтрокаТаб.Количество / КолвоВКоробке) * КолвоВКоробке) / КолвоВКоробке >= 0.5 Тогда
				КоличествоКоробокПередано = КоличествоКоробокПередано + 1;
				СтрокаТаб.ОтгруженоКоробок = СтрокаТаб.ОтгруженоКоробок + 1;
			КонецЕсли;	
		КонецЕсли;
		
		СтрокиВНеотправленных = ТоварыТТНеотправленныеСоСклада.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		Если СтрокиВНеотправленных.Количество() > 0 Тогда
			ТоварыТТНеотправленныеСоСклада.Удалить(СтрокиВНеотправленных[0]);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.ОтклонениеТТ = СтрокаТаб.ПолученоТТ + СтрокаТаб.ПолученоТТНеПроведено - СтрокаТаб.Количество;
	КонецЦикла;
	
	Если ТоварыТТНеотправленныеСоСклада.Количество() > 0 Тогда
		ТабТоварыВсехРасходников = ПолныеПрава.ПолучитьТаблицуТоваровПереданныхВТТ(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата), Объект.Склад, Объект.Получатель);
		Для Каждого СтрокаТаб Из ТабТоварыВсехРасходников Цикл
			СтрокиВНеотправленных = ТоварыТТНеотправленныеСоСклада.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
			Если СтрокиВНеотправленных.Количество() > 0 Тогда
				ТоварыТТНеотправленныеСоСклада.Удалить(СтрокиВНеотправленных[0]);
			КонецЕсли;
		КонецЦикла;
		ТоварыТТНеотправленныеСоСклада.Сортировать("Номенклатура");
	КонецЕсли;
	
	Для Каждого СтрокаТаб Из ТоварыТТНеотправленныеСоСклада Цикл
		СтрокиКолвоВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
		КолвоВКоробке = 0;
		Если СтрокиКолвоВКоробке.Количество() > 0 Тогда
			КолвоВКоробке = СтрокиКолвоВКоробке[0].Количество;
		КонецЕсли;	
			
		//КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.Количество / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
		
		КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
		Если КолвоВКоробке <> 0 Тогда
			Если (СтрокаТаб.Количество - Цел(СтрокаТаб.Количество / КолвоВКоробке) * КолвоВКоробке) / КолвоВКоробке >= 0.5 Тогда
				КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + 1;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьПолученоТТ()
	
	Если ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку
			ИЛИ НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Возврат;
	КонецЕсли;
	
	ИдетФоновоеЧтение = Истина;
	АдресДанныхФоновоеЧтение = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(АдресДанныхФоновоеЧтение);
	МассивПараметров.Добавить(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата));
	МассивПараметров.Добавить(Объект.Получатель);
	МассивПараметров.Добавить(Объект.Ссылка);
	МассивПараметров.Добавить(Объект.Товары.Выгрузить());
	МассивПараметров.Добавить(Объект.Склад);
	
	//РегламентныеЗаданияСервер.ФоновоеСчитываниеДанныхДляРасходногоОрдера(АдресДанныхФоновоеЧтение, ?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата), Объект.Получатель
	//		, Объект.Ссылка, Объект.Товары.Выгрузить(), Объект.Склад);
	ФонЗадание = ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ФоновоеСчитываниеДанныхДляРасходногоОрдера",
											МассивПараметров,, "Фоновое заполнение расходника");
			
	УинФоновоеЗадание = ФонЗадание.УникальныйИдентификатор;
	
	Элементы.КоличествоКоробокПередано.Видимость = Ложь;
	Элементы.КоличествоКоробокПринятоТТ.Видимость = Ложь;
	Элементы.КоличествоКоробокПринятоТТНоНетВРасходниках.Видимость = Ложь;
			
	//		МассивЗ = Новый Массив();
	//		МассивЗ.Добавить(ФонЗадание);
	// ФоновыеЗадания.ОжидатьЗавершения(МассивЗ);
	//СтруктураДанные = ПолучитьИзВременногоХранилища(АдресДанныхФоновоеЧтение);
	//УдалитьИзВременногоХранилища(АдресДанныхФоновоеЧтение);
			
КонецПроцедуры

Функция ПодпискаОжиданиеФоновогоЧтенияДанныхСервер()
	
	//Если ПользовательВРежимеРедактированияСтроки Тогда
	//	Возврат;
	//КонецЕсли;	
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УинФоновоеЗадание);
	Если ФоновоеЗадание = Неопределено
		ИЛИ ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ИдетФоновоеЧтение = Ложь;
		СтруктураДанные = ПолучитьИзВременногоХранилища(АдресДанныхФоновоеЧтение);
		УдалитьИзВременногоХранилища(АдресДанныхФоновоеЧтение);
		
		Если ТипЗнч(СтруктураДанные) = Тип("Структура") Тогда
			ТоварыТТНеотправленныеСоСклада.Очистить();
		
			Для Каждого СтрокаТаб Из Объект.Товары Цикл
				СтрокаТаб.ПолученоТТ 	= 0;
				СтрокаТаб.ОтклонениеТТ 	= 0;
			КонецЦикла;
			
					
			ТабДанные = СтруктураДанные.ТабДанные;
					
			Для Каждого СтрокаДанные Из ТабДанные Цикл
				СтрокаДоб = ТоварыТТНеотправленныеСоСклада.Добавить();
				СтрокаДоб.Номенклатура = СтрокаДанные.Номенклатура;
				СтрокаДоб.Количество = СтрокаДанные.Поступило;
			КонецЦикла;
			
			ТабПоступилоНоНеПроведено = СтруктураДанные.ТабПоступилоНоНеПроведено;
			//ТабНеСлужебные = СтруктураДанные.ТабНеСлужебные;
			ТабРаспределениеНеПроведено = СтруктураДанные.ТабРаспределениеНеПроведено;
			ТабКолвоВКоробке = СтруктураДанные.ТабКолвоВКоробке;
			ТабРаспределение = СтруктураДанные.ТабРаспределение;
			
			КолвоСтрок = ТоварыТТНеотправленныеСоСклада.Количество();
			Для н = 1 По КолвоСтрок Цикл
				Если ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Количество = 0 Тогда
					//ИЛИ ТабНеСлужебные.Найти(ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Номенклатура, "Ссылка") = Неопределено Тогда
					ТоварыТТНеотправленныеСоСклада.Удалить(КолвоСтрок - н);
				КонецЕсли;	
			КонецЦикла;	
			
			КоличествоКоробокПередано = 0;
			КоличествоКоробокПринятоТТ = 0;
			КоличествоКоробокПринятоТТНоНетВРасходниках = 0;
			
			Для Каждого СтрокаТаб Из Объект.Товары Цикл
				СтрокиКолвоВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
				КолвоВКоробке = 0;
				Если СтрокиКолвоВКоробке.Количество() > 0 Тогда
					КолвоВКоробке = СтрокиКолвоВКоробке[0].Количество;
				КонецЕсли;
				СтрокиВРаспределении = ТабРаспределение.НайтиСтроки(Новый Структура("Номенклатура, Ссылка, НомерСтроки", СтрокаТаб.Номенклатура, Объект.Ссылка, СтрокаТаб.НомерСтроки));
				Если СтрокиВРаспределении.Количество() > 0
						И СтрокиВРаспределении[0].Поступило > 0 Тогда
									
					СтрокаТаб.ПолученоТТ = СтрокиВРаспределении[0].Поступило;
					КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.ПолученоТТ / КолвоВКоробке));
					Если КолвоВКоробке <> 0 Тогда
						Если (СтрокаТаб.ПолученоТТ - Цел(СтрокаТаб.ПолученоТТ / КолвоВКоробке) * КолвоВКоробке) / КолвоВКоробке >= 0.5 Тогда
							КоличествоКоробокПринятоТТ = КоличествоКоробокПринятоТТ + 1;
						КонецЕсли;	
					КонецЕсли;		
				Иначе
					СтрокаТаб.ПолученоТТ = 0;
				КонецЕсли;
				
				СтрокиВРаспределенииНеПроведено = ТабРаспределениеНеПроведено.НайтиСтроки(Новый Структура("Номенклатура, Ссылка, НомерСтроки", СтрокаТаб.Номенклатура, Объект.Ссылка, СтрокаТаб.НомерСтроки));
				Если СтрокиВРаспределенииНеПроведено.Количество() > 0
					И СтрокиВРаспределенииНеПроведено[0].Поступило > 0 Тогда
									
					СтрокаТаб.ПолученоТТНеПроведено = СтрокиВРаспределенииНеПроведено[0].Поступило;
				Иначе
					СтрокаТаб.ПолученоТТНеПроведено = 0;
				КонецЕсли;
				
				//КоличествоКоробокПередано = КоличествоКоробокПередано + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.Количество / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
				КоличествоКоробокПередано = КоличествоКоробокПередано + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
				СтрокаТаб.ОтгруженоКоробок = ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
				Если КолвоВКоробке <> 0 Тогда
					Если (СтрокаТаб.Количество - Цел(СтрокаТаб.Количество / КолвоВКоробке) * КолвоВКоробке) / КолвоВКоробке >= 0.5 Тогда
						КоличествоКоробокПередано = КоличествоКоробокПередано + 1;
						СтрокаТаб.ОтгруженоКоробок = СтрокаТаб.ОтгруженоКоробок + 1;
					КонецЕсли;	
				КонецЕсли;
				
				СтрокиВНеотправленных = ТоварыТТНеотправленныеСоСклада.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
				Если СтрокиВНеотправленных.Количество() > 0 Тогда
					ТоварыТТНеотправленныеСоСклада.Удалить(СтрокиВНеотправленных[0]);
				КонецЕсли;	
			КонецЦикла;
			
			Для Каждого СтрокаТаб Из Объект.Товары Цикл
				СтрокаТаб.ОтклонениеТТ = СтрокаТаб.ПолученоТТ + СтрокаТаб.ПолученоТТНеПроведено - СтрокаТаб.Количество;
			КонецЦикла;
			
			Если ТоварыТТНеотправленныеСоСклада.Количество() > 0 Тогда
				ТабТоварыВсехРасходников = ПолныеПрава.ПолучитьТаблицуТоваровПереданныхВТТ(?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата), Объект.Склад, Объект.Получатель);
				Для Каждого СтрокаТаб Из ТабТоварыВсехРасходников Цикл
					СтрокиВНеотправленных = ТоварыТТНеотправленныеСоСклада.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
					Если СтрокиВНеотправленных.Количество() > 0 Тогда
						ТоварыТТНеотправленныеСоСклада.Удалить(СтрокиВНеотправленных[0]);
					КонецЕсли;
				КонецЦикла;
				ТоварыТТНеотправленныеСоСклада.Сортировать("Номенклатура");
			КонецЕсли;
			
			//ЗапросСлужебных = Новый Запрос();
			//ЗапросСлужебных.УстановитьПараметр("Товары", ТоварыТТНеотправленныеСоСклада.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
			//ЗапросСлужебных.Текст = "ВЫБРАТЬ
			//						|	Номенклатура.Ссылка
			//						|ИЗ
			//						|	Справочник.Номенклатура КАК Номенклатура
			//						|ГДЕ
			//						|	Номенклатура.Ссылка В(&Товары)
			//						|	И Номенклатура.СлужебныйТовар = ИСТИНА";
			//						
			//ТабКешСлужебные = ЗапросСлужебных.Выполнить().вы
			//
			//КолвоСтрок = ТоварыТТНеотправленныеСоСклада.Количество();
			//Для н = 1 По КолвоСтрок Цикл
			//	Если ТоварыТТНеотправленныеСоСклада[КолвоСтрок - н].Номенклатура.СлужебныйТовар Тогда
			//		ТоварыТТНеотправленныеСоСклада.Удалить(КолвоСтрок - н);
			//	КонецЕсли;	
			//КонецЦикла;	
			
			Для Каждого СтрокаТаб Из ТоварыТТНеотправленныеСоСклада Цикл
				СтрокиКолвоВКоробке = ТабКолвоВКоробке.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаб.Номенклатура));
				КолвоВКоробке = 0;
				Если СтрокиКолвоВКоробке.Количество() > 0 Тогда
					КолвоВКоробке = СтрокиКолвоВКоробке[0].Количество;
				КонецЕсли;	
					
				//КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + ?(КолвоВКоробке = 0, 0, Окр(СтрокаТаб.Количество / КолвоВКоробке, 0, РежимОкругления.Окр15как20));
				
				КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + ?(КолвоВКоробке = 0, 0, Цел(СтрокаТаб.Количество / КолвоВКоробке));
				Если КолвоВКоробке <> 0 Тогда
					Если (СтрокаТаб.Количество - Цел(СтрокаТаб.Количество / КолвоВКоробке) * КолвоВКоробке) / КолвоВКоробке >= 0.5 Тогда
						КоличествоКоробокПринятоТТНоНетВРасходниках = КоличествоКоробокПринятоТТНоНетВРасходниках + 1;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;
			
			Элементы.КоличествоКоробокПередано.Видимость = Истина;
			Элементы.КоличествоКоробокПринятоТТ.Видимость = Истина;
			Элементы.КоличествоКоробокПринятоТТНоНетВРасходниках.Видимость = Истина;
		КонецЕсли;	
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПодпискаОжиданиеФоновогоЧтенияДанных()
	
	//Если НЕ ИдетФоновоеЧтение
	//	И НЕ ПользовательВРежимеРедактированияСтроки Тогда
	Если НЕ ИдетФоновоеЧтение Тогда
		ОтключитьОбработчикОжидания("ПодпискаОжиданиеФоновогоЧтенияДанных");
	Иначе
		Если ПодпискаОжиданиеФоновогоЧтенияДанныхСервер() = Истина Тогда
			УстановитьВидимостьДоступность();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПерезаполнитьПолученоТТКлиент()
	
	ПерезаполнитьПолученоТТ();
	ПодключитьОбработчикОжидания("ПодпискаОжиданиеФоновогоЧтенияДанных", 1.5, Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьПолученоСкладом()
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.ПолученоСкладом = 0;
	КонецЦикла;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	|	ПриходныйОрдерСкладТовары.Ссылка.Кладовщик
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|ГДЕ
	|	ПриходныйОрдерСкладТовары.Ссылка.Проведен
	|	И ПриходныйОрдерСкладТовары.Ссылка.Основание = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерСкладТовары.Характеристика,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Ссылка.Кладовщик";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
		
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура"	, СтрокаТаб.Номенклатура);
		Отбор.Вставить("Характеристика"	, СтрокаТаб.Характеристика);
		
		НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
		Для Каждого СтрокаНайденная Из НайденныеСтроки Цикл
			СтрокаТаб.ПолученоСкладом 	= СтрокаТаб.ПолученоСкладом + СтрокаНайденная.Количество;
			СтрокаТаб.Кладовщик 		= СтрокаНайденная.Кладовщик;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ИзмененВидОперации = Ложь)
	//+++АК BARA 2018.03.30  ИП-00018166
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку Тогда 
		Элементы.ПричинаПеревозки.Видимость = Истина;
	Иначе
		Элементы.ПричинаПеревозки.Видимость = Ложь;
	КонецЕсли;
	//---АК BARA
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку Или 
		 Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение Или
		 Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		
	//+++АК susk
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеВСебестоимость Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Склады");
	//---АК susk
		
	Иначе
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		
	КонецЕсли;
	
	Если Объект.ВидОперации =Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку и
		Не ЗначениеЗаполнено(Объект.Автор) Тогда 
		Элементы.Автор.ТолькоПросмотр = Ложь;
	Иначе 
		Элементы.Автор.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	//Элементы.ГруппаНоменклатура.ОтображениеСтраниц	= ?(Объект.ЕстьРасходники,ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);
	
	Элементы.ГруппаДанныеПоКоробкам.Видимость			= (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	Элементы.Получатель.ОграничениеТипа							= ДопустимыеТипы;
//	Элементы.НоменклатураЗаполнитьПоРаспределению.Доступность	= (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);
	
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НоменклатураПроверкаОператором.Пометка = Объект.ПровереноОператором;
		
	
	ЕстьПравоРедактировать = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактированиеРеквизитовФинансовогоУчета, Ложь);
	Элементы.ПризкакПодтвержденияВФинУчете.ТолькоПросмотр	= НЕ ЕстьПравоРедактировать; 
	Элементы.ДатаОтраженияВФинУчете.ТолькоПросмотр			= НЕ ЕстьПравоРедактировать;
	
	

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки Тогда
	
		Элементы.Получатель.Видимость							= Ложь;
		Элементы.Автомобиль.Видимость							= Ложь;
		Элементы.Сборщик.Видимость								= Ложь;
		Элементы.ДатаРаспределения.Видимость					= Ложь;
		//Элементы.Статус.Видимость								= Ложь;
		
		Элементы.СтраницаОборудование.Видимость					= Ложь;
		Элементы.СтраницаРасходники.Видимость					= Ложь;
		//Элементы.СтраницаИзменения.Видимость					= Ложь;
		Элементы.Дополнительно.Видимость						= Ложь;
		
		//Элементы.ТоварыХарактеристика.Видимость					= Ложь;
		Элементы.ТоварыКоличествоУРЗ.Видимость					= Ложь;
		Элементы.ТоварыПолученоТТ.Видимость						= Ложь;
		Элементы.ТоварыПолученоСкладом.Видимость				= Ложь;
		Элементы.ТоварыКладовщик.Видимость						= Ложь;
		Элементы.ТоварыЗаявкаНаСклад.Видимость					= Ложь;
		
		//Элементы.НоменклатураЗаполнитьПоРаспределению.Видимость	= Ложь;
		Элементы.НоменклатураПроверкаОператором.Видимость		= истина; //задание 2017 пмм
		Элементы.ФормаСоздатьПриходники.Видимость				= Ложь;
		Элементы.ФормаРедактироватьФинРеквизиты.Видимость		= Ложь;
		Элементы.ТоварыТТНеотправленныеСоСклада.Видимость		= Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда

		Элементы.СтраницаОборудование.Видимость					= Истина;
		Элементы.СтраницаТовары.Видимость						= Ложь;
		Элементы.СтраницаРасходники.Видимость					= Ложь;
		Элементы.СтраницаИзменения.Видимость					= Ложь;
		Элементы.ТоварыТТНеотправленныеСоСклада.Видимость 		= Ложь;
		
	Иначе
		
		Элементы.Получатель.Видимость							= Истина;
		Элементы.Автомобиль.Видимость							= Истина;
		Элементы.Сборщик.Видимость								= Истина;
		Элементы.ДатаРаспределения.Видимость					= Истина;
		Элементы.Статус.Видимость								= Истина;
		
		Элементы.ТоварыХарактеристика.Видимость					= Истина;
		Элементы.ТоварыКоличествоУРЗ.Видимость					= Истина;
		Элементы.ТоварыПолученоТТ.Видимость						= Истина;
		Элементы.ТоварыПолученоСкладом.Видимость				= Истина;
		Элементы.ТоварыКладовщик.Видимость						= Истина;
		Элементы.ТоварыЗаявкаНаСклад.Видимость					= Истина;
		
		//Элементы.НоменклатураЗаполнитьПоРаспределению.Видимость	= Истина;
		Элементы.НоменклатураПроверкаОператором.Видимость		= Истина;
		Элементы.ФормаСоздатьПриходники.Видимость				= Истина;
		Элементы.ФормаРедактироватьФинРеквизиты.Видимость		= Истина;
		
		Элементы.СтраницаОборудование.Видимость					= Ложь;
		Элементы.СтраницаТовары.Видимость						= Истина;
		Элементы.СтраницаРасходники.Видимость					= Истина;
		Элементы.СтраницаИзменения.Видимость					= Истина;
		Элементы.Дополнительно.Видимость						= Истина;
		
		ВидимостьОперацийФинУчета = Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Утилизация
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаНуждыСклада
									//+++АК Susk (Суслин К.В.) 2018.05.10 ИП-00018164 
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаПитаниеСотрудниковСклада;
									//---АК Susk (Суслин К.В.) 
									
		//+++АК CISA 2018.11.13 ИП-00019730
		Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда									
			ДопСвойстваСЕ = ОбщегоНазначения.ЗначенияДополнительныхСвойствСтруктурнойЕдиницы(Объект.Получатель, "ВыездноеМероприятие");
			Если ДопСвойстваСЕ.Свойство("ВыездноеМероприятие") Тогда
				ВидимостьОперацийФинУчета = ДопСвойстваСЕ.ВыездноеМероприятие;
			КонецЕсли;
		КонецЕсли;
		//---АК CISA

		Элементы.ПризкакПодтвержденияВФинУчете.Видимость	= ВидимостьОперацийФинУчета;
		Элементы.ДатаОтраженияВФинУчете.Видимость			= Объект.ПризкакПодтвержденияВФинУчете;
		Элементы.СтраницаРасходники.Видимость				= Объект.ЕстьРасходники;
		Элементы.ТоварыПолученоТТ.Видимость					= Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
		Элементы.ТоварыПолученоСкладом.Видимость			= Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение;
		Элементы.ТоварыТТНеотправленныеСоСклада.Видимость	= ТоварыТТНеотправленныеСоСклада.Количество() > 0;
		Элементы.ФормаРедактироватьФинРеквизиты.Видимость	= ЕстьПравоРедактировать;

	КонецЕсли;
	//АК БЕЛН 14.03.17+
	Элементы.СтраницаТТ.Видимость=((ТипЗнч(Объект.Основание)=Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы")) И (Объект.ТорговыеТочки.Количество()>0));
	//АК БЕЛН 14.03.17-
	//+++АК BELN 2017.12.18 ИП-00017498
	Элементы.ПричинаСписания.Видимость=Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой;
	Элементы.ОтветственныйПоБою.Видимость=Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой И
	(Объект.ПричинаСписания=Справочники.ПричиныСписанияУтилизацияБой.БойВСмене);
	Элементы.ОтветственныйПоБоюКонтрагент.Видимость=Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой И
	(Объект.ПричинаСписания=Справочники.ПричиныСписанияУтилизацияБой.БойПриПоставке);
	Элементы.ТоварыЗаданиеНаРазборку.Видимость=Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	//---АК BELN 2017.12.18 
	
	Элементы.Сборщик.АвтоОтметкаНезаполненного	= (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку);
	
	//+++АК susk
	РаспределениеВСебестоимость = Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеВСебестоимость;
	
	Элементы.ПоставщикДляРаспределения.Видимость = РаспределениеВСебестоимость;
	
	Если РаспределениеВСебестоимость Тогда		
		Элементы.Получатель.Видимость = Истина;
		Элементы.Автомобиль.Видимость = Ложь;
		Элементы.ДатаРаспределения.Видимость = Ложь;
		Элементы.Сборщик.Видимость = Ложь;
	КонецЕсли;		
	//---АК susk
	
	//+++АК KIRN 2018.04.12 ИП-00018209
	//+++АК SHEP 2018.10.04 ИП-00020060
	//Элементы.ФормаСформироватьРТУ.Видимость = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Объект.Организация);
	Элементы.ФормаСформироватьРТУ.Видимость = ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(Объект.Получатель);
	//---АК SHEP 2018.10.04
	//---АК KIRN 
	
	//???ZEZA Элементы.ТоварыЗаявкаНаПроизводствоПерсональнойУпаковки.Видимость = Объект.АК_ПерсональнаяУпаковка;
	//+++АК BELN 2017.12.18 ИП-00017498
	//---АК BELN 2017.12.18 
	//+++АК sils 27.04.2018 ИП-00018026
	флВидимостьПола = Ложь;
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура) и
			СтрокаТовар.Номенклатура.ВидРекламногоМатериала = Перечисления.ПодразделРекламныхМатериалов.ФормаДляДействующихВВ Тогда
			флВидимостьПола = Истина;
		КонецЕсли;	
	КонецЦикла;	
	Элементы.ТоварыПол.Видимость = флВидимостьПола;
	//---АК
	
	//+++АК LUZA 2018.11.14 ИП-00019422
	Если Объект.Ссылка.Пустая() = Ложь И (РольДоступна("ПолныеПрава") = Истина ИЛИ РольДоступна("ОператорСклада") = Истина) Тогда
		Элементы.ОтправитьЗаказВДругуюТТ.Видимость = ОперделитьВидимостьКнопкиОтправитьЗаказСервер();
	Иначе
		Элементы.ОтправитьЗаказВДругуюТТ.Видимость = Ложь;
	КонецЕсли;
	//--АК LUZA 2018.11.14 ИП-00019422
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, СтруктураДанные.Номенклатура);
	
	Если НЕ СтруктураДанные.Номенклатура.НеВедетсяУчетПоХарактеристикам Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		Если ТабРезультат.Количество() = 1 Тогда
			СтруктураДанные.Характеристика = ТабРезультат[0].Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.ДатаПроизводства)
		И СтруктураДанные.Номенклатура.Складируемая Тогда
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
		Если СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтруктураДанные.ЕдиницаИзмерения);
		Иначе
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", Неопределено);
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТоварыНаСкладахОстатки.ДатаПроизводства КАК ДатаПроизводства,
		               |	ТоварыНаСкладахОстатки.КоличествоОстаток
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |			,
		               |			Склад = &Склад
		               |				И Номенклатура = &Номенклатура
		               |				И Характеристика = &Характеристика
		               |				И (ЕдиницаИзмерения = &ЕдиницаИзмерения
		               |					ИЛИ &ЕдиницаИзмерения = НЕОПРЕДЕЛЕНО)) КАК ТоварыНаСкладахОстатки
		               |ГДЕ
		               |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаПроизводства";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанные.ДатаПроизводства = Выборка.ДатаПроизводства;
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЭтоСырье", СтруктураДанные.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ПроверкаОператором(Команда)
	
	Объект.ПровереноОператором = НЕ Объект.ПровереноОператором;
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НоменклатураПроверкаОператором.Пометка = Объект.ПровереноОператором;
//	Если Объект.Номенклатура.Итог("КоличествоУРЗ") > 0 Тогда
//		Если Объект.ПровереноОператором Тогда
//			УстановитьКоличестваРавныеРасчетным(Команда);
//		КонецЕсли;
//	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличестваРавныеРасчетным(Команда)
	Для Каждого СтрокаСостав ИЗ Объект.Товары Цикл
		//Если ШтучныйТовар(СтрокаСостав.Номенклатура) Тогда
			СтрокаСостав.Количество = СтрокаСостав.КоличествоУРЗ;
		//Иначе
		//	СтрокаСостав.Отклонение = СтрокаСостав.КоличествоУРЗ;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОсновнойВидОперацииСервер(мСклад, мВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Склад"		, мСклад);
	Запрос.Параметры.Вставить("ВидДокумента", мВидДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкладыОсновныеОперации.ОсновнаяОперация
	|ИЗ
	|	Справочник.Склады.ОсновныеОперации КАК СкладыОсновныеОперации
	|ГДЕ
	|	СкладыОсновныеОперации.Ссылка = &Склад
	|	И СкладыОсновныеОперации.ВидДокумента = &ВидДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ОсновнаяОперация, Неопределено);
	
КонецФункции

&НаКлиенте
Процедура Оборудование_ПредупреждениеОЗапрете()
	
	Предупреждение("Нельзя добавлять строки. Документ заполняется строго по заявке");
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++АК sole 2018.07.26 ИП-00018320.04
	ЭтаФорма.ДокументОснование = ЭтаФорма.Параметры.Основание;
	//---АК sole 2018.07.26 ИП-00018320.04

	//+++АК BARA 2018.03.30  ИП-00018166
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку Тогда 
		Элементы.ПричинаПеревозки.Видимость = Истина;
	Иначе
		Элементы.ПричинаПеревозки.Видимость = Ложь;
	КонецЕсли;
	//---АК BARA 
	//+++АК sils 27.04.2018 ИП-00018026
	Элементы.ТоварыПол.Видимость = Ложь;
	//---АК
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Открытие документа расходная накладная");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор 	= ПараметрыСеанса.ТекущийПользователь;
		Объект.Дата 	= ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
			Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;
	Иначе
		
		ОтобразитьМаршрутНаФорме();

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаявкаНаСклад) Тогда
		
		ТаблицаТовара = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);	
		
		Если Параметры.ЗаявкаНаСклад.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратПоставщику Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику;
		ИначеЕсли Параметры.ЗаявкаНаСклад.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку Тогда 
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку;
		ИначеЕсли Параметры.ЗаявкаНаСклад.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.Перемещение Тогда	
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение;	
		КонецЕсли;
		
		Объект.Склад 	  = Параметры.Склад;
		Объект.Получатель = Параметры.ЗаявкаНаСклад.Получатель;
		
		ОтборСклада = Новый Структура;
		ОтборСклада.Вставить("Склад", Параметры.Склад);
				
		НайденныеСтроки = ТаблицаТовара.НайтиСтроки(ОтборСклада);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ЕдиницаИзмерения 	= Строка.Номенклатура.ЕдиницаХраненияОстатков;                   
			НоваяСтрока.ЗаявкаНаСклад 		= Параметры.ЗаявкаНаСклад;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	Элементы.ВыполнятьДвиженияДатойДокумента.Доступность = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Финансист") ИЛИ РольДоступна("ФинансовыйДиректор");
	Элементы.Дата.ТолькоПросмотр = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Финансист") ИЛИ РольДоступна("ФинансовыйДиректор"));
	
	ЗаполнитьПризнакИспользованияХарактеристики();

	КорректировкиРасходника.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	Паллеты.Отбор.Элементы[0].ПравоеЗначение=Объект.Ссылка;
	
	СписокВСД.Отбор.Элементы[0].ПравоеЗначение=Объект.Ссылка;
	
	//+++АК sils 19.06.2018 ИП-00018969
	Если Параметры.Ключ.Пустая() и ЗначениеЗаполнено(Параметры.Основание) Тогда
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаявкаНаРекламныеМатериалы") Тогда
			Док_РОС = ОбщегоНазначенияСервер.ПроверкаВводаРОСПоЗаявке(Параметры.Основание);
			Если Док_РОС <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На основании заявки " + 
				СокрЛП(Параметры.Основание) + " уже введен """ + СокрЛП(Док_РОС) + """. Ввод на основании не выполнен!",,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//---АК
КонецПроцедуры

//+++АК VERT 2018.07.23 Без задания, оптимизация
&НаСервере
Процедура ОтобразитьМаршрутНаФорме()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование КАК НаименованиеМаршрута,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПолноеНаименование КАК ПолноеНаименованиеМаршрута
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
	|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		УчаствуетВМаршруте = Выборка.НаименованиеМаршрута;
		УчаствуетВМаршруте1 = Выборка.ПолноеНаименованиеМаршрута;
	КонецЕсли;

КонецПроцедуры

Функция ЭтоСкладРекламныхМатериалов()
	
	Возврат Объект.Склад.ЭтоСкладРеклМатериалов;
	
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПредСклад = Объект.Склад;
	
	Оборудование_ОбновитьНомера();
	
	ПерезаполнитьПолученоТТКлиент();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	//+++АК BELN 2018.04.18 
	Если Объект.ПриемкаВМагазинеБезПересчета > 0
		И Объект.ПриемкаВМагазинеБезПересчета <> 5
		И НЕ ЭтоСкладРекламныхМатериалов() Тогда
		Сообщить("Приемка в магазине без пересчета. Редактировать таблицу товаров запрещено" + ?(Объект.ПриемкаВМагазинеБезПересчета = 2, " (в магазине контрольный пересчет)", ""));
		Элементы.Товары.ТолькоПросмотр = Истина;
		Элементы.ТоварыЗаполнитьПоЗаявкамПолучателя.Доступность = Ложь;
	КонецЕсли;	
	// Познахарёв до утра вернул старый код
	//Если Объект.ПриемкаВМагазинеБезПересчета <> 0
	//	И Объект.ПриемкаВМагазинеБезПересчета <> 5 И Объект.ПриемкаВМагазинеБезПересчета <> -5
	//	И НЕ ЭтоСкладРекламныхМатериалов() Тогда
	//	Сообщить("Приемка в магазине без пересчета. Редактировать таблицу товаров запрещено" + ?(Объект.ПриемкаВМагазинеБезПересчета = 2 ИЛИ Объект.ПриемкаВМагазинеБезПересчета = -2, " (в магазине контрольный пересчет)", ""));
	//	Элементы.Товары.ТолькоПросмотр = Истина;
	//	Элементы.ТоварыЗаполнитьПоЗаявкамПолучателя.Доступность = Ложь;
	//КонецЕсли;	
	//---АК BELN 2018.04.18 
	
	// +++ AK BARA   16124
	Если ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
		ЭтаФорма.ТолькоПросмотр = Истина;		
	КонецЕсли;	
	// --- AK BARA   16124	
	//АК БЕЛН 11.10.2017+
	ЭлементОтбора = РезультатыПроверкиРевизора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документ");          
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;
	//АК БЕЛН 11.10.2017-
	//+++АК sils 24.07.2018 ИП-00018946.02
	СтраяДатаРаспределения = Объект.ДатаРаспределения;
	//---АК
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПризкакПодтвержденияВФинУчете
			И НЕ ЗначениеЗаполнено(Объект.ДатаОтраженияВФинУчете) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата отражения в финансовом учете не заполнена",, "ДатаОтраженияВФинУчете","Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ПровереноОператором
			И НЕ ЗначениеЗаполнено(Объект.Сборщик) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сборщик не заполнен. Документ нельзя записать со статусом ""Проверено оператором""",, ,, Отказ);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку")
			И НЕ ЗначениеЗаполнено(Объект.Получатель) 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Получатель не заполнен. Документ нельзя записать с видом ""Отгрузка в переработку""",, "Получатель", "Объект", Отказ);
	КонецЕсли;
	
	//+++АК susk
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.СписаниеВСебестоимость") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПоставщикДляРаспределения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит ""Поставщик для распределения"". Документ нельзя записать.", , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	//---АК susk
	
	
	//+++АК BELN 2017.12.18 
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.УтилизацияБой")  И
		НЕ ЗначениеЗаполнено(Объект.ПричинаСписания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите причину списания", , , , Отказ);
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.УтилизацияБой")  И
		Объект.ПричинаСписания=ПредопределенноеЗначение("Справочник.ПричиныСписанияУтилизацияБой.БойВСмене") И 
		НЕ ЗначениеЗаполнено(Объект.ОтветственныйПоБою) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите ответственного", , , , Отказ);
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.УтилизацияБой")  И
		Объект.ПричинаСписания=ПредопределенноеЗначение("Справочник.ПричиныСписанияУтилизацияБой.БойПриПоставке") И 
		НЕ ЗначениеЗаполнено(Объект.ОтветственныйПоБоюКонтрагент)Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите ответственного", , , , Отказ);
	КонецЕсли;
	//---АК BELN 2017.12.18 	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//ТекущийОбъект.Редактор = ПараметрыСеанса.ТекущийПользователь;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда
		Объект.Товары.Очистить();
	Иначе
		Объект.Оборудование.Очистить();
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку Тогда
		//+++АК SHEP 2018.05.06 ИП-00018453
		//СкладПолучателя = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Объект.Получатель);
		СкладПолучателя = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Объект.Получатель, Объект.Организация);
		//---АК SHEP 2018.05.06
		Если Не ЗначениеЗаполнено(СкладПолучателя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У получателя не удается определить его склад (либо все склады помечены на удаление)",,,, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	//если идет поступление сырья, то должен быть указан склад сырья
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Товары)
		|	И НЕ Номенклатура.ТипТовара В (ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка), ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Сырье))";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя в документе отгрузки в переработку указать номенклатуру " + Выборка.Ссылка + ". Она не является ни упаковкой, ни сырьем.", Объект, , , Отказ);
		КонецЦикла;	
	КонецЕсли;
	
	ЗапросКешТовары = Новый Запрос();
	ЗапросКешТовары.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	ТабТов = Объект.Товары.Выгрузить();
	ЗапросКешТовары.УстановитьПараметр("Товары"			, ТабТов.ВыгрузитьКолонку("Номенклатура"));
	ЗапросКешТовары.УстановитьПараметр("Характеристики"	, ТабТов.ВыгрузитьКолонку("Характеристика"));
	ЗапросКешТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.НеВедетсяУчетПоХарактеристикам,
	|	Номенклатура.Складируемая
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ВЫБОР
	|		КОГДА ЛогированиеСменыСтатусовАктивностиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Неактивная
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогированиеСменыСтатусовАктивности.СрезПоследних(&Дата, ) КАК ЛогированиеСменыСтатусовАктивностиСрезПоследних
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЛогированиеСменыСтатусовАктивностиСрезПоследних.Объект
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В(&Характеристики)";
							
	Результаты = ЗапросКешТовары.ВыполнитьПакет();
	ТабКешТовары 			= Результаты[0].Выгрузить();
	ТабКешХарактеристики 	= Результаты[1].Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаКешТовар = ТабКешТовары.Найти(СтрокаТЧ.Номенклатура, "Ссылка");
		Если СтрокаКешТовар.НеВедетсяУчетПоХарактеристикам Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Характеристика)  Тогда
			//+++АК BELN 2018.09.10 ИП-00019713
			Если НЕ Объект.ПризкакПодтвержденияВФинУчете Тогда
			//---АК BELN 2018.09.10 
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
				" не указана характеристика", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Харатеристика", , Отказ);
			КонецЕсли;

		Иначе
			СтрокаКешХарактеристика = ТабКешХарактеристики.Найти(СтрокаТЧ.Характеристика, "Ссылка");
			Если НЕ СтрокаКешХарактеристика.Владелец = СтрокаТЧ.Номенклатура Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
					" характеристика не соответствует номенклатуре", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Харатеристика", , Отказ);
			КонецЕсли;
			Если СтрокаКешХарактеристика.Неактивная Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
					" указана не активная характеристика", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Харатеристика", , Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.КоличествоУРЗ) Тогда
				Пропорция = Цел(СтрокаТЧ.Количество/СтрокаТЧ.КоличествоУРЗ);
				Если Пропорция >= 9 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
						" отгружаемое количество превысило количество по распределению более, чем в 9 раз. Проведение невозможно", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Количество", , Отказ);
				ИначеЕсли Пропорция >= 2 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
						" отгружаемое количество превысило количество по распределению более, чем в 2 раза", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Количество");
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;	
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаКешТовар = ТабКешТовары.Найти(СтрокаТЧ.Номенклатура, "Ссылка");
		Если СтрокаКешТовар = Неопределено
			ИЛИ НЕ СтрокаКешТовар.Складируемая Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаПроизводства) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
					" не указана дата производства", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].ДатаПроизводства");
				//" не указана дата производства", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].ДатаПроизводства", , Отказ);
		КонецЕсли;	
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы", Истина);
	
	ПроверятьПраваНаНоменклатуру = НЕ (РольДоступна("Кладовщик") ИЛИ РольДоступна("ОператорСклада") ИЛИ РольДоступна("ПолныеПрава"));
	Если ПроверятьПраваНаНоменклатуру
			И НЕ ПолныйВыборПоСкладу() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Товары"		, Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьНоменклатураВОперацияхОрдеров КАК ДоступностьНоменклатураВОперацияхОрдеров
		|		ПО (СпрНоменклатура.Ссылка = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель.Родитель.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель.Родитель.Родитель.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура)
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&Товары)
		|	И ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура ЕСТЬ NULL 
		|	И ДоступностьНоменклатураВОперацияхОрдеров.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпрНоменклатура.Наименование";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		ТекстЗапретНоменклатура = "";
		Пока Выборка.Следующий() Цикл
			ТекстЗапретНоменклатура = ТекстЗапретНоменклатура + ?(ЗначениеЗаполнено(ТекстЗапретНоменклатура), Символы.ПС, "") + "  - " + Выборка.Ссылка;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстЗапретНоменклатура) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вам запрещено выполнять операции со следующей номенклатурой:" +
																Символы.ПС + ТекстЗапретНоменклатура, , , , Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	//+++АК sole 2018.07.26 ИП-00018320.04
	мОснование = ЭтаФорма.ДокументОснование;
	Если ЗначениеЗаполнено(мОснование) Тогда
		Если ТипЗнч(мОснование) = Тип("ДокументСсылка.ПеремещениеСклад") Тогда
			ТекущийОбъект.ПеремещениеСкладСсылка = мОснование;
		КонецЕсли;
	КонецЕсли;
	//---АК sole 2018.07.26 ИП-00018320.04
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Если Объект.СборкаТерминаломЗакончена ТОгда
	//	Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Объект.Организация) Тогда
	//		мсДоки = Новый Массив;
	//		мсДоки.Добавить(Объект.Ссылка);
	//		ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДоки);
	//	КонецЕСли;
	//КонецЕСли;

	
	МассивСообщений = Неопределено;
	МасСообщенийОНехватке.Очистить();
	ТекущийОбъект.ДополнительныеСвойства.Свойство("МассивСообщений", МассивСообщений);
	Если ТипЗнч(МассивСообщений) = Тип("Массив") Тогда
		Для Каждого ЭлементМас Из МассивСообщений Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементМас);
			СтрокаСообщение = МасСообщенийОНехватке.Добавить();
			СтрокаСообщение.Сообщение = ЭлементМас;
		КонецЦикла;
	КонецЕсли;	
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	Оборудование_ОбновитьНомера();
	
	//Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу
	//	И Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВСборке
	//	И ЗначениеЗаполнено(Объект.Получатель) Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//	Запрос = Новый Запрос();
	//	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	РасходныйОрдерСкладТовары.Номенклатура,
	//				   |	РасходныйОрдерСкладТовары.Характеристика,
	//				   |	РасходныйОрдерСкладТовары.Ссылка,
	//				   |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК Склад
	//				   |ИЗ
	//				   |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//				   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МП_ОтчетТехнолога КАК МП_ОтчетТехнолога
	//				   |		ПО РасходныйОрдерСкладТовары.Ссылка = МП_ОтчетТехнолога.ДокументОснование
	//				   |			И РасходныйОрдерСкладТовары.Номенклатура = МП_ОтчетТехнолога.Номенклатура
	//				   |			И РасходныйОрдерСкладТовары.Характеристика = МП_ОтчетТехнолога.ХарактеристикаНоменклатуры
	//				   |ГДЕ
	//				   |	РасходныйОрдерСкладТовары.Ссылка = &Ссылка
	//				   |	И МП_ОтчетТехнолога.Ссылка ЕСТЬ NULL ";
	//				   
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		ДокОбъект = Документы.МП_ОтчетТехнолога.СоздатьДокумент();
	//		ДокОбъект.Дата = Объект.Дата;
	//		ДокОбъект.ДокументОснование = Объект.Ссылка;
	//		ДокОбъект.Склад = Выборка.Склад;
	//		ДокОбъект.Технолог = Объект.Получатель;
	//		ДокОбъект.Номенклатура = Выборка.Номенклатура;
	//		ДокОбъект.ХарактеристикаНоменклатуры = Выборка.Характеристика;
	//		ДокОбъект.ВидПроверяемойОперации = Перечисления.ВидыОперацийПроверяемыхТехнологом.Поставка;
	//		ДокОбъект.Выполнено = Истина;
	//		ДокОбъект.Результат = Перечисления.РезультатыПроверкиТехнологом.Отлично;
	//		ДокОбъект.Комментарий = "Создан по " + Объект.Ссылка;
	//		СтрокаДоб = ДокОбъект.ПараметрыЗадачи.Добавить();
	//		СтрокаДоб.Параметр = Справочники.МП_ПараметрыЗадачиТехнолога.НайтиПоНаименованию("Вкус товара");
	//		ДокОбъект.Записать();
	//	КонецЦикла;	
	//КонецЕсли;	
	
	СписокВСД.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Для Каждого СтрокаСообщение Из МасСообщенийОНехватке Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение.Сообщение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	ПерезаполнитьОстаткиПоТоварам();
	//ПерезаполнитьПолученоТТ();
	ПерезаполнитьПолученоСкладом();
	
	Оборудование_ОбновитьНомера();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	Объект.Организация = Объект.Склад.Организация;	
КонецПроцедуры

//&НаСервере
//Функция ШтучныйТовар(Номенклатура)
//	Возврат Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный;
//КонецФункции

&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Объект.АвтозагрузкаУРЗ Тогда
		ТекущиеДанные.Отклонение = ТекущиеДанные.КоличествоУРЗ - ТекущиеДанные.Количество;
	КонецЕсли;
	ТекущиеДанные.ОтклонениеТТ = ТекущиеДанные.ПолученоТТ - ТекущиеДанные.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОчиститьЗначенияФинансовыхРеквизитов();
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	// 2016.06.06 ИП-00012794
	//Если Объект.Товары.Количество() > 0 Тогда
	//	Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Объект.Склад = ПредСклад;
	//		Возврат;
	//	КонецЕсли;	
	//	//Объект.Товары.Очистить();
	//	МассивСтрок = Новый Массив;
	//	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
	//		Если СтрокаТЧ.КоличествоУРЗ > 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		МассивСтрок.Добавить(СтрокаТЧ);
	//	КонецЦикла;
	//	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
	//		Объект.Товары.Удалить(СтрокаТЧ);
	//	КонецЦикла;
	//КонецЕсли;
	
	ПредСклад = Объект.Склад;
	ПерезаполнитьОстаткиПоТоварам();
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	
	//Для каждого склада есть возможность прописать основной вид операции
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументов.РасходныйОрдерСклад");
	НовыйВидОперации = ПолучитьОсновнойВидОперацииСервер(Объект.Склад, ВидДокумента);
	
	Если ЗначениеЗаполнено(НовыйВидОперации) Тогда
		Объект.ВидОперации = НовыйВидОперации;
		ВидОперацииПриИзменении(Неопределено);
	КонецЕсли;
	
	ОбновитьНадписьОстатка();
	
	//+++АК KIRN 2018.05.08 ИП-00018598
	СкладПриИзмененииНаСервере();
	//---АК KIRN 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	
	//Если Объект.Товары.Количество() > 0 Тогда
	//	Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		СтандартнаяОбработка = Ложь;
	//		Объект.Склад = ПредСклад;
	//		Возврат;
	//	КонецЕсли;	
	//	//Объект.Товары.Очистить();
	//	МассивСтрок = Новый Массив;
	//	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
	//		Если СтрокаТЧ.КоличествоУРЗ > 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		МассивСтрок.Добавить(СтрокаТЧ);
	//	КонецЦикла;
	//	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
	//		Объект.Товары.Удалить(СтрокаТЧ);
	//	КонецЦикла;
	//КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если Объект.Товары.Количество() > 0 Тогда
	//	Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		СтандартнаяОбработка = Ложь;
	//		Объект.Склад = ПредСклад;
	//		Возврат;
	//	КонецЕсли;	
	//	//Объект.Товары.Очистить();
	//	МассивСтрок = Новый Массив;
	//	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
	//		Если СтрокаТЧ.КоличествоУРЗ > 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		МассивСтрок.Добавить(СтрокаТЧ);
	//	КонецЦикла;
	//	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
	//		Объект.Товары.Удалить(СтрокаТЧ);
	//	КонецЦикла;
	//КонецЕсли
	
КонецПроцедуры

//+++АК LATV 2018.10.03 ИП-00019879
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	ПроверитьВозможностьФормированияДвиженийФинансовый();

КонецПроцедуры

//+++АК LATV 2018.10.03 ИП-00019879
&НаКлиенте
Процедура ПризкакПодтвержденияВФинУчетеПриИзменении(Элемент)

	УстановитьВидимостьДоступность();
	Если Объект.ПризкакПодтвержденияВФинУчете Тогда
		Объект.ДатаОтраженияВФинУчете = ОбщегоНазначенияСервер.ПолучитьПоследнююДатуДвиженияПоРегиструТоварыНаСкладах(Объект.Ссылка);
	Иначе
		Объект.ДатаОтраженияВФинУчете = Дата(1, 1, 1);
	КонецЕсли;
	
	ПроверитьВозможностьФормированияДвиженийФинансовый();

КонецПроцедуры

//+++АК LATV 2018.10.03 ИП-00019879
&НаКлиенте
Процедура ПроверитьВозможностьФормированияДвиженийФинансовый()

	Если Объект.ПризкакПодтвержденияВФинУчете
	   И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.НеОбработан") Тогда
		ТекстСообщения = НСтр("ru = 'Статус документа ""Не обработан"", проводки не будут сформированы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Объект.Статус");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЗначенияФинансовыхРеквизитов()
	
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаТехнологу
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Утилизация
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.УтилизацияБой
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаНуждыСклада
			//+++АК Susk (Суслин К.В.) 2018.05.10 ИП-00018164
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.СписаниеНаПитаниеСотрудниковСклада) Тогда
			//---АК Susk (Суслин К.В.) 
		
		Объект.ПризкакПодтвержденияВФинУчете 	= Ложь;
		Объект.ДатаОтраженияВФинУчете 			= Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетСервер()
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД = Документы.РасходныйОрдерСклад.ПолучитьМакет("СКД_ИзмененияДвижений");
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка"	, Объект.Ссылка);
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Склад"	, Объект.Склад);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ОтчетИзмененияДвижений.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОтчетИзмененияДвижений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ОтчетИзмененияДвижений.ФиксацияСверху = 0;
	ОтчетИзмененияДвижений.ФиксацияСлева = 0;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОтчет(Команда)
	
	ОбновитьОтчетСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспределенияПриИзменении(Элемент)
	//+++АК sils 24.07.2018 ИП-00018946.02
	Если Объект.ДатаРаспределения <> '00010101' Тогда
		КолДней = ПолучитьРазницуМеждуДатойИДатойРаспределения();
		Если КолДней > 2 Тогда
			Если Вопрос("Дата расходного ордера отличатся от даты распределения на " + СокрЛП(КолДней) +  " дней. Вы верно указали дату?", 
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Объект.ДатаРаспределения = СтраяДатаРаспределения;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтраяДатаРаспределения = Объект.ДатаРаспределения;
	//---АК
	
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатураПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаИзменения" Тогда
		ОбновитьОтчетСервер();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСборщиков(Склад)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Склад.Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборщикиНаСкладах.Сборщик
	|ИЗ
	|	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
	|ГДЕ
	|	СборщикиНаСкладах.Склад = &Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборщикиНаСкладах.Сборщик.Наименование";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сборщик");
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСписокСборщиковДляВыбора(Склад, Текст)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад"		, Склад.Владелец);
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование ПОДОБНО &Наименование
	|	И ФизическиеЛица.Ссылка В
	|			(ВЫБРАТЬ
	|				СборщикиНаСкладах.Сборщик
	|			ИЗ
	|				РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
	|			ГДЕ
	|				СборщикиНаСкладах.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическиеЛица.Наименование";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура СборщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиков(Объект.Склад));
	
КонецПроцедуры
 
&НаКлиенте
Процедура СборщикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиков(Объект.Склад));
	
КонецПроцедуры

&НаКлиенте
Процедура СборщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	Если ПустаяСтрока(Текст) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Иначе
		ДанныеВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиковДляВыбора(Объект.Склад, Текст));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СборщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	Если ПустаяСтрока(Текст) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Иначе
		ДанныеВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиковДляВыбора(Объект.Склад, Текст));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура ПриИзмененииВодителяСервер()
	
	Если НЕ Объект.Перевозчик = Объект.Водитель.Владелец Тогда
		Объект.Перевозчик = Объект.Водитель.Владелец;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	ПриИзмененииВодителяСервер();
	
КонецПроцедуры

Процедура ПриИзмененииПеревозчикаСервер()
	
	Если НЕ Объект.Водитель.Владелец = Объект.Перевозчик Тогда
		Объект.Водитель = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	ПриИзмененииПеревозчикаСервер();
	
КонецПроцедуры

&НаСервере
Функция ПолныйВыборПоСкладу()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки") Тогда
		Результат = Ложь;
	Иначе
		Результат = (Найти(Объект.Склад, "Возврат поставщику") > 0) Или
					(Найти(Объект.Склад, "Возврат покупателя") > 0) Или
		//+++АК SHEP 2018.05.03 ИП-00018453
		//			(Объект.Склад.Владелец = Справочники.СтруктурныеЕдиницы.СторонняяПереработка);
					(Объект.Склад.Владелец.СторонняяПереработка);
		//---АК SHEP 2018.05.03
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	


&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПользовательВРежимеРедактированияСтроки = Истина;
	
	Если НоваяСтрока
			И Копирование Тогда
		Элементы.Товары.ТекущиеДанные.КоличествоУРЗ = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоТТ 	= 0;
		Элементы.Товары.ТекущиеДанные.Отклонение 	= 0;
		Элементы.Товары.ТекущиеДанные.НомерРаспределения	= 0;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Элементы.Товары.ТекущиеДанные.КоличествоУРЗ > 0 Тогда
		Предупреждение("Нельзя удалить строку, так как она введена через загрузку распределения");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПользовательВРежимеРедактированияСтроки = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки") Тогда
		Возврат;
	КонецЕсли;
	
	//ПерезаполнитьПолученоТТКлиент();
	//УстановитьВидимостьДоступность();
	
	//Объект.Товары.Сортировать("Номенклатура");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаРеквизитаСервер(мРеквизит)
	
	Возврат мРеквизит.Владелец;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки") Тогда
	//	Возврат;
	//КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти.Номенклатура = ПолучитьВладельцаРеквизитаСервер(СтрокаТабличнойЧасти.Характеристика) Тогда
		СтрокаТабличнойЧасти.Характеристика 	= ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	Если НЕ СтрокаТабличнойЧасти.Номенклатура = ПолучитьВладельцаРеквизитаСервер(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Получатель"		, Объект.Получатель);
	СтруктураДанные.Вставить("ЭтоСырье",	 	Ложь);
	СтруктураДанные.Вставить("Номенклатура"		, СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("ДатаПроизводства"	, СтрокаТабличнойЧасти.ДатаПроизводства);
	СтруктураДанные.Вставить("Характеристика"	, ?(НеВедетсяУчетПоХарактеристикам(СтрокаТабличнойЧасти.Номенклатура), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), СтрокаТабличнойЧасти.Характеристика));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Характеристика		= СтруктураДанные.Характеристика;
	СтрокаТабличнойЧасти.ДатаПроизводства	= СтруктураДанные.ДатаПроизводства;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество 		= 1;
	СтрокаТабличнойЧасти.ОстатокНаСкладе	= ПолучитьОстатокПоТовару(Объект.Склад, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.ЕдиницаИзмерения, СтрокаТабличнойЧасти.ДатаПроизводства);
	//СтрокаТабличнойЧасти.ПолученоТТ 		= ПолучитьПолученоТТ(Объект.ВидОперации, ?(ЗначениеЗаполнено(Объект.ДатаРаспределения), Объект.ДатаРаспределения, Объект.Дата), СтрокаТабличнойЧасти.Номенклатура, Объект.Получатель);
	//СтрокаТабличнойЧасти.ОтклонениеТТ = СтрокаТабличнойЧасти.ПолученоТТ - СтрокаТабличнойЧасти.Количество;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку")
		И СтруктураДанные.ЭтоСырье Тогда
		Ответ = Вопрос("Вы выбрали сырье, установить соответствующий вид операции документа?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку");
			ВидОперацииПриИзменении(Элементы.ВидОперации);
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	ОбновитьНадписьОстатка();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПолныйВыборПоСкладу() Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Склад",	Объект.Склад);
		ПараметрыФормы.Вставить("Дата",		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.СписаниеОтходовОтПереработки") Или
			 Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку") Тогда
			ПараметрыФормы.Вставить("Режим", "С остатками по складу");
		КонецЕсли;
		
		Результат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая", ПараметрыФормы);
		
		Если Результат = Неопределено Тогда
			Возврат;
		Иначе
			СтрокаТабличнойЧасти.Номенклатура = Результат;
			ТоварыНоменклатураПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ОстатокНаСкладе = ПолучитьОстатокПоТовару(Объект.Склад, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.ЕдиницаИзмерения, СтрокаТабличнойЧасти.ДатаПроизводства);
	
	ОбновитьНадписьОстатка();
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруОС(мОС)
	
	Возврат мОС.Номенклатура;
	
КонецФункции	
	
&НаКлиенте
Процедура ОборудованиеОборудованиеПриИзменении(Элемент)

	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	мНоменклатура = ПолучитьНоменклатуруОС(ТекДанные.Оборудование);//  сообщить(мНоменклатура);
	Если НЕ ТекДанные.Номенклатура = мНоменклатура Тогда
		ТекДанные.Номенклатура = мНоменклатура;
	КонецЕсли;
	
	Оборудование_ОбновитьНомера();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОССтруктурнойЕдиницы()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата"				, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда
		Запрос.Параметры.Вставить("СтруктурнаяЕдиница", Объект.Склад);
	Иначе
		Запрос.Параметры.Вставить("СтруктурнаяЕдиница", Объект.Склад.Владелец);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.Субконто3 КАК ОС
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)), , Субконто2 = &СтруктурнаяЕдиница) КАК ФинансовыйОстатки
	|ГДЕ
	|	ФинансовыйОстатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостояниеОС.СрезПоследних(&Дата, ) КАК СостояниеОССрезПоследних
	|ГДЕ
	|	(СостояниеОССрезПоследних.Местоположение = &СтруктурнаяЕдиница
	|			ИЛИ СостояниеОССрезПоследних.Местоположение.Родитель = &СтруктурнаяЕдиница)";
							
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОС"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПодборОС(Команда)
	
	//ЭтоПодбор = Истина;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("СписокПриОткрытии", ПолучитьСписокОССтруктурнойЕдиницы());
	//	
	//Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма);
	//
	//Форма.Заголовок						= "Основные средства. Подбор";
	//Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
	//Форма.ЗакрыватьПриВыборе			= Ложь;
	//
	////Открываем модально, т.к. при изменении склада или даты состав строк будет другим.
	////Попытки найти открытую форму подбора успехом не увенчались, ключ уникальности не помог
	//Форма.ОткрытьМодально();
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		//Оборудование_ПредупреждениеОЗапрете();
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПриОткрытии"	, ПолучитьСписокОССтруктурнойЕдиницы());
	ПараметрыФормы.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
	ПараметрыФормы.Вставить("Склад"				, Объект.Склад);
		
	Результат = ОткрытьФормуМодально("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы);
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекДанные.Оборудование = Результат;
		Оборудование_ОбновитьНомера();
	КонецЕсли;
	//Оборудование_ПредупреждениеОЗапрете();
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	ЭтоПодбор				= Ложь;
	
	СтрокаТЧ = Элементы.Оборудование.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПриОткрытии"	, ПолучитьСписокОССтруктурнойЕдиницы());
	ПараметрыФормы.Вставить("Номенклатура"		, СтрокаТЧ.Номенклатура);
	ПараметрыФормы.Вставить("Склад"				, Объект.Склад);
		
	Результат = ОткрытьФормуМодально("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы);
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаТЧ.Оборудование 	= Результат;
		СтрокаТЧ.Номенклатура 	= ПолучитьНоменклатуруОС(Результат);
		Оборудование_ОбновитьНомера();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура Оборудование_ОбновитьНомера()
	
	Если Объект.Оборудование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Список", Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("Оборудование"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.ИнвентарныйНомер,
	|	ОсновныеСредства.ЗаводскойНомер
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка В (&Список)";
	мТаблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Оборудование Цикл
		Строка = мТаблица.Найти(СтрокаТЧ.Оборудование);
		Если НЕ Строка = Неопределено Тогда
			СтрокаТЧ.ЗаводскойНомер		= Строка.ЗаводскойНомер;
			СтрокаТЧ.ИнвентарныйНомер	= Строка.ИнвентарныйНомер;
		Иначе
			СтрокаТЧ.ЗаводскойНомер		= "";
			СтрокаТЧ.ИнвентарныйНомер	= "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТовары(Команда)
	
	ТекДанные = Элементы.ТоварыТТНеотправленныеСоСклада.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокиТаб = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
	Если СтрокиТаб.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоб = Объект.Товары.Добавить();
	СтрокаДоб.Номенклатура = ТекДанные.Номенклатура;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Получатель"		, Объект.Получатель);
	СтруктураДанные.Вставить("Номенклатура"		, СтрокаДоб.Номенклатура);
	СтруктураДанные.Вставить("Характеристика"	, СтрокаДоб.Характеристика);
	СтруктураДанные.Вставить("ДатаПроизводства"	, СтрокаДоб.ДатаПроизводства);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаДоб.Характеристика	= СтруктураДанные.Характеристика;
	СтрокаДоб.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаДоб.ДатаПроизводства 	= СтруктураДанные.ДатаПроизводства;
	СтрокаДоб.Количество 		= ТекДанные.Количество;
	СтрокаДоб.ОстатокНаСкладе	= ПолучитьОстатокПоТовару(Объект.Склад, СтрокаДоб.Номенклатура, СтрокаДоб.Характеристика, СтрокаДоб.ЕдиницаИзмерения, СтрокаДоб.ДатаПроизводства);
	
	ПерезаполнитьПолученоТТКлиент();
	УстановитьВидимостьДоступность();
	ЗаполнитьПризнакИспользованияХарактеристики();
	
КонецПроцедуры

&НаСервере
Функция НеВедетсяУчетПоХарактеристикам(мНоменклатура)
	
	Возврат мНоменклатура.НеВедетсяУчетПоХарактеристикам;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристики() Экспорт
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакСкладируемый",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Складируемая")));
	
КонецПроцедуры

Процедура ЗаписатьДокументВПривилегированномРежиме(СтруктураИзменений)
	
	ИзмененнаяОрганизация 			= СтруктураИзменений.Организация;
	ИзмененныйПризнакПодтверждения 	= СтруктураИзменений.Подтверждено;
	ИзмененнаяДатаОтражения 		= СтруктураИзменений.ДатаОтраженияВФинУчете;
	
	Если ИзмененнаяОрганизация <> Объект.Организация 
			ИЛИ ИзмененнаяДатаОтражения <> Объект.ДатаОтраженияВФинУчете
			ИЛИ ИзмененныйПризнакПодтверждения <> Объект.ПризкакПодтвержденияВФинУчете Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Объект.Организация 						= ИзмененнаяОрганизация;
		Объект.ДатаОтраженияВФинУчете 			= ИзмененнаяДатаОтражения;
		Объект.ПризкакПодтвержденияВФинУчете 	= ИзмененныйПризнакПодтверждения;
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФинРеквизиты(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Подтверждено"			, Объект.ПризкакПодтвержденияВФинУчете);
	ПараметрыОткрытияФормы.Вставить("ДатаОтраженияВФинУчете", Объект.ДатаОтраженияВФинУчете);
	ПараметрыОткрытияФормы.Вставить("Организация"			, Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("ВидОперации"			, Объект.ВидОперации);
	
	Результат = ОткрытьФормуМодально("Документ.РасходныйОрдерСклад.Форма.ФормаРедактированияФинансовыхРеквизитов", ПараметрыОткрытияФормы, ЭтаФорма);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаписатьДокументВПривилегированномРежиме(Результат); 
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура СоздатьПриходникиСервер();
	
	Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		ВызватьИсключение "Операция не выполнена, не заполнено подразделение!";	
	КонецЕсли;	
		
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение Тогда
		ВызватьИсключение "Приходный ордер вводится на основании расходного ордера со статусом ""Перемещение на складе"""; 	
	КонецЕсли;
	
	ВыгрузкаТовары = Объект.Товары.Выгрузить();
	ВыгрузкаТовары.Колонки.Добавить("Склад");
	 
	ВыгрузкаТоварыСвернуть =  Объект.Товары.Выгрузить();	
	ВыгрузкаТоварыСвернуть.Свернуть("Номенклатура", "Количество");
	ВыгрузкаТоварыСвернуть.Колонки.Добавить("Склад");
	ВыгрузкаТоварыСвернуть.Колонки.Добавить("Родитель");
	
	//МассивРодителей = Новый Массив;
	//Для Каждого Строка Из ВыгрузкаТоварыСвернуть Цикл
	//	Строка.Родитель = Строка.Номенклатура.Родитель;
	//	МассивРодителей.Добавить(Строка.Номенклатура.Родитель);			
	//КонецЦикла;   	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"		, ВыгрузкаТовары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Объект.Получатель);
	 	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Склад,
	|	ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ДоступностьТоваровНаСкладах.Номенклатура В(&Номенклатура)";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СкладПустаяСсылка = Справочники.Склады.ПустаяСсылка();
	Для Каждого Строка Из ВыгрузкаТоварыСвернуть Цикл
		НайденнаяСтрока = Выгрузка.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока = Неопределено Тогда
			Строка.Склад = СкладПустаяСсылка;	
		Иначе
			Строка.Склад = НайденнаяСтрока.Склад;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ВыгрузкаТовары Цикл
		
		НайденнаяСтрока = ВыгрузкаТоварыСвернуть.Найти(Строка.Номенклатура, "Номенклатура");
		Строка.Склад = НайденнаяСтрока.Склад;
		
	КонецЦикла;
	
	ТоварыДополнительно.Очистить();
	Для Каждого Строка Из ВыгрузкаТовары Цикл
		НовСтрока = ТоварыДополнительно.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);		
	КонецЦикла;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ВыгрузкаТовары, Новый УникальныйИдентификатор);		
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходники(Команда)
	
	СоздатьПриходникиСервер();
	
	МассивСкладов = Новый Массив;
	Для Каждого Строка Из ТоварыДополнительно Цикл
		Если МассивСкладов.Найти(Строка.Склад) = Неопределено Тогда
			МассивСкладов.Добавить(Строка.Склад);		
		КонецЕсли;	                             		
	КонецЦикла;
	
	Для Каждого ТекСклад Из МассивСкладов Цикл
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РасходныйОрдерДополнительный"	, Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад"							, ТекСклад);
		ПараметрыОткрытия.Вставить("АдресХранилища"					, АдресХранилища);
		
		ОткрытьФорму("Документ.ПриходныйОрдерСклад.ФормаОбъекта", ПараметрыОткрытия,, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СтрЧислоВхождений(ИсточникВыбора.ИмяФормы, "Справочник.ОсновныеСредства") > 0 Тогда
		
		// Проверка на то, что ОС уже есть в ТЧ
		Массив = Объект.Оборудование.НайтиСтроки(Новый Структура("Оборудование", ВыбранноеЗначение));
		Если Массив.Количество() > 0 Тогда
			Если Вопрос(Строка(ВыбранноеЗначение) + " уже есть в табличной части. Продолжить?", РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем в ТЧ
		// Номенклатуру не прописываем намеренно - для наглядности
		СтрокаТЧ = Объект.Оборудование.Добавить();
		СтрокаТЧ.Оборудование = ВыбранноеЗначение;
		
		Оборудование_ОбновитьНомера();
		
	КонецЕсли;
	
	//
	Если ВыбранноеЗначение = "Создание_ВСД" Тогда
		Элементы.СписокВСД.Обновить();
	КонецЕсли;
	
	//++ АК luza 18.12.2017 ИП-00017459	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ИмяСобытия")
		И ВыбранноеЗначение.ИмяСобытия = "Отсканировано" Тогда
			Для Каждого ЭлементКартинка Из ВыбранноеЗначение.МассивКартинок Цикл
				СтрокаТаб = Объект.ПрикрепленныеФайлы.Добавить();
				СтрокаТаб.Файл = ЭлементКартинка;
			КонецЦикла;	
	КонецЕсли;	
	//-- АК luza 18.12.2017 ИП-00017459

	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//Оборудование_ПредупреждениеОЗапрете();
	//Отказ = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОстатокНоменклатуры(Структура)	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ?(Структура.Ссылка.Пустая(), КонецДня(ТекущаяДата()), Структура.Дата));
	Запрос.УстановитьПараметр("Склад", Структура.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Структура.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Структура.Характеристика);
	Запрос.УстановитьПараметр("ДатаПроизв", Структура.ДатаПроизводства);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Дата,
	               |			Склад = &Склад
	               |				И Номенклатура = &Номенклатура
	               |				И Характеристика = &Характеристика
	               |				И ДатаПроизводства = &ДатаПроизв) КАК ТоварыНаСкладахОстатки";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоОстаток;	
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьНадписьОстатка() Экспорт
	ОтключитьОбработчикОжидания("ОбновитьНадписьОстатка");
	ТекущийОстаток = 0;
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("Склад, Номенклатура, Характеристика, ДатаПроизводства, Дата, Ссылка",
		Объект.Склад,
		ТекДанные.Номенклатура,
		Текданные.Характеристика,
		ТекДанные.ДатаПроизводства,
		Объект.Дата,
		Объект.Ссылка);
	
	ТекущийОстаток = ПолучитьОстатокНоменклатуры(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ОбновитьНадписьОстатка");
	ПодключитьОбработчикОжидания("ОбновитьНадписьОстатка", 0.5, Истина);	
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПроизводстваПриИзменении(Элемент)
	
	ОбновитьНадписьОстатка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВсехСертификатов(Команда)
	
	ИменаФайлов.Очистить();

	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл 
		МассивВыделенныхСтрок.Добавить(Строка.НомерСтроки - 1);
	КонецЦикла;
		
	//МассивВыделенныхСтрок = Элементы.СертификатыПродукции.ВыделенныеСтроки;
	ПолучитьИменаФайловСертификатовНаСервере(МассивВыделенныхСтрок);
	Для Каждого Строка Из ИменаФайлов Цикл				
		ПечатьФайла(Строка.ИмяФайла);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВыделенныхСерификатов(Команда)
	
	ИменаФайлов.Очистить();
	МассивВыделенныхСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	ПолучитьИменаФайловСертификатовНаСервере(МассивВыделенныхСтрок);
	
	Для Каждого Строка Из ИменаФайлов Цикл  		
		ПечатьФайла(Строка.ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИменаФайловСертификатовНаСервере(МассивСтрок) 	
		
	//МассивВыделенныхСтрок = Элементы.СертификатыПродукции.ВыделенныеСтроки;
	Для Каждого Строка Из МассивСтрок Цикл
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Строка);
		
		НЗ = РегистрыСведений.СертификатыНаПродукцию.СоздатьНаборЗаписей();
		НЗ.Отбор.Номенклатура.Установить(ТекущаяСтрока.Номенклатура);
		НЗ.Отбор.Характеристика.Установить(ТекущаяСтрока.Характеристика);
		//НЗ.Отбор.РегистрационныйНомер.Установить(ТекущаяСтрока.РегистрационныйНомер);
		НЗ.Прочитать();
		ВыгрузкаНЗ = НЗ.Выгрузить();
		ВыгрузкаНЗ.Сортировать("ДатаДобавленияФайла Убыв");
		
		Для Каждого Запись Из ВыгрузкаНЗ Цикл
			Если КонецДня(Запись.ДействуетДо) < КонецДня(Объект.Дата) Тогда
				Продолжить;
			КонецЕсли;
			НовСтрока = ИменаФайлов.Добавить();
			НовСтрока.ИмяФайла = Запись.ИмяФайла;
			НовСтрока.ДатаСозданияФайла = Запись.ДатаДобавленияФайла;
			
			Прервать;
			
			//ТекущийСертификатВХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Запись.ИмяФайла));//	
			//ПечатьФайла(Запись.ИмяФайла, ТекущийСертификатВХранилище);
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВыделенныхСертификатов(Команда)
	
	ИменаФайлов.Очистить();
	
	МассивВыделенныхСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	ПолучитьИменаФайловСертификатовНаСервере(МассивВыделенныхСтрок);
	Для Каждого Строка Из ИменаФайлов Цикл			
		ПечатьФайла(Строка.ИмяФайла, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ХранилищеЗначенияСервер(ИмяФайла)
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор);	
КонецФункции

&НаКлиенте
Процедура ПечатьФайла(пИмяФайла, СразуПечать = Истина) Экспорт
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(ХранилищеЗначенияСервер(пИмяФайла));
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
		//ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Файл.Расширение);
	//ДвоичныеДанные = пХранилище.Получить();
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;    	
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	
	ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			Предупреждение("По штрих-коду не найдена номенклатура");
		Иначе
			СтрокиНашли = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтруктураДанных.Номенклатура, СтруктураДанных.Характеристика, СтруктураДанных.ДатаПроизводства));
			Если СтрокиНашли.Количество() > 0 Тогда
				Элементы.Товары.ТекущаяСтрока = СтрокиНашли[0].ПолучитьИдентификатор();
				ТекДанные = Элементы.Товары.ТекущиеДанные;
				ТекДанные.Количество = ТекДанные.Количество + СтруктураДанных.Количество;
			Иначе
				Элементы.Товары.ДобавитьСтроку();
				ТекДанные = Элементы.Товары.ТекущиеДанные;
				ТекДанные.Номенклатура = СтруктураДанных.Номенклатура;
				ТекДанные.Характеристика = СтруктураДанных.Характеристика;
				ТекДанные.Количество = СтруктураДанных.Количество;
				ТекДанные.ДатаПроизводства = СтруктураДанных.ДатаПроизводства;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Получатель"		, Объект.Получатель);
				СтруктураДанные.Вставить("Номенклатура"		, ТекДанные.Номенклатура);
				СтруктураДанные.Вставить("ДатаПроизводства"	, ТекДанные.ДатаПроизводства);
				СтруктураДанные.Вставить("Характеристика"	, ?(НеВедетсяУчетПоХарактеристикам(ТекДанные.Номенклатура), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), ТекДанные.Характеристика));
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				ТекДанные.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
				ТекДанные.ОстатокНаСкладе	= ПолучитьОстатокПоТовару(Объект.Склад, ТекДанные.Номенклатура, ТекДанные.Характеристика, ТекДанные.ЕдиницаИзмерения, ТекДанные.ДатаПроизводства);
			КонецЕсли;	
			
			Если Объект.АвтозагрузкаУРЗ Тогда
				ТекДанные.Отклонение = ТекДанные.КоличествоУРЗ - ТекДанные.Количество;
			КонецЕсли;
			ТекДанные.ОтклонениеТТ = ТекДанные.ПолученоТТ - ТекДанные.Количество;
			
			ЗаполнитьПризнакИспользованияХарактеристики();
			ОбновитьНадписьОстатка();
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "KeyboardHook" Тогда
		Если Данные = "00122" Тогда
			ШтрихКодОбработанФормой = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АК_ПерсональнаяУпаковкаПриИзменении(Элемент)
	Элементы.ТоварыЗаявкаНаПроизводствоПерсональнойУпаковки.Видимость = Объект.АК_ПерсональнаяУпаковка;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаявкамПолучателя(Команда)
	
	//
	Если ЗначениеЗаполнено(Объект.Получатель) И ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОткрытьФорму("Документ.РасходныйОрдерСклад.Форма.ФормаЗаполненияПоЗаявкам",,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаявкамПолучателяСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ЗаявкаНаПроизводствоПерсональнойУпаковке КАК ЗаявкаНаПроизводствоПерсональнойУпаковки,
	               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Номенклатура КАК Номенклатура,
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.КоличествоОстаток КАК Количество,
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.ЗаявкаНаПроизводствоПерсональнойУпаковке КАК ЗаявкаНаПроизводствоПерсональнойУпаковке,
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
	               |	ИЗ
	               |		РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки
	               |	ГДЕ
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.ЗаявкаНаПроизводствоПерсональнойУпаковке.Поставщик = &Поставщик
	               |		И АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОстатки.ЗаявкаНаПроизводствоПерсональнойУпаковке.СтатусЗаявки = ЗНАЧЕНИЕ(перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Номенклатура,
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоРасход,
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.ЗаявкаНаПроизводствоПерсональнойУпаковке,
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Номенклатура.ЕдиницаХраненияОстатков
	               |	ИЗ
	               |		РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , Регистратор, ) КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты
	               |	ГДЕ
	               |		АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ЗаявкаНаПроизводствоПерсональнойУпаковке,
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	NULL,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток,
	               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			Склад.Контрагент = &Поставщик
	//+++АК SHEP 2018.05.06 ИП-00018453
	               //|				И Склад.Владелец = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)) КАК ТоварыНаСкладахОстатки";
				   |				И Склад.Владелец = &СтруктурныеЕдиницыСторонняяПереработка) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("СтруктурныеЕдиницыСторонняяПереработка", ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Объект.Организация));
	//---АК SHEP 2018.05.06
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	Запрос.УстановитьПараметр("Поставщик",Объект.Получатель);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());		
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПерезаполнитьПолученоТТКлиент();
	//АК БЕЛН 26.04.2016+
	КорректировкиРасходника.Отбор.Элементы[0].ПравоеЗначение=Объект.Ссылка;
	Паллеты.Отбор.Элементы[0].ПравоеЗначение=Объект.Ссылка;
	//АК БЕЛН 26.04.2016-
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПоДаннымСервера(Команда)
	
	ПерезаполнитьПолученоТТКлиент();
	
КонецПроцедуры


&НаКлиенте
Процедура ПосмотретьЛогиМП(Команда)
	Структура1=Новый Структура("Документ",ЭтаФорма.Объект.Ссылка);
	ПараметрыВыбора=Новый Структура("Отбор",Структура1);
	ОткрытьФорму("РегистрСведений.МП_ЖурналОбмена.Форма.ФормаСписка",ПараметрыВыбора,ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ОтменитьПроверкуКладовщика(Команда)
	ОтменитьПроверкуКладовщикаСервер();
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроверкуКладовщикаСервер()
	ОбъектДок=РеквизитФормыВЗначение("Объект");
	ОбъектДок.ПереданаКладовщику = Ложь;
	ОбъектДок.ДанныеСборкиНаМобильномУстройствеДляПодтвержденияКладовщиком = Неопределено;
	ОбъектДок.Сборщик=Неопределено;
	ОбъектДок.ДанныеСборкиНаМобильномУстройстве = Неопределено;
	ЗначениеВРеквизитФормы(ОбъектДок,"Объект");
	Записать(Новый Структура("РежимЗаписиДокумента",РежимЗаписиДокумента.Запись));
КонецПроцедуры


&НаКлиенте
Процедура ПосмотретьКорректировкиКладовщика(Команда)
	Парам=Новый Структура("Отбор",Новый Структура("РасходныйОрдер",Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.КорректировкиРасходника.ФормаСписка",Парам,ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ОтсканированныеКоробки(Команда)
	//Отбор=Новый Структура("Ссылка",Объект.Ссылка);
	Парам=Новый Структура("ОтборДок, СформироватьПриОткрытии",Объект.Ссылка,Ложь);
	ОткрытьФорму("Отчет.АК_ОтсканированнаяВесоваяНоменклатура.Форма.ФормаОтчета",Парам);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="АК_ПеречитатьРасходник" Тогда
		Прочитать();	
	КонецЕсли; 
КонецПроцедуры


//+++АК SaMi 30.10.2017 
&НаКлиенте
Процедура СоздатьВСД(Команда)
	
	ПараметрыФормы = Новый Структура("ДокументОтгрузки", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.МЙ_ЖурналПродукции.Форма.ФормаПодбораПродукции", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

//---АК SaMi  30.10.2017 

//++ АК luza 18.12.2017 ИП-00017459     
&НаКлиенте
Процедура Сканировать(Команда)
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект, Объект.Ссылка.УникальныйИдентификатор(), ЭтаФорма, Истина);
КонецПроцедуры
//-- АК luza 18.12.2017 ИП-00017459     

//++ АК luza 18.12.2017 ИП-00017459     
&НаКлиенте
Процедура Просмотреть(Команда)
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры
//-- АК luza 18.12.2017 ИП-00017459  

//++ АК luza 18.12.2017 ИП-00017459    
&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	
КонецПроцедуры
//-- АК luza 18.12.2017 ИП-00017459  

//++ АК luza 18.12.2017 ИП-00017459    
&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", Новый Структура(
	"КомпонентаУстановлена, ИдентификаторКлиента",
	РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента));
	
КонецПроцедуры
//-- АК luza 18.12.2017 ИП-00017459  


//++ АК luza 18.12.2017 ИП-00017459    
&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции
//-- АК luza 18.12.2017 ИП-00017459    

//+++АК BELN 2017.12.18 ИП-00017498
&НаКлиенте
Процедура ОтветственныйПоБоюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Струк=Новый Структура("Отбор",Новый Структура("ПринадлежитСкладу",Истина));
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора",Струк,Элемент);
	
КонецПроцедуры
//---АК BELN 2017.12.18 

//+++АК BELN 2017.12.18 ИП-00017498
&НаКлиенте
Процедура ОтветственныйПоБоюКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Струк=Новый Структура("Транспорт",Истина);
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая",Струк,Элемент);
КонецПроцедуры
//---АК BELN 2017.12.18 
//+++АК BELN 2017.12.18 ИП-00017498

&НаКлиенте
Процедура ПричинаСписанияПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

//---АК BELN 2017.12.18

&НаСервере
Процедура ВосстановитьТоварыИзАрхиваНаСервере()
	//+++АК MIND 2018.02.11 
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрЗапрос = "INSERT INTO [IzbenkaFin].[dbo].[_Document3034_VT3100]
				|           ([_Document3034_IDRRef]
				|           ,[_KeyField]
				|           ,[_LineNo3101]
				|           ,[_Fld3102RRef]
				|           ,[_Fld3103RRef]
				|           ,[_Fld3104RRef]
				|           ,[_Fld3105]
				|           ,[_Fld3106]
				|           ,[_Fld3107]
				|           ,[_Fld3108]
				|           ,[_Fld3109RRef]
				|           ,[_Fld5085]
				|           ,[_Fld5199]
				|           ,[_Fld8122RRef]
				|           ,[_Fld9987RRef]
				|           ,[_Fld13846RRef]
				|           ,[id_tt_1c]
				|           ,[id_tov_1c]
				|           ,[date_1c]
				|           ,[_Posted_1c]
				|           ,[_Fld3096RRef_1C]
				|           ,[_Fld3088RRef_1C])
				|    SELECT [_Document3034_IDRRef]
				|      ,[_KeyField]
				|      ,[_LineNo3101]
				|      ,[_Fld3102RRef]
				|      ,[_Fld3103RRef]
				|      ,[_Fld3104RRef]
				|      ,[_Fld3105]
				|      ,[_Fld3106]
				|      ,[_Fld3107]
				|      ,[_Fld3108]
				|      ,[_Fld3109RRef]
				|      ,[_Fld5085]
				|      ,[_Fld5199]
				|      ,[_Fld8122RRef]
				|      ,[_Fld9987RRef]
				|      ,[_Fld13846RRef]
				|      ,[id_tt_1c]
				|      ,[id_tov_1c]
				|      ,[date_1c]
				|      ,[_Posted_1c]
				|      ,[_Fld3096RRef_1C]
				|      ,[_Fld3088RRef_1C]
				|  FROM [SMS_IZBENKA_ARC].[dbo].[_Document3034_VT3100]
				|  where _Document3034_IDRRef in (SELECT [_IDRRef]
				|      
				|  FROM [IzbenkaFin].[dbo].[_Document3034] (nolock)
				|  where _Number = " + ВнешниеДанные.ФорматПоля(СокрЛП(Объект.Номер)) + ")";
	
	ADOСоединение.Execute(СтрЗапрос);
		СтрЗапрос = "
				|DELETE FROM [SMS_IZBENKA_ARC].[dbo].[_Document3034_VT3100]
				|  where _Document3034_IDRRef in (SELECT [_IDRRef]
				|      
				|  FROM [IzbenkaFin].[dbo].[_Document3034] (nolock)
				|  where _Number = " + ВнешниеДанные.ФорматПоля(СокрЛП(Объект.Номер)) + ")";
				   
	ADOСоединение.Execute(СтрЗапрос);
	
	ADOСоединение.Close();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьТоварыИзАрхива(Команда)
	//+++АК MIND 2018.02.11 
	Ответ = Вопрос("Будет выполнен поиск строк в архивной базе и их восстановление. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	ВосстановитьТоварыИзАрхиваНаСервере();
	Сообщить("Восстановление выполнено, переоткройте документ");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРТУ(Команда)
	//+++АК KIRN 2018.04.12 ИП-00018209
	//+++АК SHEP 2018.10.04 ИП-00020060
	//Если ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Объект.Организация) Тогда
	Если ОбщегоНазначенияКлиентСервер.ЭтоСторонняяРозница(Объект.Получатель) Тогда
	//---АК SHEP 2018.10.04
		мсДоки = Новый Массив;
		мсДоки.Добавить(Объект.Ссылка);
		ОбщиеПроцедуры.ОбновитьРТУПоОрдерам(мсДоки);
	КонецЕСли;
	//---АК KIRN
КонецПроцедуры

//+++АК KIRN 2018.04.12 ИП-00018209 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	//+++АК SHEP 2018.10.04 ИП-00020060: закомментировал
	//Элементы.ФормаСформироватьРТУ.Видимость = ОбщиеПроцедуры.ЭтоВнешняяОрганизация(Объект.Организация);
	//---АК SHEP 2018.10.04
КонецПроцедуры

//+++АК KIRN 2018.05.31  ИП-00018743.000.00000002
&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	//ТекСтрока = Элементы.Товары.ТекущиеДанные;         //+++АК LAGP 2018.07.03 Дежурство. Закомментил по решению складского сообщества
	//Если ЗначениеЗаполнено(ТекСтрока.ЗаданиеНаРазборку) Тогда
	//	Сообщить("Запрещено редактирование строк с заполненным заданием на разборку");
	//	Отказ = Истина;
	//КонецЕСли;
КонецПроцедуры

//+++АК sils 24.07.2018 ИП-00018946.02
&НаСервере
Функция ПолучитьРазницуМеждуДатойИДатойРаспределения()
	КолДней = Объект.Дата - Объект.ДатаРаспределения;
	КолДней = ?(КолДней < 0, -КолДней, КолДней);
	КолДней = Окр(КолДней/(60*60*24), 2, 1);
	
	Возврат КолДней;
КонецФункции

//+++АК LATV 2018.11.13 ИП-00020202
&НаКлиенте
Процедура ОткрытьОтчетПоРаспределению(Команда)

	спНом = Новый СписокЗначений;
	НомерРаспределения = 0;
	ДатаРаспределения = Объект.Дата - 86400;
	Для Каждого Стр из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Товары.ДанныеСтроки(Стр);
		спНом.Добавить(ДанныеСтроки.Номенклатура);
		НомерРаспределения = ДанныеСтроки.НомерРаспределения;		
	КонецЦикла;
	Если спНом.Количество()>0 Тогда
		
		ФормаОтчета = ОткрытьФорму("Отчет.ОтчетПоРаспределению.Форма.ФормаОтчета");
		
		мНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		мПараметрыДанных			= мНастройки.ПараметрыДанных;
		ЭлементыПользоватНастроек 	= ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		
		Идентификатор = мПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРаспределения")).ИдентификаторПользовательскойНастройки;
		ЭлементыПользоватНастроек.Найти(Идентификатор).Значение = ДатаРаспределения;
		
		Идентификатор = мПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НомерРаспределения")).ИдентификаторПользовательскойНастройки;
		ЭлементыПользоватНастроек.Найти(Идентификатор).Значение = НомерРаспределения;
		
		Идентификатор = мПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Номенклатура")).ИдентификаторПользовательскойНастройки;
		ЭлементыПользоватНастроек.Найти(Идентификатор).Значение = спНом;
		
		Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(мНастройки.Отбор, "ТорговаяТочка");
		Если Отборы.Количество() > 0 И Не ПустаяСтрока(Отборы[0].ИдентификаторПользовательскойНастройки) Тогда
			Идентификатор = Отборы[0].ИдентификаторПользовательскойНастройки;
			ЭлементОтбора = ЭлементыПользоватНастроек.Найти(Идентификатор);
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение	= Объект.Получатель;
			ЭлементОтбора.Использование		= Истина;
		КонецЕсли;
		
		ФормаОтчета.СкомпоноватьРезультат();
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выделите строки");
	КонецЕСли;

КонецПроцедуры

///++АК LUZA 2018.11.14 ИП-00019422
&НаСервере
Процедура ОтправитьЗаказВДругуюТТНаСервере(ВыбПолучатель)
	Отказ = Ложь;
	                     	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка
	|ПОМЕСТИТЬ ВТ_РТУ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|ГДЕ
	|	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер = &РасходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтурEDI_Сообщения.Ссылка КАК Сообщение
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РТУ КАК ВТ_РТУ
	|		ПО КонтурEDI_Сообщения.Документ = ВТ_РТУ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РТУ.Ссылка КАК РТУ
	|ИЗ
	|	ВТ_РТУ КАК ВТ_РТУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РТУ.Ссылка";
	
	Запрос.УстановитьПараметр("РасходныйОрдер", Объект.Ссылка);

	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТЗРТУ = ПакетЗапроса.Получить(2).Выгрузить();
	ТЗСообщения = ПакетЗапроса.Получить(1).Выгрузить();
	
	Если ТЗРТУ.Количество() <> 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По данному расходному ордеру найдено больше 1 го РТУ",,,, Отказ);
	КонецЕсли;	
	
	Если ТЗСообщения.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдено ни одного сообщения по связанным РТУ",,,, Отказ);
	КонецЕсли;	
	
	Если Не Отказ Тогда
		НачатьТранзакцию();
		
		Для каждого Стр Из ТЗСообщения Цикл
			СпрОбъект = Стр.Сообщение.ПолучитьОбъект();
			СпрОбъект.Документ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			Попытка 
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Отказ = Истина;
				Прервать;
			КонецПопытки;	
		КонецЦикла;	
		
		Для каждого Стр Из ТЗРТУ Цикл
			ДокОбъект = Стр.РТУ.ПолучитьОбъект();
			ДокОбъект.EDI_ТочкаДоставки = ВыбПолучатель;
			ДокОбъект.ДополнительныеСвойства.Вставить("НеПроверятьБлокировкуОбменомПоEDI");
			Попытка 
				ДокОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Отказ = Истина;
				Прервать;
			КонецПопытки;	
		КонецЦикла;
		
		Объект.Получатель = ВыбПолучатель;
		Попытка 
			Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;			
		КонецПопытки;	
		
		
		Если НЕ Отказ Тогда
			ЗафиксироватьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Получатель изменен");
		Иначе
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить получателя");
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

///++АК LUZA 2018.11.14 ИП-00019422
&НаСервере
Функция ОперделитьВидимостьКнопкиОтправитьЗаказСервер()
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка
	|ПОМЕСТИТЬ ВТ_РТУ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|ГДЕ
	|	РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер = &РасходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтурEDI_Сообщения.Ссылка КАК Сообщение,
	|	ВТ_РТУ.Ссылка КАК РТУ
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РТУ КАК ВТ_РТУ
	|		ПО КонтурEDI_Сообщения.Документ = ВТ_РТУ.Ссылка";
	
	Запрос.УстановитьПараметр("РасходныйОрдер", Объект.Ссылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;	
КонецФункции

///++АК LUZA 2018.11.14 ИП-00019422
&НаКлиенте
Процедура ОтправитьЗаказВДругуюТТ(Команда)
	
	СписокТиповРозничныхТочек = Новый СписокЗначений;
	СписокТиповРозничныхТочек.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Пятерочка"));
	СписокТиповРозничныхТочек.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Перекресток"));

	Отбор = Новый Структура;
	Отбор.Вставить("ТипРозничнойТочки", СписокТиповРозничныхТочек);
	Отбор.Вставить("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	СписокПараметров = Новый Структура;                	
	ОП = Новый ОписаниеОповещения("ВыборПолучателяЗавершение", ЭтаФорма, СписокПараметров);
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора",ПараметрыФормы,,,,,ОП);

КонецПроцедуры

///++АК LUZA 2018.11.14 ИП-00019422
&НаКлиенте
Процедура ВыборПолучателяЗавершение(Результат, СписокПараметров) Экспорт
	ВыбПолучатель = Результат;
	Если ЗначениеЗаполнено(ВыбПолучатель) = Истина И ВыбПолучатель <> Объект.Получатель Тогда
		СписокПараметров.Вставить("ВыбПолучатель", ВыбПолучатель);
		ТекстВопроса = "Отправить заказ в торговую точку " + СокрЛП(Строка(ВыбПолучатель)) + "? Документ будет перезаписан."; 
		ОП = Новый ОписаниеОповещения("РезультатВопросаОСменеПолучателя", ЭтаФорма, СписокПараметров);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена); 
	КонецЕсли;	
КонецПроцедуры	

///++АК LUZA 2018.11.14 ИП-00019422
&НаКлиенте
Процедура РезультатВопросаОСменеПолучателя(Результат, СписокПараметров) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда		
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		ОтправитьЗаказВДругуюТТНаСервере(СписокПараметров.ВыбПолучатель);
	КонецЕсли;
	
КонецПроцедуры
