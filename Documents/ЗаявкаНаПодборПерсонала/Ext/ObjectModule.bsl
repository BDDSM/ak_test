
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ОбновитьСтатусДокументаЗаявкаНаПодборПерсонала(Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаСоответствияОбеспеченияПотребностям();
	Отказ = ПроверитьНаличиеСотрудниковВОбеспечениях(ЭтотОбъект.Обеспечение.ВыгрузитьКолонку("Сотрудник"), Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет статус документа в зависимости от состояния документа
// Новая → Обеспечена/Отменена 
//
Процедура ОбновитьСтатусДокументаЗаявкаНаПодборПерсонала(Отказ);

	ЕстьДанные      = ЭтотОбъект.Потребности.Количество() > 0;
	ЗаявкаОбепечена = ПроверитьПолноеОбеспечениеЗаявки(Отказ);
	
	Если ЕстьДанные И НЕ ЭтотОбъект.ПометкаУдаления И (ЭтотОбъект.Статус <> Перечисления.СтатусыЗаявокНаПодборПерсонала.Обеспечена 
		   И  ЭтотОбъект.Статус <> Перечисления.СтатусыЗаявокНаПодборПерсонала.Отменена) И ЗаявкаОбепечена Тогда 
		ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаПодборПерсонала.Обеспечена;
	ИначеЕсли ЕстьДанные И НЕ ЭтотОбъект.ПометкаУдаления И (ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаПодборПерсонала.Новая 
		     ИЛИ ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаПодборПерсонала.Обеспечена И НЕ ЗаявкаОбепечена) Тогда
		ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаПодборПерсонала.ВРаботе;
	ИначеЕсли ЭтотОбъект.ПометкаУдаления Тогда
		ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаПодборПерсонала.Отменена;
	ИначеЕсли Не ЕстьДанные Тогда
		ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаПодборПерсонала.Новая;
	КонецЕсли;

КонецПроцедуры // ОбновитьСтатусДокументаЗаявкаНаПодборПерсонала();()

// Проверяет все полное обеспечение заявки (в разрезе всех должностей)
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак полного обеспечения
//
Функция ПроверитьПолноеОбеспечениеЗаявки(Отказ) 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабПотребности.Должность,
	|	ТабПотребности.Количество КАК КвоПотребность
	|ПОМЕСТИТЬ ВТ_Потребности
	|ИЗ
	|	&Потребности КАК ТабПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОбеспечение.Должность,
	|	ТабОбеспечение.Сотрудник
	|ПОМЕСТИТЬ ВТ_Обеспечение
	|ИЗ
	|	&Обеспечение КАК ТабОбеспечение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб_Итоговая.Должность КАК Должность,
	|	СУММА(Таб_Итоговая.КвоПотребность) КАК КвоПотребность,
	|	СУММА(Таб_Итоговая.КвоОбеспечение) КАК КвоОбеспечение,
	|	СУММА(Таб_Итоговая.Обеспечено) КАК НеОбеспечено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабПотребности.Должность КАК Должность,
	|		ТабПотребности.КвоПотребность КАК КвоПотребность,
	|		ТабОбеспечение.КвоОбеспечение КАК КвоОбеспечение,
	|		ТабПотребности.КвоПотребность - ЕСТЬNULL(ТабОбеспечение.КвоОбеспечение, 0) КАК Обеспечено
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Потребности.Должность КАК Должность,
	|			ВТ_Потребности.КвоПотребность КАК КвоПотребность
	|		ИЗ
	|			ВТ_Потребности КАК ВТ_Потребности
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_Потребности.Должность,
	|			ВТ_Потребности.КвоПотребность) КАК ТабПотребности
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВТ_Обеспечение.Должность КАК Должность,
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Обеспечение.Сотрудник) КАК КвоОбеспечение
	|			ИЗ
	|				ВТ_Обеспечение КАК ВТ_Обеспечение
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТ_Обеспечение.Должность) КАК ТабОбеспечение
	|			ПО ТабПотребности.Должность = ТабОбеспечение.Должность) КАК Таб_Итоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб_Итоговая.Должность
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Таб_Итоговая.Обеспечено) > 0
	|		ИЛИ СУММА(Таб_Итоговая.Обеспечено) < 0)";
	
	Запрос.УстановитьПараметр("Потребности", ЭтотОбъект.Потребности.Выгрузить());
	Запрос.УстановитьПараметр("Обеспечение", ЭтотОбъект.Обеспечение.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		СтрокаУведомления = "";
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.НеОбеспечено < 0 Тогда
				СтрокаУведомления = СтрокаУведомления + Выборка.Должность + "; ";
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаУведомления) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить("Обеспечение не должно превышать установленные потребности (проверьте должность СтрокаУведомления)!", 
					"СтрокаУведомления", СтрокаУведомления),,,,Отказ);

		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Проверяет наличие сотрудников в других обеспечениях (дважды обним сотрудником нельзя закрывать протребность)
//
// Параметры:
//  Сотрудник  - <Тип.СправочникСсылка.ФизическиеЛица>, <Тип.Массив>  - Сотрудник, Массив сотрудников
//                 <продолжение описания параметра>
//  ДокументСсылка  - <Тип.ДокументСсылка.ЗаявкаНаПодборПерсонала> - Текущий документ 
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак наличия сотрудника
//
Функция ПроверитьНаличиеСотрудниковВОбеспечениях(Сотрудник, ДокументСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаПодборПерсоналаОбеспечение.Ссылка КАК Ссылка,
	|	ЗаявкаНаПодборПерсоналаОбеспечение.Сотрудник КАК Сотрудник,
	|	ЗаявкаНаПодборПерсоналаОбеспечение.Должность
	|ИЗ
	|	Документ.ЗаявкаНаПодборПерсонала.Обеспечение КАК ЗаявкаНаПодборПерсоналаОбеспечение
	|ГДЕ
	|	ЗаявкаНаПодборПерсоналаОбеспечение.Сотрудник В(&Сотрудник)
	|	И НЕ ЗаявкаНаПодборПерсоналаОбеспечение.Ссылка.ПометкаУдаления
	|	И ЗаявкаНаПодборПерсоналаОбеспечение.Ссылка.Ссылка <> &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СтрокаУведомления = "";
		ШаблонУведомления = "Сотрудник %1 уже присутствует в документе: %2, Должность: %3";
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаУведомления = СтрокаУведомления + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУведомления, Выборка.Сотрудник, Выборка.Ссылка, Выборка.Должность) + Символы.ПС;   
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаУведомления) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(НСтр("ru = 'СтрокаУведомления';"),"СтрокаУведомления", СтрокаУведомления));
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ПроверитьНаличиеСотрудниковВОбеспечениях()

// Очищает несоответствия должностей обеспечения которые не указаны в потребностях
//
Процедура ПроверкаСоответствияОбеспеченияПотребностям()
	
	Если Обеспечение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("Выбрать * ПОМЕСТИТЬ ВТ_Потребности Из &ВременнаяТаблица Как ВременнаяТаблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременнаяТаблица", Потребности.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ВТ_Обеспечение Из &ВременнаяТаблица Как ВременнаяТаблица";
	Запрос.УстановитьПараметр("ВременнаяТаблица", Обеспечение.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ_Обеспечение.Должность,
	|	ВТ_Обеспечение.Сотрудник,
	|	ВТ_Обеспечение.Комментарий
	|ИЗ
	|	ВТ_Потребности КАК ВТ_Потребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Обеспечение КАК ВТ_Обеспечение
	|		ПО ВТ_Потребности.Должность = ВТ_Обеспечение.Должность
	|ГДЕ
	|	НЕ ВТ_Обеспечение.Должность ЕСТЬ NULL
	|	И ВТ_Потребности.Должность <> """"";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Обеспечение.Загрузить(Результат.Выгрузить());
	Иначе
		Обеспечение.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПроверкаСоответствияОбеспеченияПотребностям()

#КонецОбласти