
Перем ГСЧ;


Процедура ПродавецПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"		, НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("Сотрудник"	, Объект.Продавец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабельРаботыПродавцов.Сотрудник,
	|	ТабельРаботыПродавцов.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
	|ГДЕ
	|	ТабельРаботыПродавцов.Период = &Период
	|	И ТабельРаботыПродавцов.Сотрудник = &Сотрудник
	|	И НЕ ТабельРаботыПродавцов.ТорговаяТочка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ТорговаяТочка = Выборка.ТорговаяТочка;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	
	ПродавецПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПродавцамКассирамСервер()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Продавец"						, Объект.Продавец);
	Запрос.УстановитьПараметр("ТорговаяТочка"					, Объект.ТорговаяТочка);
	Запрос.УстановитьПараметр("ДатаДок"							, НачалоДня(Объект.Дата));
	//+++АК POZM 2017.10.25 ИП-00016961  
	//Запрос.УстановитьПараметр("ДатаНачалаАктуальностиВопросов"	, ДобавитьМесяц(НачалоДня(Объект.Дата), Константы.СрокАктуальностиВопросовПродавцу.Получить()));
	Запрос.УстановитьПараметр("ДатаНачалаАктуальностиВопросов"	, ДобавитьМесяц(НачалоДня(Объект.Дата), -Константы.СрокАктуальностиВопросовПродавцу.Получить()));
	//---АК POZM 
	Запрос.УстановитьПараметр("Должность"						, ?(ЗначениеЗаполнено(Объект.Должность), Объект.Должность, Справочники.ДолжностиОрганизаций.НайтиПоНаименованию("Продавец-консультант")));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭкзаменыПродавцовВопросы.Вопрос
	|ПОМЕСТИТЬ ВопросыУжеЗаданные
	|ИЗ
	|	Документ.ЭкзаменыПродавцов.Вопросы КАК ЭкзаменыПродавцовВопросы
	|ГДЕ
	|	ЭкзаменыПродавцовВопросы.Ссылка.Проведен
	|	И ЭкзаменыПродавцовВопросы.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|	И НАЧАЛОПЕРИОДА(ЭкзаменыПродавцовВопросы.Ссылка.Дата, ДЕНЬ) = &ДатаДок
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭкзаменыПродавцовВопросы.Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭкзаменыПродавцовВопросы.Вопрос
	|ПОМЕСТИТЬ ВопросыУжеЗаданныеПродавцу
	|ИЗ
	|	Документ.ЭкзаменыПродавцов.Вопросы КАК ЭкзаменыПродавцовВопросы
	|ГДЕ
	|	ЭкзаменыПродавцовВопросы.Ссылка.Проведен
	|	И ЭкзаменыПродавцовВопросы.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|	И ЭкзаменыПродавцовВопросы.Ссылка.Продавец = &Продавец
	|	И ЭкзаменыПродавцовВопросы.Ссылка.Дата >= &ДатаНачалаАктуальностиВопросов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭкзаменыПродавцовВопросы.Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(ЭкзаменыПродавцов.Ссылка.Продавец.ДатаНачалаРаботы, &ДатаДок, МЕСЯЦ) КАК СтажРаботыМесяцев,
	//+++АК POZM 2017.10.25 ИП-00016961 
	|	РАЗНОСТЬДАТ(ЭкзаменыПродавцов.Ссылка.Продавец.ДатаНачалаРаботы, &ДатаДок, День) КАК СтажРаботыДней,
	//---АК POZM 
	|	СУММА(ВЫБОР
	|			КОГДА ЭкзаменыПродавцов.ПравильныйОтвет
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК НеверныхОтветов
	|ПОМЕСТИТЬ ПредыдущийРезультат
	|ИЗ
	|	Документ.ЭкзаменыПродавцов.Вопросы КАК ЭкзаменыПродавцов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЭкзаменыПродавцов.Продавец КАК Продавец,
	|			МАКСИМУМ(ЭкзаменыПродавцов.Дата) КАК Дата
	|		ИЗ
	|			Документ.ЭкзаменыПродавцов КАК ЭкзаменыПродавцов
	|		ГДЕ
	|			ЭкзаменыПродавцов.Продавец = &Продавец
	|			И ЭкзаменыПродавцов.Проведен
	|			И ЭкзаменыПродавцов.Дата < &ДатаДок
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЭкзаменыПродавцов.Продавец) КАК ВложенныйЗапрос
	|		ПО ЭкзаменыПродавцов.Ссылка.Дата = ВложенныйЗапрос.Дата
	|			И ЭкзаменыПродавцов.Ссылка.Продавец = ВложенныйЗапрос.Продавец
	|ГДЕ
	|	ЭкзаменыПродавцов.Ссылка.Проведен
	|	И ЭкзаменыПродавцов.Ссылка.Продавец = &Продавец
	|
	|СГРУППИРОВАТЬ ПО
	|	РАЗНОСТЬДАТ(ЭкзаменыПродавцов.Ссылка.Продавец.ДатаНачалаРаботы, &ДатаДок, МЕСЯЦ),
	//+++АК POZM 2017.10.25 ИП-00016961 
	|	РАЗНОСТЬДАТ(ЭкзаменыПродавцов.Ссылка.Продавец.ДатаНачалаРаботы, &ДатаДок, День)
	//---АК POZM 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОпросникДляЭкзаменацииПродавцаВопросы.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВопросыУжеЗаданные.Вопрос, 1) = 1
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	ОпросникДляЭкзаменацииПродавцаПапки.Ссылка КАК Папка,
	|	ЕСТЬNULL(ОпросникДляЭкзаменацииПродавцаПапки.ВопросовВЭкзамене, 0) КАК ВопросовВЭкзамене,
	|	ЕСТЬNULL(ПредыдущийРезультат.СтажРаботыМесяцев, 0) КАК СтажРаботы,
	//+++АК POZM 2017.10.25 ИП-00016961 
	|	ЕСТЬNULL(ПредыдущийРезультат.СтажРаботыДней, 0) КАК СтажРаботыВДнях,
	//---АК POZM 
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПредыдущийРезультат.НеверныхОтветов, 1) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтличник
	|ИЗ
	|	Справочник.ОпросникДляЭкзаменацииПродавца.ПринадлежностьВопросов КАК ОпросникДляЭкзаменацииПродавцаПапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВопросыУжеЗаданные КАК ВопросыУжеЗаданные
	|		ПО (ВопросыУжеЗаданные.Вопрос = ОпросникДляЭкзаменацииПродавцаПапки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОпросникДляЭкзаменацииПродавца КАК ОпросникДляЭкзаменацииПродавцаВопросы
	|		ПО ОпросникДляЭкзаменацииПродавцаПапки.Ссылка = ОпросникДляЭкзаменацииПродавцаВопросы.Родитель
	|			И (НЕ ОпросникДляЭкзаменацииПродавцаВопросы.Проект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущийРезультат КАК ПредыдущийРезультат
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ОпросникДляЭкзаменацииПродавцаВопросы.Ссылка.Устарел
	|	И ОпросникДляЭкзаменацииПродавцаПапки.Должность = &Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Папка,
	|	Порядок
	|ИТОГИ
	|	МАКСИМУМ(ВопросовВЭкзамене)
	|ПО
	|	Папка";
	
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ОпросникДляЭкзаменацииПродавца.Ссылка КАК Ссылка,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ВопросыУжеЗаданные.Вопрос, 1) = 1
	//|			ТОГДА 1
	//|		ИНАЧЕ 2
	//|	КОНЕЦ КАК Порядок
	//|ИЗ
	//|	Справочник.ОпросникДляЭкзаменацииПродавца КАК ОпросникДляЭкзаменацииПродавца
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВопросыУжеЗаданные КАК ВопросыУжеЗаданные
	//|		ПО (ВопросыУжеЗаданные.Вопрос = ОпросникДляЭкзаменацииПродавца.Ссылка)
	//|ГДЕ
	////|	НЕ ОпросникДляЭкзаменацииПродавца.Ссылка В
	////|				(ВЫБРАТЬ
	////|					ВопросыУжеЗаданныеПродавцу.Вопрос
	////|				ИЗ
	////|					ВопросыУжеЗаданныеПродавцу КАК ВопросыУжеЗаданныеПродавцу)
	//|	 НЕ ОпросникДляЭкзаменацииПродавца.Устарел
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Порядок
	//|ИТОГИ ПО
	//|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	ВыборкаПоБлокам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ОграничениеВопросовВБлоке=Константы.КоличествоВопросовВБлокеОпросаПродавца.Получить();
	//Если ОграничениеВопросовВБлоке=0 Тогда
	//	ОграничениеВопросовВБлоке=5;
	//КонецЕсли;
	
	ЭтоОтличник = Ложь;
	СтажРаботы 	= 0;
	//+++АК POZM 2017.10.25 ИП-00016961 
	СтажРаботыВДнях = 0;
	//---АК POZM 
	Объект.Вопросы.Очистить();
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	//обКолВопросов = 0;
	
	Пока ВыборкаПоБлокам.Следующий() Цикл
		
		ОграничениеВопросовВБлоке = ВыборкаПоБлокам.ВопросовВЭкзамене;
		Если ОграничениеВопросовВБлоке = 0 Тогда
			ОграничениеВопросовВБлоке = 5;
		КонецЕсли;
		
		НомерВопроса = 0;
		
		ТЗВопросов = Новый ТаблицаЗначений;
		ТЗВопросов.Колонки.Добавить("Ссылка");
		ТЗВопросов.Колонки.Добавить("Порядок");
		ТЗВопросов.Колонки.Добавить("ВопросовВЭкзамене");
		ТЗВопросов.Колонки.Добавить("СлучайноеЧисло");
		
		ВыборкаВопросов = ВыборкаПоБлокам.Выбрать();
		Пока ВыборкаВопросов.Следующий() Цикл
			ЭтоОтличник = ВыборкаВопросов.ЭтоОтличник;
			СтажРаботы 	= ВыборкаВопросов.СтажРаботы;
			//+++АК POZM 2017.10.25 ИП-00016961 
			СтажРаботыВДнях = ВыборкаВопросов.СтажРаботыВДнях;
			//---АК POZM 
			НоваяСтрока = ТЗВопросов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВопросов);
			случайное = ГСЧ.СлучайноеЧисло();
			НоваяСтрока.СлучайноеЧисло = Случайное;
		КонецЦикла;
		ТЗВопросов.Сортировать("Порядок, СлучайноеЧисло");
		Для каждого СтрокаВопрос Из ТЗВопросов Цикл
			НомерВопроса 	= НомерВопроса 	+ 1;
			//обКолВопросов 	= обКолВопросов + 1;
			//Если Объект.ВопросовВЭкзамене > 0 
			//		И обКолВопросов > Объект.ВопросовВЭкзамене Тогда
			//	Прервать;
			//КонецЕсли;
			НоваяСтрока = Объект.Вопросы.Добавить();
			НоваяСтрока.Вопрос 				= СтрокаВопрос.Ссылка;
			НоваяСтрока.ВопросовВЭкзамене 	= СтрокаВопрос.ВопросовВЭкзамене;
			Если НомерВопроса = ОграничениеВопросовВБлоке Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	ВопросовДляОтличника = Объект.Должность.ВопросовДляОтличника;
	
	Если ЭтоОтличник
		//+++АК POZM 2017.10.25 ИП-00016961 
		//И СтажРаботы >= 6
		И ?(Объект.Должность.МинимальныйСтажДляЛьготногоЭкзаменаВДнях = 0,СтажРаботы >= Объект.Должность.МинимальныйСтажДляЛьготногоЭкзамена,СтажРаботыВДнях >= Объект.Должность.МинимальныйСтажДляЛьготногоЭкзаменаВДнях)
		//---АК POZM 
		И ВопросовДляОтличника > 0 Тогда // оставим только Объект.Должность.ВопросовДляОтличника случайных вопросов
		
		ТЗВ = Объект.Вопросы.Выгрузить();
		//+++АК POZM 2018.04.19 ИП-00018108 
		ТЗВ.Колонки.Добавить("СлучайноеЧисло");
		ТЗВ.Колонки.Добавить("Приоритет");
		СтруктураБлоков = Новый Структура;
		СтруктураБлоков.Вставить("Б1",1);
		СтруктураБлоков.Вставить("Б2",2);
		СтруктураБлоков.Вставить("Б3",2);
		//---АК POZM 
		Для Каждого Стр Из ТЗВ Цикл
			случайное = ГСЧ.СлучайноеЧисло();
			Стр.СлучайноеЧисло = Случайное;
			//+++АК POZM 2018.04.19 ИП-00018108 
			Если Объект.Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию("Продавец-консультант") ИЛИ Объект.Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию("Старший продавец") Тогда
				Если Найти(Стр.Вопрос.Родитель.Наименование,"1.")>0  И СтруктураБлоков.Б1 > 0 Тогда
					Стр.Приоритет = 1;
					СтруктураБлоков.Б1 = СтруктураБлоков.Б1 - 1;
				ИначеЕсли Найти(Стр.Вопрос.Родитель.Наименование,"2.")>0  И СтруктураБлоков.Б2 > 0 Тогда
					Стр.Приоритет = 2;
					СтруктураБлоков.Б2 = СтруктураБлоков.Б2 - 1;
				ИначеЕсли Найти(Стр.Вопрос.Родитель.Наименование,"3.")>0  И СтруктураБлоков.Б3 > 0 Тогда
					Стр.Приоритет = 3;
					СтруктураБлоков.Б3 = СтруктураБлоков.Б3 - 1;	
				Иначе
					Стр.Приоритет = 10;
				КонецЕсли;	
			Иначе
				Стр.Приоритет = 10;
			КонецЕсли;	
			//---АК POZM 
		КонецЦикла;	
		
		ТЗВ.Сортировать("Приоритет,СлучайноеЧисло");
		
		Й = 0;
		
		Объект.Вопросы.Очистить();
		Для Каждого Стр Из ТЗВ Цикл
			НоваяСтрока = Объект.Вопросы.Добавить();
			НоваяСтрока.Вопрос 				= Стр.Вопрос;
			НоваяСтрока.ВопросовВЭкзамене 	= Стр.ВопросовВЭкзамене;
			й = й + 1;
			Если й = ВопросовДляОтличника Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСтажерамСервер()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Продавец"						, Объект.Продавец);
	Запрос.УстановитьПараметр("ТорговаяТочка"					, Объект.ТорговаяТочка);
	Запрос.УстановитьПараметр("ДатаДок"							, НачалоДня(Объект.Дата));
	//+++АК POZM 2017.10.25 ИП-00016961  
	//Запрос.УстановитьПараметр("ДатаНачалаАктуальностиВопросов"	, ДобавитьМесяц(НачалоДня(Объект.Дата), Константы.СрокАктуальностиВопросовПродавцу.Получить()));
	Запрос.УстановитьПараметр("ДатаНачалаАктуальностиВопросов"	, ДобавитьМесяц(НачалоДня(Объект.Дата), -Константы.СрокАктуальностиВопросовПродавцу.Получить()));
	//---АК POZM 
	Запрос.УстановитьПараметр("Должность"						, Объект.Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОпросникДляЭкзаменацииПродавцаВопросы.Ссылка КАК Ссылка,
	|	ОпросникДляЭкзаменацииПродавцаПапки.Ссылка КАК Папка,
	|	ЕСТЬNULL(ОпросникДляЭкзаменацииПродавцаПапки.ВопросовВЭкзамене, 0) КАК ВопросовВЭкзамене
	|ИЗ
	|	Справочник.ОпросникДляЭкзаменацииПродавца.ПринадлежностьВопросов КАК ОпросникДляЭкзаменацииПродавцаПапки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОпросникДляЭкзаменацииПродавца КАК ОпросникДляЭкзаменацииПродавцаВопросы
	|		ПО ОпросникДляЭкзаменацииПродавцаПапки.Ссылка = ОпросникДляЭкзаменацииПродавцаВопросы.Родитель
	|			И (НЕ ОпросникДляЭкзаменацииПродавцаВопросы.Проект)
	|ГДЕ
	|	НЕ ОпросникДляЭкзаменацииПродавцаВопросы.Ссылка.Устарел
	|	И ОпросникДляЭкзаменацииПродавцаПапки.Должность = &Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Папка
	|ИТОГИ
	|	МАКСИМУМ(ВопросовВЭкзамене)
	|ПО
	|	Папка";
	
	
	ВыборкаПоБлокам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Объект.Вопросы.Очистить();
	ГСЧ = Новый ГенераторСлучайныхЧисел();
		
	Пока ВыборкаПоБлокам.Следующий() Цикл
		
		ОграничениеВопросовВБлоке = ВыборкаПоБлокам.ВопросовВЭкзамене;
		Если ОграничениеВопросовВБлоке = 0 Тогда
			ОграничениеВопросовВБлоке = 5;
		КонецЕсли;
		
		НомерВопроса = 0;
		
		ТЗВопросов = Новый ТаблицаЗначений;
		ТЗВопросов.Колонки.Добавить("Ссылка");
		ТЗВопросов.Колонки.Добавить("Порядок");
		ТЗВопросов.Колонки.Добавить("ВопросовВЭкзамене");
		ТЗВопросов.Колонки.Добавить("СлучайноеЧисло");
		
		ВыборкаВопросов = ВыборкаПоБлокам.Выбрать();
		Пока ВыборкаВопросов.Следующий() Цикл
			НоваяСтрока = ТЗВопросов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВопросов);
			случайное = ГСЧ.СлучайноеЧисло();
			НоваяСтрока.СлучайноеЧисло = Случайное;
		КонецЦикла;
		ТЗВопросов.Сортировать("Порядок, СлучайноеЧисло");
		Для каждого СтрокаВопрос Из ТЗВопросов Цикл
			НомерВопроса 	= НомерВопроса 	+ 1;
			НоваяСтрока = Объект.Вопросы.Добавить();
			НоваяСтрока.Вопрос 				= СтрокаВопрос.Ссылка;
			НоваяСтрока.ВопросовВЭкзамене 	= СтрокаВопрос.ВопросовВЭкзамене;
			Если НомерВопроса = ОграничениеВопросовВБлоке Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры
&НаСервере
Процедура ПодобратьВопросыСервер()
	
	//+++АК POZM 2018.02.06 ИП-00017762 
	
	Если Объект.Должность.Наименование = "Стажер" Тогда
		ЗаполнитьПоСтажерамСервер();
	Иначе
		ЗаполнитьПоПродавцамКассирамСервер();
	КонецЕсли;	
	
	//---АК POZM 
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьВопросы(Команда)
	
	ПодобратьВопросыСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ВопросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Функция СкайпТочки(Точка)
	
	Возврат СокрЛП(Точка.АдресSkype);
	
КонецФункции	

&НаКлиенте
Процедура ЗвонокSkype(Команда)
	
	Скайп = ПолучитьCOMОбъект("", "Skype4COM.Skype");
	
	АдресСкайп = СкайпТочки(Объект.ТорговаяТочка);
	Если АдресСкайп = "" Тогда
		Сообщить("Для торговой точки не задан адрес skype, звонок невозможен");
		Возврат;
	КонецЕсли;
	
	Скайп.PlaceCall(АдресСкайп);
	БылЗвонок = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Попытка
	//	ПодключитьВнешнююКомпоненту("ОбщийМакет.Skype4Com", "Skype", ТипВнешнейКомпоненты.COM);
	//Исключение
	//	УстановитьВнешнююКомпоненту("ОбщийМакет.Skype4Com");
	//	ПодключитьВнешнююКомпоненту("ОбщийМакет.Skype4Com", "Skype", ТипВнешнейКомпоненты.COM);
	//КонецПопытки;
	//
	//Попытка
	//	Скайп = ПолучитьCOMОбъект("", "Skype4COM.Skype");
	//Исключение	
	//	Если Объект.Ссылка.Пустая() Тогда
	//		Сообщить("Ошибка создания объекта Skype, приложение скорее всего не установлено! Невозможно создать новый экзамен!");
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;	
	//	
	//КонецПопытки;	
	//
	//Если Скайп = Неопределено Тогда
	//	
	//	Сообщить("Ошибка создания объекта Skype, приложение скорее всего не установлено!");
	//	Если Объект.Ссылка.Пустая() Тогда
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;	
	//Иначе
	//	Попытка
	//		Если НЕ Скайп.Client.IsRunning Тогда
	//			Скайп.Client.Start(True, True);
	//			Скайп.Client.Minimize();
	//		КонецЕсли;
	//	Исключение
	//		Сообщить("Ошибка создания объекта Skype, приложение скорее всего не установлено!");
	//		Если Объект.Ссылка.Пустая() Тогда
	//			Закрыть();
	//		КонецЕсли;	
	//	КонецПопытки	
	//КонецЕсли;
	
	//+++АК sils 08.06.2018 ИП-00018466
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018466
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Экзамены продавцов");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ЗначениеЗаполнено(Параметры.Продавец) Тогда
		Объект.Продавец 		= Параметры.Продавец;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Точка) Тогда
		Объект.ТорговаяТочка	= Параметры.Точка;
	КонецЕсли;
	//Если ЗначениеЗаполнено(Параметры.Свойство) Тогда
	//	Объект.Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Параметры.Свойство);
	//Иначе
	//	Объект.Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию("Продавец-консультант");
	//КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Должность) Тогда
		Объект.Должность = Параметры.Должность;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.ВопросовВЭкзамене) Тогда
		Объект.ВопросовВЭкзамене = Параметры.ВопросовВЭкзамене;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.Продавец)
		И ЗначениеЗаполнено(Параметры.Точка) Тогда
		Объект.Дата = ТекущаяДата();
		//
		ПодобратьВопросыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если не БылЗвонок Тогда
	////	Если Объект.Ссылка.Пустая() Тогда
	////		Отказ=Истина;
	////		Сообщить("Без звонка по Skype новый экзамен нельзя записать! Звонок обязателен!");
	////	КонецЕсли;	
	//	Возврат;
	//КонецЕсли;	
	
	//+++АК POZM 2018.10.16 ИП-00020081 
	#Область АК_ОтключенныйКод 
	//Если ПодключитьРасширениеРаботыСФайлами() = Ложь Тогда
	//	УстановитьРасширениеРаботыСФайлами(); 
	//КонецЕсли;
	//
	//ПутьНаСервере = ПутьХраненияВидеоНаСервере();
	//Если СокрЛП(ПутьНаСервере) = "" Тогда
	//	Сообщить("Не задан путь хранения для видео. Не удалось прикрепить видео к экзамену");
	//	Возврат;
	//КонецЕсли;	
	//
	//ПутьНаКлиенте = КаталогМоиДокументы() + "VideoCallRecords\";
	//
	//Если НужноПоместитьФайлы Тогда
	//	НужноПоместитьФайлы = ЛОЖЬ;
	//	НайденныеФайлы = НайтиФайлы(ПутьНаКлиенте, "*.*");
	//	Для каждого файл Из НайденныеФайлы Цикл
	//		
	//		Попытка
	//			НС = Объект.ВидеоЗаписи.Добавить();
	//			ДвоичДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
	//			Адрес = ПоместитьВоВременноеХранилище(ДвоичДанные, Новый УникальныйИдентификатор);
	//			ИмяТекущегоФайла = "Экз" + СокрЛП(Объект.Продавец) + "Стр" + НС.НомерСтроки + Формат(Объект.Дата, "ДФ=ddMMyyyy") + ".mp4";
	//			НС.ПутьКФайлуВидео = ПутьНаСервере + "\" + ИмяТекущегоФайла;
	//			ПереместитьФайлИзХранилищаВПапкуХраненияВидеоНаСервере(Адрес, НС.ПутьКФайлуВидео, Файл.Расширение);
	//			УдалитьФайлы(Файл.ПолноеИмя);
	//		исключение	
	//			Сообщить("Ошибка при помещении файла в хранилище: " + Файл.ПолноеИмя);
	//			Продолжить;
	//		КонецПопытки;	
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;	
	//
	//Если Объект.Ссылка.Пустая() Тогда
	//	
	//	Начало = ТекущаяДата();
	//	Пока ТекущаяДата() <= Начало + 5 Цикл // пауза необходима, так как файлы не сразу кладутся в папку программой-писалкой
	//		
	//	КонецЦикла;	
	//	
	//	НайденныеФайлы = НайтиФайлы(ПутьНаКлиенте, "*.*");
	//	Если НайденныеФайлы.Количество()>0 Тогда
	//		НужноПоместитьФайлы = Истина;
	//	КонецЕсли;	
	//	
	//КонецЕсли;	
	#КонецОбласти 
	
	Если Объект.Ссылка.Пустая() ИЛИ Объект.ВидеоЗаписи.Количество() = 0 Тогда
		
		НужноПоместитьФайлы = Истина;
				
	КонецЕсли;
	
	//---АК POZM 
	
КонецПроцедуры


&НаСервере
Процедура ПереместитьФайлИзХранилищаВПапкуХраненияВидеоНаСервере(АдресВХранилище,НовоеИмя,Расширение)
	
	ДвоичныеДанные 		= ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(Расширение); 
	
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ПереместитьФайл(ИмяВременногоФайла,НовоеИмя);
	
КонецПроцедуры	

&НаСервере
Функция ПутьХраненияВидеоНаСервере()
	
	Возврат Константы.ПутьХраненияВидеоТестированияПродавцов.Получить();
	
КонецФункции

&НаКлиенте
Процедура ПутьКФайлуВидеоНажатие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение(Объект.ПутьКФайлуВидео);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидеоЗаписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ВидеоЗаписи.ТекущиеДанные;
	ПутьКФайлуНаСервере = ТекСтрока.ПутьКФайлуВидео;
	АдресВХранилище 	= ПолучитьВидеоДляПросмотраСервер(ПутьКФайлуНаСервере);
	ДвоичныеДанные 		= ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("mp4"); 
	
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЗапуститьПриложение(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидеоДляПросмотраСервер(ПутьКФайлуНаСервере)
	
	ДвоичДанные = Новый ДвоичныеДанные(ПутьКФайлуНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичДанные, Новый УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции	

&НаКлиенте
Функция КаталогМоиДокументы() Экспорт
	
	App = Новый COMОбъект("Shell.Application");
	
	Folder = App.Namespace(5);
	
	Результат = "";
	
	Попытка
		
		Результат = Folder.Self.Path;
		
	Исключение
		
		Результат = "";
		
	КонецПопытки;
	
	Если Результат = "" Тогда
		
		Результат = КаталогВременныхФайлов();
		
	КонецЕсли; 
	
	//
	Возврат Результат + "\";
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВидеоФайл(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок 				= "Выберите файл с видео";
	ДиалогОткрытияФайла.ПолноеИмяФайла 			= "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	//ДиалогОткрытияФайла.Фильтр = РаботаСФайлами.ПолучитьФильтрИзображений();
	ПутьНаСервере = ПутьХраненияВидеоНаСервере();
	Если СокрЛП(ПутьНаСервере) = "" Тогда
		Сообщить("Не задан путь хранения для видео. Не удалось прикрепить видео к экзамену");
		Возврат;
	КонецЕсли;	
	
	//
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		//ВыбранноеИзображение = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла, Ложь);
		НС=Объект.ВидеоЗаписи.Добавить();
		ДвоичДанные = Новый ДвоичныеДанные(ДиалогОткрытияФайла.ПолноеИмяФайла);
		Адрес=ПоместитьВоВременноеХранилище(ДвоичДанные,Новый УникальныйИдентификатор);
		//+++АК POZM 2018.10.16 ИП-00020081 
		ИмяТекущегоФайла="Экз_"+Объект.Номер+"_Стр_"+НС.НомерСтроки+"_."+Прав(ДиалогОткрытияФайла.ПолноеИмяФайла,3);
		//---АК POZM 
		НС.ПутьКФайлуВидео=ПутьНаСервере+"\"+ИмяТекущегоФайла;
		ПереместитьФайлИзХранилищаВПапкуХраненияВидеоНаСервере(Адрес, НС.ПутьКФайлуВидео, ДиалогОткрытияФайла.Расширение);
		//УдалитьФайлы(Файл.ПолноеИмя);
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПриИзменении(Элемент)
	
	РассчитатьРезультатСервер();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРезультатСервер()
	
	ВерныеСтроки = Объект.Вопросы.НайтиСтроки(Новый Структура("ПравильныйОтвет", Истина));
	Объект.Результат = ВерныеСтроки.Количество();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если НужноПоместитьФайлы Тогда
		Записать();
	КонецЕсли;	
КонецПроцедуры

//+++АК POZM 2018.10.16 ИП-00020081 
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ЗначениеЗаполнено(Объект.Ссылка) И НужноПоместитьФайлы Тогда
		ОткрытьФорму("Документ.ЭкзаменыПродавцов.Форма.ФормаПрикрепленияФайлов",Новый Структура("Ключ",Объект.Ссылка),,,,,, РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;	
КонецПроцедуры


//---АК POZM 