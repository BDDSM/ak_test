&НаКлиенте
Перем ИмяАктивнойКнопки;


&НаКлиенте
Процедура ФильтрНеВыполнено(Команда)
	
	ВыделитьКнопку("ФильтрНеВыполнено");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОбязательноДляПрочтения(Команда)
	
	ВыделитьКнопку("ФильтрОбязательноДляПрочтения");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрВсеСообщения(Команда)
	
	ВыделитьКнопку("ФильтрВсеСообщения");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОбязательноВыполнить(Команда)
	
	ВыделитьКнопку("ФильтрОбязательноВыполнить");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКнопку(ИмяКнопки)
	
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Родитель = Элементы.Фильтры Тогда
			Если Элемент.Имя = ИмяКнопки Тогда
				Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,, Истина);
				ИмяАктивнойКнопки = ИмяКнопки;
			Иначе
				Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВыделитьКнопку()

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ВыделитьКнопку("ФильтрОбязательноДляПрочтения");
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 30);
	ОбновитьДанные(Неопределено);
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()

	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда) Экспорт
	
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
		
КонецПроцедуры

Процедура ОбновитьДанныеНаСервере(ИмяАктивнойКнопки)
	
	Для каждого ЭО1 Из Список.Отбор.Элементы Цикл
		Если ЗначениеЗаполнено(ЭО1.Представление) И Лев(ЭО1.Представление + "      ", 6) = "Фильтр" Тогда
			Если ЭО1.Представление = ИмяАктивнойКнопки Тогда
				ЭО1.Использование = Истина;
			Иначе
				ЭО1.Использование = Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры



&НаКлиенте
Процедура СообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// вызываем форму сообщения
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ЭтоЧерновик = ЭтоЧерновик(ТекДанные.Ссылка);
		ОткрытыеОкна = ПолучитьОкна();
		Для Каждого Окно Из ОткрытыеОкна Цикл
			Форма1 = Окно.ПолучитьСодержимое();
			Если Форма1 <> Неопределено Тогда
				Если Форма1.КлючУникальности = "СЩ_ОкноПодтверждения" ИЛИ Форма1.КлючУникальности = "СЩ_ОкноНовогоСообщения" Тогда
					Форма1.Закрыть();
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Если ЭтоЧерновик Тогда
			СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
			Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаНовогоСообщенияМагазина", СП1, ЭтаФорма,"СЩ_ОкноНовогоСообщения");
		Иначе
			СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
			Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаПодтвержденияМагазина", СП1, ЭтаФорма,"СЩ_ОкноПодтверждения");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЧерновик(Ссылка)
	
	Возврат НЕ Ссылка.Проведен;
	
КонецФункции // ()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Открытие списка сообщений в магазине");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	// заполним реквизиты обработки
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		Сообщить("Не заполнен параметр сеанса ""Текущий пользователь"". Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	ТекДата = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Сообщить("Не заполнен параметр сеанса ""Торговая точка по Айпи"". Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", ТорговаяТочка);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекДата);
	
	//ОснРежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ОснРежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаАктуальности");
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ТекДата;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(ТорговаяТочка);
	Если НЕ ЗначениеЗаполнено(СтаршийСмены) Тогда
		Сообщить("Не заполнен старший смены! Работа с сообщениями невозможна");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("СтаршийСмены", СтаршийСмены);
	
	//ГруппаИЛИ1 = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаИЛИ1.Использование = Истина;
	//ГруппаИЛИ1.РежимОтображения = ОснРежимОтображения;
	//ГруппаИЛИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//ЭлементОтбора = ГруппаИЛИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	
	//ЭлементОтбора = ГруппаИЛИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проведен");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Истина;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	
	//ГруппаИЛИ2 = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаИЛИ2.Использование = Истина;
	//ГруппаИЛИ2.РежимОтображения = ОснРежимОтображения;
	//ГруппаИЛИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	//ЭлементОтбора = ГруппаИЛИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтаршийСмены");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = СтаршийСмены;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	//	
	//ЭлементОтбора = ГруппаИЛИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсемСменам");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Истина;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	
	//Заголовок = Заголовок + МеханизмОбменаСообщениями.ПолучитьДобавкуКЗаголовкуОкна();
	
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСообщение(Команда)
	
	Если ЕстьНепроведенныеДокументыВМагазине() Тогда
		Сообщить("В магазине есть созданные, но не отправленные сообщения. Отправьте или удалите их! Создание нового сообщения невозможно!");
		Возврат;
	КонецЕсли;
	
	//Форма1 = ПолучитьФорму("Справочник.ШаблоныСообщенийМОС.Форма.ФормаВыбораДляМагазина",, ЭтаФорма);
	//ВыбранныйШаблон = Форма1.ОткрытьМодально();
	//Если ВыбранныйШаблон = КодВозвратаДиалога.Отмена ИЛИ НЕ ЗначениеЗаполнено(ВыбранныйШаблон) Тогда
	//	Сообщить("Создание новых сообщений возможно только на основе шаблона.");
	//	Возврат;
	//КонецЕсли;
	//
	//ПФ1 = Новый Структура("Шаблон", ВыбранныйШаблон);
	Форма1 = ПолучитьФорму("Документ.СообщениеМОС.Форма.ФормаНовогоСообщенияМагазина",, ЭтаФорма, "СЩ_ОкноНовогоСообщения");
	Форма1.Открыть();
	
КонецПроцедуры

Функция ЕстьНепроведенныеДокументыВМагазине()

	Если Документы.СообщениеМОС.ЕстьНепроведенныеДокументыВМагазине() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ()


&НаКлиенте
Процедура ФильтрВсеОтправленные(Команда)
	
	ВыделитьКнопку("ФильтрВсеОтправленные");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСообщенияМОС" Тогда
		 Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	//Сообщить("Удаляем");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуСписка(Команда)
	
	ТД = Элементы.Список.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ПометитьДокументНаУдаление(ТД.Ссылка);
		Элементы.Список.Обновить();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПометитьДокументНаУдаление(ДокСсылка)

	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	ДокОбъект.ПометкаУдаления = Истина;
	ДокОбъект.Записать();

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТД1 = Элемент.ТекущиеДанные;
	Если ТД1 <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТД1.Прочитал) Тогда
			УстановитьЦветТекста(Ложь);
		Иначе
			УстановитьЦветТекста(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦветТекста(Невидимый)

	Если Невидимый Тогда
		Элементы.ТекстСообщения.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	Иначе
		Элементы.ТекстСообщения.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;

КонецПроцедуры

