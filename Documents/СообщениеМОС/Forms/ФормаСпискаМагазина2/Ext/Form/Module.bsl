&НаКлиенте
Перем ИмяАктивнойКнопки;


&НаКлиенте
Процедура ФильтрНеВыполнено(Команда)
	
	ВыделитьКнопку("ФильтрНеВыполнено");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОбязательноДляПрочтения(Команда)
	
	ВыделитьКнопку("ФильтрОбязательноДляПрочтения");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрВсеСообщения(Команда)
	
	ВыделитьКнопку("ФильтрВсеСообщения");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОбязательноВыполнить(Команда)
	
	ВыделитьКнопку("ФильтрОбязательноВыполнить");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКнопку(ИмяКнопки)
	
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Родитель = Элементы.Фильтры Тогда
			Если Элемент.Имя = ИмяКнопки Тогда
				Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,, Истина);
				ИмяАктивнойКнопки = ИмяКнопки;
			Иначе
				Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВыделитьКнопку()

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ВыделитьКнопку("Фильтр2Входящие");
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 30);
	
	ТекДата = ТекущаяДата();
	
	Если (ТекДата - НачалоДня(ТекДата)) > 3600*20 Тогда
		// выведем окно предупреждения о наличии невыполненных задачах (если таковые есть)
		// если их больше 3-х, то довыводим "а также другие задачи"
		ОбновитьТаблицуНаСервере("ФильтрОбязательноВыполнить");
		Если ТЗРез.Количество() > 0 Тогда
			ТекстСообщения = "Вам на сегодня были поставлены следующие задачи:";
			Сч1 = 1;
			Для каждого СтрокаТЗРез Из ТЗРез Цикл
				Если Сч1 <= 3 Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + Строка(Сч1) + ". " + СокрЛП(СтрокаТЗРез.Тема);
				ИначеЕсли Сч1 = 4 Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + "...а также другие задачи (общее количество невыполненных задач - " + Строка(ТЗРез.Количество()) + ")";
				КонецЕсли;
				Сч1 = Сч1 + 1;
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Необходимо выполнить вышеуказанные задачи и нажать кнопку ""Задача выполнена"" в окне задачи.";
			
			Предупреждение(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	
	ОбновитьДанные(Неопределено);
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()

	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда) Экспорт
	
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
		
КонецПроцедуры

Процедура ОбновитьДанныеНаСервере(ИмяАктивнойКнопки)
	
	Для каждого ЭО1 Из Список.Отбор.Элементы Цикл
		Если ЗначениеЗаполнено(ЭО1.Представление) И Лев(ЭО1.Представление + "      ", 6) = "Фильтр" Тогда
			Если ЭО1.Представление = ИмяАктивнойКнопки Тогда
				ЭО1.Использование = Истина;
			Иначе
				ЭО1.Использование = Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	//Элементы.Список.Обновить();
	
	ОбновитьТаблицуНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры


Процедура ОбновитьТаблицуНаСервере(ИмяАктивнойКнопки)
	
	ТекСсылка = Неопределено;
	ТекСтраница = СокрЛП(Элементы.Панель.ТекущаяСтраница.Имя);
	
	ИмяТаблицы = СтрЗаменить(ТекСтраница, "Страница", "");
	
	КаталогХраненияФайлов = СокрЛП(Константы.КаталогХраненияФайлов.Получить());
	
	ТекСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрокаТаблицы = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
		Если ТекСтрокаТаблицы <> Неопределено Тогда
			ТекСсылка = ТекСтрокаТаблицы.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Дата КАК Дата,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Номер КАК Номер,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ТипСообщения КАК ТипСообщения,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Тема КАК Тема,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.РольПолучателя КАК РольПолучателя,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ТекстСообщения КАК ТекстСообщения,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Автор КАК Автор,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ДатаИВремяВыполненияПлан КАК ДатаИВремяВыполненияПлан,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ДатаИВремяВыполненияФакт КАК ДатаИВремяВыполненияФакт,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.СрокАктуальностиСообщения КАК СрокАктуальностиСообщения,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Отправитель КАК Отправитель,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Товар КАК Товар,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ШаблонСообщений КАК ШаблонСообщений,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ТипИнцидента КАК ТипИнцидента,
	|	СообщениеМОССтруктурныеЕдиницы.СтаршийСмены КАК СтаршийСмены,
	|	СообщениеМОССтруктурныеЕдиницы.Прочитал КАК Прочитал,
	|	СообщениеМОССтруктурныеЕдиницы.ДатаИВремяПрочтения КАК ДатаИВремяПрочтения,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ВсемСменам КАК ВсемСменам,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.Проведен КАК Проведен,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.СтатусИнцидента КАК СтатусИнцидента,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.КодНаправления КАК КодНаправления,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ПрочтеноВсеми КАК ПрочтеноВсеми,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ДатаАктуальности КАК ДатаАктуальности,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.СтатусИнцидентаИзменен,
	|	ВЫБОР
	|		КОГДА СообщениеМОССтруктурныеЕдиницы.Ссылка.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМОС.Инцидент)
	|				И СообщениеМОССтруктурныеЕдиницы.Ссылка.СтатусИнцидента = 3
	|			ТОГДА ""Проверить выполнение""
	|		КОГДА СообщениеМОССтруктурныеЕдиницы.Ссылка.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМОС.ИнформационноеСообщение)
	|				И СообщениеМОССтруктурныеЕдиницы.Ссылка.КодНаправления = 0
	|				И СообщениеМОССтруктурныеЕдиницы.Прочитал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ""Прочитать сообщение""
	|		КОГДА СообщениеМОССтруктурныеЕдиницы.Ссылка.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМОС.Задача)
	|				И СообщениеМОССтруктурныеЕдиницы.Прочитал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ""Выполнить задачу""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТребуемоеДействие,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.СтатусСообщенияСтрокой КАК СтатусСообщения,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.АдресИ_ИД_ПочтовогоСообщения,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.SQL_ID,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.АдресЭПОтправителя,
	|	СообщениеМОССтруктурныеЕдиницы.Ссылка.ЕстьВложения
	|ИЗ
	|	Документ.СообщениеМОС.СтруктурныеЕдиницы КАК СообщениеМОССтруктурныеЕдиницы
	|ГДЕ
	|	СообщениеМОССтруктурныеЕдиницы.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И СообщениеМОССтруктурныеЕдиницы.СтаршийСмены = &СтаршийСмены
	|	И СообщениеМОССтруктурныеЕдиницы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СообщениеМОССтруктурныеЕдиницы.Ссылка.ДатаАктуальности >= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос1.УстановитьПараметр("СтруктурнаяЕдиница", ТорговаяТочка);
	Запрос1.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос1.УстановитьПараметр("СтаршийСмены", СтаршийСмены);
	
	Выб1 = Запрос1.Выполнить().Выбрать();
	
	Если ИмяТаблицы = "ДЗРез" Тогда
		Данные1 = ДЗРез.ПолучитьЭлементы();
	Иначе
		Данные1 = ЭтаФорма[ИмяТаблицы];
	КонецЕсли;
	
	Данные1.Очистить();
		
	Пока Выб1.Следующий() Цикл
		ДобавлятьСтроку = Ложь;
		Если ИмяАктивнойКнопки = "ФильтрНеВыполнено" ИЛИ ИмяАктивнойКнопки = "Фильтр2Задачи" Тогда
			Если Выб1.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент
					И (Выб1.СтатусИнцидента = 1 ИЛИ Выб1.СтатусИнцидента = 2 ИЛИ Выб1.СтатусИнцидента = 3) Тогда
				ДобавлятьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИмяАктивнойКнопки = "ФильтрОбязательноВыполнить" ИЛИ ИмяАктивнойКнопки = "Фильтр2Задачи" Тогда
			Если Выб1.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача
					И НЕ ЗначениеЗаполнено(Выб1.Прочитал) Тогда
				ДобавлятьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИмяАктивнойКнопки = "ФильтрОбязательноДляПрочтения" Тогда
			Если (Выб1.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение ИЛИ Выб1.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача)
					И НЕ ЗначениеЗаполнено(Выб1.Прочитал) И Выб1.КодНаправления = 0
					ИЛИ Выб1.СтатусИнцидентаИзменен Тогда
				ДобавлятьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИмяАктивнойКнопки = "ФильтрВсеОтправленные" Тогда
			Если Выб1.КодНаправления = 1 Тогда
				ДобавлятьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИмяАктивнойКнопки = "ФильтрЧерновики" Тогда
			Если НЕ Выб1.Проведен Тогда
				ДобавлятьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИмяАктивнойКнопки = "ФильтрВсеСообщения" Тогда
			ДобавлятьСтроку = Истина;
		КонецЕсли;
		
		Если ИмяАктивнойКнопки = "Фильтр2Входящие" Тогда
			Если Выб1.Проведен И Выб1.КодНаправления = 0 Тогда
				ДобавлятьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		ТипСообщения2 = "";
		
		Если Выб1.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение Тогда
			//Если ЗначениеЗаполнено(Выб1.АдресИ_ИД_ПочтовогоСообщения) ИЛИ ЗначениеЗаполнено(Выб1.SQL_ID)
			//		ИЛИ Найти(Выб1.Автор.Наименование, "Диговцова") > 0 Тогда
			//	СтрокаТЗРез.ТипСообщения2 = "Уведомление с сервера";
			
			СтрокаАдресовЭП1 = "vkusvill@it-stuff.ru, no-reply@vkusvill.ru";
			
			Если Найти(СтрокаАдресовЭП1, НРег(Выб1.АдресЭПОтправителя)) > 0 ИЛИ ЗначениеЗаполнено(Выб1.SQL_ID)
					ИЛИ Найти(Выб1.Автор.Наименование, "Диговцова") > 0 Тогда
				ТипСообщения2 = "Уведомление с сервера";
			ИначеЕсли Найти(Выб1.Отправитель.Наименование, "УЕК") > 0 Тогда
				ТипСообщения2 = "Отдел УЕК";
			ИначеЕсли Найти(Выб1.Отправитель.Наименование, "Мерченд") > 0 Тогда
				ТипСообщения2 = "Мерчендайзер";
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщения2 = "Уведомление с сервера" Тогда
			Если ИмяТаблицы <> "ТЗРезУС" Тогда
				ДобавлятьСтроку = Ложь;
			КонецЕсли;
		Иначе
			Если ИмяТаблицы = "ТЗРезУС" Тогда
				ДобавлятьСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДобавлятьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИсключений = "";
		Если НЕ ЗначениеЗаполнено(Выб1.Прочитал) Тогда
			СтрокаИсключений = "ТекстСообщения";
		КонецЕсли;
				
		
		Если ИмяТаблицы = "ТЗРез" ИЛИ ИмяТаблицы = "ТЗРезУС" Тогда
			СтрокаТаблицы = Данные1.Добавить();
		ИначеЕсли ИмяТаблицы = "ДЗРез" Тогда
			//поищем с такой же темой, если найдём, то сделаем в иерархии
			Тема2 = СокрЛП(СтрЗаменить(Выб1.Тема, "Re:", ""));
			Тема2 = СокрЛП(СтрЗаменить(Тема2, "Ответ на", ""));
			РодительНайден = Ложь;
			Для каждого СтрокаДЗ1 Из Данные1 Цикл
				Если СокрЛП(ВРег(СтрокаДЗ1.Тема)) = СокрЛП(ВРег(Тема2)) Тогда
					РодительНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если РодительНайден Тогда
				Данные2 = СтрокаДЗ1.ПолучитьЭлементы();
				СтрокаТаблицы = Данные2.Добавить();
			Иначе
				СтрокаТаблицы = Данные1.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выб1,, СтрокаИсключений);
		
		// заполним колонку ТипСообщения2 
		
		СтрокаТаблицы.ТипСообщения2 = Строка(СтрокаТаблицы.ТипСообщения);
		Если ЗначениеЗаполнено(ТипСообщения2) Тогда
			СтрокаТаблицы.ТипСообщения2 = ТипСообщения2;
		КонецЕсли;
		
		
		//Если Выб1.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение Тогда
		//	//Если ЗначениеЗаполнено(Выб1.АдресИ_ИД_ПочтовогоСообщения) ИЛИ ЗначениеЗаполнено(Выб1.SQL_ID)
		//	//		ИЛИ Найти(Выб1.Автор.Наименование, "Диговцова") > 0 Тогда
		//	//	СтрокаТЗРез.ТипСообщения2 = "Уведомление с сервера";
		//	
		//	СтрокаАдресовЭП1 = "vkusvill@it-stuff.ru, no-reply@vkusvill.ru";
		//	
		//	Если Найти(СтрокаАдресовЭП1, НРег(Выб1.АдресЭПОтправителя)) > 0 ИЛИ ЗначениеЗаполнено(Выб1.SQL_ID)
		//			ИЛИ Найти(Выб1.Автор.Наименование, "Диговцова") > 0 Тогда
		//		СтрокаТаблицы.ТипСообщения2 = "Уведомление с сервера";
		//	ИначеЕсли Найти(Выб1.Отправитель.Наименование, "УЕК") > 0 Тогда
		//		СтрокаТаблицы.ТипСообщения2 = "Отдел УЕК";
		//	ИначеЕсли Найти(Выб1.Отправитель.Наименование, "Мерченд") > 0 Тогда
		//		СтрокаТаблицы.ТипСообщения2 = "Мерчендайзер";
		//	КонецЕсли;
		//КонецЕсли;
		
		// проверим наличие файлов
		//Папка1 = СокрЛП(Выб1.Номер);
		//ПолныйКаталогФВ = КаталогХраненияФайлов + "MessAtt\" + Папка1;
		//МСФВ = НайтиФайлы(ПолныйКаталогФВ, "*.*");
		//Если МСФВ.Количество() > 0 Тогда
		//	СтрокаТаблицы.Вложения = 1;
		//Иначе
		//	СтрокаТаблицы.Вложения = 0;
		//КонецЕсли;
		
		СтрокаТаблицы.Вложения = Число(Выб1.ЕстьВложения);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Автор) Тогда
			Если ЗначениеЗаполнено(Выб1.АдресЭПОтправителя) Тогда
				СтрокаТаблицы.Автор = СокрЛП(Выб1.АдресЭПОтправителя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекСсылка <> Неопределено Тогда
		ИДСтроки = Неопределено;
		Если ИмяТаблицы = "ТЗРез" Тогда
			СО1 = Новый Структура("Ссылка", ТекСсылка);
			МС1 = ТЗРез.НайтиСтроки(СО1);
			Если МС1.Количество() > 0 Тогда
				СтрокаТЗ1 = МС1[0];
				ИДСтроки = СтрокаТЗ1.ПолучитьИдентификатор();
			КонецЕсли; 
			Если ИДСтроки <> Неопределено Тогда
				Элементы.ТЗРез.ТекущаяСтрока = ИДСтроки;
			КонецЕсли;
		ИначеЕсли ИмяТаблицы = "ДЗРез" Тогда
			Строки = ДЗРез.ПолучитьЭлементы();
			ИДСтроки = ПолучитьИД_ДЗПоСсылке(Строки, ТекСсылка);
			Если ИДСтроки <> Неопределено Тогда
				Элементы.ДЗРез.ТекущаяСтрока = ИДСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИД_ДЗПоСсылке(Строки, Ссылка)

	Для каждого Строка1 Из Строки Цикл
		Если Строка1.Ссылка = Ссылка Тогда
			Возврат Строка1.ПолучитьИдентификатор();
		Иначе
			Строки2 = Строка1.ПолучитьЭлементы();
			ИД2 = ПолучитьИД_ДЗПоСсылке(Строки2, Ссылка);
			Если ИД2 <> Неопределено Тогда
				Возврат ИД2;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;

КонецФункции // ()


&НаКлиенте
Процедура СообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// вызываем форму сообщения
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ЭтоЧерновик = ЭтоЧерновик(ТекДанные.Ссылка);
		ОткрытыеОкна = ПолучитьОкна();
		Для Каждого Окно Из ОткрытыеОкна Цикл
			Форма1 = Окно.ПолучитьСодержимое();
			Если Форма1 <> Неопределено Тогда
				Если Форма1.КлючУникальности = "СЩ_ОкноПодтверждения" ИЛИ Форма1.КлючУникальности = "СЩ_ОкноНовогоСообщения" Тогда
					Форма1.Закрыть();
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Если ЭтоЧерновик Тогда
			СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
			Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаНовогоСообщенияМагазина", СП1, ЭтаФорма,"СЩ_ОкноНовогоСообщения");
		Иначе
			СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
			Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаПодтвержденияМагазина", СП1, ЭтаФорма,"СЩ_ОкноПодтверждения");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЧерновик(Ссылка)
	
	Возврат НЕ Ссылка.Проведен;
	
КонецФункции // ()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Открытие списка сообщений в магазине");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	// заполним реквизиты обработки
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		Сообщить("Не заполнен параметр сеанса ""Текущий пользователь"". Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	ТекДата = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Сообщить("Не заполнен параметр сеанса ""Торговая точка по Айпи"". Работа с сообщениями невозможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", ТорговаяТочка);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекДата);
	
	//ОснРежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ОснРежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаАктуальности");
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ТекДата;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(ТорговаяТочка);
	Если НЕ ЗначениеЗаполнено(СтаршийСмены) Тогда
		Сообщить("Не заполнен старший смены! Работа с сообщениями невозможна");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("СтаршийСмены", СтаршийСмены);
	
	//ГруппаИЛИ1 = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаИЛИ1.Использование = Истина;
	//ГруппаИЛИ1.РежимОтображения = ОснРежимОтображения;
	//ГруппаИЛИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//ЭлементОтбора = ГруппаИЛИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	
	//ЭлементОтбора = ГруппаИЛИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проведен");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Истина;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	
	//ГруппаИЛИ2 = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаИЛИ2.Использование = Истина;
	//ГруппаИЛИ2.РежимОтображения = ОснРежимОтображения;
	//ГруппаИЛИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	//ЭлементОтбора = ГруппаИЛИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтаршийСмены");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = СтаршийСмены;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	//	
	//ЭлементОтбора = ГруппаИЛИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсемСменам");
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Истина;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.РежимОтображения = ОснРежимОтображения;
	
	//Заголовок = Заголовок + МеханизмОбменаСообщениями.ПолучитьДобавкуКЗаголовкуОкна();
	
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСообщение(Команда)
	
	Если ЕстьНепроведенныеДокументыВМагазине() Тогда
		//Сообщить("В магазине есть созданные, но не отправленные сообщения. Отправьте или удалите их! Создание нового сообщения невозможно!");
		Сообщить("В магазине более 10 сообщений-черновиков. Отправьте или удалите их! Создание нового сообщения невозможно!");
		Возврат;
	КонецЕсли;
	
	//Форма1 = ПолучитьФорму("Справочник.ШаблоныСообщенийМОС.Форма.ФормаВыбораДляМагазина",, ЭтаФорма);
	//ВыбранныйШаблон = Форма1.ОткрытьМодально();
	//Если ВыбранныйШаблон = КодВозвратаДиалога.Отмена ИЛИ НЕ ЗначениеЗаполнено(ВыбранныйШаблон) Тогда
	//	Сообщить("Создание новых сообщений возможно только на основе шаблона.");
	//	Возврат;
	//КонецЕсли;
	//
	//ПФ1 = Новый Структура("Шаблон", ВыбранныйШаблон);
	Форма1 = ПолучитьФорму("Документ.СообщениеМОС.Форма.ФормаНовогоСообщенияМагазина",, ЭтаФорма, "СЩ_ОкноНовогоСообщения");
	Форма1.Открыть();
	
КонецПроцедуры

Функция ЕстьНепроведенныеДокументыВМагазине()

	Если Документы.СообщениеМОС.ЕстьНепроведенныеДокументыВМагазине() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ()


&НаКлиенте
Процедура ФильтрВсеОтправленные(Команда)
	
	ВыделитьКнопку("ФильтрВсеОтправленные");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСообщенияМОС" Тогда
		ОбновитьТаблицуНаСервере(ИмяАктивнойКнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	//Сообщить("Удаляем");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуСписка(Команда)
	
	ТД = Элементы.ТЗРез.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ПометитьДокументНаУдаление(ТД.Ссылка);
		ОбновитьТаблицуНаСервере(ИмяАктивнойКнопки);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПометитьДокументНаУдаление(ДокСсылка)

	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	ДокОбъект.ПометкаУдаления = Истина;
	ДокОбъект.Записать();

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТД1 = Элемент.ТекущиеДанные;
	Если ТД1 <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТД1.Прочитал) Тогда
			УстановитьЦветТекста(Ложь);
		Иначе
			УстановитьЦветТекста(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦветТекста(Невидимый)

	Если Невидимый Тогда
		Элементы.ТекстСообщения.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	Иначе
		Элементы.ТекстСообщения.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ТЗРезВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
		// вызываем форму сообщения
	ТекДанные = Элемент.ТекущиеДанные;
	ОткрытьСообщение(ТекДанные);
	
	
	//Если ТекДанные <> Неопределено Тогда
	//	ЭтоЧерновик = ЭтоЧерновик(ТекДанные.Ссылка);
	//	ОткрытыеОкна = ПолучитьОкна();
	//	Для Каждого Окно Из ОткрытыеОкна Цикл
	//		Форма1 = Окно.ПолучитьСодержимое();
	//		Если Форма1 <> Неопределено Тогда
	//			Если Форма1.КлючУникальности = "СЩ_ОкноПодтверждения" ИЛИ Форма1.КлючУникальности = "СЩ_ОкноНовогоСообщения" Тогда
	//				Форма1.Закрыть();
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если ЭтоЧерновик Тогда
	//		СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
	//		Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаНовогоСообщенияМагазина", СП1, ЭтаФорма,"СЩ_ОкноНовогоСообщения");
	//	Иначе
	//		СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
	//		Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаПодтвержденияМагазина", СП1, ЭтаФорма,"СЩ_ОкноПодтверждения");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЧерновики(Команда)
	
	ВыделитьКнопку("ФильтрЧерновики");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр2Задачи(Команда)
	
	ВыделитьКнопку("Фильтр2Задачи");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр2Входящие(Команда)
	
	ВыделитьКнопку("Фильтр2Входящие");
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьВсеПрочитанными(Команда)
	
	Ответ1 = Вопрос("Вы действительно хотите для всех непрочитанных"
			+ Символы.ПС + "сообщений установить статус ""Прочитано""?", РежимДиалогаВопрос.ДаНет);
			
	Если Ответ1 = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СделатьВсеПрочитаннымиНаСервере();
		
КонецПроцедуры

Процедура СделатьВсеПрочитаннымиНаСервере()

	Для каждого СтрокаТЗРез Из ТЗРез Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЗРез.Прочитал) И СтрокаТЗРез.ТипСообщения <> Перечисления.ТипыСообщенийМОС.Инцидент И СтрокаТЗРез.КодНаправления = 0 Тогда
			ТекущийОбъект = СтрокаТЗРез.Ссылка.ПолучитьОбъект();
			СО1 = Новый Структура("СтаршийСмены,СтруктурнаяЕдиница", СтаршийСмены, ТорговаяТочка);
			МСС1 = ТекущийОбъект.СтруктурныеЕдиницы.НайтиСтроки(СО1);
			Если МСС1.Количество() > 0 Тогда
				СтрокаТЧ1 = МСС1[0];
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ1.Прочитал) Тогда
					СтрокаТЧ1.Прочитал = ПараметрыСеанса.ТекущийПользователь;
					СтрокаТЧ1.ДатаИВремяПрочтения = ТекущаяДатаСеанса();
					ТекущийОбъект.Записать();
					ОбновитьДанныеНаСервере(Неопределено);
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура Тест1(Команда)
	
	Тест1НаСервере();
	
КонецПроцедуры

Процедура Тест1НаСервере()

	//ДЗ1 = РеквизитФормыВЗначение(ДЗРез);
	СтрокиДЗРез = ДЗРез.ПолучитьЭлементы();
	Строка1 = СтрокиДЗРез.Добавить();
	Строка1.Дата = '20170101';
	
	Строка1 = СтрокиДЗРез.Добавить();
	Строка1.Дата = '20170102';
	
	Строка1 = СтрокиДЗРез.Добавить();
	Строка1.Дата = '20170103';
	
	Строки1 = Строка1.ПолучитьЭлементы();
	
	Строка11 = Строки1.Добавить();
	Строка11.Дата = '20170203';
	Строка11 = Строки1.Добавить();
	Строка11.Дата = '20170204';

КонецПроцедуры


&НаКлиенте
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеНаСервере(ИмяАктивнойКнопки);
	
КонецПроцедуры


&НаКлиенте
Процедура ДЗРезВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// вызываем форму сообщения
	ТекДанные = Элемент.ТекущиеДанные;
	ОткрытьСообщение(ТекДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСообщение(ТекДанные)

	Если ТекДанные <> Неопределено Тогда
		ЭтоЧерновик = ЭтоЧерновик(ТекДанные.Ссылка);
		ОткрытыеОкна = ПолучитьОкна();
		Для Каждого Окно Из ОткрытыеОкна Цикл
			Форма1 = Окно.ПолучитьСодержимое();
			Если Форма1 <> Неопределено Тогда
				Если Форма1.КлючУникальности = "СЩ_ОкноПодтверждения" ИЛИ Форма1.КлючУникальности = "СЩ_ОкноНовогоСообщения" Тогда
					Форма1.Закрыть();
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Если ЭтоЧерновик Тогда
			СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
			Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаНовогоСообщенияМагазина", СП1, ЭтаФорма,"СЩ_ОкноНовогоСообщения");
		Иначе
			СП1 = Новый Структура("Объект, ТорговаяТочка, СтаршийСмены", ТекДанные.Ссылка, ТорговаяТочка, СтаршийСмены);
			Форма1 = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаПодтвержденияМагазина", СП1, ЭтаФорма,"СЩ_ОкноПодтверждения");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЗРезУСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ОткрытьСообщение(ТекДанные);
	
КонецПроцедуры
