&НаКлиенте
Перем ФормаПодтверждения;


&НаСервере
Процедура НастроитьЭлементыФормы()

	Если Элементы.РольПользователя.СписокВыбора.Количество() = 1 Тогда
		Элементы.РольПользователя.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Элементы.ВидПолучателя.Видимость = Ложь;
		Элементы.Получатель.Видимость = Ложь;
		Элементы.Товар.Видимость = Ложь;
		Элементы.ТипСообщения.Видимость = Ложь;
		Элементы.Тема.ТолькоПросмотр = Истина;
		Элементы.ОтИмени.Видимость = Ложь;
		Элементы.СрокАктуальности.Видимость = Ложь;
		Элементы.СписокМагазинов.Видимость = Ложь;
		Если Объект.Основание.КодНаправления = 1 Тогда
			Элементы.ВсемСменам.Видимость = Истина; // т.к. ответ будет в магазин
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ОтИмени) Тогда // т.е. это магазин
			Элементы.ВидПолучателя.ТолькоПросмотр = Истина;
			Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль;
			Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача Тогда
				Объект.ТипСообщения = Неопределено;
			КонецЕсли;
		Иначе
			Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача Тогда
				Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов;
				Элементы.ВидПолучателя.ТолькоПросмотр = Истина;
				ВсемСменам = Ложь;
				Элементы.ВсемСменам.Доступность = Ложь;
			ИначеЕсли Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
				Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль;
				Элементы.ВидПолучателя.ТолькоПросмотр = Истина;
				ВсемСменам = Ложь;
				Элементы.ВсемСменам.Доступность = Ложь;
			Иначе
				Элементы.ВидПолучателя.ТолькоПросмотр = Ложь;
				Элементы.ВсемСменам.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
		//	Элементы.Товар.Видимость = УказаниеТовара;
		//	Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		//		Элементы.ТипИнцидента.Видимость = НЕ УказаниеТовара;
		//	КонецЕсли;
		//Иначе
		//	Элементы.Товар.Видимость = Ложь;
		//КонецЕсли;
			
		Элементы.Получатель.Видимость = Ложь;
		Элементы.СписокМагазинов.Видимость = Ложь;
		Элементы.ВсемСменам.Видимость = Истина;
		Элементы.Получатели.Видимость = Ложь;
		Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
			Элементы.Получатель.Видимость = Истина;
			Элементы.ВсемСменам.Видимость = Ложь;
		ИначеЕсли Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов И НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
			Элементы.СписокМагазинов.Видимость = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидПолучателей) Тогда
			Элементы.ВсемСменам.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТолькоПросмотр = Истина;
		Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины ИЛИ Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов Тогда
			Элементы.Получатели.Видимость = Истина;
			Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача Тогда
				 Элементы.СтруктурныеЕдиницыПрочитал.Заголовок = "Выполнил";
				 Элементы.СтруктурныеЕдиницыДатаИВремяПрочтения.Заголовок = "Дата и время выполнения";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ФормаПодтверждение.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = "Сообщение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Прочитал) Тогда
		Заголовок = Заголовок + " (сообщение прочитано)";
	КонецЕсли;
	
	Элементы.ТекстИКартинки.Видимость = Объект.Картинки.Количество() > 0;
	
КонецПроцедуры

//&НаСервере
Процедура ИнициализироватьРеквизитыЭлементыФормы(Отказ)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	СтрокаТЧ1 = Справочники.РолиПользователей.Администратор.СоставРоли.Найти(ТекущийПользователь.ФизЛицо, "Сотрудник");
	Если СтрокаТЧ1 <> Неопределено Тогда
		ЭтоАдминистратор = Истина;
	КонецЕсли;
	
	МассивРолей = Справочники.РолиПользователей.ПолучитьРолиПользователя(ТекущийПользователь);
		
	Для каждого Эл1 Из МассивРолей Цикл
		Элементы.РольПользователя.СписокВыбора.Добавить(Эл1);
	КонецЦикла;
	Если Объект.Ссылка.Пустая() Тогда
		Если МассивРолей.Количество() = 1 Тогда
			Объект.Отправитель = МассивРолей[0];
		КонецЕсли;
		Элементы.ФормаПодтверждение.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда // это вариант ответа/комментария
			Объект.Основание = Параметры.Основание;
			Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение;
			Эл1 = МассивРолей.Найти(Объект.Основание.РольПолучателя);
			Если Эл1 <> Неопределено Тогда
				Объект.Отправитель = Объект.Основание.РольПолучателя;
				Элементы.РольПользователя.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Объект.Основание.КодНаправления = 1 Тогда
				Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов;
				Магазин = Объект.Основание.СтруктурныеЕдиницы[0].СтруктурнаяЕдиница;
				СписокМагазинов.ЗаполнитьПометки(Ложь);
				ЭлСЗ1 = СписокМагазинов.НайтиПоЗначению(Магазин);
				Если ЭлСЗ1 <> Неопределено Тогда
					ЭлСЗ1.Пометка = Истина;
				КонецЕсли;
				Элементы.ВсемСменам.Видимость = Истина;
			Иначе
				Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль;
				Объект.РольПолучателя = Объект.Основание.Отправитель;
			КонецЕсли; 
			
			Объект.Тема = "Ответ на " + СокрЛП(Объект.Основание.Тема);
		КонецЕсли;
		
	Иначе
		Если МассивРолей.Найти(Объект.Отправитель) = Неопределено и Не Объект.ФлХТМЛ Тогда
			ПереходКФормеПодтверждения = Истина;
		КонецЕсли;
		Если МассивРолей.Найти(Объект.РольПолучателя) = Неопределено Тогда
			Элементы.ФормаПодтверждение.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//// Функция корректирует значение некоторых реквизитов обработки
//// Возвращает Истина, если всё нормально и Ложь, если есть ошибки
////
&НаСервере
Функция СкорректироватьПараметрыОбработки()

//	Если Объект.УказаниеТовара Тогда
//		// если на основании предопределённого шаблона, то адресуем в зависимости от шаблона
//		// если на основании обычного шаблона, то адресуем ответственному из карточки товара
//	
//		Если Объект.Шаблон = Справочники.ШаблоныСообщенийМОС.ПретензияКСкладу Тогда
//		
//			//ищем склад-поставщик для данного товара
//			СкладПоставщик = Обработки.СообщенияМОС.ПолучитьСкладПоставщикТовара(Объект.Товар, Объект.ОтИмени);
//			Если НЕ ЗначениеЗаполнено(СкладПоставщик) Тогда
//				ТекстСообщения = "Не найден склад-поставщик! Исходные данные:"
//				+ Символы.ПС + "Товар: " + Строка(Объект.Товар)
//				+ Символы.ПС + "Код структурной единицы: " + Формат(Объект.ОтИмени, "ЧГ=0");
//				
//				ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
//				Возврат Ложь;
//			КонецЕсли;
//		
//			//  по складу ищем роль и, если всё нашли, то заполняем эту роль
//			Объект.Получатель = Обработки.СообщенияМОС.ПолучитьРольПользователяПоСкладу(СкладПоставщик);
//			Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
//				ТекстСообщения = "Не найдена роль для склада! Исходные данные:"
//				+ Символы.ПС + "Склад: " + Строка(СкладПоставщик);
//				
//				ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
//				Возврат Ложь;
//			КонецЕсли;
//		ИначеЕсли Объект.Шаблон = Справочники.ШаблоныСообщенийМОС.ПретензияРасчетчику Тогда	
//			
//			// вычислим расчётчика по товару
//			Расчетчик = Обработки.СообщенияМОС.ПолучитьРасчетчикаПоТовару(Объект.Товар);
//			Если НЕ ЗначениеЗаполнено(Расчетчик) Тогда
//				ТекстСообщения = "Не удалось найти расчетчика по товару! Исходные данные:"
//				+ Символы.ПС + "Товар: " + Строка(Объект.Товар);
//				
//				ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
//				Возврат Ложь;
//			КонецЕсли;
//							
//			// найдём роль по найденному расчётчику
//			Объект.Получатель = Обработки.СообщенияМОС.ПолучитьРольПользователяПоРасчетчику(Расчетчик);
//			Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
//				ТекстСообщения = "Не найдена роль для расчетчика! Исходные данные:"
//				+ Символы.ПС + "Расчетчик: " + Строка(Расчетчик);
//									
//				ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
//				Возврат Ложь;
//			КонецЕсли;
//		ИначеЕсли Объект.Шаблон = Справочники.ШаблоныСообщенийМОС.ПретензияПоКачеству
//			  ИЛИ НЕ ЗначениеЗаполнено(Объект.Шаблон) Тогда	
//		// возьмём роль из карточки товара (реквизит "РольОтветственныхЗаТовар")
//		Объект.Получатель = Объект.Товар.РольОтветственныхЗаТовар;
//			Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
//				екстСообщения = "Не найдена роль ответственных по качеству! Исходные данные:"
//						+ Символы.ПС + "Товар: " + Строка(Объект.Товар);
//									
//				ПеренаправитьСообщениеАдминистраторуОбОшибке(ТекстСообщения);
//				Возврат Ложь;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ВидПолучателяПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокМагазинов = МеханизмОбменаСообщениями.ПолучитьСписокПодразделений("Магазины");
	ИнициализироватьРеквизитыЭлементыФормы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтИмени.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "Это подразделение");	
	Для каждого ЭлСЗ1 Из СписокМагазинов Цикл
		Элементы.ОтИмени.СписокВыбора.Добавить(ЭлСЗ1.Значение, ЭлСЗ1.Представление);
	КонецЦикла;
		
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ОтИмени = Элементы.ОтИмени.СписокВыбора[0].Значение;
		Объект.СрокАктуальностиСообщения = МеханизмОбменаСообщениями.ПолучитьЗначениеTTL();
		Если Параметры.Свойство("Шаблон") Тогда
			Объект.ШаблонСообщений = Параметры.Шаблон;
			Объект.ТипСообщения = Параметры.Шаблон.ТипСообщения;
			Объект.ТекстСообщения = Параметры.Шаблон.ТекстСообщения;
			Объект.ВидПолучателей = Параметры.Шаблон.ВидПолучателей;
			Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение Тогда
				Объект.РольПолучателя = Параметры.Шаблон.РольПолучателя;
			ИначеЕсли Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
				Объект.ТипИнцидента = Параметры.Шаблон.ТипИнцидента;
				Объект.РольПолучателя = МеханизмОбменаСообщениями.ПолучитьРольПоТипуРолиИПодразделению(Параметры.Шаблон.ТипИнцидента.ТипРоли, Объект.ОтИмени);
			ИначеЕсли Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача Тогда
				Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
					Объект.ВидПолучателей = Неопределено; // для задач не может быть указанная роль, т.к. они предназначены только для магазинов
				КонецЕсли;
			КонецЕсли;
			//+++АК SHEP 20160426
			ПараметрШаблон = Параметры.Шаблон;
			Для Каждого РольПолучателя Из ПараметрШаблон.РолиПолучателей Цикл
				ЗаполнитьЗначенияСвойств(Объект.РолиПолучателей.Добавить(), РольПолучателя);
			КонецЦикла;
			Для Каждого АдресЭП Из ПараметрШаблон.АдресаЭП Цикл
				ЗаполнитьЗначенияСвойств(Объект.АдресаЭП.Добавить(), АдресЭП);
			КонецЦикла;
			//---АК SHEP 
		КонецЕсли;
	Иначе
		Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов Тогда
			Для каждого СтрокаТЧ1 Из Объект.СтруктурныеЕдиницы Цикл
				ЭлСЗ1 = СписокМагазинов.НайтиПоЗначению(СтрокаТЧ1.СтруктурнаяЕдиница);
				Если ЭлСЗ1 = Неопределено Тогда
					ЭлСЗ1 = СписокМагазинов.Добавить(СтрокаТЧ1.СтруктурнаяЕдиница);
				КонецЕсли;
				ЭлСЗ1.Пометка = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() И НЕ ПереходКФормеПодтверждения Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,, ЭтаФорма.УникальныйИдентификатор);
		Исключение
			Сообщить("Не удаётся заблокировать сообщение. Возможно с ним работает другой пользователь. Открытие сообщения возможно только в режиме просмотра");
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецПопытки;
	КонецЕсли;
	Элементы.ХТМЛ.Видимость = Объект.ФлХТМЛ;
	Элементы.Группа9.Видимость = Не Объект.ФлХТМЛ;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если ПереходКФормеПодтверждения Тогда
		Отказ = Истина;
		Подтверждение(Неопределено);
		
		//СП1 = Новый Структура("ОбъектИзРодФормы", Объект);
		//Форма1 = ПолучитьФорму("Документ.СообщениеМОС.Форма.ФормаПодтвержденияЦО", СП1, ЭтаФорма);
		//Форма1.Открыть();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЕстьНепроведенныеДокументы() Тогда
		Сообщить("У пользователя есть созданные, но не отправленные сообщения. Отправьте или удалите их! Создание нового сообщения невозможно!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Если Объект.Ссылка.Пустая() Тогда
	//	Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
	//		Форма1 = ПолучитьФорму("Справочник.ШаблоныСообщенийМОС.ФормаВыбора",, ЭтаФорма);
	//		ВыбранныйШаблон = Форма1.ОткрытьМодально();
	//		Если НЕ ЗначениеЗаполнено(ВыбранныйШаблон) Тогда
	//			Предупреждение("Создание новых сообщений возможно только на основе шаблона.");
	//			Отказ = Истина;
	//			Возврат;
	//		КонецЕсли;
	//		Объект.ШаблонСообщений = ВыбранныйШаблон;
	//		ЗаполнитьДанныеПоШаблону();
	//	КонецЕсли;
	//КонецЕсли;
	НастроитьЭлементыФормы();
	//+++АК БЕЛН 20160422
	Если Объект.ФлХТМЛ Тогда
		Картинки = Новый Структура;
		ФД.ПолучитьHTML(ХТМЛ, Картинки);
		ХТМЛ=Объект.ХТМЛТекст;
		Для Каждого Картинка Из Картинки Цикл
			ИмяВремФайла = ПолучитьИмяВременногоФайла("");
			Картинка.Значение.Записать(ИмяВремФайла);
			ХТМЛ = СтрЗаменить(ХТМЛ, "<img src='" + Картинка.Ключ + "'", "<img src=""" + ИмяВремФайла + """");
		КонецЦикла;
		
		//+++АК SHEP 20160425
		// убираем лишний "мусор", в т.ч. чтобы картинки при печати были на след. странице, а не обрезались
		ПозТела = Найти(ХТМЛ, "<body>");
		Если ПозТела <> 0 Тогда
			ХТМЛ = "<html>" + Символы.ПС + Сред(ХТМЛ, ПозТела);
		КонецЕсли;
		//---АК SHEP 20160425
	КонецЕсли;
	//---АК SHEP
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоШаблону()

	Объект.ТипСообщения = Объект.ШаблонСообщений.ТипСообщения;
	Объект.ТекстСообщения = Объект.ШаблонСообщений.ТекстСообщения;
	Объект.РольПолучателя = Объект.ШаблонСообщений.РольПолучателя;
	УказаниеТовара = Объект.ШаблонСообщений.Товары;
	
	Если ЗначениеЗаполнено(Объект.РольПолучателя) ИЛИ УказаниеТовара Тогда
		ВидПолучателя = Перечисления.ВидыПолучателейМОС.УказаннаяРоль;;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ОтИмени) Тогда
		Если Объект.ВидПолучателей <> Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "При отправке сообщения от имени другого подразделения адресация должен иметь значение ""Указанная роль""";
			Сообщение.Поле = "ВидПолучателя";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
		ПроверяемыеРеквизиты.Добавить("Объект.Получатель");
		//Подразделение = Объект.Получатель.Расчетчик_СтруктурнаяЕдиница;
		//Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		//	Отказ = Истина;
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "У выбранного получателя не заполнен реквизит ""Стр. единица""";
		//	Сообщение.Поле = "Получатель";
		//	Сообщение.Сообщить();
		//	Возврат;
		//КонецЕсли;
		//Если ТипЗнч(Подразделение) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		//	Отказ = Истина;
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "У выбранного получателя заполнен реквизит ""Расчетчик"". Отправка сообщений расчетчикам не предусмотрена!";
		//	Сообщение.Поле = "Получатель";
		//	Сообщение.Сообщить();
		//	Возврат;
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(Подразделение.НомерТочки) Тогда
		//	Отказ = Истина;
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "У выбранного получателя в реквизите ""Стр. единица"" не указан номер точки";
		//	Сообщение.Поле = "Получатель";
		//	Сообщение.Сообщить();
		//	Возврат;
		//КонецЕсли;
	ИначеЕсли Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов Тогда
		// СписокМагазинов проверим вручную
		СписокМагазиновЗаполнен = Ложь;
		Для каждого ЭлСЗ1 Из СписокМагазинов Цикл
			Если ЭлСЗ1.Пометка Тогда
				СписокМагазиновЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокМагазиновЗаполнен Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Укажите хотя бы один магазин";
			Сообщение.Поле = "СписокМагазинов";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	Если УказаниеТовара И НЕ ЗначениеЗаполнено(Объект.Товар) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите товар";
		Сообщение.Поле = "Товар";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент И НЕ УказаниеТовара И НЕ ЗначениеЗаполнено(Объект.ТипИнцидента) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо указать тип инцидента";
		Сообщение.Поле = "ТипИнцидента";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСообщенияПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подтверждение(Команда)
	
	СП1 = Новый Структура("ОбъектИзРодФормы", Объект);
	ФормаПодтверждения = ОткрытьФорму("Документ.СообщениеМОС.Форма.ФормаПодтвержденияЦО", СП1, ЭтаФорма);
		
	//Форма1 = ПолучитьФорму();
	//Форма1.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтИмениПриИзменении(Элемент)
	
	СкорректироватьПараметрыОбработки();
	НастроитьЭлементыФормы();
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварПриИзменении(Элемент)
	
	СкорректироватьПараметрыОбработки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// для того, чтобы непроведённый отображался во всех сообщениях
	Если ТекущийОбъект.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Отправитель) Тогда
			Сообщить("Выберите роль отправителя");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// ещё проверим на наличие непроведённых 
		Если ЕстьНепроведенныеДокументы() Тогда
			Сообщить("У пользователя есть созданные, но не отправленные сообщения. Отправьте или удалите их! Создание нового сообщения невозможно!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаКартинка Из ТекущийОбъект.Картинки Цикл
		Если СтрокаКартинка.ВнесеныИзменения Тогда
			СтрокиИзм = ТаблицаИзмененныхКартинок.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаКартинка.КлючСтроки));
			Если СтрокиИзм.Количество() > 0 Тогда
				СтрокаКартинка.ХранилищеКЗаписи = Новый ХранилищеЗначения(СтрокиИзм[0].Картинка.ПолучитьДвоичныеДанные());
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если Документы.СообщениеМОС.ФДЗаполнен(ФД) Тогда
		ТекущийОбъект.ФД = Новый ХранилищеЗначения(ФД);
		ТекущийОбъект.ФорматированиеТекста = Истина;
	Иначе
		ТекущийОбъект.ФД = Новый ХранилищеЗначения("");
		ТекущийОбъект.ФорматированиеТекста = Ложь;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи <> ПредопределенноеЗначение("РежимЗаписиДокумента.ОтменаПроведения") Тогда
		Объект.Дата = МеханизмОбменаСообщениями.ПолучитьРабочуюДатуМОС();
	КонецЕсли;
	ЗаполнитьТЧПолучателейНаСервере();
		
КонецПроцедуры


Процедура ЗаполнитьТЧПолучателейНаСервере()
	
	Если Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов ИЛИ Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины Тогда
		ТЗСмен = МеханизмОбменаСообщениями.ПолучитьТЗСмен(Объект.Дата);
		Объект.СтруктурныеЕдиницы.Очистить();
		Для каждого Строка1 Из СписокМагазинов Цикл
			Если Строка1.Пометка ИЛИ Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины Тогда
				СтрокаТЧ1 = Объект.СтруктурныеЕдиницы.Добавить();
				СтрокаТЧ1.СтруктурнаяЕдиница = Строка1.Значение;
				
				СО1 = Новый Структура;
				СО1.Вставить("Магазин", СтрокаТЧ1.СтруктурнаяЕдиница);
				СО1.Вставить("ЭтоСтаршийСмены", Истина);
				МСС1 = ТЗСмен.НайтиСтроки(СО1);
				Если МСС1.Количество() > 0 Тогда
					СтрокаТЧ1.СтаршийСмены = МСС1[0].Сотрудник;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНоменклатуреИПроизводителям(Команда)
	
	Если НЕ ОчиститьСписокМагазиновСЗапросом() Тогда
		Возврат;
	КонецЕсли;
	
	// вызовем форму номенклатуры и производителей
	СП1 = Новый Структура("Номенклатура, Производители", Номенклатура, Производители);
	Рез1 = ОткрытьФормуМодально("Документ.СообщениеМОС.Форма.ФормаНоменклатурыИПроизводителейЦО", СП1, ЭтаФорма);
	Если ТипЗнч(Рез1) = Тип("Структура") Тогда
		Номенклатура  = Рез1.Номенклатура;
		Производители = Рез1.Производители;
	Иначе
		Возврат;
	КонецЕсли;
	
	// проверим, выбраны ли номенклатура и производитель
	Если Номенклатура.Количество() = 0 ИЛИ Производители.Количество() = 0 Тогда
		Сообщить("Не заполнен список номенклатуры и/или производителей");
		Возврат;
	КонецЕсли;
	
	КолВоЗаполненных = ЗаполнитьСписокМагазиновПоОстаткамНоменклатурыПроизводителей();
	Предупреждение("Установлено пометок у " + Строка(КолВоЗаполненных) + " подразделений", 10, "Установка пометок завершена");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокМагазиновПоОстаткамНоменклатурыПроизводителей()
	
	КолВоЗаполненных = 0;
	ТЗОстатков = ПостроитьТЗОстатков(Номенклатура, Производители);
	Для каждого СтрокаТЗОстатков Из ТЗОстатков Цикл
		Если СтрокаТЗОстатков.ОстатокНаТочке > 0 Тогда
			ЭлСЗ1 = СписокМагазинов.НайтиПоЗначению(СтрокаТЗОстатков.ТТ);
			Если ЭлСЗ1 <> Неопределено Тогда
				Если НЕ ЭлСЗ1.Пометка Тогда
					КолВоЗаполненных = КолВоЗаполненных + 1;
				КонецЕсли;
				ЭлСЗ1.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолВоЗаполненных;
	
КонецФункции


&НаКлиенте
Функция ОчиститьСписокМагазиновСЗапросом()

	// сначала посмотрим, есть ли помеченные
	ПомеченныеЕсть = Ложь;
	Для каждого ЭлСЗ1 Из СписокМагазинов Цикл
		Если ЭлСЗ1.Пометка Тогда
			ПомеченныеЕсть = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// если есть, то выдадим запрос на очистку списка
	Если ПомеченныеЕсть Тогда
		Ответ1 = Вопрос("В списке есть помеченные подразделения. При заполнении все существующие пометки будут сняты. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ1 = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		СписокМагазинов.ЗаполнитьПометки(Ложь);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

&НаСервере
Функция ПостроитьТЗОстатков(СписокНоменклатурыДляОтбора, СписокПоставщиковДляОтбора)
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("id_ТТ", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("ОстатокНаТочке", Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	ЗапросРеквизиты = Новый Запрос();
	ЗапросРеквизиты.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	ЗапросРеквизиты.УстановитьПараметр("Номенклатура", СписокНоменклатурыДляОтбора);
	
	ТабНоменклатура = ЗапросРеквизиты.Выполнить().Выгрузить();
	СтрокаОтборНоменклатура = "99999999";
	
	Если СписокНоменклатурыДляОтбора.Количество() > 0 Тогда
		Для Каждого ЭлементНоменклатура Из СписокНоменклатурыДляОтбора Цикл
			СтрокаСпр = ТабНоменклатура.Найти(ЭлементНоменклатура.Значение, "Ссылка");
			СтрокаОтборНоменклатура = СтрокаОтборНоменклатура + ", " + Формат(СтрокаСпр.id_tov, "ЧГ=0");
		КонецЦикла;	
	КонецЕсли;	
	
	СтрЗапрос = "exec M2..ostatki_tt_tov_currdate " + ?(СписокНоменклатурыДляОтбора.Количество() > 0, "'" + СтрокаОтборНоменклатура + "'", "null") + ", null, 0";
	
	//СтрЗапрос = "SELECT Ostatki.ID_tov, Ostatki.ID_TT, Ostatki.Amount
	//|FROM [SMS_UNION].[dbo].[AccArticle] as Ostatki (nolock)
	//|INNER JOIN (SELECT Ostatki.ID_TT as id_tt,
	//|	  Ostatki.ID_tov,
	//|	  MAX(Ostatki.Period) as MaxPeriod
	//|  FROM [SMS_UNION].[dbo].[AccArticle] as Ostatki (nolock)
	//|  GROUP BY
	//|  Ostatki.ID_TT,
	//|	  Ostatki.ID_tov) as MaxOstatki
	//|	  ON Ostatki.ID_tov = MaxOstatki.ID_tov
	//|	  and Ostatki.ID_TT = MaxOstatki.id_tt
	//|	  and Ostatki.Period = MaxOstatki.MaxPeriod
	//|WHERE Ostatki.Amount > 0
	//|	  " + ?(СписокНоменклатурыДляОтбора.Количество() > 0, " and Ostatki.ID_tov IN (" + СтрокаОтборНоменклатура + ")", "");
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.id_ТТ 		= Rs.Fields("ID_TT").Value;
			СтрокаДоб.id_tov 		= Rs.Fields("ID_tov").Value;
			СтрокаДоб.ОстатокНаТочке 		= Rs.Fields("kol").Value;   
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Таб.id_ТТ,
	|	Таб.ID_tov,
	|	Таб.ОстатокНаТочке
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.ОстатокНаТочке,
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.ТорговаяТочка КАК ТТ,
	|	ТоварныйАссортиментТочекСрезПоследних.Значение КАК Поставщик
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Данные.ОстатокНаТочке КАК ОстатокНаТочке,
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка
	|	ИЗ
	|		ВТ_Данные КАК ВТ_Данные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ПО ВТ_Данные.id_ТТ = СтруктурныеЕдиницы.id_TT
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВТ_Данные.ID_tov = Номенклатура.id_tov) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	|			ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЗначенияСвойствОбъектов.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних КАК ТоварныйАссортиментТочекСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|				ПО ТоварныйАссортиментТочекСрезПоследних.Характеристика = ЗначенияСвойствОбъектов.Объект
	|					И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ГДЕ
	|			ТоварныйАссортиментТочекСрезПоследних.Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО ВЗ_Запрос.ТорговаяТочка = ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка
	|			И ВЗ_Запрос.Номенклатура = ТоварныйАссортиментТочекСрезПоследних.Номенклатура
	|ГДЕ
	|	(ТоварныйАссортиментТочекСрезПоследних.Значение В (&Поставщики)
	|			ИЛИ &ЕстьОтборПоПоставщикам = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Данные";
	
	Запрос.УстановитьПараметр("Таб", ТаблицаДанных);
	Запрос.УстановитьПараметр("ЕстьОтборПоПоставщикам", СписокПоставщиковДляОтбора.Количество() > 0);
	Запрос.УстановитьПараметр("Поставщики", СписокПоставщиковДляОтбора);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	Возврат ТаблицаДанных;
	
КонецФункции


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Попытка
			Записать();
		Исключение
			Предупреждение("Не удалось записать изменения в сообщение. Возможно оно было изменено другим пользователем. Повторите попытку позднее.");
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Функция ЕстьНепроведенныеДокументы()
	
	ТекДата = ТекущаяДатаСеанса();
	
	МассивРолейТекПользователя = МеханизмОбменаСообщениями.ПолучитьРолиПользователяИлиФизЛица(ПараметрыСеанса.ТекущийПользователь);
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	СообщениеМОС.Ссылка
	|ИЗ
	|	Документ.СообщениеМОС КАК СообщениеМОС
	|ГДЕ
	|	СообщениеМОС.ПометкаУдаления = ЛОЖЬ
	|	И СообщениеМОС.Проведен = ЛОЖЬ
	|	И СообщениеМОС.ДатаАктуальности >= &ТекДата
	|	И СообщениеМОС.Автор = &Автор
	|	И СообщениеМОС.Отправитель В(&РолиПользователя)";
	
	Запрос1.УстановитьПараметр("ТекДата", ТекДата);
	Запрос1.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	Запрос1.УстановитьПараметр("РолиПользователя", МассивРолейТекПользователя);
	
	Рез1 = Запрос1.Выполнить();
	Возврат НЕ Рез1.Пустой();

КонецФункции // ()


&НаКлиенте
Процедура КартинкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СтруктураВозврат = ОткрытьФормуМодально("Документ.СообщениеМОС.Форма.ФормаВыбораФайлаКартинки");
	Если СтруктураВозврат <> Неопределено
			И СтруктураВозврат.БылВыборФайла Тогда
		Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
		СтрокаДоб = Объект.Картинки.Добавить();
		//СтрокаДоб.ИД = ОбщегоНазначенияСервер.ПолучитьНовыйУникальныйИдентификатор("Номенклатура.Картинки", "ИД") + СтрокаДоб.НомерСтроки;
		СтрокаДоб.ИД = МеханизмОбменаСообщениями.ПолучитьНовыйУИДКартинки() + СтрокаДоб.НомерСтроки;
		СтрокаДоб.КраткоеИмяФайла = Файл.ИмяБезРасширения;
		СтрокаДоб.Расширение = Файл.Расширение;
		СтрокаДоб.ВнесеныИзменения = Истина;
		СтрокаДоб.КлючСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаДоб.Размер = Файл.Размер();
		
		СтрокаИзм = ТаблицаИзмененныхКартинок.Добавить();
		СтрокаИзм.КлючСтроки = СтрокаДоб.КлючСтроки;
		СтрокаИзм.Картинка = Новый Картинка(СтруктураВозврат.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КартинкиПриАктивизацииСтроки(Элемент)
	
	Картинка = Новый Картинка;
	ТекСтрока = Элементы.Картинки.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ВнесеныИзменения Тогда
			УстановитьКартинкуИзСтроки(ТекСтрока.КлючСтроки);
		Иначе
			УстановитьКартинкуИзФайла(Новый Структура("КлючСтроки, Расширение", ТекСтрока.КлючСтроки, ТекСтрока.Расширение), Объект.Ссылка);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьКартинкуИзФайла(ТекСтрока, Ссылка)
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
		КаталогКЗаписи = КаталогКЗаписи + "\";
	КонецЕсли;	
	//ИмяФайла = КаталогКЗаписи + Строка(Ссылка.УникальныйИдентификатор()) + "_" + Строка(ТекСтрока.КлючСтроки) + ?(Лев(ТекСтрока.Расширение, 1) = ".", "", ".") + ТекСтрока.Расширение;
	ИмяФайла = КаталогКЗаписи + ТекСтрока.ОтносительноеИмяФайла;
	
	ПолеКартинкиТекСтроки = ПоместитьВоВременноеХранилище(Новый Картинка(ИмяФайла));
	
КонецФункции

&НаСервере
Функция УстановитьКартинкуИзСтроки(КлючСтроки)
	
	СтрокиСФайлом = ТаблицаИзмененныхКартинок.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	
	Если СтрокиСФайлом.Количество() > 0 Тогда                                                            
		ПолеКартинкиТекСтроки = ПоместитьВоВременноеХранилище(СтрокиСФайлом[0].Картинка);
	Иначе	
		ПолеКартинкиТекСтроки = "";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ФорматированиеТекста Тогда
		ФД = ТекущийОбъект.ФД.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямыеПолучатели(Команда)
	
	ПараметрыФормы = Новый Структура("ПрямыеПолучатели", Объект.ПрямыеПолучатели);
	ОткрытьФорму("Документ.СообщениеМОС.Форма.ПрямыеПолучатели", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнениеПрямыхПолучателейМОС" Тогда
		ЗагрузитьПрямыхПолучателей(Параметр);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьПрямыхПолучателей(Источник)

	Объект.ПрямыеПолучатели.Загрузить(Источник.Выгрузить());

КонецПроцедуры // ЗагрузитьПрямыхПолучателей()






