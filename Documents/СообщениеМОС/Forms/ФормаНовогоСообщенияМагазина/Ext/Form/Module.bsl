&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьЭлементыФормы();
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
		
КонецПроцедуры

Процедура НастроитьЭлементыФормы()

	Элементы.ГруппаТовары.Видимость = УказаниеТовара;
	
	Если Объект.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер
			ИЛИ Объект.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТранспортРазвоз Тогда
		Элементы.Производитель.Видимость = Ложь;
	Иначе	
		Элементы.Производитель.Видимость = УказаниеТовара;
	КонецЕсли;
	Элементы.РольПолучателя.Видимость = НЕ Элементы.Товар.Видимость;
	Элементы.ТекстСообщения.Заголовок = Неопределено;
	
	Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение Тогда
		Элементы.ТипИнцидента.Видимость = Ложь;
	ИначеЕсли Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		Если ЗначениеЗаполнено(Объект.ШаблонСообщений) И НЕ Объект.ШаблонСообщений.Предопределенный Тогда
			Элементы.ТипИнцидента.Видимость = Истина;
		Иначе
			Элементы.ТипИнцидента.Видимость = Ложь;
		КонецЕсли;
		Элементы.ТекстСообщения.Заголовок = "Действие";
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		Элементы.ТекстСообщения.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Отказ = Ложь;
	ОтправитьСообщениеНаСервере(Отказ);
	Если НЕ Отказ Тогда
		Предупреждение("Сообщение успешно отправлено", 10);
		ВладелецФормы.Элементы.Список.Обновить();
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщениеНаСервере(Отказ)
	
	СП1 = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Попытка
		Записать(СП1);
		//Сообщить("Сообщение успешно отправлено", СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось отправить сообщение! " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецПопытки;
		
КонецПроцедуры


&НаКлиенте
Процедура ТипСообщенияПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьОперацию("Открытие формы сообщения в магазине");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	Если Параметры.Свойство("Объект") И ЗначениеЗаполнено(Параметры.Объект) Тогда
		ДокОбъект = Параметры.Объект.ПолучитьОбъект();
		Если ДокОбъект.ФорматированиеТекста Тогда
			ФД = ДокОбъект.ФД.Получить();
		КонецЕсли;
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		Заголовок = "Сообщение";
	Иначе
		Если Документы.СообщениеМОС.ЕстьНепроведенныеДокументыВМагазине() Тогда
			Сообщить("В магазине есть созданные, но не отправленные сообщения. Отправьте или удалите их! Создание нового сообщения невозможно!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.СрокАктуальностиСообщения = МеханизмОбменаСообщениями.ПолучитьЗначениеTTL();
		Заголовок = "Новое сообщение";
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,, ЭтаФорма.УникальныйИдентификатор);
		Исключение
			Сообщить("Не удаётся заблокировать сообщение. Возможно с ним работает другой пользователь. Открытие сообщения возможно только в режиме просмотра");
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецПопытки;
	КонецЕсли;
	
	// Заполним ТЗВложений (для черновиков)
	Если ЗначениеЗаполнено(Объект.Номер) Тогда
		ПолныйКаталогФВ =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "NewMessAtt\" + СокрЛП(Объект.Номер);
		МСФВ = НайтиФайлы(ПолныйКаталогФВ, "*.*");
		Для каждого ФВ1 Из МСФВ Цикл
			СтрокаТЗФВ = ТЗВложений.Добавить();
			СтрокаТЗФВ.ИмяФайла = СокрЛП(ФВ1.Имя);
			СтрокаТЗФВ.ПолноеИмяФайла = СокрЛП(ФВ1.ПолноеИмя);
			СтрокаТЗФВ.Каталог = СокрЛП(ФВ1.Путь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если УказаниеТовара Тогда
		ПроверяемыеРеквизиты.Добавить("Объект.Товар");
		ПроверяемыеРеквизиты.Добавить("Объект.Производитель");
		ПроверяемыеРеквизиты.Добавить("Объект.ШаблонСообщения");
	Иначе
		ПроверяемыеРеквизиты.Добавить("Объект.РольПолучателя");
	КонецЕсли;
	
	Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент И НЕ Объект.ШаблонСообщений.Предопределенный Тогда
		ПроверяемыеРеквизиты.Добавить("Объект.ТипИнцидента");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ЭтоНовый() И Документы.СообщениеМОС.ЕстьНепроведенныеДокументыВМагазине() Тогда
		Сообщить("В магазине есть созданные, но не отправленные сообщения. Отправьте или удалите их! Создание нового сообщения невозможно!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ТекущийОбъект.Отправитель = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	КонецЕсли;
	
	ТекущийОбъект.Дата = ТекущаяДатаСеанса();
	ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(ТорговаяТочка, Объект.Дата);
	
	ТекущийОбъект.СтруктурныеЕдиницы.Очистить();
	СтрокаТЧ1 = ТекущийОбъект.СтруктурныеЕдиницы.Добавить();
	СтрокаТЧ1.СтруктурнаяЕдиница = ТорговаяТочка;
	СтрокаТЧ1.СтаршийСмены = СтаршийСмены;
	
	Если Документы.СообщениеМОС.ФДЗаполнен(ФД) Тогда
		ТекущийОбъект.ФД = Новый ХранилищеЗначения(ФД);
		ТекущийОбъект.ФорматированиеТекста = Истина;
	Иначе
		ТекущийОбъект.ФД = Новый ХранилищеЗначения("");
		ТекущийОбъект.ФорматированиеТекста = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварПриИзменении(Элемент)
	
	Объект.Производитель = Неопределено;
	СформироватьСписокВыбораПроизводителей();
	Если Элементы.Производитель.СписокВыбора.Количество() = 1 Тогда
		Объект.Производитель = Элементы.Производитель.СписокВыбора[0].Значение;
	Иначе
		Объект.Производитель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораПроизводителей()
	
	Элементы.Производитель.СписокВыбора.Очистить();
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураИХарактеристики.Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварныйАссортиментТочекСрезПоследних.Номенклатура КАК Номенклатура,
	|		ТоварныйАссортиментТочекСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|				,
	|				Номенклатура = &Номенклатура
	//|					И ТорговаяТочка = &ТорговаяТочка
	|					И Выведена = ЛОЖЬ) КАК ТоварныйАссортиментТочекСрезПоследних) КАК НоменклатураИХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО НоменклатураИХарактеристики.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))";
	
	
	
	//"ВЫБРАТЬ
	//|	НоменклатураИХарактеристики.Номенклатура,
	//|	НоменклатураИХарактеристики.Характеристика,
	//|	НоменклатураИХарактеристики.Период,
	//|	НоменклатураИХарактеристики.Выведена,
	//|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ТоварныйАссортиментТочек.Номенклатура КАК Номенклатура,
	//|		ТоварныйАссортиментТочек.Характеристика КАК Характеристика,
	//|		МАКСИМУМ(ТоварныйАссортиментТочек.Период) КАК Период,
	//|		МАКСИМУМ(ТоварныйАссортиментТочек.Выведена) КАК Выведена
	//|	ИЗ
	//|		РегистрСведений.ТоварныйАссортиментТочек КАК ТоварныйАссортиментТочек
	//|	ГДЕ
	//|		ТоварныйАссортиментТочек.Номенклатура = &Номенклатура
	//|		И ТоварныйАссортиментТочек.ТорговаяТочка = &ТорговаяТочка
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		ТоварныйАссортиментТочек.Номенклатура,
	//|		ТоварныйАссортиментТочек.Характеристика) КАК НоменклатураИХарактеристики
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|		ПО НоменклатураИХарактеристики.Характеристика = ЗначенияСвойствОбъектов.Объект
	//|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	//|ГДЕ
	//|	НоменклатураИХарактеристики.Выведена = ЛОЖЬ";
	
		
	
	Запрос1.УстановитьПараметр("ТорговаяТочка", ПараметрыСеанса.ТорговаяТочкаПоАйпи);
	Запрос1.УстановитьПараметр("Номенклатура", Объект.Товар);
	
	Рез1 = Запрос1.Выполнить();
	Выб1 = Рез1.Выбрать();
	
	Пока Выб1.Следующий() Цикл
		Элементы.Производитель.СписокВыбора.Добавить(Выб1.Производитель);
	КонецЦикла;
	

КонецПроцедуры


&НаКлиенте
Процедура ПодборПоШтрихКоду(Команда)
	
	ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			Предупреждение("По штрих-коду не найдена номенклатура");
			Объект.Товар = Неопределено;
		Иначе
			Объект.Товар = СтруктураДанных.Номенклатура;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Попытка
			Записать();
		Исключение
			Предупреждение("Не удалось записать изменения в сообщение. Возможно оно было изменено другим пользователем. Повторите попытку позднее.");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	СписокШаблонов = МеханизмОбменаСообщениями.ПолучитьШаблоныМагазина();
	ЭлСЗ1 = ВыбратьИзМеню(СписокШаблонов, Элементы.ЗаполнитьПоШаблону);
	Если ЭлСЗ1 <> Неопределено Тогда
		ЗаполнитьПоШаблонуНаСервере(ЭлСЗ1.Значение);
		НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон)

	Объект.ШаблонСообщений = Шаблон;
	Объект.ТипСообщения = Шаблон.ТипСообщения;
	Объект.ТекстСообщения = Шаблон.ТекстСообщения;
	Если ЗначениеЗаполнено(Шаблон.РольПолучателя) Тогда
		Объект.РольПолучателя = Шаблон.РольПолучателя;
	КонецЕсли;
	УказаниеТовара = Ложь;
	Если Объект.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПретензияПоКачеству
			ИЛИ Объект.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПретензияКСкладу
			ИЛИ Объект.ШаблонСообщений = Справочники.ШаблоныСообщенийМОС.ПретензияРасчетчику
			ИЛИ Объект.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер
			ИЛИ Объект.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству
			ИЛИ Объект.ШаблонСообщений.ТипИнцидента.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.ТранспортРазвоз Тогда
		УказаниеТовара = Истина;
	КонецЕсли;
	Элементы.ОбъектИнцидента.Видимость = Ложь;
	
	Если Объект.ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		Объект.ТипИнцидента = Шаблон.ТипИнцидента;
		Если НЕ ЗначениеЗаполнено(Объект.ТипИнцидента) Тогда
			Отказ = Истина;
			Сообщить("В выбранном шаблоне не указан тип инцидента. Формирование сообщения на основе данного шаблона невозможно.");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипИнцидента.ТипРоли) Тогда
			Отказ = Истина;
			Сообщить("В выбранном шаблоне указан тип инцидента с незаполненным типом роли. Формирование сообщения на основе данного шаблона невозможно.");
			Возврат;
		КонецЕсли;
		
		Если НЕ УказаниеТовара Тогда
			// посмотрим типы значений в типе ролей у типа инцидента
			ЕстьТипыКромеСтруктурныхЕдиниц = Ложь;
			ОТ1 = Объект.ТипИнцидента.ТипРоли.ТипЗначения;
			Для каждого Тип1 Из ОТ1.Типы() Цикл
				Если Тип1 = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
					ТипРолиСодержитСтруктурнуюЕдиницу = Истина;
				ИначеЕсли Тип1 = Тип("ПеречислениеСсылка.ТипыРозничныхТочек") Тогда
					ТипРолиСодержитСтруктурнуюЕдиницу = Истина;
				Иначе
					ЕстьТипыКромеСтруктурныхЕдиниц = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ТипРолиСодержитСтруктурнуюЕдиницу Тогда
				ОТ2 = Новый ОписаниеТипов(ОТ1,, "СправочникСсылка.СтруктурныеЕдиницы");
			Иначе
				ОТ2 = ОТ1;
			КонецЕсли;
			Элементы.ОбъектИнцидента.ОграничениеТипа = ОТ2;
			Если ЕстьТипыКромеСтруктурныхЕдиниц Тогда
				Элементы.ОбъектИнцидента.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "KeyboardHook" Тогда
		Если Данные = "00122" Тогда
			ШтрихКодОбработанФормой = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		УстановитьНовыйНомерДокумента();
	КонецЕсли;
	
	//Предупреждение("функционал вложения файлов на стадии разработки");
	ПараметрыФормы = Новый Структура("ТЗВложений, НомерСообщения", ТЗВложений, Объект.Номер);
	Результат = ОткрытьФормуМодально("Документ.СообщениеМОС.Форма.ВложенияНовогоСообщенияМагазина", ПараметрыФормы, ЭтаФорма);
	Если Результат <> Неопределено Тогда
		ТЗВложений.Очистить();
		Для каждого СтрокаТЗ1 Из Результат Цикл
			СтрокаТЗ2 = ТЗВложений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ2, СтрокаТЗ1);
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановитьНовыйНомерДокумента()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.УстановитьНовыйНомер();
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) И ЗначениеЗаполнено(Объект.Номер) Тогда
		УдалитьКаталогиВложений(Объект.Номер);
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УдалитьКаталогиВложений(НомерДок)
	
	ПолныйКаталогФВ =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "NewMessAtt\" + СокрЛП(НомерДок);
	ПолныйКаталогФВ2 =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "MessAtt\" + СокрЛП(НомерДок);
	УдалитьФайлы(ПолныйКаталогФВ);
	УдалитьФайлы(ПолныйКаталогФВ2);
	
КонецПроцедуры // УдалитьКаталогиВложений()

&НаКлиенте
Процедура УдалитьСообщение(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		Предупреждение("Сообщение уже удалено.");
		Возврат;
	Иначе
		Ответ1 = Вопрос("Вы действительно хотите удалить сообщение?", РежимДиалогаВопрос.ДаНет);
		Если Ответ1 = КодВозвратаДиалога.Да Тогда
			Объект.ПометкаУдаления = Истина;
			Попытка
				Записать();
			Исключение
				Предупреждение("Не удалось удалить сообщение. Возможно оно было изменено другим пользователем. Повторите попытку позднее.");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямыеПолучатели(Команда)
	
	ПараметрыФормы = Новый Структура("ПрямыеПолучатели", Объект.ПрямыеПолучатели);
	ОткрытьФорму("Документ.СообщениеМОС.Форма.ПрямыеПолучатели", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры




//&НаКлиенте
//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
//	
//	Если ИмяСобытия = "ЗаполнениеПрямыхПолучателейМОС" Тогда
//		ЗагрузитьПрямыхПолучателей(Параметр);
//	КонецЕсли;
//	
//КонецПроцедуры


&НаСервере
Процедура ЗагрузитьПрямыхПолучателей(Источник)

	Объект.ПрямыеПолучатели.Загрузить(Источник.Выгрузить());

КонецПроцедуры // ЗагрузитьПрямыхПолучателей()


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СообщениеМОС.Форма.ПрямыеПолучатели" Тогда
		ЗагрузитьПрямыхПолучателей(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

