Перем ОтправлятьСообщенияПриПроведении;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТорговаяТочкаПоАйпи = Неопределено;
	Попытка
		ТорговаяТочкаПоАйпи = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	Исключение
	КонецПопытки;
		
	Если НЕ Проведен И КодНаправления < 9 Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если НЕ ЗначениеЗаполнено(SQL_ID) Тогда // тогда заполняется из процедуры формирования сообщения
				Если ЗначениеЗаполнено(ТорговаяТочкаПоАйпи) Тогда
					Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.РолиПользователей") Тогда
						Если ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
							КодНаправления = 2;
						Иначе
							КодНаправления = 0;
						КонецЕсли;
					Иначе	
						КодНаправления = 1;
					КонецЕсли;
				Иначе
					Если ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
						КодНаправления = 1;
					ИначеЕсли ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
						КодНаправления = 2;
					Иначе
						КодНаправления = 0;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(АдресИ_ИД_ПочтовогоСообщения) Тогда
					КодНаправления = 0;
				КонецЕсли;
				
				Если КодНаправления = 1 И НЕ ЗначениеЗаполнено(ШаблонСообщений) И НЕ ЗначениеЗаполнено(Основание) И ПрямыеПолучатели.Количество() = 0 Тогда
					Сообщить("Сообщение из магазина должно быть сформировано на основе шаблона.");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			КодНаправления = 3;
		КонецЕсли;
	ИначеЕсли НЕ Проведен И КодНаправления = 9 Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			КодНаправления = 1;
			ТипСообщения = ШаблонСообщений.ТипСообщения;
			ТипИнцидента = ШаблонСообщений.ТипИнцидента;
			СрокАктуальностиСообщения = МеханизмОбменаСообщениями.ПолучитьЗначениеTTL();
			Если СтруктурныеЕдиницы.Количество() = 0 Тогда
				СтруктурныеЕдиницы.Добавить();
			КонецЕсли;
			
			Для каждого СтрокаТЧ1 Из СтруктурныеЕдиницы Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ1.СтруктурнаяЕдиница) Тогда
					СтрокаТЧ1.СтруктурнаяЕдиница = Отправитель;
				КонецЕсли;
				СтрокаТЧ1.СтаршийСмены = МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(СтрокаТЧ1.СтруктурнаяЕдиница);
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(Автор) И НЕ ЗначениеЗаполнено(АдресИ_ИД_ПочтовогоСообщения) Тогда
			Автор = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		Если ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
			СтатусИнцидента = 1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "&gt;", ">");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "&lt;", "<");
		КонецЕсли;
	КонецЕсли;
	
	Если ПометкаУдаления И НЕ Ссылка.ПометкаУдаления Тогда
		Если Проведен Тогда
			Сообщить("Удаление отправленных сообщений не допускается");
			Отказ = Истина;
			Возврат;
		Иначе
			Если КодНаправления = 0 ИЛИ КодНаправления = 2 Тогда
				Если Автор <> ПараметрыСеанса.ТекущийПользователь Тогда
					Сообщить("Удаление сообщения допускается только автором");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			ИначеЕсли КодНаправления = 1 Тогда
				Если Отправитель <> ТорговаяТочкаПоАйпи Тогда
					Сообщить("Удаление сообщения допускается только в том подразделении, в котором оно составлено");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент И НЕ ЗначениеЗаполнено(РольПолучателя) Тогда
			МеханизмОбменаСообщениями.ПолучитьРольПолучателяДляИнцидента(ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(РольПолучателя) Тогда
				Сообщить("Не удалось рассчитать роль получателя! Отправка невозможна!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номер) Тогда
			ПолныйКаталогФВ =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "NewMessAtt\" + СокрЛП(Номер);
			МСФВ = НайтиФайлы(ПолныйКаталогФВ, "*.*");
			Если МСФВ.Количество() > 0 Тогда
				ЕстьВложения = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
	Если КодНаправления = 0 И (ВидПолучателей = Перечисления.ВидыПолучателейМОС.ВсеМагазины
				ИЛИ ВидПолучателей = Перечисления.ВидыПолучателейМОС.СписокМагазинов) Тогда
		ПрочтеноВсеми = Истина;
		Для каждого СтрокаТЧ1 Из СтруктурныеЕдиницы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ1.Прочитал) И ЗначениеЗаполнено(СтрокаТЧ1.СтаршийСмены) Тогда
				ПрочтеноВсеми = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		ПрочтеноВсеми = Ложь;
	КонецЕсли;
	
	ДатаАктуальности = Дата + СрокАктуальностиСообщения * 86400;
	
	Если ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
		Если СтатусИнцидента <> Ссылка.СтатусИнцидента Тогда
			СтатусИнцидентаИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// заполним статус сообщения
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусСообщенияСтрокой = "";
		ЕстьПрочитанные = Ложь;
		ЕстьНепрочитанные = Ложь;
		Если ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение Тогда
			Если ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
				Если ЗначениеЗаполнено(Прочитал) Тогда
					СтатусСообщенияСтрокой = "Прочитано";
				Иначе
					СтатусСообщенияСтрокой = "Не прочитано";
				КонецЕсли;
			Иначе
				СтатусСообщенияСтрокой = ПолучитьСтатусПрочитанностиПриМножественнойОтправке();
			КонецЕсли;
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийМОС.Задача Тогда
			СтатусСообщенияСтрокой = ПолучитьСтатусПрочитанностиПриМножественнойОтправке(Истина);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийМОС.Инцидент Тогда
			Если СтатусИнцидента = 1 Тогда
				СтатусСообщенияСтрокой = "Направлен на обработку";
			ИначеЕсли СтатусИнцидента = 2 Тогда
				СтатусСообщенияСтрокой = "Принят к исполнению";
			ИначеЕсли СтатусИнцидента = 3 Тогда
				СтатусСообщенияСтрокой = "Выполнен, но не проверен";
			ИначеЕсли СтатусИнцидента = 4 Тогда
				СтатусСообщенияСтрокой = "Выполнен и проверен";
			ИначеЕсли СтатусИнцидента = 5 Тогда
				СтатусСообщенияСтрокой = "Переадресован";
			КонецЕсли;
		Иначе
			СтатусСообщенияСтрокой = "---";
		КонецЕсли;
	Иначе
		СтатусСообщенияСтрокой = "<черновик>";
	КонецЕсли;
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		СсылкаОбъект = ЭтотОбъект.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(СсылкаОбъект) Тогда
			СсылкаОбъект = Документы.СообщениеМОС.ПолучитьСсылку();
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаОбъект);
		КонецЕсли;
	Иначе
		СсылкаОбъект = ЭтотОбъект.Ссылка;
	КонецЕсли;
	
	КаталогКЗаписи = Константы.КаталогХраненияФайловКартинок.Получить();
	Если ЗначениеЗаполнено(КаталогКЗаписи) Тогда
		Если Прав(КаталогКЗаписи, 1) <> "\" Тогда
			КаталогКЗаписи = КаталогКЗаписи + "\";
		КонецЕсли;	
		
		ПодКаталог = "Сообщения\" + Формат(ТекущаяДата(), "ДФ=yyyyMM");
	
		СоздатьКаталог(КаталогКЗаписи + ПодКаталог);
		
		Для Каждого СтрокаКартинка Из ЭтотОбъект.Картинки Цикл
			Если СтрокаКартинка.ВнесеныИзменения Тогда
				СтрокаКартинка.ОтносительноеИмяФайла = ПодКаталог + "\" + Строка(СсылкаОбъект.УникальныйИдентификатор()) + "_" + Строка(СтрокаКартинка.КлючСтроки) + ?(Лев(СтрокаКартинка.Расширение, 1) = ".", "", ".") + СтрокаКартинка.Расширение;
				СтрокаКартинка.ХранилищеКЗаписи.Получить().Записать(КаталогКЗаписи + СтрокаКартинка.ОтносительноеИмяФайла);
				СтрокаКартинка.ХранилищеКЗаписи = Неопределено;
				СтрокаКартинка.ВнесеныИзменения = Ложь;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если ЭтотОбъект.Картинки.Количество() > 0 Тогда
		СтрокаОсновная = ЭтотОбъект.Картинки.Найти(Истина, "ЭтоОсновноеИзображение");
		Если СтрокаОсновная = Неопределено Тогда
			ЭтотОбъект.Картинки[0].ЭтоОсновноеИзображение = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	// синхронизируем текст и текст форматированного документа
	Если ФорматированиеТекста Тогда
		ФД1 = ФД.Получить();
		ТекстФД = ФД1.ПолучитьТекст();
		ТекстСообщения = ТекстФД;
	ИначеЕсли ЗначениеЗаполнено(ТекстСообщения) И НЕ ФорматированиеТекста Тогда
		ФД1 = Новый ФорматированныйДокумент;
		ФД1.Добавить(ТекстСообщения);
		ФД = Новый ХранилищеЗначения(ФД1);
		ФорматированиеТекста = Истина;
	КонецЕсли;
	
	// Если это сообщение из магазина (а также по другим критериям), то сформируем почтовое сообщение
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если НЕ ЗначениеЗаполнено(АдресИ_ИД_ПочтовогоСообщения) Тогда
			//+++АК SHEP 20160426
			//Если КодНаправления = 1 Тогда
			//+++АК SHEP 20160626
			//Если КодНаправления = 1 ИЛИ АдресаЭП.Количество() > 0 Тогда
			Если КодНаправления = 1 ИЛИ АдресаЭП.Количество() > 0
				ИЛИ ТипЗнч(ОбъектИнициатор) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам")
				ИЛИ ПрямыеПолучатели.Количество() > 0 Тогда
			//---АК SHEP
				ОтправлятьСообщенияПриПроведении = Истина;
				АдресИ_ИД_ПочтовогоСообщения = "Отправлены сообщения эл. почты"; // для предотвращения повторной отправки при перепроведении
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// добавим автора для писем
	Если ЗначениеЗаполнено(АдресЭПОтправителя) И НЕ ЗначениеЗаполнено(Автор) Тогда
		Запрос1 = Новый Запрос;
		Запрос1.Текст = Обработки.ТелефонныйСправочник.ПолучитьЗапросПоТелефонам();
		ТЗ1 = Запрос1.Выполнить().Выгрузить();
		СтрокаТЗ1 = ТЗ1.Найти(АдресЭПОтправителя, "EMail");
		Если СтрокаТЗ1 <> Неопределено Тогда
			Если ТипЗнч(СтрокаТЗ1.Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				// найдём пользователя по физ. лицу
				Пользователь1 = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо", СтрокаТЗ1.Объект);
				Если ЗначениеЗаполнено(Пользователь1) Тогда
					Автор = Пользователь1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//+++ АК Pans 20170419 ИП-00014891.01
	// Заполнение реквизита "ТипСообщения2"
	СтрокаАдресовЭП1 = "vkusvill@it-stuff.ru, no-reply@vkusvill.ru";
			
	Если ЗначениеЗаполнено(АдресЭПОтправителя) И Найти(СтрокаАдресовЭП1, НРег(АдресЭПОтправителя)) > 0
			ИЛИ ЗначениеЗаполнено(SQL_ID)
			ИЛИ Найти(Автор.Наименование, "Диговцова") > 0 Тогда
		ТипСообщения2 = "Уведомление с сервера";
	ИначеЕсли Найти(Отправитель.Наименование, "УЕК") > 0 Тогда
		ТипСообщения2 = "Отдел УЕК";
	ИначеЕсли Найти(Отправитель.Наименование, "Мерченд") > 0 Тогда
		ТипСообщения2 = "Мерчендайзер";
	Иначе
		ТипСообщения2 = Строка(ТипСообщения);
	КонецЕсли;
	//--- АК Pans 20170419 ИП-00014891.01
	
КонецПроцедуры

// Возврат: - не прочитано никем, 1- частично прочитано, 2- прочитано всеми
Функция ПолучитьСтатусПрочитанностиПриМножественнойОтправке(Задачи = Ложь)
	
	ЕстьПрочитанные = Ложь;
	ЕстьНепрочитанные = Ложь;
	
	Для каждого СтрокаТЧ1 Из СтруктурныеЕдиницы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ1.Прочитал) Тогда
			ЕстьПрочитанные = Истина;
		Иначе
			ЕстьНепрочитанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьПрочитанные И ЕстьНепрочитанные Тогда
		Возврат ?(Задачи, "Не выполнена", "Не прочитано");
	ИначеЕсли ЕстьПрочитанные И ЕстьНепрочитанные Тогда
		Возврат ?(Задачи, "Выполнена частью получателей", "Прочитано частью получателей");
	ИначеЕсли ЕстьПрочитанные И НЕ ЕстьНепрочитанные Тогда
		Возврат ?(Задачи, "Выполнена всеми", "Прочитано всеми");
	Иначе
		Возврат "-";
	КонецЕсли;
	
КонецФункции // ()



Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Отказ = Истина;
		Сообщить("Отменить отправленное сообщение невозможно");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ПолныйКаталогФВ =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "MessAtt\" + СокрЛП(Номер);
		МСФВ = НайтиФайлы(ПолныйКаталогФВ, "*.*");
		Если МСФВ.Количество() > 0 Тогда
			ПолныйКаталогФВ2 =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "NewMessAtt\" + СокрЛП(Номер);
			СоздатьКаталог(ПолныйКаталогФВ2);
			Для каждого ФВ1 Из МСФВ Цикл
				КопироватьФайл(ПолныйКаталогФВ + "\" + ФВ1.Имя,  ПолныйКаталогФВ2 + "\" + ФВ1.Имя);
			КонецЦикла;
			УдалитьФайлы(ПолныйКаталогФВ);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль Тогда
		//+++АК SHEP 20160426
		//Если НЕ ЗначениеЗаполнено(РольПолучателя) Тогда
		Если НЕ ЗначениеЗаполнено(РольПолучателя) И РолиПолучателей.Количество() = 0 И ПрямыеПолучатели.Количество() = 0 Тогда
		//---АК SHEP 20160426
			Сообщить("Не указана роль получателя! Отправка невозможна!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// перенос вложений из NewMessAtt в MessAtt
	Если ЗначениеЗаполнено(Номер) Тогда
		ПолныйКаталогФВ =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "NewMessAtt\" + СокрЛП(Номер);
		МСФВ = НайтиФайлы(ПолныйКаталогФВ, "*.*");
		Если МСФВ.Количество() > 0 Тогда
			ПолныйКаталогФВ2 =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "MessAtt\" + СокрЛП(Номер);
			СоздатьКаталог(ПолныйКаталогФВ2);
			Для каждого ФВ1 Из МСФВ Цикл
				КопироватьФайл(ПолныйКаталогФВ + "\" + ФВ1.Имя,  ПолныйКаталогФВ2 + "\" + ФВ1.Имя);
			КонецЦикла;
			УдалитьФайлы(ПолныйКаталогФВ);
		КонецЕсли; 
	КонецЕсли; 
	
	
	Если ОтправлятьСообщенияПриПроведении Тогда
		ОтправитьПочтовыеСообщения();
	КонецЕсли;
			
КонецПроцедуры


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПрямыеПолучатели.Количество() > 0 Тогда
		Если НЕ ЗначениеЗаполнено(ТипСообщения) Тогда
			ТипСообщения = Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидПолучателей) Тогда
			ВидПолучателей = Перечисления.ВидыПолучателейМОС.УказаннаяРоль;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Основание) Тогда
			ПроверяемыеРеквизиты.Добавить("ШаблонСоообщений");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Картинки.Очистить();
	
КонецПроцедуры

Процедура ОтправитьПочтовыеСообщения()

	//+++АК SHEP 20160426
	//Если НЕ ЗначениеЗаполнено(РольПолучателя) Тогда
	ЭтоЗаданиеТехнологаМагазинам = (ТипЗнч(ОбъектИнициатор) = Тип("ДокументСсылка.ЗаданиеТехнологаМагазинам"));
	Если НЕ ЗначениеЗаполнено(РольПолучателя) И РолиПолучателей.Количество() = 0
		И НЕ ЭтоЗаданиеТехнологаМагазинам И АдресаЭП.Количество() = 0
		И ПрямыеПолучатели.Количество() = 0 Тогда
	//---АК SHEP 20160426
		Возврат;
	КонецЕсли;
	
	//+++АК SHEP 20160426
	//Если НЕ ЗначениеЗаполнено(Отправитель) ИЛИ ТипЗнч(Отправитель) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
	//---АК SHEP 20160426
		Возврат;
	КонецЕсли;
	
	АдресЭПОтправителя = "";
	АдресЭПОтправителяИсходный = "";
	ПарольЭПОтправителя = "";
	ОбратныйАдрес = "";
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		АдресЭПОтправителя = Отправитель.АдресЭлектроннойПочты;
		ПарольЭПОтправителя = СокрЛП(Отправитель.ПарольЭлектроннойПочты);
	//+++АК SHEP 20160520: добавил отправку для роли пользователя
	ИначеЕсли ТипЗнч(Отправитель) = Тип("СправочникСсылка.РолиПользователей") И ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.ФизЛицо) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК ЭлПочта
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект
			|			И (КонтактнаяИнформация.Тип = &Тип)
			|			И (КонтактнаяИнформация.Вид = &Вид)
			|ГДЕ
			|	ФизическиеЛица.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	    Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица); // СлужебныйАдресЭлектроннойПочтыПользователя
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			АдресЭПОтправителя = СокрЛП(ВыборкаЗапроса.ЭлПочта);
			АдресЭПОтправителяИсходный = АдресЭПОтправителя;
		КонецЕсли;
		
	КонецЕсли;
	//---АК SHEP 20160520
	УчеткаДляНастройки = Неопределено;
	Если ПрямыеПолучатели.Количество() > 0 Тогда
		АдресЭПОтправителя = "no-reply@vkusvill.ru";
		УчеткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу(АдресЭПОтправителя);
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(УчеткаДляНастройки) Тогда
		УчеткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭПОтправителя);
	КонецЕсли;
	Если ЭтоЗаданиеТехнологаМагазинам ИЛИ НЕ ЗначениеЗаполнено(УчеткаДляНастройки) И ПрямыеПолучатели.Количество() > 0 Тогда
		ОбратныйАдрес = АдресЭПОтправителя;
		АдресЭПОтправителя = "no-reply@vkusvill.ru";
		УчеткаДляНастройки = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу(АдресЭПОтправителя);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчеткаДляНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАдресовЭП = "";
	МассивАдресовЭП = Новый Массив;
	
	Если ЗначениеЗаполнено(РольПолучателя) Тогда
		Если РольПолучателя = Справочники.РолиПользователей.ПочтовыйРобот Тогда
			АдресПолучателя = СокрЛП(Основание.АдресЭПОтправителя);
			Если ЗначениеЗаполнено(АдресПолучателя) Тогда
				СтрокаАдресовЭП = АдресПолучателя;
				МассивАдресовЭП.Добавить(АдресПолучателя);
			КонецЕсли;
		Иначе
			Запрос1 = Новый Запрос;
			Запрос1.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РолиПользователейСоставРоли.Сотрудник,
			|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП
			|ИЗ
			|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
			|			И (КонтактнаяИнформация.Вид = &ВидКИ)
			|ГДЕ
			|	РолиПользователейСоставРоли.Ссылка = &Роль";
			
			Запрос1.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
			Запрос1.УстановитьПараметр("Роль", РольПолучателя);
			
			Рез1 = Запрос1.Выполнить();
			Выб1 = Рез1.Выбрать();
			
			Пока Выб1.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выб1.АдресЭП) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
					СтрокаАдресовЭП = СтрокаАдресовЭП + ", ";
				КонецЕсли;
				СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(Выб1.АдресЭП);
				МассивАдресовЭП.Добавить(СокрЛП(Выб1.АдресЭП));
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	//+++АК SHEP 20160426 добавлены ТЧ РолиПолучателей и АдресаЭП
	Если РолиПолучателей.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РолиПользователейСоставРоли.Сотрудник,
			|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭП
			|ИЗ
			|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО РолиПользователейСоставРоли.Сотрудник = КонтактнаяИнформация.Объект
			|			И (КонтактнаяИнформация.Вид = &ВидКИ)
			|ГДЕ
			|	РолиПользователейСоставРоли.Ссылка В (&РолиПолучателей)");
		Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
		Запрос.УстановитьПараметр("РолиПолучателей", РолиПолучателей.ВыгрузитьКолонку("Роль"));
		
		Результат = Запрос.Выполнить();
		ВыборкаЗапроса = Результат.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаЗапроса.АдресЭП) Тогда Продолжить; КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда СтрокаАдресовЭП = СтрокаАдресовЭП + ", "; КонецЕсли;
			
			СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(ВыборкаЗапроса.АдресЭП);
			МассивАдресовЭП.Добавить(СокрЛП(ВыборкаЗапроса.АдресЭП));
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого АдресЭП Из АдресаЭП Цикл
		Если НЕ ЗначениеЗаполнено(АдресЭП.Адрес) Тогда Продолжить; КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда СтрокаАдресовЭП = СтрокаАдресовЭП + ", "; КонецЕсли;
		
		СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(АдресЭП.Адрес);
		МассивАдресовЭП.Добавить(СокрЛП(АдресЭП.Адрес));
	КонецЦикла;
	//---АК SHEP 20160426
	//+++АК SHEP 20160805
	Если ЭтоЗаданиеТехнологаМагазинам Тогда
		// рассылаем на электронные адреса магазинов
	КонецЕсли;
	//---АК SHEP 20160805
	
	Для Каждого ПрямойПолучатель Из ПрямыеПолучатели Цикл
		Если ЗначениеЗаполнено(ПрямойПолучатель.АдресЭП) Тогда
			Если ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
				СтрокаАдресовЭП = СтрокаАдресовЭП + ", ";
			КонецЕсли;	
			СтрокаАдресовЭП = СтрокаАдресовЭП + СокрЛП(ПрямойПолучатель.АдресЭП);
			МассивАдресовЭП.Добавить(СокрЛП(ПрямойПолучатель.АдресЭП));
		КонецЕсли;
	КонецЦикла;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
		Возврат;
	КонецЕсли;
	
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчеткаДляНастройки);
	Профиль.Пользователь = АдресЭПОтправителя;
	Профиль.ПользовательSMTP = АдресЭПОтправителя;
	Если ЗначениеЗаполнено(ПарольЭПОтправителя) Тогда
		Профиль.Пароль = ПарольЭПОтправителя;
		Профиль.ПарольSMTP = ПарольЭПОтправителя;
	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	//Письмо.Тема = "Новое сообщение";
	Письмо.Тема = СокрЛП(Тема);
	Если НЕ ПустаяСтрока(ОбратныйАдрес) Тогда Письмо.ОбратныйАдрес.Добавить(ОбратныйАдрес); КонецЕсли;
	Письмо.ИмяОтправителя = Строка(Отправитель);
	Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	Для Каждого Адрес1 Из МассивАдресовЭП Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес1;
	КонецЦикла;	
	
	Текст1 = Письмо.Тексты.Добавить();
	//Текст1.Текст     = "Вам отправлено новое сообщение из подразделения """ + Строка(Отправитель) + """."
	//		+ Символы.ПС + "Тема: " + СокрЛП(Тема) 
	//		+ Символы.ПС + "Текст: " + СокрЛП(ТекстСообщения) ;
			
	Текст1.Текст = СокрЛП(ТекстСообщения) ;
			
	Если ЗначениеЗаполнено(АдресЭПОтправителяИсходный) И АдресЭПОтправителяИсходный <> АдресЭПОтправителя Тогда
		Текст1.Текст = "(перенаправлено с " + АдресЭПОтправителяИсходный + ")" + Символы.ПС + Текст1.Текст;
	КонецЕсли;
			
	Текст1.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	// добавим вложения
	НомерСообщения = Номер;
	ПолныйКаталог2 =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "MessAtt\" + НомерСообщения;
	МСРез2 = НайтиФайлы(ПолныйКаталог2, "*.*");
	Для каждого Файл1 Из МСРез2 Цикл
		Письмо.Вложения.Добавить(Файл1.ПолноеИмя, Файл1.Имя);
	КонецЦикла;
	
	// добавим картинки из ТЧ "Картинки"
	Для каждого СтрокаТЧКартинок Из Картинки Цикл
		КаталогФайловКартинок = СокрЛП(Константы.КаталогХраненияФайловКартинок.Получить());
		Если Прав(КаталогФайловКартинок, 1) <> "\" Тогда
			КаталогФайловКартинок = КаталогФайловКартинок + "\";
		КонецЕсли;	
		ПолноеИмяФайлаКартинки = КаталогФайловКартинок + СокрЛП(СтрокаТЧКартинок.ОтносительноеИмяФайла);
		МСФайловКартинок = НайтиФайлы(ПолноеИмяФайлаКартинки);
		Для каждого Файл1 Из МСФайловКартинок Цикл
			Письмо.Вложения.Добавить(Файл1.ПолноеИмя, Файл1.Имя);
		КонецЦикла;
	КонецЦикла;
	
	//Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Попытка
			Почта.Послать(Письмо);
			Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
				ЗаписьЖурналаРегистрации("ПримечаниеМОС", УровеньЖурналаРегистрации.Примечание,,, "Отправка почты произведена успешно");
			КонецЕсли;
		Исключение
			ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
			Если ОбщегоНазначения.ЭтоКопияБазы() Тогда
				ЗаписьЖурналаРегистрации("ОшибкаМОС", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отправке почты");
			КонецЕсли;
			Сообщить(ТекстОшибки);
		КонецПопытки;
	//КонецЕсли;	
	Почта.Отключиться();
	
	ОтправлятьСообщенияПриПроведении = Ложь;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Не нужно создавать повторное
	Если ЗначениеЗаполнено(ДатаПовторнойДоставки) Тогда
		// Повторное уже создано
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СообщениеМОС.Ссылка
		               |ИЗ
		               |	Документ.СообщениеМОС КАК СообщениеМОС
		               |ГДЕ
		               |	СообщениеМОС.ПервичноеСообщение = &ПервичноеСообщение";
		Запрос.УстановитьПараметр("ПервичноеСообщение", Ссылка);
		РЗ = Запрос.Выполнить().Выбрать();
		Если НЕ РЗ.Следующий() Тогда
			// создать повторное
			Док = Документы.СообщениеМОС.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(Док, ЭтотОбъект);
			Док.УстановитьНовыйНомер();
			Док.ДатаДоставки = ДатаПовторнойДоставки;
			Док.ДатаПовторнойДоставки = Дата(1,1,1);
			Док.ПервичноеСообщение = Ссылка; //+++АК SHEP 20160427: чтобы не дублировались
			Док.Записать();
		КонецЕсли; 
	КонецЕсли; 
	//Сообщить(Строка(Док) + " записан");
	Если ПометкаУдаления И ЗначениеЗаполнено(Номер) Тогда // Удалим папки вложений (для черновиков)
		ПолныйКаталогФВ =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "NewMessAtt\" + СокрЛП(Номер);
		ПолныйКаталогФВ2 =  СокрЛП(Константы.КаталогХраненияФайлов.Получить()) + "MessAtt\" + СокрЛП(Номер);
		УдалитьФайлы(ПолныйКаталогФВ);
		УдалитьФайлы(ПолныйКаталогФВ2);
	КонецЕсли; 
	
КонецПроцедуры

ОтправлятьСообщенияПриПроведении = Ложь;
