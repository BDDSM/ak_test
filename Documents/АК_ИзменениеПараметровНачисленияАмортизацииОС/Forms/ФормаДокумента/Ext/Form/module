////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть данными из регистров сведений
//
Процедура ЗаполнитьОС()

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПринятыеКУчетуОССрезПоследних.ОсновноеСредство,
	               |	ПринятыеКУчетуОССрезПоследних.ДатаВводаВЭксплуатацию,
	               |	ПринятыеКУчетуОССрезПоследних.НачальнаяСтоимость,
	               |	ПринятыеКУчетуОССрезПоследних.НачислятьАмортизацию,
	               |	ПринятыеКУчетуОССрезПоследних.СрокАмортизации,
	               |	ПринятыеКУчетуОССрезПоследних.СчетУчетаАмортизация,
	               |	ПринятыеКУчетуОССрезПоследних.СчетУчета,
	               |	ПринятыеКУчетуОССрезПоследних.АмортизационнаяГруппа,
	               |	ПринятыеКУчетуОССрезПоследних.ЭтоОприходование,
	               |	ПринятыеКУчетуОССрезПоследних.СтатьяДР,
	               |	ПринятыеКУчетуОССрезПоследних.Период
	               |ИЗ
	               |	РегистрСведений.ПринятыеКУчетуОС.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&СписокОС)) КАК ПринятыеКУчетуОССрезПоследних";
				   
	ТаблицаТекущиеПараметрыАмортизацииБУ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ОС Цикл

		ТекущиеПараметрыАмортизацииБУ = ТаблицаТекущиеПараметрыАмортизацииБУ.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");

		Если НЕ ТекущиеПараметрыАмортизацииБУ = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущиеПараметрыАмортизацииБУ);		
			
		КонецЕсли;		
		
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельСоставОСЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
      

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Для списка ОС" из меню "Заполнить"
// командной панели формы. Процедура выполняет заполнение колонок с данными 
// в табличной части по каждому выбранному основному средству.
//
Процедура КоманднаяПанельОСЗаполнитьДляСписка(Кнопка)

	ЗаполнитьОС();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
//Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
//	
//	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
//		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
//		Возврат;
//	КонецЕсли;
//	
//	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
//	
//	Если ОсновноеСредство = Неопределено Тогда
//		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
//		Возврат;
//	КонецЕсли;
//	
//	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
//	
//	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
//	
//	Запрос = Новый Запрос();
//	
//	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
//	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
//	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
//	|ИЗ
//	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
//	|ГДЕ
//	|	ОсновныеСредства.Наименование = &Наименование
//	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
//	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
//	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
//	
//	ВыборкаОС = Запрос.Выполнить().Выбрать();
//	
//	Если ВыборкаОС.Количество() = 0 Тогда
//		ОбщегоНазначения.СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
//		Возврат;
//	КонецЕсли;
//	
//	Пока ВыборкаОС.Следующий() Цикл
//		НоваяСтрока = ОС.Добавить();
//		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
//	КонецЦикла; 
//	
//КонецПроцедуры

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)

	ФормаВыбора = Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, ЭлементыФормы.ОС);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 07.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Изменение параметров начисления амортизации ОС");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	 	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ПараметрОбъектКопирования);		

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	//ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	//
	//РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыНалУчета,ОтражатьВБухгалтерскомУчете,мСтрокаРеквизитыБухУчета);
	//НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	//// Установить активный реквизит.
	//РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ОС);
	мТекущаяДатаДокумента = Дата;

	//// Заполнить соответствие объектов ОС и их инвентарных номеров
	//ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	//
	//// Установить доступность формы с учетом даты запрета редактирования	
	//РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	//
	//УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	//ОсобыйПорядокНалогообложения = НалоговыйУчетУСН.ПрименениеОсобогоПорядкаНалогообложения(Организация, Дата);
	//ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация, Дата);
	//ОСН_ЮрЛицо = (НЕ ОСН_ФизЛицо И НЕ УСН И НЕ ОсобыйПорядокНалогообложения);
	//
	//ЭлементыФормы.ОС.Колонки.ПРДляВычисленияАмортизации.Видимость = ОтражатьВНалоговомУчете И ОСН_ЮрЛицо;
	//РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

	//+++АК sils 07.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа    
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;	
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ОСПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ЭлОформления Из ОформленияСтрок Цикл
		ЭлОформления.Ячейки.ИнвентарныйНомер.ОтображатьТекст = Истина;
		ЭлОформления.Ячейки.ИнвентарныйНомер.Текст = ЭлОформления.ДанныеСтроки.ОсновноеСредство.ИнвентарныйНомер;
	КонецЦикла;
	
КонецПроцедуры


Процедура КоманднаяПанельСостояниеОСЗаполнитьДляСписка(Кнопка)
	
	ЗаполнитьОС_Состояние();
	
КонецПроцедуры

// Процедура заполняет табличную часть данными из регистров сведений
//
Процедура ЗаполнитьОС_Состояние()

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;
	
	СписокОС = Состояние.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостояниеОССрезПоследних.ОсновноеСредство,
	               |	СостояниеОССрезПоследних.Период,
	               |	СостояниеОССрезПоследних.Местоположение,
	               |	СостояниеОССрезПоследних.Эксплуатируется,
	               |	СостояниеОССрезПоследних.Списано
	               |ИЗ
	               |	РегистрСведений.СостояниеОС.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&СписокОС)) КАК СостояниеОССрезПоследних";
				   
	ТаблицаТекущиеПараметрыАмортизацииБУ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Состояние Цикл

		ТекущиеПараметрыАмортизацииБУ = ТаблицаТекущиеПараметрыАмортизацииБУ.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");

		Если НЕ ТекущиеПараметрыАмортизацииБУ = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущиеПараметрыАмортизацииБУ);		
			
		КонецЕсли;		
		
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельСоставОСЗаполнить()

Процедура СостояниеОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда

		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

			СтрокаТабличнойЧасти = Состояние.Найти(ВыбранноеЗначение,"ОсновноеСредство");

			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);

			Иначе
				НоваяСтрока = Состояние.Добавить();
				НоваяСтрока.ОсновноеСредство = ВыбранноеЗначение;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда

		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

			СтрокаТабличнойЧасти = ОС.Найти(ВыбранноеЗначение,"ОсновноеСредство");

			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);

			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ВыбранноеЗначение;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСостояниеОСПодбор(Кнопка)
	
	ФормаВыбора = Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, ЭлементыФормы.СостояниеОС);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры


