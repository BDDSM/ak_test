
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//НоменклатураПоставщика=ВыбратьНоменклатуруПоУмолчанию();
	//ФормаВыбора=ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",,ЭтаФорма);
	//ФормаВыбора.Параметры.РежимВыбора = Истина;
	//
	//ФормаВыбора.Открыть();
	//ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;       
	//ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));       
	//ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("Ссылка");       
	//ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.ВСписке;       
	//ЭлементОтбора.ПравоеЗначение     = НоменклатураПоставщика;       
	//ЭлементОтбора.Использование      = Истина;
КонецПроцедуры

&НаСервере
Функция ВыбратьНоменклатуруПоУмолчанию()
	Спис=Новый СписокЗначений;
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Ларь низкотемпературный МЛК 250(60*80)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф ШВУП -1ПУ -0,75 С/4");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф ШВУП -1ТУ  0,7 С(-18)(мороженая свечка)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф ШВУП -1ТУ  0,7 М(-18)(мороженая свечка)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф ШВУП -1ТУ -0,75 К4 (двери купе)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф холодильный ШВУП1ТУ-1,12КЧ(+1...+10)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф холодильный  ШВУП -1.12К (+1+10)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф холодильный глухой -1,5 К(глухой накопитель)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	
	Ном=Справочники.Номенклатура.НайтиПоНаименованию("Шкаф ШВУП-1ТУ -1,5 К/4(+1...+10)витринный накопитель)");
	Если ЗначениеЗаполнено(Ном) Тогда
		Спис.Добавить(Ном);
	КонецЕсли;
	Возврат Спис;
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбораУправляемая" Тогда
		ТекущиеДанные=Элементы.Перечень.ТекущиеДанные;
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоИсполнителю(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала запишите документ");
		Возврат;
	КонецЕсли;	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Отправить письма исполнителям?"";";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	//ТекущиеДанные=Элементы.Перечень.ТекущиеДанные;
	//Если ТекущиеДанные<>Неопределено Тогда
		ОтправитьПисьмаИсполнителямСервер();
		Сообщить("Письма отправлены!");
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаИсполнителямСервер()
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД=Документы.ЗаявкаНаОбеспечениеТочек.ПолучитьМакет("МакетПисьмаИсполнителю");
	СКД.Параметры.Заявка.Значение = Объект.Ссылка;
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	//НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Заявка", Объект.Ссылка);
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	НоменклатураОбеспеченияТочекИсполнители.Исполнитель,
	             |	МАКСИМУМ(ВЫРАЗИТЬ(НоменклатураОбеспеченияТочекИсполнители.ПочтаИсполнителя КАК СТРОКА(150))) КАК Почта
	             |ИЗ
	             |	Документ.ЗаявкаНаОбеспечениеТочек.Перечень КАК ЗаявкаНаОбеспечениеТочекПеречень
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураОбеспеченияТочек.Исполнители КАК НоменклатураОбеспеченияТочекИсполнители
	             |		ПО ЗаявкаНаОбеспечениеТочекПеречень.Номенклатура.Родитель = НоменклатураОбеспеченияТочекИсполнители.Ссылка
	             |ГДЕ
	             |	ЗаявкаНаОбеспечениеТочекПеречень.Ссылка = &Заявка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НоменклатураОбеспеченияТочекИсполнители.Исполнитель";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Заявка",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СКД.Параметры.Исполнитель.Значение = Выборка.Исполнитель;
		НастройкиСКД = СКД.НастройкиПоУмолчанию;
		//НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Исполнитель", Выборка.Исполнитель);
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
		
		ТабДок=Новый ТабличныйДокумент;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ТабДок);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ИмяФайла=Новый УникальныйИдентификатор;
		ИмяФайла=КаталогВременныхФайлов()+ИмяФайла+".pdf";
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
		//Отправка письма
		Адрес = Выборка.Почта;
		СписокКому = Новый СписокЗначений;
		Если Адрес<>"" Тогда
			СпАдресов=Новый СписокЗначений;
			МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
			Для каждого Эл Из МассивАдресов Цикл
				Если ЗначениеЗаполнено(Эл) Тогда
					СписокКому.Добавить(СокрЛП(Эл));
				КонецЕсли; 
			КонецЦикла; 

		Иначе
			Сообщить("Не заполнен адрес электронной почты "+Выборка.Исполнитель);
			//Возврат;
		КонецЕсли;
		
			
		//СписокКому.Добавить(ВыборкаДетальныеЗаписи.Представление);
		СписокКому.Добавить("retail.e@vkusvill.ru");
		СписокКому.Добавить("pozm@automacon.ru");
		//СписокКому.Добавить("buh9@izbenka.msk.ru");
		
		
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Почта.Подключиться(Профиль);
		Письмо.Тема = "Вкусвилл. Заявка на обеспечение "+Объект.СтруктурнаяЕдиница+" дата: "+Формат(Объект.ДатаПроведенияРабот,"ДФ=dd.MM.yyyy");
		Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
		Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
		Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
		Для Каждого ПолучательЭлемент Из СписокКому Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = ПолучательЭлемент.Значение;
		КонецЦикла;	
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = "Во вложении находится информация о требуемом обеспечении";
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		
		Письмо.Вложения.Добавить(ИмяФайла);
		
		//	Если НЕ ОбщегоНазначения.ЭтоКопияБазы() Тогда
		Почта.Послать(Письмо);
		//	КонецЕсли;	
		Почта.Отключиться();
	КонецЦикла;	
		
	
	
	
	

КонецПроцедуры	

&НаКлиенте
Процедура ПереченьИсполнительПриИзменении(Элемент)
	ТекущиеДанные=Элементы.Перечень.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		ТекущиеДанные.ПочтаИсполнителя=ПолучитьАдресИсполнителяСервер(ТекущиеДанные.Исполнитель);
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ПолучитьАдресИсполнителяСервер(Исполнитель)
	Запрос = Новый Запрос;
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ                                                   
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = Значение(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)";
	
	Запрос.УстановитьПараметр("Объект", Исполнитель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Представление;
		//СпАдресов=Новый СписокЗначений;
		//МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.Представление,";");	
		//Для каждого Эл Из МассивАдресов Цикл
		//	Если ЗначениеЗаполнено(Эл) Тогда
		//		СписокКому.Добавить(СокрЛП(Эл));
		//	КонецЕсли; 
		//КонецЦикла; 

	Иначе
		//Сообщить("Не заполнен адрес электронной почты "+Исполнитель);
		Возврат "";
	КонецЕсли;

КонецФункции	

&НаКлиенте
Процедура ОтчетПоНаличиюОборудования(Команда)
	ОткрытьФорму("Отчет.НаличиеОборудования.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			СсылкаНаФайл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки",ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			НС=Объект.ПрикрепленныеФайлы.Добавить();
			НС.Файл=СсылкаНаФайл;
			НС.ДатаПрикрепления=ТекущаяДата();
		КонецЦикла;	
	КонецЕсли;	
	
	
		
		
КонецПроцедуры

&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.УстановитьНовыйКод("0");
	СпрОбъект.Наименование = СтрокаТаблицы.Представление;
	СпрОбъект.Расширение = РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	

&НаКлиенте
Процедура Просмотреть(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	
КонецПроцедуры

