
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЭтоНовыйОбъект = НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка);
	
	СканироватьШтрихкодДоступность = СканироватьШтрихкодДоступность(ТекущийОбъект.Номенклатура, ТекущийОбъект.ХарактеристикаНоменклатуры);
	Если НЕ СканироватьШтрихкодДоступность И ТекущийОбъект.СканироватьШтрихкод Тогда
		ТекущийОбъект.СканироватьШтрихкод = Ложь;
	ИначеЕсли СканироватьШтрихкодДоступность И НЕ ТекущийОбъект.СканироватьШтрихкод Тогда
		ТекущийОбъект.СканироватьШтрихкод = Истина;
	КонецЕсли;
	Элементы.СканироватьШтрихкод.Доступность = СканироватьШтрихкодДоступность;
	
	ЭтоНеНовыйОбъект = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.Номенклатура.ТолькоПросмотр = (ЭтоНеНовыйОбъект И ЗначениеЗаполнено(Объект.Номенклатура));
	Элементы.ХарактеристикаНоменклатуры.ТолькоПросмотр = (ЭтоНеНовыйОбъект И ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры));
	Элементы.ДатаПроизводстваНач.ТолькоПросмотр = ЭтоНеНовыйОбъект;
	Элементы.ДатаПроизводстваКон.ТолькоПросмотр = ЭтоНеНовыйОбъект;
	
	Оценки.Параметры.УстановитьЗначениеПараметра("ЗаданиеТехнологаНаДегустацию", Объект.Ссылка);
	
	Если ЭтоНеПервоеЧтение = Ложь Тогда
		Если НЕ ЭтоНовыйОбъект Тогда
			ОтветственныеЛица.Загрузить(Документы.ЗаданиеТехнологаНаДегустацию.ВернутьТЗнОтветственных(Объект.Ссылка));
			ЭтоНеПервоеЧтение = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(Документы.ЗаданиеТехнологаНаДегустацию.СоздатьДокумент());
	КонецЕсли;
	
	КаталогХраненияФайлов = Документы.ЗаданиеТехнологаНаДегустацию.ПолучитьКаталогХраненияФайлов(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТолькоПросмотр = Объект.Проведен;
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.ГруппаСтраницы.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ГруппаСтраницыПриСменеСтраницыНаСервере(Элемент.Имя, ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыНаСервере(ЭлементИмя, ТекущаяСтраницаИмя)
	
	Если ТекущаяСтраницаИмя = "СтраницаПоМагазинам" Тогда
		//Элементы[ЭлементИмя].Высота = 0;
		//Элементы.ОценкаПоказателей.Видимость = Ложь;
		//Элементы.МагазиныОценка.ТекстПодвала = Формат(ПолучитьСреднююОценку(Объект.Ссылка), "ЧДЦ=2");
		ОбновитьИнформациюПоМагазинам();
	ИначеЕсли ТекущаяСтраницаИмя = "СтраницаКомментарии" Тогда
	//	Элементы[ЭлементИмя].Высота = 1;
	//	Элементы.ОценкаПоказателей.Видимость = Истина;
		Элементы.ОценкаПоказателейОценка.ТекстПодвала = Формат(ПолучитьСреднююОценку(Объект.Ссылка), "ЧДЦ=2");
	ИначеЕсли ТекущаяСтраницаИмя = "СтраницаПараметрыЗадания" Тогда
		ОбновитьДолиРезультатовНаСервере(Объект.Ссылка, ТекущаяДоляПоложительныхРезультатов, ТекущаяДоляОтрицательныхРезультатов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоМагазинам()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТЗнМагазины.НомерСтроки,
		|	ТЗнМагазины.Магазин
		|ПОМЕСТИТЬ ВТМагазины
		|ИЗ
		|	&ТЗнМагазины КАК ТЗнМагазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТМагазины.НомерСтроки КАК НомерСтроки,
		|	ВТМагазины.Магазин,
		|	МАКСИМУМ(ЕСТЬNULL(ЗадачаТехнологаНаДегустацию.Проведен, ЛОЖЬ)) КАК Обработано,
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ОценкиЗадачТехнологаНаДегустацию.Оценка, 0)) КАК ЧИСЛО(5, 2)) КАК Оценка
		|ИЗ
		|	ВТМагазины КАК ВТМагазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗадачаТехнологаНаДегустацию КАК ЗадачаТехнологаНаДегустацию
		|		ПО (ЗадачаТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию = &ЗаданиеТехнологаНаДегустацию)
		|			И ВТМагазины.Магазин = ЗадачаТехнологаНаДегустацию.Магазин
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкиЗадачТехнологаНаДегустацию КАК ОценкиЗадачТехнологаНаДегустацию
		|		ПО (ОценкиЗадачТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию = &ЗаданиеТехнологаНаДегустацию)
		|			И ВТМагазины.Магазин = ОценкиЗадачТехнологаНаДегустацию.Магазин
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТМагазины.НомерСтроки,
		|	ВТМагазины.Магазин
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	Запрос.УстановитьПараметр("ЗаданиеТехнологаНаДегустацию", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТЗнМагазины", Объект.Магазины.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Магазины.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСреднююОценку(ЗаданиеТехнологаНаДегустацию, ИмяПоказателя = "")
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ОценкиЗадачТехнологаНаДегустацию.Оценка) КАК ЧИСЛО(5, 2)) КАК Оценка
		|ИЗ
		|	РегистрСведений.ОценкиЗадачТехнологаНаДегустацию КАК ОценкиЗадачТехнологаНаДегустацию
		|ГДЕ
		|	ОценкиЗадачТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию = &ЗаданиеТехнологаНаДегустацию");
	Запрос.УстановитьПараметр("ЗаданиеТехнологаНаДегустацию", ЗаданиеТехнологаНаДегустацию);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат 0; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Возврат ВыборкаЗапроса.Оценка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СканироватьШтрихкодДоступность(Номенклатура, ХарактеристикаНоменклатуры)
	
	//По умолчанию у нас для всех случаев всегда будет стоять галочка "обязательно сканировать", кроме если это товар без единичной упаковки
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Номенклатура КАК Номенклатура,
		|	&Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТЗнТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ШтриховыеКоды.ШтрихКод ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьШтрихКод
		|ИЗ
		|	ТЗнТовары КАК ТЗнТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтриховыеКоды КАК ШтриховыеКоды
		|		ПО ТЗнТовары.Номенклатура = ШтриховыеКоды.Номенклатура
		|			И ТЗнТовары.Характеристика = ШтриховыеКоды.Характеристика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТЗнТовары.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
		|		ПО ТЗнТовары.Номенклатура = СпрХарактеристикиНоменклатуры.Владелец
		|			И СпрХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
		|
		|ГДЕ
		|	СпрНоменклатура.БезУпаковки = ЛОЖЬ
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ШтриховыеКоды.ШтрихКод ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ИСТИНА");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ХарактеристикаНоменклатуры);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Объект.ДатаПроизводстваНач = Дата(1,1,1) ИЛИ Объект.ДатаПроизводстваКон = Дата(1,1,1) Тогда
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Да, всё указано верно");
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Нет, нужно указать даты производства");
				
				Если Вопрос(
					"Не указана начальная и/или конечная даты производства.
					|
					|После записи документа, даты производства невозможно будет поменять.
					|
					|Записать задание технолога?", СписокКнопок,, КодВозвратаДиалога.Нет, "Задание контролёра качества на дегустацию") <> КодВозвратаДиалога.Да Тогда
					
					Отказ = Истина;
					Возврат;
				КонецЕсли;

			ИначеЕсли Вопрос("ВНИМАНИЕ! После записи номенклатуру нельзя будет изменить!
				|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание контролёра качества на дегустацию") <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Вопрос("ВНИМАНИЕ! Задание будет закрыто!
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание контролёра качества на дегустацию") <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	СканироватьШтрихкодДоступность = СканироватьШтрихкодДоступность(Объект.Номенклатура, Объект.ХарактеристикаНоменклатуры);
	Если НЕ СканироватьШтрихкодДоступность И Объект.СканироватьШтрихкод Тогда
		Объект.СканироватьШтрихкод = Ложь;
	ИначеЕсли СканироватьШтрихкодДоступность И НЕ Объект.СканироватьШтрихкод Тогда
		Объект.СканироватьШтрихкод = Истина;
	КонецЕсли;
	Элементы.СканироватьШтрихкод.Доступность = СканироватьШтрихкодДоступность;
	ИзмНоменклатураНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуПоМагазину(Команда)
	
	ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ЗадачаСсылка = Неопределено;
	МассивЗадач = ПолучитьЗадачуПоМагазину(Объект.Ссылка, ТекущиеДанные.Магазин);
	Если МассивЗадач.Количество() = 1 Тогда
		ЗадачаСсылка = МассивЗадач[0];
	Иначе
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ОткрытьЗначение(ЗадачаСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачуПоМагазину(Ссылка, Магазин)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаТехнологаНаДегустацию.Ссылка
		|ИЗ
		|	Документ.ЗадачаТехнологаНаДегустацию КАК ЗадачаТехнологаНаДегустацию
		|ГДЕ
		|	НЕ ЗадачаТехнологаНаДегустацию.ПометкаУдаления
		|	И ЗадачаТехнологаНаДегустацию.ЗаданиеТехнологаНаДегустацию = &Ссылка
		|	И ЗадачаТехнологаНаДегустацию.Магазин = &Магазин");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура МагазиныПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Запрещено удалять магазины из списка!");
		Отказ = Истина;
		Возврат;
	ИначеЕсли Вопрос("Удалить магазин(ы) из списка?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет, "Задание контролёра качества на дегустацию") <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМагазинов(Команда)
	ОбновитьСписокМагазиновНаСервере(2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокМагазинов(Команда)
	
	Если Объект.МинимальноеКоличествоНеобходимыхДегустаций = 0 Тогда
		ТекстСообщения = "Необходимо заполнить ""Минимальное количество необходимых дегустаций""";
		#Если ТонкийКлиент Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, "Объект.МинимальноеКоличествоНеобходимыхДегустаций");
		#Иначе
			Предупреждение(ТекстСообщения);
		#КонецЕсли
		Возврат;
	ИначеЕсли Объект.Магазины.Количество() > 0 Тогда
		Если Вопрос("Очистить список магазинов и заполнить заново?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Объект.Магазины.Очистить();
	КонецЕсли;
	
	ОбновитьСписокМагазиновНаСервере(Объект.МинимальноеКоличествоНеобходимыхДегустаций);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокМагазиновНаСервере(КвоМагазинов)
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитОбъект.ОбновитьСписокМагазинов(КвоМагазинов);
	ЗначениеВРеквизитФормы(РеквизитОбъект, "Объект");
	ГруппаСтраницыПриСменеСтраницыНаСервере("ГруппаСтраницы", "СтраницаПоМагазинам");
КонецПроцедуры

&НаСервере
Процедура ИзмНоменклатураНаСервере()
	
	флЗаполнитьОднуХарактеристику = Ложь;
	
	// проверяем соответствие владельцу
	Если ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) И Объект.ХарактеристикаНоменклатуры.Владелец <> Объект.Номенклатура Тогда
		флЗаполнитьОднуХарактеристику = Истина;
		Объект.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) Тогда
		флЗаполнитьОднуХарактеристику = Истина;
	КонецЕсли;
	
	Если флЗаполнитьОднуХарактеристику Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
			|	И ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ");
		Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();

		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Если ВыборкаЗапроса.Количество() = 1 Тогда
				ВыборкаЗапроса.Следующий();
				Объект.ХарактеристикаНоменклатуры = ВыборкаЗапроса.ХарактеристикаНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Цена = РегистрыСведений.ЦеныПоставщиков.ПолучитьЦенуПоставщика(Объект.Номенклатура, Объект.ХарактеристикаНоменклатуры, Объект.Дата);
	Объект.ЕдиницаИзмерения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Номенклатура, "ЕдиницаХраненияОстатков");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораУФ",
	//  Новый Структура("Отбор, ЗакрыватьПриВыборе, ТекущаяСтрока",
	//  Новый Структура("КатегорияАссортимента", ПредопределенноеЗначение("Перечисление.КатегорииАссортимента.Новинки")), Истина, Объект.Номенклатура));
	//Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
	//	Объект.Номенклатура = ВыбранноеЗначение;
	//	ИзмНоменклатураНаСервере();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаВыбораУпр",
		Новый Структура("Отбор, ЗакрыватьПриВыборе, ТекущаяСтрока", Новый Структура("Владелец, Неактивная", Объект.Номенклатура, Ложь), Истина, Объект.ХарактеристикаНоменклатуры));
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.ХарактеристикаНоменклатуры = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Элементы.МагазиныМагазин.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныМагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Магазины.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбораУпр",
	  Новый Структура("Отбор, ЗакрыватьПриВыборе",
	    Новый Структура("ТипРозничнойТочки,ТипСтруктурнойЕдиницы,СтатусТорговойТочки",
		  ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин"), ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"), ПредопределенноеЗначение("Перечисление.СтатусыТорговыхТочек.Открыт")),
		Истина));
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные.Магазин = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ОтменаРедактирования Тогда Возврат; КонецЕсли;
	
	// Проверяем наличие этого магазина в списке
	Если НоваяСтрока Тогда
		ТекущийМагазин = ТекущиеДанные.Магазин;
		Если НЕ ЗначениеЗаполнено(ТекущийМагазин) Тогда
			Предупреждение("Магазин должен быть заполнен!");
			Отказ = Истина;
			Возврат;
		ИначеЕсли Объект.Магазины.НайтиСтроки(Новый Структура("Магазин", ТекущийМагазин)).Количество() > 1 Тогда
			Предупреждение("Магазин ''" + Строка(ТекущийМагазин) + "'' уже есть в списке!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.МагазиныМагазин.ТолькоПросмотр = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьФайлНаСервере(АдресВременногоХранилища, КаталогХраненияФайлов, ИмяФайла)
Перем Файл, ДвоичныеДанные;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Файл = Новый Файл(ИмяФайла);
	ОтносительноеИмяФайла = Строка(Новый УникальныйИдентификатор) + Файл.Расширение;
	
	Попытка
		ДвоичныеДанные.Записать(КаталогХраненияФайлов + ОтносительноеИмяФайла);
	Исключение
		Сообщить("Не удалось добавить файл.");
		Возврат "";
	КонецПопытки;
	
	Возврат ОтносительноеИмяФайла;
КонецФункции

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
Перем Файл, ОтносительноеИмяФайла;
	
	Отказ = Истина;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогОткрытияФайла.Фильтр = "Все файлы (*.*)|*.*|";
	
	Если ДиалогОткрытияФайла.Выбрать() = Ложь Тогда
	    Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
	ОтносительноеИмяФайла = ЗаписатьФайлНаСервере(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя)), КаталогХраненияФайлов, Файл.Имя);
	Если НЕ ЗначениеЗаполнено(ОтносительноеИмяФайла) Тогда
		Предупреждение("Ошибка при добавлении файла!");
		Возврат;
	КонецЕсли;
	
	СтрокаФотографии = Объект.Вложения.Добавить();
	СтрокаФотографии.ИмяФайла = Файл.Имя;
	СтрокаФотографии.ОтносительноеИмяФайла = ОтносительноеИмяФайла;
	Элемент.ТекущаяСтрока = СтрокаФотографии.ПолучитьИдентификатор();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Вопрос("Удалить файл?", РежимДиалогаВопрос.ДаНетОтмена,,, "Задание контролёра качества на дегустацию") <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ОтносительноеИмяФайла) Тогда
		УдалитьФайлНаСервере(КаталогХраненияФайлов + ТекущиеДанные.ОтносительноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлНаСервере(ИмяФайла)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлНаСервере(ИмяФайла, УникальныйИдентификатор)
Перем Файл;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
Перем Файл, ОтносительноеИмяФайла;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОтносительноеИмяФайла = ТекущиеДанные.ОтносительноеИмяФайла;
	Если НЕ ПустаяСтрока(ОтносительноеИмяФайла) Тогда
		АдресВремХранилища = ПолучитьФайлНаСервере(КаталогХраненияФайлов + ОтносительноеИмяФайла, УникальныйИдентификатор);
		Если ЗначениеЗаполнено(АдресВремХранилища) Тогда
			Файл = Новый Файл(ОтносительноеИмяФайла);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВремХранилища);
			ДвоичныеДанные.Записать(ИмяВременногоФайла);
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДолиРезультатов(Команда)
	ОбновитьДолиРезультатовНаСервере(Объект.Ссылка, ТекущаяДоляПоложительныхРезультатов, ТекущаяДоляОтрицательныхРезультатов);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДолиРезультатовНаСервере(Ссылка, ТекущаяДоляПоложительныхРезультатов, ТекущаяДоляОтрицательныхРезультатов)
	Документы.ЗаданиеТехнологаНаДегустацию.ПолучитьДолиРезультатов(Ссылка, ТекущаяДоляПоложительныхРезультатов, ТекущаяДоляОтрицательныхРезультатов);
КонецПроцедуры
