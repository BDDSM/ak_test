
Функция ПолучитьТоварыПоЗаказамПоставщику(МассивЗаказов, Склад, Поставщик, НаДату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказов"	, МассивЗаказов);
	Запрос.УстановитьПараметр("Склад"			, Склад);
	Запрос.УстановитьПараметр("Поставщик"		, Поставщик);
	Запрос.УстановитьПараметр("ДатаОстатков"	, НаДату - 1);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_НоменклатураСклада
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СправочникНоменклатура.Ссылка КАК Ссылка
	|		ИЗ
	|			РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|				ПО ДоступностьТоваровНаСкладах.Номенклатура = СправочникНоменклатура.Ссылка
	|		ГДЕ
	|			ДоступностьТоваровНаСкладах.Склад = &Склад) КАК ВложенныйЗапрос
	|		ПО (СправочникНоменклатура.Ссылка = ВложенныйЗапрос.Ссылка
	|				ИЛИ СправочникНоменклатура.Ссылка = ВложенныйЗапрос.Ссылка.Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоставщиков.Номенклатура КАК Номенклатура,
	|	ЦеныПоставщиков.Характеристика КАК ХарактеристикаНом
	|ПОМЕСТИТЬ ВТЦены
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаОстатков,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_НоменклатураСклада.Ссылка
	|					ИЗ
	|						ВТ_НоменклатураСклада КАК ВТ_НоменклатураСклада)
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиков
	|ГДЕ
	|	НЕ ЦеныПоставщиков.Характеристика.Неактивная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуПредзаказы.Ссылка КАК Заказ,
	|	ЗаказПоставщикуПредзаказы.Документ КАК Предзаказ
	|ПОМЕСТИТЬ ЗаказыПредзаказы
	|ИЗ
	|	Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
	|ГДЕ
	|	ЗаказПоставщикуПредзаказы.Ссылка В(&МассивЗаказов)
	|	И ЗаказПоставщикуПредзаказы.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредзаказТовары.Номенклатура,
	|	ПредзаказТовары.ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВТЦены.ХарактеристикаНом, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	ПредзаказТовары.Ссылка,
	|	ЗаказыПредзаказы.Заказ,
	|	СУММА(ПредзаказТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТПолныйЗаказ
	|ИЗ
	|	Документ.Предзаказ.Товары КАК ПредзаказТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
	|		ПО ПредзаказТовары.Номенклатура = ВТЦены.Номенклатура
	//задваивал заказ
	|			И ПредзаказТовары.Характеристика = ВТЦены.ХарактеристикаНом
	//
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыПредзаказы КАК ЗаказыПредзаказы
	|		ПО ПредзаказТовары.Ссылка = ЗаказыПредзаказы.Предзаказ
	|ГДЕ
	|	ПредзаказТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаказыПредзаказы.Предзаказ
	|			ИЗ
	|				ЗаказыПредзаказы)
	|	И ПредзаказТовары.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_НоменклатураСклада.Ссылка
	|			ИЗ
	|				ВТ_НоменклатураСклада КАК ВТ_НоменклатураСклада)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредзаказТовары.Номенклатура,
	|	ПредзаказТовары.ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВТЦены.ХарактеристикаНом, НЕОПРЕДЕЛЕНО),
	|	ПредзаказТовары.Ссылка,
	|	ЗаказыПредзаказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НоменклатураСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗаказыПредзаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.НеВедетсяУчетПоХарактеристикам
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВложенныйЗапрос.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолныйЗаказ.Номенклатура КАК Номенклатура,
	|		ПолныйЗаказ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПолныйЗаказ.Характеристика КАК Характеристика,
	|		ПолныйЗаказ.Ссылка КАК Ссылка,
	|		ПолныйЗаказ.Заказ КАК Заказ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаказыПоставщикамОстаткиИОбороты.КоличествоПриход, 0) = 0
	|				ТОГДА ПолныйЗаказ.Количество
	|			ИНАЧЕ ЗаказыПоставщикамОстаткиИОбороты.КоличествоКонечныйОстаток
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		ВТПолныйЗаказ КАК ПолныйЗаказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(, &ДатаОстатков, , , ) КАК ЗаказыПоставщикамОстаткиИОбороты
	|			ПО ПолныйЗаказ.Номенклатура = ЗаказыПоставщикамОстаткиИОбороты.Номенклатура
	|				И ПолныйЗаказ.Заказ = ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПолныйЗаказ";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция Печать(Ссылка) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ПриходныйОрдер_Печать";
	Макет = Документы.ПриходныйОрдерСклад.ПолучитьМакет("ПриходныйОрдер");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("ДатаДок", Ссылка.Дата);
	Запрос.Параметры.Вставить("ТекДата", ТекущаяДата());
	Запрос.Параметры.Вставить("Склад", Ссылка.Склад.Владелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка,
	|	ПриходныйОрдерСклад.ВерсияДанных,
	|	ПриходныйОрдерСклад.ПометкаУдаления,
	|	ПриходныйОрдерСклад.Номер,
	|	ПриходныйОрдерСклад.Дата,
	|	ПриходныйОрдерСклад.Проведен,
	|	ПриходныйОрдерСклад.ВидОперации,
	|	ПриходныйОрдерСклад.Склад,
	|	ПриходныйОрдерСклад.Поставщик,
	|	ПриходныйОрдерСклад.НомерДокументаПоставщика,
	|	ПриходныйОрдерСклад.ДатаДокументаПоставщика,
	|	ПриходныйОрдерСклад.Автор,
	|	ПриходныйОрдерСклад.Товары.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика
	|	)
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормативныйКвантУпаковкиСрезПоследних.Характеристика,
	|	НормативныйКвантУпаковкиСрезПоследних.Квант
	|ИЗ
	|	РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(
	|			&ДатаДок,
	|			Склад = &Склад
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						ПриходныйОрдерСкладТовары.Характеристика
	|					ИЗ
	|						Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|					ГДЕ
	|						ПриходныйОрдерСкладТовары.Ссылка = &Ссылка)) КАК НормативныйКвантУпаковкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СертификатыНаПродукцию.Характеристика КАК Характеристика
	|		ИЗ
	|			РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	|		ГДЕ
	|			СертификатыНаПродукцию.Период <= &ТекДата
	|			И СертификатыНаПродукцию.ДействуетДо >= &ТекДата
	|			И СертификатыНаПродукцию.Удален = ЛОЖЬ
	|			И СертификатыНаПродукцию.Характеристика В
	|					(ВЫБРАТЬ
	|						ПриходныйОрдерСкладТовары.Характеристика
	|					ИЗ
	|						Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|					ГДЕ
	|						ПриходныйОрдерСкладТовары.Ссылка = &Ссылка)) КАК ВложенныйЗапрос
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ВложенныйЗапрос.Характеристика
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец.ТребуетсяНаличиеСертификата = ИСТИНА
	|	И ХарактеристикиНоменклатуры.Ссылка В
	|			(ВЫБРАТЬ
	|				ПриходныйОрдерСкладТовары.Характеристика
	|			ИЗ
	|				Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|			ГДЕ
	|				ПриходныйОрдерСкладТовары.Ссылка = &Ссылка)
	|	И ВложенныйЗапрос.Характеристика ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец.Наименование,
	|	ХарактеристикиНоменклатуры.Наименование";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	ТабКешКвант = Результаты[1].Выгрузить();
	ТабНетСертификатов = Результаты[2].Выгрузить();

	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 	= Макет.ПолучитьОбласть("Склад");
	ОбластьПоставщик 	= Макет.ПолучитьОбласть("Поставщик");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 	= Макет.ПолучитьОбласть("ВремяПечати");
	

	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата,"ДЛФ=DD");
		
		//+++АК sole 2018.09.07 ИП-00019639
		//ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
		ОбщегоНазначенияКлиентСервер.ДобавитьQRКодВОбластьДокумента(ОбластьЗаголовок,Выборка.Ссылка);
		//---АК sole 2018.09.07 ИП-00019639
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
		
		//+++АК SHEP 20160628
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки И ТипЗнч(Выборка.Ссылка.Основание) = Тип("ДокументСсылка.МП_ЗадачаТехнолога") Тогда
			ОбластьТТ = Макет.ПолучитьОбласть("ТорговаяТочка");
			ОбластьТТ.Параметры.ТорговаяТочка = Выборка.Ссылка.Основание.Магазин;
			ТабДок.Вывести(ОбластьТТ, Выборка.Уровень());
		КонецЕсли;
		//---АК SHEP 

		ОбластьПоставщик.Параметры.Заполнить(Выборка);
		Если ЗначениеЗаполнено(Выборка.ДатаДокументаПоставщика) Тогда
			ОбластьПоставщик.Параметры.ПоДокументу = СокрЛП(Выборка.НомерДокументаПоставщика) + " от " + Формат(Выборка.ДатаДокументаПоставщика, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		ТабДок.Вывести(ОбластьПоставщик, Выборка.Уровень());
//+++ KOPA 27.11.2017 [ИП-00017264]
		Если ВыводитьНадпись_ЕстьТоварыКВозврату(Ссылка) Тогда
			ОбластьЕстьТоварыКВозврату 	= Макет.ПолучитьОбласть("ТоварыКВозвратуПоставщику");
			ТабДок.Вывести(ОбластьЕстьТоварыКВозврату);	
		КонецЕсли;
//--- KOPA
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ВыборкаНоменклатура = Выборка.Товары.Выбрать();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			//+++AK VERN 2016-09-07 обход ошибки с нулевым количеством
			Если ВыборкаНоменклатура.Количество>0 тогда
			//---AK VERN 2016-09-07 обход ошибки с нулевым количеством
				ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
				
				//+++ gusd (ИП-00013273.02)
				
				НаименованиеТовара = СокрЛП(Строка(ВыборкаНоменклатура.Номенклатура));
				
				Если ЗначениеЗаполнено(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)
					И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)) Тогда
					
					НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика) + ")";
					
				КонецЕсли;
				
				ОбластьСтрока.Параметры.Номенклатура = НаименованиеТовара;
				
				//--- gusd (ИП-00013273.02)
				
				СтрокаКешКвант = ТабКешКвант.Найти(ВыборкаНоменклатура.Характеристика, "Характеристика");
				Если СтрокаКешКвант <> Неопределено Тогда
					ОбластьСтрока.Параметры.Квант = СтрокаКешКвант.Квант;
				КонецЕсли;	
				ТабДок.Вывести(ОбластьСтрока, ВыборкаНоменклатура.Уровень());
			//+++AK VERN 2016-09-07 обход ошибки с нулевым количеством
			КонецЕсли;
		    //---AK VERN 2016-09-07 обход ошибки с нулевым количеством
		КонецЦикла;

		ОбластьВремяПечати.Параметры.ВремяПечати = "["+ТекущаяДата()+"] "+"Автор: "+Выборка.Автор;
		
		ТабДок.Вывести(ОбластьПодвал);

		ВставлятьРазделительСтраниц = Истина;
		ТабДок.Вывести(ОбластьВремяПечати);
		
		//+++АК mika 2018.04.17 ИП-00017974^01
		//Убрать отображение данных об остутствии несертифицированных товаров 
		//Алгоритм определения ТабНетСертификатов (и основной Запрос) не модифицировались
		//
		//Если ТабНетСертификатов.Количество() > 0 Тогда
		//	Область = Макет.ПолучитьОбласть("ШапкаНетСертификатов");
		//	ТабДок.Вывести(Область);
		//	Для Каждого СтрокаСертификат Из ТабНетСертификатов Цикл
		//		Область = Макет.ПолучитьОбласть("ТоварБезСертификата");
		//		Область.Параметры.Товар = СтрокаСертификат.Владелец;
		//		Область.Параметры.Характеристика = СтрокаСертификат.Ссылка;
		//		ТабДок.Вывести(Область);
		//	КонецЦикла;	
		//КонецЕсли;
		//
		//---АК mika ИП-00017974^01

	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции

Функция ПечатьМ15(Ссылка) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	, Ссылка);
	Запрос.УстановитьПараметр("Контрагент"		, Ссылка.Поставщик);
	  
	//+++АК LAGP 2018.04.28 ИП-00018531 Исправить вывод организации в печатной форме М-15 (берется организация из договора)	
	//Запрос.УстановитьПараметр("Организация"		, ?(НЕ Ссылка.Организация.Пустая(), Ссылка.Организация, Ссылка.Склад.Владелец.Организация));
	ТекДоговор 	= ПолучитьДоговорКонтрагента(Ссылка.Поставщик);
	ТекДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();  //+++АК LAGP 2018.05.23 ИП-00018531 Условие дописано по просьбе Алёны Каргиной.
	Организация = ?(НЕ Ссылка.Организация.Пустая(), Ссылка.Организация, ?(НЕ ТекДоговор.Пустая(), ТекДоговор.Организация, Справочники.Организации.ПустаяСсылка()));
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если Ссылка.Товары.Количество() > 0 Тогда
			Организация = Ссылка.Товары[0].Номенклатура.ТорговаяМарка.ОрганизацияЗакупки; //+++АК LAGP 2018.05.22 ИП-00018531 Условие дописано по просьбе Алёны Каргиной.	
		КонецЕсли;
	КонецЕсли;		
	Запрос.УстановитьПараметр("Организация"	, Организация);	
	//---АК LAGP 2018.04.28

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДоговор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Номер КАК Номер,
	|	ПриходныйОрдерСклад.Дата КАК ДатаСоставления,
	|	ПриходныйОрдерСклад.Дата КАК ДатаДокумента,
	|	&Организация КАК Организация,
	|	&Организация КАК ЮрФизЛицо,
	|	&Организация КАК Руководители,
	|	ПриходныйОрдерСклад.Склад КАК Получатель,
	|	ПриходныйОрдерСклад.Склад.Наименование КАК ПолучательНаименование,
	|	ПриходныйОрдерСклад.Поставщик.Код КАК КонтрагентКод,
	|	ПриходныйОрдерСклад.Поставщик КАК Контрагент,
	|	ПриходныйОрдерСклад.Поставщик КАК Отправитель,
	|	ПриходныйОрдерСклад.Поставщик.Наименование КАК ОтправительНаименование,
	|	ЕСТЬNULL(ВТДоговор.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	ИСТИНА КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговор КАК ВТДоговор
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПриходныйОрдерСклад.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДоговор";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСреза"		, Ссылка.Дата);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК Номер,
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, 0) * Товары.Количество КАК Сумма,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, 0) * Товары.Количество * (1 - 100 / (100 + ВЫБОР
	|		КОГДА Товары.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		КОГДА Товары.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ)) КАК СуммаНДС,
	|	Товары.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаСреза, ) КАК ЦеныПоставщиков
	|		ПО Товары.Номенклатура = ЦеныПоставщиков.Номенклатура
	|			И Товары.Характеристика = ЦеныПоставщиков.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
	
	
	Макет = ПолучитьОбщийМакет("М15");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерСклад_М15";
	
	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаСоставления);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	#Иначе	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	#КонецЕсли
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ОбластьМакета.Параметры.Основание        		= Шапка.ДоговорКонтрагента;
	
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
	#Если Клиент Тогда
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	#Иначе	
	ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	#КонецЕсли
	ОбластьМакета.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	НомерСтраницы   = 1;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС    = 0;
	ИтогоВсегоСНДС   = 0;
	Ном              = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Ном = Ном + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;		
		
		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			НомерСтраницы	= НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		СуммаСНДС   = (ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, Окр(ВыборкаСтрокТовары.СуммаНДС, 2)));
		СуммаНДС    = Окр(ВыборкаСтрокТовары.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;
		
		Количество	= ВыборкаСтрокТовары.Количество;
		Цена		= ?(Количество = 0, 0, СуммаБезНДС / Количество);
		
		ОбластьМакета.Параметры.Количество	= Количество;
		ОбластьМакета.Параметры.СуммаСНДС	= СуммаСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС	= СуммаБезНДС;
		ОбластьМакета.Параметры.СуммаНДС	= СуммаНДС;
		ОбластьМакета.Параметры.Цена		= Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) +
			?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика), " (" + СокрЛП(ВыборкаСтрокТовары.Характеристика.Наименование) + ")", "");// + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по документу
	ОбластьПодвала.Параметры.Заполнить(Шапка);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	ОбластьПодвала.Параметры.ФИОРуководителя       	= Руководители.РуководительПредставление;
	ОбластьПодвала.Параметры.ФИОГлавБухгалтера     	= Руководители.ГлавныйБухгалтерПредставление;
	ОбластьПодвала.Параметры.ДолжностьРуководителя 	= Руководители.РуководительДолжность;
	
	//// Отпуск товара произвел
	//Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
	//	ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	//	ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);
	//Иначе
	//	ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
	//	ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Шапка.Организация);
	//КонецЕсли;
	//
	//ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	//ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	//ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	//
	//ОбластьПодвала.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
	//ОбластьПодвала.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
	
	ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
	ОбластьПодвала.Параметры.ИтогНДС       = Формат(ИтогоВсегоСНДС - ИтогоСуммаБезНДС, "ЧГ=");
	
	ТабДокумент.Вывести(ОбластьПодвала);
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьТаблицуКПроведениюПоОборотуКоробок(Ссылка, Дата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДока", КонецДня(Дата));
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	ПриходныйОрдерСкладТовары.Номенклатура,
	               |	ПриходныйОрдерСкладТовары.Характеристика,
	               |	ПриходныйОрдерСкладТовары.Количество,
	               |	ЕСТЬNULL(КоличествоВКоробкеСрезПоследних.Количество, 0) КАК КоличествоВКоробке
	               |ИЗ
	               |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоВКоробке.СрезПоследних(&ДатаДока, ) КАК КоличествоВКоробкеСрезПоследних
	               |		ПО ПриходныйОрдерСкладТовары.Номенклатура = КоличествоВКоробкеСрезПоследних.Номенклатура
	               |			И ПриходныйОрдерСкладТовары.Характеристика = КоличествоВКоробкеСрезПоследних.Характеристика
	               |ГДЕ
	               |	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
	               |	И ПриходныйОрдерСкладТовары.Количество <> 0";
				   
	ТабКВозврату = Запрос.Выполнить().Выгрузить();
	ТабКВозврату.Колонки.Добавить("КоличествоКоробок");
	Для Каждого СтрокаТаб Из ТабКВозврату Цикл
		СтрокаТаб.КоличествоКоробок = ?(СтрокаТаб.КоличествоВКоробке = 0, 0, Окр(СтрокаТаб.Количество/СтрокаТаб.КоличествоВКоробке, 3));
	КонецЦикла;
	
	Возврат ТабКВозврату;
	
КонецФункции

Функция ПечатьТОРГ13(МассивСсылок,Параметры) Экспорт
		
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерСклад_М15";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок[0].Ссылка);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерСклад.ДанныеВетСвидетельствСерия КАК Серия,
	|	ПриходныйОрдерСклад.Ссылка,
	//+++АК SHEP 20160815: печать подписей оператора
	|	ПриходныйОрдерСклад.Автор.ФизЛицо КАК ФизЛицоОтправителя,
	|	ПриходныйОрдерСклад.Автор.ФизЛицо.Должность КАК ДолжностьОтправителя,
	|	ПриходныйОрдерСклад.Автор.ФизЛицо.Наименование КАК ФИООтправителя,
	//---АК SHEP 20160815
	|	ПриходныйОрдерСклад.ДанныеВетСвидетельствНомер КАК Номер,
	|	ПриходныйОрдерСклад.ДанныеВетСвидетельствДата КАК Дата
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.Ссылка В(&МассивСсылок)" ;
	
	Результат=Запрос.Выполнить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивСсылок);
	Запрос.УстановитьПараметр("Период",			 МассивСсылок[0].Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК Номер,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.Количество КАК КоличествоМест,
	|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК EдиницаИзмеренияКодПоОКЕИ,
	|	Товары.Номенклатура.id_tov КАК ТоварКод,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * Товары.Количество КАК Сумма,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель,
	|	ЗначенияСвойствОбъектов1.Значение КАК СтранаПроисхождения,
	|	Товары.Характеристика.НаименованиеТовараУПоставщика КАК НаименованиеТовараУПоставщика
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И Товары.Ссылка.Поставщик = ЦеныНоменклатурыСрезПоследних.ТорговаяТочка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО Товары.Характеристика = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.СтранаПроисхождения))
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("ТОРГ13");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьИтогиПоСтранице 	= Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьВсего	 		= Макет.ПолучитьОбласть("Всего");
	
	НомерЛиста = 1;
	ТабДок.Очистить();

	ОбластьЗаголовок.Параметры.Заполнить(Параметры);
	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Параметры.Отправитель, Параметры.Дата);
	ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике);
	
	ОбластьЗаголовок.Параметры.ОтправительВидДеятельности 	= "";
	ОбластьЗаголовок.Параметры.ПолучательВидДеятельности 	= "";
	
	ОбластьЗаголовок.Параметры.ОтправительПодразделение 	= Параметры.Отправитель.НаименованиеПолное;
	ОбластьЗаголовок.Параметры.ПолучательПодразделение 	= Параметры.Получатель.НаименованиеПолное;
	
	ОбластьЗаголовок.Параметры.Дата = Формат(Параметры.Дата,"ДЛФ=DD");
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтогКоличествоМестПоСтранице = 0;
	ИтогоКоличествоМест = 0;
	ИтогоСумма = 0;
	ИтогоСуммаПоСтранице = 0;
	
	КоличествоСтрок = ВыборкаНоменклатура.Количество();
	НомерСтроки = 0;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если ВыборкаНоменклатура.КоличествоМест = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
		КоличествоВУпаковке = 1;
		
		НаименованиеТовара = СокрЛП(ВыборкаНоменклатура.Номенклатура);
		
		//+++ gusd
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)
			И ВРег(НаименованиеТовара) <> ВРег(СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика)) Тогда
			
			НаименованиеТовара = НаименованиеТовара + " (" + СокрЛП(ВыборкаНоменклатура.НаименованиеТовараУПоставщика) + ")";
			
		КонецЕсли;
		//--- gusd
		
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.Производитель) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.Производитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.СтранаПроисхождения) Тогда
			НаименованиеТовара = НаименованиеТовара + ", " + ВыборкаНоменклатура.СтранаПроисхождения;
		КонецЕсли;
		ОбластьСтрока.Параметры.Номенклатура = НаименованиеТовара;
		
		КоличествоМест = Окр(ВыборкаНоменклатура.КоличествоМест/КоличествоВУпаковке,1);
		
		ОбластьСтрока.Параметры.КоличествоВОдномМесте = КоличествоВУпаковке;
		ОбластьСтрока.Параметры.КоличествоМест = КоличествоМест;
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
		МассивВыводимыхОбластей.Добавить(ОбластьИтогиПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьВсего);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
		КонецЕсли;
		
		#Если Клиент Тогда
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда	
		#Иначе	
		Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДок, МассивВыводимыхОбластей) Тогда
		#КонецЕсли
			
			ОбластьИтогиПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтогиПоСтранице.Параметры.ИтогСуммыПоСтранице = ИтогоСуммаПоСтранице;
			ТабДок.Вывести(ОбластьИтогиПоСтранице);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			НомерЛиста = НомерЛиста + 1;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Лист: "+ НомерЛиста;
			ТабДок.Вывести(ОбластьШапкаТаблицы);
			ТабДок.Вывести(ОбластьСтрока);
			ИтогоКоличествоМест = ИтогоКоличествоМест + КоличествоМест;
			ИтогКоличествоМестПоСтранице = 0;
			ИтогоСумма = ИтогоСумма + ВыборкаНоменклатура.Сумма;
			ИтогоСуммаПоСтранице = 0;
			
		Иначе
			
			ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + КоличествоМест;
			ИтогоКоличествоМест = ИтогоКоличествоМест + КоличествоМест;
			ИтогоСумма = ИтогоСумма + ВыборкаНоменклатура.Сумма;
			ИтогоСуммаПоСтранице = ИтогоСуммаПоСтранице + ВыборкаНоменклатура.Сумма;
			ТабДок.Вывести(ОбластьСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличествоМест;
	ОбластьВсего.Параметры.ИтогСуммыВсего = ИтогоСумма;
	
	ТабДок.Вывести(ОбластьВсего);
	
	СтрокаВетСвидетельств="";
	ВыборкаВетСвидетельств = Результат.Выбрать();
	Пока ВыборкаВетСвидетельств.Следующий() Цикл
		Если СокрЛП(ВыборкаВетСвидетельств.Серия)="" И СокрЛП(ВыборкаВетСвидетельств.Номер)="" И НЕ ЗначениеЗаполнено(ВыборкаВетСвидетельств.Дата) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаВетСвидетельств=СтрокаВетСвидетельств+" "+ВыборкаВетСвидетельств.Серия+" - "+ВыборкаВетСвидетельств.Номер+" от "+Формат(ВыборкаВетСвидетельств.Дата,"ДФ=dd.MM.yy")+";";
	КонецЦикла;	
	
	ОбластьПодвал.Параметры.СтрокаВетСвидетельств=СтрокаВетСвидетельств;
	
	//+++АК SHEP 20160815: выводим подпись оператора
	Шапка = Результат.Выбрать();
	Шапка.Следующий();
	
	ФизЛицоОтправителя = Шапка.ФизЛицоОтправителя;
	Если ЗначениеЗаполнено(ФизЛицоОтправителя) Тогда
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, Шапка, "ДолжностьОтправителя");
		ОбластьПодвал.Параметры.ФИООтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицоОтправителя);
		
		Факсимиле = Справочники.Факсимиле.НайтиПоРеквизиту("ФизЛицо", Шапка.ФизЛицоОтправителя);
		Если ЗначениеЗаполнено(Факсимиле) Тогда
			КартинкаПодпись = Факсимиле.Подпись.Получить();
			Если ТипЗнч(КартинкаПодпись) = Тип("Картинка") Тогда
				ОбластьПодвал.Рисунки.ПодписьОтправителя.Картинка = КартинкаПодпись;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//---АК SHEP 20160815

	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьТабДокВетСвидетельства(МассивСсылок,Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка,
	               |	ПриходныйОрдерСкладПрикрепленныеФайлы.Файл
	               |ИЗ
	               |	Документ.ПриходныйОрдерСклад.ПрикрепленныеФайлы КАК ПриходныйОрдерСкладПрикрепленныеФайлы
	               |ГДЕ
	               |	ПриходныйОрдерСкладПрикрепленныеФайлы.Ссылка В(&МассивСсылок)
	               |	И ПриходныйОрдерСкладПрикрепленныеФайлы.ЭтоВетСвидетельство = ИСТИНА";
				   
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерСклад_ВетСвидетельства";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб = Истина;
	
	Макет = Документы.ПриходныйОрдерСклад.ПолучитьМакет("ВетСвидетельство");
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		Область = Макет.ПолучитьОбласть("Картинка");
		Область.Рисунки.D1.Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Выборка.Файл));
		ТабДок.Вывести(Область);
	КонецЦикла;	
	Возврат ТабДок;
	
КонецФункции	

Процедура ОтправитьПисьмоПоставщику(Объект) Экспорт
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	
	СтруктураНовогоПисьма.Вставить("Тема", "Принят товар "+Объект.Поставщик.НаименованиеПолное+" по приходному ордеру №"+Объект.НомерДокументаПоставщика+" от "+Формат(Объект.ДатаДокументаПоставщика,"ДФ=dd.MM.yyyy")+".");
	Для каждого Стр Из Объект.ПрикрепленныеФайлы Цикл
		СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл)));
	КонецЦикла; 
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	Кому = Новый СписокЗначений;

	Запрос = Новый Запрос;
	//Запрос.Текст =                                                                                   
	//	"ВЫБРАТЬ
	//	|	КонтактнаяИнформация.Представление,
	//	|	1 КАК Порядок
	//	|ПОМЕСТИТЬ врем
	//	|ИЗ
	//	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|ГДЕ
	//	|	КонтактнаяИнформация.Объект = &Объект
	//	|	И КонтактнаяИнформация.Тип = &Тип
	//	|	И КонтактнаяИнформация.Вид.Код = ""00021""
	//	|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(10))) <> """"
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	КонтактнаяИнформация.Представление,
	//	|	2
	//	|ИЗ
	//	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|ГДЕ
	//	|	КонтактнаяИнформация.Объект = &Объект
	//	|	И КонтактнаяИнформация.Тип = &Тип
	//	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)
	//	|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(10))) <> """"
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	врем.Представление
	//	|ИЗ
	//	|	врем КАК врем
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	врем.Порядок";
	
	Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	2 КАК Порядок
		|ПОМЕСТИТЬ врем
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид.Код = ""00021""
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(10))) <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	3
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами)
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(10))) <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	1
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО КонтактнаяИнформация.Объект = Контрагенты.Ссылка
		|			И КонтактнаяИнформация.Вид = Контрагенты.ВидКИ_ДляИнформирования
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		//|	И КонтактнаяИнформация.Вид.Код = ""00021""
		|	И (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(10))) <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врем.Представление
		|ИЗ
		|	врем КАК врем
		|
		|УПОРЯДОЧИТЬ ПО
		|	врем.Порядок";

	Запрос.УстановитьПараметр("Объект", Объект.Поставщик);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		
	Иначе
		 Сообщить("Не заполнен адрес электронной почты контрагента!!");
		 Возврат;
	КонецЕсли;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.Представление)) Тогда
			Кому.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.Представление));
		КонецЕсли; 
	КонецЦикла; 
	
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	Макет=Документы.ПриходныйОрдерСклад.ПолучитьМакет("ТаблицаОтправки");
	ОбластьПечати=Макет.ПолучитьОбласть("ШапкаТаблицы");
	//ОбластьПечати.Параметры.Сообщение="В приходе №"+Объект.НомерДокументаПоставщика+" от "+Формат(Объект.ДатаДокументаПоставщика,"ДФ=dd.MM.yyyy")+" были выявлены расходения.
	//| По факту складом "+Объект.Склад+" были приняты позиции в следующем количестве.
	//| Во вложении сопроводительные документы (акт о расхождении, скан накладной, подписанные материально ответственными лицами).";
	//ОбластьПечати.Параметры.СкладомПолучено="Складом "+Объект.Склад+" было получено фактически";
	ТабДок=Новый ТабличныйДокумент;
	ТабДок.Вывести(ОбластьПечати);
	ОбластьПечати=Макет.ПолучитьОбласть("Строка");
	Для каждого Стр Из Объект.Товары Цикл
	    ЗаполнитьЗначенияСвойств(ОбластьПечати.Параметры,Стр);
		ТабДок.Вывести(ОбластьПечати);
	КонецЦикла;
	//ОбластьПечати=Макет.ПолучитьОбласть("Подвал");
	//ОбластьПечати.Параметры.ТекстПодвал="Просьба в кратчайший срок согласовать расхождения и выслать замены документов.";
	//ТабДок.Вывести(ОбластьПечати);
	СтруктураНовогоПисьма.Вставить("Тело",ТабДок);
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Объект);
	    Сообщить("Отправлено письмо с информацией о приходном ордере на "+ВыборкаДетальныеЗаписи.Представление);
		Если Не Объект.ПоставщикОповещен Тогда
			Объект.ПоставщикОповещен=Истина;
			УстановитьПривилегированныйРежим(Истина);
			//Модифицированность=Истина;
			Объект.Записать();
		КонецЕсли; 
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	//УдалитьФайлы(КаталогВременныхФайлов()+"Акт сверки и заказы.epf");
КонецПроцедуры
 
Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма,Объект)  Экспорт
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	СпАдресов=Новый СписокЗначений;
	Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
		МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение,";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СпАдресов.Добавить(Сокрлп(Эл));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	Письмо.Тема = СтруктураНовогоПисьма.Тема;
	Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
	Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
	Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
	
	ТабДок=СтруктураНовогоПисьма.Тело;
	ВремФайл = ПолучитьИмяВременногоФайла("htm");
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль = Найти(Текст, "<STYLE");
	КонецБлокаСтиль = Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело = Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС + ТекстСтиль + Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; border = 1");
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = 	"В приходе №"+Объект.НомерДокументаПоставщика+" от "+Формат(Объект.ДатаДокументаПоставщика,"ДФ=dd.MM.yyyy")+" были выявлены расхождения.
	|По факту складом "+Объект.Склад+" были приняты позиции в следующем количестве.
	|Во вложении сопроводительные документы (акт о расхождении, скан накладной), подписанные материально ответственными лицами.
	|Складом "+Объект.Склад.Владелец+" было получено фактически:";
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	ТекстСообщения.Текст     = ТекстПолный;
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	
	ТекстСообщения = Письмо.Тексты.Добавить(); 
	//ТекстСообщения.Текст     = 	"Просьба в кратчайший срок согласовать расхождения и выслать замены документов.";
	ТекстСообщения.Текст     = "<HTML>
		|<HEAD>
		|		<TITLE>Просьба </Title>
		|</HEAD>
		|<BODY>
		|<H1><b><font face=""Academy"" color=""Red"" size=5>Просьба в кратчайший срок согласовать расхождения и выслать замены документов. </font></b></H1>
		|</BODY>
		|</HTML>";
	
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	
	Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл
		Письмо.Вложения.Добавить(Эл1.Значение.ИмяФайла);
	КонецЦикла;
	
	Для каждого Адрес Из СпАдресов Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес           = Адрес.Значение;
	КонецЦикла;
	//МейлБух=УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Объект.Поставщик.ОсновнойБухгалтерПокупателя.ФизЛицо);
	//Если ЗначениеЗаполнено(МейлБух) Тогда
	//	Получатель = Письмо.Копии.Добавить();
	//	Получатель.Адрес           = МейлБух;
	//КонецЕсли; 
	Почта.Послать(Письмо);
	Почта.Отключиться();
КонецПроцедуры

//+++ KOPA 27.11.2017 [ИП-00017264.02]
Функция ВыводитьНадпись_ЕстьТоварыКВозврату(Ссылка)
	Продолжаем = (ЗначениеЗаполнено(Ссылка.Склад) и ЗначениеЗаполнено(Ссылка.Поставщик));
	
	Если Не Продолжаем Тогда
		Возврат Ложь;	
	КонецЕсли;	

	Возврат ЕстьТоварыПоставщикаНаСкладеВозврата(Ссылка, Ссылка.Дата);
КонецФункции //--- KOPA

//+++ KOPA 27.11.2017 [ИП-00017264.02]
Функция ЕстьТоварыПоставщикаНаСкладеВозврата(Данные, Дата) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ тХарактеристикиПоставщика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &СвойствоПоставщик)
		|			И (ЗначенияСвойствОбъектов.Значение = &Поставщик)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныПоставщиковСрезПоследних.Характеристика
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		|			&Период,
		|				Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыНаСкладахОстатки.Характеристика
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Период,
		|			Склад = &СкладВозврата
		|				И Характеристика В
		|					(ВЫБРАТЬ
		|						тХарактеристикиПоставщика.Характеристика
		|					ИЗ
		|						тХарактеристикиПоставщика КАК тХарактеристикиПоставщика)) КАК ТоварыНаСкладахОстатки";
	
	УстановитьПривилегированныйРежим(Истина);
	СкладВозврата = Обработки.АК_ОбработатьВозвратТовара.Создать().ОпределитьСкладПолучательПоСтруктурнойЕдинице(Данные.Склад);
	
	Запрос.УстановитьПараметр("СвойствоПоставщик", ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
	Запрос.УстановитьПараметр("Поставщик", Данные.Поставщик);
	Запрос.УстановитьПараметр("СкладВозврата", СкладВозврата);
	Запрос.УстановитьПараметр("Период", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьТовары = Не РезультатЗапроса.Пустой();
	
	Возврат ЕстьТовары;
КонецФункции//--- KOPA

//+++АК LAGP 2018.04.28 ИП-00018531 Исправить вывод организации в печатной форме М-15 (берется организация из договора)
Функция ПолучитьДоговорКонтрагента(мКонтрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", мКонтрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ДоговорыКонтрагентов.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка1 = РезультатыЗапроса[0].Выбрать();
	Если Выборка1.Следующий() Тогда
		Если Выборка1.Количество > 0 Тогда
			Если Выборка1.Количество > 1
				И НЕ мКонтрагент.ОсновнойДоговорКонтрагента.пустая() Тогда
				Возврат мКонтрагент.ОсновнойДоговорКонтрагента
			КонецЕсли;
			
			Выборка2 = РезультатыЗапроса[1].Выбрать();
			Выборка2.Следующий();
			Возврат Выборка2.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

// Проверяет наличие непривязанных ВСД по документу +++АК mika 2018.11.14 ИП-00020355
//
// Параметры:
// ДокументСсылка  - <Тип.ДокументСсылка.ПриходныйОрдерСклад> - Ссылка на документ
// АдресХранилища  - <Тип.Строка> - Адрес хранилища результата
//
Процедура ЕстьНепривязанныеВСД(ДокументСсылка, АдресХранилища)Экспорт
	
	ПараметрыОтбора = Новый Массив;
	ОбменССистемойВетисКлиентСервер.ДобавитьПараметрОтбора(ПараметрыОтбора, "ДокументПоступления", ВидСравнения.Равно, ДокументСсылка);
	
	НастройкиСопоставления = Новый Структура();
	НастройкиСопоставления.Вставить("СопоставлениеОтправитель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеПолучатель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеСтатусВСД", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеДатаПроизводства", Истина);		
	
	КоличествоНепривязанныхВСД = ОбменССистемойВетис.ПолучитьСопоставленныеДокументыПоступленияИВСД(ПараметрыОтбора, НастройкиСопоставления).Количество();
	
	Если КоличествоНепривязанныхВСД > 0 Тогда
		ПоместитьВоВременноеХранилище(Истина, АдресХранилища);
		Возврат;
	КонецЕсли; 
	
	НастройкиСопоставления = Новый Структура();
	НастройкиСопоставления.Вставить("СопоставлениеОтправитель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеПолучатель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеСтатусВСД", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеНомерТТН", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеДатаТТН", Истина);
	
	КоличествоНепривязанныхВСД = ОбменССистемойВетис.ПолучитьСопоставленныеДокументыПоступленияИВСД(ПараметрыОтбора, НастройкиСопоставления).Количество();
	
	ПоместитьВоВременноеХранилище(КоличествоНепривязанныхВСД > 0, АдресХранилища);

КонецПроцедуры


#Область ДвиженияДокумента

//+++АК LATV 2018.06.23 ИП-00018971
Функция ДвиженияДокумента(Ссылка) Экспорт

	ДвиженияДокумента = Новый Структура();
	ДвиженияДокумента.Вставить("Финансовый", СформироватьДвижения_Финансовый(Ссылка));
	
	Возврат ДвиженияДокумента;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Функция СформироватьДвижения_Финансовый(Ссылка) Экспорт

	// Инициализация
	Отказ = Ложь;
	
	ДвиженияФин = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	
	// Получение данных документа
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, Дата, Организация");
	
	// Формирование движений
	
	//обработаем движения корректирующих записей по инвентаризации по регистру бухгалтерии
	ОтразитьДвиженияБухПоКорректировкам(ДанныеДокумента, ДвиженияФин, Отказ);
	//+++АК BELN 2018.11.07 ИП-00020351      
	ОргИзДок=ДанныеДокумента.Организация;	
	//---АК BELN 2018.11.07 
	
	// Итоговые действия с движениями
	ОрганизацияВкусВилл = ОбщегоНазначенияПовтИсп.ВкусВилл(НачалоДня(ДанныеДокумента.Дата)); // Начало дня для кеширования
	//+++АК BELN 2018.11.07 ИП-00020351      
	ОрганизацияВкусВилл=?(ЗначениеЗаполнено(ОргИзДок),ОргИзДок,ОрганизацияВкусВилл);	
	//---АК BELN 2018.11.07 
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(ДвиженияФин, ОрганизацияВкусВилл);
	
	Если ДанныеДокумента.Дата >= Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		тзНеразделямыеКомплекты = Товародвижение.АК_РазобратьКомплектыВДвиженияхПо41Счёту(ДвиженияФин, Ссылка);
		
		Если тзНеразделямыеКомплекты.Количество() <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Проведение документа невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,, Отказ);
			Для Каждого Стр Из тзНеразделямыеКомплекты Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Комплект ""%1"" невозможно разбить на составляющие из-за нулевого количества всех составляющих комплекта'")
					, Стр["Наименование"]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение результата
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДвижений = ДвиженияФин.Выгрузить();
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Возврат ТаблицаДвижений;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Процедура ОтразитьДвиженияБухПоКорректировкам(ДанныеДокумента, ДвиженияФин, Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	*,
		|	ISNULL(ТоварыНаСкладах.Номенклатура.ТипТовара, ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.ПустаяСсылка)) КАК НоменклатураТипТовара,
		|	ISNULL(ТоварыНаСкладах.Склад.Владелец, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СкладВладелец,
		|	ISNULL(ТоварыНаСкладах.Склад.Владелец.СторонняяПереработка, Ложь) КАК СкладВладелецСторонняяПереработка
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.Регистратор = &Регистратор");
	Запрос.УстановитьПараметр("Регистратор", ДанныеДокумента.Ссылка);
	Корректировки = Запрос.Выполнить().Выгрузить();
	
	ТабСебестоимости = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(Корректировки.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
	ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(Корректировки.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатериалы = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02	 
	СчетПрочиеМатериалы = ПланыСчетов.Финансовый.ПрочиеМатериалы;
	
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(Корректировки.ВыгрузитьКолонку("Номенклатура"), ДанныеДокумента.Дата);	
	МассивНом = Корректировки.ВыгрузитьКолонку("Номенклатура"); 
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, ДанныеДокумента.Дата);
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	//---АК Susk (Суслин К.В.) 
	
	Для Каждого Движение Из Корректировки Цикл
		Если НЕ ЗначениеЗаполнено(Движение.КорректировкаПоИнвентаризации) Тогда
			Продолжить;
		КонецЕсли;
		ДатаДвижения = Движение.КорректировкаПоИнвентаризации.Дата;
		КолвоКорректировка = Движение.Количество * ?(Движение.ВидДвижения = ВидДвиженияНакопления.Расход, -1, 1);		
		
		//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02		
		СтрокаСчетУчета = СоответствиеНоменклатурыИСчета.Получить(Движение.Номенклатура);			
		
		Если СтрокаСчетУчета.СчетУчета <> СчетТовары И СтрокаСчетУчета.СчетУчета <> СчетМатериалы И СтрокаСчетУчета.СчетУчета <> СчетПрочиеМатериалы Тогда
			Продолжить;
		КонецЕсли;		
		
		Если СтрокаСчетУчета.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
			
			НайдЗначенияРеквизитов = ЗначенияРеквизитовНом.Получить(Движение.Номенклатура);
		
			Если НайдЗначенияРеквизитов["ВидНоменклатуры"] <> Перечисления.ВидыНоменклатуры.Материал Тогда
				Продолжить;
			Иначе	
				Если НайдЗначенияРеквизитов["РекламныйМатериал"] ИЛИ НайдЗначенияРеквизитов["НеУчитыватьВЗакрытииМесяца"] Тогда		
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли; 
		//---АК Susk (Суслин К.В.)
		
		Если КолвоКорректировка < 0 Тогда
			
			Если Движение.СкладВладелецСторонняяПереработка Тогда
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиПроизводителей, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиСырьяПроизводителей, ДатаДвижения);
				КонецЕсли;
			Иначе
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиУпаковки, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_Излишки, ДатаДвижения);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
				
				ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Движение.СкладВладелец, ДатаДвижения);
				
				ПроводкаНедостачи = ДвиженияФин.Добавить();
				
				ПроводкаНедостачи.Период 		= ДатаДвижения;
				ПроводкаНедостачи.НомерЖурнала	= "ТД";
				ПроводкаНедостачи.Содержание	= "Недостача товара";
				
				// Дт
				ПроводкаНедостачи.СчетДт 							= СтруктураНастроек.Счет;
				ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаНедостачи.СубконтоДт.ЦФО					= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				// Кт
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(Движение.Номенклатура, "Номенклатура"); 
				//---АК Susk (Суслин К.В.) 
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаНедостачи.СчетКт 							= СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаНедостачи.СубконтоКт.Товары					= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.Материалы  			= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.Склады					= Движение.Склад;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.Материалы  			= Движение.Номенклатура;
					КонецЕсли;	
				Иначе	
					Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаНедостачи.СчетКт 							= СчетМатериалы;
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.Материалы  			= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.Склады					= Движение.Склад;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаНедостачи.СчетКт 							= СчетТовары;
						ПроводкаНедостачи.КоличествоКт 						= КолвоКорректировка * (-1);
						ПроводкаНедостачи.СубконтоКт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаНедостачи.СубконтоКт.Товары					= Движение.Номенклатура;
						ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;	
				
				ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
				СтрСебестоимость = ТабСебестоимости.Найти(Движение.Номенклатура, "Номенклатура");
				ПроводкаНедостачи.Сумма = ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
				
			КонецЕсли;
			
		// Излишки
		ИначеЕсли КолвоКорректировка > 0 Тогда
			
			Если Движение.СкладВладелецСторонняяПереработка Тогда
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиПроизводителей, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиСырьяПроизводителей, ДатаДвижения);
				КонецЕсли;
			Иначе
				Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_НедостачиУпаковки, ДатаДвижения);
				Иначе
					СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.Инвентаризация_Недостачи, ДатаДвижения);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
				
				ПроводкаИзлишки = ДвиженияФин.Добавить();
				
				ПроводкаИзлишки.Период 			= ДатаДвижения;
				ПроводкаИзлишки.НомерЖурнала	= "ТД";
				ПроводкаИзлишки.Содержание		= "Излишки товара";
				
				// Дт
				
				//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
				//СтрокаСчетУчета = ТабСчетаУчета.Найти(Движение.Номенклатура, "Номенклатура");
				//---АК Susk (Суслин К.В.) 
				
				Если СтрокаСчетУчета <> Неопределено
					И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
					ПроводкаИзлишки.СчетДт 							= СтрокаСчетУчета.СчетУчета;
					Если СтрокаСчетУчета.СчетУчета = СчетТовары Тогда
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаИзлишки.СубконтоДт.Товары				= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					ИначеЕсли СтрокаСчетУчета.СчетУчета = СчетМатериалы Тогда
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.Склады				= Движение.Склад;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
					Иначе
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= Движение.Номенклатура;
					КонецЕсли;	
				Иначе	
					Если Движение.НоменклатураТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
						
						ПроводкаИзлишки.СчетДт 							= СчетМатериалы;
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.Материалы  			= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.Склады				= Движение.Склад;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					Иначе
						
						ПроводкаИзлишки.СчетДт 							= СчетТовары;
						ПроводкаИзлишки.КоличествоДт 					= КолвоКорректировка;
						ПроводкаИзлишки.СубконтоДт.МестаХранения  		= Движение.СкладВладелец;
						ПроводкаИзлишки.СубконтоДт.Товары				= Движение.Номенклатура;
						ПроводкаИзлишки.СубконтоДт.СтатьиТовародвижения = СтруктураНастроек.СтатьяДвиженияТоваров;
						
					КонецЕсли;
				КонецЕсли;	
				
				ЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(Движение.СкладВладелец, ДатаДвижения);
				
				// Кт
				ПроводкаИзлишки.СчетКт = СтруктураНастроек.Счет;
				ПроводкаИзлишки.СубконтоКт.ТорговыеТочки 			= СтруктураНастроек.СтруктурнаяЕдиница;
				ПроводкаИзлишки.СубконтоКт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
				ПроводкаИзлишки.СубконтоКт.ЦФО 						= ?(ЗначениеЗаполнено(СтруктураНастроек.ЦФО), СтруктураНастроек.ЦФО, ЦФО);
				
				ПроводкаИзлишки.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
				СтрСебестоимость = ТабСебестоимости.Найти(Движение.Номенклатура, "Номенклатура");
				ПроводкаИзлишки.Сумма = ПроводкаИзлишки.КоличествоДт * СтрСебестоимость.Себестоимость;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти
