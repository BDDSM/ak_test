
Перем ТекДата;
Перем ТабИзмененийВДвижениях;
Перем СтараяОперация_Оборудование;			//нельзя в проведенных д-тах "не оборудования" менять на оборудование
Перем СтруктурныеЕдиницыСторонняяПереработка; //+++АК SHEP 2018.05.06 ИП-00018453
Перем ЭтоСторонняяПереработка; //+++АК SHEP 2018.05.06 ИП-00018453
//+++АК BELN 2018.10.11 ИП-00010132
Перем НеПроверятьДатуЗапретаРедактирования Экспорт;
//---АК BELN 2018.10.11 

#Область ПрограммныйИнтерфейс

Функция ПолучитьДатуПоступленияПоВремениПрихода() Экспорт
	
	ДатаПоступления = ЭтотОбъект.Дата;
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаВремяЗаездаМашины) Тогда
		ДатаПоступления = ЭтотОбъект.ДатаВремяЗаездаМашины;
	КонецЕсли;	
	
	ЧасовОтНачалаДня = (ДатаПоступления - НачалоДня(ДатаПоступления)) / 3600;// до 6ти - заказы в текущую дату, после 6ти на завтра.
	Если ЧасовОтНачалаДня >= 6 Тогда
		ДатаПоступления = КонецДня(ДатаПоступления) + 1;
	Иначе
		ДатаПоступления = НачалоДня(ДатаПоступления);
	КонецЕсли;
	
    Возврат ДатаПоступления;
	
КонецФункции	

//+++АК SHEP 2018.04.16 ИП-00018359: доработал алгоритм, меняем "ЗаказПоступилПолностью"
Процедура ЗакрытьОтработанныеЗаказы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоКонечныйОстаток,
	|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоПриход,
	|	ЗаказыПоставщикамОстаткиИОбороты.Номенклатура
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
	|			,
	|			&НаДату,
	|			,
	|			,
	|			ЗаказПоставщику В (&ЗаказыПоставщикам)
	//+++АК SHEP 2018.04.16 ИП-00018359
	//|				И НЕ ЗаказПоставщику.ЗаказПоступилПолностью) КАК ЗаказыПоставщикамОстаткиИОбороты
	|			) КАК ЗаказыПоставщикамОстаткиИОбороты
	//---АК SHEP 2018.04.16
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику
	|ИТОГИ ПО
	|	ЗаказПоставщику";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("НаДату",Дата(1,1,1));
	Запрос.УстановитьПараметр("ЗаказыПоставщикам",ЭтотОбъект.Товары.ВыгрузитьКолонку("ЗаказПоставщику"));
	ВыборкаЗаказов=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказов.Следующий() Цикл
		
		ТекЗаказПоставщику = ВыборкаЗаказов.ЗаказПоставщику;
		Если НЕ ЗначениеЗаполнено(ТекЗаказПоставщику) Тогда
			Продолжить;
		КонецЕсли;	
		
		МожноЗакрытьЗаказ = Истина;
		МожноЗакрытьЗаказБыло = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекЗаказПоставщику, "ЗаказПоступилПолностью"); //+++АК SHEP 2018.04.16 ИП-00018359
		
		Выборка=ВыборкаЗаказов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоПриход=0 Тогда
				продолжить;
			КонецЕсли;	
			Если Выборка.КоличествоКонечныйОстаток / Выборка.КоличествоПриход > 0.1 Тогда
				МожноЗакрытьЗаказ=Ложь;
				прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		//+++АК SHEP 2018.04.16 ИП-00018359
		//Если МожноЗакрытьЗаказ Тогда
		//	Док = ВыборкаЗаказов.ЗаказПоставщику.ПолучитьОбъект();
		//	Док.ЗаказПоступилПолностью = Истина;
		Если МожноЗакрытьЗаказ <> МожноЗакрытьЗаказБыло Тогда
			Док = ТекЗаказПоставщику.ПолучитьОбъект();
			Док.ЗаказПоступилПолностью = МожноЗакрытьЗаказ;
		//---АК SHEP 2018.04.16
			Док.Записать(режимЗаписиДокумента.Запись);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ИзмененияДвижений.Очистить();
	ЭтотОбъект.ВыполнятьДвиженияДатойДокумента = Ложь;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		ЭтотОбъект.Оборудование.Очистить();
	КонецЕсли;
	
	ЭтотОбъект.ПриемкаТерминаломЗакончена 	= Ложь;
	ЭтотОбъект.ПровереноТехнологом 			= Ложь;
	
	ДатаПрямойПоставкиНаМагазины = Неопределено;
	Отменен = Ложь; //+++АК MIND 2018.01.26 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйОрдерСклад") Тогда
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Перемещение Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ВозвратПоставщику Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВПереработку Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки;	
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки;	
		Иначе
			//ВызватьИсключение "Приходный ордер вводится на основании расходного ордера со статусом ""Перемещение на складе"""; 	
		КонецЕсли;
		
		ЭтотОбъект.Склад			= ДанныеЗаполнения.Склад;
		//ЭтотОбъект.Получатель		= ДанныеЗаполнения.Получатель;
		ЭтотОбъект.Автор			= ПараметрыСеанса.ТекущийПользователь;
		ЭтотОбъект.Основание		= ДанныеЗаполнения;   
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки Тогда
			ЭтотОбъект.Поставщик	= ДанныеЗаполнения.Получатель;
		Иначе	
			ЭтотОбъект.Поставщик	= ДанныеЗаполнения.Склад.Владелец;
		КонецЕсли;	
		ЭтотОбъект.ДатаДокументаПоставщика	= ДанныеЗаполнения.Дата;
		ЭтотОбъект.НомерДокументаПоставщика	= ДанныеЗаполнения.Номер;
		Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,, "НомерСтроки");
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаСклад") Тогда
		
		ЭтоОборудованиеОтПоставщика	= ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика;
		ЭтоЗаявкаНаВозвратТовара	= ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратТовара;
		
		Если НЕ (ЭтоОборудованиеОтПоставщика
					ИЛИ ЭтоЗаявкаНаВозвратТовара) Тогда
			ВызватьИсключение "Заявка имеет вид операции """ + Строка(ДанныеЗаполнения.ВидОперации) + """" + Символы.ПС +
								"Создание приходного ордера по ней не предусмотрено"; 	
		КонецЕсли;
		
		Если ЭтоОборудованиеОтПоставщика Тогда
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика;
		ИначеЕсли ЭтоЗаявкаНаВозвратТовара Тогда	
			ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки;
		КонецЕсли;
		
		ЭтотОбъект.Поставщик	= ДанныеЗаполнения.Поставщик;
		ЭтотОбъект.Склад		= ДанныеЗаполнения.Склад;
		ЭтотОбъект.Основание	= ДанныеЗаполнения;
		
		Если ЭтоЗаявкаНаВозвратТовара Тогда
			Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока	= ЭтотОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,, "НомерСтроки")
			КонецЦикла;	
		Иначе		
			Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Оборудование Цикл
				НоваяСтрока	= ЭтотОбъект.Оборудование.Добавить();
				НоваяСтрока.ЗаявкаНаСклад 		= ДанныеЗаполнения;
				Если ЭтоОборудованиеОтПоставщика Тогда
					НоваяСтрока.Номенклатура	= СтрокаТЧ.Номенклатура;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	//+++ АК Pans 20150119
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаПоставкуУпаковки") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика;
		Поставщик	= ДанныеЗаполнения.Поставщик;
		Склад		= ДанныеЗаполнения.Склад;
		Основание	= ДанныеЗаполнения;
		Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока	= ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,, "НомерСтроки")
		КонецЦикла;
	//--- АК Pans 20150119
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику")
			И ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовНаПоставку.ОжидаемДляРаспределения Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика;
		Поставщик	= ДанныеЗаполнения.Поставщик;
		Склад		= ДанныеЗаполнения.Склад.СкладТорговогоЗала;
		Основание	= ДанныеЗаполнения;
		//+++АК KIRN 2018.03.28 ИП-00018240
		Организация = ДанныеЗаполнения.Организация;
		//---АК KIRN 
		
		//+++АК mind 2017-02-15 механизм прямых поставок на магазины
		Если ДанныеЗаполнения.ЭтоПрямаяПоставкаНаМагазины Тогда
			ДатаПрямойПоставкиНаМагазины = ДанныеЗаполнения.ДатаПоступления;
			Склад = Справочники.Склады.НайтиПоКоду("000001835"); //склад прямой поставки
			ДатаДокументаПоставщика = ДанныеЗаполнения.ДатаПоступления;
			НомерДокументаПоставщика = "б/н";
			ДатаЗаезда = ДанныеЗаполнения.ДатаПоступления;
			ВремяЗаездаМашины = ДанныеЗаполнения.ДатаПоступления + 8*60*60;
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПредзаказТовары.Номенклатура.НеВедетсяУчетПоХарактеристикам,
			               |	ПредзаказТовары.Номенклатура,
			               |	ПредзаказТовары.Характеристика,
			               |	ПредзаказТовары.ЕдиницаИзмерения,
			               |	СУММА(ПредзаказТовары.Количество) КАК Количество
			               |ИЗ
			               |	Документ.Предзаказ.Товары КАК ПредзаказТовары
			               |ГДЕ
			               |	ПредзаказТовары.Ссылка В
			               |			(ВЫБРАТЬ
			               |				ЗаказПоставщикуПредзаказы.Документ
			               |			ИЗ
			               |				Документ.ЗаказПоставщику.Предзаказы КАК ЗаказПоставщикуПредзаказы
			               |			ГДЕ
			               |				ЗаказПоставщикуПредзаказы.Ссылка = &Заказ)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПредзаказТовары.Номенклатура.НеВедетсяУчетПоХарактеристикам,
			               |	ПредзаказТовары.Номенклатура,
			               |	ПредзаказТовары.Характеристика,
			               |	ПредзаказТовары.ЕдиницаИзмерения";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаДоб = Товары.Добавить();
				СтрокаДоб.Номенклатура 		= Выборка.Номенклатура;
				СтрокаДоб.Характеристика 	= ?(Выборка.НоменклатураНеВедетсяУчетПоХарактеристикам, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Выборка.Характеристика);
				СтрокаДоб.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
				СтрокаДоб.Количество 		= Выборка.Количество;
				СтрокаДоб.ЗаказПоставщику	= ДанныеЗаполнения;
			КонецЦикла;	
		Иначе
			ТабТовары = Документы.ПриходныйОрдерСклад.ПолучитьТоварыПоЗаказамПоставщику(ДанныеЗаполнения, ДанныеЗаполнения.Склад.СкладТорговогоЗала, ДанныеЗаполнения.Поставщик, ЭтотОбъект.Дата);
			Для Каждого СтрокаТаб Из ТабТовары Цикл
				СтрокаДоб = ЭтотОбъект.Товары.Добавить();
				СтрокаДоб.Номенклатура 		= СтрокаТаб.Номенклатура;
				СтрокаДоб.Характеристика 	= ?(СтрокаТаб.Номенклатура.НеВедетсяУчетПоХарактеристикам, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаТаб.Характеристика);
				СтрокаДоб.ЕдиницаИзмерения 	= СтрокаТаб.ЕдиницаИзмерения;
				СтрокаДоб.Количество 		= СтрокаТаб.Количество;
				СтрокаДоб.ЗаказПоставщику	= ДанныеЗаполнения;
			КонецЦикла;
		КонецЕсли;	
		//---АК mind 2017-02-15
		
		СтрокаДоб = ЭтотОбъект.ЗаказыПоставщику.Добавить();
		СтрокаДоб.Документ = ДанныеЗаполнения;
		
	//+++ AK obue 20160331 	ИП-00012299
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаПечатьЭтикетки") Тогда
		
		//
		Если ДанныеЗаполнения.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано Тогда
			
			//
			ЭтотОбъект.ВидОперации 	= Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика;
			ЭтотОбъект.Поставщик	= ДанныеЗаполнения.Исполнитель;
			ЭтотОбъект.Основание	= ДанныеЗаполнения;
			ЭтотОбъект.Дата 		= ТекущаяДата();
			
			//
			ЭтотОбъект.Склад 		= ДанныеЗаполнения.Склад;
			Если Не ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
				ЭтотОбъект.Склад = Справочники.Склады.НайтиПоРеквизиту("ИД", 727); //Склад_Упаковки_Котляково
			КонецЕсли; 
			
			//
			Организация = ДанныеЗаполнения.Организация;
			Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Склад) Тогда
				Организация = Склад.Организация;
			КонецЕсли;	
			
			//
			ТЗ = "ВЫБРАТЬ
			     |	Таблица.Номенклатура,
			     |	Таблица.Заявка,
			     |	Таблица.КоличествоКПроизводствуОстаток
			     |ИЗ
			     |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(, Заявка = &Заявка) КАК Таблица
			     |ГДЕ
			     |	Таблица.КоличествоКПроизводствуОстаток > 0";
				 
			//
			ПЗ = Новый ПостроительЗапроса;
			ПЗ.Текст = ТЗ;
			
			//
			ПЗ.Параметры.Вставить("Заявка", ДанныеЗаполнения);
			
			//
			ПЗ.Выполнить();
			
			//
			Выборка = ПЗ.Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				//
				НоваяСтрока = Товары.Добавить();
				
				//
				НоваяСтрока.Номенклатура 		= Выборка.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения 	= НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
				НоваяСтрока.Количество 			= Выборка.КоличествоКПроизводствуОстаток;
				НоваяСтрока.ЗаявкаНаПроизводствоПерсональнойУпаковки = Выборка.Заявка;
				
			КонецЦикла;
			
		Иначе
			
			//
			СтандартнаяОбработка = Ложь;
			Сообщить("Заявка должна находиться в статусе <Обработано>");
			
		КонецЕсли;	
		
		
	// --- AK	
	
	//+++АК SHEP 20160628
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.МП_ЗадачаТехнолога") Тогда //И НЕ ДанныеЗаполнения.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.СписаниеСМагазиновЗаНашСчёт Тогда
		
		//+++VERN
		//УстановитьПривилегированныйРежим(Истина);
		//СуществующийОрдер=Документы.МП_ЗадачаТехнолога.ПолучитьОрдерНаВозврат(ДанныеЗаполнения);
		//Если ЗначениеЗаполнено(СуществующийОрдер) и СуществующийОрдер.Проведен тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Уже существует ордер "+СуществующийОрдер);
		//КонецЕсли;
		//---VERN
		
		ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки;
		//Поставщик	= ДанныеЗаполнения.ДокументОснование.Поставщик;
		Поставщик	= ДанныеЗаполнения.Магазин;
		
		УстановитьПривилегированныйРежим(Истина);
		Автор= глЗначениеПеременной("глТекущийПользователь");
		УстановитьПривилегированныйРежим(Ложь);
		
		Маркер="#создан автоматически";
		Если Найти(Комментарий,Маркер)=0 тогда
			Комментарий=сокрлп(сокрлп(Комментарий)+" "+Маркер+" к "+ДанныеЗаполнения);
		КонецЕсли;
		
		//+++VERN
		//Склад		= ДанныеЗаполнения.Склад;

		попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.СкладПеремещения как Склад
			|ИЗ
			|	РегистрСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов КАК СоответствиеТиповЗаданийТехнологаМагазинамИСкладов
			|ГДЕ
			|	СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ТипЗадания.Ссылка = &ТипЗадания";

		Запрос.УстановитьПараметр("ТипЗадания", ДанныеЗаполнения.ТипЗадания);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() тогда
			Склад=ВыборкаДетальныеЗаписи.Склад;
		КонецЕсли;;
		исключение конецпопытки;
	
		Если НЕ ЗначениеЗаполнено(Склад) и ДанныеЗаполнения.ТипЗадания = Перечисления.ТипыЗаданийТехнологаМагазинам.ВозвратНаСклад 
			и Найти(врег(ДанныеЗаполнения.Склад.Наименование),"КАВКАЗ")>0 
		тогда
			Склад=Справочники.Склады.НайтиПоНаименованию("Кавказский");
		КонецЕсли;
		
		//+++АК KIRN 2018.04.17  ИП-00018209^01
		Организация = Склад.Организация;
		//---АК KIRN 
		
		ЭтотОбъект.Товары.Очистить();
		
		Основание	= ДанныеЗаполнения;
		
		ТабТовары = ДанныеЗаполнения.ПараметрыЗадачи;
		Для Каждого СтрокаТаб Из ТабТовары Цикл
			Если СтрокаТаб.Количество<>0 тогда
				СтрокаДоб = ЭтотОбъект.Товары.Добавить();
				СтрокаДоб.Номенклатура 		= СтрокаТаб.Номенклатура;
				СтрокаДоб.Характеристика 	= ?(СтрокаТаб.Номенклатура.НеВедетсяУчетПоХарактеристикам, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаТаб.ХарактеристикаНоменклатуры);
				СтрокаДоб.ЕдиницаИзмерения 	= СтрокаТаб.ЕдиницаИзмерения;
				СтрокаДоб.Количество 		= СтрокаТаб.Количество;
				СтрокаДоб.ДатаПроизводства	= СтрокаТаб.ДатаПроизводства;
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		//---VERN
		
	//---АК SHEP 20160628
	
	//+++АК SHEP 20170511 ИП-00015361
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗадачаТехнологаНаДегустацию") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки;
		Поставщик	= ДанныеЗаполнения.Магазин;
		Основание = ДанныеЗаполнения;
		Автор = глЗначениеПеременной("глТекущийПользователь");
		Склад = РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ВернутьСкладПеремещения("ЗадачаТехнологаНаДегустацию");
		
		Маркер = "#создан автоматически";
		Если Найти(Комментарий, Маркер) = 0 Тогда
			Комментарий = СокрЛП(СокрЛП(Комментарий) + " " + Маркер + " к " + ДанныеЗаполнения);
		КонецЕсли;
		
		ЭтотОбъект.Товары.Очистить();
		ТабТовары = ДанныеЗаполнения.Оценки;
		Для Каждого СтрокаТаб Из ТабТовары Цикл
			Если СтрокаТаб.Количество = 0 Тогда Продолжить; КонецЕсли;
			
			СтрокаДоб = ЭтотОбъект.Товары.Добавить();
			СтрокаДоб.Номенклатура 		= ДанныеЗаполнения.Номенклатура;
			СтрокаДоб.Характеристика 	= ДанныеЗаполнения.ХарактеристикаНоменклатуры;
			СтрокаДоб.ЕдиницаИзмерения 	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаДоб.Номенклатура, "ЕдиницаХраненияОстатков");
			СтрокаДоб.Количество 		= СтрокаТаб.Количество;
			СтрокаДоб.ДатаПроизводства	= СтрокаТаб.ДатаПроизводства;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	//---АК SHEP 20170511
	//+++АК SHEP 20170512 ИП-00015398.01
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗадачаНаДегустациюНовинки") Тогда
		
		Если ДанныеЗаполнения.Количество <> 0 Тогда
			УстановитьПривилегированныйРежим(Истина);
			ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки;
			Поставщик	= ДанныеЗаполнения.Магазин;
			Основание = ДанныеЗаполнения;
			Автор = глЗначениеПеременной("глТекущийПользователь");
			Склад = РегистрыСведений.СоответствиеТиповЗаданийТехнологаМагазинамИСкладов.ВернутьСкладПеремещения("ЗадачаНаДегустациюНовинки");
			
			Маркер = "#создан автоматически";
			Если Найти(Комментарий, Маркер) = 0 Тогда
				Комментарий = СокрЛП(СокрЛП(Комментарий) + " " + Маркер + " к " + ДанныеЗаполнения);
			КонецЕсли;
			
			ЭтотОбъект.Товары.Очистить();
			СтрокаДоб = ЭтотОбъект.Товары.Добавить();
			СтрокаДоб.Номенклатура 		= ДанныеЗаполнения.Номенклатура;
			СтрокаДоб.Характеристика 	= ДанныеЗаполнения.ХарактеристикаНоменклатуры;
			СтрокаДоб.ЕдиницаИзмерения 	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаДоб.Номенклатура, "ЕдиницаХраненияОстатков");
			СтрокаДоб.Количество 		= ДанныеЗаполнения.Количество;
			СтрокаДоб.ДатаПроизводства	= Дата(1,1,1);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	//---АК SHEP 20170512
	
	КонецЕсли;
	
КонецПроцедуры

//+++АК LATV 2018.10.18 ИП-00020107
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отменен Тогда
		ОжидаемыйПриход = Ложь;
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПоступлениеТоваровУслугПриходныеОрдера.Ссылка КАК Поступление
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
			|ГДЕ
			|	ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер = &Ордер
			|	И ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен";
		Запрос.УстановитьПараметр("Ордер", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно отменить проведение, ордер используется в %1'"), Выборка.Поступление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//2017-07-10 mind если документ идет по складу относящемуся к сторонним переработчикам, то разрешим движение остатков датой документа
	Если ЭтоСторонняяПереработка Тогда
		ВыполнятьДвиженияДатойДокумента = Истина;
	КонецЕсли;
	
	РазрешитьПроведениеСОшибками = Ложь;
	Если ДополнительныеСвойства.Свойство("ОтложенноеПроведение")
	   И ДополнительныеСвойства.ОтложенноеПроведение = Истина Тогда
		РазрешитьПроведениеСОшибками = Истина;
	КонецЕсли;
	
	//Если документ проведен, и это не оборудование, то менять на оборудование нельзя
	НоваяОперация_Оборудование = (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки)
							 ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика);
	
	Если ЭтоНовый() И Ссылка.Проведен Тогда
		Если НЕ СтараяОперация_Оборудование
		   И НоваяОперация_Оборудование Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено в проведенных документах с операциями, отличными от оборудования, менять на операции оборудования");
			Если Не РазрешитьПроведениеСОшибками Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаДокументаПоставщика)
				И (НачалоДня(ЭтотОбъект.Дата) > ЭтотОбъект.ДатаДокументаПоставщика + 864000) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата документа поставщика не может быть меньше даты документа более чем на 10 суток");
			Если Не РазрешитьПроведениеСОшибками Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаВремяЗаездаМашины)
				И (НачалоДня(ЭтотОбъект.Дата) > ЭтотОбъект.ДатаВремяЗаездаМашины + 864000) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата заезда машины не может быть меньше даты документа более чем на 10 суток");
			Если Не РазрешитьПроведениеСОшибками Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Оборудование
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика
			ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство)
					И ЗначениеЗаполнено(СтрокаТЧ.ЗаводскойНомер) Тогда
				СтрокаТЧ.ОсновноеСредство = Оборудование_ОССуществует(СтрокаТЧ.Номенклатура, СтрокаТЧ.ЗаводскойНомер);
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;		
			
	//распределим количество паллет по строкам товаров
	Если ЭтотОбъект.КоличествоПаллет > 0
			И ЭтотОбъект.Товары.Количество() > 0 Тогда
		КолвоРаспределено 	= 0;
		ОбщийОбъем 			= 0;
		Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
			ОбщийОбъем = ОбщийОбъем + СтрокаТовар.ЕдиницаИзмерения.Вес * СтрокаТовар.Количество;
		КонецЦикла;	
		
		Если ОбщийОбъем > 0 Тогда
			Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
				КолвоПаллет = Окр(?(СтрокаТовар.ЕдиницаИзмерения.Вес * СтрокаТовар.Количество = 0, 0, СтрокаТовар.ЕдиницаИзмерения.Вес * СтрокаТовар.Количество/ ОбщийОбъем) * ЭтотОбъект.КоличествоПаллет, 3);
				КолвоРаспределено = КолвоРаспределено + КолвоПаллет;
				СтрокаТовар.КоличествоПаллет = КолвоПаллет;
			КонецЦикла;
			
			Если ЭтотОбъект.КоличествоПаллет > КолвоРаспределено Тогда
				ЭтотОбъект.Товары[0].КоличествоПаллет = ЭтотОбъект.Товары[0].КоличествоПаллет + (ЭтотОбъект.КоличествоПаллет - КолвоРаспределено);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ТипЗнч(ЭтотОбъект.Основание) = Тип("ДокументСсылка.ЗаявкаНаСклад")
				И ЗначениеЗаполнено(ЭтотОбъект.Основание) Тогда
			ТекЗаявкаНаСклад = ЭтотОбъект.Основание;
		Иначе
			Если ЭтотОбъект.Оборудование.Количество() > 0 Тогда
				ТекЗаявкаНаСклад = ЭтотОбъект.Оборудование[0].ЗаявкаНаСклад;
			Иначе
				ТекЗаявкаНаСклад = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика) Тогда
			Если ЗначениеЗаполнено(ТекЗаявкаНаСклад) Тогда
				Если ТекЗаявкаНаСклад.Проведен Тогда
					Если НЕ ЕстьОтличияОтЗаявки() Тогда
						мДатаНовогоУчетаСчетовОС = Константы.ДатаИзмененияУчетаПоСчетамОС.Получить();
						Если НЕ ЭтотОбъект.Дата < мДатаНовогоУчетаСчетовОС Тогда
							Если НЕ ТекЗаявкаНаСклад.Дата < мДатаНовогоУчетаСчетовОС Тогда
								ЭтотОбъект.Дата =
									?(ЗначениеЗаполнено(ЭтотОбъект.ДатаВремяЗаездаМашины), ЭтотОбъект.ДатаВремяЗаездаМашины, ТекЗаявкаНаСклад.Дата);
							Иначе
								ЭтотОбъект.Дата = мДатаНовогоУчетаСчетовОС;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ТекстСообщения = НСтр("ru = 'Оборудование в приходном ордере не соответствует таковому в заявке на склад'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Основание");
						Если Не РазрешитьПроведениеСОшибками Тогда
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'Нельзя проводить приходный ордер на основании непроведенной заявки на склад'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Основание");
					Если Не РазрешитьПроведениеСОшибками Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Не Склад.Владелец.id_TT = 11595 Тогда
					ТекстСообщения = НСтр("ru = 'Не указана заявка на склад. Проведение невозможно'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Основание");
					Если Не РазрешитьПроведениеСОшибками Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки
			   И Не ЭтотОбъект.ВыполнятьДвиженияДатойДокумента Тогда
				
				//передвинем дату на текущую, если у документа нет движений
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Регистратор", Ссылка);
				Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ТоварыНаСкладах.Регистратор
					|ИЗ
					|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
					|ГДЕ
					|	ТоварыНаСкладах.Регистратор = &Регистратор";
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					ЭтотОбъект.Дата = ТекущаяДата();
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не Ссылка.Проведен И Не ЭтотОбъект.ВыполнятьДвиженияДатойДокумента Тогда
				ЭтотОбъект.Дата = ТекущаяДата();
			КонецЕсли;
			
			Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
				Если НЕ ЗначениеЗаполнено(НомерДокументаПоставщика) Тогда
					ТекстСообщения = НСтр("ru = 'Не указан номер документа поставщика'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НомерДокументаПоставщика");
					Если Не РазрешитьПроведениеСОшибками Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаДокументаПоставщика) Тогда
					ТекстСообщения = НСтр("ru = 'Не указана дата документа поставщика'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаДокументаПоставщика");
					Если Не РазрешитьПроведениеСОшибками Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТекДата = ТекущаяДата(); //можно брать эту, т.к. код выполняется на сервере и дата будет серверная
		
		//временное разрешение для финансистов вносить документы с дивжениями датой документов
		Если НЕ ВыполнятьДвиженияДатойДокумента Тогда
			ТабИзмененийВДвижениях = ПолучитьТаблицуИзмененийВДвижениях();
			Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
				СтрокаТаб = ИзмененияДвижений.Добавить();
				СтрокаТаб.ДатаИзменения = ТекДата;
				СтрокаТаб.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		Иначе
			Если ИзмененияДвижений.Количество() = 0 Тогда
				СтрокаТаб = ИзмененияДвижений.Добавить();
				СтрокаТаб.ДатаИзменения = Дата;
				СтрокаТаб.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;	
		КонецЕсли;
		
		ПроверитьБлокировкуТоваровДляРаспределения(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		//+++АК MIND 2018.01.30 вводим признак легальный для приходника Отменен и расширяем получение в переменную для отмены прихода по товарам
		//Общий запрет
		ЕстьПравоОтменять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуСкладскихДокументов, Ложь) ИЛИ Отменен;
		
		//По основным средствам разрешение может быть
		Если НоваяОперация_Оборудование Тогда
			ЕстьПравоОтменять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуСкладскихДокументовПоОС, Ложь);
		КонецЕсли;
		
		Если НЕ ЕстьПравоОтменять Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У вас нет права отменять складские документы с видом операции """ + Строка(ВидОперации) + """");
			Возврат;
		КонецЕсли;	
		ИзмененияДвижений.Очистить();
		
		ПроверитьБлокировкуТоваровДляРаспределения(Отказ);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
#Область АК_ОтключенныйКод
	//отключена проверка по просьбе Марины Кортиевой: письмо от 25.04 в 18:20
	////+++АК KIRN 2018.04.23 
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПриходныйОрдерСкладТовары.Номенклатура
	//|ИЗ
	//|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	//|ГДЕ
	//|	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
	//|	И ПриходныйОрдерСкладТовары.Номенклатура.ТорговаяМарка.ОрганизацияЗакупки <> ПриходныйОрдерСкладТовары.Ссылка.Организация";
	//Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Отказ = Истина;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В таб части есть товары с торговой маркой, у которой отличается организация");
	//	Возврат;
	//КонецЦикла;
	////----АК KIRN 
	
	//отключена до исправлений в работе филина.  20.09.2018
	////++ LUZA ИП-00016624 25.09.2017
	//Фильтр = Новый Структура;
	//Фильтр.Вставить("ЭтоВетСвидетельство", Ложь);
	//ТЗФайлов = ЭтотОбъект.ПрикрепленныеФайлы.Выгрузить(Фильтр);
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ТЗФайлов.Файл
	//|ПОМЕСТИТЬ ВТ_ТЗ
	//|ИЗ
	//|	&ТЗ КАК ТЗФайлов
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_ТЗ.Файл
	//|ИЗ
	//|	ВТ_ТЗ КАК ВТ_ТЗ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
	//|		ПО ВТ_ТЗ.Файл = АК_ОчередьРаспознаванияФайлов.Файл
	//|ГДЕ
	//|	АК_ОчередьРаспознаванияФайлов.Файл ЕСТЬ NULL";
	//
	//Запрос.УстановитьПараметр("ТЗ", ТЗФайлов);
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Для каждого Стр Из ТЗ Цикл
	//	Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
	//	Запись.Файл = Стр.Файл;
	//	Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;
	//	//++ АК luza ИП-00017677 21.01.2018
	//	//Запись.РаспознаватьЧерезGoogleCloudVision = Истина;
	//	Запись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//	Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;	
	//	Запись.Распознан = Ложь;
	//	Запись.Обработан = Ложь;				
	//	Запись.РаспознаватьЧерезFillin = Истина;			
	//	Запись.ДатаДобавления = ТекущаяДата();
	//	
	//	Запись.ПоворачиватьИзображение = Истина;
	//	Запись.Записать();		 			
	//	
	//	//ИмяФайла = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл);
	//	//ИмяФайлаДляРаспознавания = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознаванияОбъектаФилин(Стр.Файл);
	//	//Файл = Новый Файл(ИмяФайла);
	//	//Если Файл.Существует() Тогда
	//	//	КопироватьФайл(ИмяФайла, ИмяФайлаДляРаспознавания);
	//	//КонецЕсли;

	//	//-- АК luza ИП-00017677 21.01.2018
	//	Запись.Записать(Истина);
	//КонецЦикла;	
	//
	////-- LUZA ИП-00016624 25.09.2017

#КонецОбласти
	
КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	УстановитьПривилегированныйРежим(Истина);
	
	Движения.ЗаказыПоставщикам.Записывать	= Истина;
	
	ОтразитьДвиженияТоварыНаСкладах(Отказ);
	ОтразитьДвиженияЗаявкаНаСкладах(Отказ);
	
	ИзменитьСвойствоХарактеристикиКоличествоВКоробке();
	
	Если ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика
	 Или ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		//Оборудование
		Оборудование_ВыполнитьДвижения(Отказ);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
		// Заказы поставщикам
		ОтразитьДвиженияЗаказыПоставщикам(Отказ);
		
	КонецЕсли;
	
	ОтразитьДвиженияАК_ЗаявкиНаПроизводствоПерсональнойУпаковки(Отказ);
	
	ОтразитьДвиженияПоРегиструБухгалтерии(Отказ);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//+++АК sole 2018.05.22 ИП-00018724.01
	АК_НайтиИУдалитьСвязанныеМаршрутныеЛисты(Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	//---АК sole 2018.05.22 ИП-00018724.01
	
	ПереводЗаявкиНаЭтикетку();
	
КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	//+++shae 2018.08.07 ИП-00019236  
	СкладыСервер.ПроверитьНаСоответствиеОрганизацииЗакупки(ЭтотОбъект.Организация, ЭтотОбъект.Товары.Выгрузить(), Отказ);		
	//---shae 2018.08.07 ИП-00019236  
	
	Если Справочники.Склады.ДвиженияЗаблокированы(Склад) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения по складу %1 заблокированы! Проведение невозможно.'"), Склад);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Склад",, Отказ);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика
	 Или ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		 
		Если Не Оборудование_РеквизитыЗаполнены()
		 Или Не Оборудование_ДублиНоменклатурыОтсутствуют() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверитьСписанныеОС(Отказ);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияТоварыНаСкладах(Отказ)

	//временное разрешение для финансистов вносить документы с дивжениями датой документов
	Если Не ВыполнятьДвиженияДатойДокумента Тогда
		Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
			Движения.ТоварыНаСкладах.Записывать = Истина;
			Движения.ТоварыНаСкладах.Прочитать();
		КонецЕсли;
		
		Для Каждого СтрокаДвижение Из ТабИзмененийВДвижениях Цикл
			
			Если СтрокаДвижение.Склад <> Склад
					И Дата >= '20131201'
					И ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки Тогда
				
				Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
				Движение.Период 			= ТекДата;
				Движение.Склад 				= СтрокаДвижение.Склад;
				Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
				Движение.Характеристика 	= СтрокаДвижение.Характеристика;
				Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
				Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
				Движение.Количество 		= СтрокаДвижение.Количество;
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
				
			Иначе
				
				Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
				Движение.Период 			= ТекДата;
				Движение.Склад 				= СтрокаДвижение.Склад;
				Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
				Движение.Характеристика 	= СтрокаДвижение.Характеристика;
				Движение.ДатаПроизводства 	= СтрокаДвижение.ДатаПроизводства;
				Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
				Движение.Количество 		= СтрокаДвижение.Количество;
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
				
			КонецЕсли;
		
		КонецЦикла;
		
		//если были инвентаризации между датой документа и датой изменения, то нужно выполнить сторнирующие записи для движений
		//которые могут изменить результаты инвентаризации
		Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Таб", ТабИзмененийВДвижениях);
			Если Дата >= '20140904' Тогда
				Запрос.УстановитьПараметр("ДатаДок", Макс(Дата, ДатаВремяЗаездаМашины));
			Иначе	
				Запрос.УстановитьПараметр("ДатаДок", Дата);
			КонецЕсли;
			Запрос.УстановитьПараметр("ДатаДвижений", ТекДата);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Таб.Склад,
				|	Таб.Номенклатура,
				|	Таб.Характеристика,
				|	Таб.ДатаПроизводства,
				|	Таб.ЕдиницаИзмерения,
				|	Таб.Количество
				|ПОМЕСТИТЬ ВТ_Движения
				|ИЗ
				|	&Таб КАК Таб
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Движения.Склад,
				|	ВТ_Движения.Номенклатура,
				|	ВТ_Движения.Характеристика,
				|	ВТ_Движения.ДатаПроизводства,
				|	ВТ_Движения.ЕдиницаИзмерения,
				|	ВТ_Движения.Количество * -1 КАК Количество,
				|	ВЗ_Инвентаризации.Инвентаризация
				|ИЗ
				|	ВТ_Движения КАК ВТ_Движения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ВЗ_Запрос.Номенклатура КАК Номенклатура,
				|			ВЗ_Запрос.Характеристика КАК Характеристика,
				|			ВЗ_Запрос.ДатаПроизводства КАК ДатаПроизводства,
				|			ВЗ_Запрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|			ВЗ_Запрос.Склад КАК Склад,
				|			МАКСИМУМ(ВЗ_Инвентаризации.Инвентаризация) КАК Инвентаризация
				|		ИЗ
				|			(ВЫБРАТЬ
				|				ИнвентаризацияСкладТовары.Номенклатура КАК Номенклатура,
				|				ИнвентаризацияСкладТовары.Характеристика КАК Характеристика,
				|				ИнвентаризацияСкладТовары.ДатаПроизводства КАК ДатаПроизводства,
				|				ИнвентаризацияСкладТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|				МИНИМУМ(ИнвентаризацияСкладТовары.Ссылка.Дата) КАК Дата,
				|				ВЫБОР
				|					КОГДА ИнвентаризацияСкладТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|						ТОГДА ИнвентаризацияСкладТовары.Склад
				|					ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
				|				КОНЕЦ КАК Склад
				|			ИЗ
				|				Документ.ИнвентаризацияСклад.Товары КАК ИнвентаризацияСкладТовары
				|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Движения КАК ВТ_Движения
				|					ПО (ВТ_Движения.Склад = ВЫБОР
				|							КОГДА ИнвентаризацияСкладТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|								ТОГДА ИнвентаризацияСкладТовары.Склад
				|							ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
				|						КОНЕЦ)
				|						И (ВТ_Движения.Номенклатура = ИнвентаризацияСкладТовары.Номенклатура)
				|						И (ВТ_Движения.Характеристика = ИнвентаризацияСкладТовары.Характеристика)
				|						И (ВТ_Движения.ДатаПроизводства = ИнвентаризацияСкладТовары.ДатаПроизводства)
				|						И (ВТ_Движения.ЕдиницаИзмерения = ИнвентаризацияСкладТовары.ЕдиницаИзмерения)
				|			ГДЕ
				|				ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
				|				И ИнвентаризацияСкладТовары.Ссылка.Дата МЕЖДУ &ДатаДок И &ДатаДвижений
				|			
				|			СГРУППИРОВАТЬ ПО
				|				ИнвентаризацияСкладТовары.Номенклатура,
				|				ИнвентаризацияСкладТовары.Характеристика,
				|				ИнвентаризацияСкладТовары.ДатаПроизводства,
				|				ИнвентаризацияСкладТовары.ЕдиницаИзмерения,
				|				ВЫБОР
				|					КОГДА ИнвентаризацияСкладТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|						ТОГДА ИнвентаризацияСкладТовары.Склад
				|					ИНАЧЕ ИнвентаризацияСкладТовары.Ссылка.Склад
				|				КОНЕЦ) КАК ВЗ_Запрос
				|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					ИнвентаризацияСкладТовары.Дата КАК Дата,
				|					ИнвентаризацияСкладТовары.Ссылка КАК Инвентаризация
				|				ИЗ
				|					Документ.ИнвентаризацияСклад КАК ИнвентаризацияСкладТовары
				|				ГДЕ
				|					ИнвентаризацияСкладТовары.Ссылка.Проведен = ИСТИНА
				|					И ИнвентаризацияСкладТовары.Ссылка.Дата МЕЖДУ &ДатаДок И &ДатаДвижений) КАК ВЗ_Инвентаризации
				|				ПО ВЗ_Запрос.Дата = ВЗ_Инвентаризации.Дата
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ВЗ_Запрос.Номенклатура,
				|			ВЗ_Запрос.Характеристика,
				|			ВЗ_Запрос.ДатаПроизводства,
				|			ВЗ_Запрос.ЕдиницаИзмерения,
				|			ВЗ_Запрос.Склад) КАК ВЗ_Инвентаризации
				|		ПО ВТ_Движения.Склад = ВЗ_Инвентаризации.Склад
				|			И ВТ_Движения.Номенклатура = ВЗ_Инвентаризации.Номенклатура
				|			И ВТ_Движения.Характеристика = ВЗ_Инвентаризации.Характеристика
				|			И ВТ_Движения.ДатаПроизводства = ВЗ_Инвентаризации.ДатаПроизводства
				|			И ВТ_Движения.ЕдиницаИзмерения = ВЗ_Инвентаризации.ЕдиницаИзмерения
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_Движения";

			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Склад <> Склад
						И Дата >= '20131201'
						И ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки Тогда
					
					Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
					Движение.Период 			= ТекДата;
					Движение.Склад 				= Выборка.Склад;
					Движение.Номенклатура 		= Выборка.Номенклатура;
					Движение.Характеристика 	= Выборка.Характеристика;
					Движение.ДатаПроизводства 	= Выборка.ДатаПроизводства;
					Движение.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
					Движение.Количество 		= Выборка.Количество;
					Движение.КорректировкаПоИнвентаризации = Выборка.Инвентаризация;
					Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
					
				Иначе	
					
					Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
					Движение.Период 			= ТекДата;
					Движение.Склад 				= Выборка.Склад;
					Движение.Номенклатура 		= Выборка.Номенклатура;
					Движение.Характеристика 	= Выборка.Характеристика;
					Движение.ДатаПроизводства 	= Выборка.ДатаПроизводства;
					Движение.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
					Движение.Количество 		= Выборка.Количество;
					Движение.КорректировкаПоИнвентаризации = Выборка.Инвентаризация;
					Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
					
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
	Иначе
		
		Движения.ТоварыНаСкладах.Записывать = Истина;
		Движения.ТоварыНаСкладах.Очистить();
		
		ЭтоВозвратИзПереработки = Дата >= '20131201' И ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки;
		Если ЭтоВозвратИзПереработки Тогда
			СкладПер = Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Поставщик, Организация);
		КонецЕсли;
		
		Для Каждого СтрокаДвижение Из Товары Цикл
			
			пХарактеристика = ?(ЭтоСторонняяПереработка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаДвижение.Характеристика);
			пДатаПроизв 	= ?(ЭтоСторонняяПереработка, '00010101', СтрокаДвижение.ДатаПроизводства);
			
			Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
			Движение.Период 			= Дата;
			Движение.Склад 				= Склад;
			Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
			Движение.Характеристика 	= пХарактеристика;
			Движение.ДатаПроизводства 	= пДатаПроизв;
			Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
			Движение.Количество 		= СтрокаДвижение.Количество;
			Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
			
			// Списываем со склада переработчика
			Если ЭтоВозвратИзПереработки Тогда
				
				Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
				Движение.Период 			= Дата;
				Движение.Склад 				= СкладПер;
				Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
				Движение.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Движение.ДатаПроизводства 	= '00010101';
				Движение.ЕдиницаИзмерения	= СтрокаДвижение.ЕдиницаИзмерения;
				Движение.Количество 		= СтрокаДвижение.Количество;
				Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияЗаявкаНаСкладах(Отказ)

	мДвижения = Движения.ЗаявкаНаСкладах;
	мДвижения.Записывать = Истина;
	
	// виртуальные склады заводятся без заявок
	Если Не Склад.Владелец.id_TT = 11595 Тогда
		
		Для Каждого СтрокаТЧ Из Оборудование Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ЗаявкаНаСклад) Тогда 
				Движение = мДвижения.ДобавитьРасход();
				Движение.Период			= ТекДата;
				Движение.Номенклатура	= СтрокаТЧ.Номенклатура;
				Движение.Оборудование	= СтрокаТЧ.ОсновноеСредство;
				Движение.Количество		= 1;
				Движение.АвторИзменений	= ПараметрыСеанса.ТекущийПользователь;
				Движение.Заявка			= СтрокаТЧ.ЗаявкаНаСклад;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаСклад")
	   И Основание.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратТовара Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			Движение = мДвижения.ДобавитьРасход();
			Движение.Период			= ТекДата;
			Движение.Номенклатура	= СтрокаТЧ.Номенклатура;
			Движение.Характеристика	= СтрокаТЧ.Характеристика;
			Движение.Количество		= СтрокаТЧ.Количество;
			Движение.АвторИзменений	= ПараметрыСеанса.ТекущийПользователь;
			Движение.Заявка			= Основание;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияЗаказыПоставщикам(Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"				, Дата - 1);
	Запрос.УстановитьПараметр("ЗаказыПоставщикам"	, Товары.ВыгрузитьКолонку("ЗаказПоставщику"));
	Запрос.УстановитьПараметр("СписокНоменклатуры"	, Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстаткиИОбороты.Номенклатура,
		|	ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику,
		|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоКонечныйОстаток,
		|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоПриход
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
		|			,
		|			&НаДату,
		|			,
		|			,
		|			ЗаказПоставщику В (&ЗаказыПоставщикам)
		|				И Номенклатура В (&СписокНоменклатуры)) КАК ЗаказыПоставщикамОстаткиИОбороты";
	ТЗОстатков = Запрос.Выполнить().Выгрузить();
	ОтборОстатков = Новый Структура;
	ОстаткиПоЗаказамПревышены = Ложь;
	ЕстьПравоПревышения = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеЗаказовПоставщикам, Ложь);
	Для каждого стр из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Стр.ЗаказПоставщику) Тогда
			Если НЕ Склад.НеКонтролироватьНаличиеЗаказа
				И НЕ Стр.Номенклатура.ЗаказДляПриходаНеобязателен Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не указан заказ в строке " + Стр.НомерСтроки + 
								  ", но для склада установлен обязательный контроль указания заказов!";
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		ОтборОстатков.Вставить("Номенклатура"	, Стр.Номенклатура);
		ОтборОстатков.Вставить("ЗаказПоставщику", Стр.ЗаказПоставщику);
		СтрокиОстатков = ТЗОстатков.НайтиСтроки(ОтборОстатков);
		Если СтрокиОстатков.Количество() > 0 Тогда
			Остаток		= СтрокиОстатков[0].КоличествоКонечныйОстаток;
			ВесьЗаказ	= СтрокиОстатков[0].КоличествоПриход;
		Иначе
			Остаток		= 0;
			ВесьЗаказ	= 0;
		КонецЕсли;
		Попытка
			ФлПользователь = ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь"))
				И НЕ НРег(Лев(Строка(глЗначениеПеременной("глТекущийПользователь")),5)) = "obmen";
		Исключение
			ФлПользователь = Ложь;
		КонецПопытки;
		Если (1.1 * ВесьЗаказ < (ВесьЗаказ - Остаток + Стр.Количество))
			И НЕ Склад.НеКонтролироватьПревышениеЗаказа Тогда
			ОстаткиПоЗаказамПревышены = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Более чем на 10% приход превышает заказ по позиции: " + Стр.Номенклатура + " по заказу: " + Стр.ЗаказПоставщику +
			"! В документе: " + Стр.Количество + ", осталось получить: " + Остаток + ", всего заказано: " + ВесьЗаказ;
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
			Если НЕ ЕстьПравоПревышения
				И ФлПользователь Тогда
				Отказ = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		ДатаПоступленияРасчетная = ПолучитьДатуПоступленияПоВремениПрихода();
		Если Стр.ЗаказПоставщику.ДатаПоступления <> ДатаПоступленияРасчетная Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Дата поступления в " + Стр.ЗаказПоставщику + "(" + Стр.ЗаказПоставщику.ДатаПоступления +
			") не соответсвует расчетной " + ДатаПоступленияРасчетная;
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецЕсли;
		Дв = Движения.ЗаказыПоставщикам.ДобавитьРасход();
		Дв.ЗаказПоставщику	= Стр.ЗаказПоставщику;
		Дв.Номенклатура		= Стр.Номенклатура;
		Дв.Период			= Дата;
		Дв.Количество		= Стр.Количество;
	КонецЦикла;

КонецПроцедуры

//+++AK GREK 18.08.2018 ИП-00019542
//Резервируем товар для интернет магазина, если поступление идет на склад Тилси, товар указан в плане продаж, и не зарезервирован.
Процедура ОтразитьДвиженияПоРезервированиюТовараДляИнтернетМагазина(ТаблицаДвижений)
	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика") ИЛИ
		Склад.Код <> "000000316" ИЛИ ОжидаемыйПриход ИЛИ НЕ ТаблицаДвижений.Количество() > 0 Тогда //Интересует только склад Тилси
		Возврат;                  
	КонецЕсли;
	Запрос = Новый Запрос;
	//Нужно получить товары к резервировнаию для Интернет магазинов. Нюанс в том что магазинов может быть несколько,а также может быть несколько характеристик. Планы продаж составлены в разрезе только товаров
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка КАК СкладРезерва,
	               |	Склады.Владелец КАК ИнтернетМагазин,
	               |	&СкладРаспред КАК СкладРаспред
	               |ПОМЕСТИТЬ ВТ_Склады
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	(&ДляВсехИнтернетМагазинов
	               |			ИЛИ Склады.Владелец В (&ИнтрнетМагазины))
	               |	И Склады.ЭтоСкладРезерваИнтернетМагазина = ИСТИНА
	               |	И Склады.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&СкладРаспред КАК СкладРаспред,
	               |	ТЗ.Номенклатура КАК Номенклатура,
	               |	ТЗ.Характеристика КАК Характеристика,
	               |	ТЗ.Количество КАК КоличествоОстаток,
	               |	ТЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТЗ.ДатаПроизводства
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.Номенклатура,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 1
	               |							ТОГДА 1 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ + 6
	               |					КОНЕЦ
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 2
	               |							ТОГДА 2 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ + 5
	               |					КОНЕЦ
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 3
	               |							ТОГДА 3 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ + 4
	               |					КОНЕЦ
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 4
	               |							ТОГДА 4 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ + 3
	               |					КОНЕЦ
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 5
	               |							ТОГДА 5 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ + 2
	               |					КОНЕЦ
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 6
	               |							ТОГДА 6 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ + 1
	               |					КОНЕЦ
	               |			КОГДА ГрафикиПоставкиТовараГрафик.ДеньПоставки = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	               |				ТОГДА ВЫБОР
	               |						КОГДА &ДеньНеделиПоставкиВТТ < 7
	               |							ТОГДА 7 - &ДеньНеделиПоставкиВТТ
	               |						ИНАЧЕ &ДеньНеделиПоставкиВТТ
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК ДнейДоПоставки,
	               |	ВТ_Склады.ИнтернетМагазин
	               |ПОМЕСТИТЬ ВТ_ДнейДоПоставки
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиПоставкиТовара.Товары КАК ГрафикиПоставкиТовараТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиПоставкиТовара.График КАК ГрафикиПоставкиТовараГрафик
	               |			ПО ГрафикиПоставкиТовараТовары.Ссылка = ГрафикиПоставкиТовараГрафик.Ссылка
	               |		ПО ВТ_Товары.Номенклатура = ГрафикиПоставкиТовараТовары.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ВТ_Товары.Номенклатура = ЗначенияСвойствОбъектов.Объект,
	               |	ВТ_Склады КАК ВТ_Склады
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &СвойствоРезервироватьПоГрафикам
	               |	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Товары.Номенклатура,
	               |	ВТ_Склады.ИнтернетМагазин
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Склады.ИнтернетМагазин,
	               |	ПланыПродажПоДнямНедели.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ВебЗаказПокупателя.Ссылка ЕСТЬ NULL
	               |			ТОГДА ПланыПродажПоДнямНедели.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Количество,
	               |	&ДатаПланаПродаж
	               |ПОМЕСТИТЬ ВТ_ОбъединеныйПланПродаж
	               |ИЗ
	               |	ВТ_Склады КАК ВТ_Склады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	               |		ПО ВТ_Склады.ИнтернетМагазин = ПланыПродажПоДнямНедели.ТорговаяТочка
	               |			И (НАЧАЛОПЕРИОДА(&ДатаПланаПродаж, ДЕНЬ) = ПланыПродажПоДнямНедели.Дата)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВебЗаказПокупателя КАК ВебЗаказПокупателя
	               |		ПО ВТ_Склады.ИнтернетМагазин = ВебЗаказПокупателя.ТорговаяТочка
	               |			И (ВебЗаказПокупателя.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И &ТекущаяДата)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_Склады.ИнтернетМагазин,
	               |	ВебЗаказПокупателяТовары.Номенклатура,
	               |	ЕСТЬNULL(ВебЗаказПокупателяТовары.Количество, 0),
	               |	&ДатаПланаПродаж
	               |ИЗ
	               |	ВТ_Склады КАК ВТ_Склады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВебЗаказПокупателя.Товары КАК ВебЗаказПокупателяТовары
	               |		ПО ВТ_Склады.ИнтернетМагазин = ВебЗаказПокупателяТовары.Ссылка.ТорговаяТочка
	               |			И (ВебЗаказПокупателяТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И &ТекущаяДата)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ДнейДоПоставки.ИнтернетМагазин,
	               |	ВТ_ДнейДоПоставки.Номенклатура,
	               |	ПланыПродажПоДнямНедели.Количество,
	               |	&ДатаПланаПродаж
	               |ИЗ
	               |	ВТ_ДнейДоПоставки КАК ВТ_ДнейДоПоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыПродажПоДнямНедели КАК ПланыПродажПоДнямНедели
	               |		ПО ВТ_ДнейДоПоставки.ИнтернетМагазин = ПланыПродажПоДнямНедели.ТорговаяТочка
	               |			И ВТ_ДнейДоПоставки.Номенклатура = ПланыПродажПоДнямНедели.Номенклатура
	               |			И (ПланыПродажПоДнямНедели.Дата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаПланаПродаж, ДЕНЬ, ВТ_ДнейДоПоставки.ДнейДоПоставки - 1), ДЕНЬ))
	               |			И (ПланыПродажПоДнямНедели.Дата >= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаПланаПродаж, ДЕНЬ, 1), ДЕНЬ))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОбъединеныйПланПродаж.ИнтернетМагазин КАК ТорговаяТочка,
	               |	ВТ_ОбъединеныйПланПродаж.Номенклатура,
	               |	СУММА(ВТ_ОбъединеныйПланПродаж.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ПланПродажСУчетомВэбЗаказа
	               |ИЗ
	               |	ВТ_ОбъединеныйПланПродаж КАК ВТ_ОбъединеныйПланПродаж
	               |ГДЕ
	               |	НЕ ВТ_ОбъединеныйПланПродаж.Номенклатура ЕСТЬ NULL
	               |	И ВТ_ОбъединеныйПланПродаж.Количество <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ОбъединеныйПланПродаж.ИнтернетМагазин,
	               |	ВТ_ОбъединеныйПланПродаж.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Склады.ИнтернетМагазин,
	               |	ВТ_Склады.СкладРаспред,
	               |	ВТ_Склады.СкладРезерва,
	               |	ПланыПродажПоДнямНедели.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(НормативныйКвантУпаковкиСрезПоследних.Квант, 0) = 0
	               |			ТОГДА ПланыПродажПоДнямНедели.Количество
	               |		КОГДА (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество / (ВЫРАЗИТЬ(НормативныйКвантУпаковкиСрезПоследних.Квант КАК ЧИСЛО(15, 3))) КАК ЧИСЛО(15, 0))) - (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество / (ВЫРАЗИТЬ(НормативныйКвантУпаковкиСрезПоследних.Квант КАК ЧИСЛО(15, 3))) КАК ЧИСЛО(15, 3))) = 0
	               |			ТОГДА ПланыПродажПоДнямНедели.Количество
	               |		ИНАЧЕ (ВЫРАЗИТЬ(ПланыПродажПоДнямНедели.Количество / (ВЫРАЗИТЬ(НормативныйКвантУпаковкиСрезПоследних.Квант КАК ЧИСЛО(15, 3))) + 0.5 КАК ЧИСЛО(15, 0))) * (ВЫРАЗИТЬ(НормативныйКвантУпаковкиСрезПоследних.Квант КАК ЧИСЛО(15, 3)))
	               |	КОНЕЦ КАК Количество
	               |ПОМЕСТИТЬ ВТ_ПланыПродаж
	               |ИЗ
	               |	ВТ_Склады КАК ВТ_Склады
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПланПродажСУчетомВэбЗаказа КАК ПланыПродажПоДнямНедели
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |				ПО ВТ_Товары.Характеристика = ЗначенияСвойствОбъектов.Объект
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйКвантУпаковки.СрезПоследних КАК НормативныйКвантУпаковкиСрезПоследних
	               |				ПО ВТ_Товары.Характеристика = НормативныйКвантУпаковкиСрезПоследних.Характеристика
	               |					И (НормативныйКвантУпаковкиСрезПоследних.Склад = &СЕРаспред)
	               |			ПО ПланыПродажПоДнямНедели.Номенклатура = ВТ_Товары.Номенклатура
	               |		ПО ВТ_Склады.ИнтернетМагазин = ПланыПродажПоДнямНедели.ТорговаяТочка
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПланыПродаж.ИнтернетМагазин,
	               |	ВТ_ПланыПродаж.СкладРаспред,
	               |	ВТ_ПланыПродаж.СкладРезерва,
	               |	ВТ_ПланыПродаж.Номенклатура,
	               |	ЕСТЬNULL(ВТ_ПланыПродаж.Количество, 0) - ЕСТЬNULL(ЗарезервированныеОстатки.КоличествоОстаток, 0) КАК Потребность
	               |ПОМЕСТИТЬ ВТ_Потребности
	               |ИЗ
	               |	ВТ_ПланыПродаж КАК ВТ_ПланыПродаж
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекущаяДата, ) КАК ЗарезервированныеОстатки
	               |		ПО ВТ_ПланыПродаж.СкладРезерва = ЗарезервированныеОстатки.Склад
	               |			И ВТ_ПланыПродаж.Номенклатура = ЗарезервированныеОстатки.Номенклатура
	               |ГДЕ
	               |	ЕСТЬNULL(ВТ_ПланыПродаж.Количество, 0) - ЕСТЬNULL(ЗарезервированныеОстатки.КоличествоОстаток, 0) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Потребности.ИнтернетМагазин,
	               |	ВТ_Потребности.СкладРаспред,
	               |	ВТ_Потребности.СкладРезерва,
	               |	ВТ_Потребности.Номенклатура,
	               |	ВТ_Потребности.Потребность,
	               |	СУММА(ВТ_Потребности1.Потребность) КАК ПотребностьНарастающимИтогом
	               |ПОМЕСТИТЬ ВТ_ПотребностиНарастающимИтогом
	               |ИЗ
	               |	ВТ_Потребности КАК ВТ_Потребности
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Потребности КАК ВТ_Потребности1
	               |		ПО ВТ_Потребности.ИнтернетМагазин.Код >= ВТ_Потребности1.ИнтернетМагазин.Код
	               |			И ВТ_Потребности.Номенклатура = ВТ_Потребности1.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Потребности.ИнтернетМагазин,
	               |	ВТ_Потребности.СкладРаспред,
	               |	ВТ_Потребности.СкладРезерва,
	               |	ВТ_Потребности.Номенклатура,
	               |	ВТ_Потребности.Потребность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпрНоменклатура.Ссылка КАК Номенклатура,
	               |	СпрХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	               |	ВТ_ОстаткиКРаспределению.СкладРаспред,
	               |	ВТ_ОстаткиКРаспределению.КоличествоОстаток,
	               |	ВТ_ОстаткиКРаспределению.ЕдиницаИзмерения,
	               |	ВТ_ОстаткиКРаспределению.ДатаПроизводства
	               |ПОМЕСТИТЬ ВТ_ОстаткиКРаспределению
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_ОстаткиКРаспределению
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_ОстаткиКРаспределению.Номенклатура = СпрНоменклатура.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	               |		ПО ВТ_ОстаткиКРаспределению.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиКРаспределению.СкладРаспред,
	               |	ВТ_ОстаткиКРаспределению.Номенклатура,
	               |	ВТ_ОстаткиКРаспределению.Характеристика,
	               |	ВТ_ОстаткиКРаспределению.КоличествоОстаток КАК Остаток,
	               |	СУММА(ВТ_ОстаткиКРаспределению1.КоличествоОстаток) КАК ОстатокНарастающимИтогом
	               |ПОМЕСТИТЬ ВТ_ОстаткиКРаспределениюНарастающимИтогом
	               |ИЗ
	               |	ВТ_ОстаткиКРаспределению КАК ВТ_ОстаткиКРаспределению
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиКРаспределению КАК ВТ_ОстаткиКРаспределению1
	               |		ПО ВТ_ОстаткиКРаспределению.СкладРаспред = ВТ_ОстаткиКРаспределению1.СкладРаспред
	               |			И ВТ_ОстаткиКРаспределению.Номенклатура = ВТ_ОстаткиКРаспределению1.Номенклатура
	               |			И ВТ_ОстаткиКРаспределению.Характеристика.Наименование <= ВТ_ОстаткиКРаспределению1.Характеристика.Наименование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ОстаткиКРаспределению.СкладРаспред,
	               |	ВТ_ОстаткиКРаспределению.Номенклатура,
	               |	ВТ_ОстаткиКРаспределению.Характеристика,
	               |	ВТ_ОстаткиКРаспределению.КоличествоОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПотребностиНарастающимИтогом.ИнтернетМагазин,
	               |	ВТ_ПотребностиНарастающимИтогом.СкладРаспред КАК СкладРаспред,
	               |	ВТ_ПотребностиНарастающимИтогом.СкладРезерва КАК СкладРезерва,
	               |	ВТ_ПотребностиНарастающимИтогом.Номенклатура КАК Номенклатура,
	               |	ВТ_ОстаткиКРаспределениюНарастающимИтогом.Характеристика КАК Характеристика,
	               |	ВТ_ПотребностиНарастающимИтогом.Потребность,
	               |	ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом,
	               |	ВТ_ОстаткиКРаспределениюНарастающимИтогом.Остаток,
	               |	ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом,
	               |	ВЫБОР
	               |		КОГДА ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом - ВТ_ОстаткиКРаспределениюНарастающимИтогом.Остаток <= ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом
	               |				И ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом - ВТ_ПотребностиНарастающимИтогом.Потребность <= ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом
	               |			ТОГДА ВТ_ПотребностиНарастающимИтогом.Потребность - ВЫБОР
	               |					КОГДА ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом - ВТ_ОстаткиКРаспределениюНарастающимИтогом.Остаток - (ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом - ВТ_ПотребностиНарастающимИтогом.Потребность) > 0
	               |						ТОГДА ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом - ВТ_ОстаткиКРаспределениюНарастающимИтогом.Остаток - (ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом - ВТ_ПотребностиНарастающимИтогом.Потребность)
	               |					ИНАЧЕ 0
	               |				КОНЕЦ - ВЫБОР
	               |					КОГДА ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом - ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом > 0
	               |						ТОГДА ВТ_ПотребностиНарастающимИтогом.ПотребностьНарастающимИтогом - ВТ_ОстаткиКРаспределениюНарастающимИтогом.ОстатокНарастающимИтогом
	               |					ИНАЧЕ 0
	               |				КОНЕЦ
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК КРезерву
	               |ПОМЕСТИТЬ ВТ_КРезервированию
	               |ИЗ
	               |	ВТ_ПотребностиНарастающимИтогом КАК ВТ_ПотребностиНарастающимИтогом
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиКРаспределениюНарастающимИтогом КАК ВТ_ОстаткиКРаспределениюНарастающимИтогом
	               |		ПО ВТ_ПотребностиНарастающимИтогом.СкладРаспред = ВТ_ОстаткиКРаспределениюНарастающимИтогом.СкладРаспред
	               |			И ВТ_ПотребностиНарастающимИтогом.Номенклатура = ВТ_ОстаткиКРаспределениюНарастающимИтогом.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КРезервированию.СкладРезерва,
	               |	ВТ_КРезервированию.Номенклатура,
	               |	ВТ_КРезервированию.Характеристика,
	               |	ВТ_КРезервированию.КРезерву,
	               |	ВТ_ОстаткиКРаспределению.ЕдиницаИзмерения,
	               |	ВТ_ОстаткиКРаспределению.ДатаПроизводства
	               |ИЗ
	               |	ВТ_ОстаткиКРаспределению КАК ВТ_ОстаткиКРаспределению
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КРезервированию КАК ВТ_КРезервированию
	               |		ПО ВТ_ОстаткиКРаспределению.Номенклатура = ВТ_КРезервированию.Номенклатура
	               |			И ВТ_ОстаткиКРаспределению.Характеристика = ВТ_КРезервированию.Характеристика";
	ТекДата = Дата;
	СкладРаспред = Справочники.Склады.НайтиПоКоду("000000316");
	Запрос.УстановитьПараметр("СкладРаспред", СкладРаспред.Ссылка);
	Запрос.УстановитьПараметр("СЕРаспред", СкладРаспред.Владелец);
	Запрос.УстановитьПараметр("ДляВсехИнтернетМагазинов",Истина);
	Запрос.УстановитьПараметр("ИнтрнетМагазины","");
	Запрос.УстановитьПараметр("ДатаПланаПродаж",НачалоДня(ТекДата + 3600*24)); 
	Запрос.УстановитьПараметр("ТекущаяДата",ТекДата);
	Запрос.УстановитьПараметр("ТЗ", Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДеньНеделиПоставкиВТТ",ДеньНедели(ТекДата + 3600*24));
	Запрос.УстановитьПараметр("СвойствоРезервироватьПоГрафикам",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Резерв по графикам поставки для ИМ"));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить("Нет остатков к  распределению!");
		Возврат;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		//Перемещаем товар на склад резерва
		//Но сначало проверим на сторно (возможно документ перепроводился в таблице движений сторно к ранее сделаному перемещению, 
		//поэтому нам нужно не дублировать проводки, а схлопнуть их. Иначе будем плодить бесполезные проводки)
		Отбор = Новый Структура();
		Отбор.Вставить("Склад",Склад);
		Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
		Отбор.Вставить("Характеристика",Выборка.Характеристика);
		Отбор.Вставить("ДатаПроизводства",Выборка.ДатаПроизводства);
		Отбор.Вставить("ЕдиницаИзмерения",Выборка.ЕдиницаИзмерения);
		Отбор.Вставить("Количество",Выборка.КРезерву);  
		НайденныеСтроки = ТаблицаДвижений.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда   
			ТаблицаДвижений.Удалить(НайденныеСтроки[0]);
		Иначе
			Движение = ТаблицаДвижений.Добавить(); 
			Движение.Склад 				= Склад;
			Движение.Номенклатура 		= Выборка.Номенклатура;
			Движение.Характеристика 	= Выборка.Характеристика;
			Движение.ДатаПроизводства 	= Выборка.ДатаПроизводства;
			Движение.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
			Движение.Количество 		= - Выборка.КРезерву;
		КонецЕсли;
		//Аналогично для прихода
		Отбор = Новый Структура();
		Отбор.Вставить("Склад",Выборка.СкладРезерва);
		Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
		Отбор.Вставить("Характеристика",Выборка.Характеристика);
		Отбор.Вставить("ДатаПроизводства",Выборка.ДатаПроизводства);
		Отбор.Вставить("ЕдиницаИзмерения",Выборка.ЕдиницаИзмерения);
		Отбор.Вставить("Количество", -Выборка.КРезерву);  
		НайденныеСтроки = ТаблицаДвижений.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда   
			ТаблицаДвижений.Удалить(НайденныеСтроки[0]);
		Иначе
			Движение = ТаблицаДвижений.Добавить();
			Движение.Склад 				= Выборка.СкладРезерва;
			Движение.Номенклатура 		= Выборка.Номенклатура;
			Движение.Характеристика 	= Выборка.Характеристика;
			Движение.ДатаПроизводства 	= Выборка.ДатаПроизводства;
			Движение.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
			Движение.Количество 		= Выборка.КРезерву;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияАК_ЗаявкиНаПроизводствоПерсональнойУпаковки(Отказ)

	Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Записать();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.ЗаявкаНаПроизводствоПерсональнойУпаковки КАК Заявка,
		|	Таблица.Номенклатура,
		|	СУММА(Таблица.Количество) КАК Количество
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	Документ.ПриходныйОрдерСклад.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И НЕ Таблица.ЗаявкаНаПроизводствоПерсональнойУпаковки.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Номенклатура,
		|	Таблица.ЗаявкаНаПроизводствоПерсональнойУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Заявка КАК Заявка,
		|	Таблица.Номенклатура,
		|	Таблица.Количество КАК КоличествоКОтгрузке,
		|	Таблица.Количество КАК КоличествоКПроизводству,
		|	ЕСТЬNULL(ЗаявкаОстатки.КоличествоКОтгрузкеОстаток, 0) КАК КоличествоКОтгрузкеОстаток,
		|	ЕСТЬNULL(ЗаявкаОстатки.КоличествоКПроизводствуОстаток, 0) КАК КоличествоКПроизводствуОстаток,
		|	ЕСТЬNULL(ЗаявкаОстатки.КоличествоЗаказаноОстаток, 0) КАК КоличествоЗаказаноОстаток
		|ИЗ
		|	ТЗ КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Остатки(&Дата, ) КАК ЗаявкаОстатки
		|		ПО Таблица.Номенклатура = ЗаявкаОстатки.Номенклатура
		|			И Таблица.Заявка = ЗаявкаОстатки.Заявка
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ТекстЗапроса;
	
	ПЗ.Параметры.Вставить("Дата", МоментВремени());
	ПЗ.Параметры.Вставить("Ссылка", Ссылка);
	
	ПЗ.Выполнить();
	
	Выборка = ПЗ.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ПризнакВыполненаВМоментПоступления = Ложь;
		Если ЗначениеЗаполнено(Выборка.Заявка.Поставщик) Тогда
			
			//
			Если ЗначениеЗаполнено(Выборка.Заявка.Организация) Тогда
				ПризнакВыполненаВМоментПоступления = (Выборка.Заявка.Поставщик.ИНН = Выборка.Заявка.Организация.ИНН);
			КонецЕсли;
			
			//
			ПризнакВыполненаВМоментПоступления = ПризнакВыполненаВМоментПоступления ИЛИ Выборка.Заявка.Поставщик.ИД = 152;
			ПризнакВыполненаВМоментПоступления = ПризнакВыполненаВМоментПоступления ИЛИ Выборка.Заявка.Поставщик.ИД = 15679;
			
		КонецЕсли;	
		
		//1. УМЕНЬШАЕМ КОЛИЧЕСТВО К ПРОИЗВОДСТВУ
		
		КоличествоЗаказано = мин(Выборка.КоличествоКПроизводству, Выборка.КоличествоЗаказаноОстаток); 
		КоличествоКОтгрузке = мин(Выборка.КоличествоКОтгрузке, Выборка.КоличествоКОтгрузкеОстаток);		
		КоличествоКПроизводству = мин(Выборка.КоличествоКПроизводству, Выборка.КоличествоКПроизводствуОстаток);
		
		Если НЕ ПризнакВыполненаВМоментПоступления Тогда
			КоличествоЗаказано = 0;
			КоличествоКОтгрузке = 0;
		КонецЕсли;
		
		Если КоличествоЗаказано <> 0 ИЛИ КоличествоКОтгрузке <> 0 ИЛИ КоличествоКПроизводству <> 0 Тогда
			
			НоваяЗапись = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			НоваяЗапись.КоличествоЗаказано = КоличествоЗаказано;
			НоваяЗапись.КоличествоКОтгрузке = КоличествоКОтгрузке;
			НоваяЗапись.КоличествоКПроизводству = КоличествоКПроизводству;
			
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период = Дата;
			
		КонецЕсли;
		
		//2. УВЕЛИЧИВАЕМ КОЛИЧЕСТВО К ОТГРУЗКЕ
		Если НЕ ПризнакВыполненаВМоментПоступления Тогда
			
			НоваяЗапись = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			НоваяЗапись.КоличествоЗаказано = 0;
			НоваяЗапись.КоличествоКОтгрузке = мин(Выборка.КоличествоКОтгрузке, Выборка.КоличествоЗаказаноОстаток);				
			НоваяЗапись.КоличествоКПроизводству = 0;
			
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период = Дата;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Модифицированность() Тогда
		
		Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Записать();
		
		ТЗ = Движения.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Выгрузить();
		ТЗ.Свернуть("Заявка");
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			Документы.ЗаявкаНаПечатьЭтикетки.ДобавитьИнформациюВОчередьУведомлений(СтрокаТЗ.Заявка);
		КонецЦикла; 
		
		ПереводЗаявкиНаЭтикетку();
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.14 ИП-00018971
Процедура ОтразитьДвиженияПоРегиструБухгалтерии(Отказ)

	ВыполнитьДвиженияПоРегиструБухгалтерии = Ложь;
	ДополнительныеСвойства.Свойство("ОтложенноеПроведение", ВыполнитьДвиженияПоРегиструБухгалтерии); // Для совместимости
	Если ВыполнитьДвиженияПоРегиструБухгалтерии <> Истина Тогда
		ВыполнитьДвиженияПоРегиструБухгалтерии = ДопМодульСервер.ПолучитьЗначениеПраваПользователя("ФормированиеДвиженийВРБУНепосредственно", Ложь);
	КонецЕсли;
	Если ВыполнитьДвиженияПоРегиструБухгалтерии Тогда
		Движения.ТоварыНаСкладах.Записать(); //LATV: Эти движения используются для формирования движений в РБ Финансовый
		Движения.ТоварыНаСкладах.Записывать = Ложь;
		
		ДвиженияДокумента = Документы.ПриходныйОрдерСклад.ДвиженияДокумента(Ссылка);
		Если ДвиженияДокумента.Финансовый = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Движения.Финансовый.Записывать = Истина;
		Движения.Финансовый.Загрузить(ДвиженияДокумента.Финансовый);
	Иначе
		РегистрыСведений.ОтложенныеДвиженияДокументовПоБухРегистру.ДобавитьДокументВОчередь(Ссылка, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуИзмененийВДвижениях()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	//ТекстОтгрузкаВПереработку = "";
	//Если ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки 
	//	И Дата >= '20131201'Тогда
	//				   
	//	ТекстОтгрузкаВПереработку = "
	//	|
	//	|		ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|		ВЫБРАТЬ
	//	|			&СкладПереработки,
	//	|			ВТ_ТабТовары.Номенклатура,
	//	|			Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	//	|			ВТ_ТабТовары.ЕдиницаИзмерения,
	//	|			СУММА(ВТ_ТабТовары.Количество)
	//	|		ИЗ
	//	|			ВТ_ТабТовары КАК ВТ_ТабТовары  
	//	|		СГРУППИРОВАТЬ ПО
	//	|			ВТ_ТабТовары.Номенклатура,
	//	|			ВТ_ТабТовары.ЕдиницаИзмерения";
	//	
	//	Запрос.УстановитьПараметр("СкладПереработки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Поставщик)); 
	//				   
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор"	, Ссылка);
	Запрос.УстановитьПараметр("Товары"		, Товары.Выгрузить());
	Если ОжидаемыйПриход Тогда
		Запрос.УстановитьПараметр("Склад"		, Справочники.Склады.НайтиПоНаименованию("Ожидаемый товар", Истина, , Склад.Владелец));
	Иначе	
		Запрос.УстановитьПараметр("Склад"		, Склад);
	КонецЕсли;	
	//+++АК SHEP 2018.05.06 ИП-00018453
	//Запрос.УстановитьПараметр("СторонняяПереработка", (Склад.Владелец = Справочники.СтруктурныеЕдиницы.СторонняяПереработка));
	Запрос.УстановитьПараметр("СторонняяПереработка", ЭтоСторонняяПереработка);
	Запрос.УстановитьПараметр("СтруктурныеЕдиницыСторонняяПереработка", СтруктурныеЕдиницыСторонняяПереработка);
	//---АК SHEP 2018.05.06
	Запрос.УстановитьПараметр("ОжидаемыйПриход", ОжидаемыйПриход);
	Запрос.УстановитьПараметр("ОжидаемыйПриходОприходован", ПриемкаТерминаломЗакончена);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.ДатаПроизводства,
	|	ТоварыНаСкладах.ЕдиницаИзмерения,
	|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВТ_Движения
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор = &Регистратор
	//+++АК SHEP 2018.05.06 ИП-00018453
	//|	И ТоварыНаСкладах.Склад.Владелец <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)
	|	И НЕ ТоварыНаСкладах.Склад.Владелец.СторонняяПереработка
	//---АК SHEP 2018.05.06
	|	И ТоварыНаСкладах.Активность = ИСТИНА
	|	И (ТоварыНаСкладах.КорректировкаПоИнвентаризации = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТоварыНаСкладах.КорректировкаПоИнвентаризации = ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.ДатаПроизводства,
	|	ТоварыНаСкладах.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Склад КАК Склад,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА &СторонняяПереработка
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ПриходныйОрдерСкладТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &СторонняяПереработка
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ПриходныйОрдерСкладТовары.ДатаПроизводства
	|	КОНЕЦ КАК ДатаПроизводства,
	|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
	|	ПриходныйОрдерСкладТовары.Количество * ВЫБОР
	|		КОГДА &ОжидаемыйПриход = ИСТИНА
	|				И &ОжидаемыйПриходОприходован = ЛОЖЬ
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ВТ_ТабТовары
	|ИЗ
	|	&Товары КАК ПриходныйОрдерСкладТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Движения.Склад, ВЗ_Товары.Склад) КАК Склад,
	|	ЕСТЬNULL(ВТ_Движения.Номенклатура, ВЗ_Товары.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Движения.Характеристика, ВЗ_Товары.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_Движения.ДатаПроизводства, ВЗ_Товары.ДатаПроизводства) КАК ДатаПроизводства,
	|	ЕСТЬNULL(ВТ_Движения.ЕдиницаИзмерения, ВЗ_Товары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) КАК Количество
	|ИЗ
	|	ВТ_Движения КАК ВТ_Движения
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ТабТовары.Склад КАК Склад,
	|			ВТ_ТабТовары.Номенклатура КАК Номенклатура,
	|			ВТ_ТабТовары.Характеристика КАК Характеристика,
	|			ВТ_ТабТовары.ДатаПроизводства КАК ДатаПроизводства,
	|			ВТ_ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(ВТ_ТабТовары.Количество) КАК Количество
	|		ИЗ
	|			ВТ_ТабТовары КАК ВТ_ТабТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ТабТовары.Склад,
	|			ВТ_ТабТовары.Номенклатура,
	|			ВТ_ТабТовары.Характеристика,
	|			ВТ_ТабТовары.ДатаПроизводства,
	|			ВТ_ТабТовары.ЕдиницаИзмерения) КАК ВЗ_Товары
	|		ПО ВТ_Движения.Склад = ВЗ_Товары.Склад
	|			И ВТ_Движения.Номенклатура = ВЗ_Товары.Номенклатура
	|			И ВТ_Движения.Характеристика = ВЗ_Товары.Характеристика
	|			И ВТ_Движения.ДатаПроизводства = ВЗ_Товары.ДатаПроизводства
	|			И ВТ_Движения.ЕдиницаИзмерения = ВЗ_Товары.ЕдиницаИзмерения
	|ГДЕ
	|	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТабТовары";
				   
	//Возврат Запрос.Выполнить().Выгрузить();
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Если Дата >= '20131201' Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения,
			|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
			|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА -1
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество
			|ПОМЕСТИТЬ ВТ_Движения
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Регистратор = &Регистратор
			//+++АК SHEP 2018.05.07 ИП-00018453: исправил, неверно сторнировались движения, если поменялся склад переработки
			//|	И ТоварыНаСкладах.Склад = &СкладПереработки
			|	И ТоварыНаСкладах.Склад = &СкладПереработкиИзСсылки
			//---АК SHEP 2018.05.07
			|	И ТоварыНаСкладах.Активность = ИСТИНА
			|	И (ТоварыНаСкладах.КорректировкаПоИнвентаризации = НЕОПРЕДЕЛЕНО
			|			ИЛИ ТоварыНаСкладах.КорректировкаПоИнвентаризации = ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&СкладПереработки КАК Склад,
			|	ПриходныйОрдерСкладТовары.Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПроизводства,
			|	ПриходныйОрдерСкладТовары.ЕдиницаИзмерения,
			|	ПриходныйОрдерСкладТовары.Количество КАК Количество
			|ПОМЕСТИТЬ ВТ_ТабТовары
			|ИЗ
			|	&Товары КАК ПриходныйОрдерСкладТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ВТ_Движения.Склад, ВЗ_Товары.Склад) КАК Склад,
			|	ЕСТЬNULL(ВТ_Движения.Номенклатура, ВЗ_Товары.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(ВТ_Движения.Характеристика, ВЗ_Товары.Характеристика) КАК Характеристика,
			|	ЕСТЬNULL(ВТ_Движения.ДатаПроизводства, ВЗ_Товары.ДатаПроизводства) КАК ДатаПроизводства,
			|	ЕСТЬNULL(ВТ_Движения.ЕдиницаИзмерения, ВЗ_Товары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) КАК Количество
			|ИЗ
			|	ВТ_Движения КАК ВТ_Движения
			|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ВТ_ТабТовары.Склад КАК Склад,
			|			ВТ_ТабТовары.Номенклатура КАК Номенклатура,
			|			ВТ_ТабТовары.Характеристика КАК Характеристика,
			|			ВТ_ТабТовары.ДатаПроизводства КАК ДатаПроизводства,
			|			ВТ_ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|			СУММА(ВТ_ТабТовары.Количество) КАК Количество
			|		ИЗ
			|			ВТ_ТабТовары КАК ВТ_ТабТовары
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ВТ_ТабТовары.Склад,
			|			ВТ_ТабТовары.Номенклатура,
			|			ВТ_ТабТовары.Характеристика,
			|			ВТ_ТабТовары.ДатаПроизводства,
			|			ВТ_ТабТовары.ЕдиницаИзмерения) КАК ВЗ_Товары
			|		ПО ВТ_Движения.Склад = ВЗ_Товары.Склад
			|			И ВТ_Движения.Номенклатура = ВЗ_Товары.Номенклатура
			|			И ВТ_Движения.Характеристика = ВЗ_Товары.Характеристика
			|			И ВТ_Движения.ДатаПроизводства = ВЗ_Товары.ДатаПроизводства
			|			И ВТ_Движения.ЕдиницаИзмерения = ВЗ_Товары.ЕдиницаИзмерения
			|ГДЕ
			|	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Движения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ТабТовары");
			
			Запрос.УстановитьПараметр("Регистратор"		, Ссылка);
			Запрос.УстановитьПараметр("Товары"			, Товары.Выгрузить());
			//+++АК SHEP 2018.05.06 ИП-00018453
			//Запрос.УстановитьПараметр("СкладПереработки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Поставщик)); 
			Запрос.УстановитьПараметр("СкладПереработки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Поставщик, Организация));
			Запрос.УстановитьПараметр("СкладПереработкиИзСсылки", Документы.РасходныйОрдерСклад.ПолучитьСкладПереработчика(Ссылка.Поставщик, Ссылка.Организация));
			//---АК SHEP 2018.05.06
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий()Цикл
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
			КонецЦикла;
			
		Иначе
			
			// Сторнируем движения по складу переработки
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения,
			|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
			|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ) КАК Количество
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Регистратор = &Регистратор
			//+++АК SHEP 2018.05.06 ИП-00018453
			//|	И ТоварыНаСкладах.Склад.Владелец = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.СторонняяПереработка)
			|	И ТоварыНаСкладах.Склад.Владелец = &СтруктурныеЕдиницыСторонняяПереработка
			//---АК SHEP 2018.05.06
			|	И ТоварыНаСкладах.Активность = ИСТИНА
			|	И (ТоварыНаСкладах.КорректировкаПоИнвентаризации = НЕОПРЕДЕЛЕНО
			|			ИЛИ ТоварыНаСкладах.КорректировкаПоИнвентаризации = ЗНАЧЕНИЕ(Документ.ИнвентаризацияСклад.ПустаяСсылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Характеристика,
			|	ТоварыНаСкладах.ДатаПроизводства,
			|	ТоварыНаСкладах.ЕдиницаИзмерения
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТоварыНаСкладах.Количество * ВЫБОР
			|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ) <> 0");
			
			Запрос.УстановитьПараметр("Регистратор"	, Ссылка);
			Запрос.УстановитьПараметр("Склад"		, Склад); 
			Запрос.УстановитьПараметр("СтруктурныеЕдиницыСторонняяПереработка", СтруктурныеЕдиницыСторонняяПереработка); //+++АК SHEP 2018.05.06 ИП-00018453
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий()Цикл
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+++AK GREK 18.08.2018 ИП-00019542 
	ОтразитьДвиженияПоРезервированиюТовараДляИнтернетМагазина(ТаблицаДвижений);				
	//---AK
	
	Возврат ТаблицаДвижений;
	
КонецФункции	

Процедура ИзменитьСвойствоХарактеристикиКоличествоВКоробке()
	
	СкладВладелец = Склад.Владелец;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияСвойствОбъектов.Объект КАК Характеристика,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект В(&МассивХарактеристик)
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ТоварыНаСкладахОбороты.Регистратор.Дата) КАК РегистраторДата,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			(Номенклатура, Характеристика, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.Номенклатура,
	|					Товары.Характеристика,
	|					Товары.ЕдиницаИзмерения
	|				ИЗ
	|					Документ.ПриходныйОрдерСклад.Товары КАК Товары
	|				ГДЕ
	|					Товары.Ссылка = &Ссылка)) КАК ТоварыНаСкладахОбороты
	|ГДЕ
	|	ТоварыНаСкладахОбороты.Регистратор <> &Ссылка
	|	И ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Весовой
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзм
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйКвантУпаковки КАК НормативныйКвантУпаковки
	|		ПО (НормативныйКвантУпаковки.Склад = &СкладСтр)
	|			И ХарактеристикиНоменклатуры.Ссылка = НормативныйКвантУпаковки.Характеристика
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В(&МассивХарактеристик)
	|	И НормативныйКвантУпаковки.Квант ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("МассивХарактеристик", Товары.ВыгрузитьКолонку("Характеристика"));
	Запрос.УстановитьПараметр("Товары", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("НачалоПериода", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СкладСтр", СкладВладелец);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗначенийОбъектов 	= ПакетЗапросов[0].Выгрузить();
	ТаблицаПоследнихПоступлений = ПакетЗапросов[1].Выгрузить();
	ТабКешТовары = ПакетЗапросов[2].Выгрузить();
	ТабПустыеНормативные = ПакетЗапросов[3].Выгрузить();
	
	Для Каждого Строка Из Товары Цикл
		
		СтрокаКешТовар = ТабКешТовары.Найти(Строка.Номенклатура, "Ссылка");
		Если СтрокаКешТовар <> Неопределено
			И НЕ СтрокаКешТовар.Весовой Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Строка.КоличествоКоробок <> 0 Тогда
			
			НайденнаяСтрока = ТаблицаЗначенийОбъектов.Найти(Строка.Характеристика, "Характеристика");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				КоличествоВКоробе = Окр(Строка.Количество/Строка.КоличествоКоробок, 3);
				Если КоличествоВКоробе <> НайденнаяСтрока.Значение Тогда
					
					// Если это последний приходник по товару то поменяем свойство характеристики
					МассивСтрок = ТаблицаПоследнихПоступлений.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Строка.Номенклатура, Строка.Характеристика, Строка.ЕдиницаИзмерения));
					
					Если МассивСтрок.Количество() = 0 Тогда
						
						Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
						Запись.Объект = Строка.Характеристика;
						Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.КоличествоВУпаковке;
						Запись.Значение = КоличествоВКоробе;
						
						Попытка
							Запись.Записать();
						Исключение
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Товары Цикл
		
		Если Строка.КоличествоКоробок <> 0 Тогда
			
			Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
				СтрокаПустойНорматив = ТабПустыеНормативные.Найти(Строка.Характеристика, "Ссылка");
				Если СтрокаПустойНорматив <> Неопределено
					И НРег(СтрокаПустойНорматив.ЕдИзм) <> "кг" Тогда
					Запись = РегистрыСведений.НормативныйКвантУпаковки.СоздатьМенеджерЗаписи();
					Запись.Период = Дата;
					Запись.Склад = СкладВладелец;
					Запись.Характеристика = Строка.Характеристика;
					Запись.Квант = Окр(Строка.Количество/Строка.КоличествоКоробок, 3);
					Запись.Записать();
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.КоличествоВКоробке.Записывать = Истина;
	Движения.КоличествоВКоробке.Очистить();
	
	ТабБылиВведеныЗначения = Новый ТаблицаЗначений();
	ТабБылиВведеныЗначения.Колонки.Добавить("Номенклатура");
	ТабБылиВведеныЗначения.Колонки.Добавить("Характеристика");
	
	Для Каждого СтрокаТаб Из Товары Цикл
		
		Если СтрокаТаб.КоличествоКоробок <> 0 Тогда
			
			СтрокиБыли = ТабБылиВведеныЗначения.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТаб.Номенклатура, СтрокаТаб.Характеристика));
			Если СтрокиБыли.Количество() = 0 Тогда
				КоличествоВКоробке = Окр(СтрокаТаб.Количество/СтрокаТаб.КоличествоКоробок, 3);
				
				Запись = Движения.КоличествоВКоробке.Добавить();
				Запись.Период = Дата;
				Запись.СтруктурнаяЕдиница = Склад.Владелец;
				Запись.Номенклатура = СтрокаТаб.Номенклатура;
				Запись.Характеристика = СтрокаТаб.Характеристика;
				Запись.Количество = КоличествоВКоробке;
				
				СтрокаБылоВведено = ТабБылиВведеныЗначения.Добавить();
				СтрокаБылоВведено.Номенклатура = СтрокаТаб.Номенклатура;
				СтрокаБылоВведено.Характеристика = СтрокаТаб.Характеристика;
			КонецЕсли;	
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.КоличествоВКоробке.Записать();
	
	
КонецПроцедуры

Функция ЕстьОтличияОтЗаявки()
	
	ЭтоОборудованиеОтПоставщика	= ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика;
	ЭтоОборудованиеСТочки		= ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки;
	
	ТЧЗаявки 		= ЭтотОбъект.Основание.Оборудование;
	ТЧПриходника 	= ЭтотОбъект.Оборудование;
	
	//// поиск всех приходников по заявке, кроме текущего
	//Запрос = Новый Запрос;
	//запрос.УстановитьПараметр("ЗаявкаНаСклад"	, ЭтотОбъект.Основание);
	//запрос.УстановитьПараметр("ТекДокумент"		, ЭтотОбъект.Ссылка);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ТЧОборудование.Номенклатура,
	//|	ТЧОборудование.ОсновноеСредство
	//|ИЗ
	//|	Документ.ПриходныйОрдерСклад.Оборудование КАК ТЧОборудование
	//|ГДЕ
	//|	ТЧОборудование.ЗаявкаНаСклад = &ЗаявкаНаСклад
	//|	И НЕ ТЧОборудование.Ссылка = &ТекДокумент
	//|	И НЕ ТЧОборудование.Ссылка.ПометкаУдаления";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если НЕ (Выборка.Количество() + ТЧПриходника.Количество()) = ТЧЗаявки.Количество() Тогда
	//	Возврат Истина;
	//КонецЕсли;
	
	
	СтрокаОтбора = ?(ЭтоОборудованиеОтПоставщика, "Номенклатура", "ОсновноеСредство");
	СтруктураОтбора = Новый Структура(СтрокаОтбора);
	
	Для Каждого СтрокаТЧ Из ТЧПриходника Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
		СтрокиЗаявки = ТЧЗаявки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиЗаявки.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция Оборудование_РеквизитыЗаполнены()
	
	//Контроль реквизитов, которые можно проверить только программно
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация)
			И НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Организация"" не заполнено");
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Поставщик) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Поставщик"" не заполнено");
		Результат = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Кладовщик) Тогда
		
		//+++AK susk
		// виртуальные склады
		
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Кладовщик"" не заполнено");
		//Результат = Ложь;

		Если НЕ Склад.Владелец.id_TT = 11595 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Кладовщик"" не заполнено");
			Результат = Ложь;
		КонецЕсли;
		
		//---AK susk
		
	КонецЕсли;
	
	мЦФО = Константы.ЦФОДляУчетаОсновныхСредств.Получить();
	Если НЕ ЗначениеЗаполнено(мЦФО) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Константа ""ЦФО для учета основных средств"" не заполнена");	
		Результат = Ложь;
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
	
		Для Каждого СтрокаТЧ Из Оборудование Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена колонка ""Номенклатура"" в строке " + Строка(СтрокаТЧ.НомерСтроки) + " списка ""Оборудование""");
				Результат = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаводскойНомер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена колонка ""Заводской номер"" в строке " + Строка(СтрокаТЧ.НомерСтроки) + " списка ""Оборудование""");
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена колонка ""Основное средство"" в строке " + Строка(СтрокаТЧ.НомерСтроки) + " списка ""Оборудование""");
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция Оборудование_ДублиНоменклатурыОтсутствуют()
	
	СтрокаРеквизитов = "Номенклатура, ЗаводскойНомер";
	ВремТаблица = ЭтотОбъект.Оборудование.Выгрузить(, СтрокаРеквизитов);
	ВремТаблица.Свернуть(СтрокаРеквизитов);
	
	Если ВремТаблица.Количество() = ЭтотОбъект.Оборудование.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Обычно ОС в табличной части не много, но вдруг? Как пользователь будет искать?
	СтруктураОтбора = Новый Структура(СтрокаРеквизитов);
	Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
		
		СтруктураОтбора.Номенклатура 	= СтрокаТаблицы.Номенклатура;
		СтруктураОтбора.ЗаводскойНомер 	= СтрокаТаблицы.ЗаводскойНомер;
		
		мНайдено = ЭтотОбъект.Оборудование.НайтиСтроки(СтруктураОтбора);
		Если мНайдено.Количество() > 1 Тогда
			Сообщение = "Обнаружены дубли в строках ";
			Для Каждого СтрокаНайдено Из мНайдено Цикл
				Сообщение = Сообщение + Строка(СтрокаНайдено.НомерСтроки) + ", ";
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Лев(Сообщение, СтрДлина(Сообщение) - 2));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция Оборудование_ОССуществует(мНоменклатура, мЗаводскойНомер)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"	, мНоменклатура);
	Запрос.УстановитьПараметр("ЗаводскойНомер"	, мЗаводскойНомер);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Номенклатура = &Номенклатура
	|	И ОсновныеСредства.ЗаводскойНомер = &ЗаводскойНомер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура ПроверитьБлокировкуТоваровДляРаспределения(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	//
	ЕстьБлокировка = ДопМодульСервер.ЕстьБлокировкаТоваровДляРаспределения(ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), ЭтотОбъект.Склад.Владелец);
	Если ЕстьБлокировка Тогда
		Сообщить("Есть товары, заблокированные для распределения! Проведение / отмена проведения невозможны.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//+++АК sole 2018.05.22 ИП-00018724.01
Процедура АК_НайтиИУдалитьСвязанныеМаршрутныеЛисты(Отказ)
	
	Перем Стр;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
"ВЫБРАТЬ
|	МаршрутныйЛистПриходныеОрдера.Ссылка КАК МаршрутныйЛист
|
|ИЗ Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
|ГДЕ
|		МаршрутныйЛистПриходныеОрдера.Ссылка.ПометкаУдаления = Ложь
|	И	МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер = &ПриходныйОрдер
|";
	Запрос.Параметры.Вставить("ПриходныйОрдер", ЭтотОбъект.Ссылка);
	тзСписокМаршрутов = Запрос.Выполнить().Выгрузить();
	
	Попытка	
	
		Для Каждого Стр Из тзСписокМаршрутов Цикл
			оМаршрутныйЛист = Стр["МаршрутныйЛист"].ПолучитьОбъект();
			оМаршрутныйЛист.ПометкаУдаления = Истина;
			
			Если оМаршрутныйЛист.Проведен = Истина Тогда
				оМаршрутныйЛист.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				оМаршрутныйЛист.Записать(РежимЗаписиДокумента.Запись);		
			КонецЕсли; 
		КонецЦикла;
	Исключение
		Сообщить
		(
			"При отмене проведения / пометке на удаление связанного с текущим документом """ +  Стр["МаршрутныйЛист"] + """ возникли ошибки!"
		);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Для Каждого Стр Из тзСписокМаршрутов Цикл
		Сообщить("Связанный с текущим документом """ + Стр["МаршрутныйЛист"]+ """ распроведён и помечен на удаление.");
	КонецЦикла;
	
КонецПроцедуры

//+++АК LATV 2018.06.24 ИП-00018971
Процедура Оборудование_ВыполнитьДвижения(Отказ)

	УчетОС_МСФО = АК_УчетМСФОПривилегированный.ПолучитьПараметрыУчетаОС();
	Если Дата > УчетОС_МСФО.НачалоВеденияУчета Тогда
		АК_УчетМСФО.ОтразитьСостояниеОС(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ПереводЗаявкиНаЭтикетку()
	
	Попытка
		ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ФоноваяОбработкаЗаявокНаЭтикетку",, "ПриходныйОрдерСклад", "Фоновая обработка заявок на этикетку");
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

//+++АК LATV 2018.06.24 ИП-00018971
Процедура ПроверитьСписанныеОС(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Оборудование.ОсновноеСредство КАК ОсновноеСредство,
		|	Оборудование.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТЧДок
		|ИЗ
		|	&Оборудование КАК Оборудование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧДок.НомерСтроки,
		|	ТЧДок.ОсновноеСредство
		|ИЗ
		|	ТЧДок КАК ТЧДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеОС.СрезПоследних(
		|				&ДатаДок,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ТчДок.ОсновноеСредство
		|					ИЗ
		|						ТчДок)) КАК СостояниеОССрезПоследних
		|		ПО ТЧДок.ОсновноеСредство = СостояниеОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	СостояниеОССрезПоследних.Списано";
	
	Запрос.УстановитьПараметр("Оборудование",	Оборудование.Выгрузить(, "ОсновноеСредство, НомерСтроки"));
	Запрос.УстановитьПараметр("ДатаДок",		Новый Граница(Дата, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке № %1  таблицы Оборудование указано Основное средство, которое уже списано на дату документа!'")
			, Строка(Выборка.НомерСтроки));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Если Ссылка.Пустая() Тогда
	СтараяОперация_Оборудование = Ложь;
Иначе
	СтараяОперация_Оборудование = (Ссылка.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки)
									ИЛИ (Ссылка.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика);
КонецЕсли;

//+++АК SHEP 2018.05.06 ИП-00018453
ЭтоСторонняяПереработка = Склад.Владелец.СторонняяПереработка;
СтруктурныеЕдиницыСторонняяПереработка = ОбщегоНазначенияПовтИсп.СторонняяПереработкаДляОрганизации(Организация);
//---АК SHEP 2018.05.06
//+++АК BELN 2018.10.11 ИП-000132 
НеПроверятьДатуЗапретаРедактирования 	= Ложь;
//---АК BELN 2018.10.11 
