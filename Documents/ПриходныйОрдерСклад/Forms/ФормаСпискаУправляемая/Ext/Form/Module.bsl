
&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Склад", ОтборСклад,,, ЗначениеЗаполнено(ОтборСклад));
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроведенПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен", ?(ВРег(ОтборПроведен)="ДА", Истина,?(ВРег(ОтборПроведен)="НЕТ", Ложь, Неопределено)),,, ЗначениеЗаполнено(ОтборПроведен));
КонецПроцедуры


&НаКлиенте
Процедура ОтборБезПоступленияПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ЕстьДокументПоступления", Ложь, ,,ОтборБезПоступления, );
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "СрокОплатыНаступил", истина, ,,ОтборБезПоступления, );
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата",ТекущаяДата());
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Справочники.Организации.НайтиПоКоду("000000006")); //вкусвилл
	//+++АК SHEP 20161028
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоВиртуальныеСклады", Параметры.ТолькоВиртуальныеСклады);
	Если Параметры.ТолькоВиртуальныеСклады Тогда
		Заголовок = Заголовок + "Только виртуальные склады";
	КонецЕсли;
	//---АК SHEP 20161028
	//+++АК SHEP 20170425: бухгалтерам показываем все документы, остальным -- в зависимости от параметра "ТолькоВиртуальныеСклады"
	Список.Параметры.УстановитьЗначениеПараметра("ЭтоФинансист", РольДоступна("Финансист"));
	//---АК SHEP 20170425
	
	Элементы.ФормаУстановитьСнятьПризнакПровереноТехнологом.Доступность = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРегулироватьПризнакПровереноТехнологом, Ложь);
	
	//АК_БЕЛН_20.04.2016++
	ОбъектПрав = ПараметрыСеанса.ТекущийПользователь;//глЗначениеПеременной("ПрофильПолномочийПользователя");
	ЗначениеПрава = Ложь;
	Если ЗначениеЗаполнено(ОбъектПрав) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектПрав"			, ОбъектПрав);
		Запрос.УстановитьПараметр("ПравоПользователя"	, ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("Все склады"));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрЗначениеПрав.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
		|ГДЕ
		|	РегистрЗначениеПрав.Право = &ПравоПользователя
		|	И РегистрЗначениеПрав.Пользователь = &ОбъектПрав";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗначениеПрава = Выборка.Значение;
		Иначе
			ЗначениеПрава = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//МассивНастроек=Новый Массив;
	//МассивНастроек.Добавить("ОсновноеСтруктурноеПодразделение");
	//Струк=УправлениеПользователями.ПолучитьСтруктуруЗначенийПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), МассивНастроек);
	//Если Струк.Свойство("ОсновноеСтруктурноеПодразделение") и ЗначениеЗаполнено(Струк.ОсновноеСтруктурноеПодразделение) и ЗначениеПрава=Ложь 
	//	и (РольДоступна("ОператорСклада") или РольДоступна("Ветеринар")) и Не РольДоступна("ПолныеПрава") 
	//	Тогда
	//	Выборка=Справочники.Склады.Выбрать(,Струк.ОсновноеСтруктурноеПодразделение,,);
	//	СписокСкл=Новый СписокЗначений;
	//	Пока Выборка.Следующий() Цикл
	//		 СписокСкл.Добавить(Выборка.Ссылка);
	//	 КонецЦикла;
	//	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Склад");   
	//	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	//	ЭлементОтбора.Использование  = Истина;
	//	ЭлементОтбора.ПравоеЗначение = СписокСкл;
	//	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
	//КонецЕсли;
	
	МассивНастроек=Новый Массив;
	МассивНастроек.Добавить("ОсновноеСтруктурноеПодразделение");
	Струк=УправлениеПользователями.ПолучитьСтруктуруЗначенийПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), МассивНастроек);
	Если Струк.Свойство("ОсновноеСтруктурноеПодразделение") и ЗначениеЗаполнено(Струк.ОсновноеСтруктурноеПодразделение) и ЗначениеПрава=Ложь 
		и (РольДоступна("ОператорСклада") или РольДоступна("Ветеринар")) и Не РольДоступна("ПолныеПрава") 
		Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("ОсновноеПодразделение", Струк.ОсновноеСтруктурноеПодразделение);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("ОсновноеПодразделение", Неопределено);	
	КонецЕсли;
		
	//Если РольДоступна("Ветеринар") Тогда
	//	Выборка=Справочники.Склады.Выбрать(,Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"),,);
	//	СписокСкл=Новый СписокЗначений;
	//	Пока Выборка.Следующий() Цикл
	//		 СписокСкл.Добавить(Выборка.Ссылка);
	//	КонецЦикла;
	//	Список.Отбор.Элементы[0].ПравоеЗначение=СписокСкл;
	//	Список.Отбор.Элементы[0].Использование=Истина;
	//КонецЕсли; 
	Если РольДоступна("Ветеринар") и не РольДоступна("ОператорСклада") и Не РольДоступна("ПолныеПрава")  и Не РольДоступна("Кладовщик")  Тогда
		Элементы.ЕстьПриложенные.Видимость=Ложь;
		Элементы.ДнейДоОплаты.Видимость=Ложь;
		Элементы.ОжидаемыйПриход.Видимость=Ложь;
		Элементы.Кладовщик.Видимость=Ложь;
		Элементы.НомерДокументаПоставщика.Видимость=Ложь;
		Элементы.ДатаДокументаПоставщика.Видимость=Ложь;
		Элементы.ДатаВремяЗаездаМашины.Видимость=Ложь;
		Элементы.ВремяЗаездаМашины.Видимость=Ложь;
		Элементы.Комментарий.Видимость=Ложь;
		//Элементы.Редактор.Видимость=Ложь;
		Элементы.ЕстьДокументПоступления.Видимость=Ложь;
		Элементы.ОтветственныйБухгалтер.Видимость=Ложь;
		Элементы.ПриемкаТерминаломЗакончена.Видимость=Ложь;
		Элементы.ПровереноТехнологом.Видимость=Ложь;
		Элементы.РасхожденияСПоставщиком.Видимость=Ложь;
		Элементы.ФормаГруппа1.Видимость=Ложь;
		Элементы.ОтборБезПоступления.Видимость=Ложь;
		Элементы.ОтборРасхождения.Видимость=Ложь;
		
	КонецЕсли; 
	//АК_БЕЛН_20.04.2016--
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтборБезПоступленияПриИзменении(неопределено);
	ОтборОтветственныйБухгалтерПриИзменении(неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйБухгалтерПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтветственныйБухгалтер", ОтборОтветственныйБухгалтер, ,,ЗначениеЗаполнено(ОтборОтветственныйБухгалтер), );
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "РасхожденияСПоставщиком", ОтборРасхождения, ,,ОтборРасхождения, );
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		СсылкаНаДок = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКод);
		Если СсылкаНаДок<>неопределено Тогда
			ОткрытьЗначение(СсылкаНаДок);	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "KeyboardHook" Тогда
		Если Данные = "00122" Тогда
			ШтрихКодОбработанФормой = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗначенияДляПриемкиНоменклатуры(Команда)
	
	ОткрытьФорму("Документ.ПриходныйОрдерСклад.Форма.ФормаНормативныеЗначенияПоНоменклатуре");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПризнакПровереноТехнологомСервер(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	ДокОбъект = Ссылка.ПолучитьОбъект();
	ДокОбъект.ПровереноТехнологом = НЕ ДокОбъект.ПровереноТехнологом;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПризнакПровереноТехнологом(Команда)
	
	ТекСсылка = Элементы.Список.ТекущаяСтрока;
	Если ТекСсылка <> Неопределено Тогда
		УстановитьСнятьПризнакПровереноТехнологомСервер(ТекСсылка);
		Элементы.Список.Обновить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ОтключитьОбработчикОжидания("УстановитьПодсказкуСписка");
	ПодключитьОбработчикОжидания("УстановитьПодсказкуСписка", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодсказкуСписка()
	ОтключитьОбработчикОжидания("УстановитьПодсказкуСписка");
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Список.Подсказка= ЗначРекв(ТекДанные.Ссылка,"ЗамечанияПоРаспознаванию");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначРекв(Ссылка, Рекв)
 	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Рекв);
КонецФункции // ()
 

//+++АК SaMi 2018.02.04 ИП-00015458 
 &НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьПривязкиВСД" Тогда
		Элементы.Список.Обновить();
	КонецЕсли; 
	
КонецПроцедуры
//---АК SaMi  2018.02.04 

