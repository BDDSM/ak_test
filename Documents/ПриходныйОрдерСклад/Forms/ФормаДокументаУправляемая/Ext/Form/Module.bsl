
&НаКлиенте
Перем ПредПоставщик;

&НаКлиенте
Перем ВыполнитьЗакрытие;

&НаКлиенте
Перем ПредСклад;


&НаСервереБезКонтекста
Функция ПолучитьВладельцаРеквизитаСервер(мРеквизит)
	
	Возврат мРеквизит.Владелец;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаводскойНомерОС(мОС)
	
	Возврат мОС.ЗаводскойНомер;
	
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруОС(мОС)
	
	Возврат мОС.Номенклатура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОСПоЗаводскомуНомеру(мЗаводскойНомер)
	
	Возврат Справочники.ОсновныеСредства.НайтиПоРеквизиту("ЗаводскойНомер", мЗаводскойНомер);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНовоеОсновноеСредство(мНоменклатура, мНомер)
	
	НовоеОС = Справочники.ОсновныеСредства.СоздатьЭлемент();
	НовоеОС.Наименование		= Строка(мНоменклатура);
	НовоеОС.Номенклатура		= мНоменклатура;
	//Запрет присвоения инв номера в приходных ордерах
	//НовоеОС.ИнвентарныйНомер	= мНомер;
	НовоеОС.НеЗаполненИнвНомер  = Истина;
	НовоеОС.ЗаводскойНомер		= мНомер;
	Попытка
		НовоеОС.Записать();
	Исключение
		Сообщить("Не удалось записать основное средство" + Символы.ПС + ОписаниеОшибки());
		Возврат Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НовоеОС.Ссылка;
	
КонецФункции

Процедура ПроверитьОснованиеПриПеремещении()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение
			И ЗначениеЗаполнено(Объект.Основание) Тогда
		Сообщить("Основание не заполнено! Нельзя указывать вид операции ""Перемещение на складе"".");
	    Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПустаяСсылка();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ПроверитьОснованиеПриПеремещении();
	
	УстановитьВидимостьИДоступность();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки") Или
		 Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика") Тогда
		ОчиститьОборудованиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОборудованиеСервер()
	
	Объект.Оборудование.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Перем ЭтоОборудование;
	
	Элементы.ТоварыЗагрузитьДанныеСписанияТТ.Доступность = Ложь;
	
	ЭтоОборудованиеОтПоставщика	= (Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика);
	ЭтоОборудованиеСТТ			= (Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки);
	
	ЭтоОборудование = (ЭтоОборудованиеОтПоставщика
							ИЛИ ЭтоОборудованиеСТТ);
													   
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки
			ИЛИ ЭтоОборудованиеСТТ Тогда
		 
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		Элементы.ТоварыЗагрузитьДанныеСписанияТТ.Доступность = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика
				ИЛИ ЭтоОборудованиеОтПоставщика Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		
	Иначе
		ДопустимыеТипы = Неопределено;
	КонецЕсли;
	
	Если НЕ ДопустимыеТипы = Неопределено Тогда
		Элементы.Поставщик.ОграничениеТипа = ДопустимыеТипы;
	КонецЕсли;	
	
	Если Объект.ВидОперации=Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
		Элементы.ТоварыЗаказПоставщику.Видимость=истина;
	Иначе	
		Элементы.ТоварыЗаказПоставщику.Видимость=ложь;
	КонецЕсли;	
	Элементы.Поставщик.Доступность					= (ДопустимыеТипы <> Неопределено);
	Элементы.ПоставщикГруппа.Доступность			= (ДопустимыеТипы <> Неопределено);
	Элементы.ТоварыПеремещают.Видимость				= (Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение);
	Элементы.ТоварыКладовщик.Видимость				= (Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение);
	Элементы.ДатаДокументаПоставщика.Доступность	= (ДопустимыеТипы <> Неопределено);
	Элементы.НомерДокументаПоставщика.Доступность	= (ДопустимыеТипы <> Неопределено);
	//+++АК KIRN 2018.03.28 
	//Элементы.Организация.Видимость					= ЭтоОборудованиеОтПоставщика;
	//---АК KIRN 
	
	// Видимость закладок
	Элементы.СтраницаОборудование.Видимость			= ЭтоОборудование;
	Элементы.СтраницаТовары.Видимость				= НЕ ЭтоОборудование;
	Элементы.СтраницаЗаказыПоставщику.Видимость		= НЕ ЭтоОборудование;
	Элементы.СтраницаИзменения.Видимость			= НЕ ЭтоОборудование;
	
	// Видимость колонок
	Элементы.ОборудованиеНоменклатура.Видимость			= ЭтоОборудованиеОтПоставщика ИЛИ ЭтоОборудованиеСТТ;
	Элементы.ОборудованиеОсновноеСредство.Видимость		= ЭтоОборудованиеСТТ;
	Элементы.ОборудованиеЗаявкаНаСклад.Видимость		= ЭтоОборудованиеОтПоставщика;//ЭтоОборудованиеСТТ;
	//Элементы.ОборудованиеЗаводскойНомер.ТолькоПросмотр	= ЭтоОборудованиеСТТ;
	
	// Подбор имеет смысл только при возврате с ТТ
	Элементы.ОборудованиеКнопкаПодбор.Доступность	= ЭтоОборудованиеСТТ;
	
	// Обязательность заполнения
	
	//+++AK susk
	// виртуальные склады
	
	//Элементы.Кладовщик.АвтоОтметкаНезаполненного	= ЭтоОборудование;
	ЭтоВиртСкладОборудования = ВладелецВиртуальныйСкладПоставщикаОборудования(Объект.Склад);
	Элементы.ОборудованиеНоменклатура.ТолькоПросмотр = НЕ (ЭтоОборудованиеОтПоставщика И ЭтоВиртСкладОборудования);	
	Элементы.Кладовщик.АвтоОтметкаНезаполненного	= ЭтоОборудованиеОтПоставщика И НЕ ЭтоВиртСкладОборудования;
	Элементы.ОборудованиеЗаявкаНаСклад.АвтоОтметкаНезаполненного = ЭтоОборудованиеОтПоставщика И НЕ ЭтоВиртСкладОборудования;
	Элементы.ОборудованиеГенерацияЗаводскихНомеров.Видимость = ЭтоОборудованиеОтПоставщика И ЭтоВиртСкладОборудования;
	//---AK susk
	
	//???ZEZA Элементы.ТоварыЗаявкаНаПроизводствоПерсональнойУпаковки.Видимость = ?(Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика,Истина,Ложь);
	Элементы.СоздатьПеремещение.Видимость=Объект.ОжидаемыйПриход и Объект.ПриемкаТерминаломЗакончена;
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура Оборудование_ОбновитьНомера()
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Оборудование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СписокОС", Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.ЗаводскойНомер
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&СписокОС)";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Оборудование Цикл
		Строка = Таблица.Найти(СтрокаТЧ.ОсновноеСредство);
		Если НЕ Строка = Неопределено Тогда
			СтрокаТЧ.ЗаводскойНомер	= Строка.ЗаводскойНомер;
		Иначе
			СтрокаТЧ.ЗаводскойНомер	= "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"			, СтруктураДанные.Номенклатура);
			
	Если НЕ СтруктураДанные.Номенклатура.НеВедетсяУчетПоХарактеристикам Тогда
		
		Если СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
			
			Запрос.УстановитьПараметр("Поставщик", СтруктураДанные.Поставщик);
			
			// Получим характеристику из цен поставщиков
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЦеныПоставщиковСрезПоследних.Характеристика
			|ИЗ
			|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
			|			&Период,
			|			Номенклатура = &Номенклатура
			|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
			|ГДЕ
			|	НЕ ЦеныПоставщиковСрезПоследних.Характеристика.Неактивная
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЦеныПоставщиковСрезПоследних.Период УБЫВ";
						   
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Период", ?(ЗначениеЗаполнено(СтруктураДанные.Период), "&Период", ""));
			Если ЗначениеЗаполнено(СтруктураДанные.Период) Тогда
				Запрос.УстановитьПараметр("Период", СтруктураДанные.Период);
			КонецЕсли;
			
		Иначе					 
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
			|	И НЕ ХарактеристикиНоменклатуры.Неактивная
			|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		КонецЕсли;					  
		
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		Если ТабРезультат.Количество() = 1 Тогда
			СтруктураДанные.Характеристика = ТабРезультат[0].Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЭтоСырье", СтруктураДанные.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Сырье);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ПолныйВыборПоСкладу()
	
	//Если ЗначениеЗаполнено(Объект.Склад.Владелец) Тогда
		Разрешено = Ложь;
		Разрешено = Разрешено ИЛИ (Найти(Объект.Склад, "Возврат поставщику") > 0);
		Разрешено = Разрешено ИЛИ (Найти(Объект.Склад, "Возврат покупателя") > 0);
		//+++АК SHEP 2018.05.06 ИП-00018453
		//Разрешено = Разрешено ИЛИ Объект.Склад.Владелец = Справочники.СтруктурныеЕдиницы.СторонняяПереработка;
		Разрешено = Разрешено ИЛИ Объект.Склад.Владелец.СторонняяПереработка;
		//---АК SHEP 2018.05.06
		Возврат Разрешено
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;	
	
КонецФункции


////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредПоставщик 	= Объект.Поставщик;
	ПредСклад 		= Объект.Склад;
	
	ВремяЗаезда = Объект.ДатаВремяЗаездаМашины;
	ДатаЗаезда  = Объект.ДатаВремяЗаездаМашины;
	
	ПерезаполнитьПеремещают();
	
	Оборудование_ОбновитьНомера();
	
	ОтобразитьСкрытьДопСтолбцыВТоварах();
	//+++АК SaMi 17.11.2017 
	ОбновитьИнформациюОПривязкахВСД();
	//---АК SaMi  17.11.2017 
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Приходный ордер (склад)");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ Параметры.РасходныйОрдер.Пустая() Тогда
    	Объект.Склад 		= Параметры.РасходныйОрдер.Склад;
		Объект.Автор 		= ПараметрыСеанса.ТекущийПользователь;
		Объект.Основание 	= Параметры.РасходныйОрдер;   		
		Объект.ВидОперации 	= Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение;		
		Объект.Поставщик 	= Параметры.РасходныйОрдер.Получатель;
		Объект.ДатаДокументаПоставщика 	= Параметры.РасходныйОрдер.Дата;
		Объект.НомерДокументаПоставщика = Параметры.РасходныйОрдер.Номер;
		Для Каждого Строка Из Параметры.РасходныйОрдер.Товары Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			//НоваяСтрока.КоличествоВКоробке = НоваяСтрока.Количество / ?(Строка.КоличествоКоробок = 0, 1, Строка.КоличествоКоробок);
		КонецЦикла;    
		
        ЭтаФорма.Модифицированность = Истина;
    КонецЕсли;
	
	Если НЕ Параметры.РасходныйОрдерДополнительный.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТовара = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);	
		
		Объект.Склад 		= Параметры.Склад;
		Объект.Автор 		= ПараметрыСеанса.ТекущийПользователь;
		Объект.Основание 	= Параметры.РасходныйОрдерДополнительный;   		
		Объект.ВидОперации 	= Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение;		
		Объект.Поставщик 	= Параметры.РасходныйОрдерДополнительный.Склад.Владелец;
		Объект.ДатаДокументаПоставщика 	= Параметры.РасходныйОрдерДополнительный.Дата;
		Объект.НомерДокументаПоставщика = Параметры.РасходныйОрдерДополнительный.Номер;
		
		ОтборСклада = Новый Структура;
		ОтборСклада.Вставить("Склад", Параметры.Склад);
				
		НайденныеСтроки = ТаблицаТовара.НайтиСтроки(ОтборСклада);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			//НоваяСтрока.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаХраненияОстатков;                   
		КонецЦикла;	
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;	
		
	УстановитьВидимостьИДоступность();
	//ПерезаполнитьПеремещают();
	Элементы.ВыполнятьДвиженияДатойДокумента.Доступность = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Финансист") ИЛИ РольДоступна("ФинансовыйДиректор");
	Элементы.Дата.ТолькоПросмотр = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Финансист") ИЛИ РольДоступна("ФинансовыйДиректор"));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(Объект.Ссылка.ПолучитьОбъект(), ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	ПересчитатьТоварыБезСертификатов();
	
	ЭтаФорма.ПризнакОжидаемыйПриОткрытии = Объект.ОжидаемыйПриход;
	//ВетСвидельства.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	СписокВСД.Отбор.Элементы[0].ПравоеЗначение=Объект.Ссылка;
	КаталогРезультат=ПолучитьПапку();
	
//+++ KOPA 27.11.2017 [ИП-00017264]
	ПроверитьНаличиеТоваровПоставщикаНаСкладеВозвратаНаСервере();
//--- KOPA
КонецПроцедуры

&НаСервере
Функция СделатьРаспределение_Сервер()
	МассивТоваров 	= Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	//+++АК KIRN 2018.09.07 
	МассивТТ 		= ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(Объект.Склад.Владелец, МассивТоваров,,Объект.Склад);
	//МассивТТ 		= ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек(Объект.Склад.Владелец, МассивТоваров);
	//---АК KIRN 
	
	ТекстНомер_Р = ДопМодульСервер.ОтправитьДанныеДляРаспределенияПоТТ(ТекущаяДата(), МассивТТ, МассивТоваров, Объект.Склад.Владелец,,,,Объект.Склад);
	
	//+++АК KIRN 2018.07.04 ИП-00019149 
	ДопМодульСервер.УстановитьПризнакБлокировкиДляРаспределения(МассивТоваров, Объект.Склад.Владелец, Ложь);
	//---АК KIRN 
	
	Возврат ТекстНомер_Р;
	
КонецФункции

//+++АК SHEP 2018.10.11 ИП-00019616
&НаСервере
Функция СделатьРаспределениеПлюс_Сервер()
	
	мСклад						= Объект.Склад;
	мСтруктурноеПодразделение	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мСклад, "Владелец");
	мМассивНоменклатуры			= Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	мМассивТТ					= ДопМодульСервер.ПолучитьМассивДоступныхТорговыхТочек_ПлюсНеучастБлок(мСтруктурноеПодразделение, мМассивНоменклатуры,, мСклад);
	
	ДанныеРаспределения = Новый Структура("ДатаРаспределения,Организация,СтруктурноеПодразделение,Склад",
		ТекущаяДата(), Объект.Организация, мСтруктурноеПодразделение, мСклад);
		
	ДопМодульСервер.ДобавитьАналогиИКомплекты(мМассивНоменклатуры);
	ДанныеРаспределения.Вставить("МассивНоменклатуры", мМассивНоменклатуры);
	ДанныеРаспределения.Вставить("МассивТорговыхТочек", мМассивТТ);
	ДанныеРаспределения.Вставить("Документ", Объект.Ссылка);
	ТекстИДТоваров = ДопМодульСервер.ИдентификаторыТоваров(мМассивНоменклатуры);
	ДанныеРаспределения.Вставить("ТекстИДТоваров", ТекстИДТоваров);
	
	Если ДопМодульСервер.ЕстьПодобноеРаспределениеТовара(ТекстИДТоваров, мСклад) Тогда
		Возврат "";
	КонецЕсли;	
	
	ТекстНомер_Р = Обработки.РаспределениеТоваровПоТорговымТочкамПлюс.ДобавитьРаспределение(ДанныеРаспределения);
	
	Возврат ТекстНомер_Р;
	
КонецФункции
 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+++АК KIRN 2018.07.31 ИП-00019315.000.00000002
	Если Не ВыполнитьЗакрытие Тогда
		Если (Объект.НомерДокументаТТН = "" или Объект.ДатаДокументаТТН = Дата(1,1,1)) и (Объект.НомерДокументаПоставщика <> "" И Объект.ДатаДокументаПоставщика <> Дата(1,1,1)) Тогда
			Отказ=Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, ПараметрыЗаписи),
			"Заполнить номер и дату ТТН на основании номера / дата товарной накладной?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕСли;
	//---АК KIRN 

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика") Тогда//ВозвратОборудованияСТорговойТочки") Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Для Каждого СтрокаТЧ Из Объект.Оборудование Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаявкаНаСклад) Тогда
					
					//+++AK susk
					Если НЕ ВладелецВиртуальныйСкладПоставщикаОборудования(Объект.Склад) Тогда
					//---AK susk	
					
						ОбщегоНазначения.СообщитьОбОшибке("Не заполнена колонка ""Заявка на склад"" в строке " + СтрокаТЧ.НомерСтроки + " списка ""Оборудование""");
						Отказ = Истина;
						
					//+++
					КонецЕсли;
				    //---
					
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
	КонецЕсли;
	//+++АК BELN 2018.10.19 ИП-00020183.01
	Струк=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад,"ПриемкаБезСертификатов");	
	Если НЕ Струк.ПриемкаБезСертификатов Тогда
		Для Каждого СтрокаТовар Из СертификатыКТоварам Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовар.ДатаНачалаДействия)
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаТовар.ДатаОкончанияДействия) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В таблице сертификатов не заполнена дата начала действия или дата окончания действия сертификата",,,, Отказ);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(СтрокаТовар.РегистрационныйНомерСертификата) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В таблице сертификатов не заполнен регистрационный номер сертификата",,,, Отказ);
			КонецЕсли;	
		КонецЦикла;	

	КонецЕсли; 
	//---АК BELN 2018.10.19 
	
КонецПроцедуры

//---АК BELN 2018.10.19 

//+++АК KIRN 2018.07.31 ИП-00019315.000.00000002 
&НаКлиенте
Процедура ПоказатьВопросЗавершение(Результат, ПараметрыЗаписи) Экспорт
	ВыполнитьЗакрытие = Истина;
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НомерДокументаТТН = Объект.НомерДокументаПоставщика;
		Объект.ДатаДокументаТТН = Объект.ДатаДокументаПоставщика;
	Иначе
	КонецЕСли;
	Записать(ПараметрыЗаписи);
КонецПРоцедуры	
//---АК KIRN 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика Тогда
		Объект.Товары.Очистить();
	Иначе
		Объект.Оборудование.Очистить();
	КонецЕсли;
	
	//Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетПроводитьПриходникиБезУказанияКоробок, Ложь) Тогда
	//
	//	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика
	//		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение
	//		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки
	//		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика Тогда
	//		Для Каждого СтрокаТовар Из Объект.Товары Цикл
	//			Если СтрокаТовар.Количество <> 0
	//				И СтрокаТовар.КоличествоКоробок = 0 Тогда
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТовар.НомерСтроки, "ЧГ=0") +
	//					" не указано количество коробок", Объект, "Товары[" + Формат(СтрокаТовар.НомерСтроки - 1, "ЧГ=0") + "].КоличествоКоробок", , Отказ);
	//			КонецЕсли;	
	//		КонецЦикла;	
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	//если идет поступление сырья, то должен быть указан склад сырья
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Товары)
		|	И НЕ Номенклатура.ТипТовара В (ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка), ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Сырье))";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя в документе возврата из переработки указать номенклатуру " + Выборка.Ссылка + ". Она не является ни упаковкой, ни сырьем.", Объект, , , Отказ);
		КонецЦикла;	
	КонецЕсли;	
	
	
	ЗапросКешТовары = Новый Запрос();
	ЗапросКешТовары.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	ЗапросКешТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.НеВедетсяУчетПоХарактеристикам,
	|	Номенклатура.Складируемая,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК Базовая,
	|	Номенклатура.РаспределяетсяНеЦелымиКоробками
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ВЫБОР
	|		КОГДА ЛогированиеСменыСтатусовАктивностиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Неактивная
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогированиеСменыСтатусовАктивности.СрезПоследних(&Дата, ) КАК ЛогированиеСменыСтатусовАктивностиСрезПоследних
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЛогированиеСменыСтатусовАктивностиСрезПоследних.Объект
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В(&Характеристики)";
							
	ТабТов = Объект.Товары.Выгрузить();
	ЗапросКешТовары.УстановитьПараметр("Товары"			, ТабТов.ВыгрузитьКолонку("Номенклатура"));
	ЗапросКешТовары.УстановитьПараметр("Характеристики"	, ТабТов.ВыгрузитьКолонку("Характеристика"));
	Результаты = ЗапросКешТовары.ВыполнитьПакет();
	ТабКешТовары = Результаты[0].Выгрузить();
	ТабКешХарактеристики = Результаты[1].Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаКешТовар = ТабКешТовары.Найти(СтрокаТЧ.Номенклатура, "Ссылка");
		Если СтрокаКешТовар.НеВедетсяУчетПоХарактеристикам Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
				" не указана характеристика", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Харатеристика", , Отказ);
		Иначе
			СтрокаКешХарактеристика = ТабКешХарактеристики.Найти(СтрокаТЧ.Характеристика, "Ссылка");
			Если НЕ СтрокаКешХарактеристика.Владелец = СтрокаТЧ.Номенклатура Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
					" характеристика не соответствует номенклатуре", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Харатеристика", , Отказ);
			КонецЕсли;
			Если СтрокаКешХарактеристика.Неактивная Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
					" указана не активная характеристика", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].Харатеристика", , Отказ);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаКешТовар = ТабКешТовары.Найти(СтрокаТЧ.Номенклатура, "Ссылка");
		Если НЕ СтрокаКешТовар.Складируемая Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаПроизводства) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0") +
				" не указана дата производства", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].ДатаПроизводства");
				//" не указана дата производства", Объект, "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧГ=0") + "].ДатаПроизводства", , Отказ);
		КонецЕсли;	
	КонецЦикла;
	
	ПроверятьПраваНаНоменклатуру = НЕ (РольДоступна("Кладовщик") ИЛИ РольДоступна("ОператорСклада") ИЛИ РольДоступна("ПолныеПрава"));
	Если ПроверятьПраваНаНоменклатуру
			И НЕ ПолныйВыборПоСкладу() Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Товары"		, Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьНоменклатураВОперацияхОрдеров КАК ДоступностьНоменклатураВОперацияхОрдеров
		|		ПО (СпрНоменклатура.Ссылка = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель.Родитель.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура
		|				ИЛИ СпрНоменклатура.Родитель.Родитель.Родитель.Родитель = ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура)
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&Товары)
		|	И ДоступностьНоменклатураВОперацияхОрдеров.Номенклатура ЕСТЬ NULL 
		|	И ДоступностьНоменклатураВОперацияхОрдеров.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпрНоменклатура.Наименование";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		ТекстЗапретНоменклатура = "";
		Пока Выборка.Следующий() Цикл
			ТекстЗапретНоменклатура = ТекстЗапретНоменклатура + ?(ЗначениеЗаполнено(ТекстЗапретНоменклатура), Символы.ПС, "") + "  - " + Выборка.Ссылка;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстЗапретНоменклатура) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вам запрещено выполнять операции со следующей номенклатурой:" +
																Символы.ПС + ТекстЗапретНоменклатура, , , , Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если (НЕ ЗначениеЗаполнено(ВремяЗаезда) И ЗначениеЗаполнено(ДатаЗаезда)) 
			ИЛИ (ЗначениеЗаполнено(ВремяЗаезда) И НЕ ЗначениеЗаполнено(ДатаЗаезда)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить и дату, и время заезда!", , , , Отказ);
	ИначеЕсли ЗначениеЗаполнено(ВремяЗаезда) И ЗначениеЗаполнено(ДатаЗаезда) Тогда
		ТекущийОбъект.ДатаВремяЗаездаМашины = Дата(Формат(ДатаЗаезда, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяЗаезда, "ДЛФ=T"));	
		ТекущийОбъект.ВремяЗаездаМашины = ВремяЗаезда;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки
			И ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Если ТипЗнч(Объект.Поставщик) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для операции возврата из торговой точки поставщиком должна быть выбрана торговая точка!", , , , Отказ);
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Поставщик.НомерТочки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для операции возврата из торговой точки поставщиком должна быть выбрана торговая точка!", , , , Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Объект.ВидОперации = Перечисления.ВидыОперацийПриходСкладскойУчет.ОтПоставщика Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивХарактеристики", ТабТов.ВыгрузитьКолонку("Характеристика"));
		Запрос.УстановитьПараметр("Дата"				, Объект.Дата);
		Запрос.УстановитьПараметр("Склад"				, Объект.Склад.Владелец);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.СрокГодности * ХарактеристикиНоменклатуры.ТипСрокаГодности.КоэффициентВСутках, 0) КАК СрокГодности,
		|	ВЫБОР
		|		КОГДА ХарактеристикиНоменклатуры.ПредельноеКоличествоДнейСрокаГодности = 0
		|			ТОГДА 366
		|		ИНАЧЕ ХарактеристикиНоменклатуры.ПредельноеКоличествоДнейСрокаГодности
		|	КОНЕЦ КАК ДнейСрока
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&МассивХарактеристики)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НормативныйКвантУпаковкиСрезПоследних.Характеристика,
		|	НормативныйКвантУпаковкиСрезПоследних.Квант,
		|	НормативныйКвантУпаковкиСрезПоследних.Характеристика.Владелец.РаспределяетсяНеЦелымиКоробками КАК РаспределяетсяНеЦелымиКоробками,
		|	НормативныйКвантУпаковкиСрезПоследних.Характеристика.Владелец.ПредельныйПроцентОтклоненияОтКванта / 100 КАК ПредельныйПроцентОтклоненияОтКванта
		|ИЗ
		|	РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(
		|			&Дата,
		|			Склад = &Склад
		|				И Характеристика В (&МассивХарактеристики)) КАК НормативныйКвантУпаковкиСрезПоследних";
					   
		Результаты = Запрос.ВыполнитьПакет();
		КешСроки = Результаты[0].Выгрузить();
		КешКванты = Результаты[1].Выгрузить();
		Если НЕ Объект.ПровереноТехнологом Тогда
			Для Каждого СтрокаТаб Из Объект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТаб.ДатаПроизводства) Тогда
					Если СтрокаТаб.ДатаПроизводства > НачалоДня(Объект.Дата + 86400) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для номенклатуры " + СтрокаТаб.Номенклатура + " указана не правильная дата производства (дата производства не может быть больше на один день даты документа)", , , , Отказ);
					КонецЕсли;	
					СтрокаКеш = КешСроки.Найти(СтрокаТаб.Характеристика, "Ссылка");
					Если СтрокаКеш <> Неопределено Тогда
						Если ЗначениеЗаполнено(СтрокаКеш.СрокГодности) Тогда
							Если НачалоДня(Объект.Дата) > СтрокаТаб.ДатаПроизводства + СтрокаКеш.СрокГодности * 86400 Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для номенклатуры " + СтрокаТаб.Номенклатура + " указана не правильная дата производства (дата производства плюс срок годности не может быть меньше даты документа)", , , , Отказ);
							КонецЕсли;
						КонецЕсли;	
						Если (НачалоДня(Объект.Дата) - СтрокаТаб.ДатаПроизводства) / 86400 > СтрокаКеш.ДнейСрока Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для номенклатуры " + СтрокаТаб.Номенклатура + " достигнутое предельное количество дней срока годности при приемке", , , , Отказ);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				КолвоВКоробке = ?(СтрокаТаб.КоличествоКоробок = 0, 0, СтрокаТаб.Количество / СтрокаТаб.КоличествоКоробок);
				
				Если ЗначениеЗаполнено(КолвоВКоробке) Тогда
					СтрокаКеш = КешКванты.Найти(СтрокаТаб.Характеристика, "Характеристика");
					Если СтрокаКеш <> Неопределено
						И ЗначениеЗаполнено(СтрокаКеш.Квант)
						И НЕ СтрокаКеш.РаспределяетсяНеЦелымиКоробками Тогда
						Отношение = КолвоВКоробке / СтрокаКеш.Квант;
						ДопустимыйПроцентОтклонения = ?(ЗначениеЗаполнено(СтрокаКеш.ПредельныйПроцентОтклоненияОтКванта), СтрокаКеш.ПредельныйПроцентОтклоненияОтКванта, 0.15);
						Если Отношение > (1 + ДопустимыйПроцентОтклонения) ИЛИ Отношение < (1 - ДопустимыйПроцентОтклонения) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для номенклатуры " + СтрокаТаб.Номенклатура + " количество в коробке отличается от нормативного кванта более, чем на " + ДопустимыйПроцентОтклонения * 100 + "%", , , , Отказ);
						КонецЕсли;
					КонецЕсли;
					
					СтрокаКешТовар = ТабКешТовары.Найти(СтрокаТаб.Номенклатура, "Ссылка");
					Если СтрокаКешТовар <> Неопределено
						И НРег(СтрокаКешТовар.Базовая) = "шт"
						И Цел(КолвоВКоробке) <> КолвоВКоробке Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для номенклатуры " + СтрокаТаб.Номенклатура + " нельзя оприходовать количество штук не целыми коробками", , , , Отказ);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;
	//+++АК BELN 2018.10.19 ИП-00020183.01
	БезСертификатов=Объект.Склад.ПриемкаБезСертификатов;
	//---АК BELN 2018.10.19 
	
	//запишем сертификаты
	Если Не Отказ
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
			//+++АК BELN 2018.10.19 ИП-00020183.01
			И НЕ БезСертификатов
			//---АК BELN 2018.10.19 
			Тогда
		УстановитьПривилегированныйРежим(Истина);
		Каталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(Каталог, 1) <> "\" Тогда
			Каталог = Каталог + "\";
		КонецЕсли;	
		Каталог = Каталог + "Сертификаты";
		Для Каждого СтрокаБезСертификата Из ТоварыБезСертификата Цикл
			Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаБезСертификата.Номенклатура)).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаБезСертификата.РегистрационныйНомерСертификата) Тогда
				СтрокиСертификаты = СертификатыКТоварам.НайтиСтроки(Новый Структура("РегистрационныйНомерСертификата", СтрокаБезСертификата.РегистрационныйНомерСертификата));
				Если СтрокиСертификаты.Количество() > 0 Тогда
					
					ТЗ_ИменаФайлов = Новый ТаблицаЗначений;
					ТЗ_ИменаФайлов.Колонки.Добавить("ИмяФайла");
					
					СтрокаИменаФайловПолное = "";
					СтрокаИменаФайлов = "";
					
					Для Каждого СтрокаСертификат Из СтрокиСертификаты Цикл
						Если НЕ ЗначениеЗаполнено(СтрокаСертификат.Файл) Тогда
							Продолжить;
						КонецЕсли;
						ИмяФайла = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(СтрокаСертификат.Файл);
						ФайлИсточник = Новый Файл(ИмяФайла);
						Если ФайлИсточник.Существует() Тогда
							//Товар = Строка(СтрокаБезСертификата.Номенклатура);
							//Товар = СтрЗаменить(Товар, ".", "_");
							//Товар = СтрЗаменить(Товар, "/", "_");
							//Товар = СтрЗаменить(Товар, "\", "_");
							//Товар = СтрЗаменить(Товар, "%", "_");
							//Товар = СтрЗаменить(Товар, """", "");
							//Каталог = "\\Server00\pdf-сертификаты\" + Товар;
							//СоздатьКаталог(Каталог);
							ИмяФайлаПолучатель = Каталог + "\" + ФайлИсточник.ИмяБезРасширения + ФайлИсточник.Расширение;
							//ПереместитьФайл(ФайлИсточник.ПолноеИмя, ИмяФайлаПолучатель);
							КопироватьФайл(ФайлИсточник.ПолноеИмя, ИмяФайлаПолучатель);
							Если НРег(ФайлИсточник.Расширение) = ".jpg" Тогда
								ЗапуститьПриложение("\\10.0.0.90\pdf-сертификаты\CompressJPG\AKCompressJPG.exe """ + ИмяФайлаПолучатель + """ """ + ИмяФайлаПолучатель + """",, Истина);
							КонецЕсли;
							
							СтрокаИменаФайловПолное = СтрокаИменаФайловПолное + ИмяФайлаПолучатель + "; ";
							СтрокаИменаФайлов = СтрокаИменаФайлов + ИмяФайлаПолучатель + "; ";
							
							НовСтрока = ТЗ_ИменаФайлов.Добавить();
							НовСтрока.ИмяФайла = ИмяФайлаПолучатель;
							
						КонецЕсли;	
					КонецЦикла;	
					
					ФайлПриемник = Новый Файл(ИмяФайлаПолучатель);
					Если ФайлПриемник.Существует() Тогда
						Запись = РегистрыСведений.СертификатыНаПродукцию.СоздатьМенеджерЗаписи();
						Запись.Номенклатура = СтрокаБезСертификата.Номенклатура;
						Запись.Характеристика = СтрокаБезСертификата.Характеристика;
						Запись.ИмяФайла = СтрокаИменаФайловПолное;
						Запись.РегистрационныйНомер = ВРег(СтрокаСертификат.РегистрационныйНомерСертификата);
						Запись.Период = СтрокиСертификаты[0].ДатаНачалаДействия;
						Запись.ДействуетДо = СтрокиСертификаты[0].ДатаОкончанияДействия;
						Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
						Запись.ДатаДобавленияФайла = ТекущаяДата();
						Запись.ХранилищеИменФайловСертификата = Новый ХранилищеЗначения(ТЗ_ИменаФайлов);
						
						Запись.Записать();
						
						Для Каждого СтрокаТабТЗ Из ТЗ_ИменаФайлов Цикл
							Файл = Новый Файл(СтрокаТабТЗ.ИмяФайла);
							ОтнИмяФайл = Файл.ИмяБезРасширения + Файл.Расширение;
							Расш = СтрЗаменить(Файл.Расширение, ".", "");
							ПрикрепленныеКартинки.ВнестиЗаписьПриложенногоФайла(Новый Структура("Номенклатура, Характеристика, ТипЗаписи, ОтносительноеИмяФайла, Расширение"
							, СтрокаБезСертификата.Номенклатура, СтрокаБезСертификата.Характеристика, Перечисления.ТипыЗаписейПриложенныхКартинок.Сертификат, ОтнИмяФайл, Расш));
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;
			Иначе
				//+++АК BARA  ИП-00017974   2018.04.02   
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("К товару " + СтрокаБезСертификата.Номенклатура + " с характеристикой " + СтрокаБезСертификата.Характеристика + " не привязан сертификат!");
				//Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетПроводитьПриходникиБезСертификатов, Ложь) 
				//	//+++VERN
				//	И НЕ Объект.ВидОперации=Перечисления.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки
				//	//---VERN	
				//Тогда
				//	Отказ = Истина;
				//КонецЕсли;	
				//---АК BARA  ИП-00017974 
			КонецЕсли;	
		КонецЦикла;	
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СтрЧислоВхождений(ИсточникВыбора.ИмяФормы, "Справочник.ОсновныеСредства") > 0 Тогда
		
		// Проверка на то, что ОС уже есть в ТЧ
		Массив = Объект.Оборудование.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыбранноеЗначение));
		Если Массив.Количество()>0 Тогда
			Если Вопрос(Строка(ВыбранноеЗначение) + " уже есть в табличной части. Продолжить?", РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем в ТЧ
		СтрокаТЧ = Объект.Оборудование.Добавить();
		СтрокаТЧ.ОсновноеСредство	= ВыбранноеЗначение;
		СтрокаТЧ.Номенклатура = ВыбранноеЗначение.Номенклатура;
		СтрокаТЧ.ЗаводскойНомер		= ПолучитьЗаводскойНомерОС(ВыбранноеЗначение);
			
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ИмяСобытия")
		И ВыбранноеЗначение.ИмяСобытия = "Отсканировано" Тогда
		Если Элементы.ПанельЗакладки.ТекущаяСтраница.Имя = "СтраницаТоварыБезСертификатов" Тогда
			Для Каждого ЭлементКартинка Из ВыбранноеЗначение.МассивКартинок Цикл
				СтрокаТаб = СертификатыКТоварам.Добавить();
				СтрокаТаб.Файл = ЭлементКартинка;
				СтрокаТаб.ДатаНачалаДействия = ТекущаяДата();
			КонецЦикла;
		Иначе	
			Для Каждого ЭлементКартинка Из ВыбранноеЗначение.МассивКартинок Цикл
				СтрокаТаб = Объект.ПрикрепленныеФайлы.Добавить();
				СтрокаТаб.Файл = ЭлементКартинка;
	
				//АК БЕЛН 25.01.2016++
				//ОтправитьНаРаспознавание(СтрокаТаб.Файл);
				//АК БЕЛН 25.01.2016--
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	
	//
	Если ВыбранноеЗначение = "ПОДБОР_ВСД" Тогда
		ОбновитьИнформациюОПривязкахВСД();
		Элементы.СписокВСД.Обновить();		
КонецЕсли;	
	
КонецПроцедуры

//АК БЕЛН 25.01.2016++
&НаСервере
Процедура ОтправитьНаРаспознавание(ФайлСсылка)
		
	КаталогФайнРидер = Константы.КаталогФайнРидер.Получить();
	
	Если Прав(КаталогФайнРидер, 1) <> "\" Тогда
		КаталогФайнРидер = КаталогФайнРидер + "\";
	КонецЕсли;	
	
	КаталогФайнРидер=СтрЗаменить(врег(КаталогФайнРидер),врег("\sticker\"),"");
	
	//КаталогДок=КаталогФайнРидер+"\DOC\";
	
	КаталогФайнРидер=КаталогФайнРидер+"\draft\";
	
	
	ФайлПуть = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка);
	ДД=Новый ДвоичныеДанные(ФайлПуть);
	Картинка=Новый Картинка(ДД);
	Попытка 
		//КопироватьФайл(ФайлПуть,  КонстантаКаталогФайнРидер + ФайлСсылка.УникальныйИдентификатор() + ?(Лев(ФайлСсылка.Расширение, 1) = ".", "", ".") +  ФайлСсылка.Расширение);
		Картинка.Записать(КаталогФайнРидер + ФайлСсылка.УникальныйИдентификатор() + ".jpg");
		//Сообщить(КаталогФайнРидер + ФайлСсылка.УникальныйИдентификатор() + ".jpg");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПапку()
	КаталогФайнРидер = Константы.КаталогФайнРидер.Получить();
	
	Если Прав(КаталогФайнРидер, 1) <> "\" Тогда
		КаталогФайнРидер = КаталогФайнРидер + "\";
	КонецЕсли;	
	
	КаталогФайнРидер=СтрЗаменить(врег(КаталогФайнРидер),врег("\sticker\"),"");
	
	КаталогРезультат1=КаталогФайнРидер+"\DOC\";
	Возврат КаталогРезультат1;	

КонецФункции

&НаСервереБезКонтекста
Функция ВернутьИДФайла(Файл)
	Возврат Строка(Файл.УникальныйИдентификатор());	
КонецФункции

&НаКлиенте
Процедура РаспознаваниеСканов() Экспорт
	

	//Файлы = НайтиФайлы(КаталогРезультат, "*.docx");
	
	МассивИдентификаторов = Новый Массив;
	//СоотТекст=Новый Соответствие;
	Для Каждого ФайлВСтроке Из Объект.ПрикрепленныеФайлы Цикл
		Если  ФайлВСтроке.Распознано или ФайлВСтроке.ЭтоВетСвидетельство Тогда
			Продолжить;                                                                       
		КонецЕсли; 
		//ИмяБезРасширения=Прав(Файл.ИмяБезРасширения,36);
		ИмяБезРасширения=ВернутьИДФайла(ФайлВСтроке.Файл); 		
		//Попытка
		//	ФайлСсылка=Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИмяБезРасширения));
		//Исключение
		//	Продолжить;
		//КонецПопытки;
		Файл=Новый Файл(КаталогРезультат + ИмяБезРасширения  + ".docx");
		Если Файл.Существует()=Ложь Тогда
			Продолжить;
		Иначе
			//Сообщить(ФайлСсылка);
			МассивИдентификаторов.Добавить(ФайлВСтроке.Файл);
			//Текст = Новый ТекстовыйДокумент;
			ИмяФайла = КаталогРезультат + ИмяБезРасширения  + ".docx";
			//Текст.Прочитать(ИмяФайла);
			//СтрТекст=Текст.ПолучитьТекст();
					
			
			ПриложениеWord=Новый COMОбъект("Word.Application");
			ПриложениеWord.displayalerts=0;
			ПриложениеWord.Documents.Open(ИмяФайла);
			//Сообщить(ИмяФайла);
			Документ = ПриложениеWord.ActiveDocument();
			СтрТекст="";
			Для НомерТаблицы = 1 по Документ.Shapes.Count Цикл
				Таблица=Документ.Shapes.Item(НомерТаблицы);
				Если Таблица.TextFrame.hastext=Ложь Тогда
					Продолжить;
				КонецЕсли; 
				//Сообщить(строка(Таблица.TextFrame.TextRange.Text));	
				СтрТекст=СтрТекст+Символы.ПС+строка(Таблица.TextFrame.TextRange.Text);			
			КонецЦикла;
			
			Документ.Close(); 
			ПриложениеWord.Quit();	
			//Прервать;
			//СоотТекст.Вставить(ФайлВСтроке.Файл,СтрТекст);
			
			ФайлВСтроке.РаспознанныйТекст=СтрТекст;
			ФайлВСтроке.Распознано=Истина;
			
			Попытка
				УдалитьФайлы(ИмяФайла);
			Исключение
			КонецПопытки;
			ДобавитьЗамечанияПоРаспознанию();
		КонецЕсли; 
	КонецЦикла;  
	//Возврат;
КонецПроцедуры



&НаСервере
Процедура ДобавитьЗамечанияПоРаспознанию()
	//Если ТипЗнч(ОбъектДокумента)=Тип("ДокументОбъект.ПриходныйОрдерСклад") Тогда
		ФлТорг12=Ложь;
		ФлИННКонтр=Ложь;
		ФлУПД=Ложь;
		
		Для каждого Стр Из Объект.ПрикрепленныеФайлы Цикл
			Если  Не Стр.Распознано или стр.ЭтоВетСвидетельство Тогда
				Продолжить;                                                                       
			КонецЕсли; 
			Если Найти(врег(Стр.РаспознанныйТекст),"ТОРГ-12")>0 и не ФлТорг12 и не ФлУПД Тогда
				ФлТорг12=Истина;
				Если ТипЗнч(Объект.Поставщик)=Тип("СправочникСсылка.Контрагенты") и Найти((Стр.РаспознанныйТекст),Объект.Поставщик.ИНН)>0  Тогда
					ФлИННКонтр=Истина;
				КонецЕсли; 
			КонецЕсли;
			
			Если Найти(врег(Стр.РаспознанныйТекст),"УНИВЕРС")>0 и
				Найти(врег(Стр.РаспознанныйТекст),"ПЕРЕДАТ")>0 и
				Найти(врег(Стр.РаспознанныйТекст),"ДОКУМЕНТ")>0 
				и не ФлТорг12 и не ФлУПД Тогда
				ФлУПД=Истина;
				Если ТипЗнч(Объект.Поставщик)=Тип("СправочникСсылка.Контрагенты") и Найти((Стр.РаспознанныйТекст),Объект.Поставщик.ИНН)>0  Тогда
					ФлИННКонтр=Истина;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЦикла; 
		Замечание="";
		Если Не ФлТорг12 и Не ФлУПД Тогда
			Замечание="Не найден Торг-12 (УПД) среди прикрепленных сканов";
		ИначеЕсли (ФлТорг12 или ФлУПД) и не ФлИННКонтр и ТипЗнч(Объект.Поставщик)=Тип("СправочникСсылка.Контрагенты")  Тогда
			Замечание="Неверный ИНН поставщика в скане Торг-12 (УПД)";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Замечание) Тогда
			Объект.ЗамечанияПоРаспознаванию=Замечание;            
			Объект.ЕстьЗамечанияПоРаспознаванию=Истина;
		Иначе
			Объект.ЗамечанияПоРаспознаванию=Замечание;            
			Объект.ЕстьЗамечанияПоРаспознаванию=Ложь;
		КонецЕсли;
		Модифицированность=Истина;
	//КонецЕсли;                                                                        
КонецПроцедуры

//АК БЕЛН 25.01.2016--

Процедура ЗакрытьОтработанныеЗаказы()
	
	Док = РеквизитФормыВЗначение("Объект");
	Док.ЗакрытьОтработанныеЗаказы();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// распределение по ТТ, в случае снятия признака ожидаемого товара
	//Если ЭтаФорма.ПризнакОжидаемыйПриОткрытии
	//		И НЕ Объект.ОжидаемыйПриход
	//		И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение)
	//		И Вопрос("Изменился признак ""Ожидаемый приход"", необходимо произвести распределение товара по торговым точкам. Распределить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//		
	//	//+++АК KIRN 2018.06.29  
	//	ТекстНомер_Р = СделатьРаспределение_Сервер();
	//	
	//	Если НЕ ТекстНомер_Р = "" Тогда
	//		ПоказатьПредупреждение(,"Выполнено распределение, номер " + ТекстНомер_Р + ".");
	//	Иначе
	//		ПоказатьПредупреждение(,"Распределение не выполнено.");
	//	КонецЕсли;
	//	//---АК KIRN 
	//	
	//КонецЕсли;
	
	//+++VERN
	Если ЗначениеЗаполнено(Объект.Основание) тогда
		Оповестить("ЗаписанРаходныйОрдер",Объект.Основание,Объект.Ссылка);
	КонецЕсли;
	//---VERN
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	Для Каждого Строка Из Объект.Товары Цикл
		РасчитатьКоличествоВКоробке(Строка.КоличествоВКоробке, Строка.Количество, Строка.КоличествоКоробок);	
	КонецЦикла;
	
	Оборудование_ОбновитьНомера();
	Если НЕ Объект.ОжидаемыйПриход Тогда
		ЗакрытьОтработанныеЗаказы();
	КонецЕсли;	
	
	//автоматическое создание заявки на склад для отгрузки этикетки
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ЗначениеЗаполнено(ТекущийОбъект.Основание)
			И ТипЗнч(ТекущийОбъект.Основание) = Тип("ДокументСсылка.ЗаявкаНаПоставкуУпаковки")
			И ТекущийОбъект.Дата >= '20151021' Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка"			, ТекущийОбъект.Основание);
		Запрос.УстановитьПараметр("ПриходныйОрдер"	, ТекущийОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаПоставкуУпаковкиТовары.Номенклатура,
		|	СУММА(ЗаявкаНаПоставкуУпаковкиТовары.Количество) КАК Количество,
		|	ЗаявкаНаПоставкуУпаковкиТовары.Получатель,
		|	ЗаявкаНаПоставкуУпаковкиТовары.Номенклатура.Наименование
		|ИЗ
		|	Документ.ЗаявкаНаПоставкуУпаковки.Товары КАК ЗаявкаНаПоставкуУпаковкиТовары
		|ГДЕ
		|	ЗаявкаНаПоставкуУпаковкиТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаПоставкуУпаковкиТовары.Номенклатура,
		|	ЗаявкаНаПоставкуУпаковкиТовары.Получатель,
		|	ЗаявкаНаПоставкуУпаковкиТовары.Номенклатура.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаСкладТовары.Номенклатура,
		|	ЗаявкаНаСкладТовары.Характеристика,
		|	СУММА(ЗаявкаНаСкладТовары.Количество) КАК Количество,
		|	ЗаявкаНаСкладТовары.Ссылка.Получатель
		|ИЗ
		|	Документ.ЗаявкаНаСклад.Товары КАК ЗаявкаНаСкладТовары
		|ГДЕ
		|	ЗаявкаНаСкладТовары.Ссылка.Основание = &Ссылка
		|	И ЗаявкаНаСкладТовары.Ссылка.ПриходныйОрдер = &ПриходныйОрдер
		|	И ЗаявкаНаСкладТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаСкладТовары.Номенклатура,
		|	ЗаявкаНаСкладТовары.Характеристика,
		|	ЗаявкаНаСкладТовары.Ссылка.Получатель";
					   
		Результаты = Запрос.ВыполнитьПакет();
		
		ТабПоЗаявке 	= Результаты[0].Выгрузить();
		ТабУжеСоздано 	= Результаты[1].Выгрузить();
		
		ТабНоменклатура = Новый ТаблицаЗначений();
		ТабНоменклатура.Колонки.Добавить("Номенклатура");
		ТабНоменклатура.Колонки.Добавить("Характеристика");
		ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
		ТабНоменклатура.Колонки.Добавить("Получатель");
		ТабНоменклатура.Колонки.Добавить("КоличествоПоступило");
		Для Каждого СтрокаТовар Из ТекущийОбъект.Товары Цикл
			КолвоПоступило = СтрокаТовар.Количество;
			СтрокиПоЗаявке = ТабПоЗаявке.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовар.Номенклатура));
			Для Каждого СтрокаПоЗаявке Из СтрокиПоЗаявке Цикл
				Если Найти(СтрокаПоЗаявке.НоменклатураНаименование, "Эт ") = 0 Тогда
					Продолжить;
				КонецЕсли;
				МинКолво = Мин(КолвоПоступило, СтрокаПоЗаявке.Количество, СтрокаТовар.Количество);
				КолвоПоступило = КолвоПоступило - МинКолво;
				
				Если МинКолво <> 0 Тогда
					СтрокаДоб = ТабНоменклатура.Добавить();
					СтрокаДоб.Номенклатура = СтрокаТовар.Номенклатура;
					СтрокаДоб.Характеристика = СтрокаТовар.Характеристика;
					СтрокаДоб.ЕдиницаИзмерения = СтрокаТовар.ЕдиницаИзмерения;
					СтрокаДоб.Получатель = СтрокаПоЗаявке.Получатель;
					СтрокаДоб.КоличествоПоступило = МинКолво;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
		
		Для Каждого СтрокаУжеСоздано Из ТабУжеСоздано Цикл
			СтрокиНоменкл = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Получатель", СтрокаУжеСоздано.Номенклатура, СтрокаУжеСоздано.Характеристика, СтрокаУжеСоздано.Получатель));
			Если СтрокиНоменкл.Количество() > 0 Тогда
				СтрокиНоменкл[0].КоличествоПоступило = СтрокиНоменкл[0].КоличествоПоступило - Мин(СтрокаУжеСоздано.Количество, СтрокиНоменкл[0].КоличествоПоступило);
			КонецЕсли;	
		КонецЦикла;
		
		КолвоСтрок = ТабНоменклатура.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если ТабНоменклатура[КолвоСтрок - н].КоличествоПоступило <= 0 Тогда
				ТабНоменклатура.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;
		
		Если ТабНоменклатура.Количество() > 0
				И НЕ ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ЗаявкаНаПечатьЭтикетки") Тогда
			ТабПолучатели = ТабНоменклатура.Скопировать();
			ТабПолучатели.Свернуть("Получатель");
			Для Каждого СтрокаПолучатель Из ТабПолучатели Цикл
				ДокументОбъект = Документы.ЗаявкаНаСклад.СоздатьДокумент();
				ДокументОбъект.Дата = ТекущаяДата();
				ДокументОбъект.Подразделение = ТекущийОбъект.Склад.Владелец;
				ДокументОбъект.Склад = ТекущийОбъект.Склад;
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку;
				ДокументОбъект.Получатель = СтрокаПолучатель.Получатель;
				
				ДокументОбъект.ДатаОтгрузки = ТекущаяДата();
				
				ДокументОбъект.Основание = ТекущийОбъект.Основание;
				ДокументОбъект.ПриходныйОрдер = ТекущийОбъект.Ссылка;
				
				СтрокиНоменклатура = ТабНоменклатура.НайтиСтроки(Новый Структура("Получатель", СтрокаПолучатель.Получатель));
				
				Для Каждого СтрокаНомен Из СтрокиНоменклатура Цикл
					НовСтр = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаНомен);
					НовСтр.Количество = СтрокаНомен.КоличествоПоступило;
				КонецЦикла;
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
					КонецПопытки;
				КонецПопытки;
				
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	//ВетСвидельства.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	СписокВСД.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	Для Каждого Строка Из Объект.Товары Цикл
		РасчитатьКоличествоВКоробке(Строка.КоличествоВКоробке, Строка.Количество, Строка.КоличествоКоробок);	
	КонецЦикла;
	
	Оборудование_ОбновитьНомера();
	
КонецПроцедуры


////////////////////

&НаСервереБезКонтекста
Функция ПолучитьОсновнойВидОперацииСервер(мСклад, мВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Склад"		, мСклад);
	Запрос.Параметры.Вставить("ВидДокумента", мВидДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкладыОсновныеОперации.ОсновнаяОперация
	|ИЗ
	|	Справочник.Склады.ОсновныеОперации КАК СкладыОсновныеОперации
	|ГДЕ
	|	СкладыОсновныеОперации.Ссылка = &Склад
	|	И СкладыОсновныеОперации.ВидДокумента = &ВидДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ОсновнаяОперация, Неопределено);
	
КонецФункции

//+++АК KIRN 2018.04.16 ИП-00018209^01
Функция СкладПриИзмененииСервер()
	//Если ЗначениеЗаполнено(Объект.Организация) ТОгда
	//Иначе
		Объект.Организация = Объект.Склад.Организация;
	//Конецесли;
КонецФункции
//---АК KIRN 


&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();	
		КонецЕсли;			
	КонецЕсли;
	
	//Для каждого склада есть возможность прописать основной вид операции
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументов.ПриходныйОрдерСклад");
	НовыйВидОперации = ПолучитьОсновнойВидОперацииСервер(Объект.Склад, ВидДокумента);
	
	Если ЗначениеЗаполнено(НовыйВидОперации) Тогда
		Объект.ВидОперации = НовыйВидОперации;
		ВидОперацииПриИзменении(Неопределено);
	КонецЕсли;
	
	//+++АК KIRN 2018.04.16  ИП-00018209^01
	СкладПриИзмененииСервер();
	//---АК KIRN 
	
	//+++AK susk
	УстановитьВидимостьИДоступность();	
	 //---AK susk
	 
	//+++ KOPA 27.11.2017 [ИП-00017264]
	ПроверитьНаличиеТоваровПоставщикаНаСкладеВозвратаНаСервере();
	//--- KOPA
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();	
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если Объект.Товары.Количество() > 0 Тогда
	//	Ответ = Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		Объект.Товары.Очистить();	
	//	КонецЕсли;			
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.Поставщик = ПредПоставщик;
			Возврат;
		КонецЕсли;	
		Объект.Товары.Очистить();
	КонецЕсли;
	
	ПредПоставщик = Объект.Поставщик;
	
	//+++ KOPA 27.11.2017 [ИП-00017264]
	ПроверитьНаличиеТоваровПоставщикаНаСкладеВозвратаНаСервере();
	//--- KOPA
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Объект.Товары.Очистить();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			Объект.Поставщик = ПредПоставщик;
			Возврат;
		КонецЕсли;	
		Объект.Товары.Очистить();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоЗаказамПоставщику(МассивЗаказы)
	
	ТабТовары = Документы.ПриходныйОрдерСклад.ПолучитьТоварыПоЗаказамПоставщику(МассивЗаказы, Объект.Склад, Объект.Поставщик, Объект.Дата);
	Для Каждого СтрокаТаб Из ТабТовары Цикл
		СтрокаДоб = Объект.Товары.Добавить();
		СтрокаДоб.Номенклатура 		= СтрокаТаб.Номенклатура;
		СтрокаДоб.Характеристика 	= СтрокаТаб.Характеристика;
		СтрокаДоб.ЕдиницаИзмерения 	= СтрокаТаб.ЕдиницаИзмерения;
		СтрокаДоб.Количество 		= СтрокаТаб.Количество;
		СтрокаДоб.ЗаказПоставщику	= СтрокаТаб.Заказ;
	КонецЦикла;
	
	Для Каждого ЭлементЗаказ Из МассивЗаказы Цикл
		СтрокаДоб = Объект.ЗаказыПоставщику.Добавить();
		СтрокаДоб.Документ = ЭлементЗаказ;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодборТоваровПоЗаказамПоставщику(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Предупреждение("Не заполнено значение Склад");
		Возврат;
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить таблицу товаров перед подбором?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();
			Объект.ЗаказыПоставщику.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ДатаПоступления=ПолучитьДатуПоступленияПоВремениПриходаСервер();
	
	//+++АК KIRN 2018.03.28  
	//Результат = ОткрытьФормуМодально("Документ.ЗаказПоставщику.Форма.ФормаПодбора", Новый Структура("Дата, Склад, Поставщик,ТолькоАктуальные", ДатаПоступления, Объект.Склад, Объект.Поставщик, Истина));
	Результат = ОткрытьФормуМодально("Документ.ЗаказПоставщику.Форма.ФормаПодбора", Новый Структура("Дата, Склад, Организация, Поставщик,ТолькоАктуальные", ДатаПоступления, Объект.Склад, Объект.Организация, Объект.Поставщик, Истина));
	Если ТипЗнч(Результат) = Тип("Массив")
			И Результат.Количество() > 0 Тогда
		ЗаполнитьТоварыПоЗаказамПоставщику(Результат);
	КонецЕсли;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	ПересчитатьТоварыБезСертификатов();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуПоступленияПоВремениПриходаСервер()
	Док=РеквизитФормыВЗначение("Объект");
	Возврат Док.ПолучитьДатуПоступленияПоВремениПрихода();
КонецФункции	

&НаСервере
Процедура ОбновитьОтчетСервер()
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СКД = Документы.ПриходныйОрдерСклад.ПолучитьМакет("СКД_ИзмененияДвижений");
	НастройкиСКД = СКД.НастройкиПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", Объект.Склад);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
	
	ОтчетИзмененияДвижений.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОтчетИзмененияДвижений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ОтчетИзмененияДвижений.ФиксацияСверху = 0;
	ОтчетИзмененияДвижений.ФиксацияСлева = 0;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОтчет(Команда)
	
	ОбновитьОтчетСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаИзменения" Тогда
		ОбновитьОтчетСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСборщиков(Склад)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СборщикиНаСкладах.Сборщик
	               |ИЗ
	               |	РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
	               |ГДЕ
	               |	СборщикиНаСкладах.Склад = &Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СборщикиНаСкладах.Сборщик.Наименование";
				   
	Запрос.УстановитьПараметр("Склад", Склад.Владелец);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сборщик");
	
КонецФункции	

&НаКлиенте
Процедура КладовщикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиков(Объект.Склад));
	
КонецПроцедуры

&НаКлиенте
Процедура КладовщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиков(Объект.Склад));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСборщиковДляВыбора(Склад, Текст)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Наименование ПОДОБНО &Наименование
	               |	И ФизическиеЛица.Ссылка В
	               |			(ВЫБРАТЬ
	               |				СборщикиНаСкладах.Сборщик
	               |			ИЗ
	               |				РегистрСведений.СборщикиНаСкладах КАК СборщикиНаСкладах
	               |			ГДЕ
	               |				СборщикиНаСкладах.Склад = &Склад)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ФизическиеЛица.Наименование";
				   
	Запрос.УстановитьПараметр("Склад", Склад.Владелец);
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура КладовщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	Если ПустаяСтрока(Текст) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Иначе
		ДанныеВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиковДляВыбора(Объект.Склад, Текст));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КладовщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	Если ПустаяСтрока(Текст) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Иначе
		ДанныеВыбора.ЗагрузитьЗначения(ПолучитьСписокСборщиковДляВыбора(Объект.Склад, Текст));
	КонецЕсли;
	
КонецПроцедуры


////////////////////
//// Товары

&НаСервере
Процедура ЗагрузитьДанныеСписанияТТСервер()
	
	СтрСоединенияДанныеТовародвижение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	пСоед.СтрокаСоединения= СтрСоединенияДанныеТовародвижение;
	ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьОбщиеПараметрыСоединения(пСоед);
	ВнешниеИсточникиДанных.SMS_Izbenka.УстановитьСоединение();
	
	ЭтоДегустация = Ложь;
	ЭтоСписание = Ложь;
	ЭтоСписаниеКачество = Ложь;
	ЭтоБой = Ложь;
	
	Если Объект.Склад = Объект.Склад.Владелец.СкладДегустация Тогда
		ЭтоДегустация = Истина;
	КонецЕсли;
	
	Если Объект.Склад = Объект.Склад.Владелец.СкладСписаниеПоСроку Тогда
		ЭтоСписание = Истина;
	КонецЕсли;
	
	Если Объект.Склад = Объект.Склад.Владелец.СкладСписаниеПоКачеству Тогда
		ЭтоСписаниеКачество = Истина;
	КонецЕсли;
	
	Если Объект.Склад = Объект.Склад.Владелец.СкладБойПриПоставке Тогда
		ЭтоБой = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(dbo_CheckLine.Quantity * ВЫБОР
	               |			КОГДА dbo_Checks.OperationType = 101
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Дегустация,
	               |	СУММА(dbo_CheckLine.Quantity * ВЫБОР
	               |			КОГДА dbo_Checks.OperationType = 102
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Списание,
	               |	СУММА(dbo_CheckLine.Quantity * ВЫБОР
	               |			КОГДА dbo_Checks.OperationType = 103
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СписаниеКачество,
	               |	СУММА(dbo_CheckLine.Quantity * ВЫБОР
	               |			КОГДА dbo_Checks.OperationType = 104
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Бой,
	               |	dbo_CheckLine.id_tov_cl КАК id_tov
	               |ИЗ
	               |	ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_Checks КАК dbo_Checks
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SMS_Izbenka.Таблица.dbo_CheckLine КАК dbo_CheckLine
	               |		ПО dbo_Checks.CheckUID = dbo_CheckLine.CheckUID
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(dbo_Checks.CloseDate, ДЕНЬ) = &Дата
	               |	И dbo_Checks.ShopNo = &ShopNo
	               |	И dbo_Checks.OperationType В (101, 102, 103, 104)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	dbo_CheckLine.id_tov_cl";
				   
	Запрос.УстановитьПараметр("ShopNo", Объект.Поставщик.НомерТочки);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	ВнешниеИсточникиДанных.SMS_Izbenka.РазорватьСоединение();
	
	Для Каждого СтрокаТаб Из Таб Цикл
		КолДегустация = ?(ЭтоДегустация, СтрокаТаб.Дегустация, 0);
		КолСписание = ?(ЭтоСписание, СтрокаТаб.Списание, 0);
		КолСписаниеКачество = ?(ЭтоСписаниеКачество, СтрокаТаб.СписаниеКачество, 0);
		КолБой = ?(ЭтоБой, СтрокаТаб.Бой, 0);
		Если КолДегустация + КолСписание + КолСписаниеКачество + КолБой = 0 Тогда
			Продолжить;
		КонецЕсли;
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("id_tov", СтрокаТаб.id_tov);
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Поставщик", 		Объект.Поставщик);
		СтруктураДанные.Вставить("ВидОперации", 	Объект.ВидОперации);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	?(СтрокаТабличнойЧасти.Номенклатура.НеВедетсяУчетПоХарактеристикам, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), СтрокаТабличнойЧасти.Характеристика));
		СтруктураДанные.Вставить("Период", 			Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
		СтрокаТабличнойЧасти.Характеристика		= СтруктураДанные.Характеристика;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество 		= КолДегустация + КолСписание + КолСписаниеКачество + КолБой;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеСписанияТТ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена торговая точка-поставщик", Объект, "Поставщик");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Поставщик) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Должна быть указана торговая точка", Объект, "Поставщик");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить таблицу товаров перед загрузкой?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();
		КонецЕсли;	
	КонецЕсли;	
	
	ЗагрузитьДанныеСписанияТТСервер();
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
	ПересчитатьТоварыБезСертификатов();
	
КонецПроцедуры

&НаСервере
Функция НеВедетсяУчетПоХарактеристикам(мНоменклатура)
	
	Возврат мНоменклатура.НеВедетсяУчетПоХарактеристикам;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьПеремещают()
	
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаТаб.Перемещают = 0;
	КонецЦикла;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПриходСкладскойУчет.Перемещение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Выгрузка = Объект.Основание.Товары.Выгрузить();
			
		Для Каждого СтрокаТаб Из Объект.Товары Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрокаТаб.Номенклатура);
			Отбор.Вставить("Характеристика", СтрокаТаб.Характеристика);
			
			НайденныеСтроки = Выгрузка.НайтиСтроки(Отбор);
			Для Каждого СтрокаНайденная Из НайденныеСтроки Цикл
				СтрокаТаб.Кладовщик = Объект.Основание.Сборщик;
				СтрокаТаб.Перемещают = СтрокаТаб.Перемещают + СтрокаНайденная.Количество;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти.Номенклатура = ПолучитьВладельцаРеквизитаСервер(СтрокаТабличнойЧасти.Характеристика) Тогда
		СтрокаТабличнойЧасти.Характеристика 	= ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	Если НЕ СтрокаТабличнойЧасти.Номенклатура = ПолучитьВладельцаРеквизитаСервер(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Поставщик", 		Объект.Поставщик);
	СтруктураДанные.Вставить("ВидОперации", 	Объект.ВидОперации);
	СтруктураДанные.Вставить("ЭтоСырье",	 	Ложь);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	?(НеВедетсяУчетПоХарактеристикам(СтрокаТабличнойЧасти.Номенклатура), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), СтрокаТабличнойЧасти.Характеристика));
	СтруктураДанные.Вставить("Период", 			Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Характеристика		= СтруктураДанные.Характеристика;
	Если СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	Иначе 
		СтрокаТабличнойЧасти.ЕдиницаИзмерения =  СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;	
		
	СтрокаТабличнойЧасти.Количество 		= 1;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки")
		И СтруктураДанные.ЭтоСырье Тогда
		Ответ = Вопрос("Вы выбрали сырье, установить соответствующий вид операции документа?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ВозвратИзПереработки");
			ВидОперацииПриИзменении(Элементы.ВидОперации);
		КонецЕсли;	
	КонецЕсли;	
	
	ПерезаполнитьПеремещают();
	
	ЗаполнитьПризнакИспользованияХарактеристики();
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
			Предупреждение("Следует заполнить реквизит Поставщик");
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Предупреждение("Следует заполнить реквизит Склад");
		Иначе
			СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Поставщик",Объект.Поставщик);
			Если НЕ ПолныйВыборПоСкладу() Тогда
				ПараметрыФормы.Вставить("Склад",Объект.Склад);
			КонецЕсли;	
			Результат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораПоКонтрагенту",ПараметрыФормы);
			Если Результат = Неопределено Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				СтрокаТабличнойЧасти.Номенклатура = Результат;
				ТоварыНоменклатураПриИзменении(Элемент);
			КонецЕсли;
		КонецЕсли;
	//Иначе
	//	СтандартнаяОбработка=Ложь;
	//	
	//	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
	//		Предупреждение ("Следует заполнить реквизит Склад");
	//	Иначе
	//		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	//		
	//		ПараметрыФормы = Новый Структура;
	//		ПараметрыФормы.Вставить("Склад",Объект.Склад);
	//		Результат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",ПараметрыФормы);
	//		Если Результат = Неопределено Тогда
	//			Возврат
	//		Иначе
	//			СтрокаТабличнойЧасти.Номенклатура = Результат;
	//			ТоварыНоменклатураПриИзменении(Элемент);
	//		КонецЕсли;
	//	КонецЕсли;	
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПодставитьКоличествоКоробок(Характеристика, Количество)
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КоличествоВКоробкеСрезПоследних.Количество
		|ИЗ
		|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
		|			&Дата,
		|			Характеристика = &Объект
		|				И СтруктурнаяЕдиница = &Склад) КАК КоличествоВКоробкеСрезПоследних";
		Запрос.УстановитьПараметр("Объект", Характеристика);
		Запрос.УстановитьПараметр("Склад", Объект.Склад.Владелец);
		Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(ЗначениеЗаполнено(Выборка.Количество), Количество / Выборка.Количество, 0);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	//ДанныеСтроки.КоличествоКоробок = ПодставитьКоличествоКоробок(ДанныеСтроки.Характеристика, ДанныеСтроки.Количество);
	РасчитатьКоличествоВКоробке(ДанныеСтроки.КоличествоВКоробке, ДанныеСтроки.Количество, ДанныеСтроки.КоличествоКоробок);
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьКоличествоВКоробке(КоличествоВКоробке, Количество, КоличествоКоробок)

	Если КоличествоКоробок = 0 Тогда
		КоличествоВКоробке = 0;
	Иначе	
		КоличествоВКоробке = Количество / КоличествоКоробок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоКоробокПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	РасчитатьКоличествоВКоробке(ДанныеСтроки.КоличествоВКоробке, ДанныеСтроки.Количество, ДанныеСтроки.КоличествоКоробок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ПерезаполнитьПеремещают();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристики() Экспорт
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакСкладируемый",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Складируемая")));
			
	ЗапросНормКвант = Новый Запрос();
	ЗапросНормКвант.УстановитьПараметр("ТекДата", ТекущаяДата());
	ЗапросНормКвант.УстановитьПараметр("Склад", Объект.Склад.Владелец);
	ЗапросНормКвант.УстановитьПараметр("Характеристики", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Характеристика"));
	ЗапросНормКвант.Текст = "ВЫБРАТЬ
	                        |	НормативныйКвантУпаковкиСрезПоследних.Характеристика,
	                        |	НормативныйКвантУпаковкиСрезПоследних.Квант
	                        |ИЗ
	                        |	РегистрСведений.НормативныйКвантУпаковки.СрезПоследних(
	                        |			&ТекДата,
	                        |			Склад = &Склад
	                        |				И Характеристика В (&Характеристики)) КАК НормативныйКвантУпаковкиСрезПоследних";
							
	ТабКеш = ЗапросНормКвант.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из Объект.Товары Цикл
		СтрокаКеш = ТабКеш.Найти(СтрокаТаб.Характеристика, "Характеристика");
		Если СтрокаКеш <> Неопределено Тогда
			СтрокаТаб.НормативныйКвант = СтрокаКеш.Квант;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры


////////////////////
//// Оборудование

&НаСервере
Функция ПолучитьСписокОССтруктурнойЕдиницы()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата"				, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
	Запрос.Параметры.Вставить("Счет"				, ПланыСчетов.Финансовый.ККМ);//ХолодильноеОборудование);
	Запрос.Параметры.Вставить("СтруктурнаяЕдиница"	, Объект.Поставщик);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.Субконто3 КАК ОС
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)), , Субконто2 = &СтруктурнаяЕдиница) КАК ФинансовыйОстатки
	|ГДЕ
	|	ФинансовыйОстатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостояниеОС.СрезПоследних(&Дата, ) КАК СостояниеОССрезПоследних
	|ГДЕ
	|	(СостояниеОССрезПоследних.Местоположение = &СтруктурнаяЕдиница
	|			ИЛИ СостояниеОССрезПоследних.Местоположение.Родитель = &СтруктурнаяЕдиница)";

							
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОС"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Оборудование_ПредупреждениеОЗапрете()
	
	Предупреждение("Нельзя добавлять или удалять строки. Документ заполняется строго по заявке");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	//Оставлено на случай, если передумают
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("СписокПриОткрытии", ПолучитьСписокОССтруктурнойЕдиницы());
	//	
	//Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма);
	//
	//Форма.Заголовок						= "Основные средства. Подбор";
	//Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
	//Форма.ЗакрыватьПриВыборе			= Ложь;
	//
	////Открываем модально, т.к. при изменении склада или даты состав строк будет другим.
	////Попытки найти открытую форму подбора успехом не увенчались, ключ уникальности не помог
	//Форма.ОткрытьМодально();
	
 	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокПриОткрытии", ПолучитьСписокОССтруктурнойЕдиницы());
			
		Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма);
		
		Форма.Заголовок						= "Основные средства. Подбор";
		Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Форма.ЗакрыватьПриВыборе			= Ложь;
		
		//Открываем модально, т.к. при изменении склада или даты состав строк будет другим.
		//Попытки найти открытую форму подбора успехом не увенчались, ключ уникальности не помог
		Форма.ОткрытьМодально();
		
	Иначе
		//Оборудование теперь заполняется строго по заявке
		Оборудование_ПредупреждениеОЗапрете();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ПоступлениеОборудованияОтПоставщика") Тогда
		//+++AK susk
		// виртуальные склады
		Если НЕ ВладелецВиртуальныйСкладПоставщикаОборудования(Объект.Склад) Тогда
		//---AK susk	
			Оборудование_ПредупреждениеОЗапрете();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//Оставлено на случай, если передумают
	
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ВозвратОборудованияСТорговойТочки") Тогда

	//	СтандартнаяОбработка = Ложь;
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("СписокПриОткрытии", ПолучитьСписокОССтруктурнойЕдиницы());
	//		
	//	Результат = ОткрытьФормуМодально("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы);
	//	Если ЗначениеЗаполнено(Результат) Тогда
	//		Элементы.Оборудование.ТекущиеДанные.ОсновноеСредство = Результат;
	//		Оборудование_ОбновитьНомера();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОсновноеСредствоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	ТекДанные.ЗаводскойНомер 	= ПолучитьЗаводскойНомерОС(ТекДанные.ОсновноеСредство);
	ТекДанные.Номенклатура 		= ПолучитьНоменклатуруОС(ТекДанные.ОсновноеСредство);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЗаводскойНомерПриИзменении(Элемент)
	
	Перем мНоменклатура;
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ЗаводскойНомер) Тогда
		мОсновноеСредство = ПолучитьОСПоЗаводскомуНомеру(ТекДанные.ЗаводскойНомер);
		Если мОсновноеСредство.Пустая() Тогда
			Если Вопрос("Основное средство не найдено. Создать новое?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Если ВвестиЗначение(мНоменклатура, "Укажите номенклатуру основного средства", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")) Тогда
					НовоеОС = ПолучитьНовоеОсновноеСредство(мНоменклатура, ТекДанные.ЗаводскойНомер);
					ТекДанные.ОсновноеСредство 	= НовоеОС;
					ТекДанные.Номенклатура 		= мНоменклатура;
				Иначе
					ТекДанные.ЗаводскойНомер 	= "";
					ТекДанные.Номенклатура		= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
					Возврат;
				КонецЕсли;
			Иначе
				ТекДанные.ЗаводскойНомер 	= "";
				ТекДанные.Номенклатура		= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
				Возврат;
			КонецЕсли;
		Иначе
			Если НЕ ТекДанные.ОсновноеСредство = мОсновноеСредство Тогда
				ТекДанные.ОсновноеСредство = мОсновноеСредство;
				ТекДанные.Номенклатура = ПолучитьНоменклатуруОС(ТекДанные.ОсновноеСредство);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекДанные.ОсновноеСредство 	= ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");
		ТекДанные.Номенклатура		= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;	 
	
КонецПроцедуры


////////////////////

&НаКлиенте
Процедура ПрикрепленныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыФайлОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект, Объект.Ссылка.УникальныйИдентификатор(), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции

&НаКлиенте
Процедура Просмотреть(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ПрикрепленныеФайлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ПрикрепленныеФайлы.ДанныеСтроки(Элементы.ПрикрепленныеФайлы.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", Новый Структура(
						"КомпонентаУстановлена, ИдентификаторКлиента",
						РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаездаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаЗаезда) Тогда
		Если ВремяЗаезда=дата(1,1,1) Тогда
			ДатаВремяЗаездаМашины =  НачалоДня(ДатаЗаезда);
		Иначе	
			ДатаВремяЗаездаМашины = Дата(Формат(ДатаЗаезда, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяЗаезда, "ДЛФ=T"));	
		КонецЕсли;	
	Иначе
		ВремяВремяЗаезда=дата(1,1,1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВремяЗаездаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаЗаезда) Тогда
		Если ВремяЗаезда=дата(1,1,1) Тогда
			ДатаВремяЗаездаМашины =  НачалоДня(ДатаЗаезда);
		Иначе	
			ДатаВремяЗаездаМашины = Дата(Формат(ДатаЗаезда, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяЗаезда, "ДЛФ=T"));	
		КонецЕсли;	
	Иначе
		ВремяВремяЗаезда=дата(1,1,1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	ОтобразитьСкрытьДопСтолбцыВТоварах();
	
КонецПроцедуры

Процедура ОтобразитьСкрытьДопСтолбцыВТоварах()

	Если ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ЗаявкаНаПоставкуУпаковки") Тогда
		Элементы.ТоварыЗаказПоставщику.Видимость = Ложь;
		Элементы.ТоварыЗаявкаНаПоставкуУпаковки.Видимость = Истина;
		Для каждого СтрокаТЧТ Из Объект.Товары Цикл
			СтрокаТЧТ.ЗаявкаНаПоставкуУпаковки = Объект.Основание;
		КонецЦикла;
	Иначе
		Элементы.ТоварыЗаказПоставщику.Видимость = Истина;
		Элементы.ТоварыЗаявкаНаПоставкуУпаковки.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	
	ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
			Предупреждение("По штрих-коду не найдена номенклатура");
		Иначе
			Если СтруктураДанных.Свойство("КоличествоКоробок") Тогда
				КолКоробок=СтруктураДанных.КоличествоКоробок;
			Иначе	
				КолКоробок=1;
			КонецЕсли; 
			СтрокиНашли = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ДатаПроизводства", СтруктураДанных.Номенклатура, СтруктураДанных.Характеристика, СтруктураДанных.ДатаПроизводства));
			Если СтрокиНашли.Количество() > 0 Тогда
				Элементы.Товары.ТекущаяСтрока = СтрокиНашли[0].ПолучитьИдентификатор();
				ТекДанные = Элементы.Товары.ТекущиеДанные;
				ТекДанные.Количество = ТекДанные.Количество + СтруктураДанных.Количество;
				ТекДанные.КоличествоКоробок = ТекДанные.КоличествоКоробок + КолКоробок;
				РасчитатьКоличествоВКоробке(ТекДанные.КоличествоВКоробке, ТекДанные.Количество, ТекДанные.КоличествоКоробок);
			Иначе
				Элементы.Товары.ДобавитьСтроку();
				ТекДанные = Элементы.Товары.ТекущиеДанные;
				ТекДанные.Номенклатура = СтруктураДанных.Номенклатура;
				ТекДанные.Характеристика = СтруктураДанных.Характеристика;
				ТекДанные.Количество = СтруктураДанных.Количество;
				ТекДанные.ДатаПроизводства = СтруктураДанных.ДатаПроизводства;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Поставщик", 		Объект.Поставщик);
				СтруктураДанные.Вставить("ВидОперации", 	Объект.ВидОперации);
				СтруктураДанные.Вставить("Номенклатура", 	ТекДанные.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", 	?(НеВедетсяУчетПоХарактеристикам(ТекДанные.Номенклатура), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), ТекДанные.Характеристика));
				СтруктураДанные.Вставить("Период", 			Объект.Дата);
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				ТекДанные.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
				
				ТекДанные.КоличествоКоробок = КолКоробок;
				РасчитатьКоличествоВКоробке(ТекДанные.КоличествоВКоробке, ТекДанные.Количество, ТекДанные.КоличествоКоробок);
				
			КонецЕсли;	
			ПерезаполнитьПеремещают();
			
			ЗаполнитьПризнакИспользованияХарактеристики();
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник = "KeyboardHook" Тогда
		Если Данные = "00122" Тогда
			ШтрихКодОбработанФормой = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСрокГодностиДней(Характеристика)
	
	Если НЕ ЗначениеЗаполнено(Характеристика.ТипСрокаГодности.КоэффициентВСутках) Тогда
		Возврат 0;
	Иначе	
		Возврат Характеристика.СрокГодности * Характеристика.ТипСрокаГодности.КоэффициентВСутках;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ТоварыДатаПроизводстваПриИзменении(Элемент)
	
	//Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ДатаПроизводства) Тогда
	//	СрокГодностиДней = ПолучитьСрокГодностиДней(Элементы.Товары.ТекущиеДанные.Характеристика);
	//	Если Элементы.Товары.ТекущиеДанные.ДатаПроизводства > НачалоДня(ТекущаяДата() + 86400)
	//		ИЛИ (ЗначениеЗаполнено(СрокГодностиДней) И Элементы.Товары.ТекущиеДанные.ДатаПроизводства < ТекущаяДата() - СрокГодностиДней*86400) Тогда
	//		Ответ = Вопрос("Вы точно хотите указать дату производства " + Формат(Элементы.Товары.ТекущиеДанные.ДатаПроизводства, "ДФ='dd MMMM yyyy'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	//		Если Ответ = КодВозвратаДиалога.Нет Тогда
	//			Элементы.Товары.ТекущиеДанные.ДатаПроизводства = '00010101';
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТоварыБезСертификатов()
	
	ТабКопия = ТоварыБезСертификата.Выгрузить();
	ТоварыБезСертификата.Очистить();
	//+++АК BELN 2018.10.19 ИП-00020183.01
	Если Объект.Склад.ПриемкаБезСертификатов Тогда
		Возврат;	
	КонецЕсли; 
	//---АК BELN 2018.10.19 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаДок", Объект.Дата);
	Запрос.УстановитьПараметр("Характеристики", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Характеристика"));
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ХарактеристикиНоменклатуры.Владелец,
	               |	ХарактеристикиНоменклатуры.Ссылка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	               |		ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |	ГДЕ
	               |		ХарактеристикиНоменклатуры.Владелец.ТребуетсяНаличиеСертификата = ИСТИНА
	               |		И ХарактеристикиНоменклатуры.Ссылка В(&Характеристики)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СоставКомплектаСрезПоследних.Составляющая.Владелец,
	               |		СоставКомплектаСрезПоследних.Составляющая.Ссылка
	               |	ИЗ
	               |		РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаДок, ) КАК СоставКомплектаСрезПоследних
	               |	ГДЕ
	               |		СоставКомплектаСрезПоследних.Составляющая.Владелец.ТребуетсяНаличиеСертификата = ИСТИНА
	               |		И СоставКомплектаСрезПоследних.Характеристика В(&Характеристики)) КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СертификатыНаПродукцию.Характеристика КАК Характеристика
	               |		ИЗ
	               |			РегистрСведений.СертификатыНаПродукцию КАК СертификатыНаПродукцию
	               |		ГДЕ
	               |			СертификатыНаПродукцию.Период <= &Период
	               |			И СертификатыНаПродукцию.ДействуетДо >= &Период
	               |			И СертификатыНаПродукцию.Характеристика В(&Характеристики)) КАК ВложенныйЗапрос
	               |		ПО ХарактеристикиНоменклатуры.Ссылка = ВложенныйЗапрос.Характеристика
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Владелец.ТребуетсяНаличиеСертификата = ИСТИНА
	               |	И ХарактеристикиНоменклатуры.Ссылка В(&Характеристики)
	               |	И ВложенныйЗапрос.Характеристика ЕСТЬ NULL 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ХарактеристикиНоменклатуры.Владелец.Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТоварыБезСертификата.Добавить();
		СтрокаДоб.Номенклатура = Выборка.Владелец;
		СтрокаДоб.Характеристика = Выборка.Ссылка;
		СтрокиДаты = ТабКопия.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаДоб.Номенклатура, СтрокаДоб.Характеристика));
		Если СтрокиДаты.Количество() > 0 Тогда
			СтрокаДоб.РегистрационныйНомерСертификата = СтрокиДаты[0].РегистрационныйНомерСертификата;
		КонецЕсли;	
	КонецЦикла;	
	
	КолвоБезСертификатов = ТоварыБезСертификата.Количество();
	 //+++АК BARA 2018.03.26 ИП-00017974      
	//Если КолвоБезСертификатов > 0 Тогда
	//	Элементы.ДекорацияЕстьБезСертификата.Видимость = Истина;
	//Иначе
		Элементы.ДекорацияЕстьБезСертификата.Видимость = Ложь;
	//КонецЕсли;	
	 //---АК BARA
КонецПроцедуры	

&НаКлиенте
Процедура СканироватьСертификаты(Команда)
	
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект, Объект.Ссылка.УникальныйИдентификатор(), ЭтаФорма, Истина, "Сертификаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьСертификаты(Команда)
	
	Если Элементы.СертификатыКТоварам.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.СертификатыКТоварам.ДанныеСтроки(Элементы.СертификатыКТоварам.ТекущаяСтрока);
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ДанныеСтроки.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканированияСертификаты(Команда)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", Новый Структура(
						"КомпонентаУстановлена, ИдентификаторКлиента",
						РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту(), ИдентификаторКлиента));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьТоварыБезСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезСертификатаРегистрационныйНомерСертификатаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого СтрокаТаб Из СертификатыКТоварам Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.РегистрационныйНомерСертификата) Тогда
			Если Элемент.СписокВыбора.НайтиПоЗначению(СтрокаТаб.РегистрационныйНомерСертификата) = Неопределено Тогда
				Элемент.СписокВыбора.Добавить(СтрокаТаб.РегистрационныйНомерСертификата);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемыйПриходПриИзменении(Элемент)
	
	Если ЭтаФорма.ПризнакОжидаемыйПриОткрытии
			И НЕ Объект.ОжидаемыйПриход Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;	
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаявкамПоставщика(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходСкладскойУчет.ПоступлениеУпаковкиОтПоставщика") Тогда
		ОткрытьФорму("Документ.ПриходныйОрдерСклад.Форма.ФормаЗаполненияПоЗаявкам",,ЭтаФорма);
		//ЗаполнитьПоЗаявкамПоставщикаСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаявкамПоставщикаСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка КАК Номенклатура,
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.КоличествоЗаказано КАК Заказано,
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	ЕСТЬNULL(АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоПриход, 0) КАК Пришло,
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка
	               |ПОМЕСТИТЬ ВТ_Предварительно
	               |ИЗ
	               |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты
	               |		ПО ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Номенклатура
	               |			И ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка = АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.ЗаявкаНаПроизводствоПерсональнойУпаковке
	               |ГДЕ
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано)
	               |	И ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.Исполнитель = &Исполнитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.ЗаявкаНаПроизводствоПерсональнойУпаковке,
	               |	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Номенклатура,
	               |	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.КоличествоПриход
	               |ПОМЕСТИТЬ ВТ_ДвиженияДокумента
	               |ИЗ
	               |	РегистрНакопления.АК_ЗаявкиНаПроизводствоПерсональнойУпаковки.Обороты(, , Регистратор, ) КАК АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты
	               |ГДЕ
	               |	АК_ЗаявкиНаПроизводствоПерсональнойУпаковкиОбороты.Регистратор = &Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Предварительно.Заказано - ВТ_Предварительно.Пришло + ЕСТЬNULL(ВТ_ДвиженияДокумента.КоличествоПриход, 0) КАК Количество,
	               |	ВТ_Предварительно.Номенклатура,
	               |	ВТ_Предварительно.ЕдиницаИзмерения,
	               |	ВТ_Предварительно.Ссылка КАК ЗаявкаНаПроизводствоПерсональнойУпаковки
	               |ИЗ
	               |	ВТ_Предварительно КАК ВТ_Предварительно
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДвиженияДокумента КАК ВТ_ДвиженияДокумента
	               |		ПО ВТ_Предварительно.Номенклатура = ВТ_ДвиженияДокумента.Номенклатура
	               |			И ВТ_Предварительно.Ссылка = ВТ_ДвиженияДокумента.ЗаявкаНаПроизводствоПерсональнойУпаковке
	               |ГДЕ
	               |	ВТ_Предварительно.Заказано + ЕСТЬNULL(ВТ_ДвиженияДокумента.КоличествоПриход, 0) - ВТ_Предварительно.Пришло > 0";
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	Запрос.УстановитьПараметр("Исполнитель",Объект.Поставщик);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоПоставщику(Команда)
	Если Модифицированность Тогда
		Сообщить("Необходимо записать документ");
		Возврат;
	КонецЕсли; 
	ОтправитьПисьмоПоставщикуСервер();
	Прочитать();
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмоПоставщикуСервер()
	ОбъектДок=РеквизитФормыВЗначение("Объект");
	Документы.ПриходныйОрдерСклад.ОтправитьПисьмоПоставщику(ОбъектДок);
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьЛогиМП(Команда)
	Структура1=Новый Структура("Документ",ЭтаФорма.Объект.Ссылка);
	ПараметрыВыбора=Новый Структура("Отбор",Структура1);
	ОткрытьФорму("РегистрСведений.МП_ЖурналОбмена.Форма.ФормаСписка",ПараметрыВыбора,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаТерминаломЗаконченаПриИзменении(Элемент)
	УстановитьВидимостьИДоступность();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПеремещения(Команда)
	
	//+++АК KIRN 2018.07.06 
	Если Объект.ОжидаемыйПриход Тогда
		ПоказатьПредупреждение(,"Распределять документ в состоянии ""ожидаемый приход"" нельзя");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда 
		ПоказатьПредупреждение(,"Необходимо записать документ");
		Возврат;
	КонецЕсли;
	
	ТекстНомер_Р = СделатьРаспределение_Сервер();
	
	Если НЕ ТекстНомер_Р = "" Тогда
		ПоказатьПредупреждение(,"Выполнено распределение, номер " + ТекстНомер_Р + ".");
	Иначе
		ПоказатьПредупреждение(,"Распределение не выполнено.");
	КонецЕсли;
	//---АК KIRN 

КонецПроцедуры

//+++АК SHEP 2018.10.11 ИП-00019616
&НаКлиенте
Процедура РаспределитьПоТТПлюс(Команда)
	
	Если Объект.ОжидаемыйПриход Тогда
		ПоказатьПредупреждение(, "Распределять документ в состоянии ""Ожидаемый приход"" нельзя!");
		Возврат;
	ИначеЕсли Модифицированность ИЛИ НЕ Объект.Проведен Тогда 
		ПоказатьПредупреждение(, "Сначала необходимо записать и провести документ!");
		Возврат;
	КонецЕсли;
	
	ТекстНомер_Р = СделатьРаспределениеПлюс_Сервер();
	
	Если ТекстНомер_Р = "" Тогда
		ПоказатьПредупреждение(, "Распределение не выполнено!");
	Иначе
		ПоказатьПредупреждение(, "Выполнено распределение, номер: " + ТекстНомер_Р);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсканированныеКоробки(Команда)
	//Отбор=Новый Структура("Ссылка",Объект.Ссылка);
	Парам=Новый Структура("ОтборДок, СформироватьПриОткрытии",Объект.Ссылка,Ложь);
	ОткрытьФорму("Отчет.АК_ОтсканированнаяВесоваяНоменклатура.Форма.ФормаОтчета",Парам);
	
КонецПроцедуры

//+++AK susk
&НаСервереБезКонтекста
Функция ВладелецВиртуальныйСкладПоставщикаОборудования(Склад)
	
	Возврат Склад.Владелец.ID_TT = 11595;	
	
КонецФункции

//+++АК Susk (Суслин К.В.) оптимизация 2018.07.18 
&НаКлиенте
Процедура ГенерацияЗаводскихНомеров(Команда)
	
	Сч = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерДокументаПоставщика) Тогда
		Предупреждение("Не заполнен номер документа поставщика. Генерация автоматически невозможна!");
		Возврат;
	КонецЕсли;
	
	МассивНомеров = Новый Массив;
	
	Для Каждого ТекДанные Из Объект.Оборудование Цикл
		
		Сч = Сч + 1;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ЗаводскойНомер) Тогда			
			ТекДанные.ЗаводскойНомер = Объект.НомерДокументаПоставщика + "_" + Строка(Сч);		     
		КонецЕсли;
		
		МассивНомеров.Добавить(ТекДанные.ЗаводскойНомер);
		
	КонецЦикла;
		
	ТаблицаОС = ПолучитьОСыПоЗаводскомуНомеру(МассивНомеров);
	
	Для Каждого ТекДанные Из Объект.Оборудование Цикл
	
		НайдСтр = ТаблицаОС.Найти(ТекДанные.ЗаводскойНомер, "ЗаводскойНомер");
		
		Если НайдСтр = Неопределено Тогда
			
			НовоеОС = ПолучитьНовоеОсновноеСредство(ТекДанные.Номенклатура, ТекДанные.ЗаводскойНомер);
			ТекДанные.ОсновноеСредство 	= НовоеОС;
			ТекДанные.Номенклатура 		= ТекДанные.Номенклатура;				
		Иначе
			Если НЕ ТекДанные.ОсновноеСредство = НайдСтр.ОсновноеСредство Тогда
				ТекДанные.ОсновноеСредство = НайдСтр.ОсновноеСредство;
				ТекДанные.Номенклатура = ПолучитьНоменклатуруОС(ТекДанные.ОсновноеСредство);
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.07.18 бн оптимизация
&НаСервереБезКонтекста
Функция ПолучитьОСыПоЗаводскомуНомеру(МассивНомеров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	               |	ОсновныеСредства.ЗаводскойНомер
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	ОсновныеСредства.ЗаводскойНомер В(&МассивЗаводскихНомеров)
	               |	И НЕ ОсновныеСредства.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивЗаводскихНомеров", МассивНомеров);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
//+++АК SaMi 

&НаКлиенте
Процедура ПодобратьВСД(Команда)
	
	//
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		//
		Если Вопрос("Перед подбором ВСД необходимо записать изменения! Записать?",РежимДиалогаВопрос.ОКОтмена, 20, КодВозвратаДиалога.ОК) <> КодВозвратаДиалога.ОК Тогда
			Возврат;	
		КонецЕсли;
		
		//
		ПараметрыЗаписи = Новый Структура;
		
		//
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Объект.Проведен Тогда
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
		
		//
		Попытка
			
			//
			Если НЕ Записать(ПараметрыЗаписи) Тогда
				Возврат;
			КонецЕсли;	
			
		Исключение
			Возврат;
		КонецПопытки;	
		
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПодобратьВСДАвтоматически", Команда.Имя = "ПодобратьВСДАвтоматически");
	
	Форма = ПолучитьФорму("РегистрСведений.МЙ_ВетеринарныеДокументы.Форма.ФормаПодбораВСД", ПараметрыОткрытия, ЭтаФорма);
	
	Форма.Открыть();
	
	//Если Команда.Имя = "ПодобратьВСДАвтоматически" Тогда
	//	ПараметрыОтбора = Новый Массив;
	//	ОбменССистемойВетисКлиентСервер.ДобавитьПараметрОтбора(ПараметрыОтбора, "ДокументПоступления", ВидСравнения.Равно, Объект.Ссылка);
	//
	//	КоличествоПодобранных = ОбменССистемойВетис.СопоставитьДокументыПоступленияИВСД(ПараметрыОтбора);
	//	
	//	Если КоличествоПодобранных = 0 Тогда
	//		Предупреждение("Сертификаты для добавления не найдены.");			
	//	Иначе
	//		ОбновитьИнформациюОПривязкахВСД();			
	//		Элементы.СписокВСД.Обновить();			
	//	КонецЕсли; 
	//	
	//	
	//Иначе
	//	ПараметрыОткрытия = Новый Структура;
	//	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	//	
	//	Форма = ПолучитьФорму("РегистрСведений.МЙ_ВетеринарныеДокументы.Форма.ФормаПодбораВСД", ПараметрыОткрытия, ЭтаФорма);
	//	Форма.Открыть();
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьТекущуюВСД(Команда)
	
	ТекущаяСтрока = Элементы.СписокВСД.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено ИЛИ ТипЗнч(ТекущаяСтрока ) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		Возврат;
	КонецЕсли;		
		
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Документ должен быть записан!",, "Действие не выполнено");
		Возврат;
	КонецЕсли;
	
	//Если (НЕ Объект.Проведен) Или (НЕ Объект.ПриемкаТерминаломЗакончена) Тогда
	//	ПоказатьПредупреждение(, "Документ должен быть проведен! Приемка терминалом должна быть закончена!",, "Действие не выполнено");
	//	Возврат;
	//КонецЕсли;
	
	Если ПустаяСтрока(Элементы.СписокВСД.ТекущиеДанные.UUID_ВСД)Тогда
		Предупреждение("По данной строке не привязан ветеринарный документ в системе ""Ветис""!");
		Возврат;
	КонецЕсли; 
		
	Если Элементы.СписокВСД.ТекущиеДанные.Статус <> ПредопределенноеЗначение("Справочник.МЙ_СтатусВСД.CONFIRMED") Тогда
		Предупреждение("Ветеринарно-сопроводительный документ должен находиться в статусе ""Оформлен""""");
		Возврат;
	КонецЕсли; 
	
	Если Вопрос("Выполнить гашение текущей ВСД?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Массив;
	ОбменССистемойВетисКлиентСервер.ДобавитьПараметрОтбора(ПараметрыОтбора, "UUID_ВСД", ВидСравнения.Равно, Элементы.СписокВСД.ТекущиеДанные.UUID_ВСД);
	
	МассивПривязок = ОбменССистемойВетис.ПолучитьМассивПривязокВСД(ПараметрыОтбора);
	
	Если МассивПривязок.Количество() = 0 Тогда
		Предупреждение("Не найдено данных для гашения ВСД!");
		Возврат;
	КонецЕсли; 
	
	ПараметрыПривязки = МассивПривязок[0];
	
	Если ОбменССистемойВетисКлиентСервер.ПогаситьВСД(ПараметрыПривязки) Тогда
		Предупреждение("Ветеринарно-сопроводительный документ погашен.");
		Элементы.СписокВСД.Обновить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВсеВСД(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Документ должен быть записан!",, "Действие не выполнено");
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Выполнить гашение всех подобранных ВСД?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Массив;
	ОбменССистемойВетисКлиентСервер.ДобавитьПараметрОтбора(ПараметрыОтбора, "ДокументПоступления", ВидСравнения.Равно, Объект.Ссылка);
	
	МассивПривязок = ОбменССистемойВетис.ПолучитьМассивПривязокВСД(ПараметрыОтбора);
	
	Погашено = 0;
	
	Для Каждого ПараметрыПривязки ИЗ МассивПривязок Цикл
		Если ОбменССистемойВетисКлиентСервер.ПогаситьВСД(ПараметрыПривязки) Тогда
			Погашено = Погашено + 1;			
		КонецЕсли;
	КонецЦикла;  
	
	Если МассивПривязок.Количество() > 0 Тогда
		Предупреждение("Погашено " + Погашено + " из "+ МассивПривязок.Количество() + " ВСД.");
		Элементы.СписокВСД.Обновить();
	Иначе
		Предупреждение("Не найдено подходящих ВСД для гашения!");
	КонецЕсли; 

	
КонецПроцедуры

&НаСервере
Функция ЕстьНепривязанныеВСД()
	
	ПараметрыОтбора = Новый Массив;
	ОбменССистемойВетисКлиентСервер.ДобавитьПараметрОтбора(ПараметрыОтбора, "ДокументПоступления", ВидСравнения.Равно, Объект.Ссылка);
	
	
	НастройкиСопоставления = Новый Структура();
	НастройкиСопоставления.Вставить("СопоставлениеОтправитель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеПолучатель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеСтатусВСД", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеДатаПроизводства", Истина);		
	
	КоличествоНепривязанныхВСД = ОбменССистемойВетис.ПолучитьСопоставленныеДокументыПоступленияИВСД(ПараметрыОтбора, НастройкиСопоставления).Количество();
	
	Если КоличествоНепривязанныхВСД > 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	НастройкиСопоставления = Новый Структура();
	НастройкиСопоставления.Вставить("СопоставлениеОтправитель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеПолучатель", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеСтатусВСД", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеНомерТТН", Истина);
	НастройкиСопоставления.Вставить("СопоставлениеДатаТТН", Истина);
	
	КоличествоНепривязанныхВСД = ОбменССистемойВетис.ПолучитьСопоставленныеДокументыПоступленияИВСД(ПараметрыОтбора, НастройкиСопоставления).Количество();
	
	Возврат КоличествоНепривязанныхВСД>0; 
	
КонецФункции

&НаСервере
Функция ЕстьНепривязанныеВСДФоновое() //+++АК mika 2018.11.14 ИП-00020355
	
	ИмяМетода = "Документы.ПриходныйОрдерСклад.ЕстьНепривязанныеВСД";
	НаименованиеЗадания = СтрЗаменить("Проверка наличия непривязанных ВСД к документу ТекущийДокумент", "ТекущийДокумент", Объект.Ссылка);
	
	ПараметрыЗадания = Новый Структура("ДокументСсылка", Объект.Ссылка);
	
	// Запуск фонового задания
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, Объект.Ссылка, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоПривязанныхВСД()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВетСвидетельстваПоступлений.UUID_ВСД) КАК КоличествоВСД
	|ИЗ
	|	РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	|ГДЕ
	|	ВетСвидетельстваПоступлений.ДокПоступления = &ДокПоступления");
	
	Запрос.УстановитьПараметр("ДокПоступления", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить()[0].КоличествоВСД;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюОПривязкахВСД()
	
	Элементы.СтраницаВСД.Заголовок = "Ветеринарные документы";
	
	КоличествоПривязанныхВСД = ПолучитьКоличествоПривязанныхВСД();
	
	Если КоличествоПривязанныхВСД > 0 Тогда
		Элементы.СтраницаВСД.Заголовок = "Ветеринарные документы (" + КоличествоПривязанныхВСД + ")" ;		
	КонецЕсли; 
	
	Элементы.СписокВСДГруппаПодборВСД.Заголовок = "Подобрать ВСД";
	
	//+++АК mika 2018.11.14 ИП-00020355 Перенесена в модуль менеджера процедура ЕстьНепривязанныеВСД()
	
	//Если ЕстьНепривязанныеВСД() Тогда 
	//	Элементы.СписокВСДГруппаПодборВСД.Заголовок = "Подобрать ВСД (Есть непривязанные ВСД!)";
	//КонецЕсли; 

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения	   = Истина;
	ПараметрыОжидания.ТекстСообщения	   = НСтр("ru = 'Заполнение данных по ВСД'");
	ПараметрыОжидания.ОповещениеПользователя.Показать	= Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение	= НСтр("ru = 'Заполнение данных по ВСД завершено'");
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьВФонеВСДЗавершение", ЭтаФорма);
	
	ДлительнаяОперация = ЕстьНепривязанныеВСДФоновое();
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	//---АК mika 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВФонеВСДЗавершение(Результат, ДополнительныеПараметры) Экспорт //+++АК mika 2018.11.14 ИП-00020355

	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		Если Результат.Сообщения <> Неопределено Тогда
			Для Каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если Результат <> Неопределено И Результат = Истина Тогда
			Элементы.СписокВСДГруппаПодборВСД.Заголовок = "Подобрать ВСД (Есть непривязанные ВСД!)";
		КонецЕсли;

		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВСДПриИзменении(Элемент)
	
	ОбновитьИнформациюОПривязкахВСД();
	Оповестить("ИзменилисьПривязкиВСД");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписиВСД(UUID_ВСД)
	
	Возврат РегистрыСведений.МЙ_ВетеринарныеДокументы.СоздатьКлючЗаписи(Новый Структура("UUID", UUID_ВСД));
	
КонецФункции

&НаКлиенте
Процедура СписокВСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") И СтрДлина(ВыбраннаяСтрока.Ключ)>100 Тогда
		СтандартнаяОбработка = Ложь;
		
		UUID_ВСД = Прав(ВыбраннаяСтрока.Ключ, 36);
		
		ПараметрыОткрытия = Новый Структура("Ключ", ПолучитьКлючЗаписиВСД(UUID_ВСД));
	
		ОткрытьФорму("РегистрСведений.МЙ_ВетеринарныеДокументы.Форма.ФормаЗаписи", ПараметрыОткрытия);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПривязанноеКоличество(UUID_ВСД)
	
	Результат = Новый Структура("Количество, КоличествоУпаковок, КоличествоВСД, КоличествоУпаковокВСД", 0, 0, 0, 0);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	0 КАК КоличествоВСД,
	                      |	0 КАК КоличествоУпаковокВСД,
	                      |	ВетСвидетельстваПоступлений.Количество КАК Количество,
	                      |	ВетСвидетельстваПоступлений.КоличествоУпаковок КАК КоличествоУпаковок
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	                      |ГДЕ
	                      |	ВетСвидетельстваПоступлений.UUID_ВСД = &UUID_ВСД
	                      |
	                      |ОБЪЕДИНИТЬ все
	                      |
	                      |ВЫБРАТЬ
	                      |	МЙ_ВетеринарныеДокументы.volume,
	                      |	МЙ_ВетеринарныеДокументы.packingAmount,
	                      |	0,
	                      |	0
	                      |ИЗ
	                      |	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	                      |ГДЕ
	                      |	МЙ_ВетеринарныеДокументы.UUID = &UUID_ВСД
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(СУММА(ВТ.Количество), 0) КАК Количество,
	                      |	ЕСТЬNULL(СУММА(ВТ.КоличествоУпаковок), 0) КАК КоличествоУпаковок,
	                      |	ЕСТЬNULL(СУММА(ВТ.КоличествоВСД), 0) КАК КоличествоВСД,
	                      |	ЕСТЬNULL(СУММА(ВТ.КоличествоУпаковокВСД), 0) КАК КоличествоУпаковокВСД
	                      |ИЗ
	                      |	ВТ КАК ВТ");
	
	Запрос.УстановитьПараметр("UUID_ВСД", UUID_ВСД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если  Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура СписокВСДПриАктивизацииСтроки(Элемент)
	
	UUID_ВСД = Неопределено;		
	
	ВыбраннаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") И СтрДлина(ВыбраннаяСтрока.Ключ)>100 Тогда
		UUID_ВСД = Прав(ВыбраннаяСтрока.Ключ, 36);
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элемент.ТекущиеДанные.Свойство("UUID_ВСД", UUID_ВСД);
	КонецЕсли; 

	Если ЗначениеЗаполнено(UUID_ВСД) Тогда
		Результат = ПолучитьПривязанноеКоличество(UUID_ВСД);		
		
		Элементы.СписокВСДКоличество.ТекстПодвала = Формат(Результат.Количество, "ЧДЦ=2; ЧН=");
		Элементы.СписокВСДКоличествоУпаковок.ТекстПодвала = Формат(Результат.КоличествоУпаковок, "ЧДЦ=2; ЧН=");;
		Элементы.СписокВСДКоличествоВСД.ТекстПодвала = Формат(Результат.КоличествоВСД, "ЧДЦ=2; ЧН=");
		Элементы.СписокВСДКоличествоУпаковокВСД.ТекстПодвала = Формат(Результат.КоличествоУпаковокВСД, "ЧДЦ=2; ЧН=");;
	Иначе
		Элементы.СписокВСДКоличество.ТекстПодвала = "";
		Элементы.СписокВСДКоличествоУпаковок.ТекстПодвала = "";
		Элементы.СписокВСДКоличествоВСД.ТекстПодвала = "";
		Элементы.СписокВСДКоличествоУпаковокВСД.ТекстПодвала = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьНоменклатуруПоставщикаНаСервере(Знач ВыбранныеСтроки = Неопределено)
	
	Если ВыбранныеСтроки = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВетСвидетельстваПоступлений.Номенклатура,
		|	ВетСвидетельстваПоступлений.UUID_ВСД
		|ИЗ
		|	РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
		|ГДЕ
		|	ВетСвидетельстваПоступлений.ДокПоступления = &ДокПоступления");
		
		Запрос.УстановитьПараметр("ДокПоступления", Объект.Ссылка);
		
		ТаблицаНоменклатуры = Запрос.Выполнить().Выбрать();
		
	Иначе
		ТаблицаНоменклатуры = Новый ТаблицаЗначений;
		
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
		ТаблицаНоменклатуры.Колонки.Добавить("UUID_ВСД", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
		
		Для Каждого ТекущаяСтрока  Из ВыбранныеСтроки Цикл
			Если ТипЗнч(ТекущаяСтрока ) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;		
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЦикла;  
		
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаНоменклатуры.Номенклатура,
	                      |	ТаблицаНоменклатуры.UUID_ВСД
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Номенклатура,
	                      |	МЙ_ВетеринарныеДокументы.productItem
	                      |ИЗ
	                      |	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	                      |		ПО МЙ_ВетеринарныеДокументы.UUID = ВТ.UUID_ВСД");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.МЙ_СоответствиеНоменклатурыКонтрагентов.СоздатьМенеджерЗаписи();
		
		МЗ.Контрагент = Объект.Поставщик;
		МЗ.Номенклатура = Выборка.Номенклатура;
		
		МЗ.Прочитать();
		
		МЗ.Контрагент = Объект.Поставщик;
		МЗ.Номенклатура = Выборка.Номенклатура;

		МЗ.productItem = Выборка.productItem;
		
		МЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьНоменклатуруПоставщика(Команда)
	
	ТекущаяСтрока = Элементы.СписокВСД.ТекущаяСтрока;
	
	Если Команда.Имя = "ПривязатьНоменклатуруПоставщикаВыбранную" Тогда
		ПривязатьНоменклатуруПоставщикаНаСервере(Элементы.СписокВСД.ВыделенныеСтроки);	
	Иначе
		ПривязатьНоменклатуруПоставщикаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьУпаковкиВСДНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	                      |	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	                      |	СУММА(ПриходныйОрдерСкладТовары.Количество * ПриходныйОрдерСкладТовары.ЕдиницаИзмерения.Вес) КАК Вес,
	                      |	СУММА(ПриходныйОрдерСкладТовары.КоличествоКоробок) КАК КоличествоКоробок
	                      |ПОМЕСТИТЬ ВТ_Товары
	                      |ИЗ
	                      |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	                      |ГДЕ
	                      |	ПриходныйОрдерСкладТовары.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПриходныйОрдерСкладТовары.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВетСвидетельстваПоступлений.ДокПоступления,
	                      |	ВетСвидетельстваПоступлений.Номенклатура,
	                      |	ВетСвидетельстваПоступлений.UUID_ВСД КАК UUID_ВСД,
	                      |	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствСерия,
	                      |	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствНомер,
	                      |	ВетСвидетельстваПоступлений.ДанныеВетСвидетельствДата,
	                      |	ВетСвидетельстваПоступлений.GUIDЗаписиЖурналаПродукции,
	                      |	ВетСвидетельстваПоступлений.УдалитьВСД,
	                      |	ВетСвидетельстваПоступлений.Количество,
	                      |	ВетСвидетельстваПоступлений.КоличествоУпаковок КАК КоличествоУпаковок,
	                      |	ВетСвидетельстваПоступлений.КемВыдан,
	                      |	ВетСвидетельстваПоступлений.ИнформацияОбИсследовании,
	                      |	ВетСвидетельстваПоступлений.АдресПроизводителя,
	                      |	ВЫБОР
	                      |		КОГДА МЙ_ВетеринарныеДокументы.unit.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК УказанВес,
	                      |	ВТ_Товары.Количество КАК КоличествоДокумент,
	                      |	ВТ_Товары.Вес КАК ВесДокумент,
	                      |	ВТ_Товары.КоличествоКоробок КАК КоличествоКоробокДокумент,
	                      |	МЙ_ВетеринарныеДокументы.volume,
	                      |	МЙ_ВетеринарныеДокументы.packingAmount
	                      |ИЗ
	                      |	РегистрСведений.ВетСвидетельстваПоступлений КАК ВетСвидетельстваПоступлений
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	                      |		ПО ВетСвидетельстваПоступлений.UUID_ВСД = МЙ_ВетеринарныеДокументы.UUID
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	                      |		ПО ВетСвидетельстваПоступлений.Номенклатура = ВТ_Товары.Номенклатура,
	                      |	Константы КАК Константы
	                      |ГДЕ
	                      |	ВетСвидетельстваПоступлений.ДокПоступления = &Ссылка
	                      |ИТОГИ ПО
	                      |	UUID_ВСД");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ВыборкаВСД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВСД.Следующий() Цикл
		
		КоличествоУпаковокПривязаноОбщее = 0;
		
		Выборка = ВыборкаВСД.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МЗ = РегистрыСведений.ВетСвидетельстваПоступлений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			МЗ.Прочитать();
			
			Если Выборка.УказанВес Тогда
				ОбъемСовпадает = (Выборка.ВесДокумент = Выборка.volume);
			Иначе
				ОбъемСовпадает = (Выборка.КоличествоДокумент = Выборка.volume);
			КонецЕсли; 
			
			Если ОбъемСовпадает Тогда
				МЗ.КоличествоУпаковок = Выборка.packingAmount - КоличествоУпаковокПривязаноОбщее;
			Иначе
				МЗ.КоличествоУпаковок = Мин(Выборка.КоличествоКоробокДокумент, Выборка.packingAmount - КоличествоУпаковокПривязаноОбщее);
			КонецЕсли;
			
			КоличествоУпаковокПривязаноОбщее = КоличествоУпаковокПривязаноОбщее + МЗ.КоличествоУпаковок;
			
			МЗ.Записать();
		КонецЦикла;   	
		
	КонецЦикла;   
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьУпаковкиВСД(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Вопрос("Перед подбором ВСД необходимо записать изменения! Записать?", РежимДиалогаВопрос.ОКОтмена, 20, КодВозвратаДиалога.ОК) <> КодВозвратаДиалога.ОК Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьУпаковкиВСДНаСервере();
	
	Элементы.СписокВСД.Обновить();
	
КонецПроцедуры


//---АК SaMi  

//+++ KOPA 27.11.2017 [ИП-00017264]
&НаСервере
Процедура ПроверитьНаличиеТоваровПоставщикаНаСкладеВозвратаНаСервере()
	Продолжаем = (ЗначениеЗаполнено(Объект.Склад) и ЗначениеЗаполнено(Объект.Поставщик)) и
		(Не ЗначениеЗаполнено(Объект.Дата) Или (НачалоДня(ТекущаяДата()) <= Объект.Дата) и Объект.Дата <= КонецДня(ТекущаяДата()));
	
	Если Не Продолжаем Тогда
		Элементы.ДекорацияЕстьТоварыНаВозврат.Видимость = Ложь;
		
		Возврат;	
	КонецЕсли;
	
	ЕстьТоварыПоставщикаНаСкладеВозврата = Документы.ПриходныйОрдерСклад.ЕстьТоварыПоставщикаНаСкладеВозврата(Объект, ТекущаяДата());
	
	Элементы.ДекорацияЕстьТоварыНаВозврат.Видимость = ЕстьТоварыПоставщикаНаСкладеВозврата;
КонецПроцедуры//--- KOPA

//+++АК KIRN 2018.08.15 ИП-00019316.000.00000002 
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Номенклатура = ТекСтрока.Номенклатура;
	й = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "ТребуетсяВетеринарныйСертификат");
	Если й Тогда
		Если ПроверитьПривязанностьТовараНаСервере(Номенклатура) ТОгда
			ОбщегоНазначения.СообщитьИнформациюПользователю("По удаляемой строке привязан ВСД ("+Номенклатура+")");
			Отказ = Истина;
		КонецЕСли;
	КонецЕСли;
	
КонецПроцедуры

//+++АК KIRN 2018.08.15 
Функция ПроверитьПривязанностьТовараНаСервере(пНоменклатура)
	ЕстьПривязка = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления,
	               |	РегистрСведенийВетСвидетельстваПоступлений.Номенклатура,
	               |	РегистрСведенийВетСвидетельстваПоступлений.UUID_ВСД,
	               |	РегистрСведенийВетСвидетельстваПоступлений.ДанныеВетСвидетельствСерия,
	               |	РегистрСведенийВетСвидетельстваПоступлений.ДанныеВетСвидетельствНомер,
	               |	РегистрСведенийВетСвидетельстваПоступлений.ДанныеВетСвидетельствДата,
	               |	РегистрСведенийВетСвидетельстваПоступлений.GUIDЗаписиЖурналаПродукции,
	               |	РегистрСведенийВетСвидетельстваПоступлений.УдалитьВСД,
	               |	РегистрСведенийВетСвидетельстваПоступлений.Количество,
	               |	РегистрСведенийВетСвидетельстваПоступлений.КоличествоУпаковок,
	               |	РегистрСведенийВетСвидетельстваПоступлений.КемВыдан,
	               |	РегистрСведенийВетСвидетельстваПоступлений.ИнформацияОбИсследовании,
	               |	РегистрСведенийВетСвидетельстваПоступлений.АдресПроизводителя,
	               |	МЙ_ВетеринарныеДокументы.status КАК Статус,
	               |	МЙ_ВетеринарныеДокументы.packingAmount КАК КоличествоУпаковокВСД,
	               |	МЙ_ВетеринарныеДокументы.packingList КАК ВидУпаковки,
	               |	МЙ_ВетеринарныеДокументы.volume КАК КоличествоВСД,
	               |	МЙ_ВетеринарныеДокументы.unit КАК ЕдиницаИзмерения,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаТТН = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаПоставщика
	               |		ИНАЧЕ РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления.ДатаДокументаТТН
	               |	КОНЕЦ КАК ДатаТТН,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаТТН = """"""""
	               |			ТОГДА РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаПоставщика
	               |		ИНАЧЕ РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления.НомерДокументаТТН
	               |	КОНЕЦ КАК НомерТТН,
	               |	МЙ_ВетеринарныеДокументы.waybillDate КАК ДатаТТНВСД,
	               |	МЙ_ВетеринарныеДокументы.waybillNumber КАК НомерТТНВСД,
	               |	МЙ_ВетеринарныеДокументы.productItem КАК НаименованиеПоставщика,
	               |	МЙ_ВетеринарныеДокументы.subProduct КАК ПродукцияВетис,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийВетСвидетельстваПоступлений.UUID_ВСД = """"
	               |			ТОГДА ""ВСД, внесенные вручную""
	               |		ИНАЧЕ ""ВСД в системе """"Ветис"""" .																																																																"" + РегистрСведенийВетСвидетельстваПоступлений.UUID_ВСД
	               |	КОНЕЦ КАК ПредставлениеВСД
	               |ИЗ
	               |	РегистрСведений.ВетСвидетельстваПоступлений КАК РегистрСведенийВетСвидетельстваПоступлений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
	               |		ПО РегистрСведенийВетСвидетельстваПоступлений.UUID_ВСД = МЙ_ВетеринарныеДокументы.UUID
	               |ГДЕ
	               |	РегистрСведенийВетСвидетельстваПоступлений.ДокПоступления = &Документ
	               |	И РегистрСведенийВетСвидетельстваПоступлений.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Документ",Объект.Ссылка);
	Запрос.УстановитьПараметр("Номенклатура",пНоменклатура);
	тз = Запрос.Выполнить().Выгрузить();
	если тз.Количество()>0 Тогда
		ЕстьПривязка = Истина;
	КонецЕСли;
	Возврат ЕстьПривязка;
КонецФункции



ВыполнитьЗакрытие = Ложь;