
Перем СтатьяДРАренда;
Перем масДокументовДляПерепроведения, бПроведение;

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.НачислениеАренды Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ТипАренднойПлаты) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " не заполнен реквизит <Тип арендной платы>", Отказ);
		КонецЕсли;
	КонецЦикла;
	
	//+++АК SUVV 2018.03.15 ИП-00018025
	//ПроцедурыНачисления.ПроверитьЛимитыПоАрендеНачислениеАренднойПлаты(ЭтотОбъект.Ссылка, Отказ);
	Если не (ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть и ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.ПоСчету) Тогда
		ПроцедурыНачисления.ПроверитьЛимитыПоАрендеНачислениеАренднойПлаты(ЭтотОбъект.Ссылка, Отказ);
	КонецЕсли;
	//---АК SUVV
	
	//+++АК POZM 2018.01.11 ИП-00017514 
	ПроверитьНаПереплатыПоЗаявкам(Отказ);
	//---АК POZM 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//+++АК SUVV 2018.03.06 ИП-00018062
	Если Дата >= Дата(2018,02,01) и ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть и ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.ПоСчету Тогда 
		СтатьяДРАренда = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("31019");	
	Иначе
		СтатьяДРАренда = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("31010");
	КонецЕсли;
	//---АК SUVV

	//+++АК ZICD 28.12.2016 ИП-00014363
	НачалоУчётаМСФО = АК_УчетМСФОПривилегированный.ПолучитьДатуНачалаУчетаМСФО();
	//---АК
	
	Движения.Финансовый.Записывать = Истина;
	//+++АК POZM 2018.05.11 ИП-00018617 
	Движения.АК_РасчетныеНачисленияПоАрендеМСФО.Записывать = Истина;
	Движения.АК_РасчетныеНачисленияПоАрендеМСФО.Очистить();
	//---АК POZM 
	
	ОрганизацияДляОплатыНаличными = Константы.ОрганизацияДляОплатыНаличными.Получить();
	
	НастройкаОтраженияОперацииВУчетеНДС = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_НачислениеАренднойПлатыОтАрендодателей, Дата);
	//+++АК POZM 2018.01.11 ИП-00017514 
	Если ЭтотОбъект.ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.ПоСчету Тогда
		СчетРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду("60.22");
	Иначе	
		СчетРасчетов =ПланыСчетов.Финансовый.РасчетыПоАренде;
	КонецЕсли;	
	//---АК POZM 
	//+++АК POZM 2018.05.09 ИП-00018617 ошибка в закрытии расчетных сумм по МСФО. 
	Если НачислениеАренды.Найти(Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть,"ТипАренднойПлаты") <> Неопределено Тогда
		ЗапросПоРасчетнымСуммам = Новый Запрос;
		ЗапросПоРасчетнымСуммам.Текст = "ВЫБРАТЬ
		             |	СУММА(АК_РасчетныеНачисленияПоАрендеМСФООбороты.РасчетнаяСуммаОборот) КАК РасчетнаяСуммаОборот,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.РасчетныйПериод,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.Организация,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.Контрагент,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.Договор,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.СтруктурнаяЕдиница
		             |ИЗ
		             |	РегистрНакопления.АК_РасчетныеНачисленияПоАрендеМСФО.Обороты(
		             |			,
		             |			,
		             |			,
		             |			РасчетныйПериод В (&МассивПериодов)
		             |				И Организация В (&МассивОрганизаций)
		             |				И Контрагент В (&МассивКонтрагентов)
		             |				И Договор В (&МассивДоговоров)
		             |				И СтруктурнаяЕдиница В (&МассивТочек)) КАК АК_РасчетныеНачисленияПоАрендеМСФООбороты
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.Организация,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.РасчетныйПериод,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.Контрагент,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.Договор,
		             |	АК_РасчетныеНачисленияПоАрендеМСФООбороты.СтруктурнаяЕдиница";
		//+++ AK suvv 27.07.2018 ИП-00018737 
		//ТЗДокумента = НачислениеАренды.Выгрузить(,"Контрагент,Договор,СтруктурнаяЕдиница,ПериодРегистрации,Организация");
		ТЗДокумента = НачислениеАренды.Выгрузить(,"Контрагент,Договор,СтруктурнаяЕдиница,ПериодРегистрации,Организация,Сумма");
		
		ВсегоСтрок = ТЗДокумента.Количество() - 1;
		Сч = 0;
		Пока Сч <= ВсегоСтрок Цикл
			Запись = ТЗДокумента.Получить(Сч);
			Если Запись.Сумма = 0 тогда
				ТЗДокумента.Удалить(Сч);
				ВсегоСтрок = ВсегоСтрок - 1;
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		//--- AK suvv
		ТЗДокумента.Свернуть("Контрагент,Договор,СтруктурнаяЕдиница,ПериодРегистрации,Организация");
		ЗапросПоРасчетнымСуммам.УстановитьПараметр("МассивПериодов",ТЗДокумента.ВыгрузитьКолонку("ПериодРегистрации"));
		ЗапросПоРасчетнымСуммам.УстановитьПараметр("МассивКонтрагентов",ТЗДокумента.ВыгрузитьКолонку("Контрагент"));
		ЗапросПоРасчетнымСуммам.УстановитьПараметр("МассивДоговоров",ТЗДокумента.ВыгрузитьКолонку("Договор"));
		ЗапросПоРасчетнымСуммам.УстановитьПараметр("МассивТочек",ТЗДокумента.ВыгрузитьКолонку("СтруктурнаяЕдиница"));
		ЗапросПоРасчетнымСуммам.УстановитьПараметр("МассивОрганизаций",ТЗДокумента.ВыгрузитьКолонку("Организация"));
		КэшОборотовПоРасчетнымСуммам = ЗапросПоРасчетнымСуммам.Выполнить().Выгрузить();
	КонецЕсли;	
	//---АК POZM 
	Для Каждого Строка Из НачислениеАренды Цикл
		СуммаНДСПоСтроке = 0;
		СуммаВсего = 0;
		Если ЗначениеЗаполнено(НастройкаОтраженияОперацииВУчетеНДС.Счет) Тогда
			СуммаНДСПоСтроке = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)), 2);
			СуммаВсего = Строка.Сумма - СуммаНДСПоСтроке;
		Иначе
			СуммаВсего = Строка.Сумма;
		КонецЕсли;	
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = Дата;
		//+++АК ZICD 28.12.2016 ИП-00014363
		Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
		//---АК
		Проводка.СчетДт = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходовРасходов", СтатьяДРАренда);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ЦФО", Строка.ЦФО);
		//+++АК POZM 2018.01.11 ИП-00017514 
		//Проводка.СчетКт = СчетРасчетов;
		Проводка.СчетКт = СчетРасчетов;
		//---АК POZM 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
		Проводка.Содержание = "Начисление аренды за период с " + Формат(НачалоМесяца(Строка.ПериодРегистрации), "ДФ=dd.MM.yyyy") + " по " + Формат(КонецМесяца(Строка.ПериодРегистрации), "ДФ=dd.MM.yyyy");
		Проводка.Содержание = Проводка.Содержание + ?(СокрЛП(Проводка.Содержание) <> "" И СокрЛП(Строка.Описание) <> "", ". ", "") + СокрЛП(Строка.Описание);
		Проводка.Сумма = СуммаВсего;
		
		//++++ АК AZAP 21.02.2017 ИП-00014747
		СуммаНДСПоСтроке2 = 0;
		СуммаНДСПоСтроке3 = 0;
		//Если Ложь Тогда
		Если Строка.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть Тогда
			//+++АК POZM 2018.05.09 ИП-00018617 
			#Область АК_ОтключенныйКод 
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ
			//|	АК_РасчетныеНачисленияПоАрендеМСФООбороты.РасчетнаяСуммаОборот
			//|ИЗ
			//|	РегистрНакопления.АК_РасчетныеНачисленияПоАрендеМСФО.Обороты(
			//|			,
			//|			,
			//|			,
			//|			РасчетныйПериод = &Период
			//|				И Организация = &Организация
			//|				И Контрагент = &Контрагент
			//|				И Договор = &Договор
			//|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК АК_РасчетныеНачисленияПоАрендеМСФООбороты";
			//Запрос.УстановитьПараметр("Организация", Строка.Организация);
			//Запрос.УстановитьПараметр("Контрагент", Строка.Контрагент);
			//Запрос.УстановитьПараметр("Договор", Строка.Договор);
			//Запрос.УстановитьПараметр("Период", НачалоМесяца(Строка.ПериодРегистрации));
			//Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Строка.СтруктурнаяЕдиница);
			//Результат = Запрос.Выполнить();
			//
			//ВыборкаДетальныеЗаписи = Результат.Выбрать();
			//
			//РасчетнаяСумма = 0;
			//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//	РасчетнаяСумма = ВыборкаДетальныеЗаписи.РасчетнаяСуммаОборот;
			//КонецЦикла;
			#КонецОбласти 
			
			РасчетнаяСумма = 0;
			
			Если ЭтотОбъект.ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.ПоСчету Тогда
				РасчетныеОборотыПоСтроке = КэшОборотовПоРасчетнымСуммам.НайтиСтроки(Новый Структура(" Контрагент, Договор, РасчетныйПериод, СтруктурнаяЕдиница, Организация", Строка.Контрагент, Строка.Договор, НачалоМесяца(Строка.ПериодРегистрации), Строка.СтруктурнаяЕдиница, Строка.Организация));
				Если РасчетныеОборотыПоСтроке.Количество() > 0 Тогда
					РасчетнаяСумма = РасчетныеОборотыПоСтроке[0].РасчетнаяСуммаОборот;
					РасчетныеОборотыПоСтроке[0].РасчетнаяСуммаОборот = 0;
				КонецЕсли;	
			КонецЕсли;
			
			//---АК POZM 
			
			ПоложительнаяРазница = Макс(СуммаВсего - РасчетнаяСумма, РасчетнаяСумма - СуммаВсего);
			
			Проводка.Сумма = ПоложительнаяРазница;
			
			Если РасчетнаяСумма <> 0 Тогда
				//+++АК POZM 2018.05.11 ИП-00018617 
				НоваяЗапись = Движения.АК_РасчетныеНачисленияПоАрендеМСФО.Добавить();
				НоваяЗапись.Период = Дата;
				НоваяЗапись.РасчетныйПериод = НачалоМесяца(Строка.ПериодРегистрации);
				НоваяЗапись.Организация = Проводка.Организация;
				НоваяЗапись.Контрагент = Строка.Контрагент;
				НоваяЗапись.Договор = Строка.Договор;
				НоваяЗапись.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница;
				НоваяЗапись.РасчетнаяСумма = -РасчетнаяСумма;
				//Движения.АК_РасчетныеНачисленияПоАрендеМСФО.Записать();
				//---АК POZM 
				Проводка2 = Движения.Финансовый.Добавить();
				Проводка2.Период = Проводка.Период;
				Проводка2.Организация = Проводка.Организация;
				Проводка2.СчетДт = Проводка.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "СтатьиДоходовРасходов", СтатьяДРАренда);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "ЦФО", Строка.ЦФО);
				Проводка2.СчетКт = Проводка.СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", Строка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				Проводка2.Содержание = Проводка.Содержание;
				Проводка2.Сумма = СуммаВсего - ПоложительнаяРазница;
				
				СуммаВсего3 = 0;
				Если ЗначениеЗаполнено(НастройкаОтраженияОперацииВУчетеНДС.Счет) Тогда
					СуммаНДСПоСтроке3 = Окр(УчетНДС.РассчитатьСуммуНДС(РасчетнаяСумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)), 2);
					СуммаВсего3 = РасчетнаяСумма - СуммаНДСПоСтроке3;
				Иначе
					СуммаВсего3 = РасчетнаяСумма;
				КонецЕсли;
				
				Проводка2.СуммаМСФО = - СуммаВсего3;	//ПоложительнаяРазница - СуммаВсего;
			КонецЕсли;
			
			Если Строка.АК_РасчетнаяСумма <> 0 Тогда
				Проводка2 = Движения.Финансовый.Добавить();
				Проводка2.Период = Проводка.Период;
				Проводка2.Организация = Проводка.Организация;
				Проводка2.СчетДт = Проводка.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "СтатьиДоходовРасходов", СтатьяДРАренда);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "ЦФО", Строка.ЦФО);
				Проводка2.СчетКт = Проводка.СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", Строка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				Проводка2.Содержание = Проводка.Содержание;
				Проводка2.Сумма = 0;
				
				СуммаВсего2 = 0;
				Если ЗначениеЗаполнено(НастройкаОтраженияОперацииВУчетеНДС.Счет) Тогда
					СуммаНДСПоСтроке2 = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.АК_РасчетнаяСумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС)), 2);
					СуммаВсего2 = Строка.АК_РасчетнаяСумма - СуммаНДСПоСтроке2;
				Иначе
					СуммаВсего2 = Строка.АК_РасчетнаяСумма;
				КонецЕсли;
				
				Проводка2.СуммаМСФО = СуммаВсего2;
				
				//ветеринар
				//кладовщик
				//операторсклада
				//полныеправа
				//учетдоговоров
				//финансовыйдиректор
				НоваяЗапись = Движения.АК_РасчетныеНачисленияПоАрендеМСФО.Добавить();
				НоваяЗапись.Период = Дата;
				НоваяЗапись.РасчетныйПериод = НачалоМесяца(Строка.ПериодРегистрации);
				НоваяЗапись.Организация = Проводка.Организация;
				НоваяЗапись.Контрагент = Строка.Контрагент;
				НоваяЗапись.Договор = Строка.Договор;
				НоваяЗапись.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница;
				НоваяЗапись.РасчетнаяСумма = Строка.АК_РасчетнаяСумма;
				//Движения.АК_РасчетныеНачисленияПоАрендеМСФО.Записать();
			КонецЕсли;
		КонецЕсли;
		//---- АК AZAP
		
		Если СуммаНДСПоСтроке <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = Дата;
			//+++АК ZICD 28.12.2016 ИП-00014363
			Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
			//---АК
			Проводка.СчетДт = НастройкаОтраженияОперацииВУчетеНДС.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалогов", НастройкаОтраженияОперацииВУчетеНДС.ДопРеквизит);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Строка.СтавкаНДС);
			Проводка.СчетКт = СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
			Проводка.Содержание = "НДС аренды";
			Проводка.Сумма = СуммаНДСПоСтроке;
		КонецЕсли;
		
		//++++ АК AZAP 21.02.2017 ИП-00014747
		Если СуммаНДСПоСтроке2 <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = Дата;
			Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
			Проводка.СчетДт = НастройкаОтраженияОперацииВУчетеНДС.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалогов", НастройкаОтраженияОперацииВУчетеНДС.ДопРеквизит);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Строка.СтавкаНДС);
			Проводка.СчетКт = СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
			Проводка.Содержание = "НДС аренды";
			Проводка.Сумма = 0;
			Проводка.СуммаМСФО = СуммаНДСПоСтроке2;
		КонецЕсли;
		
		Если СуммаНДСПоСтроке3 <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = Дата;
			Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
			Проводка.СчетДт = НастройкаОтраженияОперацииВУчетеНДС.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалогов", НастройкаОтраженияОперацииВУчетеНДС.ДопРеквизит);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Строка.СтавкаНДС);
			Проводка.СчетКт = СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
			Проводка.Содержание = "НДС аренды";
			Проводка.Сумма = 0;
			Проводка.СуммаМСФО = - СуммаНДСПоСтроке3;
		КонецЕсли;
		//---- АК AZAP
		
		//+++ AK suvv 04.04.2018 ИП-00018071
		// дополнительные проводки по суммам НДФЛ
		Если Дата >= Дата(2018,03,01) Тогда 
			// Дт 44.3 Кт 60.2
			Если (ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть или 
				ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть и ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.Фиксированная или
				ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть и ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.ПоСчету) и
				Строка.СуммаНДФЛ <> 0 Тогда
				
				Проводка =  Движения.Финансовый.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
				Проводка.СчетДт = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходовРасходов", СтатьяДРАренда);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ЦФО", Строка.ЦФО);
				Проводка.СчетКт = СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				Проводка.Содержание = "Начисление НДФЛ за период с " + Формат(НачалоМесяца(Строка.ПериодРегистрации), "ДФ=dd.MM.yyyy") + " по " + Формат(КонецМесяца(Строка.ПериодРегистрации), "ДФ=dd.MM.yyyy");
				Проводка.Содержание = Проводка.Содержание + ?(СокрЛП(Проводка.Содержание) <> "" И СокрЛП(Строка.Описание) <> "", ". ", "") + СокрЛП(Строка.Описание);
				Проводка.Сумма = Строка.СуммаНДФЛ;
				
				Проводка =  Движения.Финансовый.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
				Проводка.СчетДт = СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Строка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				Проводка.СчетКт = ПланыСчетов.Финансовый.НалогиСФОТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалогов", Справочники.ВидыНалогов.НайтиПоКоду("000000025"));
				Проводка.Содержание = "Списание НДФЛ за период с " + Формат(НачалоМесяца(Строка.ПериодРегистрации), "ДФ=dd.MM.yyyy") + " по " + Формат(КонецМесяца(Строка.ПериодРегистрации), "ДФ=dd.MM.yyyy");
				Проводка.Содержание = Проводка.Содержание + ?(СокрЛП(Проводка.Содержание) <> "" И СокрЛП(Строка.Описание) <> "", ". ", "") + СокрЛП(Строка.Описание);
				Проводка.Сумма = Строка.СуммаНДФЛ;

			КонецЕсли;
		КонецЕсли;
		//--- AK suvv
		
	КонецЦикла;
	Для Каждого Строка Из НачислениеДепозита Цикл
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = Дата;
		//+++АК ZICD 12.01.2017 ИП-00014363
		Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
		//---АК
		Проводка.СчетДт = СчетРасчетов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Строка.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
		Проводка.СчетКт = ПланыСчетов.Финансовый.ОбеспечительныйВзнос;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
		Проводка.Содержание = "Начисление депозита за период с " + Формат(НачалоМесяца(ПериодРегистрации), "ДФ=dd.MM.yyyy") + " по " + Формат(КонецМесяца(ПериодРегистрации), "ДФ=dd.MM.yyyy");
		Проводка.Содержание = Проводка.Содержание + ?(СокрЛП(Проводка.Содержание) <> "" И СокрЛП(Строка.Описание) <> "", ". ", "") + СокрЛП(Строка.Описание);
		Проводка.Сумма = Строка.Сумма;
	КонецЦикла;
	
	Для Каждого Строка Из ПрочаяЗадолженность Цикл
		
		СуммаНДСПоСтроке = 0;
		СуммаВсего = 0;
		Если ЗначениеЗаполнено(НастройкаОтраженияОперацииВУчетеНДС.Счет) И ЗначениеЗаполнено(Строка.Договор.СтавкаНДС) Тогда
			СуммаНДСПоСтроке = Окр(УчетНДС.РассчитатьСуммуНДС(Строка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Строка.Договор.СтавкаНДС)), 2);
			СуммаВсего = Строка.Сумма - СуммаНДСПоСтроке;
		Иначе
			СуммаВсего = Строка.Сумма;
		КонецЕсли;	
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = Дата;
		//+++АК ZICD 12.01.2017 ИП-00014363
		Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
		//---АК
		//+++АК GEYV 02.07.2015
		СчетДт = ?(Дата >= '20150501',?(ЗначениеЗаполнено(Строка.СчетДт),
		Строка.СчетДт,ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения),
		ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения);
		
		Проводка.СчетДт = СчетДт;     
		//---АК
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходовРасходов", Строка.СтатьяДР);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ЦФО", Строка.ЦФО);
		//Минеев доработал
		Если Дата >= '20170101' Тогда
			Проводка.СчетКт = СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", ?(ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаКт),Строка.СтруктурнаяЕдиницаКт,Строка.СтруктурнаяЕдиница));
		Иначе	
			Проводка.СчетКт = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
		КонецЕсли;	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
		Проводка.Содержание = Строка.Описание;
		Проводка.Сумма = СуммаВсего;
		
		Если СуммаНДСПоСтроке <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = Дата;
			//+++АК ZICD 12.01.2017 ИП-00014363
			Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
			//---АК
			Проводка.СчетДт = НастройкаОтраженияОперацииВУчетеНДС.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалогов", НастройкаОтраженияОперацииВУчетеНДС.ДопРеквизит);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Строка.Договор.СтавкаНДС);
			
			//+++АК БЕЛН 12.04.2017
			//Проводка.СчетКт = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
			Если Дата >= '20170101' Тогда
				Проводка.СчетКт = СчетРасчетов;
			Иначе	
				Проводка.СчетКт = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
			КонецЕсли;	
			//+++АК БЕЛН 12.04.2017
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", ?(ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаКт),Строка.СтруктурнаяЕдиницаКт,Строка.СтруктурнаяЕдиница));
			Проводка.Содержание = "НДС";
			Проводка.Сумма = СуммаНДСПоСтроке;
		КонецЕсли;
		
		//+++ AK suvv 04.04.2018 ИП-00018071
		// дополнительные проводки по суммам НДФЛ
		Если Дата >= Дата(2018,03,01) Тогда 
			// Дт 44.2 Кт 60.2
			Если (ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть или 
				ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть и ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.Фиксированная или
				ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть и ВидАренднойПлаты = Перечисления.ВидыАренднойПлаты.ПоСчету) и
				Строка.СуммаНДФЛ <> 0 Тогда
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
				СчетДт = ?(Дата >= '20150501',?(ЗначениеЗаполнено(Строка.СчетДт), Строка.СчетДт, ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения), ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения);
				Проводка.СчетДт = СчетДт;     
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", Строка.СтруктурнаяЕдиница);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходовРасходов", Строка.СтатьяДР);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ЦФО", Строка.ЦФО);
				Если Дата >= '20170101' Тогда
					Проводка.СчетКт = СчетРасчетов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", ?(ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаКт),Строка.СтруктурнаяЕдиницаКт,Строка.СтруктурнаяЕдиница));
				Иначе	
					Проводка.СчетКт = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
				КонецЕсли;	
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Контрагент);
				Проводка.Содержание = "НДФЛ";
				Проводка.Сумма = Строка.СуммаНДФЛ;
				
				Проводка =  Движения.Финансовый.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = АК_УчетМСФО.ПолучитьОрганизациюПоДоговору(Строка.Договор, Проводка.Период, НачалоУчётаМСФО);
				Если Дата >= '20170101' Тогда
					Проводка.СчетДт = СчетРасчетов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", ?(ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаКт),Строка.СтруктурнаяЕдиницаКт,Строка.СтруктурнаяЕдиница));
				Иначе	
					Проводка.СчетДт = ПланыСчетов.Финансовый.ПрочаяЗадолженность;
				КонецЕсли;	
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Строка.Контрагент);
				Проводка.СчетКт = ПланыСчетов.Финансовый.НалогиСФОТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличные, ОрганизацияДляОплатыНаличными, Строка.Организация));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалогов", Справочники.ВидыНалогов.НайтиПоКоду("000000025"));
				Проводка.Содержание = "Списание НДФЛ";
				Проводка.Сумма = Строка.СуммаНДФЛ;

			КонецЕсли;
		КонецЕсли;
		//--- AK suvv

	КонецЦикла;

	Движения.НачисленияПоДоговорамАренды.Записывать = Истина;
	
	//ТЗНачисления = НачислениеАренды.Выгрузить();
	//ТЗНачисления.Свернуть("Контрагент, СтруктурнаяЕдиница, ТипАренднойПлаты", "Сумма");
	//Для Каждого Строка Из ТЗНачисления Цикл
	//	ТЗДоговорыПоДням = ПроцедурыНачисления.ПолучитьТЗДоговорыПоДням(Организация, Строка.Контрагент, Строка.СтруктурнаяЕдиница, ФормаОплаты, ПериодРегистрации, КонецМесяца(ПериодРегистрации));
	//	ТЗДоговорыПоДням.Колонки.Добавить("Сумма");
	//	ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДоговорыПоДням, "СуммаПлан", "Сумма", Строка.Сумма);
	//	
	//	Если ТЗДоговорыПоДням.Количество() = 0 Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Начисление аренды. По параметрам (" + Строка.Контрагент + ", " + Строка.СтруктурнаяЕдиница + ") не обнаружены плановые данные по договорам аренды");
	//	КонецЕсли;
	//	
	//	Для Каждого СтрокаДень Из ТЗДоговорыПоДням Цикл	 
	//		Движение = Движения.НачисленияПоДоговорамАренды.Добавить();
	//		Движение.Период = Дата;
	//		Движение.Дата = СтрокаДень.ДатаКалендаря;
	//		Движение.Депозит = Ложь;
	//		Движение.Договор = СтрокаДень.Договор;
	//		Движение.Документ = Ссылка;
	//		Движение.Контрагент = Строка.Контрагент;
	//		Движение.ОбъектАренды = СтрокаДень.Договор.ОбъектАренды;
	//		Движение.Организация = Организация;
	//		Движение.Услуга = СтрокаДень.Услуга;
	//		Движение.ФормаОплаты = СтрокаДень.ФормаОплаты;
	//		Движение.СтавкаНДС = СтрокаДень.СтавкаНДС;
	//		Движение.СпособНачисления = СтрокаДень.СпособНачисления;
	//		Движение.ТипАренднойПлаты = Строка.ТипАренднойПлаты;
	//		Движение.Ставка = СтрокаДень.Ставка;
	//		Движение.Сумма = СтрокаДень.Сумма;
	//	КонецЦикла;
	//КонецЦикла;
	//
	//ТЗНачисления = НачислениеДепозита.Выгрузить();
	//ТЗНачисления.Свернуть("Контрагент, СтруктурнаяЕдиница", "Сумма");
	//Для Каждого Строка Из ТЗНачисления Цикл
	//	ТЗДоговорыПоДням = ПроцедурыНачисления.ПолучитьТЗДоговорыПоДням(Организация, Строка.Контрагент, Строка.СтруктурнаяЕдиница, ФормаОплаты, ПериодРегистрации, КонецМесяца(ПериодРегистрации));
	//	ТЗДоговорыПоДням.Колонки.Добавить("Сумма");
	//	ПроцедурыНачисления.РаспределениеПоТабличнойЧасти4_4(ТЗДоговорыПоДням, "СуммаПлан", "Сумма", Строка.Сумма);
	//	
	//	Если ТЗДоговорыПоДням.Количество() = 0 Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Начисление аренды. По параметрам (" + Строка.Контрагент + ", " + Строка.СтруктурнаяЕдиница + ") не обнаружены плановые данные по договорам аренды");
	//	КонецЕсли;
	//	
	//	Для Каждого СтрокаДень Из ТЗДоговорыПоДням Цикл	 
	//		Движение = Движения.НачисленияПоДоговорамАренды.Добавить();
	//		Движение.Период = Дата;
	//		Движение.Дата = СтрокаДень.ДатаКалендаря;
	//		Движение.Депозит = Истина;
	//		Движение.Договор = СтрокаДень.Договор;
	//		Движение.Документ = Ссылка;
	//		Движение.Контрагент = Строка.Контрагент;
	//		Движение.ОбъектАренды = СтрокаДень.Договор.ОбъектАренды;
	//		Движение.Организация = Организация;
	//		Движение.Услуга = СтрокаДень.Услуга;
	//		Движение.ФормаОплаты = СтрокаДень.ФормаОплаты;
	//		Движение.СтавкаНДС = СтрокаДень.СтавкаНДС;
	//		Движение.СпособНачисления = СтрокаДень.СпособНачисления;
	//		Движение.Ставка = СтрокаДень.Ставка;
	//		Движение.Сумма = СтрокаДень.Сумма;
	//	КонецЦикла;
	//КонецЦикла;
	
	ТЗВсеНачисления = НачислениеАренды.Выгрузить();
	ТЗВсеНачисления.Свернуть("Организация,Контрагент, Договор, ТипАренднойПлаты, ПериодРегистрации", "Сумма");
	ТЗПериодыРегистрации = ТЗВсеНачисления.Скопировать();
	ТЗПериодыРегистрации.Свернуть("ПериодРегистрации");
	
	Для Каждого СтрокаПериода Из ТЗПериодыРегистрации Цикл
		ТЗНачисления = ТЗВсеНачисления.Скопировать(ТЗВсеНачисления.НайтиСтроки(Новый Структура("ПериодРегистрации", СтрокаПериода.ПериодРегистрации)));
		ТЗНачисления = ПроцедурыНачисления.РаспределитьТаблицуПоДням(ТЗНачисления, СтрокаПериода.ПериодРегистрации, КонецМесяца(СтрокаПериода.ПериодРегистрации));
		
		Для Каждого СтрокаДень Из ТЗНачисления Цикл	 
			Движение = Движения.НачисленияПоДоговорамАренды.Добавить();
			Движение.Период = Дата;
			Движение.Дата = СтрокаДень.ДатаКалендаря;
			Движение.Депозит = Ложь;
			Движение.Договор = СтрокаДень.Договор;
			Движение.Документ = Ссылка;
			Движение.Контрагент = СтрокаДень.Контрагент;
			Движение.ОбъектАренды = СтрокаДень.Договор.ОбъектАренды;
			Движение.Организация = СтрокаДень.Организация;
			Движение.ФормаОплаты = ФормаОплаты;
			Движение.ТипАренднойПлаты = СтрокаДень.ТипАренднойПлаты;
			Движение.Сумма = СтрокаДень.Сумма;
		КонецЦикла;
	КонецЦикла;  
	
		ТЗНачисления = НачислениеДепозита.Выгрузить();
	ТЗНачисления.Свернуть("Организация,Контрагент, Договор", "Сумма");
	ТЗНачисления = ПроцедурыНачисления.РаспределитьТаблицуПоДням(ТЗНачисления, ПериодРегистрации, КонецМесяца(ПериодРегистрации));
	Для Каждого СтрокаДень Из ТЗНачисления Цикл	 
		Движение = Движения.НачисленияПоДоговорамАренды.Добавить();
		Движение.Период = Дата;
		Движение.Дата = СтрокаДень.ДатаКалендаря;
		Движение.Депозит = Истина;
		Движение.Договор = СтрокаДень.Договор;
		Движение.Документ = Ссылка;
		Движение.Контрагент = СтрокаДень.Контрагент;
		Движение.ОбъектАренды = СтрокаДень.Договор.ОбъектАренды;
		Движение.Организация = СтрокаДень.Организация;
		Движение.ФормаОплаты = ФормаОплаты;
		Движение.Сумма = СтрокаДень.Сумма;
	КонецЦикла;
	
	//++++ АК AZAP 28.02.2017 ИП-00014747
	//перепроведение документов с проводками зависящими от текущего документа
	Для каждого Строка Из масДокументовДляПерепроведения Цикл
		ТекОбъект = Строка.ПолучитьОбъект();
		ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	//---- АК AZAP
	
	//+++АК sils 21.08.2017 ИП-00014584
	Движения.СтимулыПоДоговорамАрендыПоМесяцам.Записывать = Истина;
	Если ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть Тогда
		ТЗ = Движения.СтимулыПоДоговорамАрендыПоМесяцам.ВыгрузитьКолонки();
		Для каждого стр из МСФО Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период = Дата;
			Проводка.Организация = стр.Организация;
			
			Если стр.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
				Проводка.СчетДт = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ТорговыеТочки", стр.СтруктурнаяЕдиница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходовРасходов", стр.СтатьяДР);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ЦФО", Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_18"));
			
			Проводка.СчетКт = СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Организации", стр.Организация);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", стр.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ТорговыеТочки", стр.СтруктурнаяЕдиница);
			
			Проводка.Содержание = "Начисление стимула по аренде";
			Проводка.СуммаМСФО = -стр.Сумма;
			
			//+++АК sils 09.07.2018 ИП-00014584.02
		  //Запись = Движения.СтимулыПоДоговорамАрендыПоМесяцам.Добавить();
		  //  Запись.Период 				= НачалоДня(Дата);
		  //  Запись.ДопСоглашение 		= стр.ДопСоглашение;
		  //  Запись.ПериодНачисления 	= стр.ПериодРегистрации;
		  //  Запись.Сумма 				= стр.Сумма;
		  //  Запись.Начислено            = Истина;
		 	НовСтр = ТЗ.Добавить();
			НовСтр.ДопСоглашение 		= стр.ДопСоглашение;
			НовСтр.ПериодНачисления 	= стр.ПериодРегистрации;
			Если стр.ОбщаяСумма Тогда
				НовСтр.СуммаОбщая = -стр.Сумма;
			Иначе
				НовСтр.Сумма = стр.Сумма;
			КонецЕсли;
			//---АК
		КонецЦикла;
		//+++АК sils 11.07.2018 ИП-00014584.02
		ТЗ.Свернуть("ДопСоглашение, ПериодНачисления", "Сумма, СуммаОбщая");
		Для каждого стр из ТЗ Цикл
		 	Запись = Движения.СтимулыПоДоговорамАрендыПоМесяцам.Добавить();
			Запись.Период 				= НачалоДня(Дата);
			Запись.ДопСоглашение 		= стр.ДопСоглашение;
			Запись.ПериодНачисления 	= стр.ПериодНачисления;
			Запись.Сумма 				= стр.Сумма;
			Запись.СуммаОбщая 			= стр.СуммаОбщая;
			Запись.Начислено            = Истина;
		КонецЦикла;
		//---АК
	КонецЕсли;
	//---АК
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//+++АК SUVV 2018.03.06 ИП-00018062
	Если Дата >= Дата(2018,03,01) Тогда 
		ЕстьОшибка = Ложь;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.НачислениеАренды Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " не заполнен реквизит <Ставка НДС>", Отказ);
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибка Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//---АК SUVV
	
	//+++АК sils 10.07.2018 ИП-00014584.02
	ОшибкаМСФО = Ложь;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.МСФО Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПериодРегистрации) и не СтрокаТЧ.ОбщаяСумма Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " не заполнен реквизит <Период регистрации>", Отказ);
			ОшибкаМСФО = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ОшибкаМСФО Тогда 
		Отказ = Истина;
	КонецЕсли;
	//---АК
	
	//+++AK suvv 19.04.2018 ИП-00018179
	// разграничение доступа реализовано возможностью редактирования документа
	//ЭтоБухгалтер = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.БухгалтерПоАренде, Ложь);
	////+++АК POZM 2018.01.23 ИП-00017514 
	//ЭтоМенеджер = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МенеджерПоАренде, Ложь);
	//
	//Если (ЭтоБухгалтер И ВидАренднойПлаты<>Перечисления.ВидыАренднойПлаты.ПоСчету) ИЛИ (ЭтоМенеджер И ВидАренднойПлаты=Перечисления.ВидыАренднойПлаты.ПоСчету) Тогда
	////---АК POZM 	
	//	РежимЗаписи = РежимЗаписиДокумента.Запись;
	//КонецЕсли;
	//---AK suvv
	
	ОтборВидДоговораАренды = Перечисления.ВидыОперацийДоговоровАренды.САрендодателем;
	
	//++++ АК AZAP 28.02.2017 ИП-00014747
	Если НЕ РольДоступна("АК_РаботаСАрендойМСФО") И ЭтотОбъект.ПометкаУдаления И НЕ Ссылка.ПометкаУдаления Тогда
         Отказ = Истина;
		 //+++АК Susk (Суслин К.В.) 2018.01.25 ИП-00017731
		 
		 //Предупреждение("Документ нельзя удалять, поскольку в ней есть строки, с внесенными бухгалтерскими данными!");
		 #Если Клиент Тогда
		 	Предупреждение("Документ нельзя удалять, поскольку в ней есть строки, с внесенными бухгалтерскими данными!");
		 #КонецЕсли
		 //---АК Susk (Суслин К.В.) 
		 Возврат;
    КонецЕсли; 
	
	//поиск строк с измененной расчетной суммой(в том числе удаленных и добавленных)
	бПроведение = Ложь;
	Если РольДоступна("АК_РаботаСАрендойМСФО") И ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть И
		РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		ТабРасчетныхСтрок = Новый ТаблицаЗначений();
		ТабРасчетныхСтрок.Колонки.Добавить("ПериодРегистрации");
		ТабРасчетныхСтрок.Колонки.Добавить("Организация");
		ТабРасчетныхСтрок.Колонки.Добавить("Контрагент");
		ТабРасчетныхСтрок.Колонки.Добавить("Договор");
		ТабРасчетныхСтрок.Колонки.Добавить("СтруктурнаяЕдиница");
		
		масСовпадающихСтрок = Новый Массив();
		Для каждого СтрокаПредок Из Ссылка.НачислениеАренды Цикл
			
			НашлиСтроку = Ложь; РасчетнаяСуммаИзменена = Ложь;
			Для каждого Строка Из ЭтотОбъект.НачислениеАренды Цикл	
				Если СтрокаПредок.Организация = Строка.Организация И
					СтрокаПредок.Контрагент = Строка.Контрагент И
					СтрокаПредок.Договор = Строка.Договор И
					СтрокаПредок.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница И
					НачалоМесяца(СтрокаПредок.ПериодРегистрации) = НачалоМесяца(Строка.ПериодРегистрации) Тогда
					
					//если была изменена или снимается проведение или проводится первый раз
					Если СтрокаПредок.АК_РасчетнаяСумма <> Строка.АК_РасчетнаяСумма ИЛИ
						(СтрокаПредок.АК_РасчетнаяСумма > 0 И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) ИЛИ
						(СтрокаПредок.АК_РасчетнаяСумма > 0 И НЕ ЭтотОбъект.Проведен) Тогда
						РасчетнаяСуммаИзменена = Истина;
					КонецЕсли;
					НашлиСтроку = Истина;
					//Прервать;
					масСовпадающихСтрок.Добавить(Строка.НомерСтроки);
				КонецЕсли;
			КонецЦикла;
			
			//если была изменена или удалена строка с расчетной суммой
			Если РасчетнаяСуммаИзменена ИЛИ (НЕ НашлиСтроку И СтрокаПредок.АК_РасчетнаяСумма > 0) Тогда
				НовСтрока = ТабРасчетныхСтрок.Добавить();
				НовСтрока.ПериодРегистрации = НачалоМесяца(СтрокаПредок.ПериодРегистрации);
				НовСтрока.Организация = СтрокаПредок.Организация;
				НовСтрока.Контрагент = СтрокаПредок.Контрагент;
				НовСтрока.Договор = СтрокаПредок.Договор;
				НовСтрока.СтруктурнаяЕдиница = СтрокаПредок.СтруктурнаяЕдиница;
			КонецЕсли;
	
		КонецЦикла;
		
		//поиск новых строк
		Для каждого Строка Из ЭтотОбъект.НачислениеАренды Цикл
			Если масСовпадающихСтрок.Найти(Строка.НомерСтроки) = Неопределено Тогда
				Если Строка.АК_РасчетнаяСумма > 0 Тогда
					НовСтрока = ТабРасчетныхСтрок.Добавить();
					НовСтрока.ПериодРегистрации = НачалоМесяца(Строка.ПериодРегистрации);
					НовСтрока.Организация = Строка.Организация;
					НовСтрока.Контрагент = Строка.Контрагент;
					НовСтрока.Договор = Строка.Договор;
					НовСтрока.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаДок = Документы.НачислениеАренднойПлатыОтАрендодателей.Выбрать(Ссылка.Дата);
		Пока ВыборкаДок.Следующий() Цикл
			Если ВыборкаДок.Проведен И ВыборкаДок.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть И ВыборкаДок.Ссылка <> Ссылка Тогда
				Для каждого СтрокаДок Из ВыборкаДок.НачислениеАренды Цикл
					Если масДокументовДляПерепроведения.Найти(ВыборкаДок.Ссылка) <> Неопределено Тогда
						Прервать;
					КонецЕсли;
					Для каждого Строка Из ТабРасчетныхСтрок Цикл
						Если СтрокаДок.Организация = Строка.Организация И
							СтрокаДок.Контрагент = Строка.Контрагент И
							СтрокаДок.Договор = Строка.Договор И
							СтрокаДок.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница И
							НачалоМесяца(СтрокаДок.ПериодРегистрации) = НачалоМесяца(Строка.ПериодРегистрации) Тогда
							
							масДокументовДляПерепроведения.Добавить(ВыборкаДок.Ссылка);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			бПроведение = Истина;
		КонецЕсли;
	КонецЕсли;
	//---- АК AZAP

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НачислениеАренды.Очистить();
	
	//+++АК losa 17.12.2018 ИП-00020635      
	НачислениеДепозита.Очистить();
	ПрочаяЗадолженность.Очистить();
	МСФО.Очистить();
	//---АК losa 17.12.2018 ИП-00020635
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//++++ АК AZAP 28.02.2017 ИП-00014747
	//если не проводится(значит снимается с проведения или записывается), то перепроводим зависимые документы
	Если НЕ бПроведение Тогда
		Для каждого Строка Из масДокументовДляПерепроведения Цикл
			ТекОбъект = Строка.ПолучитьОбъект();
			ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЕсли;
	//---- АК AZAP
КонецПроцедуры

//+++АК POZM 2018.01.11 ИП-00017514 
Процедура ПроверитьНаПереплатыПоЗаявкам(Отказ)
	ТекстЗапроса="ВЫБРАТЬ
	             |	СУММА(НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Сумма) КАК Сумма,
	             |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Заявка
	             |ПОМЕСТИТЬ ВЭтомДокументе
	             |ИЗ
	             |	Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
	             |ГДЕ
	             |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка = &Ссылка
	             |	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Заявка <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Заявка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВЭтомДокументе.Сумма,
	             |	ВЭтомДокументе.Заявка
	             |ПОМЕСТИТЬ ВсеНачисления
	             |ИЗ
	             |	ВЭтомДокументе КАК ВЭтомДокументе
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ВЭтомДокументе.Сумма,
	             |	ВЭтомДокументе.Заявка
	             |ИЗ
	             |	ВЭтомДокументе КАК ВЭтомДокументе
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
	             |		ПО ВЭтомДокументе.Заявка = НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Заявка
	             |ГДЕ
	             |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.Проведен
	             |	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка <> &Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СУММА(ВсеНачисления.Сумма) КАК Сумма,
	             |	ВсеНачисления.Заявка,
	             |	ВсеНачисления.Заявка.СуммаДокумента КАК СуммаПоЗаявке
	             |ИЗ
	             |	ВсеНачисления КАК ВсеНачисления
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ВсеНачисления.Заявка,
	             |	ВсеНачисления.Заявка.СуммаДокумента
	             |
	             |ИМЕЮЩИЕ
	             |	СУММА(ВсеНачисления.Сумма) > ВсеНачисления.Заявка.СуммаДокумента";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить(""+Выборка.Заявка+" - сумма начислений: "+Формат(Выборка.Сумма,"")+" превышает сумму заявке: "+Выборка.СуммаПоЗаявке);
		КонецЦикла;	
		Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры
//---АК POZM 

//+++АК SUVV 2018.03.20 ИП-00018025
// получение документа "Счет-фактура полученный", созданного для строки из табличной части документа
Функция ПолучитьСчетФактуруПоСтроке(НаименованиеТабличнойЧасти, НомерСтрокиВТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Проведен
	|	И СчетФактураПолученный.НаименованиеТабличнойЧасти = &НаименованиеТабличнойЧасти
	|	И СчетФактураПолученный.НомерСтрокиВТабличнойЧасти = &НомерСтрокиВТабличнойЧасти
	|	И СчетФактураПолученный.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	Запрос.УстановитьПараметр("НомерСтрокиВТабличнойЧасти", НомерСтрокиВТабличнойЧасти);
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат неопределено;
	КонецЕсли;
		
КонецФункции //---АК SUVV

//+++АК SUVV 2018.03.06 ИП-00018062
//определеяем при проведении по условию
//СтатьяДРАренда = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("31010");
//---АК SUVV

масДокументовДляПерепроведения = Новый Массив();
