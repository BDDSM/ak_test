
&НаСервере
Функция ЭтоРуководительПодразделения()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПраваПользователейНаРедактированиеГрафиков.Подразделение
	               |ИЗ
	               |	РегистрСведений.ПраваПользователейНаРедактированиеГрафиков КАК ПраваПользователейНаРедактированиеГрафиков
	               |ГДЕ
	               |	ПраваПользователейНаРедактированиеГрафиков.Пользователь = &Пользователь";
				   
	Результат = Запрос.Выполнить();
	Возврат (НЕ Результат.Пустой());
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Начисление премии продавцам");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Элементы.Утверждено.Доступность = ЭтоРуководительПодразделения();
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Иначе
		
		//
		ГраницаЗапретаРедактирования = Константы.ГраницаЗапретаРедактированияНачисленияПремий.Получить();
		Если КонецДня(ГраницаЗапретаРедактирования) >= КонецДня(Объект.Дата) Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли; 
		
		////+++ АК Pans 20170427 ИП-00014932
		//// заполнение информации о выплатах
		////Попытка
		//	РегистрыСведений.ВыплатыПоПремиям1.ЗаполнитьИнформациюОВыплатеПремииПоДокументу(Объект);
		////Исключение
		////КонецПопытки;
		////--- АК Pans 20170427 ИП-00014932
		
	КонецЕсли;
	
	// +++ АК mirv 01.11.2017 [ИП-00016694]
	// 
	Если Не РольДоступна("ВыплатаЗарплаты") Тогда
		Элементы.Дата.Доступность = Ложь;
	КонецЕсли; 
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ПериодНачисления = НачалоМесяца(ТекущаяДата());
	КонецЕсли;   	
	// --- АК mirv 
	
	//+++АК kats 2017.12.11 17322
	Элементы.АК_ВыгруженоВЗУП.Доступность = РольДоступна("ВыплатаЗарплаты");
	//---АК kats 2017.12.11 17322
	
	РольВыплатаЗарплаты = РольДоступна("ВыплатаЗарплаты"); //+++АК mika 2018.09.14 ИП-00019442
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//+++АК mika 2018.09.14 ИП-00019442 Исправление ошибки 
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ПраваПользователейНаРедактированиеГрафиков.Пользователь
	//|ИЗ
	//|	РегистрСведений.ПраваПользователейНаРедактированиеГрафиков КАК ПраваПользователейНаРедактированиеГрафиков");
	//
	//МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
    МассивПользователей = ПолучитьМассивПользователейУтверждающихСервер();
	//---АК mika
	
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
	
	Отбор = Новый Структура("Ссылка", СписокПользователей);
	ПараметрыОткрытия = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан ответственный!", Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФизЛицоПриИзменении(Элемент)
	
	//+++АК mika 2018.09.14 ИП-00019442 Исправление ошибок
	////+++ АК Pans 20170427 ИП-00014932
	//// перезаполнение информации о выплатах
	//РегистрыСведений.ВыплатыПоПремиям1.ЗаполнитьИнформациюОВыплатеПремииПоДокументу(Объект);
	////--- АК Pans 20170427 ИП-00014932
	ЗаполнитьИнформациюОВыплатеПремииПоДокументуСервер();
	//---АК mika 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//mind закомментировал, есть сотрудники на ГПХ и у них с признаком активности все очень не просто, вернее его невозможно определить
	////+++ АК pozm ИП-00015821
	//ТекстЗапроса="ВЫБРАТЬ
	//             |	ФизическиеЛица.Ссылка
	//             |ИЗ
	//             |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	//             |ГДЕ
	//             |	ФизическиеЛица.ДатаУвольнения < &ДатаДок
	//             |	И ФизическиеЛица.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	//             |	И ФизическиеЛица.Ссылка В(&МассивСотров)";
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ДатаДок",Объект.Дата);
	//Запрос.УстановитьПараметр("МассивСотров",ТекущийОбъект.Состав.ВыгрузитьКолонку("ФизЛицо"));
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Отказ = Истина;
	//	Сообщить("Сотрудник "+Выборка.Ссылка+" уволен на дату документа, ему нельзя начислять премии");
	//КонецЦикла;	
	////--- АК pozm ИП-00015821
	
	// +++ АК mirv 02.11.2017 [ИП-00016694]
	// 	
	КомСоединениеС_ЗУП = ОбменС_ЗУП.ПолучитьСоединениеСЗУПом();
	
	СписокКодовФЛ = КомСоединениеС_ЗУП.NewObject("СписокЗначений");
	Для каждого СтрокаДок Из Объект.Состав Цикл
		Если СтрокаДок.ФизЛицо.Промоутер Тогда
			Продолжить;
		КонецЕсли; 
		СписокКодовФЛ.Добавить(СтрокаДок.ФизЛицо.Код);
	КонецЦикла; 
	
	
	// Запрос по сотрудникам
	Запрос = КомСоединениеС_ЗУП.NewObject("Запрос");
	Запрос.УстановитьПараметр("ПериодНачисления",	Объект.ПериодНачисления);
	Запрос.УстановитьПараметр("СписокКодовФЛ",	СписокКодовФЛ);	
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Физлицо.Код Как Код,
	|	СотрудникиОрганизаций.ДатаУвольнения,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
	|	СотрудникиОрганизаций.Наименование
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо.Код В ИЕРАРХИИ(&СписокКодовФЛ)
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			Или (СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодНачисления, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодНачисления, МЕСЯЦ)))
	|;";
	РезультатПоСотрудникам = Запрос.Выполнить();
	ВыборкаПоСотрудникам = РезультатПоСотрудникам.Выбрать();
	
	СписокСотрудниковЗУП = Новый СписокЗначений;
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		СписокСотрудниковЗУП.Добавить(ВыборкаПоСотрудникам.Код);	
	КонецЦикла; 
	
	// Запрос по ГПХ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Ссылка,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Код Как Код,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Наименование
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Код В(&СписокКодовФЛ)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ПериодНачисления, ДЕНЬ)";
	
	
	РезультатПоГПХ = Запрос.Выполнить();

	ВыборкаПоГПХ= РезультатПоГПХ.Выбрать();
	
	Пока ВыборкаПоГПХ.Следующий() Цикл
		СписокСотрудниковЗУП.Добавить(ВыборкаПоГПХ.Код);	
	КонецЦикла; 
	
	СписокНекорректныхЗаписей = Новый СписокЗначений;
	
	Для каждого СтрокаДок Из Объект.Состав Цикл 
		// Промоутеров не проверяем
		Если СтрокаДок.ФизЛицо.Промоутер Тогда
			Продолжить;
		КонецЕсли; 
		Если СписокСотрудниковЗУП.НайтиПоЗначению(СтрокаДок.ФизЛицо.Код) = Неопределено Тогда
			СписокНекорректныхЗаписей.Добавить(СтрокаДок.ФизЛицо.Наименование);
		КонецЕсли;   		
	КонецЦикла; 
	
	Если СписокНекорректныхЗаписей.Количество() > 0 Тогда
		Отказ = Истина;
		ТиповойТекст = Нстр("ru='Данный сотрудник (%Сотрудник%) уволен и/или договор с ним расторгнут'");
		Для каждого СтрокаСписка Из СписокНекорректныхЗаписей Цикл
			Сообщить(СтрЗаменить(ТиповойТекст, "%Сотрудник%", СтрокаСписка.Значение));
		КонецЦикла; 
	КонецЕсли; 
	// --- АК mirv  

КонецПроцедуры

//+++АК ZHAS 16-09-17 ИП-00015200.02.000.00001
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Отправить письмо утверждающему?"";";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоСервер();
	
КонецПроцедуры
//+++АК ZHAS 16-09-17 ИП-00015200.02.000.00001

//+++АК ZHAS 16-09-17 ИП-00015200.02.000.00001
&НаСервере
Процедура ОтправитьПисьмоСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыДляПодстановкиВЗаявки.Индекс
	|ИЗ
	|	РегистрСведений.ПараметрыДляПодстановкиВЗаявки КАК ПараметрыДляПодстановкиВЗаявки
	|ГДЕ
	|	ПараметрыДляПодстановкиВЗаявки.Индекс = 100";
	ВключитьПодтверждениеПоПочте = НЕ Запрос.Выполнить().Пустой();
	СписокКому = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст =                                                                                   
	"ВЫБРАТЬ                                                   
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = Значение(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)";
	Запрос.УстановитьПараметр("Объект", Объект.Утверждающий.ФизЛицо);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	Иначе
		Сообщить("Не заполнен адрес электронной почты у утверждающего!!");
		Возврат;
	КонецЕсли;
	СпАдресов=Новый СписокЗначений;
	МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.Представление,";");	
	Для каждого Эл Из МассивАдресов Цикл
		Если ЗначениеЗаполнено(Эл) Тогда
			СписокКому.Добавить(СокрЛП(Эл));
		КонецЕсли; 
	КонецЦикла; 
	Если ВключитьПодтверждениеПоПочте Тогда
		АдресПолучателя = ВыборкаДетальныеЗаписи.Представление;
		АкцептоватьЗаявкуОтправкаПочты(АдресПолучателя);
	Иначе
	КонецЕсли;
КонецПроцедуры
//---АК ZHAS 16-09-17 ИП-00015200.02.000.00001

//+++АК ZHAS 16-09-17 ИП-00015200.02.000.00001
&НаСервере
Процедура АкцептоватьЗаявкуОтправкаПочты(Адрес) Экспорт
	//Адрес = "abdr@automacon.ru";
	Эл1 = "zhas@automacon.ru";
	СсылкаАкцептант								= ПараметрыСеанса.ТекущийПользователь;
	СписокКому 									= Новый СписокЗначений;
	Если Адрес<>"" Тогда
		СпАдресов								= Новый СписокЗначений;
		МассивАдресов							= Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(Адрес,";");	
		Для каждого Эл Из МассивАдресов Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				СписокКому.Добавить(СокрЛП(Эл));
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		СообщениеПоОшибке = НСтр("ru = 'Письмо не отправлено! Не заполнен адрес электронной почты %Выборка_Акцептант%'");
		Сообщить(СтрЗаменить(СообщениеПоОшибке, "%Выборка_Акцептант%", СсылкаАкцептант));
		//Продолжить;
	КонецЕсли;
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	ТекстЗапросаДоки = "ВЫБРАТЬ
	                   |	ДокументНаАкцепт.Ссылка,
	                   |	ДокументНаАкцепт.Номер,
	                   |	ДокументНаАкцепт.Дата,
	                   |	ДокументНаАкцепт.ВыплаченнаяСумма,
	                   |	ДокументНаАкцепт.СуммаДокумента
	                   |ИЗ
	                   |	Документ.НачислениеПремии КАК ДокументНаАкцепт
	                   |ГДЕ
	                   |	ДокументНаАкцепт.Ссылка = &Ссылка
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ДокументТЧДляПисьма.Ссылка,
	                   |	ДокументТЧДляПисьма.Ссылка.Номер,
	                   |	ДокументТЧДляПисьма.Ссылка.Дата,
	                   |	ДокументТЧДляПисьма.ФизЛицо,
	                   |	ДокументТЧДляПисьма.Сумма,
	                   |	ДокументТЧДляПисьма.Комментарий,
	                   |	ДокументТЧДляПисьма.ВыплаченнаяСумма,
	                   |	ДокументТЧДляПисьма.ДатаВыплаты
	                   |ИЗ
	                   |	Документ.НачислениеПремии.Состав КАК ДокументТЧДляПисьма
	                   |ГДЕ
	                   |	ДокументТЧДляПисьма.Ссылка = &Ссылка";
	ЗапросДоки 									= Новый Запрос(ТекстЗапросаДоки);
	ЗапросДоки.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезЗапросДоки 								= ЗапросДоки.ВыполнитьПакет();
	Таблица 									= ""; 
	style 										= "<td style = ""background: #fff; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	ЦветШапки 									= "E5D4F2";
	ЦветШапки 									= "F0FFFF";
	TR 											= "<th style = ""background: #";
	TA											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	TA1											= "; text-align: left;""><font FACE=""Verdana"" color=""000000"" size=2";
	Инд 										= 1;
	НомерЗаявки 								= "";
	РезЗапросДоки_1 							= РезЗапросДоки[0].Выбрать();
	Таблица 							 		= Таблица + "<b>Информация из шапки документа</b>";
	Пока РезЗапросДоки_1.Следующий() Цикл
		Таблица = Таблица + "<BR>" + "НомерЗаявки: " 					+ РезЗапросДоки_1.Номер;
		Таблица = Таблица + "<BR>" + "Дата: " 							+ РезЗапросДоки_1.Дата;
		Таблица = Таблица + "<BR>" + "ВыплаченнаяСумма: " 				+ РезЗапросДоки_1.ВыплаченнаяСумма;
		Таблица = Таблица + "<BR>" + "СуммаДокумента: " 				+ РезЗапросДоки_1.СуммаДокумента;
		РезЗапросДоки_Номер												= РезЗапросДоки_1.Номер;
		РезЗапросДоки_Дата												= РезЗапросДоки_1.Дата;
		НомерЗаявки                                     				= РезЗапросДоки_1.Номер;
		РезЗапросДоки_                                  				= РезЗапросДоки_1.Ссылка;
		Прервать;
	КонецЦикла;
	Таблица = Таблица + "<BR>";
	Таблица = Таблица + "<BR>";
	
	
	//Таблица 							 		= Таблица + "</Table>";
	Таблица 							 		= Таблица + "<br>";
	РезЗапросДоки_2 							= РезЗапросДоки[1].Выбрать();
	Таблица 							 		= Таблица + "<b>Информация из таблицы Начисление Премии</b>";
	Таблица 							 		= Таблица + "<Table border style = ""border-collapse: collapse;"">";
	Таблица										= Таблица + TR + ЦветШапки + TA1 + ">ФИО" + TR + ЦветШапки + TA1 + ">Сумма" + TR + ЦветШапки + TA1 + ">Комментарий" + TR + ЦветШапки + TA1 + ">Выплаченная сумма" + TR + ЦветШапки + TA1 + ">ДатаВыплаты" + "<TR>";
	
	Пока РезЗапросДоки_2.Следующий() Цикл
		Таблица 							 	= Таблица + TR + ЦветШапки + TA1 + ">" + РезЗапросДоки_2.ФизЛицо;
		Таблица 							 	= Таблица + TR + ЦветШапки + TA1 + ">" + РезЗапросДоки_2.Сумма;
		Таблица 							 	= Таблица + TR + ЦветШапки + TA1 + ">" + РезЗапросДоки_2.Комментарий;
		Таблица 							 	= Таблица + TR + ЦветШапки + TA1 + ">" + РезЗапросДоки_2.ВыплаченнаяСумма;
		Таблица 							 	= Таблица + TR + ЦветШапки + TA1 + ">" + РезЗапросДоки_2.ДатаВыплаты  		+ "<TR>";
	КонецЦикла;	
	Таблица 							 		= Таблица + "</Table>";
	Таблица 							 		= Таблица + "<br>";
	
	Тема 										= "Начисление премии продавцам №" + СокрЛП(РезЗапросДоки_Номер) + " от " + Формат(РезЗапросДоки_Дата,"ДФ=dd.MM.yyyy");
	ID_MESSAGE 									= Новый УникальныйИдентификатор;
	TYPE_MESSAGE                                = 3;
	GUID_Заявки									= Строка(Объект.Ссылка.УникальныйИдентификатор());
	Объект_Ссылка								= Объект.Ссылка;
	УправлениеЭлектроннойПочтой.ОтправитьЗаявкуНаПодтверждение(Тема, Таблица, НомерЗаявки, СписокКому, GUID_Заявки, ID_MESSAGE, TYPE_MESSAGE, Адрес, СсылкаАкцептант, УчетнаяЗапись, Объект_Ссылка)
	
КонецПроцедуры
//---АК ZHAS 16-09-17 ИП-00015200.02.000.00001

 

// +++ АК mirv 01.11.2017 [ИП-00016694]
&НаКлиенте
Процедура СписокПериодовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, ТекущаяДата(), ЭтаФорма, "МЕСЯЦ");	
КонецПроцедуры   
// --- АК mirv  

// +++ АК mirv 01.11.2017 [ИП-00016694]
&НаКлиенте 
Функция ПолучитьПредставлениеПериода(ДатаНачала, ДатаОкончания, МинимальныйПериод)
	
	НачалоПериода = ДатаНачала;
	Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
		НачалоПериода = НачалоМесяца(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
		НачалоПериода = НачалоКвартала(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		НачалоПериода = НачалоГода(ДатаНачала);
	КонецЕсли;

	Если ДатаОкончания <> Неопределено и (ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод) <> КонецДня(ДатаОкончания) или ДатаНачала <> НачалоПериода) тогда
		Возврат Формат(ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yy")
	Иначе
		Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
			Возврат Формат(ДатаНачала, "ДФ='MMMM yyyy'");
		ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
			Квартал = Цел((Месяц(ДатаНачала)-1)/3) + 1;
			Возврат "" + Квартал + " квартал " + Формат(ДатаНачала, "ДФ=yyyy");
		ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
			Возврат Формат(ДатаНачала, "ДФ='yyyy'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
// --- АК mirv

// +++ АК mirv 01.11.2017 [ИП-00016694]
//
&НаКлиенте
Функция ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод)
	
	Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
		Возврат КонецМесяца(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
		Возврат КонецКвартала(ДатаНачала);
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		Возврат КонецГода(ДатаНачала);
	КонецЕсли;
	
КонецФункции
// --- АК mirv

// +++ АК mirv 01.11.2017 [ИП-00016694]
&НаКлиенте
Процедура НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, НачальноеЗначение = Неопределено)
	
	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = Период;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	Если ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		НачалоПрошлогоГода = НачалоГода(ДобавитьМесяц(НачалоТекущегоГода, -36))-1;
		СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода-1, "ДФ='yyyy'") + "..."));
	Иначе	
		НачалоПрошлогоГода = КонецГода(НачалоТекущегоГода - 1);
		СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	КонецЕсли;
		
	НачалоМесяцаЗаполнения = НачалоПрошлогоГода+1;
	ЭлементПоУмолчанию = Неопределено;
	
	Если ВРЕГ(МинимальныйПериод) = "МЕСЯЦ" тогда
		Для а = 1 По 12 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериода(НачалоМесяцаЗаполнения, , МинимальныйПериод));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
		КонецЦикла;
		НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "КВАРТАЛ" тогда
		Для а = 1 По 4 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериода(НачалоМесяцаЗаполнения, , МинимальныйПериод));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 3);
		КонецЦикла;
		НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		Для а = 1 По 6 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериода(НачалоМесяцаЗаполнения, , МинимальныйПериод));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 12);
		КонецЦикла;
		НачалоСледующегоГода = КонецГода(ДобавитьМесяц(НачалоМесяцаЗаполнения, -12)) + 1;
	КонецЕсли;
	
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВРЕГ(МинимальныйПериод) = "ГОД" тогда
		Если  Год(ВыбранныйЭлемент.Значение) = Год(НачалоПрошлогоГода) тогда
			НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, ДобавитьМесяц(ВыбранныйЭлемент.Значение, -24));
			Возврат;
		ИначеЕсли Год(ВыбранныйЭлемент.Значение) = Год(НачалоСледующегоГода) тогда
			НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, ДобавитьМесяц(ВыбранныйЭлемент.Значение, +36));
			Возврат;
		КонецЕсли;
	Иначе
		Если Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
			НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, ВыбранныйЭлемент.Значение);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Период           = ВыбранныйЭлемент.Значение;
	
	ЭтаФорма[Элемент.Имя] = ПолучитьПредставлениеПериода(Период, , МинимальныйПериод);
	Объект.ПериодНачисления = Период;

	ПериодПриИзменении();
	
КонецПроцедуры
// --- АК mirv

// +++ АК mirv 01.11.2017 [ИП-00016694]
&НаКлиенте
Процедура ПериодПриИзменении()
	// Изменим дату документа - по условиям ТЗ
	
	//+++АК mika 2018.09.14 ИП-00019442 Исправление ошибок
	//Если Не РольДоступна("ВыплатаЗарплаты") Тогда
	Если Не РольВыплатаЗарплаты Тогда
	//---АК mika	
		ТекДата = ТекущаяДата();
		Если Объект.Дата < Дата(2017, 11, 1, 0, 0, 0) Тогда
			Возврат;
		КонецЕсли; 
		ТекДатаДень = День(ТекДата);
		ТекДатаМесяц = Месяц(ТекДата);  		
		ПериодНачисленияМесяц = Месяц(Объект.ПериодНачисления);
		
		Если ТекДатаДень <= 4  Тогда
			Если ПериодНачисленияМесяц < ТекДатаМесяц Тогда
				Объект.Дата = КонецМесяца(ДобавитьМесяц(ТекДата, -1));
			Иначе
				Объект.Дата = КонецМесяца(ТекДата);
			КонецЕсли; 
		Иначе
			Если ПериодНачисленияМесяц = ТекДатаМесяц Тогда
				Объект.Дата = КонецМесяца(ТекДата);
			Иначе
				Объект.Дата = ТекДата;
			КонецЕсли; 
		КонецЕсли; 
		
		//Если ТекДатаДень <=4 И НЕ ПериодНачисленияМесяц = ТекДатаМесяц Тогда
		//	Объект.Дата = КонецМесяца(Объект.ПериодНачисления);
		//Иначе
		//	Объект.Дата = ТекущаяДата();
		//КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// +++ АК mirv 01.11.2017 [ИП-00016694]
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Период = ПолучитьПредставлениеПериода(НачалоМесяца(Объект.ПериодНачисления), КонецМесяца(Объект.ПериодНачисления), "Месяц");
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры
// --- АК mirv

// Возвращает массив пользователей, которых можно выбирать в качестве Утверждающих
//
// Возвращаемое значение:
//   <Тип.Массив>   - Массив пользователей
//
&НаСервереБезКонтекста
Функция ПолучитьМассивПользователейУтверждающихСервер() //+++АК mika 2018.09.14 ИП-00019442
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПраваПользователейНаРедактированиеГрафиков.Пользователь
	|ИЗ
	|	РегистрСведений.ПраваПользователейНаРедактированиеГрафиков КАК ПраваПользователейНаРедактированиеГрафиков");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции // ПолучитьМассивПользователейУтверждающихСервер()

&НаСервере
Процедура ЗаполнитьИнформациюОВыплатеПремииПоДокументуСервер() //+++АК mika 2018.09.14 ИП-00019442

	РегистрыСведений.ВыплатыПоПремиям1.ЗаполнитьИнформациюОВыплатеПремииПоДокументу(Объект);

КонецПроцедуры // ЗаполнитьИнформациюОВыплатеПремииПоДокументу()

