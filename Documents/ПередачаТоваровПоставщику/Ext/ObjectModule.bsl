
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.МП_ЗадачаТехнолога") Тогда
		
		Если ДанныеЗаполнения.ТипЗадания <> Перечисления.ТипыЗаданийТехнологаМагазинам.СамовывозСМагазинов Тогда
			ВызватьИсключение "Документ может вводиться на основании только с типом задания
				|""Самовывоз с магазинов""!";
			Возврат;
		КонецЕсли;
		
		// Заполнение шапки
		Автор = ПараметрыСеанса.ТекущийПользователь;
		Магазин = ДанныеЗаполнения.Склад;
		Поставщик = ДанныеЗаполнения.ДокументОснование.Поставщик;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		Для Каждого ТекСтрокаПараметрыЗадачи Из ДанныеЗаполнения.ПараметрыЗадачи Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаПараметрыЗадачи.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаПараметрыЗадачи.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаПараметрыЗадачи.Номенклатура;
			НоваяСтрока.Сумма = ТекСтрокаПараметрыЗадачи.Сумма;
			НоваяСтрока.Характеристика = ТекСтрокаПараметрыЗадачи.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена = ТекСтрокаПараметрыЗадачи.Цена;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная"  Тогда
		ТабДокумент = ПечатьНакладной();
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);

КонецПроцедуры // Печать

// Функция формирует табличный документ с печатной формой накладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Накладная.Номер,
	|	Накладная.Дата,
	//|	Накладная.ДоговорКонтрагента,
	|	Накладная.Поставщик,
	//|	Накладная.Организация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	// {ОбособленныеПодразделения
	//|	Накладная.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	|	Накладная.СуммаДокумента,
	//|	Накладная.ВалютаДокумента,
	//|	Накладная.УчитыватьНДС,
	//|	Накладная.СуммаВключаетНДС,
	|	ВалютаРегламентированногоУчета.Значение КАК ВалютаДокумента,
	|	ЛОЖЬ КАК УчитыватьНДС,
	|	ИСТИНА КАК СуммаВключаетНДС,
	//|	Накладная.Ответственный,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Ответственный,
	|	Накладная.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		ВЫРАЗИТЬ(Накладная.Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	//|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ПередачаТоваровПоставщику КАК Накладная,
	|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ГДЕ
	|	Накладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Претензия поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	
	//ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	//Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
	//	ВыводитьКоды = Истина;
	//	Колонка = "Артикул";
	//ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
	//	ВыводитьКоды = Истина;
	//	Колонка = "Код";
	//Иначе
	//	ВыводитьКоды = Ложь;
	//КонецЕсли;
	Колонка = "";
	ВыводитьКоды = Ложь;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	
	Ном = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.Цена        = ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		//СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоНДС
	//Если Шапка.УчитыватьНДС Тогда
	//	
	//	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	//	ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	//	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	//	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	//	
	//	ТабДокумент.Вывести(ОбластьНомера);
	//	Если ВыводитьКоды Тогда
	//		ТабДокумент.Присоединить(ОбластьКодов);
	//	КонецЕсли;
	//	
	//	Если Товары.Итог("СуммаНДС") <> 0 Тогда
	//		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
	//		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));		
	//	Иначе
	//		ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
	//		ОбластьСуммы.Параметры.ВсегоНДС = "-";
	//	КонецЕсли;
	//	
	//	ТабДокумент.Присоединить(ОбластьДанных);
	//	
	//	ТабДокумент.Присоединить(ОбластьСуммы);
	//КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + Ном
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОтветственном = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Ответственный, Шапка.Дата, Ложь);
	ОтветственныйПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтветственном, "НаименованиеДляПечатныхФорм,");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьНакладной()
