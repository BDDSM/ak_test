Перем ТабСебестоимость;
Перем ОрганизацияОсновная;

Функция ПолучитьСебестоимость(Номенклатура)
	
	ЗначениеВозврата = 0;
	СтрокаСебестоимость = ТабСебестоимость.Найти(Номенклатура, "Номенклатура");
	Если СтрокаСебестоимость = Неопределено Тогда
		//СтрокаЦена = ТабЦены.Найти(Номенклатура, "Номенклатура");
		//Если СтрокаЦена <> Неопределено Тогда
		//	ЗначениеВозврата = ?(ТипЗнч(СтрокаЦена.Цена) = Тип("Число"), СтрокаЦена.Цена, 0);
		//КонецЕсли;	
	Иначе
		ЗначениеВозврата = СтрокаСебестоимость.Себестоимость;
		//Если ЗначениеВозврата = 0 Тогда
		//	СтрокаЦена = ТабЦены.Найти(Номенклатура, "Номенклатура");
		//	Если СтрокаЦена <> Неопределено Тогда
		//		ЗначениеВозврата = ?(ТипЗнч(СтрокаЦена.Цена) = Тип("Число"), СтрокаЦена.Цена, 0);
		//	КонецЕсли;
		//КонецЕсли;	
	КонецЕсли;
	Возврат ЗначениеВозврата;
	
КонецФункции	


Процедура ПроводкиПоРасхождениямМеждуОтправленнымСкладомИПолученнымНаТТ_Старая(ДатаОбработки)
	
	ЗапросПоступившей = Новый Запрос();
	ЗапросПоступившей.Текст = "ВЫБРАТЬ
	                          |	ВЗ_Запрос.ТТ,
	                          |	ВЗ_Запрос.Номенклатура,
	                          |	СУММА(ВЗ_Запрос.Поступило) КАК Поступило
	                          |ИЗ
	                          |	(ВЫБРАТЬ
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница КАК ТТ,
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура КАК Номенклатура,
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот КАК Поступило
	                          |	ИЗ
	                          |		РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, , ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Поступление)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	                          |	ГДЕ
	                          |		НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	                          |					(ВЫБРАТЬ
	                          |						Номенклатура.Ссылка
	                          |					ИЗ
	                          |						Справочник.Номенклатура КАК Номенклатура
	                          |					ГДЕ
	                          |						Номенклатура.СлужебныйТовар = ИСТИНА)
	                          |	
	                          |	ОБЪЕДИНИТЬ ВСЕ
	                          |	
	                          |	ВЫБРАТЬ
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница,
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Количество
	                          |	ИЗ
	                          |		РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчетаОбороты
	                          |	ГДЕ
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Период МЕЖДУ &ДатаНачД И &ДатаКонД
	                          |		И ЕСТЬNULL(ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиницаПеремещения.НомерТочки, 0) В (20, 21, 22, 10, 11)
	                          |		И ДвиженияТоваровПоЛистамУчетаОбороты.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ)
	                          |		И НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	                          |					(ВЫБРАТЬ
	                          |						Номенклатура.Ссылка
	                          |					ИЗ
	                          |						Справочник.Номенклатура КАК Номенклатура
	                          |					ГДЕ
	                          |						(Номенклатура.СлужебныйТовар = ИСТИНА
	                          |							ИЛИ Номенклатура.РекламныйМатериал = ИСТИНА))
	                          |	
	                          |	ОБЪЕДИНИТЬ ВСЕ
	                          |	
	                          |	ВЫБРАТЬ
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница,
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Количество
	                          |	ИЗ
	                          |		РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчетаОбороты
	                          |	ГДЕ
	                          |		ДвиженияТоваровПоЛистамУчетаОбороты.Период МЕЖДУ &ДатаНачД И &ДатаКонД
	                          |		И ЕСТЬNULL(ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиницаПеремещения.НомерТочки, 0) В (20, 21, 22, 10, 11)
	                          |		И ДвиженияТоваровПоЛистамУчетаОбороты.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ)
	                          |		И НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	                          |					(ВЫБРАТЬ
	                          |						Номенклатура.Ссылка
	                          |					ИЗ
	                          |						Справочник.Номенклатура КАК Номенклатура
	                          |					ГДЕ
	                          |						(Номенклатура.СлужебныйТовар = ИСТИНА
	                          |							ИЛИ Номенклатура.РекламныйМатериал = ИСТИНА))) КАК ВЗ_Запрос
	                          |ГДЕ
	                          |	(ВЗ_Запрос.Номенклатура = &Номенклатура
	                          |			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	ВЗ_Запрос.ТТ,
	                          |	ВЗ_Запрос.Номенклатура";
							  
	ЗапросПоступившей.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаОбработки), ВидГраницы.Включая));
	ЗапросПоступившей.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОбработки), ВидГраницы.Включая));
	ЗапросПоступившей.УстановитьПараметр("ДатаНачД", НачалоДня(ДатаОбработки));
	ЗапросПоступившей.УстановитьПараметр("ДатаКонД", КонецДня(ДатаОбработки));
	ЗапросПоступившей.УстановитьПараметр("Номенклатура", РасчетОднойНоменклатуры);	
	
	ТаблицаПоступившейНаТТ = ЗапросПоступившей.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"	, НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон"	, КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("Таб"		, ТаблицаПоступившейНаТТ);
	Запрос.УстановитьПараметр("Номенклатура", РасчетОднойНоменклатуры);
	//+++АК Susk (Суслин К.В.) 2018.05.15 ИП-00018675
	Запрос.УстановитьПараметр("ОрганизацияОсновная", ОрганизацияОсновная);
	//---АК Susk (Суслин К.В.) 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675	 
	|	МАКСИМУМ(ВЗ_Запрос.Организация) КАК Организация,
	//---АК Susk (Суслин К.В.) 
	|	ВЗ_Запрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВЗ_Запрос.Количество) КАК Количество,
	|	МАКСИМУМ(ВЗ_Запрос.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиница,
	|	ВЗ_Запрос.ТорговаяТочка КАК ТорговаяТочка
	|ПОМЕСТИТЬ ВТ_Отправленные
	|ИЗ
	
	//+++АК Susk (Суслин К.В.) 2018.05.15 ИП-00018675
	//исключаю точки с типом "Стороння розница" из выборки. Это продажа на сторону и мы не сможем увидеть расхождения по ним.
	//+небольшая оптимизация куска запроса
	 
	
	//|	(ВЫБРАТЬ
	//|		РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	//|		РасходныйОрдерСкладТовары.Количество КАК Количество,
	//|		РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СтруктурнаяЕдиница,
	//|		РасходныйОрдерСкладТовары.Ссылка.Получатель КАК ТорговаяТочка
	//|	ИЗ
	//|		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	//|	ГДЕ
	//|		ВЫБОР
	//|				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	//|					ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	//|				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	//|			КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	//|		И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	//|		И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	//|		И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	////|		И РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.СтруктурныеЕдиницы
	////|		И РасходныйОрдерСкладТовары.Ссылка.Получатель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|(ВЫБРАТЬ
	|	&ОрганизацияОсновная КАК Организация,
	|	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерСкладТовары.Количество КАК Количество,
	|	Склады.Владелец КАК СтруктурнаяЕдиница,
	|	РасходныйОрдерСклад.Получатель КАК ТорговаяТочка	
	|ИЗ
	|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО РасходныйОрдерСклад.Склад = Склады.Ссылка
	|		ПО РасходныйОрдерСкладТовары.Ссылка = РасходныйОрдерСклад.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РасходныйОрдерСклад.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходныйОрдерСклад.ДатаРаспределения
	|			ИНАЧЕ РасходныйОрдерСклад.Дата
	|		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйОрдерСклад.Проведен
	|	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	|	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	|	И НЕ РасходныйОрдерСкладТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					Номенклатура.Ссылка
	|				ИЗ
	|					Справочник.Номенклатура КАК Номенклатура
	|				ГДЕ
	|					(Номенклатура.СлужебныйТовар
	|						ИЛИ Номенклатура.РекламныйМатериал))
	|	И НЕ РасходныйОрдерСклад.Получатель.ТипСтруктурнойЕдиницы В (ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница),ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы))
	//---АК Susk (Суслин К.В.) 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	//|	ВЫБРАТЬ
	//|		ВЫБОР КОГДА 
	//|		ПриходныйОрдерСкладТовары.Номенклатура,
	//|		ПриходныйОрдерСкладТовары.Количество * -1,
	//|		ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	//|		ПриходныйОрдерСкладТовары.Ссылка.Поставщик
	//|	ИЗ
	//|		Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	//|	ГДЕ
	//|		ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//|		И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	//|		И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки) И НЕ ПриходныйОрдерСкладТовары.Номенклатура В
	//|					(ВЫБРАТЬ
	//|						Номенклатура.Ссылка
	//|					ИЗ
	//|						Справочник.Номенклатура КАК Номенклатура
	//|					ГДЕ
	//|						(Номенклатура.СлужебныйТовар = ИСТИНА
	//|							ИЛИ Номенклатура.РекламныйМатериал = ИСТИНА))	
	|	ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Организация,
	|	ПриходныйОрдерСкладТовары.Номенклатура,
	|	ПриходныйОрдерСкладТовары.Количество * -1,
	|	Склады.Владелец,
	|	ПриходныйОрдерСклад.Поставщик
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ПО ПриходныйОрдерСклад.Поставщик = СтруктурныеЕдиницы.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПриходныйОрдерСклад.Склад = Склады.Ссылка
	|		ПО ПриходныйОрдерСкладТовары.Ссылка = ПриходныйОрдерСклад.Ссылка
	|ГДЕ
	|	ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйОрдерСклад.Проведен
	|	И ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки)
	|	И НЕ ПриходныйОрдерСкладТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					Номенклатура.Ссылка
	|				ИЗ
	|					Справочник.Номенклатура КАК Номенклатура
	|				ГДЕ
	|					(Номенклатура.СлужебныйТовар
	|						ИЛИ Номенклатура.РекламныйМатериал))
	//---АК Susk (Суслин К.В.) 
	|) КАК ВЗ_Запрос
	|ГДЕ
	|	(ВЗ_Запрос.Номенклатура = &Номенклатура
	|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.ТорговаяТочка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.Номенклатура КАК Номенклатура,	
	|	Таб.ТТ КАК ТорговаяТочка,
	|	Таб.Поступило КАК Количество
	|ПОМЕСТИТЬ ВТ_Полученные
	|ИЗ
	|	&Таб КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТорговаяТочка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Отправленные.ТорговаяТочка, ВТ_Полученные.ТорговаяТочка) КАК ТорговаяТочка,
	//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00016875	 
	|	ЕСТЬNULL(ВТ_Отправленные.Организация, НЕОПРЕДЕЛЕНО) КАК Организация,
	//---АК Susk (Суслин К.В.) 
	|	ЕСТЬNULL(ВТ_Отправленные.Номенклатура, ВТ_Полученные.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Отправленные.Номенклатура.ТипТовара, ВТ_Полученные.Номенклатура.ТипТовара) КАК ТипТовара,
	|	ЕСТЬNULL(ВТ_Отправленные.Количество, 0) - ЕСТЬNULL(ВТ_Полученные.Количество, 0) КАК Недостача,
	|	ЕСТЬNULL(ВТ_Отправленные.СтруктурнаяЕдиница, НЕОПРЕДЕЛЕНО) КАК Расчетчик
	|ИЗ
	|	ВТ_Отправленные КАК ВТ_Отправленные
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Полученные КАК ВТ_Полученные
	|		ПО ВТ_Отправленные.ТорговаяТочка = ВТ_Полученные.ТорговаяТочка
	|			И ВТ_Отправленные.Номенклатура = ВТ_Полученные.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ВТ_Отправленные.Количество, 0) - ЕСТЬNULL(ВТ_Полученные.Количество, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	|	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛистУчета.Дата,
	|	ЛистУчета.Организация,
	|	ЛистУчета.ТорговаяТочка
	|ИЗ
	|	Документ.ЛистУчета КАК ЛистУчета
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	|ИЗ
	|	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_РасхожденияМеждуТТИСкладом))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
	|;	
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.НеУчитыватьВЗакрытииМесяца = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Отправленные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Полученные";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабРасхождения 			= Результаты[2].Выгрузить();
	ТабЦФОВЛистах 			= Результаты[3].Выгрузить();
	ТабОргВЛистах 			= Результаты[4].Выгрузить();
	ТабНастройкиПроводок 	= Результаты[5].Выгрузить();
	ТабНеПроводитьПоБух 	= Результаты[6].Выгрузить();
	
	Если ТабНастройкиПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИзлишекБезОпределенногоРасчетчика = Новый ТаблицаЗначений();
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	//---АК Susk (Суслин К.В.) 
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("ТипТовара", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыТоваров"));
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ПеречислениеУпаковка = Перечисления.ТипыТоваров.Упаковка;
	//Счет44_3 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	//Счет44_1 = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	Счет41_2 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	//СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("35018");
	//СтатьяТД = Справочники.СтатьиТовародвижения.НайтиПоКоду("00000003");
	
	ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(, ДатаОбработки);
	
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	//+++АК Susk (Суслин К.В.) 2018.10.01 ИП-00019621^02 
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	
	Для Каждого СтрокаРасхождения Из ТабРасхождения Цикл
		
		Если ТабНеПроводитьПоБух.Найти(СтрокаРасхождения.Номенклатура, "Ссылка") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаРасхождения.Номенклатура, "Номенклатура");
		Если СтрокаСчетУчета <> Неопределено
			И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.Расчетчик) Тогда
			СтрокаИзлишекБезРасчетчика = ИзлишекБезОпределенногоРасчетчика.Добавить();
			СтрокаИзлишекБезРасчетчика.ТорговаяТочка = СтрокаРасхождения.ТорговаяТочка;
			СтрокаИзлишекБезРасчетчика.Номенклатура = СтрокаРасхождения.Номенклатура;
			СтрокаИзлишекБезРасчетчика.ТипТовара = СтрокаРасхождения.ТипТовара;
			СтрокаИзлишекБезРасчетчика.Количество = СтрокаРасхождения.Недостача * (-1);
			//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675
			СтрокаИзлишекБезРасчетчика.Организация = СтрокаРасхождения.Организация;
			//---АК Susk (Суслин К.В.) 			 
			Продолжить;
		КонецЕсли;	
		
		СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
		Если СтрокиЦФО.Количество() = 0 Тогда
			ЦФО = Неопределено;
		Иначе
			ЦФО = СтрокиЦФО[0].ЦФО;
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675
		
		//СтрокиОрг = ТабОргВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
		//Если СтрокиОрг.Количество() = 0 Тогда
		//	Орг = ОрганизацияОсновная;
		//Иначе
		//	Орг = СтрокиОрг[0].Организация;
		//КонецЕсли;
			
		Орг = СтрокаРасхождения.Организация;
				 
		Если НЕ ЗначениеЗаполнено(Орг) Тогда
			СтрокиОрг = ТабОргВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
			Если СтрокиОрг.Количество() = 0 Тогда
				Орг = ОрганизацияОсновная;
			Иначе
				Орг = СтрокиОрг[0].Организация;
			КонецЕсли;
			
		КонецЕсли;		
		//---АК Susk (Суслин К.В.) 
		
		//если для торг точки не найдено, попробуем найти для Расчетчика
		Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
			СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.Расчетчик));
			Если СтрокиЦФО.Количество() <> 0 Тогда
				ЦФО = СтрокиЦФО[0].ЦФО;
			КонецЕсли;
		КонецЕсли;	
		
		Движение = Движения.Финансовый.Добавить();
		
		Движение.Период = КонецДня(ДатаОбработки);
		Движение.Организация = Орг;
		
		Если СтрокаРасхождения.Недостача > 0 Тогда
			//Движение.СчетДт = Счет44_1;
			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.ТорговаяТочка) Тогда
				Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе
				Движение.СубконтоДт.ТорговыеТочки = СтрокаРасхождения.ТорговаяТочка;
			КонецЕсли;	
			//Движение.СубконтоДт.СтатьиДоходовРасходов = СтатьяДР;
			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоДт.ЦФО = ЦФО;
			
			СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаРасхождения.Номенклатура, "Номенклатура");
			Если СтрокаСчетУчета <> Неопределено
				И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
				Движение.СчетКт = СтрокаСчетУчета.СчетУчета;
				Если СтрокаСчетУчета.СчетУчета = Счет41_2 Тогда
					Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
					Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				ИначеЕсли СтрокаСчетУчета.СчетУчета = Счет41_1 Тогда	
					Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
					Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
					Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				Иначе
					Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
				КонецЕсли;
			Иначе	
				Если СтрокаРасхождения.ТипТовара = ПеречислениеУпаковка Тогда
					Движение.СчетКт = Счет41_2;
					Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
					Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				Иначе	
					Движение.СчетКт = Счет41_1;
					Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
					Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
					//Движение.СубконтоКт.СтатьиТовародвижения = СтатьяТД;
					Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				КонецЕсли;	
			КонецЕсли;	
			
			Движение.КоличествоКт = СтрокаРасхождения.Недостача;
			
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
			КонецЕсли;
		Иначе	
			//Движение.СчетКт = Счет44_1;
			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.ТорговаяТочка) Тогда
				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе	
				Движение.СубконтоКт.ТорговыеТочки = СтрокаРасхождения.ТорговаяТочка;
			КонецЕсли;	
			//Движение.СубконтоКт.СтатьиДоходовРасходов = СтатьяДР;
			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоКт.ЦФО = ЦФО;
			
			Если СтрокаСчетУчета <> Неопределено
				И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
				Движение.СчетДт = СтрокаСчетУчета.СчетУчета;
				Если СтрокаСчетУчета.СчетУчета = Счет41_2 Тогда
					Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
					Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				ИначеЕсли СтрокаСчетУчета.СчетУчета = Счет41_1 Тогда	
					Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
					Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
					Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				Иначе
					Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
				КонецЕсли;
			Иначе	
				Если СтрокаРасхождения.ТипТовара = ПеречислениеУпаковка Тогда
					Движение.СчетДт = Счет41_2;
					Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
					Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				Иначе	
					Движение.СчетДт = Счет41_1;
					Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
					Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
					//Движение.СубконтоКт.СтатьиТовародвижения = СтатьяТД;
					Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
				КонецЕсли;	
			КонецЕсли;
			
			Движение.КоличествоДт = СтрокаРасхождения.Недостача * ?(СтрокаРасхождения.Недостача > 0, 1, -1);
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если ИзлишекБезОпределенногоРасчетчика.Количество() > 0 Тогда
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675		 
		//ИзлишекБезОпределенногоРасчетчика.Свернуть("ТорговаяТочка, Номенклатура, ТипТовара", "Количество");
		ИзлишекБезОпределенногоРасчетчика.Свернуть("ТорговаяТочка, Организация, Номенклатура, ТипТовара", "Количество");
		//---АК Susk (Суслин К.В.) 
		Запрос.УстановитьПараметр("Таб", ИзлишекБезОпределенногоРасчетчика);
		Запрос.Текст =
		"ВЫБРАТЬ
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675	 
		|	Таб.Организация,
		//---АК Susk (Суслин К.В.) 
		|	Таб.ТорговаяТочка,
		|	Таб.Количество,
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.ТипТовара КАК ТипТовара
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.ТорговаяТочка,
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675		 
		|	ВТ_Данные.Организация,
		//---АК Susk (Суслин К.В.) 
		|	ВТ_Данные.Количество,
		|	ВТ_Данные.Номенклатура,
		|	ВТ_Данные.ТипТовара,
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&ДатаКон, ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
		|		ПО ВТ_Данные.ТорговаяТочка = ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка
		|			И ВТ_Данные.Номенклатура.ГруппаНоменклатурыУРЗ = ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные";
					   
		ТабРасхождения = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаРасхождения Из ТабРасхождения Цикл
			
			СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаРасхождения.Номенклатура, "Номенклатура");
			Если СтрокаСчетУчета <> Неопределено
				И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
				Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
			Если СтрокиЦФО.Количество() = 0 Тогда
				ЦФО = Неопределено;
			Иначе
				ЦФО = СтрокиЦФО[0].ЦФО;
			КонецЕсли;
			
			//если для торг точки не найдено, попробуем найти для Расчетчика
			Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
				СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.Расчетчик));
				Если СтрокиЦФО.Количество() <> 0 Тогда
					ЦФО = СтрокиЦФО[0].ЦФО;
				КонецЕсли;
			КонецЕсли;
			
			Движение = Движения.Финансовый.Добавить();
			
			//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675			 
			//Движение.Организация = ОрганизацияОсновная;
			Движение.Организация = ?(ЗначениеЗаполнено(СтрокаРасхождения.Организация), СтрокаРасхождения.Организация, ОрганизацияОсновная);
			//---АК Susk (Суслин К.В.) 
			
			Движение.Период = КонецДня(ДатаОбработки);
			
			//Движение.СчетКт = Счет44_1;
			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.ТорговаяТочка) Тогда
				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе	
				Движение.СубконтоКт.ТорговыеТочки = СтрокаРасхождения.ТорговаяТочка;
			КонецЕсли;	
			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоКт.ЦФО = ЦФО;
			
			Если СтрокаРасхождения.ТипТовара = ПеречислениеУпаковка Тогда
				Движение.СчетДт = Счет41_2;
				Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			Иначе	
				Движение.СчетДт = Счет41_1;
				Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
				//Движение.СубконтоДт.СтатьиТовародвижения = СтатьяТД;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			КонецЕсли;
			
			Движение.КоличествоДт = СтрокаРасхождения.Количество;
			
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроводкиПоРасхождениямМеждуОтправленнымСкладомИПолученнымНаТТ()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.Период КАК Дата,
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница КАК ТорговаяТочка,
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура КАК Номенклатура,
	                      |	НЕОПРЕДЕЛЕНО КАК РасчетчикОрганизация,
	                      |	НЕОПРЕДЕЛЕНО КАК РасчетчикСтруктурнаяЕдиница,
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот КАК КоличествоПолучено,
	                      |	0 КАК КоличествоОтправлено
	                      |ПОМЕСТИТЬ ВТ_Данные
	                      |ИЗ
	                      |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, День, ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Поступление)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	                      |ГДЕ
	                      |	НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	                      |				(ВЫБРАТЬ
	                      |					Номенклатура.Ссылка
	                      |				ИЗ
	                      |					Справочник.Номенклатура КАК Номенклатура
	                      |				ГДЕ
	                      |					(Номенклатура.СлужебныйТовар
	                      |						ИЛИ Номенклатура.НеУчитыватьВЗакрытииМесяца))
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	НАЧАЛОПЕРИОДА(ДвиженияТоваровПоЛистамУчетаОбороты.Период, ДЕНЬ),
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница,
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	                      |	НЕОПРЕДЕЛЕНО,
	                      |	НЕОПРЕДЕЛЕНО,
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.Количество,
	                      |	0
	                      |ИЗ
	                      |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчетаОбороты
	                      |ГДЕ
	                      |	ДвиженияТоваровПоЛистамУчетаОбороты.Период МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И ЕСТЬNULL(ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиницаПеремещения.НомерТочки, 0) В (20, 21, 22, 10, 11)
	                      |	И ДвиженияТоваровПоЛистамУчетаОбороты.ВидДвиженияТовара В (ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ), ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ))
	                      |	И НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	                      |				(ВЫБРАТЬ
	                      |					Номенклатура.Ссылка
	                      |				ИЗ
	                      |					Справочник.Номенклатура КАК Номенклатура
	                      |				ГДЕ
	                      |					(Номенклатура.СлужебныйТовар
						  //+++АК Susk (Суслин К.В.) 2018.10.05 ИП-00019621^02						   
						  //|						ИЛИ Номенклатура.РекламныйМатериал
						  //---АК Susk (Суслин К.В.) 
	                      |						ИЛИ Номенклатура.НеУчитыватьВЗакрытииМесяца))
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	НАЧАЛОПЕРИОДА(ВЫБОР
	                      |			КОГДА РасходныйОрдерСклад.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	                      |				ТОГДА РасходныйОрдерСклад.ДатаРаспределения
	                      |			ИНАЧЕ РасходныйОрдерСклад.Дата
	                      |		КОНЕЦ, ДЕНЬ),
	                      |	РасходныйОрдерСклад.Получатель,
	                      |	РасходныйОрдерСкладТовары.Номенклатура,
	                      |	&ОрганизацияОсновная,
	                      |	Склады.Владелец,
	                      |	0,
	                      |	РасходныйОрдерСкладТовары.Количество
	                      |ИЗ
	                      |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	                      |			ПО РасходныйОрдерСклад.Склад = Склады.Ссылка
						  //+++АК CISA 2018.11.20 ИП-00019730
						  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствСтруктурныхЕдиниц КАК ЗначенияСвойствСтруктурныхЕдиниц
	                      |			ПО (РасходныйОрдерСклад.Получатель = ЗначенияСвойствСтруктурныхЕдиниц.СтруктурнаяЕдиница
	                      |					И ЗначенияСвойствСтруктурныхЕдиниц.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваСтруктурныхЕдиниц.ВыездноеМероприятие))
						  //---АК CISA
	                      |		ПО РасходныйОрдерСкладТовары.Ссылка = РасходныйОрдерСклад.Ссылка
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА РасходныйОрдерСклад.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	                      |				ТОГДА РасходныйОрдерСклад.ДатаРаспределения
	                      |			ИНАЧЕ РасходныйОрдерСклад.Дата
	                      |		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И РасходныйОрдерСклад.Проведен
	                      |	И РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	                      |	И РасходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	                      |	И НЕ РасходныйОрдерСкладТовары.Номенклатура В
	                      |				(ВЫБРАТЬ
	                      |					Номенклатура.Ссылка
	                      |				ИЗ
	                      |					Справочник.Номенклатура КАК Номенклатура
	                      |				ГДЕ
	                      |					(Номенклатура.СлужебныйТовар
						  //+++АК Susk (Суслин К.В.) 2018.10.05 ИП-00019621^02						   
						  //|						ИЛИ Номенклатура.РекламныйМатериал
						  //---АК Susk (Суслин К.В.) 
	                      |						ИЛИ Номенклатура.НеУчитыватьВЗакрытииМесяца))
						  //+++АК Susk (Суслин К.В.) 2018.12.11 б/н						   
						  |	И НЕ РасходныйОрдерСклад.Получатель.ТипСтруктурнойЕдиницы В (ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СторонняяРозница),ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.СкладСтороннейРозницы))
						  //---АК Susk (Суслин К.В.) 
						  //+++АК CISA 2018.11.20 ИП-00019730
						  |	И (ЗначенияСвойствСтруктурныхЕдиниц.Значение ЕСТЬ NULL
	                      |			ИЛИ НЕ ЗначенияСвойствСтруктурныхЕдиниц.Значение)
						  //---АК CISA
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	НАЧАЛОПЕРИОДА(ПриходныйОрдерСклад.Дата, ДЕНЬ),
	                      |	ПриходныйОрдерСклад.Поставщик,
	                      |	ПриходныйОрдерСкладТовары.Номенклатура,
	                      |	ПриходныйОрдерСклад.Организация,
	                      |	Склады.Владелец,
	                      |	0,
	                      |	ПриходныйОрдерСкладТовары.Количество * -1
	                      |ИЗ
	                      |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                      |			ПО ПриходныйОрдерСклад.Поставщик = СтруктурныеЕдиницы.Ссылка
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	                      |			ПО ПриходныйОрдерСклад.Склад = Склады.Ссылка
	                      |		ПО ПриходныйОрдерСкладТовары.Ссылка = ПриходныйОрдерСклад.Ссылка
	                      |ГДЕ
	                      |	ПриходныйОрдерСклад.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И ПриходныйОрдерСклад.Проведен
	                      |	И ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки)
	                      |	И НЕ ПриходныйОрдерСкладТовары.Номенклатура В
	                      |				(ВЫБРАТЬ
	                      |					Номенклатура.Ссылка
	                      |				ИЗ
	                      |					Справочник.Номенклатура КАК Номенклатура
	                      |				ГДЕ
	                      |					(Номенклатура.СлужебныйТовар
						  //+++АК Susk (Суслин К.В.) 2018.10.05 ИП-00019621^02
						  //|						ИЛИ Номенклатура.РекламныйМатериал
						  //---АК Susk (Суслин К.В.) 
	                      |						ИЛИ Номенклатура.НеУчитыватьВЗакрытииМесяца))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Данные.Дата КАК Дата,
	                      |	ВТ_Данные.Номенклатура,
	                      |	ВТ_Данные.Номенклатура.ТипТовара КАК ТипТовара,
	                      |	ВТ_Данные.ТорговаяТочка,
	                      |	ЕСТЬNULL(МАКСИМУМ(ВТ_Данные.РасчетчикОрганизация), НЕОПРЕДЕЛЕНО) КАК РасчетчикОрганизация,
	                      |	ЕСТЬNULL(МАКСИМУМ(ВТ_Данные.РасчетчикСтруктурнаяЕдиница), НЕОПРЕДЕЛЕНО) КАК РасчетчикСтруктурнаяЕдиница,
	                      |	СУММА(ВТ_Данные.КоличествоОтправлено) - СУММА(ВТ_Данные.КоличествоПолучено) КАК Недостача
	                      |ПОМЕСТИТЬ ВТ_Результат
	                      |ИЗ
	                      |	ВТ_Данные КАК ВТ_Данные
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_Данные.Дата,
	                      |	ВТ_Данные.Номенклатура,
	                      |	ВТ_Данные.ТорговаяТочка,
	                      |	ВТ_Данные.Номенклатура.ТипТовара
	                      |
	                      |ИМЕЮЩИЕ
	                      |	СУММА(ВТ_Данные.КоличествоОтправлено) <> СУММА(ВТ_Данные.КоличествоПолучено)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Результат.Дата КАК Дата,
	                      |	ВТ_Результат.Номенклатура,
	                      |	ВТ_Результат.ТипТовара,
	                      |	ВТ_Результат.ТорговаяТочка,
	                      |	ВТ_Результат.РасчетчикОрганизация КАК Организация,
	                      |	ВТ_Результат.РасчетчикСтруктурнаяЕдиница КАК Расчетчик,
	                      |	ВТ_Результат.Недостача
	                      |ИЗ
	                      |	ВТ_Результат КАК ВТ_Результат
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата
	                      |ИТОГИ ПО
	                      |	Дата");
	
	
	Запрос.УстановитьПараметр("ДатаНач"	, НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон"	, КонецМесяца(Дата));
	
	//+++АК Susk (Суслин К.В.) 2018.05.15 ИП-00018675
	Запрос.УстановитьПараметр("ОрганизацияОсновная", ОрганизацияОсновная);
	//---АК Susk (Суслин К.В.) 
	
	ДеревоРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаДата Из ДеревоРезультат.Строки Цикл
		ПроводкиПоРасхождениямМеждуОтправленнымСкладомИПолученнымНаТТЗаДату(СтрокаДата.Строки, СтрокаДата.Дата);
	КонецЦикла;  
	
КонецПроцедуры

Процедура ПроводкиПоРасхождениямМеждуОтправленнымСкладомИПолученнымНаТТЗаДату(СтрокиРасхождений, ДатаОбработки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	                      |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	                      |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	                      |ИЗ
	                      |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЛистУчета.Дата,
	                      |	ЛистУчета.Организация,
	                      |	ЛистУчета.ТорговаяТочка
	                      |ИЗ
	                      |	Документ.ЛистУчета КАК ЛистУчета
	                      |ГДЕ
	                      |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	                      |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	                      |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	                      |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	                      |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	                      |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	                      |ИЗ
	                      |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&Дата, ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_РасхожденияМеждуТТИСкладом))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", ДатаОбработки);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТабЦФОВЛистах 			= Результаты[0].Выгрузить();
	ТабОргВЛистах 			= Результаты[1].Выгрузить();
	ТабНастройкиПроводок 	= Результаты[2].Выгрузить();
	
	Если ТабНастройкиПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИзлишекБезОпределенногоРасчетчика = Новый ТаблицаЗначений();
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("ТорговаяТочка", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	//---АК Susk (Суслин К.В.) 
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("ТипТовара", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыТоваров"));
	ИзлишекБезОпределенногоРасчетчика.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ПеречислениеУпаковка = Перечисления.ТипыТоваров.Упаковка;
	//Счет44_3 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	//Счет44_1 = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	Счет41_2 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	//СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("35018");
	//СтатьяТД = Справочники.СтатьиТовародвижения.НайтиПоКоду("00000003");
	
	//+++АК Susk (Суслин К.В.) 2018.08.07  ИП-00019275 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(, ДатаОбработки);
	
	МассивНом = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиРасхождений.ВыгрузитьКолонку("Номенклатура"));
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, ДатаОбработки);	
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	//---АК Susk (Суслин К.В.) 
	
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	//+++АК Susk (Суслин К.В.) 2018.10.01 ИП-00019621^02 
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	
	Для Каждого СтрокаРасхождения Из СтрокиРасхождений Цикл
		
		//+++АК Susk (Суслин К.В.) 2018.08.07  ИП-00019275		
		 
		//СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаРасхождения.Номенклатура, "Номенклатура");
		//Если СтрокаСчетУчета <> Неопределено
		//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
		//	Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаРасхождения.Номенклатура);					
		СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
		
		Если МассивСчетаИсключитьИзПроведения.Найти(СчетУчетаНоменклатуры) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсключитьНоменклатуруЭтоРекламныйМатериал(СтрокаРасхождения.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
			Продолжить;
		КонецЕсли;		
		//---АК Susk (Суслин К.В.) 
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.Расчетчик) Тогда
			СтрокаИзлишекБезРасчетчика = ИзлишекБезОпределенногоРасчетчика.Добавить();
			СтрокаИзлишекБезРасчетчика.ТорговаяТочка = СтрокаРасхождения.ТорговаяТочка;
			СтрокаИзлишекБезРасчетчика.Номенклатура = СтрокаРасхождения.Номенклатура;
			СтрокаИзлишекБезРасчетчика.ТипТовара = СтрокаРасхождения.ТипТовара;
			СтрокаИзлишекБезРасчетчика.Количество = СтрокаРасхождения.Недостача * (-1);
			//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675
			СтрокаИзлишекБезРасчетчика.Организация = СтрокаРасхождения.Организация;
			//---АК Susk (Суслин К.В.) 			 
			Продолжить;
		КонецЕсли;	
		
		СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
		Если СтрокиЦФО.Количество() = 0 Тогда
			ЦФО = Неопределено;
		Иначе
			ЦФО = СтрокиЦФО[0].ЦФО;
		КонецЕсли;
		
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675
		
		//СтрокиОрг = ТабОргВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
		//Если СтрокиОрг.Количество() = 0 Тогда
		//	Орг = ОрганизацияОсновная;
		//Иначе
		//	Орг = СтрокиОрг[0].Организация;
		//КонецЕсли;
			
		Орг = СтрокаРасхождения.Организация;
				 
		Если НЕ ЗначениеЗаполнено(Орг) Тогда
			СтрокиОрг = ТабОргВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
			Если СтрокиОрг.Количество() = 0 Тогда
				Орг = ОрганизацияОсновная;
			Иначе
				Орг = СтрокиОрг[0].Организация;
			КонецЕсли;
			
		КонецЕсли;		
		//---АК Susk (Суслин К.В.) 
		
		//если для торг точки не найдено, попробуем найти для Расчетчика
		Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
			СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.Расчетчик));
			Если СтрокиЦФО.Количество() <> 0 Тогда
				ЦФО = СтрокиЦФО[0].ЦФО;
			КонецЕсли;
		КонецЕсли;	
		
		Движение = Движения.Финансовый.Добавить();
		
		Движение.Период = КонецДня(ДатаОбработки);
		Движение.Организация = Орг;
		
		Если СтрокаРасхождения.Недостача > 0 Тогда
			//Движение.СчетДт = Счет44_1;
			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.ТорговаяТочка) Тогда
				Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе
				Движение.СубконтоДт.ТорговыеТочки = СтрокаРасхождения.ТорговаяТочка;
			КонецЕсли;	
			//Движение.СубконтоДт.СтатьиДоходовРасходов = СтатьяДР;
			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоДт.ЦФО = ЦФО;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275
			
			//СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаРасхождения.Номенклатура, "Номенклатура");
						
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	Движение.СчетКт = СтрокаСчетУчета.СчетУчета;
			//	Если СтрокаСчетУчета.СчетУчета = Счет41_2 Тогда
			//		Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	ИначеЕсли СтрокаСчетУчета.СчетУчета = Счет41_1 Тогда	
			//		Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
			//		Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе
			//		Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
			//	КонецЕсли;
			//Иначе	
			//	Если СтрокаРасхождения.ТипТовара = ПеречислениеУпаковка Тогда
			//		Движение.СчетКт = Счет41_2;
			//		Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе	
			//		Движение.СчетКт = Счет41_1;
			//		Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
			//		Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
			//		//Движение.СубконтоКт.СтатьиТовародвижения = СтатьяТД;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	КонецЕсли;	
			//КонецЕсли;
			
			Движение.СчетКт = СчетУчетаНоменклатуры;
			
			//+++АК SaMi 2018.08.18 
			//Если СчетУчетаНоменклатуры = Счет41_2 Тогда
			//	Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
			//	Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			////ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда	
			//Иначе
			//	Движение.СчетКт = Счет41_1;
			//	Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
			//	Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
			//	Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			////Иначе
			////	Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
			////	Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//КонецЕсли;                 
			Если СчетУчетаНоменклатуры = Счет41_2 Тогда
				Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда
				Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
				Движение.СубконтоКт.Материалы = СтрокаРасхождения.Номенклатура;				
			Иначе
				Движение.СчетКт = Счет41_1;
				Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			КонецЕсли;                 
			//---АК SaMi  2018.08.18 
			//---АК Susk (Суслин К.В.) 
			
			Движение.КоличествоКт = СтрокаРасхождения.Недостача;
			
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
			КонецЕсли;
		Иначе	
			//Движение.СчетКт = Счет44_1;
			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.ТорговаяТочка) Тогда
				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе	
				Движение.СубконтоКт.ТорговыеТочки = СтрокаРасхождения.ТорговаяТочка;
			КонецЕсли;	
			//Движение.СубконтоКт.СтатьиДоходовРасходов = СтатьяДР;
			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоКт.ЦФО = ЦФО;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			
			 
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	Движение.СчетДт = СтрокаСчетУчета.СчетУчета;
			//	Если СтрокаСчетУчета.СчетУчета = Счет41_2 Тогда
			//		Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	ИначеЕсли СтрокаСчетУчета.СчетУчета = Счет41_1 Тогда	
			//		Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
			//		Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе
			//		Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
			//	КонецЕсли;
			//Иначе	
			//	Если СтрокаРасхождения.ТипТовара = ПеречислениеУпаковка Тогда
			//		Движение.СчетДт = Счет41_2;
			//		Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе	
			//		Движение.СчетДт = Счет41_1;
			//		Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
			//		Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
			//		//Движение.СубконтоКт.СтатьиТовародвижения = СтатьяТД;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	КонецЕсли;	
			//КонецЕсли;
			
			Движение.СчетДт = СчетУчетаНоменклатуры;
			
			Если СчетУчетаНоменклатуры = Счет41_2 Тогда
				Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда	
				Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
				Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;				
			Иначе
				Движение.СчетДт = Счет41_1;
				Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			Движение.КоличествоДт = СтрокаРасхождения.Недостача * ?(СтрокаРасхождения.Недостача > 0, 1, -1);
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если ИзлишекБезОпределенногоРасчетчика.Количество() > 0 Тогда
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675		 
		//ИзлишекБезОпределенногоРасчетчика.Свернуть("ТорговаяТочка, Номенклатура, ТипТовара", "Количество");
		ИзлишекБезОпределенногоРасчетчика.Свернуть("ТорговаяТочка, Организация, Номенклатура, ТипТовара", "Количество");
		//---АК Susk (Суслин К.В.) 
		Запрос.УстановитьПараметр("Таб", ИзлишекБезОпределенногоРасчетчика);
		Запрос.Текст =
		"ВЫБРАТЬ
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675	 
		|	Таб.Организация,
		//---АК Susk (Суслин К.В.) 
		|	Таб.ТорговаяТочка,
		|	Таб.Количество,
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.ТипТовара КАК ТипТовара
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.ТорговаяТочка,
		//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675		 
		|	ВТ_Данные.Организация,
		//---АК Susk (Суслин К.В.) 
		|	ВТ_Данные.Количество,
		|	ВТ_Данные.Номенклатура,
		|	ВТ_Данные.ТипТовара,
		|	ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&Дата, ) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
		|		ПО ВТ_Данные.ТорговаяТочка = ПорядокОбеспеченияТорговыхТочекСрезПоследних.ТорговаяТочка
		|			И ВТ_Данные.Номенклатура.ГруппаНоменклатурыУРЗ = ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаУРЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные";
					   
		ТабРасхождения = Запрос.Выполнить().Выгрузить();
		
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		  
		МассивНом = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТабРасхождения.ВыгрузитьКолонку("Номенклатура"));
		СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, ДатаОбработки);	
		ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
		//---АК Susk (Суслин К.В.)                       
		
		Для Каждого СтрокаРасхождения Из ТабРасхождения Цикл
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			
			 
			//СтрокаСчетУчета = ТабСчетаУчета.Найти(СтрокаРасхождения.Номенклатура, "Номенклатура");
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаСчетУчета.СчетУчета) <> Неопределено Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаРасхождения.Номенклатура);					
			СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
		
			Если МассивСчетаИсключитьИзПроведения.Найти(СчетУчетаНоменклатуры) <> Неопределено Тогда
				Продолжить;				
			КонецЕсли;
			
			Если ИсключитьНоменклатуруЭтоРекламныйМатериал(СтрокаРасхождения.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
				Продолжить;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.ТорговаяТочка));
			Если СтрокиЦФО.Количество() = 0 Тогда
				ЦФО = Неопределено;
			Иначе
				ЦФО = СтрокиЦФО[0].ЦФО;
			КонецЕсли;
			
			//если для торг точки не найдено, попробуем найти для Расчетчика
			Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
				СтрокиЦФО = ТабЦФОВЛистах.НайтиСтроки(Новый Структура("ТорговаяТочка", СтрокаРасхождения.Расчетчик));
				Если СтрокиЦФО.Количество() <> 0 Тогда
					ЦФО = СтрокиЦФО[0].ЦФО;
				КонецЕсли;
			КонецЕсли;
			
			Движение = Движения.Финансовый.Добавить();
			
			//+++АК Susk (Суслин К.В.) 2018.05.23 ИП-00018675			 
			//Движение.Организация = ОрганизацияОсновная;
			Движение.Организация = ?(ЗначениеЗаполнено(СтрокаРасхождения.Организация), СтрокаРасхождения.Организация, ОрганизацияОсновная);
			//---АК Susk (Суслин К.В.) 
			
			Движение.Период = КонецДня(ДатаОбработки);
			
			//Движение.СчетКт = Счет44_1;
			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.ТорговаяТочка) Тогда
				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе	
				Движение.СубконтоКт.ТорговыеТочки = СтрокаРасхождения.ТорговаяТочка;
			КонецЕсли;	
			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоКт.ЦФО = ЦФО;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			
			 
			//Если СтрокаРасхождения.ТипТовара = ПеречислениеУпаковка Тогда
			//	Движение.СчетДт = Счет41_2;
			//	Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
			//	Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//Иначе	
			//	Движение.СчетДт = Счет41_1;
			//	Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
			//	Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
			//	//Движение.СубконтоДт.СтатьиТовародвижения = СтатьяТД;
			//	Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//КонецЕсли;		
			
			Движение.СчетДт = СчетУчетаНоменклатуры;	
				
			Если СчетУчетаНоменклатуры = Счет41_2 Тогда
				Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда	
			//Иначе
				//Движение.СчетДт = Счет41_1;
				Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
				Движение.СубконтоДт.Материалы = СтрокаРасхождения.Номенклатура;					
			Иначе
				Движение.СчетДт = Счет41_1;
				Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.Расчетчик;
				Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;				
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			Движение.КоличествоДт = СтрокаРасхождения.Количество;
			
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры 


Процедура ПроводкиПоРасхождениямПеремещенийМеждуСкладами(ДатаОбработки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СкладСтрЕдиницаОтправитель,
	               |	ВЫБОР
	               |		КОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.Склады
	               |			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Владелец
	               |		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Получатель
	               |	КОНЕЦ КАК СкладСтрЕдиницаПолучатель
	               |ПОМЕСТИТЬ ВТ_Расход
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	               |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	               |		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Перемещение)
	               |	И (РасходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	               |			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	               |	ВЫБОР
	               |		КОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.Склады
	               |			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Владелец
	               |		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Получатель
	               |	КОНЕЦ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
	               |	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
	               |	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СкладСтрЕдиницаПолучатель,
	               |	ВЫБОР
	               |		КОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик ССЫЛКА Справочник.Склады
	               |			ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик.Владелец
	               |		ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Поставщик
	               |	КОНЕЦ КАК СкладСтрЕдиницаОтправитель
	               |ПОМЕСТИТЬ ВТ_Приход
	               |ИЗ
	               |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата < ДАТАВРЕМЯ(2014, 3, 1)
	               |				ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата
	               |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика < ДАТАВРЕМЯ(2014, 3, 1)
	               |								И ПриходныйОрдерСкладТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 3, 1)
	               |							ТОГДА ДАТАВРЕМЯ(2014, 3, 1)
	               |						ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика
	               |					КОНЕЦ
	               |			ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата
	               |		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.Перемещение)
	               |	И (ПриходныйОрдерСкладТовары.Номенклатура = &Номенклатура
	               |			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриходныйОрдерСкладТовары.Номенклатура,
	               |	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
	               |	ВЫБОР
	               |		КОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик ССЫЛКА Справочник.Склады
	               |			ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик.Владелец
	               |		ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Поставщик
	               |	КОНЕЦ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_Приход.Номенклатура, ВТ_Расход.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_Приход.Номенклатура.ТипТовара, ВТ_Расход.Номенклатура.ТипТовара) КАК ТипТовара,
	               |	ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0) КАК Недостача,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0) > 0
	               |			ТОГДА ВТ_Расход.СкладСтрЕдиницаОтправитель
	               |		ИНАЧЕ ВТ_Приход.СкладСтрЕдиницаПолучатель
	               |	КОНЕЦ КАК СкладСтрЕдиница
	               |ИЗ
	               |	ВТ_Расход КАК ВТ_Расход
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	               |		ПО ВТ_Расход.Номенклатура = ВТ_Приход.Номенклатура
	               |			И (ВТ_Приход.СкладСтрЕдиницаОтправитель = ВТ_Расход.СкладСтрЕдиницаОтправитель)
	               |			И (ВТ_Приход.СкладСтрЕдиницаПолучатель = ВТ_Расход.СкладСтрЕдиницаПолучатель)
	               |ГДЕ
	               |	ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0) <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	               |ИЗ
	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_РасхожденияМеждуПеремещениямиСклада))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.НеУчитыватьВЗакрытииМесяца = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Приход
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Расход";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("Номенклатура", РасчетОднойНоменклатуры);

	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[2].Выбрать();
	ТабЦФО = Результаты[3].Выгрузить();
	ТабНастройкиПроводок = Результаты[4].Выгрузить();
	ТабНеПроводитьПоБух = Результаты[5].Выгрузить();
	
	Если ТабНастройкиПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//ТоргТочкиВсе = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все", Истина);
	//СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("35019");
	//СтатьяТД = Справочники.СтатьиТовародвижения.НайтиПоКоду("00000015");
	
	Счет44_3 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	Счет41_2 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275	 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(, ДатаОбработки);
	
	СписокНом = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокНом.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокНом);
	
	Выборка.Сбросить();
	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(СписокНом, ДатаОбработки);
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	//---АК Susk (Суслин К.В.) 
	
	ПеречислениеУпаковка = Перечисления.ТипыТоваров.Упаковка;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТабНеПроводитьПоБух.Найти(Выборка.Номенклатура, "Ссылка") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		 
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(Выборка.Номенклатура);					
		СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
		
		Если ИсключитьНоменклатуруЭтоРекламныйМатериал(Выборка.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
			Продолжить;
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
		Движение = Движения.Финансовый.Добавить();
		
		Движение.Период = КонецДня(ДатаОбработки);
		Движение.Организация = ОрганизацияОсновная;
		
		Если Выборка.Недостача > 0 Тогда
			СтрокаЦФО = ТабЦФО.Найти(Выборка.СкладСтрЕдиница, "СтруктурнаяЕдиница");
			ЦФО = Неопределено;
			Если СтрокаЦФО <> Неопределено Тогда
				ЦФО = СтрокаЦФО.ЦФО;
			КонецЕсли;	
			//Движение.СчетДт = Счет44_3;
			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
			Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоДт.ЦФО = ЦФО;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			  
			
			//СтрокаСчетУчета = ТабСчетаУчета.Найти(Выборка.Номенклатура, "Номенклатура");
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	Движение.СчетКт = СтрокаСчетУчета.СчетУчета;
			//	Если СтрокаСчетУчета.СчетУчета = Счет41_2 Тогда
			//		Движение.СубконтоКт.Материалы = Выборка.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	ИначеЕсли СтрокаСчетУчета.СчетУчета = Счет41_1 Тогда	
			//		Движение.СубконтоКт.МестаХранения = Выборка.СкладСтрЕдиница;
			//		Движение.СубконтоКт.Товары = Выборка.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе
			//		Движение.СубконтоКт.Материалы = Выборка.Номенклатура;
			//	КонецЕсли;
			//Иначе	
			//	Если Выборка.ТипТовара = ПеречислениеУпаковка Тогда
			//		Движение.СчетКт = Счет41_2;
			//		Движение.СубконтоКт.Материалы = Выборка.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе	
			//		Движение.СчетКт = Счет41_1;
			//		Движение.СубконтоКт.МестаХранения = Выборка.СкладСтрЕдиница;
			//		Движение.СубконтоКт.Товары = Выборка.Номенклатура;
			//		Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	КонецЕсли;	
			//КонецЕсли;
						
			Движение.СчетКт = СчетУчетаНоменклатуры;
			Если СчетУчетаНоменклатуры = Счет41_2 Тогда
				Движение.СубконтоКт.Материалы = Выборка.Номенклатура;
				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда	
			//Иначе
			//	Движение.СчетКт = Счет41_1;
				Движение.СубконтоКт.МестаХранения = Выборка.СкладСтрЕдиница;
				Движение.СубконтоКт.Товары = Выборка.Номенклатура;
				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
				Движение.СубконтоКт.Материалы = Выборка.Номенклатура;				
			Иначе
				Движение.СчетКт = Счет41_1;
				Движение.СубконтоКт.МестаХранения = Выборка.СкладСтрЕдиница;
				Движение.СубконтоКт.Товары = Выборка.Номенклатура;
				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			Движение.КоличествоКт = Выборка.Недостача;
			
			Себестоимость = ПолучитьСебестоимость(Выборка.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
			КонецЕсли;
		Иначе	
			СтрокаЦФО = ТабЦФО.Найти(Выборка.СкладСтрЕдиница, "СтруктурнаяЕдиница");
			ЦФО = Неопределено;
			Если СтрокаЦФО <> Неопределено Тогда
				ЦФО = СтрокаЦФО.ЦФО;
			КонецЕсли;	
			//Движение.СчетКт = Счет44_3;
			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
			Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоКт.ЦФО = ЦФО;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			
			 
			//СтрокаСчетУчета = ТабСчетаУчета.Найти(Выборка.Номенклатура, "Номенклатура");
			//Если СтрокаСчетУчета <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаСчетУчета.СчетУчета) Тогда
			//	Движение.СчетДт = СтрокаСчетУчета.СчетУчета;
			//	Если СтрокаСчетУчета.СчетУчета = Счет41_2 Тогда
			//		Движение.СубконтоДт.Материалы = Выборка.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	ИначеЕсли СтрокаСчетУчета.СчетУчета = Счет41_1 Тогда	
			//		Движение.СубконтоДт.МестаХранения = Выборка.СкладСтрЕдиница;
			//		Движение.СубконтоДт.Товары = Выборка.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе
			//		Движение.СубконтоДт.Материалы = Выборка.Номенклатура;
			//	КонецЕсли;
			//Иначе	
			//	Если Выборка.ТипТовара = ПеречислениеУпаковка Тогда
			//		Движение.СчетДт = Счет41_2;
			//		Движение.СубконтоДт.Материалы = Выборка.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	Иначе	
			//		Движение.СчетДт = Счет41_1;
			//		Движение.СубконтоДт.МестаХранения = Выборка.СкладСтрЕдиница;
			//		Движение.СубконтоДт.Товары = Выборка.Номенклатура;
			//		Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			//	КонецЕсли;	
			//КонецЕсли;
			
			Движение.СчетДт = СчетУчетаНоменклатуры;
			Если СчетУчетаНоменклатуры = Счет41_2 Тогда
				Движение.СубконтоДт.Материалы = Выборка.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда	
				Движение.СубконтоДт.МестаХранения = Выборка.СкладСтрЕдиница;
				Движение.СубконтоДт.Товары = Выборка.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
				Движение.СубконтоДт.Материалы = Выборка.Номенклатура;
			Иначе
				Движение.СчетДт = Счет41_1;
				Движение.СубконтоДт.МестаХранения = Выборка.СкладСтрЕдиница;
				Движение.СубконтоДт.Товары = Выборка.Номенклатура;
				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
				
			Движение.КоличествоДт = Выборка.Недостача * ?(Выборка.Недостача > 0, 1, -1);
			
			Себестоимость = ПолучитьСебестоимость(Выборка.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

//+++АК Susk (Суслин К.В.) 2018.08.07
#Область КомментКод_ПроводкиПоРасхождениямПеремещенийМеждуСкладамиЗаМесяц 
//Процедура ПроводкиПоРасхождениямПеремещенийМеждуСкладамиЗаМесяц()
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	РасходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
//	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество,
//	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СкладСтрЕдиницаОтправитель,
//	               |	ВЫБОР
//	               |		КОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.Склады
//	               |			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Владелец
//	               |		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Получатель
//	               |	КОНЕЦ КАК СкладСтрЕдиницаПолучатель
//	               |ПОМЕСТИТЬ ВТ_Расход
//	               |ИЗ
//	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
//	               |ГДЕ
//	               |	ВЫБОР
//	               |			КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
//	               |				ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
//	               |			ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
//	               |		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
//	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
//	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
//	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.Перемещение)
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	РасходныйОрдерСкладТовары.Номенклатура,
//	               |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
//	               |	ВЫБОР
//	               |		КОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель ССЫЛКА Справочник.Склады
//	               |			ТОГДА РасходныйОрдерСкладТовары.Ссылка.Получатель.Владелец
//	               |		ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Получатель
//	               |	КОНЕЦ
//	               |
//	               |ИНДЕКСИРОВАТЬ ПО
//	               |	Номенклатура
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ПриходныйОрдерСкладТовары.Номенклатура КАК Номенклатура,
//	               |	СУММА(ПриходныйОрдерСкладТовары.Количество) КАК Количество,
//	               |	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК СкладСтрЕдиницаПолучатель,
//	               |	ВЫБОР
//	               |		КОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик ССЫЛКА Справочник.Склады
//	               |			ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик.Владелец
//	               |		ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Поставщик
//	               |	КОНЕЦ КАК СкладСтрЕдиницаОтправитель
//	               |ПОМЕСТИТЬ ВТ_Приход
//	               |ИЗ
//	               |	Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
//	               |ГДЕ
//	               |	ВЫБОР
//	               |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата < ДАТАВРЕМЯ(2014, 3, 1)
//	               |				ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Дата
//	               |			КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика <> ДАТАВРЕМЯ(1, 1, 1)
//	               |				ТОГДА ВЫБОР
//	               |						КОГДА ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика < ДАТАВРЕМЯ(2014, 3, 1)
//	               |								И ПриходныйОрдерСкладТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2014, 3, 1)
//	               |							ТОГДА ДАТАВРЕМЯ(2014, 3, 1)
//	               |						ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.ДатаДокументаПоставщика
//	               |					КОНЕЦ
//	               |			ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Дата
//	               |		КОНЕЦ МЕЖДУ &ДатаНач И &ДатаКон
//	               |	И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
//	               |	И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.Перемещение)
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	ПриходныйОрдерСкладТовары.Номенклатура,
//	               |	ПриходныйОрдерСкладТовары.Ссылка.Склад.Владелец,
//	               |	ВЫБОР
//	               |		КОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик ССЫЛКА Справочник.Склады
//	               |			ТОГДА ПриходныйОрдерСкладТовары.Ссылка.Поставщик.Владелец
//	               |		ИНАЧЕ ПриходныйОрдерСкладТовары.Ссылка.Поставщик
//	               |	КОНЕЦ
//	               |
//	               |ИНДЕКСИРОВАТЬ ПО
//	               |	Номенклатура
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ЕСТЬNULL(ВТ_Приход.Номенклатура, ВТ_Расход.Номенклатура) КАК Номенклатура,
//	               |	ЕСТЬNULL(ВТ_Приход.Номенклатура.ТипТовара, ВТ_Расход.Номенклатура.ТипТовара) КАК ТипТовара,
//	               |	ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0) КАК Недостача,
//	               |	ВЫБОР
//	               |		КОГДА ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0) > 0
//	               |			ТОГДА ВТ_Расход.СкладСтрЕдиницаОтправитель
//	               |		ИНАЧЕ ВТ_Приход.СкладСтрЕдиницаПолучатель
//	               |	КОНЕЦ КАК СкладСтрЕдиница
//	               |ИЗ
//	               |	ВТ_Расход КАК ВТ_Расход
//	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
//	               |		ПО ВТ_Расход.Номенклатура = ВТ_Приход.Номенклатура
//	               |			И (ВТ_Приход.СкладСтрЕдиницаОтправитель = ВТ_Расход.СкладСтрЕдиницаОтправитель)
//	               |			И (ВТ_Приход.СкладСтрЕдиницаПолучатель = ВТ_Расход.СкладСтрЕдиницаПолучатель)
//	               |ГДЕ
//	               |	ЕСТЬNULL(ВТ_Расход.Количество, 0) - ЕСТЬNULL(ВТ_Приход.Количество, 0) <> 0
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
//	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
//	               |ИЗ
//	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
//	               |ИЗ
//	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_РасхожденияМеждуПеремещениямиСклада))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |УНИЧТОЖИТЬ ВТ_Приход
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |УНИЧТОЖИТЬ ВТ_Расход";
//				   
//	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
//	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));

//	Результаты = Запрос.ВыполнитьПакет();
//	
//	Выборка = Результаты[2].Выбрать();
//	ТабЦФО = Результаты[3].Выгрузить();
//	ТабНастройкиПроводок = Результаты[4].Выгрузить();
//	
//	Если ТабНастройкиПроводок.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	//ТоргТочкиВсе = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все", Истина);
//	//СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("35019");
//	//СтатьяТД = Справочники.СтатьиТовародвижения.НайтиПоКоду("00000015");
//	
//	Счет44_3 = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
//	Счет41_1 = ПланыСчетов.Финансовый.Товары;
//	Счет41_2 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
//	
//	ПеречислениеУпаковка = Перечисления.ТипыТоваров.Упаковка;
//	
//	Пока Выборка.Следующий() Цикл
//		Движение = Движения.Финансовый.Добавить();
//		
//		Движение.Период = КонецМесяца(Дата);
//		
//		Если Выборка.Недостача > 0 Тогда
//			СтрокаЦФО = ТабЦФО.Найти(Выборка.СкладСтрЕдиница, "СтруктурнаяЕдиница");
//			ЦФО = Неопределено;
//			Если СтрокаЦФО <> Неопределено Тогда
//				ЦФО = СтрокаЦФО.ЦФО;
//			КонецЕсли;	
//			//Движение.СчетДт = Счет44_3;
//			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
//			Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
//			Движение.СубконтоДт.ЦФО = ЦФО;
//			
//			Если Выборка.ТипТовара = ПеречислениеУпаковка Тогда
//				Движение.СчетКт = Счет41_2;
//				Движение.СубконтоКт.Материалы = Выборка.Номенклатура;
//				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			Иначе	
//				Движение.СчетКт = Счет41_1;
//				Движение.СубконтоКт.МестаХранения = Выборка.СкладСтрЕдиница;
//				Движение.СубконтоКт.Товары = Выборка.Номенклатура;
//				Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			КонецЕсли;	
//			
//			Движение.КоличествоКт = Выборка.Недостача;
//			
//			Себестоимость = ПолучитьСебестоимость(Выборка.Номенклатура);
//			Если Себестоимость <> Неопределено Тогда
//				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
//			КонецЕсли;
//		Иначе	
//			СтрокаЦФО = ТабЦФО.Найти(Выборка.СкладСтрЕдиница, "СтруктурнаяЕдиница");
//			ЦФО = Неопределено;
//			Если СтрокаЦФО <> Неопределено Тогда
//				ЦФО = СтрокаЦФО.ЦФО;
//			КонецЕсли;	
//			//Движение.СчетКт = Счет44_3;
//			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
//			Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
//			Движение.СубконтоКт.ЦФО = ЦФО;
//			
//			Если Выборка.ТипТовара = ПеречислениеУпаковка Тогда
//				Движение.СчетДт = Счет41_2;
//				Движение.СубконтоДт.Материалы = Выборка.Номенклатура;
//				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			Иначе	
//				Движение.СчетДт = Счет41_1;
//				Движение.СубконтоДт.МестаХранения = Выборка.СкладСтрЕдиница;
//				Движение.СубконтоДт.Товары = Выборка.Номенклатура;
//				Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			КонецЕсли;
//			
//			Движение.КоличествоДт = Выборка.Недостача * ?(Выборка.Недостача > 0, 1, -1);
//			
//			Себестоимость = ПолучитьСебестоимость(Выборка.Номенклатура);
//			Если Себестоимость <> Неопределено Тогда
//				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЦикла;	
//	
//КонецПроцедуры	
#КонецОбласти

Процедура ПроводкиПоРасхождениямПеремещенийМеждуТТ(ДатаОбработки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЗ_Запрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	ВЗ_Запрос.Номенклатура,
	               |	ВЗ_Запрос.Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЗ_Запрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |		ВЗ_Запрос.Номенклатура КАК Номенклатура,
	               |		СУММА(ВЗ_Запрос.Количество) КАК Количество
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |			ДвиженияТоваровПоЛистамУчета.Номенклатура КАК Номенклатура,
	               |			ДвиженияТоваровПоЛистамУчета.Количество КАК Количество
	               |		ИЗ
	               |			РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
	               |		ГДЕ
	               |			ДвиженияТоваровПоЛистамУчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |			И ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ)
	               |			И НЕ ЕСТЬNULL(ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиницаПеремещения.НомерТочки, 0) В (10, 11, 20, 21, 22)
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиницаПеремещения,
	               |			ДвиженияТоваровПоЛистамУчета.Номенклатура,
	               |			ДвиженияТоваровПоЛистамУчета.Количество
	               |		ИЗ
	               |			РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
	               |		ГДЕ
	               |			ДвиженияТоваровПоЛистамУчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |			И ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ)
	               |			И НЕ ЕСТЬNULL(ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиницаПеремещения.НомерТочки, 0) В (10, 11, 20, 21, 22)) КАК ВЗ_Запрос
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВЗ_Запрос.СтруктурнаяЕдиница,
	               |		ВЗ_Запрос.Номенклатура) КАК ВЗ_Запрос
	               |ГДЕ
	               |	ВЗ_Запрос.Количество <> 0
	               |	И (ВЗ_Запрос.Номенклатура = &Номенклатура
	               |			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |	И ВЗ_Запрос.Номенклатура.НеУчитыватьВЗакрытииМесяца = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтруктурнаяЕдиница
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	               |ИЗ
	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчета.Дата,
	               |	ЛистУчета.Организация,
	               |	ЛистУчета.ТорговаяТочка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_РасхожденияПеремещенияМеждуТТ)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаОбработки));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОбработки));
	Запрос.УстановитьПараметр("Номенклатура", РасчетОднойНоменклатуры);
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабРасхождения = Результаты[0].Выгрузить();
	ТабРасхождения.Индексы.Добавить("Номенклатура");
	ТабНоменклатуры = ТабРасхождения.Скопировать();
	ТабНоменклатуры.Свернуть("Номенклатура");
	ТабЦФО = Результаты[1].Выгрузить();
	ТабОргВЛистах = Результаты[2].Выгрузить();
	ТабНастройкиПроводок = Результаты[3].Выгрузить();
	
	Если ТабНастройкиПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСклады = Новый Массив();
	МассивСклады.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
	МассивСклады.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"));
	
	Если НЕ ЗначениеЗаполнено(ТабНастройкиПроводок[0].ЦФО) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано ЦФО в настройке отражения операций в учете ""Закрытие месяца расхождения перемещения между ТТ"". Должно быть указано Все");
	КонецЕсли;	
	
	Для Каждого СтрокаНоменклатура Из ТабНоменклатуры Цикл
		СтрокиРасхождений = ТабРасхождения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатура.Номенклатура));
		//первый проход - определяем где одинаковое количество (пересорт по точкам)
		Для н = 0 По СтрокиРасхождений.Количество() - 1 Цикл
			Если СтрокиРасхождений[н].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для м = 0 По СтрокиРасхождений.Количество() - 1 Цикл
				Если н = м ИЛИ СтрокиРасхождений[м].Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокиРасхождений[н].Количество = СтрокиРасхождений[м].Количество * (-1) Тогда
					СтрокиРасхождений[н].Количество = 0;
					СтрокиРасхождений[м].Количество = 0;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		//второй проход - взаимозачитываем количества оставшиеся
		Для н = 0 По СтрокиРасхождений.Количество() - 1 Цикл
			Если СтрокиРасхождений[н].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			КолвоМеньшеНуля = СтрокиРасхождений[н].Количество < 0;
			Для м = 0 По СтрокиРасхождений.Количество() - 1 Цикл
				Если н = м ИЛИ СтрокиРасхождений[м].Количество = 0
					ИЛИ (КолвоМеньшеНуля И СтрокиРасхождений[м].Количество < 0)
					ИЛИ (КолвоМеньшеНуля = Ложь И СтрокиРасхождений[м].Количество > 0)Тогда
					Продолжить;
				КонецЕсли;
				Колво = Мин(СтрокиРасхождений[н].Количество * ?(СтрокиРасхождений[н].Количество < 0, -1, 1)
							, СтрокиРасхождений[м].Количество * ?(СтрокиРасхождений[м].Количество < 0, -1, 1));
				Если Колво = 0 Тогда
					Продолжить;
				КонецЕсли;	
				СтрокиРасхождений[н].Количество = СтрокиРасхождений[н].Количество + Колво * ?(СтрокиРасхождений[н].Количество < 0, 1, -1);
				СтрокиРасхождений[м].Количество = СтрокиРасхождений[м].Количество + Колво * ?(СтрокиРасхождений[м].Количество < 0, 1, -1);
				Если СтрокиРасхождений[н].Количество = 0 Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	КолвоСтрок = ТабРасхождения.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если ТабРасхождения[КолвоСтрок - н].Количество = 0 Тогда
			ТабРасхождения.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(, ДатаОбработки);
	
	//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275	 
	СписокНом = ТабРасхождения.ВыгрузитьКолонку("Номенклатура");	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокНом);	
	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(СписокНом, ДатаОбработки);
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	
	Счет41_2 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	//---АК Susk (Суслин К.В.)
	
	Для Каждого СтрокаРасхождения Из ТабРасхождения Цикл
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275
		Если ИсключитьНоменклатуруЭтоРекламныйМатериал(СтрокаРасхождения.Номенклатура, ЗначенияРеквизитовНом, СоответствиеНоменклатурыИСчета.Получить(СтрокаРасхождения.Номенклатура)) Тогда
			Продолжить;
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
		Движение = Движения.Финансовый.Добавить();
		
		Движение.Период = КонецДня(ДатаОбработки);
		
		СтрокаЦФО = ТабЦФО.Найти(СтрокаРасхождения.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		ЦФО = Неопределено;
		Если СтрокаЦФО <> Неопределено Тогда
			ЦФО = СтрокаЦФО.ЦФО;
		КонецЕсли;
		
		СтрокаОрг = ТабОргВЛистах.Найти(СтрокаРасхождения.СтруктурнаяЕдиница, "ТорговаяТочка");
		Орг = ОрганизацияОсновная;
		Если СтрокаОрг <> Неопределено Тогда
			Орг = СтрокаОрг.Организация;
		КонецЕсли;	
		
		Движение.Организация = Орг;
		Если СтрокаРасхождения.Количество > 0 Тогда
			//Движение.СчетДт = Счет44_3;
			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница)
				ИЛИ МассивСклады.Найти(СтрокаРасхождения.СтруктурнаяЕдиница) <> Неопределено Тогда
				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе
				Движение.СубконтоКт.ТорговыеТочки = СтрокаРасхождения.СтруктурнаяЕдиница;
			КонецЕсли;
			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоКт.ЦФО = ?(ЗначениеЗаполнено(ЦФО), ЦФО, ТабНастройкиПроводок[0].ЦФО);
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		 
			//Движение.СчетДт = Счет41_1;
			//Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница) Тогда
			//	Движение.СубконтоДт.МестаХранения = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			//Иначе
			//	Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.СтруктурнаяЕдиница;
			//КонецЕсли;
			//Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
			//Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
			
			ПроставитьСчетСубконто_ПроводкиПоРасхождениямПеремещенийМеждуТТ(СоответствиеНоменклатурыИСчета, СтрокаРасхождения, Движение, ТабНастройкиПроводок[0], "Дт"); 
			//---АК Susk (Суслин К.В.) 			
			
			Движение.КоличествоДт = СтрокаРасхождения.Количество;
			
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
			КонецЕсли;
		Иначе	
			//Движение.СчетДт = Счет44_3;
			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница)
				ИЛИ МассивСклады.Найти(СтрокаРасхождения.СтруктурнаяЕдиница) <> Неопределено Тогда
				Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			Иначе
				Движение.СубконтоДт.ТорговыеТочки = СтрокаРасхождения.СтруктурнаяЕдиница;
			КонецЕсли;
			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
			Движение.СубконтоДт.ЦФО = ?(ЗначениеЗаполнено(ЦФО), ЦФО, ТабНастройкиПроводок[0].ЦФО);
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		 
			
			//Движение.СчетКт = Счет41_1;
			//Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница) Тогда
			//	Движение.СубконтоКт.МестаХранения = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
			//Иначе
			//	Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.СтруктурнаяЕдиница;
			//КонецЕсли;
			//Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
			//Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;			
						
			ПроставитьСчетСубконто_ПроводкиПоРасхождениямПеремещенийМеждуТТ(СоответствиеНоменклатурыИСчета, СтрокаРасхождения, Движение, ТабНастройкиПроводок[0], "Кт"); 
			//---АК Susk (Суслин К.В.)  			
			
			Движение.КоличествоКт = СтрокаРасхождения.Количество * (-1);
			
			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

//+++АК Susk (Суслин К.В.) 2018.08.07 
#Область КомментКод_ПроводкиПоРасхождениямПеремещенийМеждуТТЗаМесяц 
//Процедура ПроводкиПоРасхождениямПеремещенийМеждуТТЗаМесяц()
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ВЗ_Запрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	               |	ВЗ_Запрос.Номенклатура,
//	               |	ВЗ_Запрос.Количество
//	               |ИЗ
//	               |	(ВЫБРАТЬ
//	               |		ВЗ_Запрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	               |		ВЗ_Запрос.Номенклатура КАК Номенклатура,
//	               |		СУММА(ВЗ_Запрос.Количество) КАК Количество
//	               |	ИЗ
//	               |		(ВЫБРАТЬ
//	               |			ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	               |			ДвиженияТоваровПоЛистамУчета.Номенклатура КАК Номенклатура,
//	               |			ДвиженияТоваровПоЛистамУчета.Количество КАК Количество
//	               |		ИЗ
//	               |			РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
//	               |		ГДЕ
//	               |			ДвиженияТоваровПоЛистамУчета.Период МЕЖДУ &ДатаНач И &ДатаКон
//	               |			И ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ)
//	               |		
//	               |		ОБЪЕДИНИТЬ ВСЕ
//	               |		
//	               |		ВЫБРАТЬ
//	               |			ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиницаПеремещения,
//	               |			ДвиженияТоваровПоЛистамУчета.Номенклатура,
//	               |			ДвиженияТоваровПоЛистамУчета.Количество
//	               |		ИЗ
//	               |			РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
//	               |		ГДЕ
//	               |			ДвиженияТоваровПоЛистамУчета.Период МЕЖДУ &ДатаНач И &ДатаКон
//	               |			И ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ)) КАК ВЗ_Запрос
//	               |	
//	               |	СГРУППИРОВАТЬ ПО
//	               |		ВЗ_Запрос.СтруктурнаяЕдиница,
//	               |		ВЗ_Запрос.Номенклатура) КАК ВЗ_Запрос
//	               |ГДЕ
//	               |	ВЗ_Запрос.Количество <> 0
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	СтруктурнаяЕдиница
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
//	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
//	               |ИЗ
//	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
//	               |ИЗ
//	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_РасхожденияПеремещенияМеждуТТ)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
//				   
//	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
//	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
//	
//	Результаты = Запрос.ВыполнитьПакет();
//	ТабРасхождения = Результаты[0].Выгрузить();
//	ТабРасхождения.Индексы.Добавить("Номенклатура");
//	ТабНоменклатуры = ТабРасхождения.Скопировать();
//	ТабНоменклатуры.Свернуть("Номенклатура");
//	ТабЦФО = Результаты[1].Выгрузить();
//	ТабНастройкиПроводок = Результаты[2].Выгрузить();
//	
//	Если ТабНастройкиПроводок.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МассивСклады = Новый Массив();
//	МассивСклады.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
//	МассивСклады.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"));
//	
//	Если НЕ ЗначениеЗаполнено(ТабНастройкиПроводок[0].ЦФО) Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано ЦФО в настройке отражения операций в учете ""Закрытие месяца расхождения перемещения между ТТ"". Должно быть указано Все");
//	КонецЕсли;	
//	
//	Для Каждого СтрокаНоменклатура Из ТабНоменклатуры Цикл
//		СтрокиРасхождений = ТабРасхождения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатура.Номенклатура));
//		//первый проход - определяем где одинаковое количество (пересорт по точкам)
//		Для н = 0 По СтрокиРасхождений.Количество() - 1 Цикл
//			Если СтрокиРасхождений[н].Количество = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			Для м = 0 По СтрокиРасхождений.Количество() - 1 Цикл
//				Если н = м ИЛИ СтрокиРасхождений[м].Количество = 0 Тогда
//					Продолжить;
//				КонецЕсли;
//				Если СтрокиРасхождений[н].Количество = СтрокиРасхождений[м].Количество * (-1) Тогда
//					СтрокиРасхождений[н].Количество = 0;
//					СтрокиРасхождений[м].Количество = 0;
//					Прервать;
//				КонецЕсли;	
//			КонецЦикла;	
//		КонецЦикла;	
//		
//		//второй проход - взаимозачитываем количества оставшиеся
//		Для н = 0 По СтрокиРасхождений.Количество() - 1 Цикл
//			Если СтрокиРасхождений[н].Количество = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			КолвоМеньшеНуля = СтрокиРасхождений[н].Количество < 0;
//			Для м = 0 По СтрокиРасхождений.Количество() - 1 Цикл
//				Если н = м ИЛИ СтрокиРасхождений[м].Количество = 0
//					ИЛИ (КолвоМеньшеНуля И СтрокиРасхождений[м].Количество < 0)
//					ИЛИ (КолвоМеньшеНуля = Ложь И СтрокиРасхождений[м].Количество > 0)Тогда
//					Продолжить;
//				КонецЕсли;
//				Колво = Мин(СтрокиРасхождений[н].Количество * ?(СтрокиРасхождений[н].Количество < 0, -1, 1)
//							, СтрокиРасхождений[м].Количество * ?(СтрокиРасхождений[м].Количество < 0, -1, 1));
//				Если Колво = 0 Тогда
//					Продолжить;
//				КонецЕсли;	
//				СтрокиРасхождений[н].Количество = СтрокиРасхождений[н].Количество + Колво * ?(СтрокиРасхождений[н].Количество < 0, 1, -1);
//				СтрокиРасхождений[м].Количество = СтрокиРасхождений[м].Количество + Колво * ?(СтрокиРасхождений[м].Количество < 0, 1, -1);
//				Если СтрокиРасхождений[н].Количество = 0 Тогда
//					Прервать;
//				КонецЕсли;	
//			КонецЦикла;	
//		КонецЦикла;
//	КонецЦикла;
//	
//	КолвоСтрок = ТабРасхождения.Количество();
//	Для н = 1 По КолвоСтрок Цикл
//		Если ТабРасхождения[КолвоСтрок - н].Количество = 0 Тогда
//			ТабРасхождения.Удалить(КолвоСтрок - н);
//		КонецЕсли;	
//	КонецЦикла;
//	
//	Счет41_1 = ПланыСчетов.Финансовый.Товары;
//	
//	Для Каждого СтрокаРасхождения Из ТабРасхождения Цикл
//		Движение = Движения.Финансовый.Добавить();
//		
//		Движение.Период = КонецМесяца(Дата);
//		
//		Если СтрокаРасхождения.Количество > 0 Тогда
//			СтрокаЦФО = ТабЦФО.Найти(СтрокаРасхождения.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
//			ЦФО = Неопределено;
//			Если СтрокаЦФО <> Неопределено Тогда
//				ЦФО = СтрокаЦФО.ЦФО;
//			КонецЕсли;	
//			//Движение.СчетДт = Счет44_3;
//			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
//			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница)
//				ИЛИ МассивСклады.Найти(СтрокаРасхождения.СтруктурнаяЕдиница) <> Неопределено Тогда
//				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоКт.ТорговыеТочки = СтрокаРасхождения.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
//			Движение.СубконтоКт.ЦФО = ?(ЗначениеЗаполнено(ЦФО), ЦФО, ТабНастройкиПроводок[0].ЦФО);
//			
//			Движение.СчетДт = Счет41_1;
//			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница) Тогда
//				Движение.СубконтоДт.МестаХранения = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоДт.МестаХранения = СтрокаРасхождения.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоДт.Товары = СтрокаРасхождения.Номенклатура;
//			Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			
//			Движение.КоличествоДт = СтрокаРасхождения.Количество;
//			
//			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
//			Если Себестоимость <> Неопределено Тогда
//				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
//			КонецЕсли;
//		Иначе	
//			СтрокаЦФО = ТабЦФО.Найти(СтрокаРасхождения.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
//			ЦФО = Неопределено;
//			Если СтрокаЦФО <> Неопределено Тогда
//				ЦФО = СтрокаЦФО.ЦФО;
//			КонецЕсли;	
//			//Движение.СчетДт = Счет44_3;
//			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
//			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница)
//				ИЛИ МассивСклады.Найти(СтрокаРасхождения.СтруктурнаяЕдиница) <> Неопределено Тогда
//				Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоДт.ТорговыеТочки = СтрокаРасхождения.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
//			Движение.СубконтоДт.ЦФО = ?(ЗначениеЗаполнено(ЦФО), ЦФО, ТабНастройкиПроводок[0].ЦФО);
//			
//			Движение.СчетКт = Счет41_1;
//			Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница) Тогда
//				Движение.СубконтоКт.МестаХранения = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоКт.МестаХранения = СтрокаРасхождения.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоКт.Товары = СтрокаРасхождения.Номенклатура;
//			Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			
//			Движение.КоличествоКт = СтрокаРасхождения.Количество * (-1);
//			
//			Себестоимость = ПолучитьСебестоимость(СтрокаРасхождения.Номенклатура);
//			Если Себестоимость <> Неопределено Тогда
//				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;	
//	
//КонецПроцедуры	

//Процедура ПроводкиПоКомплектамЗаМесяц_Старая()
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
//	               |	ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот КАК Количество
//	               |ИЗ
//	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, , ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Комплектация)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
//	               |ГДЕ
//	               |	НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
//	               |				(ВЫБРАТЬ
//	               |					Номенклатура.Ссылка
//	               |				ИЗ
//	               |					Справочник.Номенклатура КАК Номенклатура
//	               |				ГДЕ
//	               |					Номенклатура.СлужебныйТовар = ИСТИНА)
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
//	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
//	               |ИЗ
//	               |	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
//	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
//	               |ИЗ
//	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_ОперацииПоКомплектации)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
//				   
//	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоМесяца(Дата), ВидГраницы.Включая));
//	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
//	
//	Результаты = Запрос.ВыполнитьПакет();
//	ТабДвижения = Результаты[0].Выгрузить();
//	ТабЦФО = Результаты[1].Выгрузить();
//	ТабНастройкиПроводок = Результаты[2].Выгрузить();
//	
//	Если ТабНастройкиПроводок.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МассивСклады = Новый Массив();
//	МассивСклады.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000231"));
//	МассивСклады.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"));
//	
//	Если НЕ ЗначениеЗаполнено(ТабНастройкиПроводок[0].ЦФО) Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано ЦФО в настройке отражения операций в учете ""Закрытие месяца операции комплектации"". Должно быть указано Все");
//	КонецЕсли;	
//	
//	Счет41_1 = ПланыСчетов.Финансовый.Товары;
//	
//	Для Каждого СтрокаДвижение Из ТабДвижения Цикл
//		Движение = Движения.Финансовый.Добавить();
//		
//		Движение.Период = КонецМесяца(Дата);
//		
//		Если СтрокаДвижение.Количество > 0 Тогда
//			СтрокаЦФО = ТабЦФО.Найти(СтрокаДвижение.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
//			ЦФО = Неопределено;
//			Если СтрокаЦФО <> Неопределено Тогда
//				ЦФО = СтрокаЦФО.ЦФО;
//			КонецЕсли;	
//			//Движение.СчетДт = Счет44_3;
//			Движение.СчетКт = ТабНастройкиПроводок[0].Счет;
//			Если НЕ ЗначениеЗаполнено(СтрокаДвижение.СтруктурнаяЕдиница)
//				ИЛИ МассивСклады.Найти(СтрокаДвижение.СтруктурнаяЕдиница) <> Неопределено Тогда
//				Движение.СубконтоКт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоКт.ТорговыеТочки = СтрокаДвижение.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоКт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
//			Движение.СубконтоКт.ЦФО = ?(ЗначениеЗаполнено(ЦФО), ЦФО, ТабНастройкиПроводок[0].ЦФО);
//			
//			Движение.СчетДт = Счет41_1;
//			Если НЕ ЗначениеЗаполнено(СтрокаДвижение.СтруктурнаяЕдиница) Тогда
//				Движение.СубконтоДт.МестаХранения = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоДт.МестаХранения = СтрокаДвижение.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоДт.Товары = СтрокаДвижение.Номенклатура;
//			Движение.СубконтоДт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			
//			Движение.КоличествоДт = СтрокаДвижение.Количество;
//			
//			Себестоимость = ПолучитьСебестоимость(СтрокаДвижение.Номенклатура);
//			Если Себестоимость <> Неопределено Тогда
//				Движение.Сумма = Движение.КоличествоДт * Себестоимость;
//			КонецЕсли;
//		Иначе	
//			СтрокаЦФО = ТабЦФО.Найти(СтрокаДвижение.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
//			ЦФО = Неопределено;
//			Если СтрокаЦФО <> Неопределено Тогда
//				ЦФО = СтрокаЦФО.ЦФО;
//			КонецЕсли;	
//			//Движение.СчетДт = Счет44_3;
//			Движение.СчетДт = ТабНастройкиПроводок[0].Счет;
//			Если НЕ ЗначениеЗаполнено(СтрокаДвижение.СтруктурнаяЕдиница)
//				ИЛИ МассивСклады.Найти(СтрокаДвижение.СтруктурнаяЕдиница) <> Неопределено Тогда
//				Движение.СубконтоДт.ТорговыеТочки = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоДт.ТорговыеТочки = СтрокаДвижение.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоДт.СтатьиДоходовРасходов = ТабНастройкиПроводок[0].СтатьяДоходовРасходов;
//			Движение.СубконтоДт.ЦФО = ?(ЗначениеЗаполнено(ЦФО), ЦФО, ТабНастройкиПроводок[0].ЦФО);
//			
//			Движение.СчетКт = Счет41_1;
//			Если НЕ ЗначениеЗаполнено(СтрокаДвижение.СтруктурнаяЕдиница) Тогда
//				Движение.СубконтоКт.МестаХранения = ТабНастройкиПроводок[0].СтруктурнаяЕдиница;
//			Иначе
//				Движение.СубконтоКт.МестаХранения = СтрокаДвижение.СтруктурнаяЕдиница;
//			КонецЕсли;
//			Движение.СубконтоКт.Товары = СтрокаДвижение.Номенклатура;
//			Движение.СубконтоКт.СтатьиТовародвижения = ТабНастройкиПроводок[0].СтатьяДвиженияТоваров;
//			
//			Движение.КоличествоКт = СтрокаДвижение.Количество * (-1);
//			
//			Себестоимость = ПолучитьСебестоимость(СтрокаДвижение.Номенклатура);
//			Если Себестоимость <> Неопределено Тогда
//				Движение.Сумма = Движение.КоличествоКт * Себестоимость;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;	
//	
//КонецПроцедуры	

//Процедура ПроводкиПоКомплектамЗаМесяц_()
//	
//	ТабКомплекты = Новый ТаблицаЗначений();
//	ТабКомплекты.Колонки.Добавить("Организация");
//	ТабКомплекты.Колонки.Добавить("Комплект");
//	ТабКомплекты.Колонки.Добавить("Количество");
//	
//	ТабСоставляющие = Новый ТаблицаЗначений();
//	ТабСоставляющие.Колонки.Добавить("Организация");
//	ТабСоставляющие.Колонки.Добавить("Составляющая");
//	ТабСоставляющие.Колонки.Добавить("Комплект");
//	ТабСоставляющие.Колонки.Добавить("Количество");
//	ДатаОбработки = НачалоМесяца(Дата);
//	Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
//		Запрос = Новый Запрос();
//		Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаОбработки), ВидГраницы.Включая));
//		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОбработки), ВидГраницы.Включая));
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
//		               |	СУММА(ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот) КАК Количество,
//		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура.ЭтоКомплект КАК ЭтоКомплект,
//		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Регистратор.Организация КАК Организация
//		               |ИЗ
//		               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, Регистратор, ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Комплектация)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
//		               |ГДЕ
//		               |	НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
//		               |				(ВЫБРАТЬ
//		               |					Номенклатура.Ссылка
//		               |				ИЗ
//		               |					Справочник.Номенклатура КАК Номенклатура
//		               |				ГДЕ
//		               |					Номенклатура.СлужебныйТовар = ИСТИНА)
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
//		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура.ЭтоКомплект,
//		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Регистратор.Организация
//		               |
//		               |УПОРЯДОЧИТЬ ПО
//		               |	ЭтоКомплект УБЫВ
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ
//		               |	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК Товар,
//		               |	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК Составляющая
//		               |ИЗ
//		               |	РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаКон, ) КАК СоставКомплектаСрезПоследних
//		               |ГДЕ
//		               |	СоставКомплектаСрезПоследних.Количество <> 0";
//					   
//		Результаты = Запрос.ВыполнитьПакет();
//		Выборка = Результаты[0].Выбрать();
//		ТабСостав = Результаты[1].Выгрузить();
//					   
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.ЭтоКомплект Тогда
//				СтрокаДоб = ТабКомплекты.Добавить();
//				СтрокаДоб.Организация = Выборка.Организация;
//				СтрокаДоб.Комплект = Выборка.Номенклатура;
//				СтрокаДоб.Количество = Выборка.Количество * (-1);
//			Иначе
//				СтрокаКомплект = ТабСостав.Найти(Выборка.Номенклатура, "Составляющая");
//				Если СтрокаКомплект <> Неопределено Тогда
//					СтрокаТаб = ТабКомплекты.Найти(СтрокаКомплект.Товар, "Комплект");
//					Если СтрокаТаб = Неопределено Тогда
//						Если ТабКомплекты.Количество() > 0 Тогда
//							СтрокаДоб = ТабСоставляющие.Добавить();
//							СтрокаДоб.Организация = Выборка.Организация;
//							СтрокаДоб.Составляющая = Выборка.Номенклатура;
//							СтрокаДоб.Комплект = ТабКомплекты[0].Комплект;
//							СтрокаДоб.Количество = Выборка.Количество;
//						КонецЕсли;
//					Иначе
//						СтрокаДоб = ТабСоставляющие.Добавить();
//						СтрокаДоб.Организация = Выборка.Организация;
//						СтрокаДоб.Составляющая = Выборка.Номенклатура;
//						СтрокаДоб.Комплект = СтрокаТаб.Комплект;
//						СтрокаДоб.Количество = Выборка.Количество;
//					КонецЕсли;
//				Иначе
//					Если ТабКомплекты.Количество() > 0 Тогда
//						СтрокаДоб = ТабСоставляющие.Добавить();
//						СтрокаДоб.Организация = Выборка.Организация;
//						СтрокаДоб.Составляющая = Выборка.Номенклатура;
//						СтрокаДоб.Комплект = ТабКомплекты[0].Комплект;
//						СтрокаДоб.Количество = Выборка.Количество;
//					КонецЕсли;
//				КонецЕсли;	
//			КонецЕсли;	
//		КонецЦикла;	
//					   
//		ДатаОбработки = ДатаОбработки + 86400;
//	КонецЦикла;	
//	
//	ТабКомплекты.Свернуть("Комплект, Организация", "Количество");
//	ТабСоставляющие.Свернуть("Составляющая, Комплект, Организация", "Количество");
//	
//	Запрос.УстановитьПараметр("Товары", ТабСоставляющие.ВыгрузитьКолонку("Составляющая"));
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	СебестоимостьТоваровСрезПоследних.Номенклатура,
//	               |	СебестоимостьТоваровСрезПоследних.Себестоимость
//	               |ИЗ
//	               |	РегистрСведений.СебестоимостьТоваров.СрезПоследних(&ДатаКон, ) КАК СебестоимостьТоваровСрезПоследних
//	               |ГДЕ
//	               |	СебестоимостьТоваровСрезПоследних.Номенклатура.ЭтоКомплект = ИСТИНА
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК Комплект,
//	               |	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК Составляющая,
//	               |	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 1) КАК Цена
//	               |ИЗ
//	               |	РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаКон, ) КАК СоставКомплектаСрезПоследних
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаКон, ) КАК ЦеныПоставщиковСрезПоследних
//	               |		ПО СоставКомплектаСрезПоследних.Составляющая.Владелец = ЦеныПоставщиковСрезПоследних.Номенклатура
//	               |			И СоставКомплектаСрезПоследних.Составляющая = ЦеныПоставщиковСрезПоследних.Характеристика";
//				   
//	Результаты = Запрос.ВыполнитьПакет();
//	ТабСебестоимость = Результаты[0].Выгрузить();
//	ТабЦены = Результаты[1].Выгрузить();
//	
//	Счет41_1 = ПланыСчетов.Финансовый.Товары;
//	
//	Для Каждого СтрокаКомплект Из ТабКомплекты Цикл
//		СтрокиСоставляющие = ТабСоставляющие.НайтиСтроки(Новый Структура("Комплект, Организация", СтрокаКомплект.Комплект, СтрокаКомплект.Организация));
//		ТабБаза = Новый ТаблицаЗначений();
//		ТабБаза.Колонки.Добавить("Составляющая");
//		ТабБаза.Колонки.Добавить("СуммаБаза", Новый ОписаниеТипов("Число"));
//		ТабБаза.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
//		ТабБаза.Колонки.Добавить("КолвоКомплект", Новый ОписаниеТипов("Число"));
//		ТабБаза.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
//		Для Каждого СтрокаСоставляющая Из СтрокиСоставляющие Цикл
//			СтрокаДоб = ТабБаза.Добавить();
//			СтрокаДоб.Составляющая = СтрокаСоставляющая.Составляющая;
//			СтрокаДоб.Количество = СтрокаСоставляющая.Количество;
//			СтрокиЦена = ТабЦены.НайтиСтроки(Новый Структура("Комплект, Составляющая", СтрокаКомплект.Комплект, СтрокаСоставляющая.Составляющая));
//			Если СтрокиЦена.Количество() = 0 Тогда
//				СтрокаДоб.СуммаБаза = СтрокаСоставляющая.Количество * 1;
//			Иначе	
//				СтрокаДоб.СуммаБаза =СтрокаСоставляющая.Количество * СтрокиЦена[0].Цена;
//			КонецЕсли;	
//		КонецЦикла;
//		СтрокаСебест = ТабСебестоимость.Найти(СтрокаКомплект.Комплект, "Номенклатура");
//		СуммаКРаспределению = ?(СтрокаСебест <> Неопределено, СтрокаСебест.Себестоимость * СтрокаКомплект.Количество, 0);
//		КолвоКРаспределению = СтрокаКомплект.Количество;
//		Если СуммаКРаспределению <> 0 Тогда
//			Суммы = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,ТабБаза.ВыгрузитьКолонку("СуммаБаза"));
//			Если Суммы <> Неопределено Тогда
//				ТабБаза.ЗагрузитьКолонку(Суммы, "Сумма");
//			КонецЕсли;	
//		КонецЕсли;
//		Если КолвоКРаспределению <> 0 Тогда
//			Колво = ОбщегоНазначения.РаспределитьПропорционально(КолвоКРаспределению, ТабБаза.ВыгрузитьКолонку("СуммаБаза"), 3);
//			Если Колво <> Неопределено Тогда
//				ТабБаза.ЗагрузитьКолонку(Колво, "КолвоКомплект");
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Для Каждого СтрокаБазы Из ТабБаза Цикл
//			Движение = Движения.Финансовый.Добавить();
//			Движение.Период = КонецМесяца(Дата);
//			Движение.Организация = СтрокаКомплект.Организация;
//			Движение.СчетДт = Счет41_1;
//			Движение.СубконтоДт.Товары = СтрокаБазы.Составляющая;
//			Движение.КоличествоДт = СтрокаБазы.Количество;
//			
//			Движение.СчетКт = Счет41_1;
//			Движение.СубконтоКт.Товары = СтрокаКомплект.Комплект;
//			Движение.КоличествоКт = СтрокаБазы.КолвоКомплект;
//			
//			Движение.Сумма = СтрокаБазы.Сумма;
//			Движение.Содержание = "Комплекты";
//		КонецЦикла;	
//	КонецЦикла;	
//	
//КонецПроцедуры
#КонецОбласти

Процедура ПроводкиПоКомплектамЗаМесяц()
	
	ТабКомплекты = Новый ТаблицаЗначений();
	ТабКомплекты.Колонки.Добавить("Организация");
	ТабКомплекты.Колонки.Добавить("Комплект");
	ТабКомплекты.Колонки.Добавить("Количество");
	
	ТабСоставляющие = Новый ТаблицаЗначений();
	ТабСоставляющие.Колонки.Добавить("Организация");
	ТабСоставляющие.Колонки.Добавить("Составляющая");
	ТабСоставляющие.Колонки.Добавить("Комплект");
	ТабСоставляющие.Колонки.Добавить("Количество");
	ДатаОбработки = НачалоМесяца(Дата);
	Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаОбработки), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаОбработки), ВидГраницы.Включая));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
		               |	СУММА(ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот) КАК Количество,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура.ЭтоКомплект КАК ЭтоКомплект,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Регистратор.Организация КАК Организация
		               |ИЗ
		               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(&ДатаНач, &ДатаКон, Регистратор, ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Комплектация)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
		               |ГДЕ
		               |	НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
		               |				(ВЫБРАТЬ
		               |					Номенклатура.Ссылка
		               |				ИЗ
		               |					Справочник.Номенклатура КАК Номенклатура
		               |				ГДЕ
		               |					Номенклатура.СлужебныйТовар = ИСТИНА)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура.ЭтоКомплект,
		               |	ДвиженияТоваровПоЛистамУчетаОбороты.Регистратор.Организация
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Организация,
		               |	ЭтоКомплект УБЫВ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК Комплект,
		               |	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК Составляющая,
		               |	СоставКомплектаСрезПоследних.Количество
		               |ИЗ
		               |	РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаКон, ) КАК СоставКомплектаСрезПоследних
		               |ГДЕ
		               |	СоставКомплектаСрезПоследних.Количество <> 0";
					   
		Результаты = Запрос.ВыполнитьПакет();
		Выборка = Результаты[0].Выбрать();
		ТабСостав = Результаты[1].Выгрузить();
		
		ТабПоНорме = Новый ТаблицаЗначений();
		ТабПоНорме.Колонки.Добавить("Комплект");
		ТабПоНорме.Колонки.Добавить("КомплектКоличество");
		ТабПоНорме.Колонки.Добавить("Номенклатура");
		ТабПоНорме.Колонки.Добавить("Количество");
		
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ЭтоКомплект") Цикл
				Если Выборка.ЭтоКомплект Тогда
					Пока Выборка.Следующий() Цикл
						СтрокаДоб = ТабКомплекты.Добавить();
						СтрокаДоб.Организация = Выборка.Организация;
						СтрокаДоб.Комплект = Выборка.Номенклатура;
						СтрокаДоб.Количество = Выборка.Количество * (-1);
						СтрокиНормы = ТабСостав.НайтиСтроки(Новый Структура("Комплект", Выборка.Номенклатура));
						Для Каждого СтрокаНорма Из СтрокиНормы Цикл
							СтрокаДоб = ТабПоНорме.Добавить();
							СтрокаДоб.Комплект = Выборка.Номенклатура;
							СтрокаДоб.КомплектКоличество = Выборка.Количество;
							СтрокаДоб.Номенклатура = СтрокаНорма.Составляющая;
							СтрокаДоб.Количество = СтрокаНорма.Количество * Выборка.Количество;
						КонецЦикла;	
					КонецЦикла;
				Иначе
					Пока Выборка.Следующий() Цикл
						КолвоРаскидать = Выборка.Количество;
						СтрокиНормы = ТабПоНорме.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
						Для Каждого СтрокаНорма Из СтрокиНормы Цикл
							Если СтрокаНорма.Количество <= 0 Тогда
								Продолжить;
							КонецЕсли;
							МинКолво = Мин(КолвоРаскидать, СтрокаНорма.Количество);
							СтрокаДоб = ТабСоставляющие.Добавить();
							СтрокаДоб.Организация = Выборка.Организация;
							СтрокаДоб.Составляющая = Выборка.Номенклатура;
							СтрокаДоб.Комплект = СтрокаНорма.Комплект;
							СтрокаДоб.Количество = МинКолво;
							КолвоРаскидать = КолвоРаскидать - МинКолво;
						КонецЦикла;
						
						//сомнительный кусок, но ничего не поделаешь
						Если КолвоРаскидать > 0 Тогда
							Если СтрокиНормы.Количество() > 0 Тогда
								СтрокаДоб = ТабСоставляющие.Добавить();
								СтрокаДоб.Организация = Выборка.Организация;
								СтрокаДоб.Составляющая = Выборка.Номенклатура;
								СтрокаДоб.Комплект = СтрокиНормы[0].Комплект;
								СтрокаДоб.Количество = КолвоРаскидать;
							ИначеЕсли ТабКомплекты.Количество() > 0 Тогда
								СтрокаДоб = ТабСоставляющие.Добавить();
								СтрокаДоб.Организация = Выборка.Организация;
								СтрокаДоб.Составляющая = Выборка.Номенклатура;
								СтрокаДоб.Комплект = ТабКомплекты[0].Комплект;
								СтрокаДоб.Количество = КолвоРаскидать;
							Иначе
								СтрокаДоб = ТабСоставляющие.Добавить();
								СтрокаДоб.Организация = Выборка.Организация;
								СтрокаДоб.Составляющая = Выборка.Номенклатура;
								СтрокаДоб.Комплект = Неопределено;
								СтрокаДоб.Количество = КолвоРаскидать;
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;		
			
			
		//	Если Выборка.ЭтоКомплект Тогда
		//		СтрокаДоб = ТабКомплекты.Добавить();
		//		СтрокаДоб.Организация = Выборка.Организация;
		//		СтрокаДоб.Комплект = Выборка.Номенклатура;
		//		СтрокаДоб.Количество = Выборка.Количество * (-1);
		//	Иначе
		//		СтрокаКомплект = ТабСостав.Найти(Выборка.Номенклатура, "Составляющая");
		//		Если СтрокаКомплект <> Неопределено Тогда
		//			СтрокаТаб = ТабКомплекты.Найти(СтрокаКомплект.Товар, "Комплект");
		//			Если СтрокаТаб = Неопределено Тогда
		//				Если ТабКомплекты.Количество() > 0 Тогда
		//					СтрокаДоб = ТабСоставляющие.Добавить();
		//					СтрокаДоб.Организация = Выборка.Организация;
		//					СтрокаДоб.Составляющая = Выборка.Номенклатура;
		//					СтрокаДоб.Комплект = ТабКомплекты[0].Комплект;
		//					СтрокаДоб.Количество = Выборка.Количество;
		//				КонецЕсли;
		//			Иначе
		//				СтрокаДоб = ТабСоставляющие.Добавить();
		//				СтрокаДоб.Организация = Выборка.Организация;
		//				СтрокаДоб.Составляющая = Выборка.Номенклатура;
		//				СтрокаДоб.Комплект = СтрокаТаб.Комплект;
		//				СтрокаДоб.Количество = Выборка.Количество;
		//			КонецЕсли;
		//		Иначе
		//			Если ТабКомплекты.Количество() > 0 Тогда
		//				СтрокаДоб = ТабСоставляющие.Добавить();
		//				СтрокаДоб.Организация = Выборка.Организация;
		//				СтрокаДоб.Составляющая = Выборка.Номенклатура;
		//				СтрокаДоб.Комплект = ТабКомплекты[0].Комплект;
		//				СтрокаДоб.Количество = Выборка.Количество;
		//			КонецЕсли;
		//		КонецЕсли;	
		//	КонецЕсли;	
		//КонецЦикла;	
					   
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	ТабКомплекты.Свернуть("Комплект, Организация", "Количество");
	ТабСоставляющие.Свернуть("Составляющая, Комплект, Организация", "Количество");
	
	Запрос.УстановитьПараметр("Товары", ТабСоставляющие.ВыгрузитьКолонку("Составляющая"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	СебестоимостьТоваровСрезПоследних.Номенклатура,
	               |	СебестоимостьТоваровСрезПоследних.Себестоимость
	               |ИЗ
	               |	РегистрСведений.СебестоимостьТоваров.СрезПоследних(&ДатаКон, ) КАК СебестоимостьТоваровСрезПоследних
	               |ГДЕ
	               |	СебестоимостьТоваровСрезПоследних.Номенклатура.ЭтоКомплект = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоставКомплектаСрезПоследних.Характеристика.Владелец КАК Комплект,
	               |	СоставКомплектаСрезПоследних.Составляющая.Владелец КАК Составляющая,
	               |	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 1) КАК Цена
	               |ИЗ
	               |	РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаКон, ) КАК СоставКомплектаСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаКон, ) КАК ЦеныПоставщиковСрезПоследних
	               |		ПО СоставКомплектаСрезПоследних.Составляющая.Владелец = ЦеныПоставщиковСрезПоследних.Номенклатура
	               |			И СоставКомплектаСрезПоследних.Составляющая = ЦеныПоставщиковСрезПоследних.Характеристика";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабСебестоимость = Результаты[0].Выгрузить();
	ТабЦены = Результаты[1].Выгрузить();
	
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	
	Для Каждого СтрокаКомплект Из ТабКомплекты Цикл
		СтрокиСоставляющие = ТабСоставляющие.НайтиСтроки(Новый Структура("Комплект, Организация", СтрокаКомплект.Комплект, СтрокаКомплект.Организация));
		ТабБаза = Новый ТаблицаЗначений();
		ТабБаза.Колонки.Добавить("Составляющая");
		ТабБаза.Колонки.Добавить("СуммаБаза", Новый ОписаниеТипов("Число"));
		ТабБаза.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ТабБаза.Колонки.Добавить("КолвоКомплект", Новый ОписаниеТипов("Число"));
		ТабБаза.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаСоставляющая Из СтрокиСоставляющие Цикл
			СтрокаДоб = ТабБаза.Добавить();
			СтрокаДоб.Составляющая = СтрокаСоставляющая.Составляющая;
			СтрокаДоб.Количество = СтрокаСоставляющая.Количество;
			СтрокиЦена = ТабЦены.НайтиСтроки(Новый Структура("Комплект, Составляющая", СтрокаКомплект.Комплект, СтрокаСоставляющая.Составляющая));
			Если СтрокиЦена.Количество() = 0 Тогда
				СтрокаДоб.СуммаБаза = СтрокаСоставляющая.Количество * 1;
			Иначе	
				СтрокаДоб.СуммаБаза =СтрокаСоставляющая.Количество * СтрокиЦена[0].Цена;
			КонецЕсли;	
		КонецЦикла;
		СтрокаСебест = ТабСебестоимость.Найти(СтрокаКомплект.Комплект, "Номенклатура");
		СуммаКРаспределению = ?(СтрокаСебест <> Неопределено, СтрокаСебест.Себестоимость * СтрокаКомплект.Количество, 0);
		КолвоКРаспределению = СтрокаКомплект.Количество;
		Если СуммаКРаспределению <> 0 Тогда
			Суммы = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,ТабБаза.ВыгрузитьКолонку("СуммаБаза"));
			Если Суммы <> Неопределено Тогда
				ТабБаза.ЗагрузитьКолонку(Суммы, "Сумма");
			КонецЕсли;	
		КонецЕсли;
		Если КолвоКРаспределению <> 0 Тогда
			Колво = ОбщегоНазначения.РаспределитьПропорционально(КолвоКРаспределению, ТабБаза.ВыгрузитьКолонку("СуммаБаза"), 3);
			Если Колво <> Неопределено Тогда
				ТабБаза.ЗагрузитьКолонку(Колво, "КолвоКомплект");
			КонецЕсли;	
		КонецЕсли;
		
		Для Каждого СтрокаБазы Из ТабБаза Цикл
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = КонецМесяца(Дата);
			Движение.Организация = СтрокаКомплект.Организация;
			Движение.СчетДт = Счет41_1;
			Движение.СубконтоДт.Товары = СтрокаБазы.Составляющая;
			Движение.КоличествоДт = СтрокаБазы.Количество;
			
			Движение.СчетКт = Счет41_1;
			Движение.СубконтоКт.Товары = СтрокаКомплект.Комплект;
			Движение.КоличествоКт = СтрокаБазы.КолвоКомплект;
			
			Движение.Сумма = СтрокаБазы.Сумма;
			Движение.Содержание = "Комплекты";
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

//+++АК Susk (Суслин К.В.) 2018.08.07 
#Область КомментКод_ПроводкиПоСуммамЛистовУчета_ 
//Процедура ПроводкиПоСуммамЛистовУчета_()
//	
//	МесяцОбработки = КонецМесяца(Дата);
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СчетДт,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СчетКт,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.ВидСубконтоДт1,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СубконтоДт1,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.ВидСубконтоДт2,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СубконтоДт2,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.ВидСубконтоДт3,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СубконтоДт3,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.ВидСубконтоКт1,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СубконтоКт1,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.ВидСубконтоКт2,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СубконтоКт2,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.ВидСубконтоКт3,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СубконтоКт3,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.КоличествоДт,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.КоличествоКт,
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.СторонаРасчета
//	               |ИЗ
//	               |	РегистрСведений.ПроводкиЛистовУчетаЗаМесяцПоЛУ КАК ПроводкиЛистовУчетаЗаМесяцПоЛУ
//	               |ГДЕ
//	               |	ПроводкиЛистовУчетаЗаМесяцПоЛУ.Период = &ДатаНач";
//				   
//	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(МесяцОбработки));
//	
//	СчетТовары = ПланыСчетов.Финансовый.Товары;
//	СчетМатералыДляВыпуска = ПланыСчетов.Финансовый.МатералыДляВыпуска;
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		Сумма = 0;
//		Если Выборка.СторонаРасчета = "КТ"
//			И Выборка.СчетКт = СчетТовары Тогда
//			Себестоимость = ПолучитьСебестоимость(Выборка.СубконтоКт2);
//			Если Себестоимость <> Неопределено Тогда
//				Сумма = Выборка.КоличествоКт * Себестоимость;
//			КонецЕсли;
//		ИначеЕсли Выборка.СторонаРасчета = "КТ"
//			И Выборка.СчетКт = СчетМатералыДляВыпуска Тогда
//			Себестоимость = ПолучитьСебестоимость(Выборка.СубконтоКт1);
//			Если Себестоимость <> Неопределено Тогда
//				Сумма = Выборка.КоличествоКт * Себестоимость;
//			КонецЕсли;
//		ИначеЕсли Выборка.СторонаРасчета = "ДТ"
//			И Выборка.СчетДт = СчетТовары Тогда
//			Себестоимость = ПолучитьСебестоимость(Выборка.СубконтоДт2);
//			Если Себестоимость <> Неопределено Тогда
//				Сумма = Выборка.КоличествоДт * Себестоимость;
//			КонецЕсли;
//		ИначеЕсли Выборка.СторонаРасчета = "ДТ"
//			И Выборка.СчетДт = СчетМатералыДляВыпуска Тогда
//			Себестоимость = ПолучитьСебестоимость(Выборка.СубконтоДт1);
//			Если Себестоимость <> Неопределено Тогда
//				Сумма = Выборка.КоличествоДт * Себестоимость;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Если Сумма = 0 Тогда
//			Продолжить;
//		КонецЕсли;	
//		
//		Движение = Движения.Финансовый.Добавить();
//		Движение.Период = КонецМесяца(МесяцОбработки);
//		//Движение.Организация = Выборка.Организация;
//		//Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
//		//Движение.ВалютаДт = Выборка.ВалютаДт;
//		//Движение.ВалютаКт = Выборка.ВалютаКт;
//		
//		Движение.СчетДт = Выборка.СчетДт;
//		Движение.СубконтоДт[Выборка.ВидСубконтоДт1] = Выборка.СубконтоДт1;
//		Движение.СубконтоДт[Выборка.ВидСубконтоДт2] = Выборка.СубконтоДт2;
//		Движение.СубконтоДт[Выборка.ВидСубконтоДт3] = Выборка.СубконтоДт3;
//		
//		Движение.СчетКт = Выборка.СчетКт;
//		Движение.СубконтоКт[Выборка.ВидСубконтоКт1] = Выборка.СубконтоКт1;
//		Движение.СубконтоКт[Выборка.ВидСубконтоКт2] = Выборка.СубконтоКт2;
//		Движение.СубконтоКт[Выборка.ВидСубконтоКт3] = Выборка.СубконтоКт3;
//		
//		Движение.Сумма = Сумма;	
//		
//		//Движение.Содержание = Выборка.Содержание;
//		//Движение.НомерЖурнала = Выборка.НомерЖурнала;
//	КонецЦикла;	
//	
//КонецПроцедуры	
#КонецОбласти

Процедура ПроводкиПоСуммамЛистовУчета()
	
	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.УстановитьПараметр("Дата", КонецДня(Дата));
	ЗапросНастроек.Текст =
	"ВЫБРАТЬ
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	|ИЗ
	|	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&Дата, ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Продажа), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Списание), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Подарки), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Дегустация), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоКачеству), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоСроку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Бой), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_ВозвратПокупателя))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
	ТабНастройкиПроводок = ЗапросНастроек.Выполнить().Выгрузить();
	
	ВидПроданного = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Продажа;
	ВидСписанного = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Списание;
	ВидПодарки = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Подарки;
	ВидДегустация = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Дегустация;
	ВидПоКачеству = Перечисления.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоКачеству;
	ВидПоСроку = Перечисления.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоСроку;
	ВидБой = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Бой;
	ВидИнвентаризация = Перечисления.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл;
	ВидВозвратПокупателя = Перечисления.ВидыОперацийВУчете.ЛистыУчета_ВозвратПокупателя;
	
	СчетЗатратыТочекДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
	СчетЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетУпаковка = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Номенклатура", РасчетОднойНоменклатуры);
	//+++АК SaMi 2018.06.08 ИП-00018553 
	Запрос.УстановитьПараметр("ОрганизацияОсновная", ОрганизацияОсновная);	
	//---АК SaMi  2018.06.08 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница,
	               |	ЕСТЬNULL(СоставКомплектаСрезПоследних.ТоварКомплекта, ДвиженияТоваровПоЛистамУчета.Номенклатура) КАК Номенклатура,
	               |	ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара,
	               |	ДвиженияТоваровПоЛистамУчета.Регистратор,
	               |	ЕСТЬNULL(СоставКомплектаСрезПоследних.Количество * ДвиженияТоваровПоЛистамУчета.Количество, ДвиженияТоваровПоЛистамУчета.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ДвиженияТоваровПоЛистамУчета
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаКон, ) КАК СоставКомплектаСрезПоследних
	               |		ПО ДвиженияТоваровПоЛистамУчета.Номенклатура = СоставКомплектаСрезПоследних.Комплект
	               |			И (СоставКомплектаСрезПоследних.Количество > 0)
	               |			И (ДвиженияТоваровПоЛистамУчета.Номенклатура.ЭтоКомплект)
	               |ГДЕ
	               |	ДвиженияТоваровПоЛистамУчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ДвиженияТоваровПоЛистамУчета.Активность = ИСТИНА
	               |	И (ДвиженияТоваровПоЛистамУчета.Номенклатура = &Номенклатура
	               |			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |	И ДвиженияТоваровПоЛистамУчета.Номенклатура.НеУчитыватьВЗакрытииМесяца = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница,
	               |	ДвиженияТоваровПоЛистамУчета.Номенклатура,
	               |	ЕСТЬNULL(ЛистУчета.ЦФО, ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО) КАК ЦФО,
	               |	ДвиженияТоваровПоЛистамУчета.Номенклатура.ТипТовара КАК ТипТовара,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Продажа)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ВозвратОтПокупателя)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Продажа,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Списание)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Списание,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.СписаниеПоКачеству)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СписаниеПоКачеству,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Дегустация)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Дегустация,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Акция)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Акция,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Разница)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Разница,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Бой)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество * -1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Бой,
	               |	СУММА(ВЫБОР
	               |			КОГДА ДвиженияТоваровПоЛистамУчета.ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.ВозвратОтПокупателя)
	               |				ТОГДА ДвиженияТоваровПоЛистамУчета.Количество
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВозвратПокупателя,
	               |	ЕСТЬNULL(ЛистУчета.Организация, &ОрганизацияОсновная) КАК Организация,
	               |	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета
	               |ИЗ
	               |	ВТ_ДвиженияТоваровПоЛистамУчета КАК ДвиженияТоваровПоЛистамУчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&ДатаКон, ) КАК СчетаУчетаНоменклатурыСрезПоследних
	               |		ПО ДвиженияТоваровПоЛистамУчета.Номенклатура = СчетаУчетаНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаКон, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |		ПО ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета КАК ЛистУчета
	               |		ПО ДвиженияТоваровПоЛистамУчета.Регистратор = ЛистУчета.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияТоваровПоЛистамУчета.СтруктурнаяЕдиница,
	               |	ДвиженияТоваровПоЛистамУчета.Номенклатура,
	               |	ЕСТЬNULL(ЛистУчета.ЦФО, ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО),
	               |	ДвиженияТоваровПоЛистамУчета.Номенклатура.ТипТовара,
	               |	ЕСТЬNULL(ЛистУчета.Организация, &ОрганизацияОсновная),
	               |	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета";
				   
	ТабДанныеДвижения = Запрос.Выполнить().Выгрузить();
	ТабДанныеДвижения.Колонки.Добавить("Продажа_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("Списание_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("СписаниеПоКачеству_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("Дегустация_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("Акция_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("Разница_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("Бой_Сумма", Новый ОписаниеТипов("Число"));
	ТабДанныеДвижения.Колонки.Добавить("ВозвратПокупателя_Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТовар Из ТабДанныеДвижения Цикл
		Себестоимость = ПолучитьСебестоимость(СтрокаТовар.Номенклатура);
		Если Себестоимость <> Неопределено Тогда
			СтрокаТовар.Продажа_Сумма = Окр(СтрокаТовар.Продажа * Себестоимость, 2);
			СтрокаТовар.Списание_Сумма = Окр(СтрокаТовар.Списание * Себестоимость, 2);
			СтрокаТовар.СписаниеПоКачеству_Сумма = Окр(СтрокаТовар.СписаниеПоКачеству * Себестоимость, 2);
			СтрокаТовар.Дегустация_Сумма = Окр(СтрокаТовар.Дегустация * Себестоимость, 2);
			СтрокаТовар.Акция_Сумма = Окр(СтрокаТовар.Акция * Себестоимость, 2);
			СтрокаТовар.Разница_Сумма = Окр(СтрокаТовар.Разница * Себестоимость, 2);
			СтрокаТовар.Бой_Сумма = Окр(СтрокаТовар.Бой * Себестоимость, 2);
			СтрокаТовар.ВозвратПокупателя_Сумма = Окр(СтрокаТовар.ВозвратПокупателя * Себестоимость, 2);
		КонецЕсли;	
	КонецЦикла;
	
	//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275	 
	//ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(, Дата);	
	МассивНом = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТабДанныеДвижения.ВыгрузитьКолонку("Номенклатура"));
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, КонецДня(Дата));
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ХозТовар,ВидНоменклатуры");
	//---АК Susk (Суслин К.В.) 
	
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275	 
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	
	//+++АК SaMi 2018.08.20 
	//КолвоСтрок = ТабДанныеДвижения.Количество();
	//Для н = 1 По КолвоСтрок Цикл
	//	//+++АК SaMi 2018.06.09 ИП-00018553 
	//	//СтрокаСчетУчета = ТабСчетаУчета.Найти(ТабДанныеДвижения[КолвоСтрок - н].Номенклатура, "Номенклатура");
	//	//Если СтрокаСчетУчета <> Неопределено
	//	//	И ЗначениеЗаполнено(ТабДанныеДвижения[КолвоСтрок - н].СчетУчета) Тогда
	//	//---АК SaMi  2018.06.09 
	//	Если  ЗначениеЗаполнено(ТабДанныеДвижения[КолвоСтрок - н].СчетУчета) Тогда		
	//		Если МассивСчетаИсключитьИзПроведения.Найти(ТабДанныеДвижения[КолвоСтрок - н].СчетУчета) <> Неопределено Тогда
	//			ТабДанныеДвижения.Удалить(КолвоСтрок - н);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из ТабДанныеДвижения Цикл
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(Строка.Номенклатура);					
		
		//+++АК Susk (Суслин К.В.) 2018.09.21 19275
		//Если СтруктураСчетов.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы И РеквХозТовары[Строка.Номенклатура].ХозТовар Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если ИсключитьНоменклатуруЭтоРекламныйМатериал(Строка.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
			СтрокиКУдалению.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
				
		Если МассивСчетаИсключитьИзПроведения.Найти(СтруктураСчетов.СчетУчета) <> Неопределено Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;			
	КонецЦикла;  
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ТабДанныеДвижения.Удалить(Строка);
	КонецЦикла;  
	//---АК SaMi  2018.08.20 
	
	ТабТовары = ТабДанныеДвижения.Скопировать();
	ТабТовары.Свернуть("Номенклатура, ТипТовара, Организация, СчетУчета", "Продажа, Списание, СписаниеПоКачеству, Дегустация, Акция, Разница, Бой, ВозвратПокупателя, Продажа_Сумма, Списание_Сумма, СписаниеПоКачеству_Сумма, Дегустация_Сумма, Акция_Сумма, Разница_Сумма, Бой_Сумма, ВозвратПокупателя_Сумма");
	
	Счет44Вирт = ПланыСчетов.Финансовый.ЗатратыВиртуальный;
	Счет41Вирт = ПланыСчетов.Финансовый.ТоварыВиртуальный;
	ТипТовараУпаковка = Перечисления.ТипыТоваров.Упаковка;

	ТаблицаОбщихСуммПроводок = Новый ТаблицаЗначений();
	ТаблицаОбщихСуммПроводок.Колонки.Добавить("Организация");
	ТаблицаОбщихСуммПроводок.Колонки.Добавить("Сумма");
	
	Для Каждого СтрокаТовар Из ТабТовары Цикл
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 									= КонецМесяца(Дата);
		Проводка.Организация 								= СтрокаТовар.Организация;
		Проводка.Содержание									= "Себестоимость товаров по ЛУ";
		Проводка.НомерЖурнала								= "ТТ";
		
		СтрокаОбщихСумм = ТаблицаОбщихСуммПроводок.Найти(СтрокаТовар.Организация, "Организация");
		Если СтрокаОбщихСумм = Неопределено Тогда
			СтрокаОбщихСумм = ТаблицаОбщихСуммПроводок.Добавить();
			СтрокаОбщихСумм.Организация = СтрокаТовар.Организация;
			СтрокаОбщихСумм.Сумма = 0;
		КонецЕсли;	
		
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаТовар.Номенклатура);					
		СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
		
		//+++АК Susk (Суслин К.В.) 2018.09.03 opt
		Если СчетУчетаНоменклатуры <> ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
			Если СчетУчетаНоменклатуры <> СчетТовары И СчетУчетаНоменклатуры <> СчетУпаковка Тогда
				СчетУчетаНоменклатуры = СчетТовары;
			КонецЕсли;
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 		
		
		КоличествоПоТовару = СтрокаТовар.Продажа + СтрокаТовар.Списание + СтрокаТовар.СписаниеПоКачеству + СтрокаТовар.Дегустация
																	+ СтрокаТовар.Акция - СтрокаТовар.Разница + СтрокаТовар.Бой + СтрокаТовар.ВозвратПокупателя;

		//+++АК SaMi 2018.10.01 ИП-00019675 																	
		СуммаПоТовару = СтрокаТовар.Продажа_Сумма + СтрокаТовар.Списание_Сумма + СтрокаТовар.СписаниеПоКачеству_Сумма + СтрокаТовар.Дегустация_Сумма
																	+ СтрокаТовар.Акция_Сумма - СтрокаТовар.Разница_Сумма + СтрокаТовар.Бой_Сумма + СтрокаТовар.ВозвратПокупателя_Сумма;
																	
		РазворачиваемПроводку = СуммаПоТовару < 0 ИЛИ СуммаПоТовару = 0 И КоличествоПоТовару < 0;																	
		
		Если НЕ РазворачиваемПроводку Тогда
			Проводка.СчетДт = Счет44Вирт;																		
			
			Проводка.СчетКт										= СчетУчетаНоменклатуры;
			
			Если СчетУчетаНоменклатуры = СчетТовары Тогда
				Проводка.СубконтоКт.Товары						= СтрокаТовар.Номенклатура;			
			Иначе
				Проводка.СубконтоКт.Материалы							= СтрокаТовар.Номенклатура;
			КонецЕсли;	
		
			Проводка.КоличествоКт = КоличествоПоТовару;
			Проводка.Сумма = СуммаПоТовару;																								
		Иначе
			Проводка.СчетКт = Счет44Вирт;																		
			
			Проводка.СчетДт										= СчетУчетаНоменклатуры;
			
			Если СчетУчетаНоменклатуры = СчетТовары Тогда
				Проводка.СубконтоДт.Товары						= СтрокаТовар.Номенклатура;			
			Иначе
				Проводка.СубконтоДт.Материалы							= СтрокаТовар.Номенклатура;
			КонецЕсли;	
		
			Проводка.КоличествоДт = - КоличествоПоТовару;
			Проводка.Сумма = - СуммаПоТовару;																								
		КонецЕсли; 																	
		
		СтрокаОбщихСумм.Сумма = СтрокаОбщихСумм.Сумма + СуммаПоТовару;			
	КонецЦикла;
	//---АК SaMi  2018.10.01 
	
	ТабПоСтатьям = ТабДанныеДвижения.Скопировать();
	
	ТабПоСтатьям.Свернуть("СтруктурнаяЕдиница, ЦФО, Организация", "Продажа_Сумма, Списание_Сумма, СписаниеПоКачеству_Сумма, Дегустация_Сумма, Акция_Сумма, Разница_Сумма, Бой_Сумма, ВозвратПокупателя_Сумма");
	
	Для Каждого СтрокаТовар Из ТабПоСтатьям Цикл
		Если СтрокаТовар.Продажа_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПроданного, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость проданных товаров";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;	
				
				Проводка.Сумма = СтрокаТовар.Продажа_Сумма;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.Дегустация_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидДегустация, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость товаров, списанных для дегустации";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				
				Проводка.Сумма = СтрокаТовар.Дегустация_Сумма;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.Списание_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПоСроку, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость товаров, списанных по сроку";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				
				Проводка.Сумма = СтрокаТовар.Списание_Сумма;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.СписаниеПоКачеству_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПоКачеству, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость товаров, списанных по качеству";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				
				Проводка.Сумма = СтрокаТовар.СписаниеПоКачеству_Сумма;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.Бой_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидБой, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость бой";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				
				Проводка.Сумма = СтрокаТовар.Бой_Сумма;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.Акция_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПодарки, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость подарков покупателям";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				
				Проводка.Сумма = СтрокаТовар.Акция_Сумма;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.Разница_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидИнвентаризация, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость прочее";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки 					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				
				Проводка.Сумма = СтрокаТовар.Разница_Сумма * (-1);
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТовар.ВозвратПокупателя_Сумма <> 0 Тогда
			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидВозвратПокупателя, "ВидОперации");
			Если СтрокаКешНастройка <> Неопределено Тогда
				
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период 									= КонецМесяца(Дата);
				Проводка.Организация								= СтрокаТовар.Организация;
				Проводка.Содержание									= "Себестоимость возврата от покупателя";
				Проводка.НомерЖурнала								= "ТТ";
				
				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
				Проводка.СубконтоДт.ТорговыеТочки					= СтрокаТовар.СтруктурнаяЕдиница;
				Проводка.СубконтоДт.СтатьиДоходовРасходов			= СтрокаКешНастройка.СтатьяДоходовРасходов;
				Проводка.СубконтоДт.ЦФО								= СтрокаТовар.ЦФО;
				
				Проводка.СчетКт = Счет41Вирт;
				Проводка.Сумма = СтрокаТовар.ВозвратПокупателя_Сумма;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаОбщая Из ТаблицаОбщихСуммПроводок Цикл
		Если СтрокаОбщая.Сумма <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Организация								= СтрокаОбщая.Организация;
			Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт	= Счет41Вирт;
			
			Проводка.СчетКт = Счет44Вирт;	
			
			Проводка.Сумма = СтрокаОбщая.Сумма;
		КонецЕсли;	
	КонецЦикла;	
	
	//+++АК SaMi 2018.06.07 ИП-00018553
	СформироватьДвиженияПоСписаниюТоваровВБухгалтерскомУчетеПоЛистамУчета(ТабДанныеДвижения, ТабНастройкиПроводок);
	//---АК SaMi  2018.06.07 
	
КонецПроцедуры	

Процедура СписатьПогрешностиРасчетаСебестоимости()
	
	Если Дата > '20170101' Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФинансовыйОстатки.Субконто2,
		               |	ФинансовыйОстатки.СуммаОстаток,
		               |	ФинансовыйОстатки.Счет,
		               |	ФинансовыйОстатки.Организация,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Организация.ИНН = ""7734410589""
		               |			ТОГДА &ТТ_ТилсиОбщий
		               |		ИНАЧЕ &ТТВсе
		               |	КОНЕЦ КАК ТТ
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), , ) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ФинансовыйОстатки.КоличествоОстаток = 0
		               |	И ФинансовыйОстатки.СуммаОстаток <> 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ФинансовыйОстатки.Субконто1,
		               |	ФинансовыйОстатки.СуммаОстаток,
		               |	ФинансовыйОстатки.Счет,
		               |	ФинансовыйОстатки.Организация,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Организация.ИНН = ""7734410589""
		               |			ТОГДА &ТТ_ТилсиОбщий
		               |		ИНАЧЕ &ТТВсе
		               |	КОНЕЦ КАК ТТ
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), , ) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ФинансовыйОстатки.КоличествоОстаток = 0
		               |	И ФинансовыйОстатки.СуммаОстаток <> 0";
		
		ТТВсе = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
		ТТ_ТилсиОбщий = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000001237");
		
		Запрос.УстановитьПараметр("ТТВсе", ТТВсе);		
		Запрос.УстановитьПараметр("ТТ_ТилсиОбщий", ТТ_ТилсиОбщий);
		
		//+++АК Susk (Суслин К.В.) 2018.05.30 Согласовано с Вереней - вешаем на ЦФО УК
		ЦФОУК = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("96c9e156-7d68-11e1-86c2-000c29e4e68a")); //Управление качества
		//---АК Susk (Суслин К.В.) 		 
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
		СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20110");
		Выборка = Результаты[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Организация								= Выборка.Организация;
			Проводка.Содержание									= "Погрешность расчета себестоимости";
			//Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт										= ЗатратыТоварныеДляРаспределения;
			Проводка.СубконтоДт.ТорговыеТочки 					= Выборка.ТТ;
			Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтатьяДР;
			
			//+++АК Susk (Суслин К.В.) 2018.05.30 			 
			//Проводка.СубконтоДт.ЦФО								= Выборка.ТТ;
			Проводка.СубконтоДт.ЦФО								= ЦФОУК;
			//---АК Susk (Суслин К.В.) 
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.СубконтоКт.Товары = Выборка.Субконто2;
			
			Проводка.Сумма = Выборка.СуммаОстаток;
			
			//+++АК SaMi 2018.09.11 ИП-00019675.01
			Если Проводка.Сумма < 0 Тогда
				ИнвертироватьПроводку(Проводка);				
			КонецЕсли; 
			//---АК SaMi  2018.09.11 
		КонецЦикла;
		
		Выборка = Результаты[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Организация								= Выборка.Организация;
			Проводка.Содержание									= "Погрешность расчета себестоимости";
			//Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт										= ЗатратыТоварныеДляРаспределения;
			Проводка.СубконтоДт.ТорговыеТочки 					= Выборка.ТТ;
			Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтатьяДР;
			
			//+++АК Susk (Суслин К.В.) 2018.05.30 			 
			//Проводка.СубконтоДт.ЦФО								= Выборка.ТТ;
			Проводка.СубконтоДт.ЦФО								= ЦФОУК;
			//---АК Susk (Суслин К.В.) 
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.СубконтоКт.Материалы = Выборка.Субконто1;
			
			Проводка.Сумма = Выборка.СуммаОстаток;
			
			//+++АК SaMi 2018.09.11 ИП-00019675.01
			Если Проводка.Сумма < 0 Тогда
				ИнвертироватьПроводку(Проводка);				
			КонецЕсли; 
			//---АК SaMi  2018.09.11 
		КонецЦикла;
		//+++АК sils 21.11.2018 ИП-00020124
		Если Дата >= '20181101' Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФинансовыйОстатки.Организация,
			               |	ФинансовыйОстатки.Субконто1 КАК Номенклатура,
			               |	ВЫБОР
			               |		КОГДА ФинансовыйОстатки.Организация.ИНН = ""7734410589""
			               |			ТОГДА &ТТ_ТилсиОбщий
			               |		ИНАЧЕ &ТТВсе
			               |	КОНЕЦ КАК ТТ,
			               |	СУММА(ФинансовыйОстатки.КоличествоОстаток) КАК Количество,
			               |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК Сумма
			               |ИЗ
			               |	РегистрБухгалтерии.Финансовый.Остатки(
			               |			&ДатаОстатки,
			               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска),
			               |			,
			               |			Субконто1.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
			               |				И НЕ Субконто1.ДробныйОстаток) КАК ФинансовыйОстатки
			               |ГДЕ
			               |	ФинансовыйОстатки.КоличествоОстаток > 0
			               |	И ФинансовыйОстатки.КоличествоОстаток <> (ВЫРАЗИТЬ(ФинансовыйОстатки.КоличествоОстаток - 0.5 КАК ЧИСЛО(15, 0)))
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ФинансовыйОстатки.Субконто1,
			               |	ВЫБОР
			               |		КОГДА ФинансовыйОстатки.Организация.ИНН = ""7734410589""
			               |			ТОГДА &ТТ_ТилсиОбщий
			               |		ИНАЧЕ &ТТВсе
			               |	КОНЕЦ,
			               |	ФинансовыйОстатки.Организация
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА (ВЫРАЗИТЬ(ТоварыНаСкладахОстатки.Склад.Организация КАК Справочник.Организации)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			               |			ТОГДА ТоварыНаСкладахОстатки.Склад.Организация
			               |		ИНАЧЕ ЦФОСтруктурныхЕдиницСрезПоследних.Организация
			               |	КОНЕЦ КАК Организация,
			               |	ТоварыНаСкладахОстатки.Номенклатура,
			               |	ТоварыНаСкладахОстатки.Склад,
			               |	ТоварыНаСкладахОстатки.Характеристика,
			               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
			               |	ТоварыНаСкладахОстатки.ДатаПроизводства,
			               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
			               |ИЗ
			               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
			               |			&ДатаОстатки,
			               |			Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
			               |				И НЕ Номенклатура.ДробныйОстаток) КАК ТоварыНаСкладахОстатки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаОстатки, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
			               |		ПО ТоварыНаСкладахОстатки.Склад.Владелец = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ТоварыНаСкладахОстатки.Номенклатура.Наименование,
			               |	ТоварыНаСкладахОстатки.Склад.Наименование";
			Запрос.УстановитьПараметр("Организация", Организация);
			Результаты = Запрос.ВыполнитьПакет();
			ТЗ = Результаты[1].Выгрузить();
			
			Движения.ТоварыНаСкладах.Очистить();
			Движения.ТоварыНаСкладах.Записывать = Истина;
			
			Выборка = Результаты[0].Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекКол = Выборка.Количество;
				МассивСтрок = ТЗ.Скопировать(Новый Структура("Номенклатура, Организация", Выборка.Номенклатура, Выборка.Организация));
				Если МассивСтрок.Итог("Количество") <> ТекКол Тогда
					Сообщить("По номенклатуре " + СокрЛП(Выборка.Номенклатура) + " в организации " + СокрЛП(Выборка.Организация) +
						" остаток по количеству на счете 41.2 не совпадает с остатком по регистру ""Товары на складах""!");
				    Продолжить;
				КонецЕсли;
				
				Для каждого стр из МассивСтрок Цикл
					Если стр.Количество = Окр(стр.Количество) Тогда
						Продолжить;
					КонецЕсли;
					ТекРазница = стр.Количество - Окр(стр.Количество);
					
					Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
					Движение.Период = КонецМесяца(Дата);
					Движение.Склад = стр.Склад;
					Движение.Номенклатура = стр.Номенклатура;
					Движение.Характеристика = стр.Характеристика;
					Движение.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
					Движение.ДатаПроизводства = стр.ДатаПроизводства;
					Движение.Количество = ТекРазница;
				
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период 									= КонецМесяца(Дата);
					Проводка.Организация								= Выборка.Организация;
					Проводка.Содержание									= "Округление рулонов упаковки";
					
					Проводка.СчетДт										= ЗатратыТоварныеДляРаспределения;
					Проводка.СубконтоДт.ТорговыеТочки 					= Выборка.ТТ;
					Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтатьяДР;
					Проводка.СубконтоДт.ЦФО								= ЦФОУК;
					
					Проводка.СчетКт = ПланыСчетов.Финансовый.МатералыДляВыпуска;
					Проводка.СубконтоКт.Материалы = Выборка.Номенклатура;
					Проводка.СубконтоКт.Склады = стр.Склад;
					
					Проводка.КоличествоКт = ТекРазница;
					Проводка.Сумма = Окр(ТекРазница * Выборка.Сумма / ТекКол, 2, 1);
					
					Если Проводка.Сумма < 0 Тогда
						ИнвертироватьПроводку(Проводка);				
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		//---АК
	Иначе
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФинансовыйОстатки.Субконто2,
		               |	ФинансовыйОстатки.СуммаОстаток,
		               |	ФинансовыйОстатки.Счет
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), , ) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ФинансовыйОстатки.КоличествоОстаток = 0
		               |	И ФинансовыйОстатки.СуммаОстаток <> 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ФинансовыйОстатки.Субконто1,
		               |	ФинансовыйОстатки.СуммаОстаток,
		               |	ФинансовыйОстатки.Счет
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), , ) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ФинансовыйОстатки.КоличествоОстаток = 0
		               |	И ФинансовыйОстатки.СуммаОстаток <> 0";
					   
		Результаты = Запрос.ВыполнитьПакет();
		
		ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
		ТТВсе = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
		СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20110");
		Выборка = Результаты[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Содержание									= "Погрешность расчета себестоимости";
			//Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт										= ЗатратыТоварныеДляРаспределения;
			Проводка.СубконтоДт.ТорговыеТочки 					= ТТВсе;
			Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтатьяДР;
			Проводка.СубконтоДт.ЦФО								= ТТВсе;
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.СубконтоКт.Товары = Выборка.Субконто2;
			
			Проводка.Сумма = Выборка.СуммаОстаток;
		КонецЦикла;
		
		Выборка = Результаты[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Содержание									= "Погрешность расчета себестоимости";
			//Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт										= ЗатратыТоварныеДляРаспределения;
			Проводка.СубконтоДт.ТорговыеТочки 					= ТТВсе;
			Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтатьяДР;
			Проводка.СубконтоДт.ЦФО								= ТТВсе;
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.СубконтоКт.Материалы = Выборка.Субконто1;
			
			Проводка.Сумма = Выборка.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;		   
	
	//+++АК SaMi 2018.06.08 ИП-00018553 
	СформироватьДвиженияПоСписаниюТоваровВБухгалтерскомУчете();
	//---АК SaMi  2018.06.08 
	
КонецПроцедуры	

Процедура СписатьПогрешностиРасчетаСебестоимостиМатериалов()
	
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФинансовыйОстатки.Субконто1,
		               |	ФинансовыйОстатки.СуммаОстаток,
		               |	ФинансовыйОстатки.Счет,
		               |	ФинансовыйОстатки.Организация,
		               |	ФинансовыйОстатки.Счет КАК Счет1
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(
		               |			&ДатаОстатки,
		               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Материалы))
		               |				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Инвентарь),
		               |			,
		               |			) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ФинансовыйОстатки.КоличествоОстаток = 0
		               |	И ФинансовыйОстатки.СуммаОстаток <> 0";
					   
		Результаты = Запрос.ВыполнитьПакет();
		
		ЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
		ТТВсе = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
		СтатьяДР = Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20110");
		
		//+++АК Susk (Суслин К.В.) 2018.05.30 Согласовано с Вереней - вешаем на ЦФО УК
		ЦФОУК = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор("96c9e156-7d68-11e1-86c2-000c29e4e68a")); //Управление качества
		//---АК Susk (Суслин К.В.) 
		
		Выборка = Результаты[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Организация								= Выборка.Организация;
			Проводка.Содержание									= "Погрешность расчета себестоимости";
			//Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт										= ЗатратыТоварныеДляРаспределения;
			Проводка.СубконтоДт.ТорговыеТочки 					= ТТВсе;
			Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтатьяДР;
			
			//+++АК Susk (Суслин К.В.) 2018.05.30 			 
			//Проводка.СубконтоДт.ЦФ							= ТТВсе;
			Проводка.СубконтоДт.ЦФО								= ЦФОУК;
			//---АК Susk (Суслин К.В.) 			
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.СубконтоКт.Материалы = Выборка.Субконто1;
			
			Проводка.Сумма = Выборка.СуммаОстаток;
		КонецЦикла;
		
			   
	
КонецПроцедуры	

Процедура СписатьМинусыСклада()
	
	Движения.ТоварыНаСкладах.Очистить();
	Движения.ТоварыНаСкладах.Записывать = Истина;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.Текст = "ВЫБРАТЬ
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Период,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров41,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит,
				   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит1
				   |ИЗ
				   |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаОстатки, ) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабНастройки = Результаты[0].Выгрузить();
	//ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(ТабКешОстатки.ВыгрузитьКолонку("Номенклатура"), Дата);
	ТипыТоваровУпаковка = Перечисления.ТипыТоваров.Упаковка;
	
	//минеев отключил по просьбе ворошилова, иначе ему ломает все сделанные далее инвентарки
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ТоварыНаСкладахОстатки.Склад,
	//			   |	ТоварыНаСкладахОстатки.Номенклатура,
	//			   |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара КАК ТипТовара,
	//			   |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
	//			   |ИЗ
	//			   |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатки, ) КАК ТоварыНаСкладахОстатки
	//			   |ГДЕ
	//			   |	ТоварыНаСкладахОстатки.Склад.Владелец.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	//			   |	И ТоварыНаСкладахОстатки.Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	ТоварыНаСкладахОстатки.Склад,
	//			   |	ТоварыНаСкладахОстатки.Номенклатура,
	//			   |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара
	//			   |
	//			   |ИМЕЮЩИЕ
	//			   |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) < 0
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	//			   |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	//			   |	ТоварыНаСкладахОстатки.Характеристика,
	//			   |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
	//			   |	ТоварыНаСкладахОстатки.ДатаПроизводства,
	//			   |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	//			   |ИЗ
	//			   |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатки, ) КАК ТоварыНаСкладахОстатки
	//			   |ГДЕ
	//			   |	ТоварыНаСкладахОстатки.Склад.Владелец.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	//			   |	И ТоварыНаСкладахОстатки.Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)
	//			   |	И ТоварыНаСкладахОстатки.КоличествоОстаток < 0
	//			   |
	//			   |УПОРЯДОЧИТЬ ПО
	//			   |	Склад,
	//			   |	Номенклатура,
	//			   |	КоличествоОстаток
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Период,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров41,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит,
	//			   |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит1
	//			   |ИЗ
	//			   |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаОстатки, ) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
	//			   
	//Результаты = Запрос.ВыполнитьПакет();
	//ТабКешОстатки = Результаты[1].Выгрузить();
	//ТабНастройки = Результаты[2].Выгрузить();
	//ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(ТабКешОстатки.ВыгрузитьКолонку("Номенклатура"), Дата);
	//ТипыТоваровУпаковка = Перечисления.ТипыТоваров.Упаковка;
	//Выборка = Результаты[0].Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Колво = Выборка.КоличествоОстаток * (-1);
	//	СтрокиКеш = ТабКешОстатки.НайтиСтроки(Новый Структура("Склад, Номенклатура", Выборка.Склад, Выборка.Номенклатура));
	//	Для Каждого СтрокаСТоваром Из СтрокиКеш Цикл
	//		Если Колво = 0 Тогда
	//			Прервать;
	//		КонецЕсли;
	//		МинКолво = Мин(Колво, СтрокаСТоваром.КоличествоОстаток * (-1));
	//		Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
	//		Движение.Период = КонецМесяца(Дата);
	//		Движение.Склад = СтрокаСТоваром.Склад;
	//		Движение.Номенклатура = СтрокаСТоваром.Номенклатура;
	//		Движение.Характеристика = СтрокаСТоваром.Характеристика;
	//		Движение.ЕдиницаИзмерения = СтрокаСТоваром.ЕдиницаИзмерения;
	//		Движение.ДатаПроизводства = СтрокаСТоваром.ДатаПроизводства;
	//		Движение.Количество = МинКолво;
	//		СтрокаСТоваром.КоличествоОстаток = СтрокаСТоваром.КоличествоОстаток + МинКолво;
	//		Колво = Колво - МинКолво;
	//		
	//		Если Выборка.ТипТовара = ТипыТоваровУпаковка Тогда
	//			СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_ИзлишкиУпаковки, "ВидОперации");
	//		Иначе	
	//			СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.Инвентаризация_Излишки, "ВидОперации");
	//		КонецЕсли;
	//		
	//		ПроводкаНедостачи = Движения.Финансовый.Добавить();
	//		
	//		ПроводкаНедостачи.Период 		= КонецМесяца(Дата);
	//		ПроводкаНедостачи.НомерЖурнала	= "ТД";
	//		
	//		// Дт
	//		ПроводкаНедостачи.СчетДт 							= СтруктураНастроек.Счет;
	//		ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
	//		ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
	//		ПроводкаНедостачи.СубконтоДт.ЦФО					= СтруктураНастроек.ЦФО;
	//		
	//		// Кт
	//		Если Выборка.ТипТовара = ТипыТоваровУпаковка Тогда
	//			
	//			ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
	//			ПроводкаНедостачи.КоличествоКт 						= -МинКолво;
	//			ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаСТоваром.Номенклатура;
	//			//ПроводкаНедостачи.СубконтоКт.Склады					= ТекСтрокаТовары.Склад;
	//			ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
	//			ПроводкаНедостачи.Содержание	= "Недостача упаковки";
	//			
	//		Иначе
	//			
	//			ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
	//			ПроводкаНедостачи.КоличествоКт 						= -МинКолво;
	//			//ПроводкаНедостачи.СубконтоКт.МестаХранения  		= ТекСтрокаТовары.СтруктурнаяЕдиница;
	//			ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаСТоваром.Номенклатура;
	//			ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
	//			ПроводкаНедостачи.Содержание	= "Недостача товара";
	//			
	//		КонецЕсли;
	//		
	//		СтрСебестоимость = ТабСебестоимость.Найти(СтрокаСТоваром.Номенклатура, "Номенклатура");
	//		ПроводкаНедостачи.Сумма = ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
	//		ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
	//	КонецЦикла;	
	//КонецЦикла;
	
	//теперь спишем еще рекламные материалы
	СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.ЗакрытиеМесяца_СписаниеРекламныхМатериалов, "ВидОперации");
	//АК БЕЛН 17.03.17+

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		|ГДЕ
		|	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО = &ЦФО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаУчетаНоменклатурыСрезПоследних.Номенклатура,
		|	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&Дата, ) КАК СчетаУчетаНоменклатурыСрезПоследних";

	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЦФО", Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_88"));

	Результаты = Запрос.ВыполнитьПакет();

	ВыборкаДетальныеЗаписи = Результаты[0].Выгрузить();
	ТабСчетаКеш = Результаты[1].Выгрузить();
    МасТТ=ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("СтруктурнаяЕдиница");

	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатериалы = ПланыСчетов.Финансовый.МатералыДляВыпуска;	
	
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	
	//+++АК Susk (Суслин К.В.) 2018.10.04 ИП-00019621^02	 
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	
	//АК БЕЛН 17.03.17-
	Если СтруктураНастроек <> Неопределено Тогда
		
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		//АК БЕЛН 17.03.17+
		Запрос.УстановитьПараметр("МасТТ", МасТТ);
		//АК БЕЛН 17.03.17-
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток,
		               |	СУММА(ФинансовыйОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ФинансовыйОстатки.Субконто2
		               |		ИНАЧЕ ФинансовыйОстатки.Субконто1
		               |	КОНЕЦ КАК Номенклатура,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Номенклатура).ТипТовара
		               |		ИНАЧЕ ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Номенклатура).ТипТовара
		               |	КОНЕЦ КАК ТипТовара
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеМатериалы), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ГСМ), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Спецодежда)), , ) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |				ТОГДА ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Номенклатура).РекламныйМатериал = ИСТИНА
		               |			ИНАЧЕ ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Номенклатура).РекламныйМатериал = ИСТИНА
		               |		КОНЕЦ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ФинансовыйОстатки.Субконто2
		               |		ИНАЧЕ ФинансовыйОстатки.Субконто1
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Номенклатура).ТипТовара
		               |		ИНАЧЕ ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Номенклатура).ТипТовара
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Склад,
		               |	ТоварыНаСкладахОстатки.Склад.Владелец КАК ТТ,
		               |	ТоварыНаСкладахОстатки.Номенклатура,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара КАК ТипТовара,
		               |	ТоварыНаСкладахОстатки.Характеристика,
		               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		               |	ТоварыНаСкладахОстатки.ДатаПроизводства,
		               |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатки, ) КАК ТоварыНаСкладахОстатки
		               |ГДЕ
		               |	ТоварыНаСкладахОстатки.Склад.Владелец.НомерТочки > 0
		               |	И ТоварыНаСкладахОстатки.Склад.Владелец.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		               |	И ТоварыНаСкладахОстатки.Номенклатура.РекламныйМатериал = ИСТИНА
		               |	И НЕ ТоварыНаСкладахОстатки.Склад.Владелец В (&МасТТ)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТоварыНаСкладахОстатки.Склад,
		               |	ТоварыНаСкладахОстатки.Склад.Владелец,
		               |	ТоварыНаСкладахОстатки.Номенклатура,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара,
		               |	ТоварыНаСкладахОстатки.Характеристика,
		               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		               |	ТоварыНаСкладахОстатки.ДатаПроизводства
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкаСписанияХозТоваровСрезПоследних.Номенклатура,
		               |	НастройкаСписанияХозТоваровСрезПоследних.СчетЗатрат,
		               |	НастройкаСписанияХозТоваровСрезПоследних.СтатьяТовародвижения,
		               |	НастройкаСписанияХозТоваровСрезПоследних.СтатьиДоходовИРасходов,
		               |	НастройкаСписанияХозТоваровСрезПоследних.ЦФО
		               |ИЗ
		               |	РегистрСведений.НастройкаСписанияХозТоваров.СрезПоследних(&ДатаОстатки, ) КАК НастройкаСписанияХозТоваровСрезПоследних
		               |ГДЕ
		               |	НастройкаСписанияХозТоваровСрезПоследних.СчетЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Номенклатура.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.НеУчитыватьВЗакрытииМесяца = ИСТИНА";
					   
		Результаты = Запрос.ВыполнитьПакет();
		ТабКешОстатки = Результаты[0].Выгрузить();
		ТабОстаткиТочек = Результаты[1].Выгрузить();
		ТабНастройкиТовары = Результаты[2].Выгрузить();
		ТабНеПроводитьПоБух = Результаты[3].Выгрузить();
		
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		 
		МассивНом = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТабОстаткиТочек.ВыгрузитьКолонку("Номенклатура"));
		СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, КонецМесяца(Дата));
		ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
		//---АК Susk (Суслин К.В.) 
		
		Для Каждого СтрокаОстаток Из ТабОстаткиТочек Цикл
			Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
			Движение.Период = КонецМесяца(Дата);
			Движение.Склад = СтрокаОстаток.Склад;
			Движение.Номенклатура = СтрокаОстаток.Номенклатура;
			Движение.Характеристика = СтрокаОстаток.Характеристика;
			Движение.ЕдиницаИзмерения = СтрокаОстаток.ЕдиницаИзмерения;
			Движение.ДатаПроизводства = СтрокаОстаток.ДатаПроизводства;
			Движение.Количество = СтрокаОстаток.КоличествоОстаток;
		КонецЦикла;
		
		ТабОстаткиТочек.Свернуть("ТТ, Номенклатура, ТипТовара", "КоличествоОстаток");
		Для Каждого СтрокаОбщийОстаток Из ТабОстаткиТочек Цикл
			СтрокаНеПроводить = ТабНеПроводитьПоБух.Найти(СтрокаОбщийОстаток.Номенклатура, "Ссылка");
			Если СтрокаНеПроводить <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			 
			//СтрокаКешСчет = ТабСчетаКеш.Найти(СтрокаОбщийОстаток.Номенклатура, "Номенклатура");
			//Если СтрокаКешСчет <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаКешСчет.СчетУчета) Тогда
			//	Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаКешСчет.СчетУчета) <> Неопределено Тогда
			//		Продолжить;
			//	КонецЕсли;	
			//КонецЕсли;
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаОбщийОстаток.Номенклатура);					
			СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
			
			Если МассивСчетаИсключитьИзПроведения.Найти(СчетУчетаНоменклатуры) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИсключитьНоменклатуруЭтоРекламныйМатериал(СтрокаОбщийОстаток.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
				Продолжить;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			НастройкаПоТовару = ТабНастройкиТовары.Найти(СтрокаОбщийОстаток.Номенклатура, "Номенклатура");
			ПроводкаНедостачи = Движения.Финансовый.Добавить();
			
			ПроводкаНедостачи.Период 		= КонецМесяца(Дата);
			ПроводкаНедостачи.Организация = ОрганизацияОсновная;
			ПроводкаНедостачи.НомерЖурнала	= "ТД";
			
			// Дт
			ПроводкаНедостачи.СчетДт 							= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СчетЗатрат, СтруктураНастроек.Счет);
			ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтрокаОбщийОстаток.ТТ;
			ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьиДоходовИРасходов, СтруктураНастроек.СтатьяДоходовРасходов);
			ПроводкаНедостачи.СубконтоДт.ЦФО					= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.ЦФО, СтруктураНастроек.ЦФО);
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			
			 
			//Если СтрокаКешСчет <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаКешСчет.СчетУчета) Тогда
			//	Если СтрокаКешСчет.СчетУчета = СчетТовары Тогда
			//		ПроводкаНедостачи.СчетКт 							= СтрокаКешСчет.СчетУчета;
			//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
			//		ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
			//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
			//	ИначеЕсли СтрокаКешСчет.СчетУчета = СчетМатериалы Тогда
			//		ПроводкаНедостачи.СчетКт 							= СтрокаКешСчет.СчетУчета;
			//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
			//		ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;
			//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
			//	Иначе
			//		ПроводкаНедостачи.СчетКт 							= СтрокаКешСчет.СчетУчета;
			//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
			//		ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;
			//	КонецЕсли;	
			//Иначе
			//
			//	Если СтрокаОбщийОстаток.ТипТовара = ТипыТоваровУпаковка Тогда
			//		
			//		ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
			//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
			//		ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОбщийОстаток.Номенклатура;
			//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
			//		
			//	Иначе
			//		
			//		ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
			//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
			//		ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
			//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
			//		
			//	КонецЕсли;
			//КонецЕсли;
			
			ПроводкаНедостачи.СчетКт = СчетУчетаНоменклатуры;
			ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
			
			Если СчетУчетаНоменклатуры = СчетМатериалы Тогда							
				ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;
				ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);				
			ИначеЕсли СчетУчетаНоменклатуры = СчетТовары Тогда
			//Иначе				
			//	ПроводкаНедостачи.СчетКт = СчетТовары;
				ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
				ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);				
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда							
				ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;				
			Иначе
				ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
				ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
				ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);			
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			СтрСебестоимость = ТабКешОстатки.Найти(СтрокаОбщийОстаток.Номенклатура, "Номенклатура");
			Если СтрСебестоимость <> Неопределено Тогда
				Если СтрСебестоимость.КоличествоОстаток = СтрокаОбщийОстаток.КоличествоОстаток
					ИЛИ СтрСебестоимость.КоличествоОстаток = 0 Тогда
					ПроводкаНедостачи.Сумма = СтрСебестоимость.СуммаОстаток;
				Иначе
					ПроводкаНедостачи.Сумма = СтрСебестоимость.СуммаОстаток / СтрСебестоимость.КоличествоОстаток * СтрокаОбщийОстаток.КоличествоОстаток;
				КонецЕсли;	
			КонецЕсли;	
			ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
			
			//+++АК SaMi 2018.09.11 ИП-00019675.01
			Если ПроводкаНедостачи.КоличествоКт < 0 Тогда
				ИнвертироватьПроводку(ПроводкаНедостачи);				
			КонецЕсли; 
			//---АК SaMi  2018.09.11 
			
		КонецЦикла;	
	КонецЕсли;
	
	//теперь спишем еще хоз товары
	СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.ЗакрытиеМесяца_СписаниеХозТоваров, "ВидОперации");
	
	//+++АК Susk (Суслин К.В.) 2018.09.05 ИП-00019621
	СтруктураНастроекПо10_6 = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.ЗакрытиеМесяца_СписаниеХозТоваров10_6, "ВидОперации");	
	//МассивСчетаИсключитьИзПроведения.Удалить(МассивСчетаИсключитьИзПроведения.Найти(ПланыСчетов.Финансовый.ПрочиеМатериалы));
	//---АК Susk (Суслин К.В.) 	 
	
	Если СтруктураНастроек <> Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток,
		               |	СУММА(ФинансовыйОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ФинансовыйОстатки.Субконто2
		               |		ИНАЧЕ ФинансовыйОстатки.Субконто1
		               |	КОНЕЦ КАК Номенклатура,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Номенклатура).ТипТовара
		               |		ИНАЧЕ ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Номенклатура).ТипТовара
		               |	КОНЕЦ КАК ТипТовара
		               |ИЗ
		               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПрочиеМатериалы), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ГСМ), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Спецодежда)), , ) КАК ФинансовыйОстатки
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |				ТОГДА ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Номенклатура).ХозТовар = ИСТИНА
		               |			ИНАЧЕ ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Номенклатура).ХозТовар = ИСТИНА
		               |		КОНЕЦ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ФинансовыйОстатки.Субконто2
		               |		ИНАЧЕ ФинансовыйОстатки.Субконто1
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ФинансовыйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
		               |			ТОГДА ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто2 КАК Справочник.Номенклатура).ТипТовара
		               |		ИНАЧЕ ВЫРАЗИТЬ(ФинансовыйОстатки.Субконто1 КАК Справочник.Номенклатура).ТипТовара
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Склад,
		               |	ТоварыНаСкладахОстатки.Склад.Владелец КАК ТТ,
		               |	ТоварыНаСкладахОстатки.Номенклатура,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара КАК ТипТовара,
		               |	ТоварыНаСкладахОстатки.Характеристика,
		               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		               |	ТоварыНаСкладахОстатки.ДатаПроизводства,
		               |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатки, ) КАК ТоварыНаСкладахОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаОстатки, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
		               |		ПО ТоварыНаСкладахОстатки.Склад.Владелец = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
		               |ГДЕ
		               |	ТоварыНаСкладахОстатки.Склад.Владелец.НомерТочки > 0
		               |	И ТоварыНаСкладахОстатки.Склад.Владелец.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
		               |	И ТоварыНаСкладахОстатки.Номенклатура.ХозТовар = ИСТИНА
		               |	И ТоварыНаСкладахОстатки.Номенклатура.РекламныйМатериал = ЛОЖЬ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТоварыНаСкладахОстатки.Склад,
		               |	ТоварыНаСкладахОстатки.Склад.Владелец,
		               |	ТоварыНаСкладахОстатки.Номенклатура,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара,
		               |	ТоварыНаСкладахОстатки.Характеристика,
		               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
		               |	ТоварыНаСкладахОстатки.ДатаПроизводства,
		               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкаСписанияХозТоваровСрезПоследних.Номенклатура,
		               |	НастройкаСписанияХозТоваровСрезПоследних.СчетЗатрат,
		               |	НастройкаСписанияХозТоваровСрезПоследних.СтатьяТовародвижения,
		               |	НастройкаСписанияХозТоваровСрезПоследних.СтатьиДоходовИРасходов,
		               |	НастройкаСписанияХозТоваровСрезПоследних.ЦФО
		               |ИЗ
		               |	РегистрСведений.НастройкаСписанияХозТоваров.СрезПоследних(&ДатаОстатки, ) КАК НастройкаСписанияХозТоваровСрезПоследних
		               |ГДЕ
		               |	НастройкаСписанияХозТоваровСрезПоследних.СчетЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Номенклатура.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.НеУчитыватьВЗакрытииМесяца = ИСТИНА";
					   
		Результаты = Запрос.ВыполнитьПакет();
		ТабКешОстатки = Результаты[0].Выгрузить();
		ТабОстаткиТочек = Результаты[1].Выгрузить();
		ТабНастройкиТовары = Результаты[2].Выгрузить();
		ТабНеПроводитьПоБух = Результаты[3].Выгрузить();
		
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		 
		МассивНом = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТабОстаткиТочек.ВыгрузитьКолонку("Номенклатура"));
		СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, КонецМесяца(Дата));
		ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
		//---АК Susk (Суслин К.В.) 
		
		Для Каждого СтрокаОстаток Из ТабОстаткиТочек Цикл
			Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
			Движение.Период = КонецМесяца(Дата);
			Движение.Склад = СтрокаОстаток.Склад;
			Движение.Номенклатура = СтрокаОстаток.Номенклатура;
			Движение.Характеристика = СтрокаОстаток.Характеристика;
			Движение.ЕдиницаИзмерения = СтрокаОстаток.ЕдиницаИзмерения;
			Движение.ДатаПроизводства = СтрокаОстаток.ДатаПроизводства;
			Движение.Количество = СтрокаОстаток.КоличествоОстаток;
		КонецЦикла;
		
		//susk
		//ТабОстаткиТочек.Свернуть("ТТ, Номенклатура, ТипТовара", "КоличествоОстаток");		
		ТабОстаткиТочек.Свернуть("ТТ, ЦФО, Номенклатура, ТипТовара", "КоличествоОстаток");
		
		СтатьяРасходыНаКартыЛояльности = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("7dea23bc-8bd6-11e2-aa80-005056a00106")); //Расходы на изготовление Карт лояльности
		НомКарты = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("e3859c08-50e1-4bf6-8322-518d787f9037")); //Карты ВкусВилл
		//
		
		Для Каждого СтрокаОбщийОстаток Из ТабОстаткиТочек Цикл
			СтрокаНеПроводить = ТабНеПроводитьПоБух.Найти(СтрокаОбщийОстаток.Номенклатура, "Ссылка");
			Если СтрокаНеПроводить <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			
			 
			//СтрокаКешСчет = ТабСчетаКеш.Найти(СтрокаОбщийОстаток.Номенклатура, "Номенклатура");
			//Если СтрокаКешСчет <> Неопределено
			//	И ЗначениеЗаполнено(СтрокаКешСчет.СчетУчета) Тогда
			//	Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаКешСчет.СчетУчета) <> Неопределено Тогда
			//		Продолжить;
			//	КонецЕсли;	
			//КонецЕсли;
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаОбщийОстаток.Номенклатура);					
			СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
			
			Если МассивСчетаИсключитьИзПроведения.Найти(СчетУчетаНоменклатуры) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИсключитьНоменклатуруЭтоРекламныйМатериал(СтрокаОбщийОстаток.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
				Продолжить;
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
						
			ПроводкаНедостачи = Движения.Финансовый.Добавить();
				
			ПроводкаНедостачи.Период 		= КонецМесяца(Дата);
			ПроводкаНедостачи.Организация = ОрганизацияОсновная;
			ПроводкаНедостачи.НомерЖурнала	= "ТД";				
			
			Если СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда			
				                                                       
				// Дт
				ПроводкаНедостачи.СчетДт 							= ?(СтруктураНастроекПо10_6 <> Неопределено, СтруктураНастроекПо10_6.Счет, ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения);
				ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтрокаОбщийОстаток.ТТ;
				
				//ничего умнее придумать не удалось. Увы
				Если СтрокаОбщийОстаток.Номенклатура = НомКарты Тогда
					ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтатьяРасходыНаКартыЛояльности; //Расходы на изготовление Карт лояльности
				Иначе			
					ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= ?(СтруктураНастроекПо10_6 <> Неопределено, СтруктураНастроекПо10_6.СтатьяДоходовРасходов, Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("9ff0076c-3de0-11e1-81d9-000c29e4e68a"))); //Хозтовары для ТТ и Магазинов				
				КонецЕсли;
				
				ПроводкаНедостачи.СубконтоДт.ЦФО					= СтрокаОбщийОстаток.ЦФО;
				
			Иначе
				
				//перенес сюда, раньше было безусловно				
				НастройкаПоТовару = ТабНастройкиТовары.Найти(СтрокаОбщийОстаток.Номенклатура, "Номенклатура");
				
				// Дт
				ПроводкаНедостачи.СчетДт 							= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СчетЗатрат, СтруктураНастроек.Счет);
				ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтрокаОбщийОстаток.ТТ;
				ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьиДоходовИРасходов, СтруктураНастроек.СтатьяДоходовРасходов);
				ПроводкаНедостачи.СубконтоДт.ЦФО					= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.ЦФО, СтруктураНастроек.ЦФО);
				
				//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275			 
				
				//Если СтрокаКешСчет <> Неопределено
				//	И ЗначениеЗаполнено(СтрокаКешСчет.СчетУчета) Тогда
				//	Если СтрокаКешСчет.СчетУчета = СчетТовары Тогда
				//		ПроводкаНедостачи.СчетКт 							= СтрокаКешСчет.СчетУчета;
				//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				//		ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
				//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
				//	ИначеЕсли СтрокаКешСчет.СчетУчета = СчетМатериалы Тогда
				//		ПроводкаНедостачи.СчетКт 							= СтрокаКешСчет.СчетУчета;
				//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				//		ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;
				//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
				//	Иначе
				//		ПроводкаНедостачи.СчетКт 							= СтрокаКешСчет.СчетУчета;
				//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				//		ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;
				//	КонецЕсли;	
				//Иначе
				//
				//	Если СтрокаОбщийОстаток.ТипТовара = ТипыТоваровУпаковка Тогда
				//		
				//		ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
				//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				//		ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОбщийОстаток.Номенклатура;
				//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
				//		
				//	Иначе
				//		
				//		ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
				//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				//		ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
				//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);
				//		
				//	КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
				
			ПроводкаНедостачи.СчетКт = СчетУчетаНоменклатуры;
			ПроводкаНедостачи.КоличествоКт = СтрокаОбщийОстаток.КоличествоОстаток;
				
			Если СчетУчетаНоменклатуры = СчетМатериалы Тогда
				ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;
				ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);				
			ИначеЕсли СчетУчетаНоменклатуры = СчетТовары Тогда
				ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
				ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);				
			ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
				ПроводкаНедостачи.СубконтоКт.Материалы					= СтрокаОбщийОстаток.Номенклатура;				
			Иначе
				ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
				ПроводкаНедостачи.КоличествоКт 						= СтрокаОбщийОстаток.КоличествоОстаток;
				ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОбщийОстаток.Номенклатура;
				ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= ?(НастройкаПоТовару <> Неопределено, НастройкаПоТовару.СтатьяТовародвижения, СтруктураНастроек.СтатьяДвиженияТоваров);			
			КонецЕсли;
			//---АК Susk (Суслин К.В.) 
				
			СтрСебестоимость = ТабКешОстатки.Найти(СтрокаОбщийОстаток.Номенклатура, "Номенклатура");
			Если СтрСебестоимость <> Неопределено Тогда
				Если СтрСебестоимость.КоличествоОстаток = СтрокаОбщийОстаток.КоличествоОстаток
					ИЛИ СтрСебестоимость.КоличествоОстаток = 0 Тогда
					ПроводкаНедостачи.Сумма = СтрСебестоимость.СуммаОстаток;
				Иначе
					ПроводкаНедостачи.Сумма = СтрСебестоимость.СуммаОстаток / СтрСебестоимость.КоличествоОстаток * СтрокаОбщийОстаток.КоличествоОстаток;
				КонецЕсли;	
			КонецЕсли;
			
			ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";			
			
			//+++АК SaMi 2018.09.11 ИП-00019675.01
			Если ПроводкаНедостачи.КоличествоКт < 0 Тогда
				ИнвертироватьПроводку(ПроводкаНедостачи);				
			КонецЕсли; 
			//---АК SaMi  2018.09.11 
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура СписатьОстаткиЗакрытыхТочек()
	
	Движения.ТоварыНаСкладах.Очистить();
	Движения.ТоварыНаСкладах.Записывать = Истина;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаЗакрытия", КонецМесяца(Дата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Склад,
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Номенклатура.ТипТовара КАК ТипТовара,
	               |	ТоварыНаСкладахОстатки.Характеристика,
	               |	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
	               |	ТоварыНаСкладахОстатки.ДатаПроизводства,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	               |	ТоварыНаСкладахОстатки.Склад.Владелец КАК СтруктурнаяЕдиница,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	               |	ЦФОСтруктурныхЕдиницСрезПоследних.Организация,
	               |	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета,
	               |	ТоварыНаСкладахОстатки.Номенклатура.НеУчитыватьВЗакрытииМесяца КАК НеУчитыватьВЗакрытииМесяца
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&ДатаОстатки,
	               |			Склад.Владелец В
	               |				(ВЫБРАТЬ
	               |					СтруктурныеЕдиницы.Ссылка
	               |				ИЗ
	               |					Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |				ГДЕ
	               |					СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	               |					И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)
	               |					И СтруктурныеЕдиницы.НомерТочки <> 0
	               |					И СтруктурныеЕдиницы.ДатаЗакрытия <= &ДатаЗакрытия
	               |					И СтруктурныеЕдиницы.ДатаЗакрытия > ДАТАВРЕМЯ(1, 1, 1))) КАК ТоварыНаСкладахОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаОстатки, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	               |		ПО ТоварыНаСкладахОстатки.Склад.Владелец = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&ДатаОстатки, ) КАК СчетаУчетаНоменклатурыСрезПоследних
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = СчетаУчетаНоменклатурыСрезПоследних.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Период,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров41,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ДопРеквизит1
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаОстатки, ) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
				   
	Результаты = Запрос.ВыполнитьПакет();
	ТабОстатки = Результаты[0].Выгрузить();
	ТабНастройки = Результаты[1].Выгрузить();
	ТабСебестоимость = ОбщегоНазначенияСервер.ПолучитьСебестоимостьДляМассиваНоменклатур(ТабОстатки.ВыгрузитьКолонку("Номенклатура"), Дата);
	ТипыТоваровУпаковка = Перечисления.ТипыТоваров.Упаковка;
	СтруктураНастроек = ТабНастройки.Найти(Перечисления.ВидыОперацийВУчете.ЗакрытиеМесяца_СписаниеОстатковЗакрытыхТТ, "ВидОперации");
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетМатериалы = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275	 
	МассивНом = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТабОстатки.ВыгрузитьКолонку("Номенклатура"));
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(МассивНом, КонецМесяца(Дата));
	ЗначенияРеквизитовНом = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНом, "РекламныйМатериал,НеУчитыватьВЗакрытииМесяца,ВидНоменклатуры");
	//---АК Susk (Суслин К.В.) 
	
	МассивСчетаИсключитьИзПроведения = Новый Массив();
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ГСМ);
	//+++АК Susk (Суслин К.В.) 2018.10.01 ИП-00019621^02	 
	//МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.ПрочиеМатериалы);
	//---АК Susk (Суслин К.В.) 
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Инвентарь);
	МассивСчетаИсключитьИзПроведения.Добавить(ПланыСчетов.Финансовый.Спецодежда);
	
	Для Каждого СтрокаОстаток Из ТабОстатки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОстаток.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;	
		Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
		Движение.Период = КонецМесяца(Дата);
		Движение.Склад = СтрокаОстаток.Склад;
		Движение.Номенклатура = СтрокаОстаток.Номенклатура;
		Движение.Характеристика = СтрокаОстаток.Характеристика;
		Движение.ЕдиницаИзмерения = СтрокаОстаток.ЕдиницаИзмерения;
		Движение.ДатаПроизводства = СтрокаОстаток.ДатаПроизводства;
		Движение.Количество = СтрокаОстаток.Количество;
		
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		 
				
		//Если ЗначениеЗаполнено(СтрокаОстаток.СчетУчета) Тогда
		//	Если МассивСчетаИсключитьИзПроведения.Найти(СтрокаОстаток.СчетУчета) <> Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;	
		//КонецЕсли;
		
		СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаОстаток.Номенклатура);					
		СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
		
		Если МассивСчетаИсключитьИзПроведения.Найти(СчетУчетаНоменклатуры) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ИсключитьНоменклатуруЭтоРекламныйМатериал(СтрокаОстаток.Номенклатура, ЗначенияРеквизитовНом, СтруктураСчетов) Тогда
			Продолжить;
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
		ПроводкаНедостачи = Движения.Финансовый.Добавить();
		
		ПроводкаНедостачи.Период 		= КонецМесяца(Дата);
		ПроводкаНедостачи.Организация	= СтрокаОстаток.Организация;
		ПроводкаНедостачи.НомерЖурнала	= "ТД";
		
		// Дт
		ПроводкаНедостачи.СчетДт 							= СтруктураНастроек.Счет;
		ПроводкаНедостачи.СубконтоДт.ТорговыеТочки  		= СтрокаОстаток.СтруктурнаяЕдиница;
		ПроводкаНедостачи.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
		ПроводкаНедостачи.СубконтоДт.ЦФО					= СтрокаОстаток.ЦФО;
		
		// Кт
		
		//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275		
		 
		//Если ЗначениеЗаполнено(СтрокаОстаток.СчетУчета) Тогда
		//	ПроводкаНедостачи.СчетКт 							= СтрокаОстаток.СчетУчета;
		//	Если СтрокаОстаток.СчетУчета = СчетТовары Тогда
		//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
		//		ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОстаток.Номенклатура;
		//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
		//	ИначеЕсли СтрокаОстаток.СчетУчета = СчетМатериалы Тогда	
		//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
		//		ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОстаток.Номенклатура;
		//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
		//	Иначе	
		//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
		//		ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОстаток.Номенклатура;
		//	КонецЕсли;	
		//Иначе	
		//	Если СтрокаОстаток.ТипТовара = ТипыТоваровУпаковка Тогда
		//		
		//		ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.МатералыДляВыпуска;
		//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
		//		ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОстаток.Номенклатура;
		//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
		//		
		//	Иначе
		//		
		//		ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
		//		ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
		//		ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОстаток.Номенклатура;
		//		ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
		//		
		//	КонецЕсли;			
		//	
		//	СтрСебестоимость = ТабСебестоимость.Найти(СтрокаОстаток.Номенклатура, "Номенклатура");
		//	ПроводкаНедостачи.Сумма = ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
		//	ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
		//	ПроводкаНедостачи.Содержание	= "Списание по закрытым ТТ";
		//КонецЕсли;
		
		ПроводкаНедостачи.СчетКт 							= СчетУчетаНоменклатуры;
		ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
		
		Если СчетУчетаНоменклатуры = СчетМатериалы Тогда			
			ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОстаток.Номенклатура;
			ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
		ИначеЕсли СчетУчетаНоменклатуры = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда			
			ПроводкаНедостачи.СубконтоКт.Материалы  			= СтрокаОстаток.Номенклатура;			
		ИначеЕсли СчетУчетаНоменклатуры = СчетТовары Тогда				
			ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОстаток.Номенклатура;
			ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;	
		Иначе			
			ПроводкаНедостачи.СчетКт 							= ПланыСчетов.Финансовый.Товары;
			ПроводкаНедостачи.КоличествоКт 						= СтрокаОстаток.Количество;
			ПроводкаНедостачи.СубконтоКт.Товары					= СтрокаОстаток.Номенклатура;
			ПроводкаНедостачи.СубконтоКт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров;
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
		
		//+++АК SaMi 2018.08.20 
		СтрСебестоимость = ТабСебестоимость.Найти(СтрокаОстаток.Номенклатура, "Номенклатура");
		ПроводкаНедостачи.Сумма = ПроводкаНедостачи.КоличествоКт * СтрСебестоимость.Себестоимость;
		ПроводкаНедостачи.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
		ПроводкаНедостачи.Содержание	= "Списание по закрытым ТТ";
		//---АК SaMi  2018.08.20 
		
		//+++АК SaMi 2018.09.11 ИП-00019675.01
		Если ПроводкаНедостачи.КоличествоКт < 0 Тогда
			ИнвертироватьПроводку(ПроводкаНедостачи);				
		КонецЕсли; 
		//---АК SaMi  2018.09.11 
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПерепродатьТоварыОтВкусвиллаНаЛугДаПоле_КаждыйДень()
	
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	ОргЛуг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	КонтрВкусвилл = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810");
	КонтрЛуг = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ОргВкус", ОргВкусвилл);
	Запрос.УстановитьПараметр("ОргЛуг", ОргЛуг);
	Запрос.УстановитьПараметр("КонтрЛуг", КонтрЛуг);
	Запрос.УстановитьПараметр("КонтрВкус", КонтрВкусвилл);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_ПерепродажаТоваров)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &ОргВкус
	               |	И ДоговорыКонтрагентов.Владелец = &КонтрЛуг
	               |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &ОргЛуг
	               |	И ДоговорыКонтрагентов.Владелец = &КонтрВкус
	               |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Настройка = Результаты[0].Выбрать();
	Если НЕ Настройка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорПродажи = Неопределено;
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорПродажи = Выборка.Ссылка;
	КонецЕсли;
	
	ДоговорПокупки = Неопределено;
	Выборка = Результаты[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорПокупки = Выборка.Ссылка;
	КонецЕсли;
	
	ТабОбработанныеОстатки = Новый ТаблицаЗначений();
	ТабОбработанныеОстатки.Колонки.Добавить("Субконто2");
	ТабОбработанныеОстатки.Колонки.Добавить("СуммаОстаток");
	ТабОбработанныеОстатки.Колонки.Добавить("КоличествоОстаток");
	
	ТабОбработанныеОстатки.Индексы.Добавить("Субконто2");
	
	ЗапросОстатков = Новый Запрос();
	ЗапросОстатков.УстановитьПараметр("Организация", ОргЛуг);
	ЗапросОстатков.Текст = "ВЫБРАТЬ
	                       |	ФинансовыйОстатки.Субконто2,
	                       |	СУММА(ФинансовыйОстатки.СуммаОстаток * -1) КАК СуммаОстаток,
	                       |	СУММА(ФинансовыйОстатки.КоличествоОстаток * -1) КАК КоличествоОстаток
	                       |ИЗ
	                       |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), , Организация = &Организация) КАК ФинансовыйОстатки
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ФинансовыйОстатки.Субконто2";
	//в цикле проходим все дни месяца и перепродаем товар который в минусе на луг да поле
	Счет62_1 = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
	Счет60_3 = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	СтатьяПоступление = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
	ДатаОбработки = НачалоМесяца(Дата);
	//ДатаОбработки = КонецМесяца(Дата);
	Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
		ЗапросОстатков.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецДня(ДатаОбработки), ВидГраницы.Включая));
		Выборка = ЗапросОстатков.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаОстаток = Выборка.СуммаОстаток;
			КоличествоОстаток = Выборка.КоличествоОстаток;
			СтрокаОстаток = ТабОбработанныеОстатки.Найти(Выборка.Субконто2, "Субконто2");
			Если СтрокаОстаток <> Неопределено Тогда
				СуммаОстаток = СуммаОстаток - СтрокаОстаток.СуммаОстаток;
				КоличествоОстаток = КоличествоОстаток - СтрокаОстаток.КоличествоОстаток;
				СтрокаОстаток.СуммаОстаток = СтрокаОстаток.СуммаОстаток + СуммаОстаток;
				СтрокаОстаток.КоличествоОстаток = СтрокаОстаток.КоличествоОстаток + КоличествоОстаток;
			Иначе
				СтрокаОстаток = ТабОбработанныеОстатки.Добавить();
				СтрокаОстаток.Субконто2 = Выборка.Субконто2;
				СтрокаОстаток.СуммаОстаток = Выборка.СуммаОстаток;
				СтрокаОстаток.КоличествоОстаток = Выборка.КоличествоОстаток;
			КонецЕсли;
			Если СуммаОстаток = 0 И КоличествоОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;	
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргВкусвилл;
			Движение.СчетДт = Счет62_1;
			Движение.СчетКт = Настройка.Счет;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, ОргВкусвилл);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, КонтрЛуг);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Настройка.СтруктурнаяЕдиница);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Настройка.СтатьяДоходовРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Настройка.ЦФО);
			
			Движение.Сумма = СуммаОстаток;
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргВкусвилл;
			Движение.СчетДт = Настройка.Счет;
			Движение.СчетКт = Счет41_1;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Настройка.СтруктурнаяЕдиница);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Настройка.СтатьяДоходовРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Настройка.ЦФО);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Выборка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Настройка.СтатьяДвиженияТоваров);
			
			Движение.КоличествоКт = КоличествоОстаток;
			Движение.Сумма = КоличествоОстаток * ПолучитьСебестоимость(Выборка.Субконто2);
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргЛуг;
			Движение.СчетДт = Счет41_1;
			Движение.СчетКт = Счет60_3;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Выборка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, СтатьяПоступление);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, ОргЛуг);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, КонтрВкусвилл);
			
			Движение.КоличествоДт = КоличествоОстаток;
			Движение.Сумма = СуммаОстаток;
			Движение.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
		КонецЦикла;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерепродатьТоварыОтВкусвиллаНаЛугДаПоле()
	
	ОргВкусвилл = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
	ОргЛуг = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	КонтрВкусвилл = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7734675810");
	КонтрЛуг = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ОргВкус", ОргВкусвилл);
	Запрос.УстановитьПараметр("ОргЛуг", ОргЛуг);
	Запрос.УстановитьПараметр("КонтрЛуг", КонтрЛуг);
	Запрос.УстановитьПараметр("КонтрВкус", КонтрВкусвилл);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
	               |ИЗ
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаКон, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЗакрытиеМесяца_ПерепродажаТоваров)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &ОргВкус
	               |	И ДоговорыКонтрагентов.Владелец = &КонтрЛуг
	               |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &ОргЛуг
	               |	И ДоговорыКонтрагентов.Владелец = &КонтрВкус
	               |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.СтавкаНДС
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ";
				   
	Результаты = Запрос.ВыполнитьПакет();
	Настройка = Результаты[0].Выбрать();
	Если НЕ Настройка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорПродажи = Неопределено;
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорПродажи = Выборка.Ссылка;
	КонецЕсли;
	
	ДоговорПокупки = Неопределено;
	Выборка = Результаты[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорПокупки = Выборка.Ссылка;
	КонецЕсли;
	
	ТабТовары = Результаты[3].Выгрузить();
	
	ТабОбработанныеОстатки = Новый ТаблицаЗначений();
	ТабОбработанныеОстатки.Колонки.Добавить("Субконто2");
	ТабОбработанныеОстатки.Колонки.Добавить("СуммаОстаток");
	ТабОбработанныеОстатки.Колонки.Добавить("КоличествоОстаток");
	
	ТабОбработанныеОстатки.Индексы.Добавить("Субконто2");
	
	ЗапросОстатков = Новый Запрос();
	ЗапросОстатков.УстановитьПараметр("Организация", ОргЛуг);
	ЗапросОстатков.Текст = "ВЫБРАТЬ
	                       |	ФинансовыйОстатки.Субконто2,
	                       |	СУММА(ФинансовыйОстатки.СуммаОстаток * -1) КАК СуммаОстаток,
	                       |	СУММА(ФинансовыйОстатки.КоличествоОстаток * -1) КАК КоличествоОстаток
	                       |ИЗ
	                       |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОстатки, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), , Организация = &Организация) КАК ФинансовыйОстатки
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ФинансовыйОстатки.Субконто2";
	//в цикле проходим все дни месяца и перепродаем товар который в минусе на луг да поле
	Счет62_1 = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
	Счет62_ВГ = ПланыСчетов.Финансовый.ВГОРасчетыСПокупателями;
	Счет60_3 = ПланыСчетов.Финансовый.РасчетыСПоставщиками;
	Счет60_ВГ = ПланыСчетов.Финансовый.ВГОРасчетыСПоставщикамиИПодрядчиками;
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	Счет68_2 = ПланыСчетов.Финансовый.НалогиУН;
	СтатьяПоступление = Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
	ВидНалогаНДС = Справочники.ВидыНалогов.НайтиПоНаименованию("НДС");
	ДатаОбработки = КонецМесяца(Дата);
	Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
		ЗапросОстатков.УстановитьПараметр("ДатаОстатки", Новый Граница(КонецДня(ДатаОбработки), ВидГраницы.Включая));
		Выборка = ЗапросОстатков.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаОстаток = Выборка.СуммаОстаток;
			КоличествоОстаток = Выборка.КоличествоОстаток;
			//Если СуммаОстаток = 0 И КоличествоОстаток = 0 Тогда
			//	Продолжить;
			//КонецЕсли;	
			
			Если КоличествоОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;	

			СтрокаТовар = ТабТовары.Найти(Выборка.Субконто2, "Ссылка");
			СтавкаНДС = Неопределено;
			СтавкаНДСЧислом = 0;
			Если СтрокаТовар <> Неопределено Тогда
				СтавкаНДСЧислом = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС) / 100;
				СтавкаНДС = СтрокаТовар.СтавкаНДС;
				СуммаОстаток = СуммаОстаток + СуммаОстаток * СтавкаНДСЧислом;
				СуммаНДС = СуммаОстаток - СуммаОстаток / (1 + СтавкаНДСЧислом);
			КонецЕсли;
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргВкусвилл;
			Движение.СчетДт = Счет62_ВГ;
			Движение.СчетКт = Настройка.Счет;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, ОргВкусвилл);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, КонтрЛуг);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Настройка.СтруктурнаяЕдиница);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Настройка.СтатьяДоходовРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Настройка.ЦФО);
			
			Движение.Сумма = СуммаОстаток;
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргВкусвилл;
			Движение.СчетДт = Настройка.Счет;
			Движение.СчетКт = Счет41_1;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Настройка.СтруктурнаяЕдиница);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Настройка.СтатьяДоходовРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Настройка.ЦФО);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Выборка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Настройка.СтатьяДвиженияТоваров);
			
			Движение.КоличествоКт = КоличествоОстаток;
			Движение.Сумма = КоличествоОстаток * ПолучитьСебестоимость(Выборка.Субконто2);
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргВкусвилл;
			Движение.СчетДт = Настройка.Счет;
			Движение.СчетКт = Счет68_2;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Настройка.СтруктурнаяЕдиница);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Настройка.СтатьяДоходовРасходов);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Настройка.ЦФО);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, ОргВкусвилл);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, ВидНалогаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, СтавкаНДС);
			
			Движение.Сумма = СуммаНДС;
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргЛуг;
			Движение.СчетДт = Счет41_1;
			Движение.СчетКт = Счет60_ВГ;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Выборка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, СтатьяПоступление);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, ОргЛуг);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, КонтрВкусвилл);
			
			Движение.КоличествоДт = КоличествоОстаток;
			Движение.Сумма = СуммаОстаток - СуммаНДС;
			Движение.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
			
			Движение = Движения.Финансовый.Добавить();
			Движение.Период = ДатаОбработки;
			Движение.Организация = ОргЛуг;
			Движение.СчетДт = Счет68_2;
			Движение.СчетКт = Счет60_ВГ;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, ОргЛуг);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, ВидНалогаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, СтавкаНДС);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, ОргЛуг);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, КонтрВкусвилл);
			
			Движение.Сумма = СуммаНДС;
		КонецЦикла;	
		ДатаОбработки = ДатаОбработки + 86400;
	КонецЦикла;	
	
	//временный кусок для выраванивания проводок итоговых цифр между бух и фин
	Если СуммаКорректировкиПерепродажи <> 0 Тогда
		Движение = Движения.Финансовый.Добавить();
		Движение.Период = КонецМесяца(Дата);
		Движение.Организация = ОргВкусвилл;
		СтрЕдВсе = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Все");
		
		Если СуммаКорректировкиПерепродажи < 0 Тогда
			Движение.СчетДт = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
			Движение.СчетКт = Настройка.Счет;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, СтрЕдВсе);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20120"));
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, СтрЕдВсе);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, СтрЕдВсе);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Справочники.СтатьиДоходовРасходов.НайтиПоКоду("10105"));
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление качества"));
			
			Движение.Сумма = СуммаКорректировкиПерепродажи * (-1);
		Иначе
			Движение.СчетКт = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
			Движение.СчетДт = Настройка.Счет;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, СтрЕдВсе);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20120"));
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, СтрЕдВсе);
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, СтрЕдВсе);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Справочники.СтатьиДоходовРасходов.НайтиПоКоду("10105"));
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Управление качества"));
			
			Движение.Сумма = СуммаКорректировкиПерепродажи;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура НачислениеАмортизацииНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ФинансовыйОстатки.СуммаОстаток,
		|	ФинансовыйОстатки.Организация
		|ПОМЕСТИТЬ втОстаткиНМА
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОкончания, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредстваУчетНМА), , ) КАК ФинансовыйОстатки
		|ГДЕ
		|	ФинансовыйОстатки.СуммаОстаток > 0
		|	И ФинансовыйОстатки.Субконто1.ВидОсновногоСредства <> ЗНАЧЕНИЕ(Перечисление.ВидыОсновныхСредств.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФинансовыйОбороты.Субконто1 КАК ОсновноеСредство,
		|	СУММА(ФинансовыйОбороты.СуммаОборотДт) КАК НачальнаяСтоимость,
		|	ВЫРАЗИТЬ(ФинансовыйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).ДатаВводаВЭксплуатацию КАК ДатаВвода,
		|	ВЫРАЗИТЬ(ФинансовыйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).СрокЭксплуатации КАК Срок
		|ПОМЕСТИТЬ втКНачислению
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Обороты(
		|			,
		|			&ДатаОкончания,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредстваУчетНМА),
		|			,
		|			Субконто1 В
		|				(ВЫБРАТЬ
		|					втОстаткиНМА.ОсновноеСредство
		|				ИЗ
		|					втОстаткиНМА),
		|			,
		|			) КАК ФинансовыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ФинансовыйОбороты.Субконто1,
		|	ВЫРАЗИТЬ(ФинансовыйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).ДатаВводаВЭксплуатацию,
		|	ВЫРАЗИТЬ(ФинансовыйОбороты.Субконто1 КАК Справочник.ОсновныеСредства).СрокЭксплуатации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКНачислению.ОсновноеСредство,
		|	втКНачислению.НачальнаяСтоимость,
		|	втКНачислению.ДатаВвода,
		|	втКНачислению.Срок,
		|	втОстаткиНМА.СуммаОстаток,
		|	ВЫБОР
		|		КОГДА втКНачислению.Срок > 0
		|			ТОГДА втКНачислению.НачальнаяСтоимость / втКНачислению.Срок
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕжемесячноеНачисление,
		|	ВЫБОР
		|		КОГДА втОстаткиНМА.СуммаОстаток < ВЫБОР
		|				КОГДА втКНачислению.Срок > 0
		|					ТОГДА втКНачислению.НачальнаяСтоимость / втКНачислению.Срок
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|			ТОГДА втОстаткиНМА.СуммаОстаток
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втКНачислению.Срок > 0
		|					ТОГДА втКНачислению.НачальнаяСтоимость / втКНачислению.Срок
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК КНачислению,
		|	втОстаткиНМА.Организация
		|ПОМЕСТИТЬ втРасчетНачисления
		|ИЗ
		|	втКНачислению КАК втКНачислению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОстаткиНМА КАК втОстаткиНМА
		|		ПО втКНачислению.ОсновноеСредство = втОстаткиНМА.ОсновноеСредство
		|ГДЕ
		|	втКНачислению.Срок < &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет КАК СчетДт,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
		|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
		|	втРасчетНачисления.ОсновноеСредство,
		|	втРасчетНачисления.КНачислению КАК Сумма,
		|	втРасчетНачисления.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.АмортизацияОсновныхСредствУчетНМА) КАК СчетКт,
		|	""Начисление амортизации НМА"" КАК Содержание,
		|	&ДатаОкончания КАК Период,
		|	ИСТИНА КАК Активность
		|ИЗ
		|	втРасчетНачисления КАК втРасчетНачисления,
		|	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаОкончания, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ОсновныеСредства_НачислениеАмортизацииНМА)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";

	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Дата));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяПроводка = Движения.Финансовый.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка,ВыборкаДетальныеЗаписи);
		НоваяПроводка.СубконтоКт.ОсновныеСредства = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		НоваяПроводка.СубконтоДт.ЦФО = ВыборкаДетальныеЗаписи.ЦФО;
		НоваяПроводка.СубконтоДт.СтатьиДоходовРасходов = ВыборкаДетальныеЗаписи.СтатьяДоходовРасходов;
		НоваяПроводка.СубконтоДт.ТорговыеТочки = ВыборкаДетальныеЗаписи.ТорговаяТочка;
	КонецЦикла;

КонецПроцедуры

//+++AK susk

Процедура НачислениеАмортизацииНМА_Новый()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Субконто1 КАК ОсновноеСредство,
	               |	ФинансовыйОстатки.СуммаОстаток,
	               |	ФинансовыйОстатки.Организация,
	               |	ФинансовыйОстатки.СуммаОстатокДт,
	               |	ФинансовыйОстатки.СуммаОстатокКт
	               |ПОМЕСТИТЬ втОстаткиНМА
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОкончания, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредстваУчетНМА), , ) КАК ФинансовыйОстатки
	               |ГДЕ
	               |	ФинансовыйОстатки.СуммаОстаток > 0
	               |	И ФинансовыйОстатки.Субконто1.ВидОсновногоСредства <> ЗНАЧЕНИЕ(Перечисление.ВидыОсновныхСредств.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФинансовыйОстатки.Субконто1 КАК ОсновноеСредство,
	               |	ФинансовыйОстатки.СуммаОстатокКт КАК НачисленоАмортизации,
	               |	ФинансовыйОстатки.Организация
	               |ПОМЕСТИТЬ НачисленоАмортизации
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаОкончания, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.АмортизацияОсновныхСредствУчетНМА), , ) КАК ФинансовыйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет КАК СчетДт,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
	               |	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница КАК ТорговаяТочка,
	               |	втОстаткиНМА.ОсновноеСредство,
	               |	втОстаткиНМА.СуммаОстаток - ЕСТЬNULL(НачисленоАмортизацииПоОС.НачисленоАмортизации, 0) КАК Сумма,
	               |	втОстаткиНМА.Организация,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.АмортизацияОсновныхСредствУчетНМА) КАК СчетКт,
	               |	""Начисление амортизации НМА"" КАК Содержание,
	               |	&КонецМесяца КАК Период,
	               |	ИСТИНА КАК Активность,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПринятыеКУчетуОССрезПоследних.СрокАмортизации, 0) = 0
	               |			ТОГДА ОсновныеСредства.СрокЭксплуатации
	               |		ИНАЧЕ ЕСТЬNULL(ПринятыеКУчетуОССрезПоследних.СрокАмортизации, 0)
	               |	КОНЕЦ КАК СрокЭксплуатации,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПринятыеКУчетуОССрезПоследних.ДатаВводаВЭксплуатацию, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ОсновныеСредства.ДатаВводаВЭксплуатацию
	               |		ИНАЧЕ ЕСТЬNULL(ПринятыеКУчетуОССрезПоследних.ДатаВводаВЭксплуатацию, ДАТАВРЕМЯ(1, 1, 1))
	               |	КОНЕЦ КАК ДатаВводаВЭксплуатацию
	               |ИЗ
	               |	втОстаткиНМА КАК втОстаткиНМА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НачисленоАмортизации КАК НачисленоАмортизацииПоОС
	               |		ПО втОстаткиНМА.ОсновноеСредство = НачисленоАмортизацииПоОС.ОсновноеСредство
	               |			И втОстаткиНМА.Организация = НачисленоАмортизацииПоОС.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПринятыеКУчетуОС.СрезПоследних КАК ПринятыеКУчетуОССрезПоследних
	               |		ПО втОстаткиНМА.ОсновноеСредство = ПринятыеКУчетуОССрезПоследних.ОсновноеСредство
	               |			И втОстаткиНМА.Организация = ПринятыеКУчетуОССрезПоследних.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |		ПО втОстаткиНМА.ОсновноеСредство = ОсновныеСредства.Ссылка,
	               |	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&ДатаОкончания, ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ОсновныеСредства_НачислениеАмортизацииНМА)) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";				   
								   
	Гр = Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("ДатаОкончания", Гр);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	мНачДата = НачалоМесяца(Дата);
	мКонДата = КонецМесяца(Дата);
	
	Пока Выборка.Следующий() Цикл	
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(Выборка.ДатаВводаВЭксплуатацию > мНачДата, Выборка.ДатаВводаВЭксплуатацию, мНачДата);
		
		ДатаОкончанияСписания = НачалоДня(ДобавитьМесяц(Выборка.ДатаВводаВЭксплуатацию, ?(ЗначениеЗаполнено(Выборка.СрокЭксплуатации), Выборка.СрокЭксплуатации, 60)) - 1);
		
		СуммаСписания   = СуммаСписанияЗаМесяц(Выборка.ОсновноеСредство, ДатаНачала, ДатаОкончанияСписания, Выборка.Сумма,   ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		
		Если СуммаСписания = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = Движения.Финансовый.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка,Выборка);
		НоваяПроводка.СубконтоКт.ОсновныеСредства = Выборка.ОсновноеСредство;
		НоваяПроводка.СубконтоДт.ЦФО = Выборка.ЦФО;
		НоваяПроводка.СубконтоДт.СтатьиДоходовРасходов = Выборка.СтатьяДоходовРасходов;
		НоваяПроводка.СубконтоДт.ТорговыеТочки = Выборка.ТорговаяТочка;
		НоваяПроводка.Сумма = СуммаСписания;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, мНачДата, мКонДата) 
	
	Если Остаток = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);
	
	ПоправкаНаВисокосныйГодВНачалеПериода = 0;
	ПоправкаНаВисокосныйГодВКонцеПериода  = 0;
	Если Лев(Строка(КонецМесяца(ДатаНачалаСписания)), 5) = "29.02" И НЕ Лев(Строка(ДатаНачалаСписания), 5) = "01.02" Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонецМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;		
		
	КонецЕсли;
	
	ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / (День(КонецМесяца(ДатаОкончанияСписания)) + ПоправкаНаВисокосныйГодВКонцеПериода);
	Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
		ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
		КоличествоМесяцев  = ДоляПоследнегоМесяца;
	Иначе
		ДоляТекущегоМесяца   = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1 + ПоправкаНаВисокосныйГодВНачалеПериода) / (День(КонецМесяца(ДатаНачалаСписания)) + ПоправкаНаВисокосныйГодВНачалеПериода);
		КоличествоМесяцевСередины = 0;
		ТекущаяДата = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
		Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата Цикл
			КоличествоМесяцевСередины = КоличествоМесяцевСередины + 1;
			ТекущаяДата               = ДобавитьМесяц(ТекущаяДата, 1);
		КонецЦикла;
		КоличествоМесяцев = КоличествоМесяцевСередины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
	КонецЕсли;
	
	СуммаСписания = ?(КоличествоМесяцев = 0, 0, Остаток * ДоляТекущегоМесяца / КоличествоМесяцев);
	
	Если Не ВспомогательныеДанные = Неопределено Тогда
		ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоМесяцев;
		ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ДоляТекущегоМесяца;
	КонецЕсли;	
	
	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;
	
КонецФункции // СуммаСписанияЗаМесяц()

Функция РазностьДатВДнях(Дата1, Дата2)
	
	мДлинаСуток = 86400; // в секундах
	
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
	
КонецФункции

//---AK susk
	
Процедура ПроводкиНДСПоЛистамУчета()
	
	Попытка
		
		//ИмяСервераИнформационнойБазыДляПодключения = "10.0.0.15";
		//ИмяИнформационнойБазыНаСервереДляПодключения = "BP_CORP";
		//ПользовательИнформационнойБазыДляПодключения = "Обмен";
		//ПарольИнформационнойБазыДляПодключения = "123321";
		СтруктураПодключения = ПолныеПрава.ПолучитьСтрокуПодключенияСтруктурой_Бух();
		ИмяСервераИнформационнойБазыДляПодключения 				= СтруктураПодключения.ИмяСервера;
		ИмяИнформационнойБазыНаСервереДляПодключения 			= СтруктураПодключения.ИмяБазы;
		АутентификацияWindowsИнформационнойБазыДляПодключения 	= Ложь;
		ПользовательИнформационнойБазыДляПодключения 			= СтруктураПодключения.Пользователь;
		ПарольИнформационнойБазыДляПодключения 					= СтруктураПодключения.Пароль;
		Коннектор = Новый COMObject(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		// создается объект COM-соединение
		
		Строка = "Srvr="""+СокрЛП(ИмяСервераИнформационнойБазыДляПодключения)+""";Ref="""+СокрЛП(ИмяИнформационнойБазыНаСервереДляПодключения)+""";Usr="""+СокрЛП(ПользовательИнформационнойБазыДляПодключения)+""";Pwd="+ПарольИнформационнойБазыДляПодключения+";";
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Свойство", СоединениеСБазой.ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Загружен по возврату из сейфа"));
	Запрос.УстановитьПараметр("Свойство1", СоединениеСБазой.ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Номер точки в финансах"));
	Запрос.Текст = "ВЫБРАТЬ
					|	ВЗ_Запрос.Дата,
					|	СУММА(ВЗ_Запрос.СуммаНДС) КАК СуммаНДС,
					|	ВЗ_Запрос.СтавкаНДС,
					|	ВЗ_Запрос.Префикс КАК Префикс
					|ИЗ
					|	(ВЫБРАТЬ
					|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.Ссылка.Дата, ДЕНЬ) КАК Дата,
					|		ОтчетОРозничныхПродажахТовары.СуммаНДС КАК СуммаНДС,
					|		ВЫБОР
					|			КОГДА ОтчетОРозничныхПродажахТовары.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
					|				ТОГДА 10
					|			КОГДА ОтчетОРозничныхПродажахТовары.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
					|				ТОГДА 18
					|		КОНЕЦ КАК СтавкаНДС,
					|		ВЫБОР
					|			КОГДА ЕСТЬNULL(АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение.Префикс, """") = """"
					|				ТОГДА АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение.Код
					|			ИНАЧЕ АК_СоответствиеПодразделенийЗагруженнымДокументам.Подразделение.Префикс
					|		КОНЕЦ КАК Префикс
					|	ИЗ
					|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АК_СоответствиеПодразделенийЗагруженнымДокументам КАК АК_СоответствиеПодразделенийЗагруженнымДокументам
					|			ПО ОтчетОРозничныхПродажахТовары.Ссылка = АК_СоответствиеПодразделенийЗагруженнымДокументам.Документ
					|	ГДЕ
					|		ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|		И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен = ИСТИНА
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателяТовары.Ссылка.Дата, ДЕНЬ),
					|		ВозвратТоваровОтПокупателяТовары.СуммаНДС * -1,
					|		ВЫБОР
					|			КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
					|				ТОГДА 10
					|			КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
					|				ТОГДА 18
					|		КОНЕЦ,
					|		ЕСТЬNULL(ЗначенияСвойствОбъектов1.Значение, ВозвратТоваровОтПокупателяТовары.Ссылка.ПодразделениеОрганизации.Префикс)
					|	ИЗ
					|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|			ПО ВозвратТоваровОтПокупателяТовары.Ссылка = ЗначенияСвойствОбъектов.Объект
					|				И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
					|				И (ЗначенияСвойствОбъектов.Значение = ИСТИНА)
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
					|			ПО ВозвратТоваровОтПокупателяТовары.Ссылка = ЗначенияСвойствОбъектов1.Объект
					|				И (ЗначенияСвойствОбъектов1.Свойство = &Свойство1)
					|	ГДЕ
					|		ВозвратТоваровОтПокупателяТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|		И ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен = ИСТИНА) КАК ВЗ_Запрос
					|
					|СГРУППИРОВАТЬ ПО
					|	ВЗ_Запрос.Дата,
					|	ВЗ_Запрос.СтавкаНДС,
					|	ВЗ_Запрос.Префикс
					|
					|УПОРЯДОЧИТЬ ПО
					|	Префикс";
					
					
	Выборка = Запрос.Выполнить().Выбрать();
	ТабДанныеБух = Новый ТаблицаЗначений();
	ТабДанныеБух.Колонки.Добавить("НомерТочки", Новый ОписаниеТипов("Число"));
	ТабДанныеБух.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТабДанныеБух.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабДанныеБух.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	Ставка10 = Перечисления.СтавкиНДС.НДС10;
	Ставка18 = Перечисления.СтавкиНДС.НДС18;
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТабДанныеБух.Добавить();
		СтрокаДоб.НомерТочки = Число(Выборка.Префикс);
		Если Выборка.СтавкаНДС = 10 Тогда
			СтрокаДоб.СтавкаНДС = Ставка10;
		ИначеЕсли Выборка.СтавкаНДС = 18 Тогда
			СтрокаДоб.СтавкаНДС = Ставка18;
		КонецЕсли;
		СтрокаДоб.СуммаНДС = Выборка.СуммаНДС;
		СтрокаДоб.Дата = Выборка.Дата;
	КонецЦикла;
	
	СтруктураНастроекНДС = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыЛистУчета, Дата);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДанныеБух);
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.НомерТочки,
	               |	Таб.Дата,
	               |	Таб.СтавкаНДС,
	               |	Таб.СуммаНДС
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Данные.СтавкаНДС,
	               |	ВЗ_Данные.СуммаНДС,
	               |	ВЗ_Данные.Дата КАК Дата,
	               |	ВЗ_Листы.ТорговаяТочка,
	               |	ВЗ_Листы.ЦФО,
	               |	ВЗ_Листы.Организация
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_Данные.НомерТочки КАК НомерТочки,
	               |		ВТ_Данные.Дата КАК Дата,
	               |		ВТ_Данные.СтавкаНДС КАК СтавкаНДС,
	               |		СУММА(ВТ_Данные.СуммаНДС) КАК СуммаНДС
	               |	ИЗ
	               |		ВТ_Данные КАК ВТ_Данные
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_Данные.НомерТочки,
	               |		ВТ_Данные.Дата,
	               |		ВТ_Данные.СтавкаНДС) КАК ВЗ_Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) КАК Дата,
	               |			ЛистУчета.ТорговаяТочка.НомерТочки КАК НомерТочки,
	               |			ЛистУчета.ТорговаяТочка КАК ТорговаяТочка,
	               |			ЛистУчета.ЦФО КАК ЦФО,
	               |			ЛистУчета.Организация КАК Организация
	               |		ИЗ
	               |			Документ.ЛистУчета КАК ЛистУчета
	               |		ГДЕ
	               |			ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |			И ЛистУчета.Проведен = ИСТИНА
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ),
	               |			ЛистУчета.ТорговаяТочка.НомерТочки,
	               |			ЛистУчета.ТорговаяТочка,
	               |			ЛистУчета.ЦФО,
	               |			ЛистУчета.Организация) КАК ВЗ_Листы
	               |		ПО ВЗ_Данные.НомерТочки = ВЗ_Листы.НомерТочки
	               |			И ВЗ_Данные.Дата = ВЗ_Листы.Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	СчетДт = ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
	СтатьяДР = Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
	Пока Выборка.Следующий() Цикл
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период										= Выборка.Дата;
		Проводка.Организация								= Выборка.Организация;	
		Проводка.Сумма 										= Выборка.СуммаНДС;
			
		Проводка.Содержание									= "НДС выручка ТТ";
			
		Проводка.СчетДт										= СчетДт;
		Проводка.СубконтоДт.ТорговыеТочки					= Выборка.ТорговаяТочка;
		Проводка.СубконтоДт.СтатьиДоходовРасходов			= СтатьяДР;
		Проводка.СубконтоДт.ЦФО								= Выборка.ЦФО;
			
		Проводка.СчетКт 							= СтруктураНастроекНДС.Счет;
		Проводка.СубконтоКт.Организации  			= Выборка.Организация;
		Проводка.СубконтоКт.ВидыНалогов				= СтруктураНастроекНДС.ДопРеквизит;
		Проводка.СубконтоКт.СтавкиНДС			 	= Выборка.СтавкаНДС;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	МесяцОбработки = КонецМесяца(Дата);
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	Движения.Финансовый.РазрешитьЗаписьБезПроверки = Истина;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
					   |	СебестоимостьТоваровСрезПоследних.Номенклатура,
					   |	ВЫБОР
					   |		КОГДА КОНЕЦПЕРИОДА(СебестоимостьТоваровСрезПоследних.Период, МЕСЯЦ) <> &МесяцОбработки
					   |			ТОГДА 0
					   |		ИНАЧЕ 1
					   |	КОНЕЦ * СебестоимостьТоваровСрезПоследних.Себестоимость КАК Себестоимость
					   |ИЗ
					   |	РегистрСведений.СебестоимостьТоваров.СрезПоследних(&МесяцОбработки, ) КАК СебестоимостьТоваровСрезПоследних";
					   
	Запрос.УстановитьПараметр("МесяцОбработки", КонецМесяца(МесяцОбработки));
		
	Результаты = Запрос.ВыполнитьПакет();
	ТабСебестоимость = Результаты[0].Выгрузить();
	ТабСебестоимость.Индексы.Добавить("Номенклатура");
	
	Если ВидЗакрытия = 0 Тогда
		
		ПроводкиПоСуммамЛистовУчета();
		ОбработатьПроводкиПоЛугДаПоле();
	ИначеЕсли ВидЗакрытия = 1 Тогда
		СписатьПогрешностиРасчетаСебестоимости();
	ИначеЕсли ВидЗакрытия = 2 Тогда
		СписатьМинусыСклада();
		ОбработатьПроводкиПоЛугДаПоле();
	ИначеЕсли ВидЗакрытия = 3 Тогда
		ПроводкиПоКомплектамЗаМесяц();
		ОбработатьПроводкиПоЛугДаПоле();
	ИначеЕсли ВидЗакрытия = 4 Тогда
		СписатьОстаткиЗакрытыхТочек();
		ОбработатьПроводкиПоЛугДаПоле();
	ИначеЕсли ВидЗакрытия = 5 Тогда
		РаспределитьДЗ();
	ИначеЕсли ВидЗакрытия = 6 Тогда
		//+++АК SaMi 2018.07.27 ИП-00019344
		////минеев - если месяц еще не завершен, то нет смысла считать расхождения
		//Если КонецМесяца(Дата) <= ТекущаяДата() Тогда
		Если Комментарий = "Провести по старому" Тогда
			ДатаОбработки = НачалоМесяца(Дата);
			Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
				ПроводкиПоРасхождениямМеждуОтправленнымСкладомИПолученнымНаТТ_Старая(ДатаОбработки);
				ДатаОбработки = ДатаОбработки + 86400;
			КонецЦикла;
		Иначе			
			ПроводкиПоРасхождениямМеждуОтправленнымСкладомИПолученнымНаТТ();		
		КонецЕсли; 
		//	КонецЕсли;
		//---АК SaMi  2018.07.27 
		
		ОбработатьПроводкиПоЛугДаПоле();
		
		//+++АК SaMi 2018.06.18 ИП-00018553 
		РазобратьКомплектыВДвиженияхПо41Счёту();
		//---АК SaMi  2018.06.18 
	ИначеЕсли ВидЗакрытия = 7 Тогда
		//минеев - если месяц еще не завершен, то нет смысла считать расхождения
		Если КонецМесяца(Дата) <= ТекущаяДата() Тогда
			ДатаОбработки = НачалоМесяца(Дата);
			Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
				ПроводкиПоРасхождениямПеремещенийМеждуСкладами(ДатаОбработки);
				ДатаОбработки = ДатаОбработки + 86400;
			КонецЦикла;
		КонецЕсли;
		ОбработатьПроводкиПоЛугДаПоле();
	ИначеЕсли ВидЗакрытия = 8 Тогда
		//минеев - если месяц еще не завершен, то нет смысла считать расхождения
		Если КонецМесяца(Дата) <= ТекущаяДата() Тогда
			ДатаОбработки = НачалоМесяца(Дата);
			Пока ДатаОбработки <= КонецМесяца(Дата) Цикл
				ПроводкиПоРасхождениямПеремещенийМеждуТТ(ДатаОбработки);
				ДатаОбработки = ДатаОбработки + 86400;
			КонецЦикла;
		КонецЕсли;
		ОбработатьПроводкиПоЛугДаПоле();
	//+++ ZICD ИП-00014826 07.02.2017
	ИначеЕсли ВидЗакрытия = 9 Тогда
		ВыполнитьЗакрытиеСчёта97();
	//---
	ИначеЕсли ВидЗакрытия = 10 Тогда
		СписатьПогрешностиРасчетаСебестоимостиМатериалов();
	ИначеЕсли ВидЗакрытия = 11 Тогда
		ПерепродатьТоварыОтВкусвиллаНаЛугДаПоле();
	ИначеЕсли ВидЗакрытия = 12 Тогда
		//+++AK susk
		//НачислениеАмортизацииНМА();
		НачислениеАмортизацииНМА_Новый();
		//---AK susk
	ИначеЕсли ВидЗакрытия = 13 Тогда
		//минеев - если месяц еще не завершен, то нет смысла считать расхождения
		Если КонецМесяца(Дата) <= ТекущаяДата() Тогда
			ПроводкиНДСПоЛистамУчета();
		КонецЕсли;
		//+++AK sole 2018.04.04 ИП-00017896.01
	ИначеЕсли ЭтотОбъект.ВидЗакрытия = 14 Тогда	
		Если КонецМесяца(Дата) <= ТекущаяДата() Тогда
			//Если месяц еще не завершен, то нет смысла выполнять распределение излишков
			АК_ВыполнитьРаспределениеОстатковПрочихСкладовМагазинов();
		КонецЕсли;
	//---AK sole 2018.04.04 ИП-00017896.01		
	//+++АК SaMi 2018.04.25 ИП-00018340.01 
	ИначеЕсли ВидЗакрытия = 15 Тогда
		ПроводкиПоПроизводствуВМагазинах();
	//---АК SaMi  2018.04.25 
	КонецЕсли;


	
КонецПроцедуры

Процедура ОбработатьПроводкиПоЛугДаПоле()
	
	//себестоимость в луг да поле на 10 процентов выше, чем во вкусвилле
	//все расчеты идут по себестоимости вкусвилла,
	//для получения результата просто добавим 10 процентов на сумму
	ОргЛугДаПоле = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7726660031");
	
	Для Каждого Запись Из Движения.Финансовый Цикл
		Если Запись.Организация = ОргЛугДаПоле Тогда
			Запись.Сумма = Запись.Сумма * 1.1;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ПересчитатьСебестоимостьПоКомплектующим();
	//	ПересчитатьСебестоимостьПоТоварам();
	//КонецЕсли;	
	
	//+++АК SaMi 2018.05.08 ИП-00018340.01 
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОрганизацияОсновная;		
	КонецЕсли; 
	//---АК SaMi  2018.05.08 
	
КонецПроцедуры

//процедура написана Тугудиной
Процедура РаспределитьДЗ()
	
	//+++АК MIND 2018.01.10 
	//отключаем эту тему, у Шевченко прошло задание
	Возврат;
	//---АК MIND 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодДоЗакрытия",Новый Граница(КонецМесяца(Дата),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Период",Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.Субконто1 КАК Организация,
	|	ФинансовыйОстатки.Субконто2 КАК Контрагент,
	|	СУММА(ФинансовыйОстатки.СуммаОстаток) КАК СуммаОстаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&Период,
	|			Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками)
	|				ИЛИ Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.финансовый.РасчетыСПрочимиДебиторамиИКредиторами),
	|			,
	|			) КАК ФинансовыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.Субконто1,
	|	ФинансовыйОстатки.Субконто2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФинансовыйОстатки.СуммаОстаток) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйОбороты.Счет,
	|	ФинансовыйОбороты.Субконто1 КАК Организация,
	|	ФинансовыйОбороты.Субконто2 КАК Контрагент,
	|	СУММА(ФинансовыйОбороты.СуммаОборот) КАК СуммаОборот,
	|	ФинансовыйОбороты.Регистратор
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|			,
	|			&Период,
	|			Регистратор,
	|			Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками)
	|				ИЛИ Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.финансовый.РасчетыСПрочимиДебиторамиИКредиторами),
	|			,
	|			(Субконто1, Субконто2) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.Контрагент
	|				ИЗ
	|					Остатки КАК Т),
	|			,
	|			) КАК ФинансовыйОбороты
	|ГДЕ
	|	(ФинансовыйОбороты.Счет, ФинансовыйОбороты.Субконто1, ФинансовыйОбороты.Субконто2) В
	|			(ВЫБРАТЬ
	|				Т.Счет,
	|				Т.Организация,
	|				Т.Контрагент
	|			ИЗ
	|				Остатки КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОбороты.Счет,
	|	ФинансовыйОбороты.Субконто1,
	|	ФинансовыйОбороты.Субконто2,
	|	ФинансовыйОбороты.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФинансовыйОбороты.СуммаОборот) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Финансовый.Код,
	|	Финансовый.Ссылка,
	|	ПОДСТРОКА(Финансовый.Код, 2, 5) КАК КодБС,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Финансовый.Код, 1, 1) = ""А""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Аванс
	|ПОМЕСТИТЬ СчетаЗабаланс
	|ИЗ
	|	ПланСчетов.Финансовый КАК Финансовый
	|ГДЕ
	|	Финансовый.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗадолженностьЗабаланс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.Организация КАК Организация,
	|	Остатки.Контрагент КАК Контрагент,
	|	Обороты.Регистратор КАК Регистратор,
	|	Обороты.СуммаОборот,
	|	Остатки.СуммаОстаток КАК СуммаОстаток,
	|	СчетаЗабаланс.Ссылка КАК СчетЗабаланс,
	|	Обороты.Регистратор.ДоговорКонтрагента КАК Договор
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО Остатки.Счет = Обороты.Счет
	|			И Остатки.Организация = Обороты.Организация
	|			И Остатки.Контрагент = Обороты.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗабаланс КАК СчетаЗабаланс
	|		ПО Остатки.Счет.Код = СчетаЗабаланс.КодБС
	|			И (ВЫБОР
	|				КОГДА Остатки.СуммаОстаток > 0
	|					ТОГДА СчетаЗабаланс.Аванс
	|				ИНАЧЕ НЕ СчетаЗабаланс.Аванс
	|			КОНЕЦ)
	|ГДЕ
	|	Обороты.СуммаОборот / Остатки.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Счет,
	|	Организация,
	|	Обороты.Регистратор.Дата УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(СуммаОстаток),
	|	МАКСИМУМ(СчетЗабаланс)
	|ПО
	|	Контрагент,
	|	Счет,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.Субконто1 КАК Контрагент,
	|	ФинансовыйОстатки.Субконто2 КАК Договор,
	|	ФинансовыйОстатки.Субконто3 КАК Документ,
	|	СУММА(-ФинансовыйОстатки.СуммаОстаток) КАК Сумма,
	|	ФинансовыйОстатки.Организация
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(&ПериодДоЗакрытия, Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗадолженностьЗабаланс), , ) КАК ФинансовыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОстатки.Счет,
	|	ФинансовыйОстатки.Субконто1,
	|	ФинансовыйОстатки.Субконто2,
	|	ФинансовыйОстатки.Субконто3,
	|	ФинансовыйОстатки.Организация";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаКонтрагенты=РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДвижения = РезультатЗапроса[4].Выгрузить();
	
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		ВыборкаСчета = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчета.Следующий()Цикл
			ВыборкаОрганизации = ВыборкаСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОрганизации.Следующий()Цикл
				СуммаКРаспределению = ВыборкаОрганизации.СуммаОстаток;
				Обороты = ВыборкаОрганизации.Выбрать();
				Знак = ?(СуммаКРаспределению>0,1,-1);
				Пока Обороты.Следующий()Цикл
					Движение = ТабДвижения.Добавить();
					Если НЕ ЗначениеЗаполнено(Обороты.СчетЗабаланс) Тогда
						Сообщить("Для счета не найдена пара " + Обороты.Счет);
					КонецЕсли;	
					Движение.Счет = Обороты.СчетЗабаланс;//СчетЗУ(Обороты.Счет,Обороты.СуммаОборот>0);
					Движение.Организация = Обороты.Организация;
					Движение.Контрагент = Обороты.Контрагент;
					Движение.Документ = Обороты.Регистратор;
					Движение.Сумма = Знак*Мин(Знак*СуммаКРаспределению,Знак*Обороты.СуммаОборот);
					Попытка
						Движение.Договор = Обороты.Договор;
					Исключение
					КонецПопытки;
					СуммаКРаспределению = СуммаКРаспределению - Движение.Сумма;
					Если СуммаКРаспределению = 0 Тогда
						Прервать
					КонецЕсли;
					
				КонецЦикла
			КонецЦикла;
		КонецЦикла
	КонецЦикла;
	
	ТабДвижения.Свернуть("Счет,Организация,Контрагент,Договор,Документ","Сумма");
	
	Для Каждого Движение из ТабДвижения Цикл
		Если Движение.Сумма=0 Тогда
			Продолжить
		КонецЕсли;
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = КонецМесяца(Дата);
		Если Движение.Сумма>0 Тогда
			Проводка.СчетДт = Движение.Счет;
			Проводка.Организация = Движение.Организация;
			Проводка.СубконтоДт.Контрагенты = Движение.Контрагент;
			Проводка.СубконтоДт.Договоры = Движение.Договор;
			Проводка.СубконтоДт.Документы = Движение.Документ;
			Проводка.Сумма = Движение.Сумма;
		Иначе
			Проводка.СчетКт = Движение.Счет;
			Проводка.Организация = Движение.Организация;
			Проводка.СубконтоКт.Контрагенты = Движение.Контрагент;
			Проводка.СубконтоКт.Договоры = Движение.Договор;
			Проводка.СубконтоКт.Документы = Движение.Документ;
			Проводка.Сумма = -Движение.Сумма;
		КонецЕсли;
	КонецЦикла;
	//Операция.Записать();
	
КонецПроцедуры	

//+++ ZICD ИП-00014826 07.02.2017
Процедура ВыполнитьЗакрытиеСчёта97()
	
	//+++ ZICD 20.04.2017
	// Исправление ошибки ежемесячного списания РБП:
	// Режим удаления движений документа = "Удалять автоматически при отмене проведения".
	// При перепроведении документа он предварительно не распроводится и из-за этого движения
	// уже проведённого документа не удалялись и учитывались при получении остатков (см. запрос ниже)
	Движения.Финансовый.Очистить();
	Движения.Финансовый.Записать();
	//---
	
	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецМесяца(Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("ПустаяДата",  Дата(1, 1, 1));
	
	ВидРБП = Новый Массив();
	ВидРБП.Добавить(Перечисления.ВидыРБП.Прочие);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ОсвоениеПриродныхРесурсов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
    ВидРБП.Добавить(Перечисления.ВидыРБП.ПрочиеВидыСтрахования);
	Запрос.УстановитьПараметр("ВидРБП", ВидРБП);
	
	СчетаУчетаРБП = Новый Массив();
	СчетаУчетаРБП.Добавить(ПланыСчетов.Финансовый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("Счет", СчетаУчетаРБП);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	СУММА(СуммаОстатокДт - СуммаОстатокКт) КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|		&КонецМесяца,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Субконто1.ВидРБП В (&ВидРБП))
	|
	|СГРУППИРОВАТЬ ПО
	|	Организация,
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Организация = Выборка.Организация;
		Счет = Выборка.Счет;
		РБП  = Выборка.Субконто1;
		
		//+++ ZICD 14.02.2017 исправление критической ошибки незаполненности счёта списания затрат для РБП
		Если Не ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		//---
		
		Если РБП.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Продолжить;
		КонецЕсли;
		
		СчетЗатрат = РБП.СчетЗатрат;
		//+++ ZICD 14.02.2017 исправление критической ошибки незаполненности счёта списания затрат для РБП
		Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
			ЗаписьЖурналаРегистрации(
				"Закрытие 97-ого счёта.",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Не указан счёт списания затрат для РБП """ + СокрЛП(РБП.Наименование) + """ (" + СокрЛП(РБП.Код) + ").");
			Продолжить;
		КонецЕсли;
		//---
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		//+++ ZICD 19.04.2017 Исправление ошибки ежемесячного списания РБП
		ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
		//ДатаНачала = РБП.ДатаНачалаСписания;
		//---
		
		СуммаСписания = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.Остаток, ВспомогательныеДанныеРасчета, мНачДата, мКонДата);
		
		Если СуммаСписания = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = Дата;
		Проводка.Организация = Организация;
		
		Проводка.СчетДт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, РБП.СубконтоЗатрат1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РБП.СубконтоЗатрат2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, РБП.СубконтоЗатрат3);
		
		Проводка.СчетКт = Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
		
		Проводка.Сумма = СуммаСписания;
		Проводка.Содержание = "Списание РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
		
	КонецЦикла;
	
КонецПроцедуры
//---

#Область Выполнить_Распределение_Остатков_Прочих_Складов_Магазинов

//+++AK sole 2018.04.02 ИП-00017896.01
Процедура АК_ВыполнитьРаспределениеОстатковПрочихСкладовМагазинов()
	
	ТекстОшибки = Неопределено;
	БПРИ = АК_ПолучитьБлокПараметровРаспределенияИзлишков();
	
	Попытка
		
		ТекДата1 = ТекущаяДата();
		Сообщить("Время Начала: " + Формат(ТекДата1,"ЧЧ:мм:сс"));
		
		Движения.ПрочиеСклады.Очистить();
		
		// Получить Остатки По Складам Расхождений
		БПРИ.Запрос.Текст = БПРИ.НЗ.ПолучитьОстаткиПоСкладамРасхождений;
		БПРИ.Запрос.Выполнить();
		
		// Получить Отрицательные Остатки По Основным Складам
		БПРИ.Запрос.Текст = БПРИ.НЗ.ПолучитьОтрицательныеОстаткиПоОсновнымСкладам;
		БПРИ.Запрос.Выполнить();
		
		// Получить Положительные Остатки По Складам Расхождений
		БПРИ.Запрос.Текст = БПРИ.НЗ.ПолучитьПоложительныеОстаткиПоСкладамРасхождений;
		БПРИ.Запрос.Выполнить();
		
		// Получить Список Поступлений В Месяце
		БПРИ.Запрос.Текст = БПРИ.НЗ.ПолучитьСписокПоступленийВМесяце;
		БПРИ.Запрос.Выполнить();
		
		// Получить Список Последних Поступлений В Месяце
		БПРИ.Запрос.Текст = БПРИ.НЗ.ПолучитьСписокПоследнихПоступленийВМесяце;
		БПРИ.Запрос.Выполнить();
		
		// Сформировать Таблицу ПоступлениеТовара
		БПРИ.Запрос.Текст = БПРИ.НЗ.СформироватьТаблицуПоступлениеТовара;
		БПРИ.Запрос.Выполнить();
		
		// Ограничить Положительные Остатки Поступлениями
		БПРИ.Запрос.Текст = БПРИ.НЗ.ОграничитьПоложительныеОстаткиПоступлениями;
		БПРИ.Запрос.Выполнить();

		// Отсечь Отрицательные Остатки Без Поступлений
		БПРИ.Запрос.Текст = БПРИ.НЗ.ОтсечьОтрицательныеОстаткиБезПоступлений;
		БПРИ.Запрос.Выполнить();

		// Создать Таблицу Обмена Номенклатуры
		БПРИ.Запрос.Текст = БПРИ.НЗ.СоздатьТаблицуОбменаНоменклатуры;
		БПРИ.Запрос.Выполнить();
		
		тз = АК_ВыгрузитьВременнуюТаблицу("втТаблицаОбменаНоменклатуры", БПРИ.Запрос.МенеджерВременныхТаблиц);
		БПРИ.Вставить("тзОбменаНоменклатуры", тз);
		
		АК_СформироватьДвиженияТоваров_в_РЦ(БПРИ);
		АК_СформироватьДвиженияТоваров_в_ТТ(БПРИ);
		
		Движения.ПрочиеСклады.Записать();
		
		ТекДата2 = ТекущаяДата();
		
		Сообщить("Время Окончания: " + Формат(ТекДата2,"ЧЧ:мм:сс"));
		Сообщить("Длительность: " + Формат((ТекДата2 - ТекДата1),"ЧГ=0"));
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();	
	КонецПопытки;
	
	БПРИ.Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

//+++AK sole 2018.04.02 ИП-00017896.01
Функция АК_ВыгрузитьВременнуюТаблицу(ИмяВременнойТаблицы, МВТ)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
	
	Возврат  Запрос.Выполнить().Выгрузить();
КонецФункции

//+++AK sole 2018.04.04 ИП-00017896.01
Функция АК_ПолучитьРезультатСкалярногоЗапроса(Запрос, ЗначениеПоУмолчанию)
	Перем Выборка;
	Перем Результат;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Получить(0);
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

//+++AK sole 2018.04.02 ИП-00017896.01
Функция АК_ПолучитьБлокПараметровРаспределенияИзлишков()
	
	ДатаС = НачалоМесяца(ЭтотОбъект.Дата);
	ДатаПо = КонецМесяца(ЭтотОбъект.Дата);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.Параметры.Вставить("ДатаС", ДатаС);
	Запрос.Параметры.Вставить("ДатаПо", ДатаПо);
	Запрос.Параметры.Вставить("ГрДатаПо", Новый Граница(ДатаПо, ВидГраницы.Включая));
	Запрос.Параметры.Вставить("Регистратор", ЭтотОбъект.Ссылка);
	Запрос.Параметры.Вставить("ВидОперации", Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку);

	БПРИ = Новый Структура();
	БПРИ.Вставить("Запрос", Запрос);
	БПРИ.Вставить("НЗ", АК_ЗаполнитьНаборЗапросовРаспределенияИзлишков());
		
	Возврат БПРИ;
КонецФункции

//+++АК sole 2018.04.09 ИП-00017896.01
Функция АК_ЗаполнитьНаборЗапросовРаспределенияИзлишков()
	НЗ = Новый Структура();
	НЗ.Вставить("ПолучитьОстаткиПоСкладамРасхождений", АК_ПолучитьОстаткиПоСкладамРасхождений());
	НЗ.Вставить("ПолучитьОтрицательныеОстаткиПоОсновнымСкладам", АК_ПолучитьОтрицательныеОстаткиПоОсновнымСкладам());
	НЗ.Вставить("ПолучитьПоложительныеОстаткиПоСкладамРасхождений", АК_ПолучитьПоложительныеОстаткиПоСкладамРасхождений());
	НЗ.Вставить("ПолучитьСписокПоступленийВМесяце", АК_ПолучитьСписокПоступленийВМесяце());
	НЗ.Вставить("ПолучитьСписокПоследнихПоступленийВМесяце", АК_ПолучитьСписокПоследнихПоступленийВМесяце());
	НЗ.Вставить("СформироватьТаблицуПоступлениеТовара", АК_СформироватьТаблицуПоступлениеТовара());
	НЗ.Вставить("ОграничитьПоложительныеОстаткиПоступлениями", АК_ОграничитьПоложительныеОстаткиПоступлениями());
	НЗ.Вставить("ОтсечьОтрицательныеОстаткиБезПоступлений", АК_ОтсечьОтрицательныеОстаткиБезПоступлений());
	НЗ.Вставить("СоздатьТаблицуОбменаНоменклатуры", АК_СоздатьТаблицуОбменаНоменклатуры());
	НЗ.Вставить("СоздатьТаблицуОтправителейТовара", АК_СоздатьТаблицуОтправителейТовара());
	НЗ.Вставить("СоздатьТаблицуПолучателейТовара", АК_СоздатьТаблицуПолучателейТовара());
	
	Возврат НЗ;
КонецФункции

//+++AK sole 2018.04.02 ИП-00017896.01
Функция АК_ПолучитьОстаткиПоСкладамРасхождений()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	ПрочиеСклады.Склад.Владелец КАК ТТВладелец,
|	ПрочиеСклады.Склад,
|	ПрочиеСклады.Номенклатура,
|	ПрочиеСклады.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
|	СУММА(ВЫБОР
|			КОГДА ПрочиеСклады.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
|				ТОГДА ПрочиеСклады.Количество
|			ИНАЧЕ -1 * ПрочиеСклады.Количество
|		КОНЕЦ) КАК КоличествоОстаток
|ПОМЕСТИТЬ втСводныеОстатки
|ИЗ
|	РегистрНакопления.ПрочиеСклады КАК ПрочиеСклады
|ГДЕ
|	ПрочиеСклады.Регистратор.Ссылка <> &Регистратор
|	И ПрочиеСклады.Активность = ИСТИНА
|	И ПрочиеСклады.Период <= &ДатаПо
|
|СГРУППИРОВАТЬ ПО
|	ПрочиеСклады.Склад,
|	ПрочиеСклады.Номенклатура,
|	ПрочиеСклады.Склад.Владелец,
|	ПрочиеСклады.Номенклатура.ЕдиницаХраненияОстатков
|
|ИМЕЮЩИЕ
|	СУММА(ВЫБОР
|			КОГДА ПрочиеСклады.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
|				ТОГДА ПрочиеСклады.Количество
|			ИНАЧЕ -1 * ПрочиеСклады.Количество
|		КОНЕЦ) <> 0
|
|ИНДЕКСИРОВАТЬ ПО
|	ТТВладелец,
|	ПрочиеСклады.Номенклатура,
|	ЕдиницаИзмерения";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.02 ИП-00017896.01
Функция АК_ПолучитьОтрицательныеОстаткиПоОсновнымСкладам()
	
	ТекстЗапроса =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ТоварыНаСкладахОстатки.Склад.Владелец как ТТВладелец,
|	ТоварыНаСкладахОстатки.Склад,
|	ТоварыНаСкладахОстатки.Номенклатура,
|	ТоварыНаСкладахОстатки.ЕдиницаИзмерения,
|	ТоварыНаСкладахОстатки.КоличествоОстаток
|
|   	ПОМЕСТИТЬ втОтрицательныеОстаткиПоОсновнымСкладам
|	
|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГрДатаПо) КАК ТоварыНаСкладахОстатки
|ГДЕ 
|		ТоварыНаСкладахОстатки.Склад = ТоварыНаСкладахОстатки.Склад.Владелец.СкладТорговогоЗала 
|	И	ТоварыНаСкладахОстатки.КоличествоОстаток < 0
|";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.03 ИП-00017896.01
Функция АК_ПолучитьПоложительныеОстаткиПоСкладамРасхождений()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втСводныеОстатки.ТТВладелец,
|	втСводныеОстатки.Склад,
|	втСводныеОстатки.Номенклатура,
|	втСводныеОстатки.ЕдиницаИзмерения,
|	втСводныеОстатки.КоличествоОстаток + ЕСТЬNULL(втОО.КоличествоОстаток,0) КАК КоличествоОстаток
|
|   	ПОМЕСТИТЬ втПоложительныеОстаткиБО
|
|ИЗ втСводныеОстатки
|	ЛЕВОЕ СОЕДИНЕНИЕ втОтрицательныеОстаткиПоОсновнымСкладам КАК втОО ПО
|			втОО.ТТВладелец = втСводныеОстатки.ТТВладелец
|		И	втОО.Номенклатура = втСводныеОстатки.Номенклатура
|		И	втОО.ЕдиницаИзмерения = втСводныеОстатки.ЕдиницаИзмерения
|
|	ГДЕ (втСводныеОстатки.КоличествоОстаток + ЕСТЬNULL(втОО.КоличествоОстаток,0)) > 0
|";

	Возврат ТекстЗапроса;
КонецФункции

//+++АК sole 2018.04.10 ИП-00017896.01
Функция АК_ПолучитьСписокПоступленийВМесяце()
	
	ТекстЗапроса =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	РасходныйОрдерСклад.Склад.Владелец.id_TT КАК id_TT,
|	РасходныйОрдерСклад.Склад.Владелец КАК РЦ,
|	втСводныеОстатки.ТТВладелец,
|	втСводныеОстатки.Номенклатура,
|	втСводныеОстатки.ЕдиницаИзмерения,
|	РасходныйОрдерСклад.Дата,
|	тТовары.Количество
|ПОМЕСТИТЬ втСписокПоступлений
|ИЗ
|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСводныеОстатки КАК втСводныеОстатки
|		ПО (втСводныеОстатки.ТТВладелец = РасходныйОрдерСклад.Получатель)
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК тТовары
|		ПО (тТовары.Ссылка = РасходныйОрдерСклад.Ссылка)
|			И (тТовары.Номенклатура = втСводныеОстатки.Номенклатура)
|			И (тТовары.ЕдиницаИзмерения = втСводныеОстатки.ЕдиницаИзмерения)
|ГДЕ
|	РасходныйОрдерСклад.Дата МЕЖДУ &ДатаС И &ДатаПо
|	И РасходныйОрдерСклад.ВидОперации = &ВидОперации
|	И РасходныйОрдерСклад.Получатель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
|	И РасходныйОрдерСклад.Проведен = ИСТИНА
|	И РасходныйОрдерСклад.ПометкаУдаления = ЛОЖЬ
|	И РасходныйОрдерСклад.Склад.Владелец.id_TT В (8, 30)";
	
	Возврат ТекстЗапроса;	
КонецФункции

//+++АК sole 2018.04.09 ИП-00017896.01
Функция АК_ПолучитьСписокПоследнихПоступленийВМесяце()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втСП.ТТВладелец,
|	втСП.Номенклатура,
|   втСП.ЕдиницаИзмерения,
|   МАКСИМУМ(втСП.Дата) КАК Дата
|
|		ПОМЕСТИТЬ втСписокПоследнихПоступлений
|
|ИЗ втСписокПоступлений КАК втСП
|СГРУППИРОВАТЬ ПО
|	втСП.ТТВладелец,
|	втСП.Номенклатура,
|   втСП.ЕдиницаИзмерения
|";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++АК sole 2018.04.10 ИП-00017896.01
Функция АК_СформироватьТаблицуПоступлениеТовара()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	ЕСТЬNULL(втСП1.РЦ, втСП2.РЦ) КАК РЦ,
|	втСПП.ТТВладелец КАК Получатель,
|	втСПП.Дата,
|	втСПП.Номенклатура,
|   втСПП.ЕдиницаИзмерения,
|   СУММА(ЕСТЬNULL(втСП1.Количество, втСП2.Количество)) КАК Количество
|
|		ПОМЕСТИТЬ втПоступлениеТовара
|
|ИЗ втСписокПоследнихПоступлений КАК втСПП
|	ЛЕВОЕ СОЕДИНЕНИЕ втСписокПоступлений КАК втСП1 ПО
|			втСП1.id_TT = 8
|		И	втСП1.Дата = втСПП.Дата
|		И	втСП1.Номенклатура = втСПП.Номенклатура
|		И	втСП1.ЕдиницаИзмерения = втСПП.ЕдиницаИзмерения
|
|	ЛЕВОЕ СОЕДИНЕНИЕ втСписокПоступлений КАК втСП2 ПО
|			втСП2.id_TT = 30
|		И	втСП2.Дата = втСПП.Дата
|		И	втСП2.Номенклатура = втСПП.Номенклатура
|		И	втСП2.ЕдиницаИзмерения = втСПП.ЕдиницаИзмерения
|		И	втСП1.РЦ ЕСТЬ NULL
|
|СГРУППИРОВАТЬ ПО
|	втСП1.РЦ, 
|	втСП2.РЦ,
|	втСПП.ТТВладелец,
|	втСПП.Дата,
|	втСПП.Номенклатура,
|   втСПП.ЕдиницаИзмерения
|
|";
	
	Возврат	ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.03 ИП-00017896.01
Функция АК_ОграничитьПоложительныеОстаткиПоступлениями()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втПТ.РЦ,
|	втПОБО.ТТВладелец,
|	втПТ.Дата,
|	втПОБО.Склад,
|	втПОБО.Номенклатура,
|	втПОБО.ЕдиницаИзмерения,
|	ВЫБОР 
|		КОГДА втПТ.Количество < втПОБО.КоличествоОстаток ТОГДА втПТ.Количество
|		ИНАЧЕ втПОБО.КоличествоОстаток
|	КОНЕЦ КАК КоличествоОстаток
|
|		ПОМЕСТИТЬ втПоложительныеОстатки
|
|ИЗ втПоложительныеОстаткиБО КАК втПОБО
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоступлениеТовара КАК втПТ ПО 
|			втПТ.Получатель = втПОБО.ТТВладелец
|		И	втПТ.Номенклатура = втПОБО.Номенклатура
|		И	втПТ.ЕдиницаИзмерения = втПОБО.ЕдиницаИзмерения
|";	
	
	Возврат ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.03 ИП-00017896.01
Функция АК_ОтсечьОтрицательныеОстаткиБезПоступлений()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втПТ.РЦ,
|	втСО.ТТВладелец,
|	втПТ.Дата,
|	втСО.Склад,
|	втСО.Номенклатура,
|	втСО.ЕдиницаИзмерения,
|	-1*втСО.КоличествоОстаток КАК КоличествоОстаток
|
|		ПОМЕСТИТЬ втОтрицательныеОстатки
|
|ИЗ втСводныеОстатки КАК втСО
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоступлениеТовара КАК втПТ ПО 
|			втПТ.Получатель = втСО.ТТВладелец
|		И	втПТ.Номенклатура = втСО.Номенклатура
|		И	втПТ.ЕдиницаИзмерения = втСО.ЕдиницаИзмерения
|
|ГДЕ втСО.КоличествоОстаток < 0
|";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.03 ИП-00017896.01
Функция АК_СоздатьТаблицуОбменаНоменклатуры()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втПО.РЦ,
|	втПО.Номенклатура,
|	втПО.ЕдиницаИзмерения,
|   СУММА(втПО.КоличествоОстаток) КАК КоличествоОстаток
|
|		ПОМЕСТИТЬ втПоложительныеОстаткиРЦ
|
|ИЗ втПоложительныеОстатки КАК втПО
|
|СГРУППИРОВАТЬ ПО
|	втПО.РЦ,
|	втПО.Номенклатура,
|	втПО.ЕдиницаИзмерения
|;
|//////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втОО.РЦ,
|	втОО.Номенклатура,
|	втОО.ЕдиницаИзмерения,
|   СУММА(втОО.КоличествоОстаток) КАК КоличествоОстаток
|
|		ПОМЕСТИТЬ втОтрицательныеОстаткиРЦ
|
|ИЗ втОтрицательныеОстатки КАК втОО
|СГРУППИРОВАТЬ ПО
|	втОО.РЦ,
|	втОО.Номенклатура,
|	втОО.ЕдиницаИзмерения
|;
|//////////////////////////////////////////////////////////
|ВЫБРАТЬ
|   втООРЦ.РЦ,
|	втООРЦ.Номенклатура,
|	втООРЦ.ЕдиницаИзмерения,
|	ВЫБОР
|		КОГДА втПОРЦ.КоличествоОстаток < втООРЦ.КоличествоОстаток ТОГДА втПОРЦ.КоличествоОстаток
|       ИНАЧЕ втООРЦ.КоличествоОстаток
|   КОНЕЦ КАК Количество
|
|		ПОМЕСТИТЬ втТаблицаОбменаНоменклатуры
|
|ИЗ втОтрицательныеОстаткиРЦ КАК втООРЦ
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоложительныеОстаткиРЦ КАК втПОРЦ ПО
|			втПОРЦ.РЦ = втООРЦ.РЦ
|		И	втПОРЦ.Номенклатура = втООРЦ.Номенклатура
|		И	втПОРЦ.ЕдиницаИзмерения = втООРЦ.ЕдиницаИзмерения
|
|";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.04 ИП-00017896.01
Функция АК_СоздатьТаблицуОтправителейТовара()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втПО.РЦ,
|	втПО.Склад,
|	втПО.Дата,
|	втПО.Номенклатура,
|	втПО.ЕдиницаИзмерения,
|   втПО.КоличествоОстаток
|
|ИЗ втТаблицаОбменаНоменклатуры КАК втТОН
|	ЛЕВОЕ СОЕДИНЕНИЕ втПоложительныеОстатки КАК втПО ПО
|   		втПО.РЦ = втТОН.РЦ
|		И	втПО.Номенклатура = втТОН.Номенклатура
|		И	втПО.ЕдиницаИзмерения = втТОН.ЕдиницаИзмерения
|
|УПОРЯДОЧИТЬ ПО
|	втПО.РЦ,
|	втПО.Номенклатура,
|	втПО.ЕдиницаИзмерения,
|   втПО.КоличествоОстаток УБЫВ
|";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++AK sole 2018.04.04 ИП-00017896.01
Функция АК_СоздатьТаблицуПолучателейТовара()
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	втОО.РЦ,
|	втОО.Склад,
|	втОО.Дата,
|	втОО.Номенклатура,
|	втОО.ЕдиницаИзмерения,
|   втОО.КоличествоОстаток
|
|ИЗ втТаблицаОбменаНоменклатуры КАК втТОН
|	ЛЕВОЕ СОЕДИНЕНИЕ втОтрицательныеОстатки КАК втОО ПО
|   		втОО.РЦ = втТОН.РЦ
|		И	втОО.Номенклатура = втТОН.Номенклатура
|		И	втОО.ЕдиницаИзмерения = втТОН.ЕдиницаИзмерения
|
|УПОРЯДОЧИТЬ ПО
|	втОО.РЦ,
|	втОО.Номенклатура,
|	втОО.ЕдиницаИзмерения,
|   втОО.КоличествоОстаток УБЫВ
|";
	
	Возврат ТекстЗапроса;
КонецФункции

//+++АК sole 2018.04.10 ИП-00017896.01
Процедура АК_СформироватьДвиженияТоваров_в_РЦ(БПРИ)
	
	тзОбменаНоменклатуры = БПРИ.тзОбменаНоменклатуры;
	
	БПРИ.Запрос.Текст = БПРИ.НЗ.СоздатьТаблицуОтправителейТовара;
	тзОтправителиТовара = БПРИ.Запрос.Выполнить().Выгрузить();
	
	рПрочиеСклады = Движения.ПрочиеСклады;

	ПараметрыОтбора = Новый Структура;
	
	ПредРЦ = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПредНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПредЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Лимит = 0;
	
	Для Каждого Стр Из тзОтправителиТовара Цикл
		Если 
			(
					ПредРЦ <> Стр["РЦ"]
				ИЛИ ПредНоменклатура <> Стр["Номенклатура"] 
				ИЛИ	ПредЕдИзм <> Стр["ЕдиницаИзмерения"]
			) Тогда
				
			ПредРЦ = Стр["РЦ"];
			ПредНоменклатура = Стр["Номенклатура"];
			ПредЕдИзм = Стр["ЕдиницаИзмерения"];
			
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("РЦ", ПредРЦ);
			ПараметрыОтбора.Вставить("Номенклатура", ПредНоменклатура);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ПредЕдИзм);
			НайденныеСтроки = тзОбменаНоменклатуры.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Лимит = НайденныеСтроки[0].Количество;
			Иначе
				Лимит = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Лимит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = Стр["КоличествоОстаток"];
		
		Если Количество > Лимит Тогда
			Количество = Лимит;
		КонецЕсли;
		
		// Возвращаем Товары в РЦ
		
		Движение = рПрочиеСклады.ДобавитьРасход();
		Движение.Склад = Стр["Склад"]; 
		Движение.Период = Стр["Дата"];
		Движение.Номенклатура = Стр["Номенклатура"];
		Движение.СтатьяТД = Перечисления.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ;
		Движение.Количество = Количество;
		Движение.ЕдиницаИзмерения = Стр["ЕдиницаИзмерения"];
		
		Движение = рПрочиеСклады.ДобавитьПриход();
		Движение.Склад = Стр["РЦ"].СкладРасхождений; 
		Движение.Период = Стр["Дата"];
		Движение.Номенклатура = Стр["Номенклатура"];
		Движение.СтатьяТД = Перечисления.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ;
		Движение.Количество = Количество;
		Движение.ЕдиницаИзмерения = Стр["ЕдиницаИзмерения"];
		
		Лимит = Лимит - Количество;
	КонецЦикла;
	
КонецПроцедуры

Процедура АК_СформироватьДвиженияТоваров_в_ТТ(БПРИ)
	
	тзОбменаНоменклатуры = БПРИ.тзОбменаНоменклатуры;
	
	БПРИ.Запрос.Текст = БПРИ.НЗ.СоздатьТаблицуПолучателейТовара;
	тзПолучателиТовара = БПРИ.Запрос.Выполнить().Выгрузить();
	
	рПрочиеСклады = Движения.ПрочиеСклады;
	
	ПараметрыОтбора = Новый Структура;
	
	ПредРЦ = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПредНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПредЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Лимит = 0;
	
	Для Каждого Стр Из тзПолучателиТовара Цикл
		Если 
			(
					ПредРЦ <> Стр["РЦ"]
				ИЛИ ПредНоменклатура <> Стр["Номенклатура"] 
				ИЛИ	ПредЕдИзм <> Стр["ЕдиницаИзмерения"]
			) Тогда
				
			ПредРЦ = Стр["РЦ"];
			ПредНоменклатура = Стр["Номенклатура"];
			ПредЕдИзм = Стр["ЕдиницаИзмерения"];
			
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("РЦ", ПредРЦ);
			ПараметрыОтбора.Вставить("Номенклатура", ПредНоменклатура);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ПредЕдИзм);
			НайденныеСтроки = тзОбменаНоменклатуры.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Лимит = НайденныеСтроки[0].Количество;
			Иначе
				Лимит = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Лимит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = Стр["КоличествоОстаток"];
		
		Если Количество > Лимит Тогда
			Количество = Лимит;
		КонецЕсли;
		
		// Отправляем Товары в ТТ
		
		Движение = рПрочиеСклады.ДобавитьРасход();
		Движение.Склад = Стр["РЦ"].СкладРасхождений; 
		Движение.Период = Стр["Дата"];
		Движение.Номенклатура = Стр["Номенклатура"];
		Движение.СтатьяТД = Перечисления.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ;
		Движение.Количество = Количество;
		Движение.ЕдиницаИзмерения = Стр["ЕдиницаИзмерения"];
		
		Движение = рПрочиеСклады.ДобавитьПриход();
		Движение.Склад = Стр["Склад"];
		Движение.Период = Стр["Дата"];
		Движение.Номенклатура = Стр["Номенклатура"];
		Движение.СтатьяТД = Перечисления.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ;
		Движение.Количество = Количество;
		Движение.ЕдиницаИзмерения = Стр["ЕдиницаИзмерения"];
		
		Лимит = Лимит - Количество;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

//+++АК SaMi 2018.04.25 ИП-00018340.01 
Процедура ПроводкиПоПроизводствуВМагазинах()
	
	Движения.ДвиженияТоваровПоЛистамУчета.Очистить();
	Движения.ДвиженияТоваровПоЛистамУчета.Записать();
	Движения.ДвиженияТоваровПоЛистамУчета.Записывать = Истина;

	Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Очистить();
	Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Записать();
	Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Записывать = Истина;

	Движения.ПрочиеСклады.Очистить();
	Движения.ПрочиеСклады.Записать();
	Движения.ПрочиеСклады.Записывать = Истина;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Номенклатура", РасчетОднойНоменклатуры);
	
	// Определяем недостачи по номенклатуре-сырью с признаком НедостачиСписыватьНаПроизводство и переносим их на себестоимость производства (пропорционально участию данных позиций в формировании продукции в течение месяца)
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.СтруктурнаяЕдиница,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.Номенклатура,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.НоменклатураПродукция,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.СписаноОборот КАК Списано
	               |ПОМЕСТИТЬ ВТ_БазаРаспределения
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчетаПроизводство.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Номенклатура.НедостачиСписыватьНаПроизводство
	               |				И НоменклатураПродукция.ПроизводитсяВМагазине) КАК ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты
	               |ГДЕ
	               |	ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.СписаноОборот <> 0
	               |	И (ДвиженияТоваровПоЛистамУчетаПроизводствоОбороты.Номенклатура = &Номенклатура
	               |			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_БазаРаспределения.СтруктурнаяЕдиница,
	               |	ВТ_БазаРаспределения.Номенклатура,
	               |	ВТ_БазаРаспределения.НоменклатураПродукция,
	               |	ВТ_БазаРаспределения.Списано
	               |ИЗ
	               |	ВТ_БазаРаспределения КАК ВТ_БазаРаспределения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчетаОбороты.СтруктурнаяЕдиница,
	               |	ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура,
	               |	ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			ВидДвиженияТовара = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Разница)
	               |				И (СтруктурнаяЕдиница, Номенклатура) В
	               |					(ВЫБРАТЬ
	               |						ВТ_БазаРаспределения.СтруктурнаяЕдиница,
	               |						ВТ_БазаРаспределения.Номенклатура
	               |					ИЗ
	               |						ВТ_БазаРаспределения)) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПрочиеСклады.Склад,
	               |	ПрочиеСклады.Номенклатура,
	               |	СУММА(ПрочиеСклады.Количество) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ПрочиеСклады КАК ПрочиеСклады
	               |ГДЕ
	               |	ПрочиеСклады.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ПрочиеСклады.СтатьяТД = ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Разница)
	               |	И (ПрочиеСклады.Склад, ПрочиеСклады.Номенклатура) В
	               |			(ВЫБРАТЬ
	               |				ВТ_БазаРаспределения.СтруктурнаяЕдиница.СкладРасхождений,
	               |				ВТ_БазаРаспределения.Номенклатура
	               |			ИЗ
	               |				ВТ_БазаРаспределения)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПрочиеСклады.Склад,
	               |	ПрочиеСклады.Номенклатура";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	БазаРаспределения = РезультатыЗапроса[1].Выгрузить();
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	
	// Формируем движения по регистрам накопления, отражающие изменения вида движения с Разницы на Производство
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
		
		НоваяЗапись.Период = КонецМесяца(Дата);			
		НоваяЗапись.Номенклатура = Выборка.Номенклатура;
		НоваяЗапись.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Разница;
		НоваяЗапись.СтруктурнаяЕдиница= Выборка.СтруктурнаяЕдиница;
		НоваяЗапись.Количество = - Выборка.Количество;
		
		НоваяЗапись = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
		
		НоваяЗапись.Период = КонецМесяца(Дата);			
		НоваяЗапись.Номенклатура = Выборка.Номенклатура;
		НоваяЗапись.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Производство;
		НоваяЗапись.СтруктурнаяЕдиница= Выборка.СтруктурнаяЕдиница;
		НоваяЗапись.Количество = Выборка.Количество;
		
		//
		НайденныеСтроки = БазаРаспределения.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Номенклатура", Выборка.СтруктурнаяЕдиница, Выборка.Номенклатура));
		МассивКоэффициентов = БазаРаспределения.Скопировать(НайденныеСтроки).ВыгрузитьКолонку("Списано");
	
		РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(Выборка.Количество, МассивКоэффициентов , 3);
			
		Для Сч = 0 По НайденныеСтроки.Количество() - 1 Цикл
			НоваяЗапись = Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Добавить();
			
			НоваяЗапись.Период = КонецМесяца(Дата);			
			НоваяЗапись.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;			
			НоваяЗапись.Номенклатура = Выборка.Номенклатура;
			НоваяЗапись.НоменклатураПродукция = НайденныеСтроки[Сч].НоменклатураПродукция;
			НоваяЗапись.Списано = - РезультатРаспределения[Сч];
		КонецЦикла;
	КонецЦикла;  
	
	Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Записать();
	
	// Формируем сторнирующие движения по регистру ПрочиеСклады
	Выборка = РезультатыЗапроса[3].Выбрать();

	Пока Выборка.Следующий() Цикл	
		НоваяЗапись = Движения.ПрочиеСклады.ДобавитьПриход();
		
		НоваяЗапись.Период = КонецМесяца(Дата);			
		НоваяЗапись.Номенклатура = Выборка.Номенклатура;
		НоваяЗапись.Склад = Выборка.Склад;
		НоваяЗапись.Количество = - Выборка.Количество;
		НоваяЗапись.СтатьяТД = Перечисления.ВидДвиженияТовараПоЛистуУчета.Разница;	
	КонецЦикла;  		
		
	// Проводки по регистру бухгалтерии
	СчетТовары = ПланыСчетов.Финансовый.Товары;
	СчетУпаковка = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	
	// Списание себестоимости сырья на продукцию
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.Номенклатура,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.ПроизведеноОборот КАК Количество
	               |ПОМЕСТИТЬ ВТ_Произведено
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчетаПроизводство.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			(Номенклатура = &Номенклатура
	               |				ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |				И НЕ Номенклатура.НеУчитыватьВЗакрытииМесяца) КАК ДвиженияТоваровПоЛистамУчетаПроизводство
	               |ГДЕ
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.ПроизведеноОборот > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.Номенклатура,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.НоменклатураПродукция КАК НоменклатураПродукция,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.Номенклатура.ТипТовара КАК ТипТовара,
	               |	ДвиженияТоваровПоЛистамУчетаПроизводство.СписаноОборот КАК Списано,
	               |	СчетаУчетаНоменклатурыСрезПоследних.СчетУчета,
	               |	СчетаУчетаНоменклатурыСрезПоследнихПродукция.СчетУчета КАК СчетУчетаПродукция,
	               |	ЕСТЬNULL(ВТ_Произведено.Количество, 0) КАК Произведено
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТоваровПоЛистамУчетаПроизводство.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			(Номенклатура = &Номенклатура
	               |				ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |				И НЕ Номенклатура.НеУчитыватьВЗакрытииМесяца
	               |				И НоменклатураПродукция. <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ДвиженияТоваровПоЛистамУчетаПроизводство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&ДатаКон, ) КАК СчетаУчетаНоменклатурыСрезПоследних
	               |		ПО ДвиженияТоваровПоЛистамУчетаПроизводство.Номенклатура = СчетаУчетаНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(&ДатаКон, ) КАК СчетаУчетаНоменклатурыСрезПоследнихПродукция
	               |		ПО ДвиженияТоваровПоЛистамУчетаПроизводство.НоменклатураПродукция = СчетаУчетаНоменклатурыСрезПоследнихПродукция.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Произведено КАК ВТ_Произведено
	               |		ПО ДвиженияТоваровПоЛистамУчетаПроизводство.НоменклатураПродукция = ВТ_Произведено.Номенклатура
	               |ИТОГИ ПО
	               |	НоменклатураПродукция";
				   
	ВыборкаПродукция = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275
	МассивНом = Новый Массив;
	
	Пока ВыборкаПродукция.Следующий() Цикл
		Выборка = ВыборкаПродукция.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивНом.Добавить(Выборка.Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаПродукция.Сбросить();
	
	СоответствиеНоменклатурыИСчета = Справочники.Номенклатура.ПолучитьСчетаУчетаОбъектов(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНом), КонецМесяца(Дата));	
	//---АК Susk (Суслин К.В.)  
	
	Пока ВыборкаПродукция.Следующий() Цикл
		УказатьКоличествоПродукции = Истина;
		
		Выборка = ВыборкаПродукция.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275
			СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(Выборка.Номенклатура);					
			СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
			//---АК Susk (Суслин К.В.) 			 
			
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= КонецМесяца(Дата);
			Проводка.Организация 								= ОрганизацияОсновная;
			Проводка.Содержание									= "Списание себестоимости сырья на продукцию";
			Проводка.НомерЖурнала								= "ТТ";
			
			//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275	 
			
			//Если ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
			//	Проводка.СчетКт										= Выборка.СчетУчета;
			//	Если Выборка.СчетУчета = СчетТовары Тогда
			//		Проводка.СубконтоКт.Товары							= Выборка.Номенклатура;
			//	Иначе
			//		Проводка.СубконтоКт.Материалы						= Выборка.Номенклатура;
			//	КонецЕсли;	
			//Иначе	
			//	Если Выборка.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			//		Проводка.СчетКт										= СчетУпаковка;
			//		Проводка.СубконтоКт.Материалы						= Выборка.Номенклатура;
			//	Иначе	
			//		Проводка.СчетКт										= СчетТовары;
			//		Проводка.СубконтоКт.Товары							= Выборка.Номенклатура;
			//	КонецЕсли;
			//КонецЕсли;	
			//
			//Если ЗначениеЗаполнено(Выборка.СчетУчетаПродукция) Тогда
			//	Проводка.СчетДт										= Выборка.СчетУчетаПродукция;
			//	Если Выборка.СчетУчетаПродукция = СчетТовары Тогда
			//		Проводка.СубконтоДт.Товары							= Выборка.НоменклатураПродукция;
			//	Иначе
			//		Проводка.СубконтоДт.Материалы						= Выборка.НоменклатураПродукция;
			//	КонецЕсли;	
			//Иначе	
			//	Проводка.СчетДт										= СчетТовары;
			//	Проводка.СубконтоДт.Товары							= Выборка.НоменклатураПродукция;
			//КонецЕсли;	
			
			//Проводка.СчетКт										= СчетУчетаНоменклатуры;
			//Если СчетУчетаНоменклатуры = СчетУпаковка Тогда
			//	Проводка.СубконтоКт.Материалы							= Выборка.Номенклатура;
			//Иначе
			//	Проводка.СчетКт										= СчетТовары;
			//	Проводка.СубконтоКт.Товары						= Выборка.Номенклатура;
			//КонецЕсли;	
			//
			//Проводка.СчетДт										= СчетУчетаНоменклатурыПродукция;
			//Если СчетУчетаНоменклатурыПродукция = СчетУпаковка Тогда
			//	Проводка.СубконтоДт.Материалы							= Выборка.НоменклатураПродукция;
			//Иначе
			//	Проводка.СчетДт										= СчетТовары;
			//	Проводка.СубконтоДт.Товары						= Выборка.НоменклатураПродукция;
			//КонецЕсли;
			//---АК Susk (Суслин К.В.) 
			
			Проводка.СчетКт										= СчетУчетаНоменклатуры;
			
			Если СчетУчетаНоменклатуры = СчетТовары Тогда
				Проводка.СубконтоКт.Товары						= Выборка.Номенклатура;				
			ИначеЕсли СчетУчетаНоменклатуры = СчетУпаковка Тогда
				Проводка.СубконтоКт.Материалы							= Выборка.Номенклатура;				
			Иначе
				Проводка.СчетКт										= СчетТовары;
				Проводка.СубконтоКт.Товары							= Выборка.Номенклатура;
			КонецЕсли;	
			
			Проводка.СчетДт = СчетТовары;
			
			Проводка.СубконтоДт.Товары						= Выборка.НоменклатураПродукция;
			
			Проводка.КоличествоКт = Выборка.Списано;
			
			Если УказатьКоличествоПродукции Тогда
				Проводка.КоличествоДт = Выборка.Произведено;
				УказатьКоличествоПродукции = Ложь;
			КонецЕсли; 
																		
			Себестоимость = ПолучитьСебестоимость(Выборка.Номенклатура);
			Если Себестоимость <> Неопределено Тогда
				Проводка.Сумма = Окр(Выборка.Списано * Себестоимость, 2);
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;  
	
КонецПроцедуры	
//---АК SaMi  2018.04.25 

//+++АК SaMi 2018.06.07 ИП-00018553
Процедура ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, СтатьяДоходовРасходов, ИмяКолонки)
	
	Если Строка[ИмяКолонки] = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Период = Дата;
	НоваяЗапись.ФинансовыйУчет = Истина;
	НоваяЗапись.Документ = Ссылка;
	НоваяЗапись.Организация = ОрганизацияОсновная;
	НоваяЗапись.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница;
	НоваяЗапись.Номенклатура = Строка.Номенклатура ;
	НоваяЗапись.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
	
	НоваяЗапись.Количество = Строка[ИмяКолонки];
	НоваяЗапись.Сумма = Строка[ИмяКолонки + "_Сумма"];

	Если ИмяКолонки = "Разница" Тогда
		НоваяЗапись.Количество = - НоваяЗапись.Количество;
		НоваяЗапись.Сумма = - НоваяЗапись.Сумма;
	КонецЕсли; 
КонецПроцедуры 
//---АК SaMi  2018.06.07 

//+++АК SaMi 2018.06.07 ИП-00018553
Процедура СформироватьДвиженияПоСписаниюТоваровВБухгалтерскомУчетеПоЛистамУчета(ТабДанныеДвижения, ТабНастройкиПроводок)
	
	//Возврат;
	
	НастройкиПроводок = Новый Соответствие;
	
	Для Каждого Строка Из ТабНастройкиПроводок Цикл
		НастройкиПроводок.Вставить(Строка.ВидОперации, Строка.СтатьяДоходовРасходов);
	КонецЦикла;  
	
	ВидПроданного = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Продажа;
	ВидСписанного = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Списание;
	ВидПодарки = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Подарки;
	ВидДегустация = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Дегустация;
	ВидПоКачеству = Перечисления.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоКачеству;
	ВидПоСроку = Перечисления.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоСроку;
	ВидБой = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Бой;
	ВидИнвентаризация = Перечисления.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл;
	ВидВозвратПокупателя = Перечисления.ВидыОперацийВУчете.ЛистыУчета_ВозвратПокупателя;
	
	//
	ТабДанныеДвижения.Свернуть("СтруктурнаяЕдиница, Номенклатура", "Продажа, Списание, СписаниеПоКачеству, Дегустация, Акция, Разница, Бой, ВозвратПокупателя, Продажа_Сумма, Списание_Сумма, СписаниеПоКачеству_Сумма, Дегустация_Сумма, Акция_Сумма, Разница_Сумма, Бой_Сумма, ВозвратПокупателя_Сумма");	
		
	НаборЗаписей = РегистрыСведений.ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ФинансовыйУчет.Установить(Истина);
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);

	Для Каждого Строка Из ТабДанныеДвижения Цикл
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидПроданного], "Продажа");
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидДегустация], "Дегустация");
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидПоСроку], "Списание");			
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидПоКачеству], "СписаниеПоКачеству");			
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидБой], "Бой");						
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидПодарки], "Акция");									
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидИнвентаризация], "Разница");												
		ДобавитьДвижениеПоСписаниюВБУ(НаборЗаписей, Строка, НастройкиПроводок[ВидВозвратПокупателя], "ВозвратПокупателя");															
	КонецЦикла;  
	
	НаборЗаписей.Записать();
				
	
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "ФинансовыйУчет");
	
	НаборЗаписей.Отбор.ФинансовыйУчет.Установить(Ложь);
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры 
//---АК SaMi  2018.06.07 

//+++АК SaMi 2018.06.08 ИП-00018553 
Процедура СформироватьДвиженияПоСписаниюТоваровВБухгалтерскомУчете()
	
	//Возврат;
	
	Движения.Финансовый.Записать();
	
	//
	НаборЗаписей = РегистрыСведений.ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.СоздатьНаборЗаписей();
	
	ТекущийПериод = НачалоМесяца(Дата);
	
	Пока ТекущийПериод < НачалоДня(КонецМесяца(Дата)) Цикл
		НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
		НаборЗаписей.Записать();
		ТекущийПериод = ТекущийПериод + 24 * 60 * 60;
	КонецЦикла;  
	
	НаборЗаписей = РегистрыСведений.ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.Документ
	                      |ИЗ
	                      |	РегистрСведений.ДвиженияПоСписаниюТоваровВБухгалтерскомУчете КАК ДвиженияПоСписаниюТоваровВБухгалтерскомУчете
	                      |ГДЕ
	                      |	ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.Период = &Период
	                      |	И (ВЫРАЗИТЬ(ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.Документ КАК Документ.ЗакрытиеМесяца).ВидЗакрытия <> 0
	                      |			ИЛИ НЕ ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.Документ ССЫЛКА Документ.ЗакрытиеМесяца)");
	
	Запрос.УстановитьПараметр("Период", НачалоДня(КонецМесяца(Дата)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Записать();
	КонецЦикла;   
	
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СоответствиеСтатейДРСтатьямБУ.Статья,
	                      |	СоответствиеСтатейДРСтатьямБУ.КорСчет,
	                      |	МАКСИМУМ(СоответствиеСтатейДРСтатьямБУ.СтатьяБУ) КАК СтатьяБУ
	                      |ПОМЕСТИТЬ ВТ_СтатьиОсновные
	                      |ИЗ
	                      |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	                      |ГДЕ
	                      |	СоответствиеСтатейДРСтатьямБУ.Основное
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СоответствиеСтатейДРСтатьямБУ.Статья,
	                      |	СоответствиеСтатейДРСтатьямБУ.КорСчет
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_СтатьиОсновные.Статья,
	                      |	ВТ_СтатьиОсновные.КорСчет,
	                      |	ВТ_СтатьиОсновные.СтатьяБУ
	                      |ПОМЕСТИТЬ ВТ_СоответствиеСтатей
	                      |ИЗ
	                      |	ВТ_СтатьиОсновные КАК ВТ_СтатьиОсновные
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СоответствиеСтатейДРСтатьямБУ.Статья,
	                      |	СоответствиеСтатейДРСтатьямБУ.КорСчет,
	                      |	МАКСИМУМ(СоответствиеСтатейДРСтатьямБУ.СтатьяБУ)
	                      |ИЗ
	                      |	РегистрСведений.СоответствиеСтатейДРСтатьямБУ КАК СоответствиеСтатейДРСтатьямБУ
	                      |ГДЕ
	                      |	НЕ (СоответствиеСтатейДРСтатьямБУ.Статья, СоответствиеСтатейДРСтатьямБУ.КорСчет) В
	                      |				(ВЫБРАТЬ
	                      |					ВТ_СтатьиОсновные.Статья,
	                      |					ВТ_СтатьиОсновные.КорСчет
	                      |				ИЗ
	                      |					ВТ_СтатьиОсновные)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СоответствиеСтатейДРСтатьямБУ.Статья,
	                      |	СоответствиеСтатейДРСтатьямБУ.КорСчет
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) КАК Период,
	                      |	ВложенныйЗапрос.Документ,
	                      |	ВложенныйЗапрос.Организация,
	                      |	ВложенныйЗапрос.Номенклатура,
	                      |	ВложенныйЗапрос.СтруктурнаяЕдиница,
	                      |	ВложенныйЗапрос.СтатьяДоходовРасходов,
	                      |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	                      |	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	                      |ПОМЕСТИТЬ ВТ_ДвиженияФУ
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ФинансовыйОбороты.Период КАК Период,
	                      |		ФинансовыйОбороты.Регистратор КАК Документ,
	                      |		ФинансовыйОбороты.Организация КАК Организация,
	                      |		ФинансовыйОбороты.Субконто1 КАК Номенклатура,
	                      |		ФинансовыйОбороты.КорСубконто1 КАК СтруктурнаяЕдиница,
	                      |		ФинансовыйОбороты.КорСубконто2 КАК СтатьяДоходовРасходов,
	                      |		-ФинансовыйОбороты.СуммаОборот КАК Сумма,
	                      |		-ФинансовыйОбороты.КоличествоОборот КАК Количество
	                      |	ИЗ
	                      |		РегистрБухгалтерии.Финансовый.Обороты(&МесяцОбработки, КОНЕЦПЕРИОДА(&МесяцОбработки, МЕСЯЦ), Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Товары), , КорСчет В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыОбщиеДляРаспределения), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТочекДляРаспределения)), ) КАК ФинансовыйОбороты
	                      |	ГДЕ
	                      |		(ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ЗакрытиеМесяца).ВидЗакрытия <> 0
	                      |				ИЛИ НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца)
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		ФинансовыйОбороты.Период,
	                      |		ФинансовыйОбороты.Регистратор,
	                      |		ФинансовыйОбороты.Организация,
	                      |		ФинансовыйОбороты.Субконто1,
	                      |		ФинансовыйОбороты.КорСубконто1,
	                      |		ФинансовыйОбороты.КорСубконто2,
	                      |		-ФинансовыйОбороты.СуммаОборот,
	                      |		-ФинансовыйОбороты.КоличествоОборот
	                      |	ИЗ
	                      |		РегистрБухгалтерии.Финансовый.Обороты(&МесяцОбработки, КОНЕЦПЕРИОДА(&МесяцОбработки, МЕСЯЦ), Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Материалы), , КорСчет В (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТоварныеДляРаспределения), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыОбщиеДляРаспределения), ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТочекДляРаспределения)), ) КАК ФинансовыйОбороты
	                      |	ГДЕ
	                      |		(ВЫРАЗИТЬ(ФинансовыйОбороты.Регистратор КАК Документ.ЗакрытиеМесяца).ВидЗакрытия <> 0
	                      |				ИЛИ НЕ ФинансовыйОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца)) КАК ВложенныйЗапрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ),
	                      |	ВложенныйЗапрос.Документ,
	                      |	ВложенныйЗапрос.Организация,
	                      |	ВложенныйЗапрос.Номенклатура,
	                      |	ВложенныйЗапрос.СтруктурнаяЕдиница,
	                      |	ВложенныйЗапрос.СтатьяДоходовРасходов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВТ_ДвиженияФУ.Номенклатура
	                      |ПОМЕСТИТЬ ВТ_Номенклатура
	                      |ИЗ
	                      |	ВТ_ДвиженияФУ КАК ВТ_ДвиженияФУ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Номенклатура.Номенклатура,
	                      |	ЕСТЬNULL(СчетаУчетаНоменклатурыСрезПоследних.СчетУчета, ВЫБОР
	                      |			КОГДА СправочникНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар)
	                      |					И СправочникНоменклатура.ТипТовара <> ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)
	                      |				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Товары)
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Финансовый.МатералыДляВыпуска)
	                      |		КОНЕЦ) КАК СчетУчета
	                      |ПОМЕСТИТЬ ВТ_СчетаНоменклатуры
	                      |ИЗ
	                      |	ВТ_Номенклатура КАК ВТ_Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&МесяцОбработки, МЕСЯЦ), ) КАК СчетаУчетаНоменклатурыСрезПоследних
	                      |		ПО ВТ_Номенклатура.Номенклатура = СчетаУчетаНоменклатурыСрезПоследних.Номенклатура
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	                      |		ПО ВТ_Номенклатура.Номенклатура = СправочникНоменклатура.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДвиженияФУ.Период,
	                      |	ИСТИНА КАК ФинансовыйУчет,
	                      |	ВТ_ДвиженияФУ.Документ,
	                      |	ВТ_ДвиженияФУ.Организация,
	                      |	ВТ_ДвиженияФУ.Номенклатура,
	                      |	ВТ_ДвиженияФУ.СтруктурнаяЕдиница,
	                      |	ВТ_ДвиженияФУ.СтатьяДоходовРасходов,
	                      |	ВТ_ДвиженияФУ.Сумма,
	                      |	ВТ_ДвиженияФУ.Количество
	                      |ИЗ
	                      |	ВТ_ДвиженияФУ КАК ВТ_ДвиженияФУ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_ДвиженияФУ.Период,
	                      |	ЛОЖЬ,
	                      |	ВТ_ДвиженияФУ.Документ,
	                      |	ВТ_ДвиженияФУ.Организация,
	                      |	ВТ_ДвиженияФУ.Номенклатура,
	                      |	ВТ_ДвиженияФУ.СтруктурнаяЕдиница,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДвиженияФУ.СтатьяДоходовРасходов = &СтатьяКорректировки
	                      |				И ВТ_ДвиженияФУ.Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
	                      |			ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходыБУ.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров)
	                      |		ИНАЧЕ ЕСТЬNULL(ВТ_СоответствиеСтатей.СтатьяБУ, ЕСТЬNULL(ВТ_СоответствиеСтатейОбщие.СтатьяБУ, НЕОПРЕДЕЛЕНО))
	                      |	КОНЕЦ,
	                      |	СУММА(ВТ_ДвиженияФУ.Сумма),
	                      |	СУММА(ВТ_ДвиженияФУ.Количество)
	                      |ИЗ
	                      |	ВТ_ДвиженияФУ КАК ВТ_ДвиженияФУ
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаНоменклатуры КАК ВТ_СчетаНоменклатуры
	                      |		ПО ВТ_ДвиженияФУ.Номенклатура = ВТ_СчетаНоменклатуры.Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеСтатей КАК ВТ_СоответствиеСтатей
	                      |		ПО ВТ_ДвиженияФУ.СтатьяДоходовРасходов = ВТ_СоответствиеСтатей.Статья
	                      |			И (ВТ_СчетаНоменклатуры.СчетУчета = ВТ_СоответствиеСтатей.КорСчет)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеСтатей КАК ВТ_СоответствиеСтатейОбщие
	                      |		ПО ВТ_ДвиженияФУ.СтатьяДоходовРасходов = ВТ_СоответствиеСтатейОбщие.Статья
	                      |			И (ВТ_СоответствиеСтатейОбщие.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПустаяСсылка))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ДвиженияФУ.Период,
	                      |	ВТ_ДвиженияФУ.Документ,
	                      |	ВТ_ДвиженияФУ.Организация,
	                      |	ВТ_ДвиженияФУ.Номенклатура,
	                      |	ВТ_ДвиженияФУ.СтруктурнаяЕдиница,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДвиженияФУ.СтатьяДоходовРасходов = &СтатьяКорректировки
	                      |				И ВТ_ДвиженияФУ.Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
	                      |			ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходыБУ.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров)
	                      |		ИНАЧЕ ЕСТЬNULL(ВТ_СоответствиеСтатей.СтатьяБУ, ЕСТЬNULL(ВТ_СоответствиеСтатейОбщие.СтатьяБУ, НЕОПРЕДЕЛЕНО))
	                      |	КОНЕЦ");	
	
	Запрос.УстановитьПараметр("МесяцОбработки", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("СтатьяКорректировки", Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20120"));
	
	НаборЗаписей = РегистрыСведений.ДвиженияПоСписаниюТоваровВБухгалтерскомУчете.СоздатьНаборЗаписей();
	
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры 
//---АК SaMi  2018.06.08 

//+++АК LATV 2018.06.23 ИП-00018971
Процедура РазобратьКомплектыВДвиженияхПо41Счёту()

	Если ЭтотОбъект.Дата >= Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		тзНеразделямыеКомплекты = Товародвижение.АК_РазобратьКомплектыВДвиженияхПо41Счёту(Движения.Финансовый, Ссылка, ТабСебестоимость);
		
		Если тзНеразделямыеКомплекты.Количество() <> 0 Тогда
			Для Каждого Стр Из тзНеразделямыеКомплекты  Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Комплект ""%1"" невозможно разбить на составляющие из-за нулевого количества всех составляющих комплекта'")
					, Стр["Наименование"]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//+++АК SaMi 2018.09.11 ИП-00019675.01
Процедура ИнвертироватьПроводку(ИсходнаяПроводка) Экспорт
	
	НоваяПроводка = Движения.Финансовый.Добавить();
	
    НоваяПроводка.Период = ИсходнаяПроводка.Период;
    НоваяПроводка.НомерЖурнала = ИсходнаяПроводка.НомерЖурнала;
    НоваяПроводка.Организация = ИсходнаяПроводка.Организация;
    НоваяПроводка.Содержание = ИсходнаяПроводка.Содержание;
    НоваяПроводка.СчетДт = ИсходнаяПроводка.СчетКт;
    НоваяПроводка.СчетКт = ИсходнаяПроводка.СчетДт;
    
	Для Каждого Субконто из ИсходнаяПроводка.СубконтоКт Цикл
       	НоваяПроводка.СубконтоДт.Вставить(Субконто.Ключ, Субконто.Значение);			
    КонецЦикла;
    
	Для Каждого Субконто из ИсходнаяПроводка.СубконтоДт Цикл
       	НоваяПроводка.СубконтоКт.Вставить(Субконто.Ключ, Субконто.Значение);			
    КонецЦикла;
    
    НоваяПроводка.КоличествоДт =  - ИсходнаяПроводка.КоличествоКт;
    НоваяПроводка.КоличествоКт =  - ИсходнаяПроводка.КоличествоДт;
	
	НоваяПроводка.Сумма =  - ИсходнаяПроводка.Сумма;
	
	Если ИсходнаяПроводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ" Тогда
		НоваяПроводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ";
	ИначеЕсли ИсходнаяПроводка.СторонаПроводкиДляПересчетаПоСебестоимости = "ДТ" Тогда
		НоваяПроводка.СторонаПроводкиДляПересчетаПоСебестоимости = "КТ";
	КонецЕсли; 
	
	Движения.Финансовый.Удалить(ИсходнаяПроводка);
	
КонецПроцедуры
//---АК SaMi  2018.09.11 

//+++АК Susk (Суслин К.В.) 2018.08.07 ИП-00019275
Процедура ПроставитьСчетСубконто_ПроводкиПоРасхождениямПеремещенийМеждуТТ(СоответствиеНоменклатурыИСчета, СтрокаРасхождения, Движение, НастройкаПроводок, СторонаПроводки)	
	
	СтруктураСчетов = СоответствиеНоменклатурыИСчета.Получить(СтрокаРасхождения.Номенклатура);					
	СчетУчетаНоменклатуры = СтруктураСчетов.СчетУчета;
	
	Счет41_2 = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	Счет41_1 = ПланыСчетов.Финансовый.Товары;
	Счет10_6 = ПланыСчетов.Финансовый.ПрочиеМатериалы;
	
	Если СчетУчетаНоменклатуры <> Счет41_2 И СчетУчетаНоменклатуры <> Счет10_6 Тогда
		СчетУчетаНоменклатуры = Счет41_1;
	КонецЕсли;
	
	Движение["Счет" + СторонаПроводки] = СчетУчетаНоменклатуры;
	
	Если СчетУчетаНоменклатуры = Счет41_2 Тогда
		Движение["Субконто" + СторонаПроводки].Материалы = СтрокаРасхождения.Номенклатура;
		Движение["Субконто" + СторонаПроводки].СтатьиТовародвижения = НастройкаПроводок.СтатьяДвиженияТоваров;
		
	ИначеЕсли СчетУчетаНоменклатуры = Счет41_1 Тогда	
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасхождения.СтруктурнаяЕдиница) Тогда
			Движение["Субконто" + СторонаПроводки].МестаХранения = НастройкаПроводок.СтруктурнаяЕдиница;
		Иначе
			Движение["Субконто" + СторонаПроводки].МестаХранения = СтрокаРасхождения.СтруктурнаяЕдиница;
		КонецЕсли;
		
		Движение["Субконто" + СторонаПроводки].Товары = СтрокаРасхождения.Номенклатура;
		Движение["Субконто" + СторонаПроводки].СтатьиТовародвижения = НастройкаПроводок.СтатьяДвиженияТоваров;
		
	ИначеЕсли СчетУчетаНоменклатуры = Счет10_6 Тогда
		
		Движение["Субконто" + СторонаПроводки].Материалы = СтрокаРасхождения.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.09.28 ИП-00019621^02
Функция ИсключитьНоменклатуруЭтоРекламныйМатериал(Номенклатура, ЗначенияРеквизитовНом, СтрокаСчетУчета)
	
	Если СтрокаСчетУчета.СчетУчета = ПланыСчетов.Финансовый.ПрочиеМатериалы Тогда
			
		НайдЗначенияРеквизитов = ЗначенияРеквизитовНом.Получить(Номенклатура);
		
		Если НайдЗначенияРеквизитов["ВидНоменклатуры"] <> Перечисления.ВидыНоменклатуры.Материал Тогда
			Возврат Истина;
		Иначе	
			Если НайдЗначенияРеквизитов["РекламныйМатериал"] ИЛИ НайдЗначенияРеквизитов["НеУчитыватьВЗакрытииМесяца"] Тогда		
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

ОрганизацияОсновная = Справочники.Организации.НайтиПоРеквизиту("ИНН", "7734675810");
