
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СуммаНДСДокумента = ДанныеЗаполнения.Товары.Итог("СуммаНДС") + ДанныеЗаполнения.Услуги.Итог("СуммаНДС") + ДанныеЗаполнения.Оборудование.Итог("СуммаНДС");
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		СуммаНДСДокумента = ДанныеЗаполнения.СуммаНДС;
	//+++АК sils 18.06.2018 ИП-00018892
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		СуммаНДСДокумента = ДанныеЗаполнения.Товары.Итог("СуммаНДС");
	//---АК
	Иначе
		Возврат;
	КонецЕсли;	
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Организация = ДанныеЗаполнения.Организация;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаВходящегоСчетаФактуры) Тогда
			ДатаВходящегоДокумента = ДанныеЗаполнения.ДатаВходящегоСчетаФактуры;
		Иначе			
			ДатаВходящегоДокумента = ДанныеЗаполнения.ДатаВходящегоДокумента;
		КонецЕсли;
		
		//+++АК sils 18.06.2018 ИП-00018892
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.НомерВходящегоСчетФактуры) Тогда
				НомерВходящегоДокумента = ДанныеЗаполнения.НомерВходящегоСчетФактуры;
			Иначе			
				НомерВходящегоДокумента = ДанныеЗаполнения.НомерВходящегоДокумента;
			КонецЕсли;		
		Иначе
		//---АК
		Если ЗначениеЗаполнено(ДанныеЗаполнения.НомерВходящегоСчетаФактуры) Тогда
			НомерВходящегоДокумента = ДанныеЗаполнения.НомерВходящегоСчетаФактуры;
		Иначе			
			НомерВходящегоДокумента = ДанныеЗаполнения.НомерВходящегоДокумента;
		КонецЕсли;		
		//+++АК sils 18.06.2018 ИП-00018892
		КонецЕсли;
		//---АК
		
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		СуществующийСчетФактура = Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(ДанныеЗаполнения.Ссылка, "СчетФактураПолученный",,Ссылка);		
		
		Если НЕ СуществующийСчетФактура = Неопределено
			И НЕ СуществующийСчетФактура = Ссылка Тогда
			
			Если Не СуществующийСчетФактура = ДокументОснование Тогда
				// Найден ранее введенный счет-фактура, требуется закрыть новый документ и открыть найденный
				// Если найденный счет-фактура - это сам документ-основание, то счет-фактуру также создавать не надо, открывать ничего не надо
				СуществующийСчетФактура.ПолучитьФорму(, , Строка(ДокументОснование)).Открыть();
			Иначе
				Сообщить("Данные счета-фактуры введены в документе поступления, ввод отдельного документа ""Счет-фактура полученный"" не требуется");
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
			
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СоответствиеГраницЗапрета = ПолныеПрава.ПолучитьГраницыЗапретаИзмененияДанных().Получить();
		СоответствиеГраницЗапретаНДС = ПолныеПрава.ПолучитьГраницыЗапретаИзмененияДанныхНДС().Получить();
		
		// Для пользователя с полными правами проверок выполнять не нужно
		Если СоответствиеГраницЗапрета = Неопределено И СоответствиеГраницЗапретаНДС = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПроверкиДокумента = НастройкаПравДоступа.ПолучитьПараметрыПроверкиДокумента(ЭтотОбъект);
		
		
		//+++ AK suvv 23.05.2018 ИП-00018776
		Если не СоответствиеГраницЗапретаНДС = неопределено Тогда 
			Отказ = НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(ЭтотОбъект);
		Иначе
			Отказ = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ЭтотОбъект); 
		КонецЕсли;
		//ОтказОбщий = Ложь;
		//ОтказНДС = Ложь;
		//НастройкаПравДоступа.ПроверитьВерсиюДокумента(ЭтотОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, ОтказОбщий, РежимЗаписи);
		//НастройкаПравДоступа.ПроверитьВерсиюДокумента(ЭтотОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапретаНДС, ОтказНДС, РежимЗаписи);
		////
		//
		////ОтказНДС = НастройкаПравДоступа.ДокументВЗакрытомПериодеНДС(ЭтотОбъект);
		////ОтказОбщий = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ЭтотОбъект);
		//Если ОтказНДС = Истина И ОтказОбщий = Истина Тогда		
		//	Отказ = Истина;	
		//КонецЕсли;
		//--- AK suvv
		
		#Если НЕ ВнешнееСоединение Тогда
			Если Отказ Тогда
				Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь) Экспорт
	   	    			
	СуществующийСФ = Документы.СчетФактураПолученный.НайтиПодчиненныйСчетФактуру(ДокументОснование, "СчетФактураПолученный",,Ссылка);
	СтрокаСообщения = "";	
	Если НЕ СуществующийСФ = неопределено Тогда
		Если ПустаяСтрока(СтрокаСообщения) Тогда
			СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
		КонецЕсли;
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - " 
		+  " для «" + ДокументОснование + "» зарегистрирован счет-фактура ";
		СтрокаСообщения = СтрокаСообщения + " «" + Строка(СуществующийСФ) + "»";		
		Отказ = Истина;
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если ДокументОснование.Проведен = Ложь Тогда
		Октаз = Истина;
		СтрокаСообщения	= "Счет-фактуру можно провести только на основании проведенного документа";
		СтрокаСообщения = СтрокаСообщения + Символы.ПС+ " - " + " документ «" + Строка(ДокументОснование) + "» не проведен";
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
	КонецЕсли;	
	
	//+++АК SUVV 2018.03.20 ИП-00018025
	Если не Отказ и ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеАренднойПлатыОтАрендодателей") Тогда 
		СуществующаяСчетФактура = НайтиЗарегистрированнуюСчетФактуру();
		Если ЗначениеЗаполнено(СуществующаяСчетФактура) Тогда 
			НаименованиеТЧ = РазложитьСтрокуНаОтдельныеСлова(НаименованиеТабличнойЧасти);
			Сообщить("По строке " + НомерСтрокиВТабличнойЧасти + " табличной части """ + НаименованиеТЧ + """ уже зарегистрирована счет-фактура (" + СуществующаяСчетФактура + ")");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//---АК SUVV
	
КонецПроцедуры

//+++АК SUVV 2018.03.20 ИП-00018025
Функция НайтиЗарегистрированнуюСчетФактуру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Проведен
	|	И СчетФактураПолученный.Ссылка <> &ТекущийДокумент
	|	И СчетФактураПолученный.НаименованиеТабличнойЧасти = &НаименованиеТабличнойЧасти
	|	И СчетФактураПолученный.НомерСтрокиВТабличнойЧасти = &НомерСтрокиВТабличнойЧасти
	|	И СчетФактураПолученный.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	Запрос.УстановитьПараметр("НомерСтрокиВТабличнойЧасти", НомерСтрокиВТабличнойЧасти);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции //---АК SUVV

//+++АК SUVV 2018.03.20 ИП-00018025
Функция РазложитьСтрокуНаОтдельныеСлова(СтрокаДляРазложения)
	
	Результат = СтрокаДляРазложения; 
	ДлинаСтроки = СтрДлина(Результат);
	Для Ном = 2 по ДлинаСтроки Цикл
		ПроверяемыйСимвол = Сред(Результат, Ном, 1);
		Если ПроверяемыйСимвол = ВРег(ПроверяемыйСимвол) Тогда
			Результат = СтрЗаменить(Результат, ПроверяемыйСимвол, " " + НРег(ПроверяемыйСимвол));
		КонецЕсли;                        
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //---АК SUVV
