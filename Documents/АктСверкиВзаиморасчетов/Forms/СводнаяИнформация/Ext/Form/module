
Перем ДанныеРасшифровки;


Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал 	= Истина;
	НастройкаПериода.РедактироватьКакПериод 	= Истина;
	НастройкаПериода.ВариантНастройки 			= ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода = '0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	НачПериода = НачалоМесяца(ТекущаяДата());
	КонПериода = КонецМесяца(ТекущаяДата());
	
	СхемаКомпоновкиДанных = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("СводныйОтчет");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

Процедура КнопкаОбновитьНажатие(Элемент)
	
	ЭлементыФормы.ПолеСводнойИнфы.Очистить();
	
	//Макет компоновки 
	СхемаКомпоновкиДанных = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("СводныйОтчет");
	Для Каждого ЗначениеПараметр Из СхемаКомпоновкиДанных.Параметры Цикл
		Если ЗначениеПараметр.Имя = "ДатаКон" Тогда
			ЗначениеПараметр.Значение = КонецДня(КонПериода) + 1;
		ИначеЕсли ЗначениеПараметр.Имя = "ДатаКонДата" Тогда
			ЗначениеПараметр.Значение = КонецДня(КонПериода);
		ИначеЕсли ЗначениеПараметр.Имя = "ДатаНачДата" Тогда
			ЗначениеПараметр.Значение = НачалоДня(НачПериода);
		ИначеЕсли ЗначениеПараметр.Имя = "НачТекДня" Тогда
			ЗначениеПараметр.Значение = НачалоДня(ТекущаяДата());
		ИначеЕсли ЗначениеПараметр.Имя = "КонТекДня" Тогда
			ЗначениеПараметр.Значение = КонецДня(ТекущаяДата());
		ИначеЕсли ЗначениеПараметр.Имя = "НачПредДня" Тогда
			ЗначениеПараметр.Значение = НачалоДня(ТекущаяДата() - 86400);
		ИначеЕсли ЗначениеПараметр.Имя = "КонПредДня" Тогда
			ЗначениеПараметр.Значение = КонецДня(ТекущаяДата() - 86400);
		КонецЕсли;
		//Если ЗначениеПараметр.Имя = "Субконто" Тогда
		//	ЗначениеПараметр.Значение = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;
		//КонецЕсли;
		//Если ЗначениеПараметр.Имя = "Счета" Тогда
		//	ЗначениеПараметр.Значение.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками);
		//	ЗначениеПараметр.Значение.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателями);
		//	//ЗначениеПараметр.Значение = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;
		//КонецЕсли;
	КонецЦикла;
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	//ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	//КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	//КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для Каждого СтрокаПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если СтрокаПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКон") Тогда
			СтрокаПараметр.Значение = КонецДня(КонПериода) + 1;
			СтрокаПараметр.Использование = Истина;
		ИначеЕсли СтрокаПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонДата") Тогда
			СтрокаПараметр.Значение = КонецДня(КонПериода);
			СтрокаПараметр.Использование = Истина;
		ИначеЕсли СтрокаПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачДата") Тогда
			СтрокаПараметр.Значение = НачалоДня(НачПериода);
			СтрокаПараметр.Использование = Истина;
		КонецЕсли;
		Если ЗначениеПараметр.Имя = "НачТекДня" Тогда
			ЗначениеПараметр.Значение = НачалоДня(ТекущаяДата());
		ИначеЕсли ЗначениеПараметр.Имя = "КонТекДня" Тогда
			ЗначениеПараметр.Значение = КонецДня(ТекущаяДата());
		ИначеЕсли ЗначениеПараметр.Имя = "НачПредДня" Тогда
			ЗначениеПараметр.Значение = НачалоДня(ТекущаяДата() - 86400);
		ИначеЕсли ЗначениеПараметр.Имя = "КонПредДня" Тогда
			ЗначениеПараметр.Значение = КонецДня(ТекущаяДата() - 86400);
		КонецЕсли;
	КонецЦикла;	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	//Вывод результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.ПолеСводнойИнфы);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

Процедура ПолеСводнойИнфыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие;
		
	Если ТипЗнч(Расшифровка)= Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		//Попытка
		//	Поля = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		//	Если Поля.Количество() = 0 Тогда
		//		Значение = Неопределено;
		//	Иначе	
		//		Значение = Поля[0].Значение;
		//	КонецЕсли;	
		//Исключение
		//	Значение = Неопределено;
		//КонецПопытки;	
		//Если ТипЗнч(Значение) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		СхемаКомпоновкиДанных = Документы.АктСверкиВзаиморасчетов.ПолучитьМакет("СводныйОтчет");
			СтандартнаяОбработка = Ложь;
			СписокДействий = Новый СписокЗначений;
			ДоступныеДействия = Новый Массив();
			ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
			ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокДействий);
			
			
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
