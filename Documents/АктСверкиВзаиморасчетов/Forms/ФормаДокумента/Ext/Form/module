
// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мСтараяОрганизация;
Перем мСтарыйКонтрагент;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

Функция ОчиститьТабличныеЧасти()

	Если ПоДаннымКонтрагента.Количество() > 0 ИЛИ ПоДаннымОрганизации.Количество() > 0 Тогда

		ТекстВопроса = "Табличные части ""По данным организации"" и ""По данным контрагента"" будут очищены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли; 

		ПоДаннымОрганизации.Очистить();
		ПоДаннымКонтрагента.Очистить();
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
//	СоответствиеТЧ.Вставить(ЭлементыФормы.ПоДаннымОрганизации,ЭлементыФормы.КоманднаяПанельПоДаннымОрганизации.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПоДаннымКонтрагента,ЭлементыФормы.КоманднаяПанельПоДаннымКонтрагента.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

Процедура УстановитьВидимость()

КонецПроцедуры

Процедура УстановитьДоступность()
	
	Если СверкаСогласована Тогда
		ЭлементыФормы.Контрагент.Доступность          = Ложь;
		ЭлементыФормы.ВалютаДокумента.Доступность 	  = ложь;
		ЭлементыФормы.ОстатокНаНачало.Доступность     = Ложь;
		ЭлементыФормы.ДатаНачала.Доступность 		  = ложь;
		ЭлементыФормы.ДатаОкончания.Доступность 	  = ложь;
		ЭлементыФормы.КнопкаНастройкаПериода.Доступность = ложь;
		
		ЭлементыФормы.КоманднаяПанельПоДаннымОрганизации.Доступность	= Ложь;
		ЭлементыФормы.КоманднаяПанельПоДаннымКонтрагента.Доступность	= Ложь;
	Иначе
		ЭлементыФормы.Контрагент.Доступность          = Истина;
		ЭлементыФормы.ВалютаДокумента.Доступность 	  = Истина;
		ЭлементыФормы.ОстатокНаНачало.Доступность     = Истина;
		ЭлементыФормы.ДатаНачала.Доступность 		  = Истина;
		ЭлементыФормы.ДатаОкончания.Доступность 	  = Истина;
		ЭлементыФормы.КнопкаНастройкаПериода.Доступность = Истина;
		
		ЭлементыФормы.КоманднаяПанельПоДаннымОрганизации.Доступность    = Истина;
		ЭлементыФормы.КоманднаяПанельПоДаннымКонтрагента.Доступность    = Истина;
	КонецЕсли;
	
	ЭлементыФормы.Организация.Доступность = не СверкаСогласована;

	ЭлементыФормы.ПоДаннымКонтрагента.ТолькоПросмотр = СверкаСогласована;
	ЭлементыФормы.ПоДаннымОрганизации.ТолькоПросмотр = СверкаСогласована;
	ЭлементыФормы.СписокСчетов.ТолькоПросмотр 		 = СверкаСогласована;
	
	ЭлементыФормы.КоманднаяПанельСписокСчетов.Доступность = не СверкаСогласована;

КонецПроцедуры

Процедура УстановитьПодписиВалют()
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ПодписьВалюты = "("+СокрЛП(Строка(мВалютаРегламентированногоУчета))+")";
	Иначе
		ПодписьВалюты = "("+СокрЛП(Строка(ВалютаДокумента))+")";
	КонецЕсли; 
	
	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Дебет.ТекстШапки = "Дебет "+ПодписьВалюты;
	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Кредит.ТекстШапки = "Кредит "+ПодписьВалюты;
	
	ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Дебет.ТекстШапки = "Дебет "+ПодписьВалюты;
	ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Кредит.ТекстШапки = "Кредит "+ПодписьВалюты;
	
	ЭлементыФормы.НадписьОстатки.Значение = "Остатки "+ПодписьВалюты+":";
	ЭлементыФормы.НадписьОстаткиКонтрагент.Значение = "Остатки "+ПодписьВалюты+":";
	
КонецПроцедуры	

Процедура ПересчитатьОстатки()

	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	Если Не ДанныеКонтрагентаЗагружены Тогда
		//+++АК Susk (Суслин К.В.) 2018.05.14 ИП-00018664
		//при открытии формы постоянно сбита модифицированность. Сбиваю только в случае, когда точно надо сбивать. Т.к. в большинстве случаев они равны.		 
		
		//ОстатокНаНачалоПоДаннымКонтрагента = - ОстатокНаНачало
		Если ОстатокНаНачалоПоДаннымКонтрагента <> -ОстатокНаНачало Тогда
			ОстатокНаНачалоПоДаннымКонтрагента = - ОстатокНаНачало
		КонецЕсли;
		//---АК Susk (Суслин К.В.) 
	КонецЕсли;
	ЭлементыФормы.ОстатокНаНачалоКонтрагент.Значение = ОстатокНаНачалоПоДаннымКонтрагента;
	ЭлементыФормы.ОстатокНаКонец.Значение = ОстатокНаКонец;
	
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоПоДаннымКонтрагента + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	ЭлементыФормы.ОстатокНаКонецКонтрагент.Значение = ОстатокНаКонецКонтрагент;
	
	//Mind переделал на реквизит конечный остаток у контрагента
	//Если Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
	//	Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	//КонецЕсли; 
	//ЭлементыФормы.Расхождение.Значение = Расхождение;
	
	//+++АК Susk (Суслин К.В.) 2018.05.14 ИП-00018664
	//при открытии формы постоянно сбита модифицированность. Сбиваю только в случае, когда точно надо сбивать. Т.к. в большинстве случаев они равны.
	
	//Расхождение = ОстатокНаКонец - ОстатокНаКонецПоДаннымКонтрагента;
	ВычисленноеРасхождение = ОстатокНаКонец - ОстатокНаКонецПоДаннымКонтрагента;
	
	Если Расхождение <> ВычисленноеРасхождение Тогда
		Расхождение = ВычисленноеРасхождение;
	КонецЕсли;
	//---АК Susk (Суслин К.В.) 
	
	ЭлементыФормы.РасхождениеКонтрагент.Значение = Расхождение*(-1);

КонецПроцедуры


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 07.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Акт сверки взаиморасчетов");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если НЕ ЭтоНовый() Тогда 
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	Иначе // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		//Заполнить таблицу счетов значениями по умолчанию
		ЗаполнитьСписокСчетовЗначениямиПоУмолчанию();
		
		ЭтотОбъект.ДатаНачала 		= НачалоГода(ТекущаяДата());
		ЭтотОбъект.ДатаОкончания 	= ТекущаяДата();
		ЭтотОбъект.ВалютаДокумента	= Справочники.Валюты.НайтиПоКоду("643"); // рубль
		
	КонецЕсли;

	мТекущаяДатаДокумента = ЭтотОбъект.Дата;
	
	// Подписать колонки и реквизиты остатков.
	УстановитьПодписиВалют();
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Пересчитать конечные остатки и расхождение
	ПересчитатьОстатки();
	
	УстановитьДоступность();
	
	мСтараяОрганизация = Организация;
	мСтарыйКонтрагент  = Контрагент;
	
	//УстановитьДополнительныеКнопки(ЭтаФорма,ЭлементыФормы.ОсновныеДействияФормы,ЭлементыФормы.ДействияФормы,Истина);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	//+++АК sils 07.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()


Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ДействияФормыФайлы(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений 			= Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭтотОбъект.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов 	= Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭтотОбъект.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", ЭтотОбъект.Ссылка);

	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры


Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		ДатаНачала    = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)

	НП.УстановитьПериод(ДатаНачала, ДатаОкончания, Истина);

КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)

	НП.УстановитьПериод(ДатаНачала, ДатаОкончания, Истина);

КонецПроцедуры

Процедура ПредставительКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактами.НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	
КонецПроцедуры

Процедура ПриИзмененииВалютыДокумента()
	

КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ПриИзмененииВалютыДокумента();
	УстановитьВидимость();
	УстановитьДоступность();
	УстановитьПодписиВалют();
	
КонецПроцедуры

Процедура КоманднаяПанельПоДаннымОрганизацииЗаполнитьПоДаннымБухгалтерскогоУчета(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта документа!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Предупреждение("Не выбрана дата окончания периода сверки!");
		Возврат;
	КонецЕсли;

	Если ДатаОкончания < ДатаНачала Тогда
	    Предупреждение("Неверно задан период сверки расчетов!");
		Возврат;
	КонецЕсли;
	
	КоличествоСчетов = СписокСчетов.Количество();

	ФильтрСписокСчетов = Новый массив();
	Для каждого СтрокаСчета Из СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
		
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		Предупреждение("Неверно задан список счетов, по которым производится сверка!");
		Возврат;
	КонецЕсли;

	Если ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ПоДаннымОрганизации.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов);
	
	ПересчитатьОстатки();
КонецПроцедуры

Процедура КоманднаяПанельПоДаннымКонтрагентаДействиеПоДаннымОрганизации(Кнопка)
	
	Если ПоДаннымКонтрагента.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ПоДаннымКонтрагента.Очистить();
	КонецЕсли;

	ЗаполнитьПоДаннымОрганизации();
    ПересчитатьОстатки();
КонецПроцедуры

Процедура СверкаСогласованаПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

Процедура КоманднаяПанельСписокСчетовЗаполнитьПоУмолчанию(Кнопка)
	
	ЗаполнитьСписокСчетовЗначениямиПоУмолчанию(Истина);

КонецПроцедуры

Процедура СписокСчетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Счет) Тогда 
		ТекстЯчейки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Счет, "Наименование");
		ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст(ТекстЯчейки);
	КонецЕсли;

КонецПроцедуры

Процедура СписокСчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		ТД = Элемент.ТекущиеДанные;
		
		Если Не ТД=Неопределено Тогда
			ТД.УчаствуетВРасчетах = Истина;	
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

//Заполнить таблицу счетов значениями по умолчанию
Процедура ЗаполнитьСписокСчетовЗначениямиПоУмолчанию(ВыдаватьСообщения = Ложь)
	
	Если СписокСчетов.Количество() > 0 тогда
		Если ВыдаватьСообщения Тогда
		
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		
		СписокСчетов.Очистить();
		
	КонецЕсли;

	СчетаПоУмолчанию = Новый Массив();
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиОборудования);
	
	//+++АК LAGP 2018.02.13 ИП-00017882
	СчетаПоУмолчанию.Добавить(ОбщегоНазначенияПовтИсп.ВернутьСчетПоУсловию("60.22", "Финансовый"));
	//---АК LAGP

	СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками);
		
	Для Счетчик = 1  По СчетаПоУмолчанию.Количество() Цикл
		СтрокаСчета = СписокСчетов.Добавить();
		СтрокаСчета.УчаствуетВРасчетах = Истина;
	КонецЦикла; 
	
	СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию,"Счет");
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Организация = мСтараяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОчиститьТабличныеЧасти() Тогда
		Организация = мСтараяОрганизация;
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	УстановитьВидимость();
	УстановитьДоступность();
	
	мСтараяОрганизация = Организация;

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();

КонецПроцедуры

Процедура ПриИзмененииКонтрагента()

	Если Контрагент = мСтарыйКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОчиститьТабличныеЧасти() Тогда
		Контрагент = мСтарыйКонтрагент;
		Возврат;
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Контрагента
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
	
	
	мСтарыйКонтрагент = Контрагент;

КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента();
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура ОстатокНаНачалоПриИзменении(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымОрганизацииПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымКонтрагентаПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ОсновныеДействияФормыОтправитьКонтрагенту(Кнопка)
	
	ФорматФайла = Прав(Кнопка.Имя,3);
	
	Ответ = Вопрос("Вы действительно хотите отправить акт контрагенту?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Если Не ЗначениеЗаполнено(Контрагент.ВидКИ_ДляИнформирования) Тогда
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Иначе
		Запрос.УстановитьПараметр("Вид", Контрагент.ВидКИ_ДляИнформирования);
	КонецЕсли;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
				   
	ЭлПочтаКонтрагента = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлПочтаКонтрагента = СокрЛП(Выборка.Представление);
	КонецЕсли;	
	
	Если НЕ ВвестиСтроку(ЭлПочтаКонтрагента, "Укажите адрес электронной почты") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект", Ответственный.ФизЛицо);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	ПочтаБухгалтера = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПочтаБухгалтера = СокрЛП(Выборка.Представление);
	КонецЕсли;
	
	ТелефонБухгалтера = "";
	Запрос.УстановитьПараметр("Объект", Ответственный.ФизЛицо);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТелефонБухгалтера = СокрЛП(Выборка.Представление);
	КонецЕсли;
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	ТекстHTML = Организация.ШаблонЗапросаАктаСверки.ОписаниеHTML;
			
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ИмяФайла
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
		
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! "+ ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов()+ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()+Прав(ТекКартинкаНТМЛ.Источник,4);
		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		
		ТекстHTML = СтрЗаменить(ТекстHTML,ТекКартинкаНТМЛ.Источник,ИмяВременногоФайла);
	КонецЦикла;	
	
	СтруктураПараметров = Новый Структура;
		
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,ТекущаяДата());
	
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование", Контрагент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ПериодОбработки","с "+Формат(ДатаНачала, "ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
	
	СтруктураПараметров.Вставить("Организация", Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор", ПредставительОрганизации);
	
	Для каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"%"+ТекПараметр.Ключ,ТекПараметр.Значение);
		
	КонецЦикла;
	
	СтруктураПараметровМногострочные = Новый Структура;  		
	
	//ДанныеФизЛицаМенеджера = ОбщегоНазначения.ПолучитьМассивФИО(ПодчиненнаяСтрока.ОсновнойМенеджерПокупателя.ФизЛицо);
	ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(Ответственный.ФизЛицо);
	
	ФамилияИмяМенеджера = "";
	ФамилияИмяБухгалтера = ДанныеФизЛицаБухгалтера[0] + " "+ДанныеФизЛицаБухгалтера[1];
	
	Телефоны =  СформироватьПредставленияКонтакта(ТелефонБухгалтера,Ответственный.ФизЛицо
		,Неопределено,"Бухгалтер",ФамилияИмяБухгалтера);
	Телефоны1 = "";
	
	ФИОEMAIL = СформироватьПредставленияКонтакта(ПочтаБухгалтера, Ответственный.ФизЛицо
		,Неопределено,"Бухгалтер",ФамилияИмяБухгалтера,Истина);
	ФИОEMAIL1 = "";
	
	СтруктураПараметровМногострочные.Вставить("Телефоны",Телефоны);
	СтруктураПараметровМногострочные.Вставить("Телефоны1",Телефоны1);
	
	СтруктураПараметровМногострочные.Вставить("ФИОEmail",ФИОEMAIL);
	СтруктураПараметровМногострочные.Вставить("ФИОEmail1",ФИОEMAIL1);
	
	Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
		
		ЖирныйШрифтНач = "";
		ЖирныйШрифтКонец = "";
		Если Не Найти(ТекстHTML,"<P>%"+ТекПараметр.Ключ+"</P>") Тогда
			ЖирныйШрифтНач = "<STRONG>";
			ЖирныйШрифтКонец = "</STRONG>";  					
		КонецЕсли;
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"<P>"+ЖирныйШрифтНач+"%"+ТекПараметр.Ключ+ЖирныйШрифтКонец+"</P>",ТекПараметр.Значение);
		
	КонецЦикла;
	
	ТаблицаОбъектовКому = СтрЗаменить(ЭлПочтаКонтрагента, ";",Символы.ПС);
	
	ВложенныйАкт =  ПечатьАктаСверки(ФорматФайла="PDF");		
	
	ВремФайл = ПолучитьИмяВременногоФайла(ФорматФайла);
	
	ВложенныйАкт.Записать(ВремФайл, ТипФайлаТабличногоДокумента[ФорматФайла]);
	
	Для сч=1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
		АдресПолучателя=СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому,сч));
		Попытка
			Послать(АдресПолучателя, ТекстHTML, ПочтаБухгалтера, Организация.ШаблонЗапросаАктаСверки.Тема, ФамилияИмяБухгалтера, ВремФайл);
			Сообщить("Отправка выполнена успешно");
			ДатаОтправкиКонтрагенту = ТекущаяДата();
			Записать();
		Исключение
			Сообщить(АдресПолучателя);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПредставленияКонтакта(Контакт,ОсновнойБухгалтерПокупателя,ОсновнойМенеджерПокупателя,Должность,ФамилияИмяМенеджера,Жирным = Ложь)
	ЖирныйШрифтНач = "";
	ЖирныйШрифтКонец = "";
	
	Если Жирным Тогда
		ЖирныйШрифтНач = "<STRONG>";
		ЖирныйШрифтКонец = "</STRONG>";  					
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Контакт) 
	И (ОсновнойМенеджерПокупателя <> ОсновнойБухгалтерПокупателя Или Должность = "Бухгалтер")
	,"<P>"+ЖирныйШрифтНач+Должность+" " +ФамилияИмяМенеджера + " "+Контакт+ЖирныйШрифтКонец+"</P>",""); 
	
КонецФункции

Процедура Послать(АдресПолучателя,ТекстПисьма,УЗ,Тема,Пользователь,АдресФайла)
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	
	ИПП.АдресСервераSMTP="10.0.0.30";
	ИПП.Пользователь=Пользователь;
	ИПП.ПортSMTP=25;
	//
	//Если УЗ.ТребуетсяSMTPАутентификация Тогда
	//	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//	ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
	//	ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	//Иначе
	ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	ИПП.ПарольSMTP         = "";
	ИПП.ПользовательSMTP   = "";
	//КонецЕсли;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель=УЗ;
	Письмо.Получатели.Добавить(АдресПолучателя);
	
	//Для Каждого ТекАдр Из Вложения Цикл
		Письмо.Вложения.Добавить(АдресФайла);
	//КонецЦикла;
	
	Письмо.Тема=Тема;
	
	Письмо.Тексты.Добавить(ТекстПисьма,ТипТекстаПочтовогоСообщения.HTML);
	
	Почта=Новый ИнтернетПочта;
	
	Почта.Подключиться(ИПП);
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
КонецПроцедуры

Процедура КоманднаяПанельПоДаннымКонтрагентаЗагрузитьИзФайла(Кнопка)
	ОткрытьФорму("Обработка.АК_ЗагрузкаАктовСверки.Форма.Форма",Новый Структура("Акт",Ссылка),ЭтаФорма);
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	// Вставить содержимое обработчика.
	ДанныеКонтрагентаЗагружены = Истина;
	ПоДаннымКонтрагента.Очистить();
	ОстатокНаНачалоПоДаннымКонтрагента = ЗначениеВыбора.СальдоНаНачало;
	Для Каждого Строка из ЗначениеВыбора.Таблица Цикл
		НоваяСтрока = ПоДаннымКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка)
	КонецЦикла;
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ОстатокНаКонецПоДаннымКонтрагентаПриИзменении(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

Процедура ЗагрузитьИзБухБазыНажатие(Элемент)
	
	Попытка
		
		Коннектор = Новый COMObject(ПолныеПрава.ПолучитьВерсиюКомОбъекта_Бух() + ".COMConnector");
		// создается объект COM-соединение
		
		Строка = ОбщегоНазначения.ПолучитьСтрокуПодключенияКБухгалтерии();
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
	КонецПопытки;
	
	ОстатокНаКонецПоДаннымКонтрагента = 0;
	
	Если СоединениеСБазой <> Неопределено Тогда
		
		//+++susk
		//ИП-00017245
		//определим контрагента		
		КонтрСсылка = ПолучитьКонтрагентаИзКомСоединенияБух(СоединениеСБазой);
		
		Если КонтрСсылка = СоединениеСБазой.Справочники.Контрагенты.ПустаяСсылка() Тогда
			ОстатокНаКонецПоДаннымКонтрагента = 0;
			Возврат;
		КонецЕсли;
		//---susk
		
		ЗапросКеш = СоединениеСБазой.NewObject("Запрос");
		ЗапросКеш.УстановитьПараметр("ДатаОстаткиНач", ДатаНачала);
		ЗапросКеш.УстановитьПараметр("ДатаОстаткиКон", СоединениеСБазой.NewObject("Граница", КонецДня(ДатаОкончания), СоединениеСБазой.ВидГраницы.Включая));
		ЗапросКеш.УстановитьПараметр("ОргИнн", Организация.ИНН);
		//+++susk
		ЗапросКеш.УстановитьПараметр("КонтрСсылка", КонтрСсылка);
		
		АналитикаРасчетов = СоединениеСБазой.NewObject("Массив");
		АналитикаРасчетов.Добавить(СоединениеСБазой.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		АналитикаРасчетов.Добавить(СоединениеСБазой.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		ЗапросКеш.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);

		
		//подмена поиска по ИНН контрагента на ссылку. Т.к. ИНН может быть пуст.
		
		//ЗапросКеш.Текст = "ВЫБРАТЬ
		//					|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
		//					|ИЗ
		//					|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатки, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)), , ) КАК ХозрасчетныйОстатки
		//					|ГДЕ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты).ИНН = &ИНН
		//					|	И ХозрасчетныйОстатки.Организация.ИНН = &ОргИнн
		//                    |
		//					|";		
									
		ЗапросКеш.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборот,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаОстаткиНач,
		|			&ДатаОстаткиКон,
		|			,
		|			,
		|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками),
		|			&АналитикаРасчетов,
		|			) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Контрагенты)) = &КонтрСсылка
		|	И ХозрасчетныйОстаткиИОбороты.Организация.ИНН = &ОргИнн";
		//---susk  
		
		Выборка = ЗапросКеш.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОстатокНаКонецПоДаннымКонтрагента = Выборка.СуммаОстаток;
		КонецЕсли;	
	КонецЕсли;		
						
КонецПроцедуры

//+++susk
//ИП-00017245
Функция ПолучитьКонтрагентаИзКомСоединенияБух(СоединениеСБазой)
	
	КонтрСсылка = СоединениеСБазой.Справочники.Контрагенты.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор",Строка(Контрагент.УникальныйИдентификатор())));
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Справочник.Контрагенты
        |ГДЕ
        |    Ссылка = &Ссылка
        |";     
    
    Запрос.УстановитьПараметр("Ссылка", КонтрСсылка);
    
	Если Запрос.Выполнить().Пустой() Тогда
		Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Ссылка,
			|	1 КАК Приоритет
			|ПОМЕСТИТЬ Сводная
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.Наименование = &Наименование

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	Контрагенты.Ссылка,
			|	2
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты	
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН И &ИннЗаполнен
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сводная.Ссылка КАК Ссылка,
			|	Сводная.Приоритет КАК Приоритет
			|ИЗ
			|	Сводная КАК Сводная

			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	Ссылка
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ИНН", Контрагент.ИНН);
		Запрос.УстановитьПараметр("ИннЗаполнен", ЗначениеЗаполнено(Контрагент.ИНН));
		Запрос.УстановитьПараметр("Наименование", СокрЛП(Контрагент.Наименование));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ ЗначениеЗаполнено(Контрагент.ИНН) Тогда
			Предупреждение("Внимание! У контрагента не заполнен ИНН. Поиск будет произведен по наименованию. Если наименования в базах не совпадают, поиск ничего не даст!");
		КонецЕсли;
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат СоединениеСБазой.Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Возврат КонтрСсылка;
		
	КонецЕсли;
	
КонецФункции
//---susk


НП = Новый НастройкаПериода;

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
МетаданныеПоДокументам = Новый Соответствие();
