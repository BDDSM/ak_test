
Перем мВалютаРегламентированногоУчета Экспорт;
Перем МетаданныеПоДокументам Экспорт;

#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

#КонецЕсли

Функция ПолучитьДату(Массив)
	Попытка
		День = Число(Массив[0]);
		Месяц = Число(Массив[1]);
		Год = Число(Массив[2]);
		Если Год<100 Тогда
			Год = 2000+Год
		КонецЕсли;
		Результат = Дата(Год,Месяц,День);
		Возврат Результат
	Исключение
		Возврат Дата(1,1,1)
	КонецПопытки
КонецФункции

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
Функция ПечатьСверкаДокументов()Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("ДатаПроведения", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("Номер",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Оборот",Новый ОписаниеТипов("Число"));
//	ТЗ.Колонки.Добавить("ДтКт",Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ПоДаннымКонтрагента",Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("Операция",Новый ОписаниеТипов("Строка"));
	//+++АК ILIK 2018.09.24 ИП-00019115
	ТЗ.Колонки.Добавить("ДокументРасшифровка");
	//---АК ILIK
	
	Для Каждого Данные из ПоДаннымОрганизации Цикл
		Строка = ТЗ.Добавить();
		Строка.Операция = Данные.Представление;
		Строка.Оборот = Данные.Дебет-Данные.Кредит;
		Строка.ДатаПроведения = Данные.Дата;
		Строка.ПоДаннымКонтрагента = Ложь;
		//+++АК ILIK 2018.09.24 ИП-00019115
		Строка.ДокументРасшифровка = Данные.ДокументРегистратор;
		//---АК ILIK
	КонецЦикла;

	Для Каждого Данные из ПоДаннымКонтрагента Цикл
		Строка = ТЗ.Добавить();
		Строка.Операция = Данные.Представление;
		Строка.Оборот = Данные.Дебет - Данные.Кредит;
		Строка.ДатаПроведения = Данные.Дата;
		Строка.ПоДаннымКонтрагента = Истина;
		//+++АК ILIK 2018.09.24 ИП-00019115
		Строка.ДокументРасшифровка = Данные.ДокументРегистратор;
		//---АК ILIK
	КонецЦикла;

	RegExp = Новый COMОбъект("VBScript.RegExp");
    RegExp.IgnoreCase = True;
	RegExp.Global = True;
	
	ДатаМассив = Новый Массив(3);
	
	Для Каждого Строка из ТЗ Цикл
		RegExp.Pattern = "([A-ZА-Я\-\/]*\d+)\s+от\s+([0-3]?\d)\.([01]?\d)\.((20)?\d{2})";
		Matches = RegExp.Execute(Строка.Операция);
		Если Matches.Count()>0 Тогда
			M = Matches.Item(0).Submatches;
			Строка.Номер = M.Item(0);
			
			Попытка
				Строка.Номер = Формат(Число(Строка.Номер),"ЧГ=0");
			Исключение
			КонецПопытки;
			
			Для К=0 По 2 Цикл
				ДатаМассив[К]=M.Item(К+1)
			КонецЦикла;
			Строка.Дата = ПолучитьДату(ДатаМассив);
			Продолжить
		КонецЕсли;
		
		RegExp.Pattern = "([0-3]?\d)\.([01]?\d)\.((20)?\d{2})[^\d]";
		Matches = RegExp.Execute(Строка.Операция);
		Если Matches.Count()>0 Тогда
			M = Matches.Item(0).Submatches;
			Для К=0 По 2 Цикл
				ДатаМассив[К]=M.Item(К)
			КонецЦикла;
			Строка.Дата = ПолучитьДату(ДатаМассив);
		КонецЕсли;
		
		RegExp.Pattern = "[№ ]([A-ZА-Я0-9\-\/\\]*\d+)[ ]";
		Matches = RegExp.Execute(" "+Строка.Операция+" ");
		Если Matches.Count()>0 Тогда
			M = Matches.Item(0).Submatches;
			Строка.Номер = M.Item(0);
			
			Попытка
				Строка.Номер = Формат(Число(Строка.Номер),"ЧГ=0");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Дата)Тогда
			Строка.Дата = Строка.ДатаПроведения;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Номер)Тогда
			Строка.Номер = "б/н"
		КонецЕсли;
		
	КонецЦикла;
	
	//+++АК ILIK 2018.09.24 ИП-00019115
	ПроверитьВхождениеНомеров(ТЗ);
	//---АК ILIK
	
	Строка = ТЗ.Добавить();
	Строка.Дата = ДатаНачала;
	Строка.Номер = "Сальдо";
	Строка.Оборот = ОстатокНаНачало;
	
	Строка = ТЗ.Добавить();
	Строка.Дата = ДатаНачала;
	Строка.Номер = "Сальдо";
	Строка.Оборот = ОстатокНаНачалоПоДаннымКонтрагента;

	
	Итоги = ТЗ.Скопировать();
	Итоги.Свернуть("Номер,Дата","Оборот");
	
	СтрокиКУдалению = Итоги.НайтиСтроки(Новый Структура("Оборот",0));
	
	Для Каждого Строка из СтрокиКУдалению Цикл
		Итоги.Удалить(Строка)
	КонецЦикла;
	
	Итоги.Сортировать("Дата,Номер");
	Итоги.Колонки.Добавить("Дт",Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("Кт",Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("ДтКор",Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("КтКор",Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("Документ",Новый ОписаниеТипов("Строка"));
	Итоги.Колонки.Добавить("ДокументКор",Новый ОписаниеТипов("Строка"));
	//+++АК ILIK 2018.09.24 ИП-00019115
	Итоги.Колонки.Добавить("ДокументРасшифровка");
	Итоги.Колонки.Добавить("ДокументРасшифровкаКор");
	//---АК ILIK
	
	Для Каждого Строка из Итоги Цикл
		//+++АК ILIK 2018.09.24 ИП-00019115
		СписокДокументов = Новый СписокЗначений;
		СписокДокументовКор = Новый СписокЗначений;
		//---АК ILIK
		
		Строки = ТЗ.НайтиСтроки(Новый Структура("Дата,Номер",Строка.Дата,Строка.Номер));
		
		
		Для Каждого СтрТЗ из Строки Цикл
			Пр = ?(СтрТЗ.ПоДаннымКонтрагента,"Кор","");
			К = ?(СтрТЗ.ПоДаннымКонтрагента,-1,1);
			Если Строка.Номер = "Сальдо" Тогда
				Строка.Документ = "Сальдо на начало";
			Иначе
				Строка["Документ"+Пр]=Строка["Документ"+Пр]+СтрТЗ.Операция+"; "
			КонецЕсли;
			Строка["Дт"+Пр]=Строка["Дт"+Пр]+Макс(0,СтрТЗ.Оборот*К);
			Строка["Кт"+Пр]=Строка["Кт"+Пр]+Макс(0,-СтрТЗ.Оборот*К);
			//+++АК ILIK 2018.09.24 ИП-00019115
			Если ЗначениеЗаполнено(СтрТЗ.ДокументРасшифровка) Тогда
				Если СтрТЗ.ПоДаннымКонтрагента Тогда
					СписокДокументовКор.Добавить(СтрТЗ.ДокументРасшифровка);
				Иначе
					СписокДокументов.Добавить(СтрТЗ.ДокументРасшифровка);
				КонецЕсли;
			КонецЕсли;
			//---АК ILIK
		КонецЦикла;
		//+++АК ILIK 2018.09.24 ИП-00019115
		Строка.ДокументРасшифровка = Новый Структура("СписокДокументов", СписокДокументов);
		Строка.ДокументРасшифровкаКор = Новый Структура("СписокДокументов", СписокДокументовКор);
		//---АК ILIK
	КонецЦикла;
			
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Расхождения");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок.Параметры.Заполнить(Ссылка);
	ОбластьЗаголовок.Параметры.Период = ПредставлениеПериода(ДатаНачала,ДатаОкончания);
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Если Итоги.Количество()=0 Тогда
		ОбластьБР = Макет.ПолучитьОбласть("РасхожденийНет");
		ТабДокумент.Вывести(ОбластьБР)
		
	Иначе
	
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапкаТаблицы.Параметры.Заполнить(Ссылка);
		
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		Для Каждого Строка из Итоги Цикл
			ОбластьСтрокаТаблицы.Параметры.Заполнить(Строка);
			ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьИтого.Параметры.ИтогоРазница = Итоги.Итог("Оборот");
		ТабДокумент.Вывести(ОбластьИтого);
		
	КонецЕсли;
	
	Возврат ТабДокумент		
			
	
	
КонецФункции

Функция ПечатьАктаСверки(ВыводитьПечатьИПодписи = Ложь) Экспорт
	
    //
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации	, "НаименованиеДляПечатныхФорм,");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЭтотОбъект.Контрагент	, ЭтотОбъект.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте	, "НаименованиеДляПечатныхФорм,");
	
	ПолноеПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации	, "НаименованиеДляПечатныхФорм,ИНН,КПП");
	ПолноеПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте	, "НаименованиеДляПечатныхФорм,ИНН,КПП");
	
	НазваниеОрганизации = ЭтотОбъект.Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = ЭтотОбъект.Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = ЭтотОбъект.Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = ЭтотОбъект.Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Номер                   	= ЭтотОбъект.Номер + " от " + Формат(ЭтотОбъект.Дата, "ДФ=dd.MM.yyyy");
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации 		= НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента 	= НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = ЭтотОбъект.ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ЭтотОбъект.ПредставительКонтрагента;
	
	//Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
	//	|ИЗ
	//	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	//	|		&КонДата,
	//	|		СтруктурнаяЕдиница = &Организация
	//	|			И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	//	
	//	Запрос.УстановитьПараметр("Организация",Организация);
	//	Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
	//	Запрос.УстановитьПараметр("КонДата",Дата);
	//	
	//	Рез = Запрос.Выполнить();
	//	Если Рез.Пустой() тогда
	//		ДолжностьПредставителяОрганизации = "";
	//	Иначе
	//		Выборка = Рез.Выбрать();
	//		Выборка.Следующий();
	//		ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
	//	КонецЕсли;
	//Иначе
		ДолжностьПредставителяОрганизации = "";
	//КонецЕсли;
	ДолжностьПредставителяКонтрагента = ?(ЭтотОбъект.ПредставительКонтрагента.Пустая(), "", СокрЛП(ЭтотОбъект.ПредставительКонтрагента.Должность));
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаНачала) Тогда
		Если ЭтотОбъект.ПоДаннымОрганизации.Количество() > 0 Тогда
			ДатаНачалаПериода = ЭтотОбъект.ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = ЭтотОбъект.ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = ЭтотОбъект.ДатаНачала;
	КонецЕсли;		

	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " +
					Формат(ЭтотОбъект.ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС + "между " + ПолноеПредставлениеОрганизации + Символы.ПС +
					"и " + ПолноеПредставлениеКонтрагента;
	//Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
	//КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ФИОПредставителя = "" + ОбщегоНазначения.ФамилияИнициалыФизЛица(ПредставительОрганизации);	
	СтрЗаголовокТаблица = "По состоянию сверки взаиморасчетов по данным " + ПредставлениеОрганизации
				+ " составлен акт сверки, которым " +ПредставлениеОрганизации + " в лице генерального директора " + ФИОПредставителя +
	            " оповещает Вас о том, что состояние взаимных расчетов на дату " + Формат(ЭтотОбъект.ДатаОкончания, "ДФ=dd.MM.yyyy") + " следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если СверкаСогласована Тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована Тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	Если ПоДаннымОрганизации.Количество() = 0
			И ОстатокНаНачало = 0 Тогда
   	    РезультатыСверки = "<сверка не проведена>";
  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если СверкаСогласована Тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
		Если ПоДаннымКонтрагента.Количество() = 0
				И ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец + ОстатокНаКонецК <> 0 Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере " +
			 				Формат(?(ОстатокНаКонец+ОстатокНаКонецК > 0, 1, -1) * (ОстатокНаКонец + ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") + " " +
							Строка(ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС + ИтогСверки + Символы.ПС + " ";
		КонецЕсли; 
	КонецЕсли;
	
	//+++ AK suvv 14.08.2018 ИП-00019538
	ГруппаКонтрагентовАренда = Справочники.Контрагенты.НайтиПоКоду("000000466");
	Если Контрагент.ПринадлежитЭлементу(ГруппаКонтрагентовАренда) Тогда 
		ТекстПримечания = "Просьба подтвердить состояние взаиморасчетов и выслать нам в течение 10 дней подписанный экземпляр."; 
	Иначе
		ТекстПримечания = "Просьба подтвердить состояние взаиморасчетов и выслать нам в течение 10 дней подписанный экземпляр. В противном случае сальдо будет считаться подтвержденным.";
	КонецЕсли;
	ОбластьПодвал.Параметры.Примечание = ТекстПримечания;
	//--- AK suvv
	
	ОбластьПодвал.Параметры.НазваниеОрганизации 	= СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность 	= "________________";
	ОбластьПодвал.Параметры.ДолжностьК 	= "________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "(" + ФИОПредставителя + ")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "(" + ?(ЭтотОбъект.ПредставительКонтрагента.Пустая(), "_______________________", ЭтотОбъект.ПредставительКонтрагента) + ")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Если ВыводитьПечатьИПодписи Тогда
		ТабДок.Рисунки.ПечатьОрганизации.Картинка = Организация.Печать.Получить();
		ТабДок.Рисунки.Подпись.Картинка = ОбщегоНазначения.ПолучитьПодписьФизлица(ПредставительОрганизации).Получить();
	КонецЕсли;
	
	ТабДок.АвтоМасштаб=Истина;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьАнализРасхождений(Вариант = "ПоДатам") Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("СКД_ПоискРасхождений");
	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек[Вариант].Настройки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Акт"));
	Если Параметр<>Неопределено Тогда
		Параметр.Значение = Ссылка;
		Параметр.Использование = Истина
	КонецЕсли;
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;		
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);								

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТабДокумент = Новый ТабличныйДокумент;     
   	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;  
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);	
   
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	Возврат ТабДокумент;
//	Область = ТабДокумент.ПолучитьОбласть("R1C1:R" + Формат(ТабДокумент.ВысотаТаблицы, "ЧГ=0") + "C" + Формат(ТабДокумент.ШиринаСтраницы, "ЧГ=0"));	
//	ТабличныйДокумент.Вывести(Область);	

	
КонецФункции

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "АктСверки" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАктаСверки();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	ИначеЕсли ИмяМакета = "АнализРасхожденийДаты" Тогда
		
		ТабДокумент = ПечатьАнализРасхождений("ПоДатам")
		
	ИначеЕсли ИмяМакета = "АнализРасхожденийСуммы" Тогда
		
		ТабДокумент = ПечатьАнализРасхождений("ПоСуммам")
		
	ИначеЕсли ИмяМакета = "АнализРасхождений" Тогда
		
		ТабДокумент = ПечатьСверкаДокументов()

	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры

#КонецЕсли


Функция ПолучитьХранилищеЗначенияПоФайлу(ИмяФайла_Проверенное, СсылкаХранилище)
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	мРасширение = РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайла_Проверенное);
	Файлы = НайтиФайлы(КаталогСохранения, Строка(СсылкаХранилище.УникальныйИдентификатор()) + "." + мРасширение, Истина);
	Если Файлы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	
КонецФункции

Функция ПолучитьИмяФайлаВХранилище(СсылкаХранилище, Хранилище, ИмяФайла, ВидДанных, НачалоФайла, н)
	
	ИмяФайла_Проверенное = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ИмяФайла);
	
	ДанныеВХранилище = Хранилище.Получить();
	Если ДанныеВХранилище = Неопределено Тогда
		ТекХранилище = ПолучитьХранилищеЗначенияПоФайлу(ИмяФайла_Проверенное, СсылкаХранилище);
	Иначе
		ТекХранилище = Хранилище;
	КонецЕсли;
	
	Если ВидДанных = ПредопределенноеЗначение("Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл") Тогда
		ТекИмяФайла = НачалоФайла + ИмяФайла_Проверенное;
		#Если Клиент Тогда
		Если РаботаСФайлами.СохранитьФайлНаДиске(ТекХранилище, ТекИмяФайла, Ложь, "", Ложь) Тогда
			Возврат ТекИмяФайла;
		Иначе
			Сообщить("Ошибка при записи файла " + ТекИмяФайла);
		КонецЕсли;
		#КонецЕсли
	Иначе // Изображение
		ТекИзображение = ТекХранилище.Получить(); //тип - "Картинка"
		Если НЕ ТекИзображение.Вид = ВидКартинки.Пустая Тогда
			н = н + 1;
			ТекИмяФайла = НачалоФайла + "______" + Формат(н, "ЧГ=") +".jpg";
			Попытка
				ТекИзображение.Записать(ТекИмяФайла);
				Возврат ТекИмяФайла;
			Исключение
				Сообщить("Ошибка при записи файла " + ТекИмяФайла);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат "";
	
КонецФункции

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Результат = Новый Структура("АктСверки","Акт сверки");
	Результат.Вставить("АнализРасхождений","Анализ расхождений (по номерам и датам)");
	Результат.Вставить("АнализРасхожденийДаты","Анализ расхождений (по датам, по суммам)");
	Результат.Вставить("АнализРасхожденийСуммы","Анализ расхождений (по суммам, по датам)");
	
	Возврат Результат

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПредставлениеДокументов(ТаблицаЗначений)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРегистратор) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы.ДокументРегистратор);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента) Тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы.ДокументРегистратор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Индексы.Добавить("ДокументРегистратор");
	
	ТаблицаЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяМетаданных  = МетаданныеТипа.Имя;
		ЕстьНомерВходящегоДокумента = МетаданныеТипа.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено;
		ЕстьДатаВходящегоДокумента  = МетаданныеТипа.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено;

		Запрос.Текст = Запрос.Текст
		+ ?(Запрос.Текст = "", "",
		" 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|")
		+ "
		|ВЫБРАТЬ
		|	""" + МетаданныеТипа.Синоним + """ КАК ПредставлениеТипа,
		|	Док.Ссылка  КАК Ссылка,
		|	" + ?(ЕстьНомерВходящегоДокумента, "Док.НомерВходящегоДокумента", "НЕОПРЕДЕЛЕНО") + " КАК Номер,
		|	" + ?(ЕстьДатаВходящегоДокумента, "Док.ДатаВходящегоДокумента", "Док.Дата") + " КАК Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ Док.Ссылка В (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерДокумента  = ?(Выборка.Номер = Неопределено, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.Ссылка), Выборка.Номер);
		ДатаДокумента = Формат(Выборка.Дата, "ДФ='дд ММ гггг'");
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, "ДокументРегистратор");
		СтрокаДокумента.Представление =  Выборка.ПредставлениеТипа + " № " + НомерДокумента + " от " + ДатаДокумента;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)

	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
		ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	 
	Возврат Результат;

КонецФункции 

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов = Неопределено) Экспорт
	
	КоличествоСчетов = СписокСчетов.Количество();
	Если ФильтрСписокСчетов = неопределено Тогда
		ФильтрСписокСчетов = Новый массив();
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет)
					ИЛИ СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, ?(НЕ ЗначениеЗаполнено(ДатаНачала)	, Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания"		, ?(НЕ ЗначениеЗаполнено(ДатаОкончания)	, Неопределено, КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация"			, Организация);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	Запрос.УстановитьПараметр("ТорговаяТочка"		, ТорговаяТочка);
	//Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("Валюта"				, Неопределено);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов"	, ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Организации);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	Если ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки);
	КонецЕсли;
	Запрос.УстановитьПараметр("АналитикаРасчетов"	, АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"	, Неопределено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОбороты.Регистратор.Дата КАК Дата,
	|	ФинансовыйОбороты.Регистратор КАК ДокументРегистратор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОбороты.СуммаОборотДт
	|		ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОбороты.СуммаОборотКт
	|		ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ФинансовыйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ФинансовыйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ФинансовыйОбороты.КорСчет,
	|	ФинансовыйОбороты.КорСубконто1,
	|	ФинансовыйОбороты.КорСубконто2,
	|	ФинансовыйОбороты.КорСубконто3,
	|	&Валюта КАК Валюта,
	|	ФинансовыйОбороты.ВалютнаяСуммаОборот,
	|	НЕОПРЕДЕЛЕНО КАК ВидПрочихДоходовИРасходов,
	|	ФинансовыйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Регистратор,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Субконто1 = &Организация
	|		    И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйОбороты.КорСчет В ИЕРАРХИИ (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА (НЕ ФинансовыйОбороты.КорСубконто1 = &Контрагент)
	|						ИНАЧЕ (НЕ(ФинансовыйОбороты.КорСубконто1 = &Контрагент))
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|
	|   И ФинансовыйОбороты.КорСчет.Код<>""00""
	|
	|
	|	И (НЕ (ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ФинансовыйОбороты.СуммаОборотДт
	|					ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|			И ВЫБОР
	|				КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|					ТОГДА ФинансовыйОбороты.СуммаОборотКт
	|				ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	|			КОНЕЦ = 0))
	//+++АК Susk (Суслин К.В.) 2018.05.14 ИП-00018664
	//по Реализации ОС проводки НДС никак не попадают в фильтр, придется их пока допом цеплять, пока не решим, что делать.
	//|	ОБЪЕДИНИТЬ ВСЕ

	//|ВЫБРАТЬ
	//|	ФинансовыйОбороты.Период,
	//|	ФинансовыйОбороты.Регистратор,
	//|	ВЫБОР
	//|		КОГДА ФинансовыйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НалогиУН)
	//|			ТОГДА ВЫБОР
	//|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|						ТОГДА ФинансовыйОбороты.СуммаОборотКт
	//|					ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	//|				КОНЕЦ
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|					ТОГДА ФинансовыйОбороты.СуммаОборотДт
	//|				ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ФинансовыйОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НалогиУН)
	//|			ТОГДА ВЫБОР
	//|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|						ТОГДА ФинансовыйОбороты.СуммаОборотДт
	//|					ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	//|				КОНЕЦ
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|					ТОГДА ФинансовыйОбороты.СуммаОборотКт
	//|				ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	НЕОПРЕДЕЛЕНО,
	//|	НЕОПРЕДЕЛЕНО,
	//|	ФинансовыйОбороты.КорСчет,
	//|	ФинансовыйОбороты.КорСубконто1,
	//|	ФинансовыйОбороты.КорСубконто2,
	//|	ФинансовыйОбороты.КорСубконто3,
	//|	&Валюта,
	//|	ФинансовыйОбороты.ВалютнаяСуммаОборот,
	//|	НЕОПРЕДЕЛЕНО,
	//|	ФинансовыйОбороты.Счет
	//|ИЗ
	//|	РегистрБухгалтерии.Финансовый.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НалогиУН), , , , ) КАК ФинансовыйОбороты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияОС КАК РеализацияОС
	//|		ПО ФинансовыйОбороты.Регистратор = РеализацияОС.Ссылка
	//|ГДЕ
	//|	ФинансовыйОбороты.Регистратор ССЫЛКА Документ.РеализацияОС
	//|	И РеализацияОС.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	//|	И РеализацияОС.Организация = &Организация
	//|	И РеализацияОС.Контрагент = &Контрагент
 //---АК Susk (Суслин К.В.) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта"			, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0
				И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		
		// Сформируем строку представления
		Представление = "";
		
		//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) Тогда
		//	
		//	Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
		//		
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
		//		Представление = "Курсовые разницы";
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
		//		Представление = "Санкции";
		//	ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
		//		Представление = "Суммовые разницы";
		//	Иначе
		//		Представление = Строка(Выборка.КорСубконто1);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		Если НЕ ПустаяСтрока(Представление) Тогда
			// Строка уже отработана
			
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		//	Если (Выборка.Дебет >0) Тогда
		//		Представление = "Возврат займа";
		//	ИначеЕсли (Выборка.Кредит >0)Тогда
		//		Представление = "Займ";
		//	Иначе
		//		Представление = "Операции по займам";
		//	КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиям) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиям
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиямВал) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиямВал
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ
		//	тогда
		//	Представление = "Претензия";
			
		ИначеЕсли Выборка.КорСчет = ПланыСчетов.Финансовый.Касса 
				ИЛИ Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Банк) тогда
			
			Если (Выборка.Кредит >0) Тогда
				
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками) Тогда
					Представление = "Возврат средств";
					
				//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
				//	Представление = "Оплата";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками)	Тогда
					
					Представление = "Оплата";
					
				//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
				//	Представление = "Возврат средств";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками) Тогда
			//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) 
			//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Продажи) Тогда
			//	Если Выборка.Дебет <> 0 Тогда
			//		Представление = "Оплата";
			//	Иначе
			//		Представление = "Приход";
			//	КонецЕсли;
			//ИначеЕсли (Выборка.Кредит <>0) Тогда
				Представление = "Приход";
			//КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
		//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) 
		//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Продажи) Тогда
		//		Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
		//			Представление = "Суммовая разница";
		//		ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
		//			Представление = "Продажа";
		//		Иначе
		//			Если Выборка.Дебет > 0 Тогда
		//				Представление = "Продажа";
		//			ИначеЕсли Выборка.Дебет < 0 Тогда
		//				Представление = "Возврат";
		//			Иначе
		//				Представление = "Оплата";
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление = "Принято";
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = "Сторно: принято";
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			Если Представление = "Продажа"
					И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.Операция") Тогда
				Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			Иначе
				Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			КонецЕсли;
		Иначе
			Если Представление = "Оплата"
					И ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РасходИзБанка") Тогда
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДокументРегистратор.ДатаОплаты), "'  .  .    '", Формат(Выборка.ДокументРегистратор.ДатаОплаты, "ДФ=dd.MM.yyyy"))+")";
			Иначе
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли
		КонецЕсли;					  
		// Определение вида движения по корр. счету и корр аналитике.
		//
		//НоваяСтрока.Представление      = МетаданныеДокумента.Синоним + " № " + НомерДокумента
		//					  + " от " + Формат(ДатаДокумента, "ДФ='дд ММ гггг'");
		
		НоваяСтрока.Представление = Представление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ФинансовыйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ФинансовыйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(
		|			&ДатаНачала,
		|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Субконто1 = &Организация
		|				И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ФинансовыйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&ДатаОкончания,
	|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|		Субконто1 = &Организация
	|				И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
					+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление","Дебет, Кредит");	
		
	КонецЕсли; 
	
	НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
	
	//+++АК sole 2018.08.03 ИП-00019460	
	Если ЭтотОбъект.Контрагент.Родитель.Код <> "000000519" Тогда
		//Контрагент не в группе транспорт
		//+++АК sole 2018.08.20 ИП-00019592
		//КорректировкаСуммДвиженийНаСуммуПретензийКПеревозчику(НаборДвижений);
		//---АК sole 2018.08.20 ИП-00019592
	Иначе
		//+++АК sole 2018.08.10 ИП-00019504
		КорректировкаСуммДвиженийНаСуммуНДСДляТранспортныхПДР(НаборДвижений);
		//---АК sole 2018.08.10 ИП-00019504
	КонецЕсли;
	//---АК sole 2018.08.03 ИП-00019460
	
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры

//+++АК sole 2018.08.03 ИП-00019460
Процедура КорректировкаСуммДвиженийНаСуммуПретензийКПеревозчику(НаборДвижений)
	
	Перем Запрос, СтруктураНастроек;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ПретензияПеревозчику, ЭтотОбъект.Дата);				
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
"ВЫБРАТЬ
|	НаборДвижений.Дата,
|	НаборДвижений.ДокументРегистратор,
|   НаборДвижений.Представление,
|   НаборДвижений.Дебет,
|   НаборДвижений.Кредит
|
|		ПОМЕСТИТЬ втНаборДвижений	
|
|ИЗ &НаборДвижений КАК НаборДвижений
|
|;
|//////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втНаборДвижений.Дата,
|	втНаборДвижений.ДокументРегистратор,
|   втНаборДвижений.Представление,
|   втНаборДвижений.Дебет,
|   втНаборДвижений.Кредит - ЕСТЬNULL(Финансовый.Сумма, 0) КАК Кредит
|
|ИЗ втНаборДвижений
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый КАК Финансовый ПО
|			Финансовый.Регистратор = втНаборДвижений.ДокументРегистратор
|		И	ТИПЗНАЧЕНИЯ(Финансовый.Регистратор) = Тип(Документ.ПоступлениеТоваровУслуг)
|		И	Финансовый.СчетДт = &Счет
|		И	Финансовый.Активность
|
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Финансовый.Субконто КАК ФинансовыйСубконто ПО
|			ФинансовыйСубконто.Регистратор = Финансовый.Регистратор
|		И	ФинансовыйСубконто.НомерСтроки = Финансовый.НомерСтроки
|		И	ФинансовыйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
|		И	ФинансовыйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Контрагенты)
|		И	ФинансовыйСубконто.Значение.Родитель.Код = ""000000519"" //Транспорт
|";
		
	Запрос.УстановитьПараметр("НаборДвижений", НаборДвижений);
	Запрос.УстановитьПараметр("Счет", СтруктураНастроек.Счет);
	
	НаборДвижений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

//+++АК sole 2018.08.10 ИП-00019504
Процедура КорректировкаСуммДвиженийНаСуммуНДСДляТранспортныхПДР(НаборДвижений)
	
	Перем Запрос;
		
	Запрос = Новый Запрос();
	
	Запрос.Текст =
"ВЫБРАТЬ
|	НаборДвижений.Дата,
|	НаборДвижений.ДокументРегистратор,
|   НаборДвижений.Представление,
|   НаборДвижений.Дебет,
|   НаборДвижений.Кредит
|
|		ПОМЕСТИТЬ втНаборДвижений	
|
|ИЗ &НаборДвижений КАК НаборДвижений
|
|;
|//////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втНаборДвижений.Дата,
|	втНаборДвижений.ДокументРегистратор,
|   втНаборДвижений.Представление,
|   втНаборДвижений.Дебет,
|   втНаборДвижений.Кредит - ЕСТЬNULL(ПоступлениеДопРасходов.СуммаНДС, 0) КАК Кредит
|
|ИЗ втНаборДвижений
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов ПО
|			ПоступлениеДопРасходов.Ссылка = втНаборДвижений.ДокументРегистратор
|		И	ПоступлениеДопРасходов.ТранспортныеУслуги
|		И	ПоступлениеДопРасходов.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДСВТомЧисле)
|";
		
	Запрос.УстановитьПараметр("НаборДвижений", НаборДвижений);
	
	НаборДвижений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета_(ФильтрСписокСчетов = неопределено) Экспорт
	
	КоличествоСчетов = СписокСчетов.Количество();
	Если ФильтрСписокСчетов = неопределено Тогда
		ФильтрСписокСчетов = Новый массив();
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(ДатаНачала),    Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания), Неопределено, КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("ТорговаяТочка",    ТорговаяТочка);
	//Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("Валюта",        неопределено);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Организации);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	Если ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ТорговыеТочки);
	КонецЕсли;
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента",Неопределено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОбороты.Регистратор.Дата КАК Дата,
	|	ФинансовыйОбороты.Регистратор КАК ДокументРегистратор,
	|	ФинансовыйОбороты.СуммаОборотДт КАК Дебет,
	|	ФинансовыйОбороты.СуммаОборотКт КАК Кредит,
	|	ЕСТЬNULL(ФинансовыйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ФинансовыйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ФинансовыйОбороты.КорСчет,
	|	ФинансовыйОбороты.КорСубконто1,
	|	ФинансовыйОбороты.КорСубконто2,
	|	ФинансовыйОбороты.КорСубконто3,
	|	&Валюта КАК Валюта,
	|	ФинансовыйОбороты.СуммаОборот,
	|	НЕОПРЕДЕЛЕНО КАК ВидПрочихДоходовИРасходов,
	|	ФинансовыйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Регистратор,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Субконто1 = &Организация
	|		    И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ФинансовыйОбороты.КорСчет В ИЕРАРХИИ (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА (НЕ ФинансовыйОбороты.КорСубконто1 = &Контрагент)
	|						ИНАЧЕ (НЕ(ФинансовыйОбороты.КорСубконто1 = &Контрагент))
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (НЕ (ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ФинансовыйОбороты.СуммаОборотДт
	|					ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|			И ВЫБОР
	|				КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|					ТОГДА ФинансовыйОбороты.СуммаОборотКт
	|				ИНАЧЕ ФинансовыйОбороты.ВалютнаяСуммаОборотКт
	|			КОНЕЦ = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.СуммаОборот;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		
		// Сформируем строку представления
		Представление = "";
		
		//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) Тогда
		//	
		//	Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
		//		
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
		//		Представление = "Курсовые разницы";
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
		//		Представление = "Санкции";
		//	ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
		//		Представление = "Суммовые разницы";
		//	Иначе
		//		Представление = Строка(Выборка.КорСубконто1);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		Если не ПустаяСтрока(Представление) Тогда
			// Строка уже отработана
			
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		//	Если (Выборка.Дебет >0) Тогда
		//		Представление = "Возврат займа";
		//	ИначеЕсли (Выборка.Кредит >0)Тогда
		//		Представление = "Займ";
		//	Иначе
		//		Представление = "Операции по займам";
		//	КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиям) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиям
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиямВал) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиямВал
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ) 
		//	или Выборка.Счет = ПланыСчетов.Финансовый.РасчетыПоПретензиямУЕ
		//	тогда
		//	Представление = "Претензия";
			
		ИначеЕсли Выборка.КорСчет = ПланыСчетов.Финансовый.Касса 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Банк) тогда
			
			Если (Выборка.Кредит >0) Тогда
				
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками) Тогда
					Представление = "Возврат средств";
					
				//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
				//	Представление = "Оплата";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками)	Тогда
					
					Представление = "Оплата";
					
				//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
				//	Представление = "Возврат средств";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками) тогда
			//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) 
			//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Продажи) Тогда
			//	Если Выборка.Дебет <> 0 Тогда
			//		Представление = "Оплата";
			//	Иначе
			//		Представление = "Приход";
			//	КонецЕсли;
			//ИначеЕсли (Выборка.Кредит <>0) Тогда
				Представление = "Приход";
			//КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.РасчетыСПокупателямиИЗаказчиками) Тогда
		//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.ПрочиеДоходыИРасходы) 
		//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Финансовый.Продажи) Тогда
		//		Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
		//			Представление = "Суммовая разница";
		//		ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
		//			Представление = "Продажа";
		//		Иначе
		//			Если Выборка.Дебет > 0 Тогда
		//				Представление = "Продажа";
		//			ИначеЕсли Выборка.Дебет < 0 Тогда
		//				Представление = "Возврат";
		//			Иначе
		//				Представление = "Оплата";
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление = "Принято";
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = "Сторно: принято";
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.Операция") Тогда
				Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			Иначе
				Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			КонецЕсли;
		Иначе
			Если Представление = "Оплата" И ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РасходИзБанка") Тогда
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДокументРегистратор.ДатаОплаты), "'  .  .    '", Формат(Выборка.ДокументРегистратор.ДатаОплаты, "ДФ=dd.MM.yyyy"))+")";
			Иначе
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли
		КонецЕсли;					  
		// Определение вида движения по корр. счету и корр аналитике.
		//
		//НоваяСтрока.Представление      = МетаданныеДокумента.Синоним + " № " + НомерДокумента
		//					  + " от " + Формат(ДатаДокумента, "ДФ='дд ММ гггг'");
		
		НоваяСтрока.Представление = Представление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ФинансовыйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ФинансовыйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.Остатки(
		|			&ДатаНачала,
		|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Субконто1 = &Организация
		|				И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ФинансовыйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ФинансовыйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			&ДатаОкончания,
	|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|		Субконто1 = &Организация
	|				И Субконто2 = &Контрагент" +
	?(ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), "
	|		    И ((Субконто3 = &ТорговаяТочка) ИЛИ (&ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)))", "") + ") КАК ФинансовыйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
					+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление","Дебет, Кредит");	
		
	КонецЕсли; 
	
	НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
						  
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры


// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
			МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
		Иначе
			МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
    Возврат МетаданныеПоДокументам[ТипДокумента];
	
КонецФункции // ПолучитьМетаданныеДокумента()

Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 8) = "Передано" Тогда
			Представление = "Принято" + Сред(Представление, 9);
			
		ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
			Представление = "Передано" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
			Представление = "Приход" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
			Представление = "Продажа" + Сред(Представление, 7);
		КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	ОстатокНаНачалоПоДаннымКонтрагента = -ОстатокНаНачало;
	ДанныеКонтрагентаЗагружены = Ложь;
	
КонецПроцедуры


//+++АК GEYV 16.06.2015
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЭтотОбъект.ЕстьВложения = ДопМодульСервер.ПолучитьЕстьВложения(ЭтотОбъект.Ссылка);
	
	Если ЭтотОбъект.СверкаСогласована
			И НЕ ЭтотОбъект.ЕстьВложения Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Прикрепленного файла нет. Необходимо прикрепить скан-копию экземпляра поставщика для отчета по наличию согласованного акта сверки!";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если ЭтотОбъект.ПредставительОрганизации.Пустая() Тогда
		СтруктураЛица = ОбщегоНазначения.ОтветственныеЛица(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		ЭтотОбъект.ПредставительОрганизации = СтруктураЛица.Руководитель;
	КонецЕсли;	
	
	Если СверкаСогласована И НЕ Ссылка.СверкаСогласована Тогда
		ДатаУстановкиСверено = ТекущаяДата();
	КонецЕсли;									
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаОтправкиКонтрагенту = '00010101';
	
КонецПроцедуры
//---АК

//+++АК ILIK 2018.09.24 ИП-00019115
Процедура ПроверитьВхождениеНомеров(ТЗ)
	СтрокиОрганизации = ТЗ.НайтиСтроки(Новый Структура("ПоДаннымКонтрагента", Ложь));
	СтрокиКонтрагента = ТЗ.НайтиСтроки(Новый Структура("ПоДаннымКонтрагента", Истина));
	
	Для Каждого СтрОрг Из СтрокиОрганизации Цикл
		Если СтрДлина(СтрОрг.Номер) < 5 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрКонтр Из СтрокиКонтрагента Цикл
			Если СтрКонтр.Номер = СтрОрг.Номер Тогда
				Продолжить;
			КонецЕсли;
			
			Если Прав(СтрКонтр.Номер, СтрДлина(СтрОрг.Номер)) = СтрОрг.Номер Тогда
				СтрКонтр.Номер = СтрОрг.Номер;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
МетаданныеПоДокументам = Новый Соответствие();
