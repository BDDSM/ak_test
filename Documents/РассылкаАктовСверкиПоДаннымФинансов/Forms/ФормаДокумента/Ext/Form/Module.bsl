
Перем Бухгалтерия;


&НаСервере
Процедура Послать(АдресПолучателя, ТекстПисьма, УЗ, Тема, Пользователь = Неопределено, АдресФайла = "")
	
	//+++АК SHEP 2018.02.15 ИП-00017889
	УправлениеЭлектроннойПочтой.ПослатьОтРассылкиСОбратнымАдресом(АдресПолучателя, ТекстПисьма, УЗ, Тема, Пользователь,, АдресФайла);
	Возврат;
	//---АК SHEP 2018.02.15
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	//
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	//+++АК SHEP 2018.02.05 ИП-00017889
	ОбратныйАдрес = Письмо.ОбратныйАдрес.Добавить(СокрЛП(УЗ));
	ОбратныйАдрес.ОтображаемоеИмя = Пользователь;
	ОбратныйАдрес.Кодировка = "UTF-8";
	//---АК SHEP 2018.02.05
	
	Письмо.Получатели.Добавить(АдресПолучателя);
	
	//Для Каждого ТекАдр Из Вложения Цикл
	Если НЕ АдресФайла = "" Тогда
		Письмо.Вложения.Добавить(АдресФайла);
	КонецЕсли;
	//КонецЦикла;
	
	Письмо.Тема				= Тема;
	
	Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
	
	Почта = Новый ИнтернетПочта;
	
	Почта.Подключиться(Профиль);
	
	Почта.Послать(Письмо);
	
	Почта.Отключиться();
	
КонецПроцедуры

Функция СформироватьПредставленияКонтакта(Контакт, ОсновнойБухгалтерПокупателя, ОсновнойМенеджерПокупателя, Должность, ФамилияИмяМенеджера, Жирным = Ложь)
	
	ЖирныйШрифтНач 		= "";
	ЖирныйШрифтКонец 	= "";
	
	Если Жирным Тогда
		ЖирныйШрифтНач 		= "<STRONG>";
		ЖирныйШрифтКонец 	= "</STRONG>";  					
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Контакт) 
				И (ОсновнойМенеджерПокупателя <> ОсновнойБухгалтерПокупателя
					ИЛИ Должность = "Бухгалтер"),
			"<P>" + ЖирныйШрифтНач + Должность + " " + ФамилияИмяМенеджера + " " + Контакт + ЖирныйШрифтКонец + "</P>", ""); 
	
КонецФункции

&НаКлиенте
Процедура УстановитьСнятьПометки(ИмяТЧ, Пометка)
	
	Для каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
			Продолжить;	
		КонецЕсли;
		
		ТекСтрока.Пометка = Пометка;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Рассылка актов сверки по данным текущей базы");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		Объект.ОтветственныйБухгалтер 	= Объект.Ответственный;
		Объект.Организация 				= УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,
																				ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация);
		
		СчетаПоУмолчанию = Новый Массив;
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ОбеспечительныйВзнос);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыПоАренде);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщиками);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.ПрочаяЗадолженность);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиУпаковки);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиОборудования);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками);
		
        Для каждого ТекЭлемент Из СчетаПоУмолчанию Цикл
			НоваяСтрока = Объект.СписокСчетов.Добавить();	
			НоваяСтрока.Счет 				= ТекЭлемент;
			НоваяСтрока.УчаствуетВРасчетах 	= Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Период.ДатаНачала 		= Объект.ДатаНачала;
	Период.ДатаОкончания 	= Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала 		= Период.ДатаНачала;
	Объект.ДатаОкончания 	= Период.ДатаОкончания;
	
КонецПроцедуры

Процедура ЗаполнитьСписокРассылкиНаСервере(ТекНомер = Неопределено, ПоСтроке = Ложь)
	
	Если НЕ ТекНомер = Неопределено Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
		ТекущиеДанные = ДокументОбъект.СписокРассылки.Получить(ТекНомер - 1);
	
	КонецЕсли;
	
	Если Объект.СписокРассылки.Количество() > 0
			И ПоСтроке = Ложь Тогда
		Объект.СписокРассылки.Очистить();
	КонецЕсли;
	
	//
	СчетаПоУмолчанию = Новый Массив;	
	Для каждого ТекЭлемент Из Объект.СписокСчетов Цикл
		Если ТекЭлемент.УчаствуетВРасчетах Тогда		
			СчетаПоУмолчанию.Добавить(ТекЭлемент.Счет);			
		КонецЕсли;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МассивСчетов"	, СчетаПоУмолчанию);
	Запрос.УстановитьПараметр("СтатьяДДС"		, Объект.СтатьяДДС);
	
	Если НЕ ПоСтроке Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
		|	ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
		|	ЛОЖЬ КАК Пометка,
		|	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		|	ФинансовыйОстаткиИОбороты.Субконто1.ШаблонЗапросаАктаСверки КАК ШаблонЗапросаАктаСверки,
		|	ФинансовыйОстаткиИОбороты.Субконто3 КАК ТорговаяТочка
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			,
		|			Счет В (&МассивСчетов),
		|			,
		|			Субконто2 ССЫЛКА Справочник.Контрагенты
		|				И Субконто2.НеОтправлятьУведомления = ЛОЖЬ
		|				И Субконто1 ССЫЛКА Справочник.Организации
		|				И Субконто1 = &Субконто1
		|				И (Субконто2.СтатьяДвиженияДенежныхСредств = &СтатьяДДС
		|					ИЛИ &СтатьяДДС = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|				И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя) КАК ФинансовыйОстаткиИОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя";
		
	Иначе
		Запрос.УстановитьПараметр("Организация"	, ?(ТекущиеДанные.Организация.Пустая(), Объект.Организация, ТекущиеДанные.Организация));
		Запрос.УстановитьПараметр("Контрагент"	, ТекущиеДанные.Контрагент);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК Пометка,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Организации.Ссылка КАК Организация,
		|	Организации.ШаблонЗапросаАктаСверки,
		|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		|	NULL КАК ТорговаяТочка
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|	И Организации.Ссылка = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Пометка,
	|	Данные.ОсновнойБухгалтерПокупателя,
	|	Данные.ОсновнойМенеджерПокупателя,
	|	Данные.ШаблонЗапросаАктаСверки,
	|	ЕСТЬNULL(ТелефонМенеджер.Представление, """") КАК ТелефонМенеджера,
	|	ЕСТЬNULL(ТелефонБухгалтера.Представление, """") КАК ТелефонБухгалтера,
	|	НастройкиПользователей.Значение КАК УчетнаяЗаписьЭлектроннойПочты,
	|	ЕСТЬNULL(ПочтаМенеджера.Представление, """") КАК ПочтаМенеджера,
	|	ЕСТЬNULL(ПочтаБухгалтера.Представление, """") КАК ПочтаБухгалтера,
	|	Данные.ТорговаяТочка КАК ТорговаяТочка,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонМенеджер
	|		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ТелефонМенеджер.Объект
	|			И (ТелефонМенеджер.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ТелефонМенеджер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонБухгалтера
	|		ПО Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ТелефонБухгалтера.Объект
	|			И (ТелефонБухгалтера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ТелефонБухгалтера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Данные.ОсновнойБухгалтерПокупателя = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаМенеджера
	|		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ПочтаМенеджера.Объект
	|			И (ПочтаМенеджера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ПочтаМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаБухгалтера
	|		ПО (ПочтаБухгалтера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ПочтаБухгалтера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
	|			И Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ПочтаБухгалтера.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Данные.Контрагент = ДоговорыКонтрагентов.Владелец
	|			И Данные.Организация = ДоговорыКонтрагентов.Организация
	|			И (Данные.ТорговаяТочка = ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница
	|				ИЛИ Данные.ТорговаяТочка = ДоговорыКонтрагентов.СтруктурнаяЕдиница)
	|			И (ДоговорыКонтрагентов.СрокДействия >= &ДатаНачала
	|				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктСверкиВзаиморасчетов.Контрагент КАК Контрагент
	|		ИЗ
	|			Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ГДЕ
	|			(&ДатаОкончания МЕЖДУ АктСверкиВзаиморасчетов.ДатаНачала И КОНЕЦПЕРИОДА(АктСверкиВзаиморасчетов.ДатаОкончания, ДЕНЬ))
	|			И АктСверкиВзаиморасчетов.СверкаСогласована
	|			И НЕ АктСверкиВзаиморасчетов.ПометкаУдаления) КАК ВЗ_Согласованные
	|		ПО Данные.Контрагент = ВЗ_Согласованные.Контрагент
	|ГДЕ
	|	ВЗ_Согласованные.Контрагент ЕСТЬ NULL ";
	
	Если Объект.Организация.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Субконто1 = &Субконто1", "");
	Иначе
		Запрос.УстановитьПараметр("Субконто1"					, Объект.Организация);
	КонецЕсли;
	
	Если Объект.ОтветственныйБухгалтер.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя", "");
	Иначе
		Запрос.УстановитьПараметр("ОсновнойБухгалтерПокупателя"	, Объект.ОтветственныйБухгалтер);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив"	, Результат.ВыгрузитьКолонку("Контрагент"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, КонтактнаяИнформация1.Представление) КАК Почта,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|			И (КонтактнаяИнформация.Вид = Контрагенты.ВидКИ_ДляИнформирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО (КонтактнаяИнформация1.Объект = Контрагенты.Ссылка)
	|			И (КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами))
	|ГДЕ
	|	Контрагенты.Ссылка В(&Массив)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат.Колонки.Добавить("Почта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Для каждого ТекСтрока Из Результат Цикл
		
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Контрагент", ТекСтрока.Контрагент)) Тогда
			
			ТекСтрока.Почта = ВыборкаДетальныеЗаписи.Почта;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		//
		Если НЕ ПоСтроке Тогда
			НоваяСтрока = Объект.СписокРассылки.Добавить();
		Иначе
			НоваяСтрока = ТекущиеДанные;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	Если ПоСтроке Тогда		
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРассылки(Команда)
	
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Заполнение таблицы невозможно, так как имеются постоянные данные!";
			Сообщение.Сообщить();	
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	//+++АК POZM 2018.08.02 ИП-00019340
	Если Объект.СписокРассылки.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСписокРассылкиЗавершение", ЭтаФорма), "Табличная часть будет очищена, а все акты сверок, которые в ней есть - помечены на удаление. Продолжить?", Режим, 0);
        Возврат;
	КонецЕсли;
	ЗаполнитьСписокРассылкиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРассылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокРассылкиФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРассылкиФрагмент()
	
	ПометитьАктыСверкиНаУдалениеСервер();
	//---АК POZM 
	
	//
	ЗаполнитьСписокРассылкиНаСервере();

КонецПроцедуры

//+++АК POZM 2018.08.02 ИП-00019340
&НаСервере
Процедура ПометитьАктыСверкиНаУдалениеСервер()
	Для каждого Стр Из Объект.СписокРассылки Цикл
		Если Не ЗначениеЗаполнено(Стр.АктСверки) Тогда
			Продолжить;
		КонецЕсли;	
		Док = Стр.АктСверки.ПолучитьОбъект();
		Док.УстановитьПометкуУдаления(Истина);
	КонецЦикла; 
КонецПроцедуры	
//---АК POZM 
Процедура ОтправитьПисьмаНаСервере(Формат = "XLS")
	
	СоответствиеШаблонов 	= Новый Соответствие;
	МассивСообщений 		= Новый Массив;
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	Для каждого СтрокаТЧ Из Объект.СписокРассылки Цикл
		
		Если НЕ	СтрокаТЧ.Пометка
				ИЛИ НЕ СтрокаТЧ.ЕстьОбороты Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Отправлено) Тогда
			Продолжить;
		КонецЕсли;

		Отказ = Ложь;
		ПроверитьСтрокуТЧ(МассивСообщений,СтрокаТЧ,Отказ);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ТекстHTML = СоответствиеШаблонов.Получить(СтрокаТЧ.Организация);
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = ПолучитьТекстHTML(СтрокаТЧ);						
			СоответствиеШаблонов.Вставить(СтрокаТЧ.Организация, ТекстHTML);
			
		КонецЕсли;
		
		ФамилияИмяБухгалтера = "";
		УстановитьПараметрыHTML(ТекстHTML,СтрокаТЧ,ФамилияИмяБухгалтера);
				
		ТаблицаОбъектовКому = СтрЗаменить(СтрокаТЧ.Почта, ";", Символы.ПС);
		
		ВложенныйАкт = СтрокаТЧ.АктСверки.ПолучитьОбъект().ПечатьАктаСверки(Формат = "PDF");		
		
		ВремФайл = ПолучитьИмяВременногоФайла(Формат);
		
		ВложенныйАкт.Записать(ВремФайл, ?(Формат = "PDF", ТипФайлаТабличногоДокумента.PDF, ТипФайлаТабличногоДокумента.XLS));
		
		Для сч = 1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
			АдресПолучателя = СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому, сч));
			Попытка
				Послать(АдресПолучателя, ТекстHTML, СтрокаТЧ.ПочтаБухгалтера, СтрокаТЧ.ШаблонЗапросаАктаСверки.Тема,
							СокрЛП(ФамилияИмяБухгалтера) //+++АК SHEP 2018.02.05 ИП-00017780
							, ВремФайл);
				СтрокаТЧ.Отправлено = ТекущаяДата();
			Исключение
				Сообщить(АдресПолучателя);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;    
	
	//
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтрокуТЧЗапросы(МассивСообщений,Знач СтрокаТЧ=Неопределено,Отказ);	
	
	Если СтрокаТЧ = Неопределено Тогда
		СтрокаТЧ = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока];
	КонецЕсли;	

	ТекОрганизация 		= СтрокаТЧ.Организация;
	ТекКонтрагент 		= СтрокаТЧ.Контрагент;
	ТекШаблонЗапроса 	= ТекОрганизация.ШаблонЗапросаАктаСверки;
 	
	Если ТекШаблонЗапроса.Пустая() Тогда
		МассивСообщений.Добавить("У Организации " + ТекОрганизация + " не заполнен шаблон запроса акта сверки!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если СтрокаТЧ.ОсновнойМенеджерПокупателя.Пустая() Тогда
		МассивСообщений.Добавить("У Контрагента " + ТекКонтрагент + " не заполнен основной менеджер!");	
	КонецЕсли;
	
	Если СтрокаТЧ.ОсновнойБухгалтерПокупателя.Пустая() Тогда
		МассивСообщений.Добавить("У Контрагента " + ТекКонтрагент + " не заполнен основной бухгалер!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПочтаБухгалтера) Тогда
		МассивСообщений.Добавить("У пользователя " + СтрокаТЧ.ОсновнойБухгалтерПокупателя + " не заполнена учетная запись электронной почты!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Почта) Тогда
		МассивСообщений.Добавить("У Контрагента " + ТекКонтрагент + " не заполнен email адрес!");	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры	
	
Процедура ПроверитьСтрокуТЧ(МассивСообщений,Знач СтрокаТЧ=Неопределено,Отказ);	
	
	Если СтрокаТЧ = Неопределено Тогда
		СтрокаТЧ = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока];
	КонецЕсли;	
	
	Если СтрокаТЧ.ШаблонЗапросаАктаСверки.Пустая() Тогда
		МассивСообщений.Добавить("У Организации " + СтрокаТЧ.Организация + " не заполнен шаблон запроса акта сверки!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если СтрокаТЧ.ОсновнойМенеджерПокупателя.Пустая() Тогда
		МассивСообщений.Добавить("У Контрагента " + СтрокаТЧ.Контрагент + " не заполнен основной менеджер!");	
	КонецЕсли;
	
	Если СтрокаТЧ.ОсновнойБухгалтерПокупателя.Пустая() Тогда
		МассивСообщений.Добавить("У Контрагента " + СтрокаТЧ.Контрагент + " не заполнен основной бухгалер!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПочтаБухгалтера) Тогда
		МассивСообщений.Добавить("У пользователя " + СтрокаТЧ.ОсновнойБухгалтерПокупателя + " не заполнена учетная запись электронной почты!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Почта) Тогда
		МассивСообщений.Добавить("У Контрагента " + СтрокаТЧ.Контрагент + " не заполнен email адрес!");	
		Отказ = Истина;
	КонецЕсли;
	
	Если СтрокаТЧ.АктСверки.Пустая() Тогда
		МассивСообщений.Добавить("У Контрагента " + СтрокаТЧ.Контрагент + " не создан акт!");	
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекстHTMLЗапросы(СтрокаТЧ)
		
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";

	ТекОрганизация 		= СтрокаТЧ.Организация;
	ТекКонтрагент 		= СтрокаТЧ.Контрагент;
	ТекШаблонЗапроса 	= ТекОрганизация.ШаблонЗапросаАктаСверки;
	
	ТекстHTML = ТекШаблонЗапроса.ОписаниеHTML;
			
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ИмяФайла
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! " + ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		//
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор() +
								Прав(ТекКартинкаНТМЛ.Источник, 4);
		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ТекКартинкаНТМЛ.Источник, ИмяВременногоФайла);
		
	КонецЦикла;
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьТекстHTML(СтрокаТЧ)
		
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";

	
	ТекстHTML = СтрокаТЧ.ШаблонЗапросаАктаСверки.ОписаниеHTML;
			
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);

	Для каждого ТекКартинкаНТМЛ Из ДокументHTML.Картинки Цикл
		
		ТекКартинкаНаДиске = Новый Файл(ТекКартинкаНТМЛ.Источник);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяФайла", ТекКартинкаНаДиске.ИмяБезРасширения);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ИмяФайла
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена картинка в базе! " + ТекКартинкаНаДиске.ИмяБезРасширения;
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		//
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВыборкаДетальныеЗаписи.ИмяФайла);
		Файлы = НайтиФайлы(КаталогСохранения, Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()) + "." + Расширение, Истина);
		Если Файлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор() +
								Прав(ТекКартинкаНТМЛ.Источник, 4);
		КопироватьФайл(Файлы[0].ПолноеИмя, ИмяВременногоФайла);
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ТекКартинкаНТМЛ.Источник, ИмяВременногоФайла);
		
	КонецЦикла;
	
	Возврат ТекстHTML;	

КонецФункции

Процедура УстановитьПараметрыHTMLЗапросы(ТекстHTML,СтрокаТЧ,ФамилияИмяБухгалтера="")
		
	ТекКонтрагент 		= СтрокаТЧ.Контрагент;
	ТекОрганизация 		= СтрокаТЧ.Организация;

	СтруктураПараметров = Новый Структура;
		
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ТекОрганизация, ТекущаяДата());
	
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование"	, ТекКонтрагент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ПериодОбработки"				, "с " + Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy") +
																	" по " + Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));	
	СтруктураПараметров.Вставить("Организация"					, ТекОрганизация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор"			, Руководители.Руководитель);
		
	СтруктураПараметров.Вставить("Комментарий",СтрокаТЧ.Комментарий);
	СтруктураПараметров.Вставить("АдресДоставки",Объект.АдресДоставки.ПочтовыйАдрес);	
	
	Для каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстHTML = СтрЗаменить(ТекстHTML, "%" + ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
	СтруктураПараметровМногострочные = Новый Структура;  		
	
	ДанныеФизЛицаМенеджера 	= ОбщегоНазначения.ПолучитьМассивФИО(СтрокаТЧ.ОсновнойМенеджерПокупателя.ФизЛицо);
	ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(СтрокаТЧ.ОсновнойБухгалтерПокупателя.ФизЛицо);
	
	ФамилияИмяМенеджера 	= ДанныеФизЛицаМенеджера[0] 	+ " " + ДанныеФизЛицаМенеджера[1];
	ФамилияИмяБухгалтера 	= ДанныеФизЛицаБухгалтера[0] 	+ " " + ДанныеФизЛицаБухгалтера[1];
	
	Телефоны 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ТелефонМенеджера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Менеджер"	, ФамилияИмяМенеджера);
	Телефоны1 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ТелефонБухгалтера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Бухгалтер", ФамилияИмяБухгалтера);
	
	ФИОEMAIL 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ПочтаМенеджера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Менеджер"	, ФамилияИмяМенеджера	, Истина);
	ФИОEMAIL1 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ПочтаБухгалтера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Бухгалтер", ФамилияИмяБухгалтера	, Истина);
	
	СтруктураПараметровМногострочные.Вставить("Телефоны"	, СокрЛП(Телефоны) 	+ " " + СтрокаТЧ.ПочтаМенеджера);
	СтруктураПараметровМногострочные.Вставить("Телефоны1"	, СокрЛП(Телефоны1) + " " + СтрокаТЧ.ПочтаБухгалтера);
	
	СтруктураПараметровМногострочные.Вставить("ФИОEmail"	, ФИОEMAIL);
	СтруктураПараметровМногострочные.Вставить("ФИОEmail1"	, ФИОEMAIL1);
	
	Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
		
		ЖирныйШрифтНач 		= "";
		ЖирныйШрифтКонец 	= "";
		Если НЕ Найти(ТекстHTML, "<P>%" + ТекПараметр.Ключ + "</P>") Тогда
			ЖирныйШрифтНач 		= "<STRONG>";
			ЖирныйШрифтКонец 	= "</STRONG>";  					
		КонецЕсли;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, "<P>" + ЖирныйШрифтНач + "%" + ТекПараметр.Ключ + ЖирныйШрифтКонец + "</P>", ТекПараметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры	                             

Процедура УстановитьПараметрыHTML(ТекстHTML,СтрокаТЧ,ФамилияИмяБухгалтера="")

	СтруктураПараметров = Новый Структура;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(СтрокаТЧ.Организация, ТекущаяДата());
		
	СтруктураПараметров.Вставить("КонтрагентПолноеНаименование"	,СтрокаТЧ.Контрагент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ПериодОбработки"				,"с " + Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy") +
																	" по " + Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	
	СтруктураПараметров.Вставить("Организация"					,СтрокаТЧ.Организация.НаименованиеСокращенное);
	СтруктураПараметров.Вставить("ГенеральныйДиректор"			,Руководители.Руководитель);
	
	СтруктураПараметров.Вставить("Комментарий",СтрокаТЧ.Комментарий);
	СтруктураПараметров.Вставить("АдресДоставки",Объект.АдресДоставки.ПочтовыйАдрес);	
	
	Для каждого ТекПараметр Из СтруктураПараметров Цикл
		
		ТекстHTML = СтрЗаменить(ТекстHTML, "%" + ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
	СтруктураПараметровМногострочные = Новый Структура;  		
	
	ДанныеФизЛицаМенеджера 	= ОбщегоНазначения.ПолучитьМассивФИО(СтрокаТЧ.ОсновнойМенеджерПокупателя.ФизЛицо);
	ДанныеФизЛицаБухгалтера = ОбщегоНазначения.ПолучитьМассивФИО(СтрокаТЧ.ОсновнойБухгалтерПокупателя.ФизЛицо);
	
	ФамилияИмяМенеджера 	= ДанныеФизЛицаМенеджера[0] 	+ " " + ДанныеФизЛицаМенеджера[1];
	ФамилияИмяБухгалтера 	= ДанныеФизЛицаБухгалтера[0] 	+ " " + ДанныеФизЛицаБухгалтера[1];
	
	Телефоны 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ТелефонМенеджера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Менеджер", ФамилияИмяМенеджера);
	Телефоны1 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ТелефонБухгалтера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Бухгалтер", ФамилияИмяБухгалтера);
	
	ФИОEMAIL 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ПочтаМенеджера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Менеджер", ФамилияИмяМенеджера, Истина);
	ФИОEMAIL1 	= СформироватьПредставленияКонтакта(СтрокаТЧ.ПочтаБухгалтера, СтрокаТЧ.ОсновнойБухгалтерПокупателя,
													СтрокаТЧ.ОсновнойМенеджерПокупателя, "Бухгалтер", ФамилияИмяБухгалтера, Истина);
	
	СтруктураПараметровМногострочные.Вставить("Телефоны"	, СокрЛП(Телефоны) 	+ " " + СтрокаТЧ.ПочтаМенеджера);
	СтруктураПараметровМногострочные.Вставить("Телефоны1"	, СокрЛП(Телефоны1) + " " + СтрокаТЧ.ПочтаБухгалтера);
	
	СтруктураПараметровМногострочные.Вставить("ФИОEmail"	, ФИОEMAIL);
	СтруктураПараметровМногострочные.Вставить("ФИОEmail1"	, ФИОEMAIL1);
	
	Для каждого ТекПараметр Из СтруктураПараметровМногострочные Цикл
		
		ЖирныйШрифтНач 		= "";
		ЖирныйШрифтКонец 	= "";
		Если НЕ Найти(ТекстHTML, "<P>%" + ТекПараметр.Ключ + "</P>") Тогда
			ЖирныйШрифтНач 		= "<STRONG>";
			ЖирныйШрифтКонец 	= "</STRONG>";  					
		КонецЕсли;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, "<P>" + ЖирныйШрифтНач + "%" + ТекПараметр.Ключ + ЖирныйШрифтКонец + "</P>", ТекПараметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	ОтправитьПисьмаНаСервере();
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ТекСтрока.Пометка = ТекСтрока.Пометка;	
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиСписокРассылки(Команда)
	
	УстановитьСнятьПометки("СписокРассылки", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСписокРассылки(Команда)
	
	УстановитьСнятьПометки("СписокРассылки", Ложь);
	
КонецПроцедуры

Процедура СоздатьАктыНаСервере()
	
	ТекВалюта 	= Константы.ВалютаРегламентированногоУчета.Получить();
	ТекДата		= КонецДня(Объект.Дата);
	
	//
	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
		
		Если НЕ ТекСтрока.Пометка
				ИЛИ ЗначениеЗаполнено(ТекСтрока.АктСверки)
				ИЛИ ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ДокументСверки = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		ДокументСверки.Дата 			= ТекДата;
		ДокументСверки.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		ДокументСверки.ВалютаДокумента 	= ТекВалюта;
		ДокументСверки.Организация 		= Объект.Организация;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ДатаНачала) Тогда
			ТекСтрока.ДатаНачала 		= Объект.ДатаНачала;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) Тогда
			ТекСтрока.ДатаОкончания 	= Объект.ДатаОкончания;	
		КонецЕсли;
		ДокументСверки.Контрагент 		= ТекСтрока.Контрагент;
		ДокументСверки.ДатаНачала 		= ТекСтрока.ДатаНачала;
		ДокументСверки.ДатаОкончания 	= ТекСтрока.ДатаОкончания;
		ДокументСверки.Комментарий 		= "Сформирован документом рассылки актов сверки";
		
		ТЧСписокСчетов = ДокументСверки.СписокСчетов;
		Для Каждого СтрокаСчет Из Объект.СписокСчетов Цикл
			СтрокаСчета = ТЧСписокСчетов.Добавить();
			СтрокаСчета.Счет 				= СтрокаСчет.Счет;
			СтрокаСчета.УчаствуетВРасчетах 	= Истина;
		КонецЦикла; 
		
		ДокументСверки.ЗаполнитьПоДаннымБухгалтерскогоУчета();
		//ДокументСверки.ЗаполнитьПоДаннымОрганизации();
		
		Попытка
			ДокументСверки.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			Продолжить;
		КонецПопытки;
		
		ТекСтрока.АктСверки 	= ДокументСверки.Ссылка;
		
		ТекСтрока.ЕстьОбороты 	= ДокументСверки.ПоДаннымОрганизации.Количество()
									ИЛИ ДокументСверки.ОстатокНаНачало;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАкты(Команда)

	СоздатьАктыНаСервере();	
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложенныйАктСверки(Команда)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ОткрытьЗначение(ТекСтрока.АктСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктСверки(Команда)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ПоследнийАктСверки) Тогда
		
		ОткрытьЗначение(ТекСтрока.ПоследнийАктСверки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИнформациюОбОборотахНаСервере()

	Для каждого ТекСтрока Из Объект.СписокРассылки Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.АктСверки) Тогда
		
			ТекСтрока.ЕстьОбороты = ТекСтрока.АктСверки.Количество();
		
		КонецЕсли;	
	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбОборотах(Команда)
	
	ОбновитьИнформациюОбОборотахНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПДФ(Команда)
	
	ОтправитьПисьмаНаСервере("PDF");
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено)
				ИЛИ ЗначениеЗаполнено(ТекСтрока.АктСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиКонтрагентПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ТекНомер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьСписокРассылкиНаСервере(ТекНомер, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиОрганизацияПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
	ТекНомер = ТекСтрока.НомерСтроки;
	ТекСтрока = Неопределено;
	ЗаполнитьСписокРассылкиНаСервере(ТекНомер, Истина);
	
КонецПроцедуры

Процедура СписокРассылкиПоследнийАктСверкиПриИзмененииНаСервере()
	
	ТекСтрока = Объект.СписокРассылки.Получить(Элементы.СписокРассылки.ТекущаяСтрока);
	
	ТекСтрока.ДатаНачала 	= Макс(КонецДня(ТекСтрока.ПоследнийАктСверки.ДатаОкончания) + 1, Период.ДатаНачала);
	ТекСтрока.ДатаОкончания = Период.ДатаОкончания;
	
	Если ТекСтрока.ДатаНачала > Период.ДатаОкончания Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Период уже сверен, установите период вручную!";
		Сообщение.Поле 	= "СписокРассылки[" + Объект.СписокРассылки.Индекс(ТекСтрока) + "].Контрагент";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		ТекСтрока.ДатаНачала = Период.ДатаНачала;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПоследнийАктСверкиПриИзменении(Элемент)
	
	СписокРассылкиПоследнийАктСверкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиПоследнийАктСверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокРассылки.ТекущиеДанные;
	
    ФормаВыбора = ПолучитьФорму("Документ.АктСверкиВзаиморасчетов.ФормаВыбора",, Элемент);
	
	ФормаВыбора.Отбор.Контрагент.Значение 		= ТекСтрока.Контрагент;
	ФормаВыбора.Отбор.Контрагент.Использование 	= Истина;
	
	ФормаВыбора.Отбор.Организация.Значение 		= ТекСтрока.Организация;
	ФормаВыбора.Отбор.Организация.Использование = Истина;
	
	ФормаВыбора.Отбор.СверкаСогласована.Значение 		= Истина;
	ФормаВыбора.Отбор.СверкаСогласована.Использование 	= Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьПометкиСписокЗапросов(Команда)
	
	УстановитьСнятьПометки("СписокЗапросов", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиСписокЗапросов(Команда)
	
	УстановитьСнятьПометки("СписокЗапросов", Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьСписокЗапросовСервер(ТекНомер = Неопределено, ПоСтроке = Ложь)
	
	Если НЕ ТекНомер = Неопределено Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
		ТекущиеДанные = ДокументОбъект.СписокЗапросов.Получить(ТекНомер - 1);
	
	КонецЕсли;
	
	Если Объект.СписокЗапросов.Количество() > 0
			И ПоСтроке = Ложь Тогда
		Объект.СписокЗапросов.Очистить();
	КонецЕсли;
	
	//
	СчетаПоУмолчанию = Новый Массив;	
	Для каждого ТекЭлемент Из Объект.СписокСчетов Цикл
		Если ТекЭлемент.УчаствуетВРасчетах Тогда		
			СчетаПоУмолчанию.Добавить(ТекЭлемент.Счет);			
		КонецЕсли;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МассивСчетов"	, СчетаПоУмолчанию);
	Запрос.УстановитьПараметр("СтатьяДДС"		, Объект.СтатьяДДС);
	
	Если НЕ ПоСтроке Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФинансовыйОстаткиИОбороты.Субконто1 КАК Организация,
		|	ФинансовыйОстаткиИОбороты.Субконто2 КАК Контрагент,
		|	ЛОЖЬ КАК Пометка,
		|	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	ФинансовыйОстаткиИОбороты.Субконто2.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		|	ФинансовыйОстаткиИОбороты.Субконто3 КАК ТорговаяТочка
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			,
		|			Счет В (&МассивСчетов),
		|			,
		|			Субконто2 ССЫЛКА Справочник.Контрагенты
		|				И Субконто2.НеОтправлятьУведомления = ЛОЖЬ
		|				И Субконто1 ССЫЛКА Справочник.Организации
		|				И Субконто1 = &Субконто1
		|				И (Субконто2.СтатьяДвиженияДенежныхСредств = &СтатьяДДС
		|					ИЛИ &СтатьяДДС = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|				И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя) КАК ФинансовыйОстаткиИОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя";
		
	Иначе
		Запрос.УстановитьПараметр("Организация"	, ?(ТекущиеДанные.Организация.Пустая(), Объект.Организация, ТекущиеДанные.Организация));
		Запрос.УстановитьПараметр("Контрагент"	, ТекущиеДанные.Контрагент);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК Пометка,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Организации.Ссылка КАК Организация,
		|	Контрагенты.ОсновнойБухгалтерПокупателя КАК ОсновнойБухгалтерПокупателя,
		|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
		|	NULL КАК ТорговаяТочка
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|	И Организации.Ссылка = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойБухгалтерПокупателя,
		|	ОсновнойМенеджерПокупателя";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Пометка,
	|	Данные.ОсновнойБухгалтерПокупателя,
	|	Данные.ОсновнойМенеджерПокупателя,
	|	ЕСТЬNULL(ТелефонМенеджер.Представление, """") КАК ТелефонМенеджера,
	|	ЕСТЬNULL(ТелефонБухгалтера.Представление, """") КАК ТелефонБухгалтера,
	|	НастройкиПользователей.Значение КАК УчетнаяЗаписьЭлектроннойПочты,
	|	ЕСТЬNULL(ПочтаМенеджера.Представление, """") КАК ПочтаМенеджера,
	|	ЕСТЬNULL(ПочтаБухгалтера.Представление, """") КАК ПочтаБухгалтера,
	|	Данные.ТорговаяТочка КАК ТорговаяТочка,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонМенеджер
	|		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ТелефонМенеджер.Объект
	|			И (ТелефонМенеджер.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ТелефонМенеджер.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонБухгалтера
	|		ПО Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ТелефонБухгалтера.Объект
	|			И (ТелефонБухгалтера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ТелефонБухгалтера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Данные.ОсновнойБухгалтерПокупателя = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаМенеджера
	|		ПО Данные.ОсновнойМенеджерПокупателя.ФизЛицо = ПочтаМенеджера.Объект
	|			И (ПочтаМенеджера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ПочтаМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ПочтаБухгалтера
	|		ПО (ПочтаБухгалтера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ПочтаБухгалтера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
	|			И Данные.ОсновнойБухгалтерПокупателя.ФизЛицо = ПочтаБухгалтера.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Данные.Контрагент = ДоговорыКонтрагентов.Владелец
	|			И Данные.Организация = ДоговорыКонтрагентов.Организация
	|			И (Данные.ТорговаяТочка = ДоговорыКонтрагентов.ОбъектАренды.СтруктурнаяЕдиница
	|				ИЛИ Данные.ТорговаяТочка = ДоговорыКонтрагентов.СтруктурнаяЕдиница)
	|			И (ДоговорыКонтрагентов.СрокДействия >= &ДатаНачала
	|				ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктСверкиВзаиморасчетов.Контрагент КАК Контрагент
	|		ИЗ
	|			Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ГДЕ
	|			&ДатаОкончания МЕЖДУ АктСверкиВзаиморасчетов.ДатаНачала И КОНЕЦПЕРИОДА(АктСверкиВзаиморасчетов.ДатаОкончания, ДЕНЬ)
	|			И АктСверкиВзаиморасчетов.СверкаСогласована
	|			И НЕ АктСверкиВзаиморасчетов.ПометкаУдаления) КАК ВЗ_Согласованные
	|		ПО Данные.Контрагент = ВЗ_Согласованные.Контрагент
	|ГДЕ
	|	ВЗ_Согласованные.Контрагент ЕСТЬ NULL";
	
	Если Объект.Организация.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Субконто1 = &Субконто1", "");
	Иначе
		Запрос.УстановитьПараметр("Субконто1"					, Объект.Организация);
	КонецЕсли;
	
	Если Объект.ОтветственныйБухгалтер.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Субконто2.ОсновнойБухгалтерПокупателя = &ОсновнойБухгалтерПокупателя", "");
	Иначе
		Запрос.УстановитьПараметр("ОсновнойБухгалтерПокупателя"	, Объект.ОтветственныйБухгалтер);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	//ТЗ_Результа =  Запрос.Выполнить().Выгрузить();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив"	, Результат.ВыгрузитьКолонку("Контрагент"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, КонтактнаяИнформация1.Представление) КАК Почта,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|			И (КонтактнаяИнформация.Вид = Контрагенты.ВидКИ_ДляИнформирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	|		ПО (КонтактнаяИнформация1.Объект = Контрагенты.Ссылка)
	|			И (КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами))
	|ГДЕ
	|	Контрагенты.Ссылка В(&Массив)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат.Колонки.Добавить("Почта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Для каждого ТекСтрока Из Результат Цикл
		
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Контрагент", ТекСтрока.Контрагент)) Тогда
			
			ТекСтрока.Почта = ВыборкаДетальныеЗаписи.Почта;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
		//
		Если НЕ ПоСтроке Тогда
			НоваяСтрока = Объект.СписокЗапросов.Добавить();
		Иначе
			НоваяСтрока = ТекущиеДанные;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	Если ПоСтроке Тогда		
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗапросов(Команда)
	
	Для каждого ТекСтрока Из Объект.СписокЗапросов Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.Отправлено) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Заполнение таблицы невозможно, так как имеются постоянные данные!";
			Сообщение.Сообщить();	
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
	//
	ЗаполнитьСписокЗапросовСервер();
	
КонецПроцедуры

Процедура ОтправитьЗапросыСервер()
	
	СоответствиеШаблонов 	= Новый Соответствие;
	МассивСообщений 		= Новый Массив;
	
	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Справочник хранилище доп информации\";
	
	Для каждого СтрокаТЧ Из Объект.СписокЗапросов Цикл
		
		Если НЕ	СтрокаТЧ.Пометка Тогда
			Продолжить;	
		КонецЕсли;
		
		ТекКонтрагент 		= СтрокаТЧ.Контрагент;
		ТекОрганизация 		= СтрокаТЧ.Организация;
		ТекШаблонЗапроса 	= ТекОрганизация.ШаблонЗапросаАктаСверки;
		
		Отказ = Ложь;
		
		ПроверитьСтрокуТЧЗапросы(МассивСообщений,СтрокаТЧ,Отказ);
				
		Если ЗначениеЗаполнено(СтрокаТЧ.Отправлено) Тогда
			Продолжить;
		КонецЕсли;
				
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ТекстHTML = СоответствиеШаблонов.Получить(ТекОрганизация);
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = ПолучитьТекстHTMLЗапросы(СтрокаТЧ);			
			СоответствиеШаблонов.Вставить(ТекОрганизация, ТекстHTML);
			
		КонецЕсли;
		
		ФамилияИмяБухгалтера = "";
		УстановитьПараметрыHTMLЗапросы(ТекстHTML,СтрокаТЧ,ФамилияИмяБухгалтера);
				
		ТаблицаОбъектовКому = СтрЗаменить(СтрокаТЧ.Почта, ";", Символы.ПС);
		
		//
		Для сч = 1 по СтрЧислоСтрок(ТаблицаОбъектовКому) Цикл
			АдресПолучателя = СокрЛП(СтрПолучитьСтроку(ТаблицаОбъектовКому, сч));
			Попытка
				Послать(АдресПолучателя, ТекстHTML, СтрокаТЧ.ПочтаБухгалтера, ТекШаблонЗапроса.Тема, ФамилияИмяБухгалтера); // без вложений файлов
				СтрокаТЧ.Отправлено = ТекущаяДата();
			Исключение
				Сообщить(АдресПолучателя);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;    
	
	//
	МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
	
	Для каждого ТекСтрока Из МассивСообщений Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекСтрока;
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросы(Команда)
	
	ОтправитьЗапросыСервер();
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокЗапросов.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.СписокЗапросов.ТекущиеДанные;
	
	Отказ = ЗначениеЗаполнено(ТекСтрока.Отправлено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстПисьма(Команда)
	
	ОткрытьФормуПредварительныйПросмотр();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПредварительныйПросмотр()
	
	Отказ = Ложь;
	МассивСообщений 		= Новый Массив;

	ПроверитьСтрокуТЧ(МассивСообщений,,Отказ);
	
	Если Отказ Тогда
		МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
		
		Для каждого ТекСтрока Из МассивСообщений Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекСтрока;
			Сообщение.Сообщить();
		КонецЦикла;
	Иначе	
		ПараметрыОткрытия = Новый Структура;
		ТекстHTML =  СформироватьТекстHTMLПредварительный();
		ПараметрыОткрытия.Вставить("ТекстHTML",ТекстHTML);		
		ОткрытьФорму("Документ.РассылкаАктовСверкиПоДаннымФинансов.Форма.ФормаПредварительныйПросмотр",ПараметрыОткрытия);
	КонецЕсли;
		
КонецПроцедуры	

Функция СформироватьТекстHTMLПредварительный()
	
	ТекущаяСтрокаРассылка = Объект.СписокРассылки[Элементы.СписокРассылки.ТекущаяСтрока]; 
	ТекстHTML = ПолучитьТекстHTML(ТекущаяСтрокаРассылка);
	УстановитьПараметрыHTML(ТекстHTML,ТекущаяСтрокаРассылка);
	Возврат ТекстHTML;
	
КонецФункции	

&НаКлиенте
Процедура ПоказатьТекстПисьмаЗапросы(Команда)
	ОткрытьФормуПредварительныйПросмотрЗапросы();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПредварительныйПросмотрЗапросы()
	
	Отказ = Ложь;
	МассивСообщений 		= Новый Массив;

	ПроверитьСтрокуТЧЗапросы(МассивСообщений,,Отказ);
	
	Если Отказ Тогда
		
		МассивСообщений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСообщений);
		
		Для каждого ТекСтрока Из МассивСообщений Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекСтрока;
			Сообщение.Сообщить();
		КонецЦикла;
	Иначе	
		ПараметрыОткрытия = Новый Структура;
		ТекстHTML =  СформироватьТекстHTMLПредварительныйЗапросы();
		ПараметрыОткрытия.Вставить("ТекстHTML",ТекстHTML);		
		ОткрытьФорму("Документ.РассылкаАктовСверкиПоДаннымФинансов.Форма.ФормаПредварительныйПросмотр",ПараметрыОткрытия);
	КонецЕсли;
		
КонецПроцедуры	

Функция СформироватьТекстHTMLПредварительныйЗапросы()
	
	ТекущаяСтрокаЗапрос = Объект.СписокЗапросов[Элементы.СписокЗапросов.ТекущаяСтрока]; 
	ТекстHTML = ПолучитьТекстHTMLЗапросы(ТекущаяСтрокаЗапрос);
	УстановитьПараметрыHTMLЗапросы(ТекстHTML,ТекущаяСтрокаЗапрос);
	Возврат ТекстHTML;
	
КонецФункции	

//+++АК sils 08.06.2018 ИП-00018876
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
КонецПроцедуры
