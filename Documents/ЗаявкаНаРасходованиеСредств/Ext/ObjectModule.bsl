
Перем ВыполнятьЗаписьБезПроверок Экспорт;
Перем НеПроверятьДатуЗапретаРедактирования Экспорт;
Перем МенятьСтатусы Экспорт;
//Внимание! Если программно работаете с объектом документов ПоступлениеТоваровИУслуг или ЗаявкаНаРасходованиеДенежныхСредств, то перед записью присваивать значение переменной этих объектов МенятьСтатусы = ЛОЖЬ


Процедура ПроверитьСуществованиеПлатежныхДокументовПоЗаявке(Действие, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходИзБанка.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РасходИзБанка КАК РасходИзБанка
	|	ГДЕ
	|		НЕ РасходИзБанка.ПометкаУдаления
	|		И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходИзКассы.Ссылка
	|	ИЗ
	|		Документ.РасходИзКассы КАК РасходИзКассы
	|	ГДЕ
	|		НЕ РасходИзКассы.ПометкаУдаления
	|		И РасходИзКассы.ЗаявкаНаРасходованиеСредств = &ЗаявкаНаРасходованиеСредств) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("По данной заявке сформированы следующие платежные документы:");
		
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке(Выборка.Ссылка);	
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьОбОшибке(Действие + " данной заявки невозможно", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСДокумент() Экспорт
	
	ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ЭтотОбъект.СтавкаНДС);
	ЭтотОбъект.СуммаНДС = ЭтотОбъект.СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		// pozm 040217 отменяются заявки
		Если ЭтотОбъект.ОбменДанными.Загрузка <>Истина И ЭтотОбъект.ФормаОплаты=Перечисления.ФормыОплаты.Безналичные Тогда
			ЕстьПравоНаВвод = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ВводЗаявокНаРасходование2017, Ложь);
			Если Не ЕстьПравоНаВвод Тогда
				Сообщить("Вы не можете добавлять заявки на расходование ДС по безналу.");
				Отказ=Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		СсылкаОбъект = ЭтотОбъект.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(СсылкаОбъект) Тогда
			СсылкаОбъект = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьСсылку();
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаОбъект);
		КонецЕсли;
	Иначе
		СсылкаОбъект = ЭтотОбъект.Ссылка;
	КонецЕсли;
	
	СчетХранилище = СчетНаОплату.Получить();
	РасходникХранилище = РасходнаяНакладная.Получить();
	АктХранилище = АктОбОказанииУслуг.Получить();
	СчетФактураХранилище = СчетФактураПолученный.Получить();
	Если ТипЗнч(СчетХранилище) = Тип("ДвоичныеДанные")
			ИЛИ ТипЗнч(РасходникХранилище) = Тип("ДвоичныеДанные")
			ИЛИ ТипЗнч(АктХранилище) = Тип("ДвоичныеДанные")
			ИЛИ ТипЗнч(СчетФактураХранилище) = Тип("ДвоичныеДанные") Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		Если ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "");
			Если ТипЗнч(СчетХранилище) = Тип("ДвоичныеДанные") Тогда
				Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла);
				СоздатьКаталог(КаталогСохранения + "Файлы заявок на расход ДС\Счета на оплату\" + Формат(Дата, "ДФ=yyyyMM") + "\");
				СчетХранилище.Записать(КаталогСохранения + "Файлы заявок на расход ДС\Счета на оплату\" + Формат(Дата, "ДФ=yyyyMM") + "\" + Строка(СсылкаОбъект.УникальныйИдентификатор()) + "." + Расширение);
				СчетНаОплату = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
			
			Если ТипЗнч(РасходникХранилище) = Тип("ДвоичныеДанные") Тогда
				Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(РасходнаяНакладнаяИмяФайла);
				СоздатьКаталог(КаталогСохранения + "Файлы заявок на расход ДС\Расходные накладные\" + Формат(Дата, "ДФ=yyyyMM") + "\");
				РасходникХранилище.Записать(КаталогСохранения + "Файлы заявок на расход ДС\Расходные накладные\" + Формат(Дата, "ДФ=yyyyMM") + "\" + Строка(СсылкаОбъект.УникальныйИдентификатор()) + "." + Расширение);
				РасходнаяНакладная = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
			
			Если ТипЗнч(АктХранилище) = Тип("ДвоичныеДанные") Тогда
				Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(АктОбОказанииУслугИмяФайла);
				СоздатьКаталог(КаталогСохранения + "Файлы заявок на расход ДС\Акт об оказании услуг\" + Формат(Дата, "ДФ=yyyyMM") + "\");
				АктХранилище.Записать(КаталогСохранения + "Файлы заявок на расход ДС\Акт об оказании услуг\" + Формат(Дата, "ДФ=yyyyMM") + "\" + Строка(СсылкаОбъект.УникальныйИдентификатор()) + "." + Расширение);
				АктОбОказанииУслуг = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
			
			Если ТипЗнч(СчетФактураХранилище) = Тип("ДвоичныеДанные") Тогда
				Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(СчетФактураПолученныйИмяФайла);
				СоздатьКаталог(КаталогСохранения + "Файлы заявок на расход ДС\СФ полученный\" + Формат(Дата, "ДФ=yyyyMM") + "\");
				СчетФактураХранилище.Записать(КаталогСохранения + "Файлы заявок на расход ДС\СФ полученный\" + Формат(Дата, "ДФ=yyyyMM") + "\" + Строка(СсылкаОбъект.УникальныйИдентификатор()) + "." + Расширение);
				СчетФактураПолученный = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполнятьЗаписьБезПроверок Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтотОбъект.ПометкаУдаления
			И НЕ ЭтотОбъект.Ссылка.ПометкаУдаления Тогда 
		ТаблицаСвязанныхДокументов = ПолныеПрава.ПолучитьВыборкуПоКритериюОтбора("СвязанныеДокументы", ЭтотОбъект.Ссылка);
		Если НЕ ТаблицаСвязанныхДокументов.Количество() = 0 Тогда
			ЕстьНеПомеченныйНаУдаление = Ложь;
			Для Каждого СтрокаТаблицы Из ТаблицаСвязанныхДокументов Цикл
				Если СтрокаТаблицы.Ссылка.ПометкаУдаления = Ложь Тогда
					ЕстьНеПомеченныйНаУдаление = Истина;	
				КонецЕсли;
			КонецЦикла;
			Если ЕстьНеПомеченныйНаУдаление = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Заявку нельзя пометить на удаление, т.к. существуют связанные документы. Смотрите Перейти/Связанные документы.", Отказ, "");
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект.Ссылка);
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, ЦФО, Организация, Статус, ДатаРасхода, СтатьяДвиженияДенежныхСредств, ФормаОплаты, НазначениеПлатежа, Ответственный");
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код <> "139311"
			И ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код <> "139313" Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
	КонецЕсли;
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ЭтотОбъект.ДатаРасхода > ДобавитьМесяц(ЭтотОбъект.Дата, 1) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата расхода не должна превышать дату документа более чем на месяц", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код <> "131010"
			И ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код <> "131011" Тогда
		ЭтотОбъект.КонтрагентПоАренде = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		ЭтотОбъект.СтавкаНДС 	= Перечисления.СтавкиНДС.ПустаяСсылка();
		ЭтотОбъект.СуммаНДС 	= 0;
	КонецЕсли;
	
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010"
			И ЭтотОбъект.ТипАренднойПлаты.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС необходимо указывать тип арендной платы", Отказ, Заголовок);
	КонецЕсли;
	
	Если (СтатьяДвиженияДенежныхСредств.Код = "120610" //Оплата промоутера
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200701" //Оплата промоутера для открытия ТТ
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200702" //Оплата листовок для открытия ТТ
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200703" //Оплата оформления для открытия ТТ
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "139290" //Оплата прочего (Оплата за замену продавцов)
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "141023") //Оплата расходов на проект "Общественный контроль" (оплата УЕК)
			И ТорговыеТочки.Количество() <> 1
			И ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС необходимо указывать одну строку ТТ", Отказ, Заголовок);
	КонецЕсли;
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)", Отказ, Заголовок);
	КонецЕсли;
	
	мСтатусАкцептована = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована;
	
	Если ЭтотОбъект.Статус = мСтатусАкцептована
			И ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда // акцептована, Избенка
		МассивСтатейДДС = ДопМодульСервер.ПолучитьСтатьиДДСОплатаЗП();
		Если НЕ МассивСтатейДДС.Найти(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) = Неопределено Тогда // оплата зарплаты
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизаций.Проведен
			|	И НачислениеЗарплатыРаботникамОрганизаций.ЗаявкаНаРасходованиеСредств = &Ссылка";
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для акцепта заявки необходимо наличие документа начисления зарплаты", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ЭтотОбъект.ТорговыеТочки.Количество() > 0 Тогда
			
		Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.КонтролироватьНаличиеСканаВДоговоре
				И НЕ ЭтотОбъект.Ссылка.Проведен Тогда
			
			ЕстьПравоНеПроверятьТТ = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиТТПриПроведенииЗаявокНаРасходДС, Ложь);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент"	, ЭтотОбъект.Контрагент);
			Запрос.УстановитьПараметр("Договор"		, ЭтотОбъект.ДоговорКонтрагента);
			
			// Вложения к договору
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтрагентыФайлыДоговоров.Договор
			|ИЗ
			|	Справочник.Контрагенты.ФайлыДоговоров КАК КонтрагентыФайлыДоговоров
			|ГДЕ
			|	КонтрагентыФайлыДоговоров.Ссылка = &Контрагент
			|	И КонтрагентыФайлыДоговоров.Договор = &Договор";
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("К договору нет вложений",, Заголовок);
				Отказ = НЕ ЕстьПравоНеПроверятьТТ;
			КонецЕсли;
			
			Если НЕ ЭтотОбъект.ДоговорКонтрагента.ПолученОригинал Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не получен оригинал договора",, Заголовок);
				Отказ = НЕ ЕстьПравоНеПроверятьТТ;
			КонецЕсли;
			
			// Вложения к доп. соглашению
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДополнительныеСоглашения.ПолученОригинал КАК ПолученОригинал,
			|	ВЫБОР
			|		КОГДА ДополнительныеСоглашенияФайлыДоговоров.ИмяФайла ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьВложения
			|ИЗ
			|	Справочник.ДополнительныеСоглашения КАК ДополнительныеСоглашения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеСоглашения.ФайлыДоговоров КАК ДополнительныеСоглашенияФайлыДоговоров
			|		ПО (ДополнительныеСоглашенияФайлыДоговоров.Ссылка = ДополнительныеСоглашения.Ссылка)
			|ГДЕ
			|	ДополнительныеСоглашения.Владелец = &Контрагент
			|	И ДополнительныеСоглашения.Договор = &Договор";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда // доп. соглашение должно быть как данность
				Если НЕ Выборка.ЕстьВложения Тогда
					ОбщегоНазначения.СообщитьОбОшибке("К доп. соглашению нет вложений",, Заголовок);
					Отказ = НЕ ЕстьПравоНеПроверятьТТ;
				КонецЕсли;
				Если НЕ Выборка.ПолученОригинал Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не получен оригинал доп. соглашения к договору",, Заголовок);
					Отказ = НЕ ЕстьПравоНеПроверятьТТ;
				КонецЕсли;
			КонецЕсли;
			
			// Присутствие торговых точек либо в договоре, либо в доп. соглашении к нему
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДополнительныеСоглашенияТорговыеТочки.ТорговаяТочка КАК ТорговаяТочка
			|ИЗ
			|	Справочник.ДополнительныеСоглашения КАК ДополнительныеСоглашения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеСоглашения.ТорговыеТочки КАК ДополнительныеСоглашенияТорговыеТочки
			|		ПО (ДополнительныеСоглашенияТорговыеТочки.Ссылка = ДополнительныеСоглашения.Ссылка)
			|ГДЕ
			|	ДополнительныеСоглашения.Владелец = &Контрагент
			|	И ДополнительныеСоглашения.Договор = &Договор
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТЧТорговыеТочки.СтруктурнаяЕдиница
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов.СоставСтруктурныхЕдиниц КАК ТЧТорговыеТочки
			|ГДЕ
			|	ТЧТорговыеТочки.Ссылка = &Договор";
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
				ТекТТ = СтрокаТЧ.ТорговаяТочка;
				Если ТаблицаЗапроса.Найти(ТекТТ, "ТорговаяТочка") = Неопределено Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Торговая точка """ + СокрЛП(ТекТТ.Наименование) +
														""" не указана ни в договоре, ни в доп. соглашении к нему",, Заголовок);
					Отказ = НЕ ЕстьПравоНеПроверятьТТ;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//+++ SaMi
		Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010" Тогда //Оплата аренды 
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.ТипАренднойПлаты,
			|	ЗаявкаНаРасходованиеСредствТорговыеТочки.ТорговаяТочка,
			|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Период,
			|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Сумма
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка = &Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			БылиИзменения = Ложь;
			
			Если Выборка.Следующий() Тогда
				Если    НЕ ЭтотОбъект.Проведен ИЛИ
						    Выборка.СтатьяДвиженияДенежныхСредств<>СтатьяДвиженияДенежныхСредств ИЛИ
						    Выборка.ТипАренднойПлаты<>ТипАренднойПлаты ИЛИ
							Выборка.ТорговаяТочка<>ТорговыеТочки[0].ТорговаяТочка ИЛИ
							Выборка.Период<>ТорговыеТочки[0].Период ИЛИ
							Выборка.Сумма<>ТорговыеТочки[0].Сумма Тогда
					БылиИзменения = Истина;
				КонецЕсли;
			Иначе
				БылиИзменения = Истина;
			КонецЕсли;
			
			Если БылиИзменения Тогда
				ПроцедурыНачисления.ПроверитьЛимитыПоАрендеЗаявкиИОплаты(ЭтотОбъект.Ссылка, , СуммаДокумента, ТорговыеТочки[0].ТорговаяТочка, ТипАренднойПлаты, ТорговыеТочки[0].Период, Отказ);
			КонецЕсли;
		 	//Если ЭтотОбъект.Статус = мСтатусАкцептована
			//		И СтатьяДвиженияДенежныхСредств.Код = "131010"
			//		И ТорговыеТочки.Количество() > 0 
			//		И ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть		Тогда 
			//		
			//	Запрос = Новый Запрос("ВЫБРАТЬ
			//						  |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка,
			//						  |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.НомерСтроки
			//						  |ИЗ
			//						  |	Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
			//						  |ГДЕ
			//						  |	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
			//						  |	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Договор = &Договор
			//						  |	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.ФормаОплаты = &ФормаОплаты							  
			//						  |	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации = &ПериодРегистрации
			//						  |	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.Проведен");
			//	
			//	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента); 
			//	Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты); 
			//	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(НачалоПериодаАренды)); 
			//	
			//	РезультатЗапроса = Запрос.Выполнить();
			//	
			//	Если РезультатЗапроса.Пустой() Тогда
			//		ОбщегоНазначения.СообщитьОбОшибке("Для акцепта заявки необходимо наличие документа начисления арендной платы!");
			//		Отказ = Истина;
			//	КонецЕсли;

			//КонецЕсли;
			
		КонецЕсли;
		//--- SaMi

	КонецЕсли;
	
	
	ТекАкцептованыВсеСтроки = Истина;
	
	спТТ = Новый СписокЗначений;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		Если СтрокаТЧ.ТорговаяТочка.Код <> "ЦФО_100" Тогда //Резерв
			спТТ.Добавить(СтрокаТЧ.ТорговаяТочка);
		Иначе
			спТТ.Добавить(СтрокаТЧ.Адрес);
		КонецЕсли;
		Если НЕ СтрокаТЧ.Статус = мСтатусАкцептована Тогда
			ТекАкцептованыВсеСтроки = Ложь;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.ТорговыеТочкиСписок = ОбщегоНазначения.СписокЗначенийВСтроку(спТТ, "; ");
	
	ЭтотОбъект.АкцептованыВсеСтроки = ТекАкцептованыВсеСтроки;
	
	// счет затрат "по умолчанию"
	Если ЭтотОбъект.СчетЗатрат.Пустая() Тогда
		мТипТТРозница = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
		Это443 = Ложь;		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если СтрокаТЧ.ТорговаяТочка.ТипСтруктурнойЕдиницы = мТипТТРозница Тогда
				Это443 = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		ЭтотОбъект.СчетЗатрат = ?(Это443, ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения, ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения);
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаНаРасходованиеСредств"	, ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПометкаУдаления"				, НЕ ЭтотОбъект.ПометкаУдаления);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = &ПометкаУдаления
		|	И ЗадачаИсполнителя.ОбъектЗадачи = &ЗаявкаНаРасходованиеСредств";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			обЗадача = Выборка.Ссылка.ПолучитьОбъект();
			обЗадача.УстановитьПометкуУдаления(ПометкаУдаления);
			обЗадача.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные
		 	И НЕ ЭтотОбъект.ДоговорКонтрагента.Пустая()
		 	И НЕ ЭтотОбъект.ДоговорКонтрагента.Организация = ЭтотОбъект.Организация Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация в документе не соответствует организации договора контрагента", Отказ, Заголовок);			
	КонецЕсли;
	
	Если ЭтотОбъект.ПометкаУдаления
			И НЕ ЭтотОбъект.Ссылка.ПометкаУдаления Тогда
		Если ЭтотОбъект.Статус = мСтатусАкцептована Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя удалять акцептованные заявки", Отказ, Заголовок);			
		КонецЕсли;
		Если ЭтотОбъект.ПринятоКОплате Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя удалять заявки, принятые к оплате", Отказ, Заголовок);			
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.КоличествоТорговыхТочек = ЭтотОбъект.ТорговыеТочки.Количество();
	
	ЗаписатьПериодыТорговыхТочек();
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаПолученияУслуги) Тогда
		ЭтотОбъект.ДатаПолученияУслуги = Дата;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ИнициаторЗаявки) Тогда
		Если НЕ ЭтотОбъект.Ответственный.ФизЛицо.Пустая() Тогда
			Если НЕ ЭтотОбъект.Ответственный.ФизЛицо.НеЯвляетсяИнициаторомЗаявокНаРасходДС Тогда
				ЭтотОбъект.ИнициаторЗаявки = ЭтотОбъект.Ответственный.ФизЛицо;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать инициатора заявки",, Заголовок);			
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Для пользователя """ + ЭтотОбъект.Ответственный + """ не привязано физ.лицо. Необходимо указать инициатора заявки",, Заголовок);			
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована
			И НЕ ЗначениеЗаполнено(КтоАкцептовал) Тогда
		КтоАкцептовал = ПараметрыСеанса.ТекущийПользователь;
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована
			И ЗначениеЗаполнено(КтоАкцептовал) Тогда
		КтоАкцептовал = Неопределено;
	КонецЕсли;
	
	//АК БЕЛН 28.04.2016+
	Если НЕ Отказ
			И ЭтотОбъект.ЭтоНовый()
			И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
		
		УстановитьСсылкуНового(Документы.ЗаявкаНаРасходованиеСредств.ПолучитьСсылку());
		СсылкаДок = ПолучитьСсылкуНового();
		Попытка
			ФормаПоступ = ЭтотОбъект.ДокументОснование.ПолучитьФорму("ФормаДокумента");
			Если ФормаПоступ.Открыта() Тогда
				ОбПоступ = ФормаПоступ.ЭтотОбъект;
				НоваяСтрока = ОбПоступ.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = СсылкаДок;
			Иначе
				ОбПоступ = ДокументОснование.ПолучитьОбъект();
				ОбПоступ.МенятьСтатусы = Ложь;
				ОбПоступ.НеПроверятьДатуЗапретаРедактирования = Истина;
				НоваяСтрока = ОбПоступ.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = СсылкаДок;
				ОбПоступ.Записать();
			КонецЕсли; 
		Исключение
			ОбПоступ = ДокументОснование.ПолучитьОбъект();
			ОбПоступ.МенятьСтатусы = Ложь;
			ОбПоступ.НеПроверятьДатуЗапретаРедактирования = Истина;
			НоваяСтрока = ОбПоступ.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = СсылкаДок;
			ОбПоступ.Записать();
		КонецПопытки; 
		//ОбПоступ.Записать();
	КонецЕсли; 
	//АК БЕЛН 28.04.2016-
	
КонецПроцедуры

//АК БЕЛН 28.04.2016+
Процедура ПриЗаписи(Отказ)
	Если ЭтотОбъект.ОбменДанными.Загрузка =Истина Тогда
		Возврат;
	КонецЕсли;	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.СуммаДокумента,
		|	ПоступлениеТоваровУслуг.СтатусПолученныхДокументов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ДокументОснование = &Ссылка
		|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугДокументыОснования.Ссылка,
		|	ПоступлениеТоваровУслугДокументыОснования.Ссылка.СуммаДокумента,
		|	ПоступлениеТоваровУслугДокументыОснования.Ссылка.СтатусПолученныхДокументов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ДокументыОснования КАК ПоступлениеТоваровУслугДокументыОснования
		|ГДЕ
		|	ПоступлениеТоваровУслугДокументыОснования.ДокументОснование = &Ссылка
		|	И НЕ ПоступлениеТоваровУслугДокументыОснования.Ссылка.ПометкаУдаления";

	    Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Возврат;
		КонецПопытки; 
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		СумПоступлений = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СумПоступлений = СумПоступлений + ВыборкаДетальныеЗаписи.СуммаДокумента;
		КонецЦикла;
		
		Если НЕ СумПоступлений = 0 Тогда
		   Если СумПоступлений = ЭтотОбъект.СуммаДокумента Тогда
		       Сообщить("Сумма документа " + ЭтотОбъект.Ссылка + " совпадает с суммой прилагаемых Поступлений товаров и услуг");
		   Иначе	
		       Сообщить("Сумма документа " + ЭтотОбъект.Ссылка + " НЕ совпадает с суммой прилагаемых Поступлений товаров и услуг");
		   КонецЕсли; 
		КонецЕсли; 
		Если СумПоступлений = ЭтотОбъект.СуммаДокумента
				И МенятьСтатусы Тогда
			ВыборкаДетальныеЗаписи.Сбросить();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Ссылка.СтатусПолученныхДокументов = ЭтотОбъект.СтатусПолученныхДокументов и 
					(ВыборкаДетальныеЗаписи.Ссылка.ДокументыПолучены = ЗначениеЗаполнено(ЭтотОбъект.СтатусПолученныхДокументов)) Тогда
					Продолжить;
				КонецЕсли; 
				ОбПоступ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();          
				ОбПоступ.СтатусПолученныхДокументов	= ЭтотОбъект.СтатусПолученныхДокументов;
				ОбПоступ.ДокументыПолучены			= ЗначениеЗаполнено(ОбПоступ.СтатусПолученныхДокументов);
				ОбПоступ.МенятьСтатусы				= Ложь;
				ОбПоступ.НеПроверятьДатуЗапретаРедактирования = Истина;
				Попытка
					ОбПоступ.Записать(РежимЗаписиДокумента.Запись);
					Сообщить("Изменен статус полученных документов в " + Строка(ВыборкаДетальныеЗаписи.Ссылка));
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли; 
		
	//АК БЕЛН 27.09.2016++
    Если ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка
			|ИЗ
			|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
			|ГДЕ
			|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка = &Заявка
			|
			|СГРУППИРОВАТЬ ПО
			|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка";

		Запрос.УстановитьПараметр("Заявка", Ссылка);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектДок=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Кол=ОбъектДок.УслугиПоСчетам.Количество();
			Для Сч=0 по Кол-1 Цикл
				Если ОбъектДок.УслугиПоСчетам[Кол-Сч-1].Заявка=Ссылка Тогда
					ОбъектДок.УслугиПоСчетам.Удалить(Кол-Сч-1);
				КонецЕсли; 
			КонецЦикла; 
			
			Если ОбъектДок.ПометкаУдаления Тогда
				ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Удалена строка по "+Ссылка+" в "+ОбъектДок.Ссылка);
			Иначе
				ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Удалена строка по "+Ссылка+" в "+ОбъектДок.Ссылка);
			КонецЕсли; 
			
			//ФлОшибки=Ложь;
			//Попытка
			//	ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//	Сообщить(ОписаниеОшибки());
			//	ФлОшибки=Истина;
			//КонецПопытки;
			//Если ФлОшибки Тогда
			//	Попытка
			//		ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
			//		ФлОшибки=Ложь;
			//	Исключение
			//		Сообщить(ОписаниеОшибки());
			//	КонецПопытки;
			//КонецЕсли; 
			//Если Не ФлОшибки Тогда
				//Сообщить("Удалена строка по "+Ссылка+" в "+ОбъектДок.Ссылка);
			//КонецЕсли; 
		КонецЦикла;

	КонецЕсли; 
	//АК БЕЛН 27.09.2016--
	КонецЕсли;
	
КонецПроцедуры
//АК БЕЛН 28.04.2016-

Процедура ПередУдалением(Отказ)
	
	ПроверитьСуществованиеПлатежныхДокументовПоЗаявке("Удаление", Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ВыполнятьЗаписьБезПроверок Тогда
		ПроверитьСуществованиеПлатежныхДокументовПоЗаявке("Отмена проведения", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.СчетНаОплату 				= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.СчетНаОплатуИмяФайла 		= "";
	ЭтотОбъект.АктОбОказанииУслуг 			= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.АктОбОказанииУслугИмяФайла 	= "";
	ЭтотОбъект.РасходнаяНакладная 			= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.РасходнаяНакладнаяИмяФайла 	= "";
	ЭтотОбъект.СчетФактураПолученный 			= Новый ХранилищеЗначения(Неопределено);
	ЭтотОбъект.СчетФактураПолученныйИмяФайла 	= "";
	ЭтотОбъект.ВсеДокументыВНаличии 	= Ложь;
	ЭтотОбъект.ИнициаторЗаявки 			= Неопределено;
	ЭтотОбъект.ПринятоКОплате 			= Ложь;
	ЭтотОбъект.УведомлениеОтветственномуОтправлено	= Ложь;
	ЭтотОбъект.БанковскийСчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
	ЭтотОбъект.ВнешнееФизЛицоИмя 		= "";
	ЭтотОбъект.ВнешнееФизЛицоОтчество 	= "";
	ЭтотОбъект.ВнешнееФизЛицоФамилия 	= "";
	ЭтотОбъект.ДатаАкцептования 		= Дата(1, 1, 1);
	ЭтотОбъект.ДатаПолученияУслуги 		= Дата(1, 1, 1);
	ЭтотОбъект.ДатаРасхода 				= Дата(1, 1, 1);
	ЭтотОбъект.ДатаФальшивки			= Дата(1, 1, 1);
	//ЭтотОбъект.КоличествоТорговыхТочек 	= 0;
	ЭтотОбъект.Комментарий 				= "";
	ЭтотОбъект.НачалоПериодаАренды		= Дата(1, 1, 1);
	ЭтотОбъект.КонецПериодаАренды		= Дата(1, 1, 1);
	ЭтотОбъект.Организация 				= Справочники.Организации.ПустаяСсылка();
	ЭтотОбъект.Ответственный 			= Справочники.Пользователи.ПустаяСсылка();
	//ЭтотОбъект.ПериодыТорговыхТочекСтрока	= "";
	//ЭтотОбъект.ТорговыеТочкиСписок			= "";
	ЭтотОбъект.Пояснение 					= "";
	ЭтотОбъект.СтавкаНДС 				= Перечисления.СтавкиНДС.ПустаяСсылка();
	ЭтотОбъект.Статус 					= Перечисления.СтатусыЗаявокНаРасходованиеСредств.ПустаяСсылка();
	ЭтотОбъект.Субконто1 				= Неопределено;
	ЭтотОбъект.Субконто2 				= Неопределено;
	ЭтотОбъект.Субконто3 				= Неопределено;
	//ЭтотОбъект.СуммаДокумента 			= 0;
	ЭтотОбъект.СуммаНДС 				= 0;
	ЭтотОбъект.ТипАренднойПлаты 		= Перечисления.ТипыАренднойПлаты.ПустаяСсылка();
	ЭтотОбъект.НазначениеПлатежа		= "";
	ЭтотОбъект.ЦФО						= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КтоАкцептовал = Неопределено;
	ОдобреноАкцептантом = Ложь;
	
	//ЭтотОбъект.ТорговыеТочки.Очистить();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		СтрокаТЧ.Статус 		= ЭтотОбъект.Статус;
		СтрокаТЧ.ДатаАкцепта	= ЭтотОбъект.ДатаАкцептования;
	КонецЦикла;
	ЭтотОбъект.АкцептованыВсеСтроки = Ложь;
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные
			И НЕ ТипЗнч(ЭтотОбъект.БанковскийСчетКасса) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ЭтотОбъект.БанковскийСчетКасса = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"); //Строгино_1
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")
				И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Физлицо"	, ЭтотОбъект.Контрагент);
			Запрос.УстановитьПараметр("Дата"	, НачалоДня(ЭтотОбъект.Дата));
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СотрудникиОрганизаций.Организация
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	НЕ СотрудникиОрганизаций.ПометкаУдаления
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &Дата)
			|	И СотрудникиОрганизаций.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.Пустаяссылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЭтотОбъект.Организация = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//+++АК GEYV 24.07.2015
	СтатьяДДСКомандировка = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("136198");
	
	ЕстьСтатьяКомандировки = СтатьяДвиженияДенежныхСредств = СтатьяДДСКомандировка;
	
	Если ЕстьСтатьяКомандировки Тогда
		
		ОбщегоНазначения.ПроверитьСуществованиеПриказаНаКомандировку(Ссылка,Отказ);	
		
	КонецЕсли;
	//---АК
	
	Если НЕ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУчаствуетВБДР Тогда
		
		Движения.ИсполнениеБюджетаДоходовИРасходов.Записывать = Истина;
		
		//+++АК SUVV 2018.02.28 ИП-00017941
		//пСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		пСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(ЭтотОбъект.Дата, ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		//---АК SUVV
		Если НЕ ЗначениеЗаполнено(пСтатьяДР) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для указанной статьи ДДС <" + ЭтотОбъект.СтатьяДвиженияДенежныхСредств +
												"> не найдена соответствующая статья ДР");
			Отказ = Истина;
		КонецЕсли;
		
		Движение = Движения.ИсполнениеБюджетаДоходовИРасходов.Добавить();
		Движение.Период 	= ЭтотОбъект.Дата;
		Движение.ЦФО 		= ЭтотОбъект.ЦФО;
		Движение.СтатьяДР 	= пСтатьяДР;
		Движение.Документ 	= ЭтотОбъект.Ссылка;
		Движение.Сумма 		= ЭтотОбъект.СуммаДокумента;
		
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.Дата < Дата(2014, 8, 4) Тогда  // начало действия данной проверки
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Период) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке " + Формат(СтрокаТЧ.НомерСтроки, "ЧГ=") + " для торговой точки """ +
													СокрЛП(СтрокаТЧ.ТорговаяТочка.Наименование) + """ не указан период");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	Если ЭтотОбъект.Дата >= Дата(2015, 10, 14)
			И ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "310310"
			И ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период = ЭтотОбъект.Дата;
		Проводка.СчетДт = ПланыСчетов.Финансовый.ЗаймыФизЛиц;
		Проводка.СубконтоДт.Организации  		= ЭтотОбъект.Организация;
		Проводка.СубконтоДт.КонтрагентыФизЛица	= ЭтотОбъект.Контрагент;
		Проводка.Содержание						= "Выдача займа";
			
		Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыСПерсоналомПоОплатеТруда;
		Проводка.СубконтоКт.Организации 		= ЭтотОбъект.Организация;
			
		//Проводка.Организация 	= ЭтотОбъект.Организация;
		Проводка.Сумма	= ЭтотОбъект.СуммаДокумента;
	КонецЕсли;
	
	//
	мДвижения = ЭтотОбъект.Движения.РасчетыПоСделкамСПоставщиками;
	мДвижения.Записывать = Истина;
	мДвижения.Очистить();
	Для Каждого ТекСтрокаГрафикОплат Из ЭтотОбъект.ТорговыеТочки Цикл
		Если ТекСтрокаГрафикОплат.Сделка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		Движение = мДвижения.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.Сделка 		= ТекСтрокаГрафикОплат.Сделка;
		Движение.УИН_Этапа 		= ТекСтрокаГрафикОплат.СтрокаСделки;
		Движение.Сумма 			= ТекСтрокаГрафикОплат.Сумма;
		
		Движение.Комплектация 			= ТекСтрокаГрафикОплат.Комплектация;
		Движение.УИН_СтрокиКомплектации = ТекСтрокаГрафикОплат.СтрокаКомплектации;
		Движение.ДатаПлатежа	= ТекСтрокаГрафикОплат.ДатаПлатежаПоСделке;
	КонецЦикла;
	
	//АК++ tuga 13455
	АК_КонтрольЗадолженности.ОбработкаПроведения(Ссылка,Отказ,РежимПроведения);
	//AK--
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")Тогда
		
		ДокументОснование 	= ДанныеЗаполнения;
		Организация 		= ДанныеЗаполнения.Организация;
		БанковскийСчетКасса = Организация.ОсновнойБанковскийСчет;
		Контрагент 		 	= ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента	= ДанныеЗаполнения.ДоговорКонтрагента;
		ЦФО 				= ДанныеЗаполнения.СтруктурнаяЕдиница;
		СтавкаНДС 		 	= Контрагент.СтавкаНДС;
		ФормаОплаты		 	= Перечисления.ФормыОплаты.Безналичные;
		СтатьяДвиженияДенежныхСредств 	= ДанныеЗаполнения.СтатьяДДС;
		СтатусПолученныхДокументов 		= ДанныеЗаполнения.СтатусПолученныхДокументов;
		ВсеДокументыВНаличии			= ЗначениеЗаполнено(СтатусПолученныхДокументов);
		
		//+++АК GEYV 23.07.2015
		Если НЕ СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов.Пустая() Тогда
			СчетЗатрат = ОбщегоНазначения.ПолучитьСчет44ДляДр(СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов);
		КонецЕсли;
		Если СчетЗатрат.Пустая() Тогда
			СчетЗатрат = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
		КонецЕсли;
		//---АК
		
		ЗаполнитьСчетКонтрагента();
		
		//
		мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
		Для Каждого СтрТЧ Из ДанныеЗаполнения.Услуги Цикл
			
			НоваяСтрока = ЭтотОбъект.ТорговыеТочки.Добавить();
			
			Если ТипЗнч(СтрТЧ.Субконто1) = Тип("СправочникСсылка.СтруктурныеЕдиницы")Тогда
				НоваяСтрока.ТорговаяТочка 	= СтрТЧ.Субконто1;
			КонецЕсли;
			
			Если ТипЗнч(СтрТЧ.Субконто3) = Тип("СправочникСсылка.СтруктурныеЕдиницы")Тогда
				НоваяСтрока.ЦФО 			= СтрТЧ.Субконто3;
			КонецЕсли;
			
			// акцептант
			АкцептантПоСтатьеДДС 	= ПолучитьАкцептантаПоСтатьеДДС();	
			НоваяСтрока.Управляющий = ПолучитьУправляющегоВСтрокеТЧТТ(НоваяСтрока.ТорговаяТочка, АкцептантПоСтатьеДДС, мДемниченко);
			
			НоваяСтрока.Сумма 		= СтрТЧ.Сумма + ?(ДанныеЗаполнения.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху, СтрТЧ.СуммаНДС, 0);
			
			НоваяСтрока.Период 		= НачалоМесяца(ДанныеЗаполнения.Дата);
				
		КонецЦикла;
		
		СуммаДокумента = ЭтотОбъект.ТорговыеТочки.Итог("Сумма");
	
		ПересчитатьСуммуНДСДокумент();
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПечатьФайла(пИмяФайла, пХранилище) Экспорт
	
	Если Найти(НРег(пИмяФайла), ".doc") > 0 Тогда
		пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".xls") > 0 Тогда
		пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
	//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
	//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
	//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
	//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".bmp") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".bmp") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".dib") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".rle") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".jpeg") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".tif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".gif") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".png") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".ico") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".wmf") > 0
	ИЛИ Найти(НРег(пИмяФайла), ".emf") > 0 Тогда
		пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".txt") > 0 Тогда
		пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".pdf") > 0 Тогда	
		пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
	ИначеЕсли Найти(НРег(пИмяФайла), ".html") > 0 Тогда	
		пПрограмма = """C:\Program Files (x86)\Internet Explorer\iexplore.exe"" /p ""пИмяФайла""";
		пПрограмма = """C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"" /p ""пИмяФайла""";

	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	#Если Клиент Тогда
		Состояние("Сохраняется файл: " + пИмяФайла);
	#КонецЕсли	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	Если РаботаСФайлами.СохранитьФайлНаДиске(пХранилище, ИмяВременногоФайла, Ложь, "", Ложь) Тогда
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		#Если Клиент Тогда
		Состояние("Печать файла: " + пИмяФайла);
		#КонецЕсли
		ЗапуститьПриложение(пПрограмма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПериодыТорговыхТочек()
	
	ПериодыТорговыхТочекСтрока = "";
	МассивМесяцев = Новый Массив;	
	Для Каждого Строка Из ТорговыеТочки Цикл  		
		МесяцСтрокой = Сред(Формат(Строка.Период, "ДЛФ=DD"), Найти(Формат(Строка.Период, "ДЛФ=DD"), " ") + 1);
		Если МассивМесяцев.Найти(МесяцСтрокой) = Неопределено
				И ЗначениеЗаполнено(МесяцСтрокой) Тогда
			МассивМесяцев.Добавить(МесяцСтрокой);
		КонецЕсли;	 			
	КонецЦикла;
	Для Каждого ЭлементМассива Из МассивМесяцев Цикл
		ПериодыТорговыхТочекСтрока = ПериодыТорговыхТочекСтрока + ЭлементМассива + ", ";	
	КонецЦикла;
	ПериодыТорговыхТочекСтрока = Лев(ПериодыТорговыхТочекСтрока, СтрДлина(ПериодыТорговыхТочекСтрока) - 2);
	
КонецПроцедуры

Процедура ПроверитьЛимитПоБюджету() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Касса);
	МассивСчетов.Добавить(ПланыСчетов.Финансовый.Банк);
	
	СтруктураПараметров.Вставить("Счета"			, МассивСчетов); 						  
	СтруктураПараметров.Вставить("Ссылка"			, Ссылка); 
	СтруктураПараметров.Вставить("СуммаДокумента"	, СуммаДокумента); 
	
	Если ЗначениеЗаполнено(ДатаРасхода) Тогда
		СтруктураПараметров.Вставить("НачалоПериода", НачалоМесяца(ДатаРасхода)); 
		СтруктураПараметров.Вставить("КонецПериода"	, КонецМесяца(ДатаРасхода)); 		
	Иначе		
		СтруктураПараметров.Вставить("НачалоПериода", НачалоМесяца(Дата)); 
		СтруктураПараметров.Вставить("КонецПериода"	, КонецМесяца(Дата)); 		
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("ЦФО"				,  ЦФО); 						  	
	СтруктураПараметров.Вставить("СтатьяДДС"		,  СтатьяДвиженияДенежныхСредств); 						  	
	//+++АК SUVV 2018.02.28 ИП-00017941
	СтруктураПараметров.Вставить("ВыбДата"		    ,  Дата);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДР
	|ПОМЕСТИТЬ ВТ_СтатьиДР
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	|			&ВыбДата,
	|			СтатьяДДС = &СтатьяДДС
	|				И СтатьяДР <> ЗНАЧЕНИЕ(Справочник.СтатьиДоходовРасходов.ПустаяСсылка)) КАК СоответствияСтатейСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС
	|ПОМЕСТИТЬ ВТ_СтатьиДДС
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	|			&ВыбДата,
	|			СтатьяДР В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиДР.СтатьяДР
	|					ИЗ
	|						ВТ_СтатьиДР)
	|				И СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК СоответствияСтатейСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Ссылка = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|			ТОГДА ""НоваяЗаявка""
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Заявка,
	|	&СуммаДокумента КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЗаявкиИОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств.Ссылка,
	|	ЗаявкаНаРасходованиеСредств.СуммаДокумента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.Проведен
	|	И ЗаявкаНаРасходованиеСредств.Ссылка <> &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗаявкаНаРасходованиеСредств.ДатаРасхода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаявкаНаРасходованиеСредств.Дата
	|			ИНАЧЕ ЗаявкаНаРасходованиеСредств.ДатаРасхода
	|		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаявкаНаРасходованиеСредств.ЦФО = &ЦФО
	|	И ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств В
	|			(ВЫБРАТЬ
	|				ВТ_СтатьиДДС.СтатьяДДС
	|			ИЗ
	|				ВТ_СтатьиДДС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФинансовыйОбороты.Регистратор.ЗаявкаНаРасходованиеСредств,
	|	СУММА(ФинансовыйОбороты.СуммаОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В ИЕРАРХИИ (&Счета), , , , ) КАК ФинансовыйОбороты
	|ГДЕ
	|	ФинансовыйОбороты.Регистратор.ЦФО = &ЦФО
	|	И ФинансовыйОбороты.Регистратор.СтатьяДвиженияДенежныхСредств В
	|			(ВЫБРАТЬ
	|				ВТ_СтатьиДДС.СтатьяДДС
	|			ИЗ
	|				ВТ_СтатьиДДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйОбороты.Регистратор.ЗаявкаНаРасходованиеСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВТ_ЗаявкиИОплаты.Сумма), 0) КАК Сумма,
	|	0 КАК Лимит
	|ИЗ
	|	ВТ_ЗаявкиИОплаты КАК ВТ_ЗаявкиИОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаявкиИОплаты.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	-БюджетДоходовИРасходовОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.БюджетДоходовИРасходов.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СтруктурнаяЕдиница = &ЦФО
	|				И СтатьяДР В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиДР.СтатьяДР
	|					ИЗ
	|						ВТ_СтатьиДР)) КАК БюджетДоходовИРасходовОбороты
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(Лимит), 0) КАК Лимит
	|ПО
	|	ОБЩИЕ";
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	СоответствияСтатейСчетов.СтатьяДР
	//|ПОМЕСТИТЬ ВТ_СтатьиДР
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	//|ГДЕ
	//|	СоответствияСтатейСчетов.СтатьяДДС = &СтатьяДДС
	//|	И СоответствияСтатейСчетов.СтатьяДР <> ЗНАЧЕНИЕ(Справочник.СтатьиДоходовРасходов.ПустаяСсылка)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствияСтатейСчетов.СтатьяДДС
	//|ПОМЕСТИТЬ ВТ_СтатьиДДС
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	//|ГДЕ
	//|	СоответствияСтатейСчетов.СтатьяДР В
	//|			(ВЫБРАТЬ
	//|				ВТ_СтатьиДР.СтатьяДР
	//|			ИЗ
	//|				ВТ_СтатьиДР)
	//|	И СоответствияСтатейСчетов.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВЫБОР
	//|		КОГДА &Ссылка = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	//|			ТОГДА ""НоваяЗаявка""
	//|		ИНАЧЕ &Ссылка
	//|	КОНЕЦ КАК Заявка,
	//|	&СуммаДокумента КАК Сумма
	//|ПОМЕСТИТЬ ВТ_ЗаявкиИОплаты
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ЗаявкаНаРасходованиеСредств.Ссылка,
	//|	ЗаявкаНаРасходованиеСредств.СуммаДокумента
	//|ИЗ
	//|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	//|ГДЕ
	//|	ЗаявкаНаРасходованиеСредств.Проведен
	//|	И ЗаявкаНаРасходованиеСредств.Ссылка <> &Ссылка
	//|	И ВЫБОР
	//|			КОГДА ЗаявкаНаРасходованиеСредств.ДатаРасхода = ДАТАВРЕМЯ(1, 1, 1)
	//|				ТОГДА ЗаявкаНаРасходованиеСредств.Дата
	//|			ИНАЧЕ ЗаявкаНаРасходованиеСредств.ДатаРасхода
	//|		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И ЗаявкаНаРасходованиеСредств.ЦФО = &ЦФО
	//|	И ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств В
	//|			(ВЫБРАТЬ
	//|				ВТ_СтатьиДДС.СтатьяДДС
	//|			ИЗ
	//|				ВТ_СтатьиДДС)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ФинансовыйОбороты.Регистратор.ЗаявкаНаРасходованиеСредств,
	//|	СУММА(ФинансовыйОбороты.СуммаОборотКт)
	//|ИЗ
	//|	РегистрБухгалтерии.Финансовый.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В ИЕРАРХИИ (&Счета), , , , ) КАК ФинансовыйОбороты
	//|ГДЕ
	//|	ФинансовыйОбороты.Регистратор.ЦФО = &ЦФО
	//|	И ФинансовыйОбороты.Регистратор.СтатьяДвиженияДенежныхСредств В
	//|			(ВЫБРАТЬ
	//|				ВТ_СтатьиДДС.СтатьяДДС
	//|			ИЗ
	//|				ВТ_СтатьиДДС)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ФинансовыйОбороты.Регистратор.ЗаявкаНаРасходованиеСредств
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(МАКСИМУМ(ВТ_ЗаявкиИОплаты.Сумма), 0) КАК Сумма,
	//|	0 КАК Лимит
	//|ИЗ
	//|	ВТ_ЗаявкиИОплаты КАК ВТ_ЗаявкиИОплаты
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_ЗаявкиИОплаты.Заявка
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	0,
	//|	-БюджетДоходовИРасходовОбороты.СуммаОборот
	//|ИЗ
	//|	РегистрНакопления.БюджетДоходовИРасходов.Обороты(
	//|			&НачалоПериода,
	//|			&КонецПериода,
	//|			,
	//|			СтруктурнаяЕдиница = &ЦФО
	//|				И СтатьяДР В
	//|					(ВЫБРАТЬ
	//|						ВТ_СтатьиДР.СтатьяДР
	//|					ИЗ
	//|						ВТ_СтатьиДР)) КАК БюджетДоходовИРасходовОбороты
	//|ИТОГИ
	//|	ЕСТЬNULL(СУММА(Сумма), 0) КАК Сумма,
	//|	ЕСТЬNULL(СУММА(Лимит), 0) КАК Лимит
	//|ПО
	//|	ОБЩИЕ";
	//---АК SUVV			   
	СтруктураПараметров.Вставить("Текст", ТекстЗапроса);
	
	СуммаОплатИЗаявок = 0;
	Лимит = 0;
	
	Выборка = ПолныеПрава.ВыполнитьЗапрос(СтруктураПараметров).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Следующий() Тогда
		СуммаОплатИЗаявок = Выборка.Сумма;
		Лимит = Выборка.Лимит;
	КонецЕсли;
		
	Если СуммаОплатИЗаявок  > Лимит Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Обнаружено превышение бюджета доходов и расходов! " + Символы.ПС +
								"Сумма произведенных и запланированных оплат с учетом документа составляет: " + Формат(СуммаОплатИЗаявок , "ЧДЦ=2") +
								" руб. Лимит оплаты: " + Формат(Лимит, "ЧДЦ=2; ЧН=") + " руб.");
	КонецЕсли;
	
КонецПроцедуры 

Функция ТТОбщая(пТорговаяТочка) Экспорт
	
	пОбщая = Ложь;
	Если СокрЛП(пТорговаяТочка.Код) = "ЦФО_000" Тогда //Все
		пОбщая = Истина;
	ИначеЕсли СокрЛП(пТорговаяТочка.Код) = "ЦФО_66" Тогда //Избенка (общий)
		пОбщая = Истина;
	ИначеЕсли СокрЛП(пТорговаяТочка.Код) = "ЦФО_67" Тогда //Вкусвилл (общий)
		пОбщая = Истина;
	КонецЕсли;
	
	Возврат пОбщая;
	
КонецФункции

Функция ПолучитьАкцептантаПоСтатьеДДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяДДС", ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.Пользователь
	|ИЗ
	|	РегистрСведений.ПраваНаАкцептованиеЗаявокПоСтатьямДДС КАК ПраваНаАкцептованиеЗаявокПоСтатьямДДС
	|ГДЕ
	|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств = &СтатьяДДС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьУправляющегоВСтрокеТЧТТ(ТекТТ, АкцептантПоСтатьеДДС, мДемниченко) Экспорт
	
	// если статью имеет право акцептовать только Демниченко 
	Если АкцептантПоСтатьеДДС = мДемниченко Тогда
		Возврат мДемниченко;
	КонецЕсли;	
	
	// основной акцептант в статье ДДС 
	Если НЕ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант.Пустая() Тогда
		Возврат ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант;
	КонецЕсли;
	
	// акцептант заявок в ТТ 
	Если ЗначениеЗаполнено(ТекТТ.АкцептантЗаявок) Тогда
		Возврат ТекТТ.АкцептантЗаявок;
	КонецЕсли;	

	// 
	Если ТТОбщая(ТекТТ) Тогда
		Возврат ПолучитьРуководителяОтдела(ЭтотОбъект.ЦФО);
	КонецЕсли;

	//
	Возврат ПолучитьУправляющегоТочки(ТекТТ);
	
КонецФункции

Функция ПолучитьРуководителяОтдела(пЦФО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЦФО"	, пЦФО);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&Дата, ) КАК ПользователиПоЦФОСрезПоследних
	|ГДЕ
	|	ПользователиПоЦФОСрезПоследних.ЦФО = &ЦФО
	|	И ПользователиПоЦФОСрезПоследних.РуководительОтдела";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУправляющегоТочки(пТорговаяТочка) Экспорт
	
	Запрос = Новый Запрос;
	
	ОтборЦФО = Новый Структура;
	ОтборЦФО.Вставить("СтруктурнаяЕдиница", пТорговаяТочка);
	пЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ЭтотОбъект.Дата, ОтборЦФО).ЦФО;
	Запрос.УстановитьПараметр("ЦФО"	, пЦФО);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&Дата, ) КАК ПользователиПоЦФОСрезПоследних
	|ГДЕ
	|	ПользователиПоЦФОСрезПоследних.ЦФО = &ЦФО
	|	И ПользователиПоЦФОСрезПоследних.РуководительОтдела";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСчетКонтрагента()Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичные И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") и Не ЗначениеЗаполнено(БанковскийСчетПолучателя) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	БанковскиеСчета.Ссылка
		               |ИЗ
		               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		               |ГДЕ
		               |	БанковскиеСчета.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 1 Тогда
			БанковскийСчетПолучателя = Неопределено;
			Возврат;
		КонецЕсли;
		
		Если Выборка.Следующий() Тогда		
			БанковскийСчетПолучателя = Выборка.Ссылка;	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

//АК БЕЛН 27.07.2016++
Функция ОбязательностьЗаполненияПериодаОтработки() Экспорт
	
	
	СтатьиДДСИсключая = Новый СписокЗначений;
	СтатьиДДСИсключая.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110")); // оплата поставщикам товара
	СтатьиДДСИсключая.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120210")); // оплата упаковки, этикетки
	СтатьиДДСИсключая.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131011"));
	СтатьиДДСИсключая.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120332")); // оплата доставки на склады
	СтатьиДДСИсключая.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("132030"));
	СтатьиДДСИсключая.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("131010"));
	
	Если СтатьиДДСИсключая.НайтиПоЗначению(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбязательностьЗаполненияПериодаОтработки = Истина;
	Для каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Сделка) Тогда
			ОбязательностьЗаполненияПериодаОтработки = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ОбязательностьЗаполненияПериодаОтработки;
	
КонецФункции
//АК БЕЛН 27.07.2016--


ВыполнятьЗаписьБезПроверок 				= Ложь;
НеПроверятьДатуЗапретаРедактирования 	= Ложь;
МенятьСтатусы							= Истина;
