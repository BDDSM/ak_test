
Процедура ВвестиНаОснованииРасходИзБанка(Кнопка)
	
	ТекДанные = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	ТекЗаявка = ТекДанные.Ссылка;
	
	обДок = Документы.РасходИзБанка.СоздатьДокумент();
	обДок.Заполнить(ТекЗаявка);
	
	обФормаДокумента = обДок.ПолучитьФорму();
	обФормаДокумента.ПараметрОснование = ТекЗаявка;
	обФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииРасходИзКассы(Кнопка)
	
	обДок = Документы.РасходИзКассы.СоздатьДокумент();
	обДок.Заполнить(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииНачислениеЗарплаты(Кнопка)
	
	обДок = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
	обДок.Заполнить(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииПоступлениеТоваровУслуг(Кнопка)
	
	обДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	обДок.Заполнить(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры

//АК_БЕЛН_06.04.2016++
Процедура ВвестиНаОснованииПоступлениеТоваровУслугОборуд(Кнопка)
	
	обДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	обДок.ФлОборудование=Истина;
	обДок.Заполнить(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры
//АК_БЕЛН_06.04.2016--

Процедура УстановитьКнопкиВводаНаОсновании()
	
	//
	ТекДанные = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		
		пФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
		
	Иначе
		
		пФормаОплаты = Неопределено;
		Если ЭлементыФормы.ДокументСписок.Колонки.ФормаОплаты.Видимость Тогда
			пФормаОплаты = ЭлементыФормы.ДокументСписок.ТекущиеДанные.ФормаОплаты;
		Иначе			
			пФормаОплаты = ТекДанные.Ссылка.ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	спПодменю = Новый СписокЗначений;
	спПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.ВвестиНаОсновании);
	спПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ВвестиНаОсновании);
	
	//
	Для Каждого Элемент Из спПодменю Цикл
		Для Каждого Кнопка Из Элемент.Значение.Кнопки Цикл
			Элемент.Значение.Кнопки.Удалить(Кнопка);
		КонецЦикла;
	КонецЦикла;
	
	//
	Для Каждого Элемент Из спПодменю Цикл
		Для Каждого Кнопка Из Элемент.Значение.Кнопки Цикл
			Элемент.Значение.Кнопки.Удалить(Кнопка);
		КонецЦикла;
		
		Если пФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
			Элемент.Значение.Кнопки.Добавить("РасходИзБанка", ТипКнопкиКоманднойПанели.Действие, "Расход из банка", Новый Действие("ВвестиНаОснованииРасходИзБанка"));
		ИначеЕсли пФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
			Элемент.Значение.Кнопки.Добавить("РасходИзКассы", ТипКнопкиКоманднойПанели.Действие, "Расход из кассы", Новый Действие("ВвестиНаОснованииРасходИзКассы"));
		КонецЕсли;
		Если НЕ ТекДанные = Неопределено Тогда
			Если ТекДанные.Ссылка.Организация = Справочники.Организации.НайтиПоКоду("000000000") Тогда
				МассивСтатейДДС = ДопМодульСервер.ПолучитьСтатьиДДСОплатаЗП();
				Если НЕ МассивСтатейДДС.Найти(ТекДанные.Ссылка.СтатьяДвиженияДенежныхСредств) = Неопределено Тогда
					Элемент.Значение.Кнопки.Добавить("НачислениеЗарплатыРаботникамОрганизаций", ТипКнопкиКоманднойПанели.Действие,
												"Начисление зарплаты работникам организаций", Новый Действие("ВвестиНаОснованииНачислениеЗарплаты"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Попытка
			Элемент.Значение.Кнопки.Добавить("ПоступлениеТоваровУслуг", ТипКнопкиКоманднойПанели.Действие, "Поступление товаров и услуг", Новый Действие("ВвестиНаОснованииПоступлениеТоваровУслуг"));
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтбор()
	
	//Минеев - перенес на ограничение на уровне записей
	
	//Если РольДоступна("ПравоВидетьЗаявкиНаРасходованиеТолькоНаНаличные") Тогда
	//	
	//	ДокументСписок.Отбор.ФормаОплаты.Значение 		= Перечисления.ФормыОплаты.Наличные;
	//	ДокументСписок.Отбор.ФормаОплаты.Использование 	= Истина;
	//	ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФормаОплаты.Доступность = Ложь;
	//	
	//ИначеЕсли РольДоступна("ПравоВидетьЗаявкиНаРасходованиеТолькоНаБезналичные") Тогда
	//	
	//	ДокументСписок.Отбор.ФормаОплаты.Значение 		= Перечисления.ФормыОплаты.Безналичные;
	//	ДокументСписок.Отбор.ФормаОплаты.Использование 	= Истина;
	//	ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФормаОплаты.Доступность = Ложь;
	//	
	//Иначе
	//	
	//	ДокументСписок.Отбор.ФормаОплаты.Значение 		= Перечисления.ФормыОплаты.ПустаяСсылка();
	//	ДокументСписок.Отбор.ФормаОплаты.Использование 	= Ложь;
	//	ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФормаОплаты.Доступность = Истина;
	//	
	//КонецЕсли;
	//
	//Если НЕ РольДоступна("ПравоВидетьЗаявкиНаРасходованиеПоВсемЦФО") Тогда
	//	
	//	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("спЦФО"		, ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ТекущаяДата(), ТекПользователь));
	//	Запрос.УстановитьПараметр("спСтатьиДДС"	, ОбщиеПроцедуры.ПолучитьСписокСтатейДДСДляАкцептированияПользователя(ТекПользователь));
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка
	//	|ИЗ
	//	|	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
	//	|ГДЕ
	//	|	(ЗаявкаНаРасходованиеСредствТорговыеТочки.ЦФО В (&спЦФО)
	//	|			ИЛИ ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.ЦФО В (&спЦФО)
	//	|			ИЛИ ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.СтатьяДвиженияДенежныхСредств В ИЕРАРХИИ (&спСтатьиДДС)
	//	|			ИЛИ &ДопУсловие1)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗаявкаНаРасходованиеСредств.Ссылка
	//	|ИЗ
	//	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	//	|ГДЕ
	//	|	ЗаявкаНаРасходованиеСредств.КоличествоТорговыхТочек = 0
	//	|	И (ЗаявкаНаРасходованиеСредств.ЦФО В (&спЦФО)
	//	|			ИЛИ ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств В ИЕРАРХИИ (&спСтатьиДДС)
	//	|			ИЛИ &ДопУсловие2)";
	//	
	//	мЕстьДопУсловия = (ТекПользователь = Справочники.Пользователи.НайтиПоНаименованию("Курвяков Евгений"));
	//	Если мЕстьДопУсловия Тогда
	//		Запрос.УстановитьПараметр("Крылова", Справочники.Пользователи.НайтиПоНаименованию("Крылова Наталья"));
	//	КонецЕсли;
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	//	|			ИЛИ &ДопУсловие1", ?(мЕстьДопУсловия, "
	//	|			ИЛИ ЗаявкаНаРасходованиеСредствТорговыеТочки.Управляющий = &Крылова
	//	|			ИЛИ ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.Ответственный = &Крылова", ""));
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	//	|			ИЛИ &ДопУсловие2", ?(мЕстьДопУсловия, "
	//	|			ИЛИ ЗаявкаНаРасходованиеСредств.Ответственный = &Крылова", ""));
	//	
	//	Запрос.Текст = ТекстЗапроса;
	//	
	//	спЗаявки = Новый СписокЗначений;
	//	спЗаявки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	//	
	//	ДокументСписок.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.ВСписке;
	//	ДокументСписок.Отбор.Ссылка.Значение 		= спЗаявки;
	//	ДокументСписок.Отбор.Ссылка.Использование 	= Истина;
	//	
	//	ЭлементыФормы.ДокументСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПосчитатьИтогПоКолонкеСумма()
	
	Возврат; //пока отключил для ускорения работы
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(Документ.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК Документ";
	
	ТекстОтбор = "";
	НомерПараметра = 0;
	
	Для Каждого СтрОтбор Из ДокументСписок.Отбор Цикл
		
		Если СтрОтбор.Использование Тогда
			
			НомерПараметра = НомерПараметра + 1;
			
			Если СтрОтбор.ВидСравнения = ВидСравнения.Интервал
				ИЛИ СтрОтбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы
				ИЛИ СтрОтбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало 
				ИЛИ СтрОтбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " МЕЖДУ &НачалоПериода" + НомерПараметра + " И &КонецПериода" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " МЕЖДУ &НачалоПериода" + НомерПараметра + " И &КонецПериода" + НомерПараметра);
				
				Запрос.УстановитьПараметр("НачалоПериода" + НомерПараметра, СтрОтбор.ЗначениеС);
				Запрос.УстановитьПараметр("КонецПериода" + НомерПараметра,  СтрОтбор.ЗначениеПо);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.ВСписке Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " В (&Параметр" + НомерПараметра + ")", " И Документ." + СтрОтбор.Имя + " В (&Параметр" + НомерПараметра + ")");
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ НЕ Документ." + СтрОтбор.Имя + " В (&Параметр" + НомерПараметра + ")", " И НЕ Документ." + СтрОтбор.Имя + " В (&Параметр" + НомерПараметра + ")");
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.ВИерархии Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " В ИЕРАРХИИ (&Параметр" + НомерПараметра + ")", " И Документ." + СтрОтбор.Имя + " В ИЕРАРХИИ (&Параметр" + НомерПараметра + ")");
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.НеВИерархии Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ НЕ Документ." + СтрОтбор.Имя + " В ИЕРАРХИИ (&Параметр" + НомерПараметра + ")", " И НЕ Документ." + СтрОтбор.Имя + " В ИЕРАРХИИ (&Параметр" + НомерПараметра + ")");
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.Больше Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " > &Параметр" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " > &Параметр" + НомерПараметра);
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " >= &Параметр" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " >= &Параметр" + НомерПараметра);
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.Меньше Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " < &Параметр" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " < &Параметр" + НомерПараметра);
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " <= &Параметр" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " <= &Параметр" + НомерПараметра);
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			ИначеЕсли СтрОтбор.ВидСравнения = ВидСравнения.НеРавно Тогда
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " <> &Параметр" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " <> &Параметр" + НомерПараметра);
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			Иначе	
				
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "", " ГДЕ Документ." + СтрОтбор.Имя + " = &Параметр" + НомерПараметра, " И Документ." + СтрОтбор.Имя + " = &Параметр" + НомерПараметра);
				
				Запрос.УстановитьПараметр("Параметр" + НомерПараметра, СтрОтбор.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
	
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()Тогда
			ИтогСуммаДокумента = Выборка.СуммаДокумента;
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	ЭлементыФормы.ДокументСписок.ПериодАвтоОбновления 	= 60;
	ЭлементыФормы.ДокументСписок.АвтоОбновление 		= Истина;
	
	УстановитьОтбор();
	
	//???УстановитьКнопкиВводаНаОсновании();
//АК БЕЛН 28.03.2016++
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ДействиеСтатус, Метаданные.Перечисления.СтатусыПолученныхДокументов.ЗначенияПеречисления, Новый Действие("УстановитьСтатус") );	
//АК БЕЛН 28.03.2016--
КонецПроцедуры

//АК БЕЛН 28.03.2016++
Процедура УстановитьСтатус(Элемент)
	УстановитьПривилегированныйРежим(Истина);
	
	ВыделенныеСтроки = ЭлементыФормы.ДокументСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ РольДоступна("ПравоУказанияДокументовВЗаявкахНаРасходование") Тогда
		Сообщить("Нет прав для выполнения операции!");
		Возврат;
	КонецЕсли;
	ИмяПереч=Элемент.Имя;
	ЗначПереч=Перечисления.СтатусыПолученныхДокументов[ИмяПереч];	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.ДокументОснование
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ДокументОснование В(&Ссылка)";

	МасДок=Новый Массив;
	Для Каждого ТекДанные Из ВыделенныеСтроки Цикл
		 МасДок.Добавить(ТекДанные.Ссылка);
	КонецЦикла;
	Запрос.УстановитьПараметр("Ссылка", МасДок);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектДокумента = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектДокумента.СтатусПолученныхДокументов = ЗначПереч;
		ОбъектДокумента.ДокументыПолучены=ЗначениеЗаполнено(ОбъектДокумента.СтатусПолученныхДокументов);
		ОбъектДокумента.НеПроверятьДатуЗапретаРедактирования=Истина;
		Попытка
			//Если ОбъектДокумента.Проведен и Не ОбъектДокумента.ПометкаУдаления Тогда
			//	ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
			//Иначе	
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			//КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

	
	Для Каждого ТекДанные Из ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = ТекДанные.Ссылка;
		
		// установка значения реквизита "ВсеДокументыВНаличии" = Истина
		ОбъектДокумента = СсылкаНаДокумент.ПолучитьОбъект();
		ОбъектДокумента.ОбменДанными.Загрузка = Истина;
		ОбъектДокумента.НеПроверятьДатуЗапретаРедактирования = Истина;
		ОбъектДокумента.СтатусПолученныхДокументов = ЗначПереч;
		ОбъектДокумента.ВсеДокументыВНаличии=ЗначениеЗаполнено(ОбъектДокумента.СтатусПолученныхДокументов);

		Попытка
			//Если ОбъектДокумента.Проведен и Не ОбъектДокумента.ПометкаУдаления Тогда
			//	ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
			//Иначе	
			 ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			//КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
 
//АК БЕЛН 28.03.2016--

Процедура ОбновлениеОтображения()
	
	//ПосчитатьИтогПоКолонкеСумма();	
	
КонецПроцедуры


Процедура СтатусОтправкиВБанкПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтатусОтправкиВБанк)
			И НЕ ЗначениеЗаполнено(СтатусОплаты)
			И ПустаяСтрока(ЭтаФорма.СтрокаВхождения) Тогда
		
		ДокументСписок.Отбор.Ссылка.Использование 	= Ложь;
		ДокументСписок.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.Равно;
		ДокументСписок.Отбор.Ссылка.Значение 		= Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
		
	Иначе
		
		ЕстьОтборПоСтрокеВхождения = ЗначениеЗаполнено(ЭтаФорма.СтрокаВхождения);
		Если ЕстьОтборПоСтрокеВхождения
				И СтрДлина(ЭтаФорма.СтрокаВхождения) < 3 Тогда
			Сообщить("Строка поиска должна быть не менее 3 символов в длину!");
			ЕстьОтборПоСтрокеВхождения = Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтатусОтправки"	, СтатусОтправкиВБанк);
		Запрос.УстановитьПараметр("СтатусОплаты"	, СтатусОплаты);
		Если ЕстьОтборПоСтрокеВхождения Тогда
			Запрос.УстановитьПараметр("СтрокаВхождения"	, "%" + СокрЛП(ЭтаФорма.СтрокаВхождения) + "%");
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 400
		|	ДокументЗаявкаНаРасходованиеСредств.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ДокументЗаявкаНаРасходованиеСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтправленныеПлатежиВБанк.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств,
		|			СУММА(ОтправленныеПлатежиВБанк.Сумма) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ОтправленныеПлатежиВБанк КАК ОтправленныеПлатежиВБанк
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОтправленныеПлатежиВБанк.ЗаявкаНаРасходованиеСредств) КАК ОтправленныеПлатежи
		|		ПО ДокументЗаявкаНаРасходованиеСредств.Ссылка = ОтправленныеПлатежи.ЗаявкаНаРасходованиеСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств,
		|			СУММА(ВзаиморасчетыСКонтрагентами.Сумма) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетыСКонтрагентами.ЗаявкаНаРасходованиеСредств) КАК Взаиморасчеты
		|		ПО ДокументЗаявкаНаРасходованиеСредств.Ссылка = Взаиморасчеты.ЗаявкаНаРасходованиеСредств
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиПлатежейВБанк.ПустаяСсылка)
		|				ТОГДА 1
		|			КОГДА &СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиПлатежейВБанк.Отправлено)
		|					И ЕСТЬNULL(ОтправленныеПлатежи.Сумма, 0) > 0
		|				ТОГДА 1
		|			КОГДА &СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиПлатежейВБанк.НеОтправлено)
		|					И ЕСТЬNULL(ОтправленныеПлатежи.Сумма, 0) = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ = 1
		|	И ВЫБОР
		|			КОГДА &СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусыОплаты.ПустаяСсылка)
		|				ТОГДА 1
		|			КОГДА &СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусыОплаты.ПолностьюОплачено)
		|					И ЕСТЬNULL(Взаиморасчеты.Сумма, 0) > 0
		|				ТОГДА 1
		|			КОГДА &СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусыОплаты.НеОплачено)
		|					И ЕСТЬNULL(Взаиморасчеты.Сумма, 0) = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ = 1
		|	И &УсловиеНаСтрокуВхождения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументЗаявкаНаРасходованиеСредств.МоментВремени УБЫВ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
		|	И &УсловиеНаСтрокуВхождения",
			?(ЕстьОтборПоСтрокеВхождения, "
		|	И ВЫБОР
		|			КОГДА &СтрокаВхождения = ""%%""
		|				ТОГДА 1
		|			КОГДА ДокументЗаявкаНаРасходованиеСредств.Комментарий ПОДОБНО &СтрокаВхождения
		|				ТОГДА 1
		|			КОГДА ДокументЗаявкаНаРасходованиеСредств.НазначениеПлатежа ПОДОБНО &СтрокаВхождения
		|				ТОГДА 1
		|			КОГДА ДокументЗаявкаНаРасходованиеСредств.Пояснение ПОДОБНО &СтрокаВхождения
		|				ТОГДА 1
		|			КОГДА ДокументЗаявкаНаРасходованиеСредств.БанковскийСчетКасса.Наименование ПОДОБНО &СтрокаВхождения
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ = 1", ""));
		
		Запрос.Текст = ТекстЗапроса;
		
		спЗаявки = Новый СписокЗначений;
		спЗаявки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		ДокументСписок.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.ВСписке;
		ДокументСписок.Отбор.Ссылка.Значение 		= спЗаявки;
		ДокументСписок.Отбор.Ссылка.Использование 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АкцептантПриИзменении(Элемент)	
	
	Если ЗначениеЗаполнено(Акцептант) Тогда
		Отбор.ДокументыПоАкцептанту.Установить(Акцептант);
	Иначе
		Отбор.ДокументыПоАкцептанту.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры


Процедура ДействияФормыВвестиНаОсновании(Кнопка)
	
	//
	ТекДанные = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		
		//
		пФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
		
	Иначе
		
		//
		пФормаОплаты = Неопределено;
		Если ЭлементыФормы.ДокументСписок.Колонки.ФормаОплаты.Видимость Тогда
			пФормаОплаты = ЭлементыФормы.ДокументСписок.ТекущиеДанные.ФормаОплаты;
		Иначе			
			пФормаОплаты = ТекДанные.Ссылка.ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	спПодменю = Новый СписокЗначений;
	
	
	//
	Если пФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
		
		//
		спПодменю.Добавить("РасходИзБанка", "Расход из банка");
		

	ИначеЕсли пФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		
		спПодменю.Добавить("РасходИзКассы", "Расход из кассы");
		
	КонецЕсли;
	
	//
	Если ТекДанные <> Неопределено Тогда
		
		//
		Если ТекДанные.Ссылка.Организация = Справочники.Организации.НайтиПоКоду("000000000") Тогда
			
			//
			МассивСтатейДДС = ДопМодульСервер.ПолучитьСтатьиДДСОплатаЗП();
			Если НЕ МассивСтатейДДС.Найти(ТекДанные.Ссылка.СтатьяДвиженияДенежныхСредств) = Неопределено Тогда
				спПодменю.Добавить("НачислениеЗарплатыРаботникамОрганизаций", "Начисление зарплаты работникам организаций"); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//
	спПодменю.Добавить("ПоступлениеТоваровУслуг", "Поступление товаров и услуг");
	//АК_БЕЛН_06.04.2016++
	спПодменю.Добавить("ПоступлениеТоваровУслугОборуд", "Поступление оборудования");
	//АК_БЕЛН_06.04.2016--
	//+++АК GEYV 28.07.2015
	спПодменю.Добавить("ПриказНаКомандировку", "Приказ на командировку"); 
	//---АК
	
	спПодменю.Добавить("ЗадачаИсполнителя", "Задача исполнителя"); 
	
	//
	ВыбранныйЭлемент = спПодменю.ВыбратьЭлемент();
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат
	КонецЕсли; 
		
	Если ВыбранныйЭлемент.Значение = "РасходИзБанка" Тогда
		ВвестиНаОснованииРасходИзБанка(Неопределено);
	ИначеЕсли ВыбранныйЭлемент.Значение = "РасходИзКассы" Тогда
		ВвестиНаОснованииРасходИзКассы(Неопределено);			
	ИначеЕсли ВыбранныйЭлемент.Значение = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
		ВвестиНаОснованииНачислениеЗарплаты(Неопределено);				
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПоступлениеТоваровУслуг" Тогда
		ВвестиНаОснованииПоступлениеТоваровУслуг(Неопределено);
	//АК_БЕЛН_06.04.2016++
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПоступлениеТоваровУслугОборуд" Тогда
		ВвестиНаОснованииПоступлениеТоваровУслугОборуд(Неопределено);
	//АК_БЕЛН_06.04.2016--
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПриказНаКомандировку" Тогда
		
		//обДок.Заполнить(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
		////обДок.ПолучитьФорму("ФормаДокумента").Открыть();
		//ОткрытьЗначение(обДок);
 		ОткрытьФорму("Документ.ПриказНаКомандировку.Форма.ФормаДокумента", Новый Структура("Основание",ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка));			
	ИначеЕсли ВыбранныйЭлемент.Значение = "ЗадачаИсполнителя" Тогда
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		Задача.Заполнить(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
 		Задача.ПолучитьФорму().Открыть();
		
	КонецЕсли; 

КонецПроцедуры

Процедура ДействияФормыКнопкаПринятыДокументы(Кнопка)

	//ТекДанные = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	//Если ТекДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	ВыделенныеСтроки = ЭлементыФормы.ДокументСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РольДоступна("ПравоУказанияДокументовВЗаявкахНаРасходование") Тогда
		Сообщить("Нет прав для выполнения операции!");
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекДанные Из ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = ТекДанные.Ссылка;
		
		// установка значения реквизита "ВсеДокументыВНаличии" = Истина
		ОбъектДокумента = СсылкаНаДокумент.ПолучитьОбъект();
		ОбъектДокумента.ОбменДанными.Загрузка = Истина;
		Если ЗначениеЗаполнено(ОбъектДокумента.СтатусПолученныхДокументов ) Тогда
		     Сообщить("Нельзя изменить признак, так как установлен статус прикрепленных документов");
			 Возврат;
		КонецЕсли; 
		ОбъектДокумента.ВсеДокументыВНаличии = НЕ ОбъектДокумента.ВсеДокументыВНаличии;
		
		Попытка
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыПринятьКОплате(Кнопка)

	ВыделенныеСтроки = ЭлементыФормы.ДокументСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РольДоступна("ПравоПринятияКОплатеЗаявокНаРасходованиеСредств") Тогда
		Сообщить("Нет прав для выполнения операции!");
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекДанные Из ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = ТекДанные.Ссылка;
		
		// установка значения реквизита "ПринятоКОплате" = Истина
		ОбъектДокумента = СсылкаНаДокумент.ПолучитьОбъект();
		ОбъектДокумента.ОбменДанными.Загрузка = Истина;
		
		ОбъектДокумента.ПринятоКОплате = НЕ ОбъектДокумента.ПринятоКОплате;
		
		Попытка
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыСоздатьРасходИзБанка(Кнопка)
	
	мЕстьПраво = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПриниматьЗаявкиНаРасходДСКОплате, Ложь);
	Если НЕ мЕстьПраво Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет прав на оплату заявки!");
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ЭлементыФормы.ДокументСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мКолонки = ЭлементыФормы.ДокументСписок.Колонки;
	ВидноФормуОплаты 	= мКолонки.ФормаОплаты.Видимость;
	ВидноСтатус 		= мКолонки.Статус.Видимость;
	ВидноПринятоКОплате	= мКолонки.ПринятоКОплате.Видимость;
	
	мРасходыИзБанка = Документы.РасходИзБанка;
	мБезналичные 	= Перечисления.ФормыОплаты.Безналичные;
	мАкцептована	= Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована;
	
	МассивЗаявок = Новый Массив;
	Для Каждого ТекДанные Из ВыделенныеСтроки Цикл
		МассивЗаявок.Добавить(ТекДанные.Ссылка);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходИзБанка.ЗаявкаНаРасходованиеСредств,
	|	РасходИзБанка.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.ЗаявкаНаРасходованиеСредств В (&МассивЗаявок)
	|	И РасходИзБанка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходИзБанка.Дата";
	ТаблицаРасходов = Запрос.Выполнить().Выгрузить();
	СтруктураПоиска = Новый Структура("ЗаявкаНаРасходованиеСредств");
	
	Для Каждого ТекДанные Из ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = ТекДанные.Ссылка;
		Если НЕ СсылкаНаДокумент.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		мФормаОплаты = ?(ВидноФормуОплаты, ТекДанные.ФормаОплаты, СсылкаНаДокумент.ФормаОплаты);
		Если НЕ мФормаОплаты = мБезналичные Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоСообщения = Строка(СсылкаНаДокумент) + ": ";
		мСтатус = ?(ВидноСтатус, ТекДанные.Статус, СсылкаНаДокумент.Статус);
		Если НЕ мСтатус = мАкцептована Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "Для оплаты заявка должна быть акцептована");
			Продолжить;
		КонецЕсли;
		мПринятоКОплате = ?(ВидноПринятоКОплате, ТекДанные.ПринятоКОплате, СсылкаНаДокумент.ПринятоКОплате);
		Если НЕ мПринятоКОплате Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "Для оплаты заявка должна быть принята к оплате");
			Продолжить;
		КонецЕсли;
		СтруктураПоиска.ЗаявкаНаРасходованиеСредств = СсылкаНаДокумент;
		СтрокиРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиРасходов.Количество() > 0
				И Вопрос(НачалоСообщения + "Данная заявка уже оплачена, все равно оплатить? Нажмите ДА для создания платежа по текущей заявке, нажмите НЕТ для открытия существующих платежей", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Продолжить;
		КонецЕсли;
		
		//
		обДок = мРасходыИзБанка.СоздатьДокумент();
		обДок.Дата 					= ТекущаяДата();
		обДок.ОчередностьПлатежа 	= 5;
		обДок.Заполнить(СсылкаНаДокумент);
		Попытка
			обДок.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан документ " + обДок);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ДокументСписок.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ТекСтрока);
	
КонецПроцедуры

Процедура ОбновитьСтатусЗаявки()
	
	//
	ЦветСтроки = Новый Цвет;
    Состояние = "Заявка на платеж подана";
	
	//
	ТекСтрока = ЭлементыФормы.ДокументСписок.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ТекСтрока <> Неопределено Тогда
		
		//
		Статус = Неопределено;
		Если ЭлементыФормы.ДокументСписок.Колонки.Статус.Видимость Тогда
			Если ЭлементыФормы.ДокументСписок.ТекущиеДанные <> Неопределено Тогда
				Статус = ЭлементыФормы.ДокументСписок.ТекущиеДанные.Статус;
			КонецЕсли;	
		Иначе			
			Статус = ТекСтрока.Статус;
		КонецЕсли; 
		
		//
		Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			ЦветСтроки = Новый Цвет(128, 0, 128);
        	Состояние = "Заявка акцептована";
		КонецЕсли;	
		
		//
		ПринятоКОплате = Ложь;
		Если ЭлементыФормы.ДокументСписок.Колонки.ПринятоКОплате.Видимость Тогда
			ПринятоКОплате = ЭлементыФормы.ДокументСписок.ТекущиеДанные.ПринятоКОплате;
		Иначе			
			ПринятоКОплате = ТекСтрока.ПринятоКОплате;
		КонецЕсли;
		
		//
		Если ПринятоКОплате = Истина Тогда
	        ЦветСтроки = WebЦвета.Синий;
	        Состояние = "Заявка утверждена и принята к оплате";
	    КонецЕсли;
		
	КонецЕсли;
	
	//
	МассивЗаявок = Новый Массив;
	МассивЗаявок.Добавить(ТекСтрока);
	
	//
	Оплаты = ОбщиеПроцедуры.ПолучитьСуммыОплатПоЗаявкамНаРасходование(МассивЗаявок);
	Строка = Оплаты.Найти(ТекСтрока, "ЗаявкаНаРасходованиеСредств");
	
	//
	Если Строка <> Неопределено Тогда
		ТекСтатусОплаты = ОбщиеПроцедуры.ПолучитьСтатусОплаты(ТекСтрока.СуммаДокумента, Строка.Расход);
	Иначе
		ТекСтатусОплаты = ОбщиеПроцедуры.ПолучитьСтатусОплаты(ТекСтрока.СуммаДокумента, 0);
	КонецЕсли;
	
	//
	Если ТекСтатусОплаты = Перечисления.СтатусыОплаты.ПолностьюОплачено Тогда
		Состояние = "Заявка полностью оплачена";
		ЦветСтроки = WebЦвета.Зеленый;
	КонецЕсли;
	
	//
    ЭлементыФормы.СостояниеЗаявки.ЦветТекста = ЦветСтроки;
    ЭлементыФормы.Состояние.ЦветТекста 	= ЦветСтроки;
    ЭлементыФормы.Состояние.Значение 	= Состояние;
	
КонецПроцедуры	

Процедура ДокументСписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСтатусЗаявки", 0.5, Истина);
	
	//
	//???УстановитьКнопкиВводаНаОсновании();
	
КонецПроцедуры

Процедура ДокументСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЦветСтроки = Новый Цвет;
	
	Если ДанныеСтроки.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована
		И ДанныеСтроки.ОдобреноАкцептантом Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(150, 255, 150);
	КонецЕсли;	
	
	Если ЭлементыФормы.ДокументСписок.Колонки.Статус.Видимость Тогда
		ЦветСтроки = ?(ДанныеСтроки.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована, Новый Цвет(128, 0, 128), ЦветСтроки);
	КонецЕсли;
	
	Если ЭлементыФормы.ДокументСписок.Колонки.ПринятоКОплате.Видимость Тогда
		ЦветСтроки = ?(ДанныеСтроки.ПринятоКОплате, WebЦвета.Синий, ЦветСтроки);
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.СтатусОплаты.Текст = "Оплачено" Тогда
		ЦветСтроки = ?(ДанныеСтроки.ПринятоКОплате, WebЦвета.Зеленый, ЦветСтроки);
	ИначеЕсли ОформлениеСтроки.Ячейки.СтатусОплаты.Текст = "Полностью оплачено" Тогда
		ЦветСтроки = WebЦвета.Зеленый;
	КонецЕсли;
	
	ОформлениеСтроки.ЦветТекста = ЦветСтроки;
	
	Если ЭлементыФормы.ДокументСписок.Колонки.ПринятоКОплате.Видимость Тогда
		Если ДанныеСтроки.ПринятоКОплате = Истина Тогда
			ОформлениеСтроки.Ячейки.ПринятоКОплате.ОтображатьТекст 	= Истина;
			ОформлениеСтроки.Ячейки.ПринятоКОплате.Текст 			= "ДА";
			ОформлениеСтроки.Ячейки.ПринятоКОплате.ЦветТекста 		= WebЦвета.Зеленый;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//
	спЗаявки =  Новый СписокЗначений;
	Для Каждого Оформление Из ОформленияСтрок Цикл
		спЗаявки.Добавить(Оформление.ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	//
	мКолонкиСписка = ЭлементыФормы.ДокументСписок.Колонки;
	ВиденСтатусОплаты 	= (мКолонкиСписка.СтатусОплаты.Видимость 	= Истина);
	Если ВиденСтатусОплаты Тогда
		Оплаты = ОбщиеПроцедуры.ПолучитьСуммыОплатПоЗаявкамНаРасходование(спЗаявки);
	КонецЕсли;
	
	//
	мСтатусАкцептована = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована;
	
	//
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивСсылок", спЗаявки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбозначенияДокументовПоСтатусам.Статус,
	|	ОбозначенияДокументовПоСтатусам.Красный,
	|	ОбозначенияДокументовПоСтатусам.Зеленый,
	|	ОбозначенияДокументовПоСтатусам.Синий
	|ИЗ
	|	РегистрСведений.ОбозначенияДокументовПоСтатусам КАК ОбозначенияДокументовПоСтатусам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбозначенияДокументовПоСтатусамОплаты.СтатусОплаты,
	|	ОбозначенияДокументовПоСтатусамОплаты.ОплатаПросрочена,
	|	ОбозначенияДокументовПоСтатусамОплаты.ПометкаУдаления,
	|	ОбозначенияДокументовПоСтатусамОплаты.Красный,
	|	ОбозначенияДокументовПоСтатусамОплаты.Зеленый,
	|	ОбозначенияДокументовПоСтатусамОплаты.Синий
	|ИЗ
	|	РегистрСведений.ОбозначенияДокументовПоСтатусамОплаты КАК ОбозначенияДокументовПоСтатусамОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредств.Ссылка,
	|	ЗаявкаНаРасходованиеСредств.АкцептованыВсеСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаРасходованиеСредств.Контрагент = ""Стороннее физическое лицо""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтороннееФизЛицо,
	|	ЗаявкаНаРасходованиеСредств.ВнешнееФизЛицоИмя,
	|	ЗаявкаНаРасходованиеСредств.ВнешнееФизЛицоОтчество,
	|	ЗаявкаНаРасходованиеСредств.ВнешнееФизЛицоФамилия
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредств.Ссылка В(&МассивСсылок)";
									 
	Результаты = Запрос.ВыполнитьПакет();
	ТабОбозначенияПоСтатусам 		= Результаты[0].Выгрузить();
	ТабОбозначенияПоСтатусамОплаты 	= Результаты[1].Выгрузить();
	ТабРеквизиты 					= Результаты[2].Выгрузить();
	
	ВиденСтатус 		= (мКолонкиСписка.Статус.Видимость 			= Истина);
	ВиденКонтрагент 	= (мКолонкиСписка.Контрагент.Видимость 		= Истина);
	ВиднаСумма 			= (мКолонкиСписка.СуммаДокумента.Видимость 	= Истина);
	ВиднаДатаРасхода	= (мКолонкиСписка.ДатаРасхода.Видимость 	= Истина);
	ВиденСтатусОтправкиВБанк = (мКолонкиСписка.СтатусОтправкиВБанк.Видимость = Истина);
	
	МассивДокументов = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		//
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		ТекДокумент = ТекДанные.Ссылка;
		
		//
		СтрокаРеквизиты = ТабРеквизиты.Найти(ТекДокумент, "Ссылка");
		
		//
		Если ВиденКонтрагент
				И НЕ СтрокаРеквизиты = Неопределено Тогда
			
			Если СтрокаРеквизиты.СтороннееФизЛицо Тогда
				
				ОформлениеСтроки.Ячейки.Контрагент.УстановитьТекст("Стороннее физ. лицо " +
					СтрокаРеквизиты.ВнешнееФизЛицоФамилия + " " + СтрокаРеквизиты.ВнешнееФизЛицоИмя + " " + СтрокаРеквизиты.ВнешнееФизЛицоОтчество);	
			
			КонецЕсли; 
			
		КонецЕсли;
		
		//
		МассивДокументов.Добавить(ТекДокумент);
		
		//ТекВалюта = ТекДокумент.ВалютаДокумента;
		//ТекКурс = ТекДокумент.КурсВзаиморасчетов;
		//РеглВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//РеглВалютаКурс = МодульВалютногоУчета.ПолучитьКурсВалюты(РеглВалюта, ТекДанные.Дата);
		//СуммаДокумента = ?(РеглВалютаКурс <> Неопределено, МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекДанные.СуммаДокумента, ТекВалюта, РеглВалюта, ТекКурс, РеглВалютаКурс.Курс), 0);
		
		СуммаДокумента = ?(ВиднаСумма, ТекДанные.СуммаДокумента, ТекДокумент.СуммаДокумента);
		
		//Если Не ЗначениеЗаполнено(ТекДанные.ДатаРасхода) Тогда
		//	ОплатаПросрочена = Ложь;
		//Иначе
		//	ОплатаПросрочена = (НачалоДня(ТекДанные.ДатаРасхода) <= ТекущаяДата());
		//КонецЕсли;
		
		Обозначение = Неопределено;
		Строка 		= Неопределено;
		Если ВиденСтатусОплаты Тогда
			
			Строка = Оплаты.Найти(ТекДокумент, "ЗаявкаНаРасходованиеСредств");
			//
			Если НЕ Строка = Неопределено Тогда
				ТекСтатусОплаты = ОбщиеПроцедуры.ПолучитьСтатусОплаты(СуммаДокумента, Строка.Расход);
			Иначе
				ТекСтатусОплаты = ОбщиеПроцедуры.ПолучитьСтатусОплаты(СуммаДокумента, 0);
			КонецЕсли;
			Если ТекДокумент.СтатьяДвиженияДенежныхСредств.Код = "310310" Тогда // выдача займа
				Если ТекДокумент.ПринятоКОплате
						И ТекДокумент.Дата >= Дата(2015, 10, 1) Тогда  // документы оплаты не нужны, движения делает сама заявка
					ТекСтатусОплаты = Перечисления.СтатусыОплаты.ПолностьюОплачено;
				КонецЕсли;
			КонецЕсли;	
			ОформлениеСтроки.Ячейки.СтатусОплаты.УстановитьТекст(ТекСтатусОплаты);
			
			//
			ТекДатаРасхода = ?(ВиднаДатаРасхода, ТекДанные.ДатаРасхода, ТекДокумент.ДатаРасхода);
			ОплатаПросрочена = (НачалоДня(ТекДатаРасхода) <= ТекущаяДата());
			СтрокиОбозначение = ТабОбозначенияПоСтатусамОплаты.НайтиСтроки(Новый Структура("СтатусОплаты, ОплатаПросрочена, ПометкаУдаления", ТекСтатусОплаты, ОплатаПросрочена, ТекДанные.ПометкаУдаления));
			Если СтрокиОбозначение.Количество() > 0 Тогда
				Обозначение = Новый Структура("Красный, Зеленый, Синий", СтрокиОбозначение[0].Красный, СтрокиОбозначение[0].Зеленый, СтрокиОбозначение[0].Синий);	
			КонецЕсли;
			
		КонецЕсли;
		
		//Обозначение = ОбщиеПроцедуры.ПолучитьОбозначениеДокументаПоСтатусуОплаты(ТекСтатусОплаты, ТекДанные.ПометкаУдаления, ТекДанные.ДатаРасхода);
		
		Если ВиденСтатусОтправкиВБанк Тогда
			
			Если НЕ Строка = Неопределено Тогда
				ТекСтатусОтправкиВБанк = ОбщиеПроцедуры.ПолучитьСтатусОтправкиВБанк(СуммаДокумента, Строка.Отправлено);
			Иначе
				ТекСтатусОтправкиВБанк = ОбщиеПроцедуры.ПолучитьСтатусОтправкиВБанк(СуммаДокумента, 0);
			КонецЕсли;
			
			ОформлениеСтроки.Ячейки.СтатусОтправкиВБанк.УстановитьТекст(ТекСтатусОтправкиВБанк);
			
		КонецЕсли;
		
		//
		ОбозначениеСтроки = Неопределено;
		Если ВиденСтатус Тогда
			СтрокаОбозначениеСтроки = ТабОбозначенияПоСтатусам.Найти(ТекДанные.Статус, "Статус");
			Если НЕ СтрокаОбозначениеСтроки = Неопределено Тогда
				ОбозначениеСтроки  = Новый Структура("Красный, Зеленый, Синий", СтрокаОбозначениеСтроки.Красный, СтрокаОбозначениеСтроки.Зеленый, СтрокаОбозначениеСтроки.Синий);	
			КонецЕсли;	
		КонецЕсли;	
		
		//ОбозначениеСтроки = ОбщиеПроцедуры.ПолучитьОбозначениеДокументаПоСтатусу(ТекДанные.Статус);	
		Если Обозначение <> Неопределено
				И ОбозначениеСтроки <> Неопределено Тогда
			//Если Не ОплатаПросрочена Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(ОбозначениеСтроки.Красный, ОбозначениеСтроки.Зеленый, ОбозначениеСтроки.Синий);
			//Иначе
			//	ОформлениеСтроки.ЦветФона = Новый Цвет(Обозначение.Красный, Обозначение.Зеленый, Обозначение.Синий);
			//КонецЕсли;
		КонецЕсли;
		
		Если Обозначение <> Неопределено Тогда
			//ОформлениеСтроки.Ячейки.СтатусОплаты.ЦветФона = Новый Цвет(Обозначение.Красный, Обозначение.Зеленый, Обозначение.Синий);
			ОформлениеСтроки.ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;
		
		Если СтрокаРеквизиты.АкцептованыВсеСтроки
				И ВиденСтатус
				И НЕ ТекДанные.Статус = мСтатусАкцептована Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255, 240, 200); // светло-оранжевый
		КонецЕсли;
		
		//
		ДокументСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ТекДанные);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументСписокОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	УстановитьОтбор();
	
КонецПроцедуры


Процедура КонтекстноеМенюИтогоПоКолонке(Кнопка)
	
	ТекущаяКолонка = ЭлементыФормы.ДокументСписок.ТекущаяКолонка;
	
	Если ТекущаяКолонка <> Неопределено Тогда
		
		ИмяКолонки = ТекущаяКолонка.Имя;
		
		Если НЕ ИмяКолонки = "СуммаДокумента" Тогда
			
			Предупреждение("По выбранной колонке итоги не рассчитываются");
			Возврат;
			
		КонецЕсли;
		
		ПостроительЗапроса = Новый ПостроительЗапроса();
		
		ПостроительЗапроса.Текст =
		
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредств.Ссылка,
		|	ЗаявкаНаРасходованиеСредств.ВерсияДанных,
		|	ЗаявкаНаРасходованиеСредств.ПометкаУдаления,
		|	ЗаявкаНаРасходованиеСредств.Номер,
		|	ЗаявкаНаРасходованиеСредств.Дата,
		|	ЗаявкаНаРасходованиеСредств.Проведен,
		|	ЗаявкаНаРасходованиеСредств.Контрагент,
		|	ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента,
		|	ЗаявкаНаРасходованиеСредств.Комментарий,
		|	ЗаявкаНаРасходованиеСредств.Ответственный,
		|	ЗаявкаНаРасходованиеСредств.СуммаДокумента,
		|	ЗаявкаНаРасходованиеСредств.Организация,
		|	ЗаявкаНаРасходованиеСредств.Статус,
		|	ЗаявкаНаРасходованиеСредств.ДатаРасхода,
		|	ЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкаНаРасходованиеСредств.ФормаОплаты,
		|	ЗаявкаНаРасходованиеСредств.БанковскийСчетКасса,
		|	ЗаявкаНаРасходованиеСредств.ВсеДокументыВНаличии,
		|	ЗаявкаНаРасходованиеСредств.ЦФО,
		|	ЗаявкаНаРасходованиеСредств.СтавкаНДС,
		|	ЗаявкаНаРасходованиеСредств.СуммаНДС,
		|	ЗаявкаНаРасходованиеСредств.НазначениеПлатежа,
		|	ЗаявкаНаРасходованиеСредств.ПринятоКОплате,
		|	ЗаявкаНаРасходованиеСредств.ТорговыеТочкиСписок,
		|	ЗаявкаНаРасходованиеСредств.КоличествоТорговыхТочек,
		|	ЗаявкаНаРасходованиеСредств.ИмяФайла,
		|	ЗаявкаНаРасходованиеСредств.СчетНаОплату,
		|	ЗаявкаНаРасходованиеСредств.РасходнаяНакладная,
		|	ЗаявкаНаРасходованиеСредств.АктОбОказанииУслуг,
		|	ЗаявкаНаРасходованиеСредств.СчетФактураПолученный,
		|	ЗаявкаНаРасходованиеСредств.СчетНаОплатуИмяФайла,
		|	ЗаявкаНаРасходованиеСредств.РасходнаяНакладнаяИмяФайла,
		|	ЗаявкаНаРасходованиеСредств.АктОбОказанииУслугИмяФайла,
		|	ЗаявкаНаРасходованиеСредств.СчетФактураПолученныйИмяФайла,
		|	ЗаявкаНаРасходованиеСредств.НачалоПериодаАренды,
		|	ЗаявкаНаРасходованиеСредств.КонецПериодаАренды,
		|	ЗаявкаНаРасходованиеСредств.КонтрагентПоАренде,
		|	ЗаявкаНаРасходованиеСредств.СчетЗатрат,
		|	ЗаявкаНаРасходованиеСредств.Субконто1,
		|	ЗаявкаНаРасходованиеСредств.Субконто2,
		|	ЗаявкаНаРасходованиеСредств.Субконто3,
		|	ЗаявкаНаРасходованиеСредств.УведомлениеОтветственномуОтправлено,
		|	ЗаявкаНаРасходованиеСредств.ВнешнееФизЛицоФамилия,
		|	ЗаявкаНаРасходованиеСредств.ВнешнееФизЛицоИмя,
		|	ЗаявкаНаРасходованиеСредств.ВнешнееФизЛицоОтчество,
		|	ЗаявкаНаРасходованиеСредств.Пояснение,
		|	ЗаявкаНаРасходованиеСредств.АкцептованыВсеСтроки
		|{ВЫБРАТЬ
		|	Ссылка.*,
		|	ВерсияДанных,
		|	ПометкаУдаления,
		|	Номер,
		|	Дата,
		|	Проведен,
		|	Контрагент.*,
		|	ДоговорКонтрагента.*,
		|	Комментарий,
		|	Ответственный.*,
		|	СуммаДокумента,
		|	Организация.*,
		|	Статус.*,
		|	ДатаРасхода,
		|	СтатьяДвиженияДенежныхСредств.*,
		|	ФормаОплаты.*,
		|	БанковскийСчетКасса.*,
		|	ВсеДокументыВНаличии,
		|	ЦФО.*,
		|	СтавкаНДС.*,
		|	СуммаНДС,
		|	НазначениеПлатежа,
		|	ПринятоКОплате,
		|	ТорговыеТочкиСписок,
		|	КоличествоТорговыхТочек,
		|	ИмяФайла,
		|	СчетНаОплату,
		|	РасходнаяНакладная,
		|	АктОбОказанииУслуг,
		|	СчетФактураПолученный,
		|	СчетНаОплатуИмяФайла,
		|	РасходнаяНакладнаяИмяФайла,
		|	АктОбОказанииУслугИмяФайла,
		|	СчетФактураПолученныйИмяФайла,
		|	НачалоПериодаАренды,
		|	КонецПериодаАренды,
		|	КонтрагентПоАренде.*,
		|	СчетЗатрат.*,
		|	Субконто1.*,
		|	Субконто2.*,
		|	Субконто3.*,
		|	УведомлениеОтветственномуОтправлено,
		|	ВнешнееФизЛицоФамилия,
		|	ВнешнееФизЛицоИмя,
		|	ВнешнееФизЛицоОтчество,
		|	Пояснение,
		|	АкцептованыВсеСтроки}
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств";
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		Для Каждого СтрОтбор Из ДокументСписок.Отбор Цикл
			
			Если СтрОтбор.Использование Тогда
				
				Если ПостроительЗапроса.Отбор.ПолучитьДоступныеПоля().Найти(СтрОтбор.Имя) <> Неопределено Тогда
					
					ПостроительЗапроса.Отбор.Добавить(СтрОтбор.Имя);
					ПостроительЗапроса.Отбор[СтрОтбор.Имя].ВидСравнения = СтрОтбор.ВидСравнения;
					ПостроительЗапроса.Отбор[СтрОтбор.Имя].Использование = Истина;
					ПостроительЗапроса.Отбор[СтрОтбор.Имя].Значение 	= СтрОтбор.Значение;
					ПостроительЗапроса.Отбор[СтрОтбор.Имя].ЗначениеС 	= СтрОтбор.ЗначениеС;
					ПостроительЗапроса.Отбор[СтрОтбор.Имя].ЗначениеПо 	= СтрОтбор.ЗначениеПо;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПостроительЗапроса.Выполнить();
		ИтогПоКолонке = ПостроительЗапроса.Результат.Выгрузить().Итог(ИмяКолонки);
		
		Предупреждение("Итого: " + Формат(ИтогПоКолонке, "ЧДЦ=2"),, "");
		
	Иначе
		Предупреждение("Не выбрана колонка для рассчета итога!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыКонтрольДЗ(Кнопка)
	МассивСсылок = Новый Массив;
	Для Каждого Строка из ЭлементыФормы.ДокументСписок.ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(Строка.Ссылка);
	КонецЦикла;
	ОткрытьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ",Новый Структура("СписокДокументов",МассивСсылок),ЭтаФорма,Новый УникальныйИдентификатор);

КонецПроцедуры


ЭлементыФормы.СтатусОплаты.СписокВыбора.Добавить(Перечисления.СтатусыОплаты.ПолностьюОплачено);
ЭлементыФормы.СтатусОплаты.СписокВыбора.Добавить(Перечисления.СтатусыОплаты.НеОплачено);
