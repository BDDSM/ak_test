
Перем ОтправляемУведомление;
Перем ОтправлятьУведомлениеОтветственному;
Перем ТЗДанныеПользователя;
Перем НеКонтролироватьУсловия;
//Перем ПредыдущееЗначениеПериода;
Перем ТекОбязПояснения;
Перем ТекСтатус Экспорт;
Перем мПроведение;

Перем ОперацияАпдекс; //+++АК sils 07.06.2018 ИП-00018876

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, Ссылка, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	
	ИсторияИзменений = Отчеты.ИсторияИзмененийОбъектов.Создать();
	ИсторияИзменений.СсылкаНаОбъект = Ссылка;
	
	Форма = ИсторияИзменений.ПолучитьФорму("ФормаОтчета");
	Форма.СформироватьТаблицуВерсий();
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтправитьУведомление(Кнопка)
	
	//Попытка
		УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявкеОшибка(Ссылка);
	//Исключение
	//	Сообщить("Не удалось отправить уведомление о создании новой заявки. Обратитесь к администратору!", СтатусСообщения.Важное);
	//КонецПопытки;  	
	//
КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьЗаявки(Кнопка)
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(ЭтотОбъект.Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Попытка
				ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ТабДокумент = Документы.ЗаявкаНаРасходованиеСредств.ПечатьЗаявки(ЭтотОбъект.Ссылка);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 0, Ложь, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьПлатежныхПоручений(Кнопка)
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(ЭтотОбъект.Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	
	ТабДокумент = Документы.ЗаявкаНаРасходованиеСредств.ПечатьПлатежныхПоручений(ЭтотОбъект.Ссылка);
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 0, Ложь, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), ЭтотОбъект.Ссылка);
	
КонецПроцедуры


Процедура ВвестиНаОснованииРасходИзБанка(Кнопка)
	
	обДок = Документы.РасходИзБанка.СоздатьДокумент();
	обДок.Заполнить(ЭтотОбъект.Ссылка);

	обФормаДокумента = обДок.ПолучитьФорму();
	обФормаДокумента.ПараметрОснование = ЭтотОбъект.Ссылка;
	обФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииРасходИзКассы(Кнопка)
	
	обДок = Документы.РасходИзКассы.СоздатьДокумент();
	обДок.Заполнить(ЭтотОбъект.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииНачислениеЗарплаты(Кнопка)
	
	обДок = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
	обДок.Заполнить(ЭтотОбъект.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииПоступлениеТоваровУслуг(Кнопка)
	
	обДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	обДок.Заполнить(ЭтотОбъект.Ссылка);
	обДок.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ВвестиНаОснованииЗадачуИсполнителя(Кнопка)
	
	Задача=Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Заполнить(ЭтотОбъект.Ссылка);
 	Задача.ПолучитьФорму().Открыть();
	
КонецПроцедуры


Процедура УстановитьКнопкиВводаНаОсновании()
	
	спПодменю = Новый СписокЗначений;
	спПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.ВвестиНаОсновании);
	спПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ВвестиНаОсновании);
	
	Для Каждого Элемент Из спПодменю Цикл
		Для Каждого Кнопка Из Элемент.Значение.Кнопки Цикл
			Если Кнопка.Имя = "Действие" Тогда
			
				Продолжить;
			
			КонецЕсли;
			Элемент.Значение.Кнопки.Удалить(Кнопка);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элемент Из спПодменю Цикл
		Попытка
			Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
				Элемент.Значение.Кнопки.Добавить("РасходИзБанка", ТипКнопкиКоманднойПанели.Действие, "Расход из банка", Новый Действие("ВвестиНаОснованииРасходИзБанка"));
			ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
				Элемент.Значение.Кнопки.Добавить("РасходИзКассы", ТипКнопкиКоманднойПанели.Действие, "Расход из кассы", Новый Действие("ВвестиНаОснованииРасходИзКассы"));
			КонецЕсли;
			Если ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
				МассивСтатейДДС = ДопМодульСервер.ПолучитьСтатьиДДСОплатаЗП();
				Если НЕ МассивСтатейДДС.Найти(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) = Неопределено Тогда
					Элемент.Значение.Кнопки.Добавить("НачислениеЗарплатыРаботникамОрганизаций", ТипКнопкиКоманднойПанели.Действие,
												"Начисление зарплаты работникам организаций", Новый Действие("ВвестиНаОснованииНачислениеЗарплаты"));
				КонецЕсли;
			КонецЕсли;
		
			Элемент.Значение.Кнопки.Добавить("ПоступлениеТоваровУслуг", ТипКнопкиКоманднойПанели.Действие, "Поступление товаров и услуг", Новый Действие("ВвестиНаОснованииПоступлениеТоваровУслуг"));
			//АК БЕЛН 13.04.2016++
			Элемент.Значение.Кнопки.Добавить("ПоступлениеТоваровУслугОборуд", ТипКнопкиКоманднойПанели.Действие, "Поступление оборудования", Новый Действие("ДействияФормыПоступлениеТоваровИУслугОборудование"));
			//АК БЕЛН 13.04.2016--
			Элемент.Значение.Кнопки.Добавить("ЗадачаИсполнителя", ТипКнопкиКоманднойПанели.Действие, "Задача исполнителя", Новый Действие("ВвестиНаОснованииЗадачуИсполнителя"));
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНадписьЛимитПоСтатьеДДС()
	
	Если НЕ ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		ЭлементыФормы.ЛимитПоСтатьеДДС.Заголовок 	= "Не указана статья ДДС";
		ЭлементыФормы.ЛимитПоСтатьеДДС.ЦветТекста 	= WebЦвета.Красный;
	ИначеЕсли СтатьяДвиженияДенежныхСредств.НеУчаствуетВБДР Тогда
		ЭлементыФормы.ЛимитПоСтатьеДДС.ЦветТекста 	= WebЦвета.Черный;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ДатаРасхода));
	
	//+++АК SUVV 2018.03.01 ИП-00017818
	//пСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
	пСтатьяДР = ОбщиеПроцедуры.ПолучитьСтатьюДРПоСтатьеДДС(Дата, СтатьяДвиженияДенежныхСредств);
	//---АК SUVV
	
	Если НЕ ЗначениеЗаполнено(пСтатьяДР) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для указанной статьи ДДС <" + СтатьяДвиженияДенежныхСредств + "> не найдена соответствующая статья ДР");
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатьяДР", пСтатьяДР);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.Сумма), 0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		БюджетДоходовИРасходов.Сумма КАК Сумма
	|	ИЗ
	|		РегистрНакопления.БюджетДоходовИРасходов КАК БюджетДоходовИРасходов
	|	ГДЕ
	|		БюджетДоходовИРасходов.СтатьяДР = &СтатьяДР
	|		И БюджетДоходовИРасходов.Период = &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ИсполнениеБюджетаДоходовИРасходов.Сумма
	|	ИЗ
	|		РегистрНакопления.ИсполнениеБюджетаДоходовИРасходов КАК ИсполнениеБюджетаДоходовИРасходов
	|	ГДЕ
	|		ИсполнениеБюджетаДоходовИРасходов.СтатьяДР = &СтатьяДР
	|		И НАЧАЛОПЕРИОДА(ИсполнениеБюджетаДоходовИРасходов.Период, МЕСЯЦ) = &Период) КАК ВложенныйЗапрос";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		пЛимит = Выборка.Сумма;
	Иначе
		пЛимит = 0;
	КонецЕсли;
	ЭлементыФормы.ЛимитПоСтатьеДДС.Заголовок = "Лимит по статье ДДС: " + Формат(пЛимит, "ЧДЦ=2");
	Если ЭтоНовый()
			И -пЛимит - СуммаДокумента < 0 Тогда
		ЭлементыФормы.ЛимитПоСтатьеДДС.Заголовок = ЭлементыФормы.ЛимитПоСтатьеДДС.Заголовок + ". Превышение лимита на: " + Формат(-пЛимит - СуммаДокумента, "ЧДЦ=2");
		ЭлементыФормы.ЛимитПоСтатьеДДС.ЦветТекста = WebЦвета.Красный;
	Иначе
		ЭлементыФормы.ЛимитПоСтатьеДДС.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНадписьЗадолженность()
	
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("Строка")
			ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		ЭлементыФормы.НадписьЗадолженность.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	МассивСчетов = Новый Массив;
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками); 		// 60
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателями); 					// 62
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками); // 76.1
	Иначе
		МассивСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПодотчетными); 					// 71
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("Субконто1"	, ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Субконто2"	, ЭтотОбъект.Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФинансовыйОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.Остатки(
	|			,
	|			Счет В ИЕРАРХИИ (&МассивСчетов),
	|			,
	|			Субконто1 = &Субконто1
	|				И Субконто2 = &Субконто2) КАК ФинансовыйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Остаток > 0 Тогда
			ЭлементыФормы.НадписьЗадолженность.Заголовок 	= "Нам должны " + Формат(Выборка.Остаток, "ЧГ=");
			ЭлементыФормы.НадписьЗадолженность.ЦветТекста 	= WebЦвета.Красный;
		ИначеЕсли Выборка.Остаток < 0 Тогда
			ЭлементыФормы.НадписьЗадолженность.Заголовок 	= "Мы должны " + Формат(-Выборка.Остаток, "ЧГ=");
			ЭлементыФормы.НадписьЗадолженность.ЦветТекста 	= WebЦвета.Черный;
		Иначе
			ЭлементыФормы.НадписьЗадолженность.Заголовок = "";
		КонецЕсли;
	Иначе
		ЭлементыФормы.НадписьЗадолженность.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоАкцептованияПоСтатьеДДС(пСтатьяДвиженияДенежныхСредств)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяДДС"	, пСтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	РегистрСведений.ПраваНаАкцептованиеЗаявокПоСтатьямДДС КАК ПраваНаАкцептованиеЗаявокПоСтатьямДДС
	|ГДЕ
	|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств В
	|			(ВЫБРАТЬ
	|				СтатьиДвиженияДенежныхСредств.Ссылка
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				СтатьиДвиженияДенежныхСредств.Ссылка = &СтатьяДДС
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				СтатьиДвиженияДенежныхСредств.Родитель
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				СтатьиДвиженияДенежныхСредств.Ссылка = &СтатьяДДС
	|				И СтатьиДвиженияДенежныхСредств.Родитель <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				СтатьиДвиженияДенежныхСредств.Родитель.Родитель
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				СтатьиДвиженияДенежныхСредств.Ссылка = &СтатьяДДС
	|				И СтатьиДвиженияДенежныхСредств.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				СтатьиДвиженияДенежныхСредств.Родитель.Родитель.Родитель
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				СтатьиДвиженияДенежныхСредств.Ссылка = &СтатьяДДС
	|				И СтатьиДвиженияДенежныхСредств.Родитель.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				СтатьиДвиженияДенежныхСредств.Родитель.Родитель.Родитель.Родитель
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				СтатьиДвиженияДенежныхСредств.Ссылка = &СтатьяДДС
	|				И СтатьиДвиженияДенежныхСредств.Родитель.Родитель.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|	И ПраваНаАкцептованиеЗаявокПоСтатьямДДС.Пользователь = &Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьДанныеТекПользователя()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Дата"		, Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиПоЦФОСрезПоследних.ЦФО,
	|	ПользователиПоЦФОСрезПоследних.РуководительОтдела,
	|	ПользователиПоЦФОСрезПоследних.РуководительОтдела КАК Управляющий
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&Дата, Сотрудник = &Пользователь) КАК ПользователиПоЦФОСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних(&Дата, Сотрудник = &Пользователь) КАК ПользователиПоЦФОСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&Дата, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО ПользователиПоЦФОСрезПоследних.ЦФО = ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО
	|ГДЕ
	|	ПользователиПоЦФОСрезПоследних.РуководительОтдела";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПользовательРуководительОтдела(пЦФО)
	
	Для Каждого Строка Из ТЗДанныеПользователя Цикл
		Если Строка.ЦФО = пЦФО
				И Строка.РуководительОтдела Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
                                               
Функция ПользовательУправляющий(пТорговаяТочка)
	
	Для Каждого Строка Из ТЗДанныеПользователя Цикл
		Если Строка.ЦФО = пТорговаяТочка
				И Строка.Управляющий Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПоискДублейСтрокВТабЧастиТТ(ТЧ, Отказ) Экспорт	
	
	Если Тип(ТЧ) = Тип("ТаблицаЗначений") Тогда
		ТаблЗнач = ТЧ;
	Иначе
		ТаблЗнач = ТЧ.Выгрузить();
	КонецЕсли;
	
	Отбор = Новый Структура("ТорговаяТочка");
	
	Для каждого Стр Из ТаблЗнач Цикл	
		Строки = ТаблЗнач.НайтиСтроки(Отбор);
		Если Строки.Количество() > 1 Тогда
			Для каждого НайденныеСтроки Из Строки Цикл
				Если Строки.Найти(НайденныеСтроки) > 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Ошибка! Торговая точка в строке № " + Строки[0].НомерСтроки + " совпадает торговой точкой в строке № " + НайденныеСтроки.НомерСтроки);
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЗадачуПоДокументу(пДокумент, пВидЗадачи, пИсполнитель,ЭтоЗайм=Ложь)
	
	//Если пИсполнитель = Справочники.Пользователи.НайтиПоНаименованию("Бородина Юлия") Тогда
	//	Возврат;
	//КонецЕсли;
	
	//mind доработал 2017-04-27
	Если ЗначениеЗаполнено(пИсполнитель)
		И пИсполнитель.НеСоздаватьЗаданияПоЗаявкамНаРасходование Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектЗадачи", пДокумент);
	Запрос.УстановитьПараметр("Исполнитель"	, пИсполнитель);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.ОбъектЗадачи = &ОбъектЗадачи
	|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда	
		обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		обЗадача.Дата 			= ТекущаяДата();
		обЗадача.ВидЗадачи 		= пВидЗадачи;
		обЗадача.ОбъектЗадачи 	= пДокумент;
		обЗадача.Ответственный 	= Ответственный;	
		обЗадача.Исполнитель 	= пИсполнитель;	
		обЗадача.Организация 	= пДокумент.Организация;
		обЗадача.Оповещение 	= Истина;
		обЗадача.СрокИсполнения = НачалоДня(ТекущаяДата());
		обЗадача.СрокОповещения = НачалоДня(ТекущаяДата());
		Если ЭтоЗайм Тогда
			обЗадача.Наименование 	= "Создана новая заявка на выдачу займа " + пДокумент + ".";
		Иначе	
			обЗадача.Наименование 	= "Создана новая заявка по вашей ТТ " + пДокумент + ", просьба акцептовать заявку";
		КонецЕсли;
		обЗадача.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНазначениеПлатежа()
	
	Если (СокрЛП(ЭтотОбъект.НазначениеПлатежа) <> "")
			И (СокрЛП(НРег(ЭтотОбъект.НазначениеПлатежа)) <> "оплата по") Тогда
		Если Вопрос("Изменить назначение платежа автоматически?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если СтатьяДвиженияДенежныхСредств.Код = "310310"
			И ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЭтотОбъект.НазначениеПлатежа = "Выдача денежных средств под отчет";
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭтотОбъект.НазначениеПлатежа = "Оплата по " + ДоговорКонтрагента.Номер + " от " + Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
	Иначе
		ЭтотОбъект.НазначениеПлатежа = "Оплата по ";
	КонецЕсли;
	
	НазначениеПлатежаПриИзменении(Неопределено);
	
КонецПроцедуры

Функция ПолучитьСписокВыбораПериодТТ(ГодДаты)
	
	пСписок = Новый СписокЗначений;
	
    пСписок.Добавить(Формат(ГодДаты - 1, "ЧГ=0")); //для смены года
    Для к = 1 По 12  Цикл
        СформДата = Дата(ГодДаты, к, 1);
        Наим = Формат(СформДата, "ДФ = ММММ_гггг");
        Наим = СтрЗаменить(Наим, "_", " ");
        пСписок.Добавить(Наим);    
    КонецЦикла;
    пСписок.Добавить(Формат(ГодДаты + 1, "ЧГ=0")); //для смены года
	
	Возврат пСписок;
	
КонецФункции

Функция МожноУстановитьДатуКакДатуРасхода(ДатаВыполняемойПроверки)
	
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеПроверятьДатуРасходаВЗаявкеНаРасходование Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДеньНедели(ДатаВыполняемойПроверки) = 2
			ИЛИ ДеньНедели(ДатаВыполняемойПроверки) = 4 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(ДатаВыполняемойПроверки));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = &ДатаКалендаря
		|	И РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
					   
		Результат = Запрос.Выполнить();
		Возврат НЕ Результат.Пустой();
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

Процедура УстановитьОтборПоЗадачам()
	
	//ЗадачиПоЗаявке.Отбор.ОбъектЗадачи.Значение = Ссылка;
	//ЗадачиПоЗаявке.Отбор.ОбъектЗадачи.Использование = Истина;
	//ЗадачиПоЗаявке.Обновить();
	
	ЭлПисьма.Отбор.ОснованиеПисьма.Значение = Ссылка;
	ЭлПисьма.Отбор.ОснованиеПисьма.Использование = Истина;
	ЭлПисьма.Обновить();
	
КонецПроцедуры

Процедура УстановитьДоговор()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Контрагент"	, ЭтотОбъект.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Наименование = ""Основной договор""
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДоговорыКонтрагентов.Дата УБЫВ,
	|	ДоговорыКонтрагентов.Код УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтотОбъект.ДоговорКонтрагента = Выборка.Ссылка;
	КонецЕсли;
	 
КонецПроцедуры

Процедура УстановитьВидимость()
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичные
			И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		//ЭлементыФормы.ДоговорКонтрагента.Видимость = Истина;
		//ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Истина;
		ЭлементыФормы.ПанельПолучателя.ТекущаяСтраница = ЭлементыФормы.ПанельПолучателя.Страницы.СтраницаДоговор;
		ЭлементыФормы.СтавкаНДС.Видимость 			= Истина;
		ЭлементыФормы.НадписьСтавкаНДС.Видимость 	= Истина;
		ЭлементыФормы.СуммаНДС.Видимость 			= Истина;
		ЭлементыФормы.НадписьСуммаНДС.Видимость 	= Истина;
	Иначе
		//ЭлементыФормы.ДоговорКонтрагента.Видимость = Ложь;
		//ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = Ложь;
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
			ЭлементыФормы.ПанельПолучателя.ТекущаяСтраница = ЭлементыФормы.ПанельПолучателя.Страницы.СтраницаФИО;
		ИначеЕсли СтатьяДвиженияДенежныхСредств.Код = "131010" Тогда                                     
			ЭлементыФормы.ПанельПолучателя.ТекущаяСтраница = ЭлементыФормы.ПанельПолучателя.Страницы.СтраницаДоговор;
		Иначе
			ЭлементыФормы.ПанельПолучателя.ТекущаяСтраница = ЭлементыФормы.ПанельПолучателя.Страницы.СтраницаПустая;
		КонецЕсли;	
		ЭлементыФормы.СтавкаНДС.Видимость 			= Ложь;
		ЭлементыФормы.НадписьСтавкаНДС.Видимость 	= Ложь;
		ЭлементыФормы.СуммаНДС.Видимость 			= Ложь;
		ЭлементыФормы.НадписьСуммаНДС.Видимость 	= Ложь;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
		ЭлементыФормы.БанковскийСчетКасса.ОграничениеТипа 		= Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		ЭлементыФормы.СчетНаОплату.АвтоОтметкаНезаполненного 	= Истина;
	Иначе
		ЭлементыФормы.БанковскийСчетКасса.ОграничениеТипа 		= Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		ЭлементыФормы.СчетНаОплату.АвтоОтметкаНезаполненного 	= Ложь;
	КонецЕсли;
	
	Если СтатьяДвиженияДенежныхСредств.Код = "131010"                                     
			//ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011"
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135012"
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "132010" 		// Оплата за доставку транспорт Строгино
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "132020" 		// Оплата за доставку транспорт Марьино
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135010" 		// Оплата Аренда склада Марьино +доп. Расходы
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135011" Тогда 	// Оплата Аренда склада Строгино + доп. Расходы
		ЭлементыФормы.НачалоПериодаАренды.Видимость 		= Истина;
		ЭлементыФормы.НадписьНачалоПериодаАренды.Видимость 	= Истина;
		ЭлементыФормы.КонецПериодаАренды.Видимость 			= Истина;
		ЭлементыФормы.НадписьКонецПериодаАренды.Видимость 	= Истина;
		ЭлементыФормы.ВвестиНачисление.Видимость = (ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть);
	Иначе
		ЭлементыФормы.НачалоПериодаАренды.Видимость 		= Ложь;
		ЭлементыФормы.НадписьНачалоПериодаАренды.Видимость 	= Ложь;
		ЭлементыФормы.КонецПериодаАренды.Видимость 			= Ложь;
		ЭлементыФормы.НадписьКонецПериодаАренды.Видимость 	= Ложь;
		ЭлементыФормы.ВвестиНачисление.Видимость = Ложь;
	КонецЕсли;
	
	Если СтатьяДвиженияДенежныхСредств.Код = "139311"                                     
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "139313" Тогда
		ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного	= Ложь;
	Иначе
		ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного	= Истина;
	КонецЕсли;
	
	Если (СтатьяДвиженияДенежныхСредств.Код = "131010"
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011"
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "141023") //Оплата расходов на проект "Общественный контроль" (оплата УЕК)
			И ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЭлементыФормы.КонтрагентПоАренде.Видимость 			= Истина;
		ЭлементыФормы.НадписьКонтрагентПоАренде.Видимость 	= Истина;
	Иначе
		ЭлементыФормы.КонтрагентПоАренде.Видимость 			= Ложь;
		ЭлементыФормы.НадписьКонтрагентПоАренде.Видимость 	= Ложь;
	КонецЕсли;
	
	Если СтатьяДвиженияДенежныхСредств.Код = "310310" //Выдача займов
			ИЛИ (СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствНаличные
					И ФормаОплаты = Перечисления.ФормыОплаты.Наличные)
			ИЛИ (СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствБезналичные
					И ФормаОплаты = Перечисления.ФормыОплаты.Безналичные) Тогда
		ЭлементыФормы.ТорговыеТочки.ТолькоПросмотр = Истина;	
	Иначе
		ЭлементыФормы.ТорговыеТочки.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ПринятоКОплате.Доступность 		= РольДоступна("ПравоПринятияКОплатеЗаявокНаРасходованиеСредств") и Не НастройкаПравДоступа.ДокументВЗакрытомПериоде(ЭтотОбъект);
	//ЭлементыФормы.ВсеДокументыВНаличии.Доступность 	= РольДоступна("ПравоУказанияДокументовВЗаявкахНаРасходование");
	//АК БЕЛН 28.03.2016++
	ЭлементыФормы.СтатусПолученныхДокументов.Доступность 	= РольДоступна("ПравоУказанияДокументовВЗаявкахНаРасходование");
	//АК БЕЛН 28.03.2016--
	Если (ПринятоКОплате
	//АК БЕЛН 29.08.2016++
	ИЛИ Статус=Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована	
	//АК БЕЛН 29.08.2016++
	ИЛИ (ОдобреноАкцептантом И НЕ (ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) ИЛИ НеКонтролироватьУсловия)))
			И НЕ РольДоступна("ПравоПринятияКОплатеЗаявокНаРасходованиеСредств") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если СтатьяДвиженияДенежныхСредств.Код = "310310" Тогда //Выдача займов
		ЭлементыФормы.ПанельПлатежи.Страницы.Займ.Видимость=Истина;
	Иначе	
		ЭлементыФормы.ПанельПлатежи.Страницы.Займ.Видимость=Ложь;
	КонецЕсли;
	
	ВсеАкцептованы = Истина;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		Если НЕ СтрокаТЧ.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			ВсеАкцептованы = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВсеАкцептованы Тогда
		ЭлементыФормы.Статус.ТолькоПросмотр = (ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована)
												ИЛИ НЕ НеКонтролироватьУсловия;//Истина;
		ЭлементыФормы.ОдобреноАкцептантом.Доступность = НЕ (ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована)
												ИЛИ НЕ НеКонтролироватьУсловия;
	Иначе
		////ЭлементыФормы.Статус.Доступность = ПользовательРуководительОтдела(ЦФО);
		//ЭлементыФормы.Статус.ТолькоПросмотр = (НЕ ПользовательРуководительОтдела(ЦФО))
		//										И (НЕ ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств))
		//										И НЕ РольДоступна("ПравоАкцептованияВсехЗаявокНаРасходованиеСредств");
		//ЭлементыФормы.Статус.ТолькоПросмотр =
		//		НЕ (СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Демниченко Наталия"
		//			ИЛИ (СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Андросова Ирина"
		//					И (СтатьяДвиженияДенежныхСредств.Код = "131010" 			// Оплата аренды (торговых точек и магазинов)
		//						ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011")));	// Оплата депозита за аренду (торговых точек и магазинов)
		ЭлементыФормы.Статус.ТолькоПросмотр = НЕ (ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) ИЛИ НеКонтролироватьУсловия);
		ЭлементыФормы.ОдобреноАкцептантом.Доступность = (ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) ИЛИ НеКонтролироватьУсловия);
	КонецЕсли;

	мКолонкиТТ = ЭлементыФормы.ТорговыеТочки.Колонки;
	Если СтатьяДвиженияДенежныхСредств.Код = "120610"				// Оплата промоутера
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200701" Тогда 	// Оплата промоутера для открытия ТТ
			//ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200702" 	// Оплата листовок для открытия ТТ
			//ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200703" 	// Оплата оформления для открытия ТТ
		мКолонкиТТ.НачалоПериода.Видимость 	= Истина;             
		мКолонкиТТ.КонецПериода.Видимость 	= Истина;
		//мКолонкиТТ.ФИОПолучателя.Видимость = Истина;
		//Если Контрагент = "Стороннее физическое лицо" Тогда
		мКолонкиТТ.ФИОПолучателя.Видимость 	= Ложь;
		//КонецЕсли;	
	ИначеЕсли СтатьяДвиженияДенежныхСредств.Код = "200702" 			// Оплата листовок для открытия ТТ
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200703" 		// Оплата оформления для открытия ТТ
			//ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200701" 		// Оплата промоутера для открытия ТТ
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "134010" Тогда 	// Оплата Зарплаты (Зарплата Управления расчета заказов)
		мКолонкиТТ.НачалоПериода.Видимость 	= Ложь;
		мКолонкиТТ.КонецПериода.Видимость 	= Ложь;
		//мКолонкиТТ.ФИОПолучателя.Видимость = Истина;
		//Если Контрагент = "Стороннее физическое лицо" Тогда
		мКолонкиТТ.ФИОПолучателя.Видимость 	= Ложь;
		//КонецЕсли;
	Иначе
		мКолонкиТТ.НачалоПериода.Видимость 	= Ложь;
		мКолонкиТТ.КонецПериода.Видимость 	= Ложь;
		мКолонкиТТ.ФИОПолучателя.Видимость 	= Ложь;
	КонецЕсли;
	
	Если СтатьяДвиженияДенежныхСредств.Код = "139311" Тогда
		ЭлементыФормы.НадписьДатаФальшивки.Видимость = Истина;
		ЭлементыФормы.ДатаФальшивки.Видимость = Истина;
	Иначе
		ЭлементыФормы.НадписьДатаФальшивки.Видимость = Ложь;
        ЭлементыФормы.ДатаФальшивки.Видимость = Ложь;  
	КонецЕсли;
	
	//+++АК GEYV 30.07.2015
	СтатьяДДСКомандировка = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("136198");
	
	ЕстьСтатьяКомандировки = СтатьяДвиженияДенежныхСредств = СтатьяДДСКомандировка;
	
	ТекстПриказНаКомандировку = "Приказ на командировку не создан!!!(Для создания нажмите на текст)";
	
	Если ЕстьСтатьяКомандировки Тогда
		
		ПоискПриказНаКомандировку = ОбщегоНазначения.ВернутьДокументПриказНаКомандировку(Ссылка);
		
		Если ПоискПриказНаКомандировку = Неопределено Тогда
		
		
		Иначе
		
			ТекстПриказНаКомандировку = Строка(ПоискПриказНаКомандировку);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьПриказНаКомандировку.Видимость = ЕстьСтатьяКомандировки;
	ЭлементыФормы.НадписьПриказНаКомандировку.Заголовок = ТекстПриказНаКомандировку;
	//---АК
	
КонецПроцедуры

Процедура УстановитьДоступностьБанковскогоСчетаПолучателя()
	
	мДоступность = (ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные
						И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"));
						//И ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "139320"); // оплата корпоративной связи
	
	ЭлементыФормы.НадписьБанковскийСчетПолучателя.Видимость = мДоступность;
	ЭлементыФормы.БанковскийСчетПолучателя.Видимость 		= мДоступность;
	
КонецПроцедуры

Процедура УстановитьДоступностьТипаАренднойПлаты()
	
	ЕстьДоступность = (ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "131010");
	ЭлементыФормы.НадписьТипАренднойПлаты.Видимость = ЕстьДоступность;
	ЭлементыФормы.ТипАренднойПлаты.Видимость 		= ЕстьДоступность;
	ЭлементыФормы.ТипАренднойПлаты.АвтоОтметкаНезаполненного 	= ЕстьДоступность;
	ЭлементыФормы.ТипАренднойПлаты.АвтоВыборНезаполненного 		= ЕстьДоступность;
	Если НЕ ЭтотОбъект.ТипАренднойПлаты.Пустая()
			И НЕ ЕстьДоступность Тогда
		ЭтотОбъект.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьСуммыНДФЛ()
	
	мДоступность = ЭтотОбъект.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента;
	
	ЭлементыФормы.НадписьСуммаНДФЛ.Видимость 	= мДоступность;
	ЭлементыФормы.СуммаНДФЛ.Видимость 			= мДоступность;
	
КонецПроцедуры

Функция ПолучитьТекстОбязательногоПояснения()
	
	Возврат СокрЛП(ЭтотОбъект.НазначениеПлатежа) + ?(ЭтотОбъект.ТорговыеТочки.Количество() > 0,
											" (" + СтрЗаменить(Формат(ЭтотОбъект.ТорговыеТочки[0].Период, "ДФ = ММММ_гггг"), "_", " ") + ")", "");
	
КонецФункции

Процедура УстановитьПояснение()
	
	ТекОбязательноеПояснение = ПолучитьТекстОбязательногоПояснения();
	Если ТекОбязательноеПояснение = ТекОбязПояснения Тогда
		Возврат;
	КонецЕсли;


	Если НЕ ТекОбязПояснения  = "" Тогда
		ЭтотОбъект.Пояснение = СтрЗаменить(ЭтотОбъект.Пояснение, ТекОбязПояснения, ТекОбязательноеПояснение);
	Иначе
		ЭтотОбъект.Пояснение = ТекОбязательноеПояснение + ?(НЕ СокрЛП(ЭтотОбъект.Пояснение) = "", " " + ЭтотОбъект.Пояснение, "");
	КонецЕсли;
	
	ТекОбязПояснения = ТекОбязательноеПояснение;

КонецПроцедуры


Процедура ПриОткрытии()
				
	ТекОбязПояснения = ПолучитьТекстОбязательногоПояснения();
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		//АК БЕЛН 19.04.2016++  Пожелание Егоровой - чтоб статусы можно было менять в закрытом периоде
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		//Если НастройкаПравДоступа.ДокументВЗакрытомПериоде(ЭтотОбъект) Тогда
		//	Для каждого Эл Из ЭлементыФормы Цикл
		//		Если ТипЗнч(Эл) = Тип("Панель")
		//				ИЛИ ТипЗнч(Эл) = Тип("СтраницаПанели")
		//				ИЛИ Эл.Имя = "СтатусПолученныхДокументов" Тогда			
		//			Продолжить;
		//		КонецЕсли; 
		//		
		//		Попытка
		//			Эл.ТолькоПросмотр = Истина;
		//		Исключение
		//		КонецПопытки;
		//	КонецЦикла;
		//	ЭлементыФормы.ДействияФормы.Кнопки.Найти("Действие10").Доступность = Ложь;
		//	ЭлементыФормы.ДействияФормы.Кнопки.Найти("Действие11").Доступность = Ложь;
		//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("ОсновныеДействияФормыОК").Доступность = Ложь;
		//	ЭлементыФормы.ПринятоКОплате.Доступность	= Ложь;
		//	ЭлементыФормы.ТорговыеТочки.Доступность		= Ложь;
		//КонецЕсли; 
		//АК БЕЛН 19.04.2016--
		ЭлементыФормы.ЦФО.СписокВыбора = ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ЭтотОбъект.Дата, ЭтотОбъект.Ответственный);
	Иначе
		ЭтотОбъект.Статус 			= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
		ЭтотОбъект.ПринятоКОплате 	= Ложь;
		
		ЭтотОбъект.Ответственный 	= глЗначениеПеременной("глТекущийПользователь");
		Если ЭтотОбъект.Ответственный.ФизЛицо.НеЯвляетсяИнициаторомЗаявокНаРасходДС Тогда
			Сообщить("Необходимо указать инициатора заявки");
		КонецЕсли;
		
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, ЭтотОбъект.Ответственный);
		
		ЭлементыФормы.ЦФО.СписокВыбора = ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ЭтотОбъект.Дата, ЭтотОбъект.Ответственный);
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ЦФО) Тогда
			Если ЭлементыФормы.ЦФО.СписокВыбора.Количество() = 1 Тогда
				ЭтотОбъект.ЦФО = ЭлементыФормы.ЦФО.СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НазначениеПлатежа)
				И НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ЭтотОбъект.НазначениеПлатежа 	= "Оплата по ";
			НазначениеПлатежаПриИзменении(Неопределено);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ФормаОплаты) Тогда
			ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные;
		КонецЕсли;
		Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
			ЭтотОбъект.БанковскийСчетКасса = Константы.СкладПоУмолчаниюВЗаявкеНаРасходДС.Получить();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			ЭтотОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			СтрокаТЧ.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
		КонецЦикла;
	КонецЕсли;
		
	//Если СчетНаОплату.Получить() = Неопределено Тогда		
	//	СчетНаОплатуИмяФайла = "Файл не выбран";
	//	//ЭлементыФормы.СчетНаОплату.ЦветТекста = Новый Цвет(255, 0, 0);
	//Иначе
	//	//ЭлементыФормы.СчетНаОплату.ЦветТекста = Новый Цвет(0, 0, 0);
	//КонецЕсли;
	//Если РасходнаяНакладная.Получить() = Неопределено Тогда		
	//	РасходнаяНакладнаяИмяФайла = "Файл не выбран";
	//	//ЭлементыФормы.РасходнаяНакладная.ЦветТекста = Новый Цвет(255, 0, 0);
	//Иначе
	//	//ЭлементыФормы.РасходнаяНакладная.ЦветТекста = Новый Цвет(0, 0, 0);
	//КонецЕсли;
	//Если АктОбОказанииУслуг.Получить() = Неопределено Тогда		
	//	АктОбОказанииУслугИмяФайла = "Файл не выбран";
	//	//ЭлементыФормы.АктОбОказанииУслуг.ЦветТекста = Новый Цвет(255, 0, 0);
	//Иначе
	//	//ЭлементыФормы.АктОбОказанииУслуг.ЦветТекста = Новый Цвет(0, 0, 0);
	//КонецЕсли;
	//Если СчетФактураПолученный.Получить() = Неопределено Тогда		
	//	СчетФактураПолученныйИмяФайла = "Файл не выбран";
	//	//ЭлементыФормы.СчетФактураПолученный.ЦветТекста = Новый Цвет(255, 0, 0);
	//Иначе
	//	//ЭлементыФормы.СчетФактураПолученный.ЦветТекста = Новый Цвет(0, 0, 0);
	//КонецЕсли;
	
	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	УстановитьОтборПоЗадачам();
	
	УстановитьВидимость();
	УстановитьДоступностьБанковскогоСчетаПолучателя();
	УстановитьДоступностьТипаАренднойПлаты();
	УстановитьДоступностьСуммыНДФЛ();
	
	ОбновитьНадписьЛимитПоСтатьеДДС();
	ОбновитьНадписьЗадолженность();
	
	УстановитьКнопкиВводаНаОсновании();
	
	ЭлементыФормы.ТорговыеТочки.Колонки.Управляющий.ТолькоПросмотр 	= НЕ НеКонтролироватьУсловия;
	ЭлементыФормы.ТорговыеТочки.Колонки.ЦФО.ТолькоПросмотр 			= НЕ НеКонтролироватьУсловия;
	
	РедактированиеИнициатораИДатаУслуги = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеРеквизитовИнициаторИДатаУслугиДС, Ложь);
	ЭлементыФормы.ИнициаторЗаявки.ТолькоПросмотр 		= НЕ РедактированиеИнициатораИДатаУслуги;
	ЭлементыФормы.ДатаПолученияУслуги.ТолькоПросмотр 	= НЕ РедактированиеИнициатораИДатаУслуги;
	
	//АК БЕЛН 28.03.2016++
    ТекСтатус = СтатусПолученныхДокументов;
	//АК БЕЛН 28.03.2016--
	//АК БЕЛН 27.07.2016++
	ЭлементыФормы.ПериодОтработки.АвтоОтметкаНезаполненного=ОбязательностьЗаполненияПериодаОтработки();
	//АК БЕЛН 27.07.2016--
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Финансовый.Ссылка КАК Счет,
	|	Финансовый.Наименование
	|ИЗ
	|	ПланСчетов.Финансовый КАК Финансовый
	|ГДЕ
	|	(Финансовый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками))
	|			ИЛИ Финансовый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.РасчетыСПрочимиДебиторамиИКредиторами)))";
	ВыборкаРазделыУчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРазделыУчета.Следующий()Цикл
		ЭлементыФормы.АК_СчетУчетаРасчетов.СписокВыбора.Добавить(ВыборкаРазделыУчета.Счет,ВыборкаРазделыУчета.Наименование)
	КонецЦикла;
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(ЭтоНовый(), "Новый документ", "" + ЭтотОбъект));
	//---АК
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//АК БЕЛН 19.04.2016++
	Если РежимЗаписи=РежимЗаписиДокумента.Запись Тогда
	     ЭтотОбъект.НеПроверятьДатуЗапретаРедактирования=Истина;
	КонецЕсли;
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Если Не ЗначениеЗаполнено(ПериодОтработки) И ОбязательностьЗаполненияПериодаОтработки() Тогда
			Сообщить("Заполните период отработки");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	//АК БЕЛН 19.04.2016--
	Если ТипЗнч(ЭтотОбъект.Контрагент) <> Тип("Строка") Тогда
		ВнешнееФизЛицоФамилия 	= "";
		ВнешнееФизЛицоИмя 		= "";
		ВнешнееФизЛицоОтчество 	= "";
	Иначе
		ВнешнееФизЛицоФамилия 	= СокрЛП(ВнешнееФизЛицоФамилия);
		ВнешнееФизЛицоИмя 		= СокрЛП(ВнешнееФизЛицоИмя);
		ВнешнееФизЛицоОтчество 	= СокрЛП(ВнешнееФизЛицоОтчество);
	КонецЕсли;	
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		//отключил по просьбе Натальи Демниченко
		//Если Организация <> Справочники.Организации.Избенка Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Для формы оплаты <Наличные> разрешается указывать только организацию <Избенка>");
		//	Если НеКонтролироватьУсловия = Ложь Тогда
		//		Отказ = Истина;
		//	КонецЕсли;	
		//КонецЕсли;
		Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
				И ЗначениеЗаполнено(ЭтотОбъект.Контрагент)
				И ЭтотОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				И НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент.ИНН) Тогда
			Сообщить("Значение получателя должно быть выбрано из справочника Физические лица!");
			ЭтотОбъект.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	ИначеЕсли ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
		Если ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для формы оплаты <Безналичные> не разрешается указывать организацию <Избенка>");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		//АК БЕЛН 28.03.2016++                                       
		Если НЕ ЭтотОбъект.Аванс
				И ЭтотОбъект.РасходнаяНакладнаяИмяФайла = ""
				И ЭтотОбъект.АктОбОказанииУслугИмяФайла = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не прикреплен скан акта об оказании услуг или расходной накладной");
			Если НеКонтролироватьУсловия = Ложь Тогда
				//Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЭтотОбъект.СчетФактураПолученныйИмяФайла = ""
				И НЕ ЭтотОбъект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда                                          
			ОбщегоНазначения.СообщитьОбОшибке("Не прикреплен скан счета-фактуры");
			Если НеКонтролироватьУсловия = Ложь Тогда
				//Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
		//АК БЕЛН 28.03.2016--
	КонецЕсли;
	
	//сверим ЦФО в строке с торговой точкой и ЦФО заявки
	//такую проверку делаю только для молчановой (замуты Умаровой, не хочу больше спорить)
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Молчанова Евгения" Тогда
		Если ЭтотОбъект.ТорговыеТочки.Количество() = 1
				И ЭтотОбъект.ТорговыеТочки[0].ТорговаяТочка.НомерТочки <> 0
				И ЭтотОбъект.ТорговыеТочки[0].ЦФО <> ЭтотОбъект.ЦФО Тогда
			Ответ = Вопрос("Установить ЦФО в документе по ЦФО из строки с торговой точкой?", РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭтотОбъект.ЦФО = ЭтотОбъект.ТорговыеТочки[0].ЦФО;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ =	Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ЭтотОбъект.Контрагент = "Стороннее физическое лицо" Тогда
		//проверим кассу
		Если (НЕ ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчетКасса))
				ИЛИ (НЕ ТипЗнч(ЭтотОбъект.БанковскийСчетКасса) = Тип("СправочникСсылка.СтруктурныеЕдиницы"))
				ИЛИ (НЕ ЭтотОбъект.БанковскийСчетКасса.ИспользуетсяВЗаявкеДляСтороннегоФизлица ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для стороннего физического лица должна быть указана касса с установленным признаком использования для стороннего физлица");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	Если (ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУказыватьКонтрагентовВЗаявкеНаРасходованиеНаличные
				И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные
			ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУказыватьКонтрагентовВЗаявкеНаРасходованиеБезналичные
				И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные)
			И (ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты")
				И ЗначениеЗаполнено(ЭтотОбъект.Контрагент)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС не разрешается указывать контрагента из справочника <Контрагенты>");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если (ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУказыватьФизлицВЗаявкеНаРасходованиеНаличные
				И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные
			ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУказыватьФизлицВЗаявкеНаРасходованиеБезналичные
				И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные)
			И ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По данной статье ДДС не разрешается указывать контрагента из справочника <Физические лица>");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("Строка")
			И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные
			И (ПустаяСтрока(ЭтотОбъект.ВнешнееФизЛицоФамилия)
				ИЛИ ПустаяСтрока(ЭтотОбъект.ВнешнееФизЛицоИмя)
				ИЛИ ПустаяСтрока(ЭтотОбъект.ВнешнееФизЛицоОтчество)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для внешнего физического лица должны быть обязательно заполнены ФИО");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяДвиженияДенежныхСредств) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана статья ДДС");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код <> "310310" //Выдача займов
			И НЕ (ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствНаличные
					И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные)
			И НЕ (ЭтотОбъект.СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствБезналичные
					И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные) Тогда
		Если ЭтотОбъект.ТорговыеТочки.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнен список торговых точек");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЭтотОбъект.СуммаДокумента = ЭтотОбъект.ТорговыеТочки.Итог("Сумма") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не совпадает с суммой расходов по торговым точкам");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если СтрокаТЧ.ТорговаяТочка.Пустая() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке списка торговых точек № " + СтрокаТЧ.НомерСтроки + " не заполнена торговая точка");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичные
			И ПустаяСтрока(СчетНаОплатуИмяФайла)
			И СтатьяДвиженияДенежныхСредств.Код <> "131010" //Оплата аренды (торговых точек и магазинов)
			И СтатьяДвиженияДенежныхСредств.Код <> "131011" Тогда //Оплата депозита за аренду (торговых точек и магазинов)
		ОбщегоНазначения.СообщитьОбОшибке("Не указан счет на оплату");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если (СтатьяДвиженияДенежныхСредств.Код = "131010" //Оплата аренды (торговых точек и магазинов)
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011" //Оплата депозита за аренду (торговых точек и магазинов)
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135012" //Оплата Зарплаты (Зарплата Складских работников)
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "132010" //Оплата за доставку транспорт Строгино
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "132020" //Оплата за доставку транспорт Марьино
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135010" //Оплата Аренда склада Марьино +доп. Расходы
			ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135011") Тогда //Оплата Аренда склада Строгино + доп. Расходы
		Если СтатьяДвиженияДенежныхСредств.Код <> "131011" Тогда
			Если НЕ ЗначениеЗаполнено(НачалоПериодаАренды) Тогда 
		 		ОбщегоНазначения.СообщитьОбОшибке("Не указано начало периода");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(КонецПериодаАренды) Тогда
		 		ОбщегоНазначения.СообщитьОбОшибке("Не указан конец периода");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ВсеТТРезерв = Истина;
		Для Каждого СтрокаТЧ Из ТорговыеТочки Цикл
			Если СтрокаТЧ.ТорговаяТочка.Код <> "ЦФО_100" Тогда ///Резерв
				ВсеТТРезерв = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")
				И (СтатьяДвиженияДенежныхСредств.Код = "131010" 
					ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011") Тогда
			//И Не ВсеТТРезерв Тогда //Оплата аренды (торговых точек и магазинов)
			Если НЕ ЗначениеЗаполнено(КонтрагентПоАренде) Тогда
		 		ОбщегоНазначения.СообщитьОбОшибке("Не указан контрагент");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтатьяДвиженияДенежныхСредств.Код = "141023" Тогда//Оплата расходов на проект "Общественный контроль" (оплата УЕК)
			Если НЕ ЗначениеЗаполнено(КонтрагентПоАренде) Тогда
		 		ОбщегоНазначения.СообщитьОбОшибке("Не указан контрагент");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТорговыеТочки.Количество() <> 1 Тогда
	 		ОбщегоНазначения.СообщитьОбОшибке("По указанной статье ДДС допускается указывать только одну торговую точку");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
		Если СтатьяДвиженияДенежныхСредств.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствНаличные = Ложь Тогда
			Если ТорговыеТочки.Количество() <> 1 Тогда
		 		ОбщегоНазначения.СообщитьОбОшибке("Для внешнего физического лица должна быть указана 1 торговая точка");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			//также нужно проверить, что если будет счет учета 44.2, то должны быть точки только такие: все, избенка общая, вкусвилл общая
			пСчетУчета = ОбщиеПроцедуры.ПолучитьСчетДляРКОПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
			Если НЕ ЗначениеЗаполнено(пСчетУчета) Тогда
				Если Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "1" Тогда
					пСчетУчета = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения; //44.3
				КонецЕсли;	
			КонецЕсли;
			Если пСчетУчета = ПланыСчетов.Финансовый.ЗатратыОбщиеДляРаспределения Тогда //44.2
				Если ТорговыеТочки.Количество() > 0 Тогда
					Если ТорговыеТочки[0].ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000") //Все
							И ТорговыеТочки[0].ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_66") //Избенка общий
							И ТорговыеТочки[0].ТорговаяТочка <> Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_67") //Вкусвилл общий
							Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Для данной статьи учета должна быть указана ТТ из списка: Все, Избенка (общий), Вкусвилл (общий)");
						Если НеКонтролироватьУсловия = Ложь Тогда
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Если СтатьяДвиженияДенежныхСредств.Код <> "139311"
					И СтатьяДвиженияДенежныхСредств.Код <> "139313" Тогда
					Для Каждого СтрокаТТ Из ТорговыеТочки Цикл
						Если (СтрокаТТ.ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Избенка
									И СтрокаТТ.ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин)
								ИЛИ СтрокаТТ.ТорговаяТочка.НомерТочки = 0 Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке " + СтрокаТТ.НомерСтроки + " указана ошибочная торговая точка");
							Если НеКонтролироватьУсловия = Ложь Тогда
								Отказ = Истина;
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если СтатьяДвиженияДенежныхСредств.Код = "131010" 
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011"
				ИЛИ Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "3" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По указанной статье ДДС не допускается формирование заявки для внешнего физического лица");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "120610"			// Оплата промоутера
			ИЛИ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код = "200701" Тогда 	// Оплата промоутера для открытия ТТ
			//ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200702" 	// Оплата листовок для открытия ТТ
			//ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200703" 	// Оплата оформления для открытия ТТ
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НачалоПериода) Тогда
		 		ОбщегоНазначения.СообщитьОбОшибке("В строке ТТ № " + СтрокаТЧ.НомерСтроки + " не указано начало периода");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КонецПериода) Тогда
		 		ОбщегоНазначения.СообщитьОбОшибке("В строке ТТ № " + СтрокаТЧ.НомерСтроки + " не указан конец периода");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Если НЕ Контрагент = "Стороннее физическое лицо" Тогда
		//	Если СтатьяДвиженияДенежныхСредств.Код = "120610" //Оплата промоутера
		//		ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200701" //Оплата промоутера для открытия ТТ
		//		ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200702" //Оплата листовок для открытия ТТ
		//		ИЛИ СтатьяДвиженияДенежныхСредств.Код = "200703" //Оплата оформления для открытия ТТ
		//		ИЛИ СтатьяДвиженияДенежныхСредств.Код = "134010" Тогда //Оплата Зарплаты (Зарплата Управления расчета заказов)
		//		Если СокрЛП(СтрокаТЧ.ФИОПолучателя) = "" Тогда
		//	 		ОбщегоНазначения.СообщитьОбОшибке("В строке ТТ № " + СтрокаТЧ.НомерСтроки + " не указано ФИО получателя");
		//			Отказ = Истина;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;	
		
		Если ЭтотОбъект.Контрагент = "Стороннее физическое лицо" Тогда
			Если Лев(ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код, 2) = "20"
					И НЕ СтрокаТЧ.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда //должна быть торговая точка избенки
				ОбщегоНазначения.СообщитьОбОшибке("В строке ТТ № " + СтрокаТЧ.НомерСтроки + " должна быть указана торговая точка Избенки");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(ЭтотОбъект.СтатьяДвиженияДенежныхСредств.Код, 2) = "23"
					И НЕ СтрокаТЧ.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда //должна быть торговая точка Вкусвилл
				ОбщегоНазначения.СообщитьОбОшибке("В строке ТТ № " + СтрокаТЧ.НомерСтроки + " должен быть указан магазин Вкусвилл");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	//Если СтатьяДвиженияДенежныхСредств.Код <> "120610" //Оплата промоутера
	//	И СтатьяДвиженияДенежныхСредств.Код <> "200701" Тогда //Оплата промоутера для открытия ТТ
	ПоискДублейСтрокВТабЧастиТТ(ТорговыеТочки, Отказ);
	//КонецЕсли;
	Если СокрЛП(НазначениеПлатежа) = ""
			ИЛИ СокрЛП(НРег(НазначениеПлатежа)) = "оплата по" Тогда
 		ОбщегоНазначения.СообщитьОбОшибке("Не указано назначение платежа");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОтправляемУведомление = ЭтоНовый();
	
	ОтправлятьУведомлениеОтветственному = НЕ ЭтоНовый() И НЕ УведомлениеОтветственномуОтправлено И ПринятоКОплате; 
	
	Если ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация"		, ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Контрагент"		, ЭтотОбъект.Контрагент);
		Запрос.УстановитьПараметр("ЦФО"				, ЭтотОбъект.ЦФО);
		Запрос.УстановитьПараметр("СуммаДокумента"	, ЭтотОбъект.СуммаДокумента);
		Запрос.УстановитьПараметр("ДатаРасхода"		, ЭтотОбъект.ДатаРасхода);
		Запрос.УстановитьПараметр("Ссылка"			, ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаРасходованиеСредств.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредств.Контрагент = &Контрагент
		|	И ЗаявкаНаРасходованиеСредств.Организация = &Организация
		|	И ЗаявкаНаРасходованиеСредств.СуммаДокумента = &СуммаДокумента
		|	И ЗаявкаНаРасходованиеСредств.ДатаРасхода = &ДатаРасхода
		|	И ЗаявкаНаРасходованиеСредств.Ссылка <> &Ссылка
		|	И НЕ ЗаявкаНаРасходованиеСредств.ПометкаУдаления
		|	И ЗаявкаНаРасходованиеСредств.ЦФО = &ЦФО";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Если Вопрос("Подобная заявка уже внесена, все равно сохранить? Нажмите ДА для записи текущей заявки, нажмите НЕТ для открытия существующей заявки", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Пока Выборка.Следующий() Цикл
					Выборка.Ссылка.ПолучитьФорму().Открыть();
				КонецЦикла;
			КонецЕсли;                
		КонецЕсли;
	КонецЕсли;
	
	ВсеМагазины = Истина;
	Если (Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "1" //Операционные статьи
				ИЛИ Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "2") //Инвестиционные статьи
			И НЕ (СтатьяДвиженияДенежныхСредств.Код = "131010" //Оплата аренды (торговых точек и магазинов)
					ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011") Тогда //Оплата депозита за аренду (торговых точек и магазинов))
		ЕстьОткрытыеТТВТекущемМесяце 	= Ложь;
		ЕстьОткрытыеТТВПрошлыхПериодах 	= Ложь;
		Для Каждого СтрокаТЧ Из ТорговыеТочки Цикл
			Если НачалоМесяца(СтрокаТЧ.ТорговаяТочка.ДатаОткрытия) >= НачалоМесяца(ДатаРасхода)
					ИЛИ СтрокаТЧ.ТорговаяТочка.Код = "ЦФО_100" Тогда //Резерв
				ЕстьОткрытыеТТВТекущемМесяце = Истина;
			Иначе
				ЕстьОткрытыеТТВПрошлыхПериодах = Истина;
			КонецЕсли;
			Если СтрокаТЧ.ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин Тогда
				ВсеМагазины = Ложь;
			КонецЕсли;
		КонецЦикла;
		//для безналичной это ограничение не действует
		мЕстьПравоУказывять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИгнорироватьПроверкиСтатейДДСПриЗаписиЗаявокНаРасходДС, Ложь);
		Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичные
				И НЕ мЕстьПравоУказывять Тогда
			Если ЕстьОткрытыеТТВТекущемМесяце
					И ЕстьОткрытыеТТВПрошлыхПериодах Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для данной статьи не допускается указывать ТТ, открытые в текущем месце и в прошлых периодах одновременно");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			ИначеЕсли ЕстьОткрытыеТТВТекущемМесяце
					И НЕ ЕстьОткрытыеТТВПрошлыхПериодах
					И Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "1"
					И НЕ СтатьяДвиженияДенежныхСредств.Код = "139311"
					И НЕ ВсеМагазины Тогда //Операционные статьи
				ОбщегоНазначения.СообщитьОбОшибке("Данная статья ДДС преднаначена только для торговых точек, открытых НЕ в текущем месяце");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			//ИначеЕсли НЕ ЕстьОткрытыеТТВТекущемМесяце
			//		И ЕстьОткрытыеТТВПрошлыхПериодах
			//		И Лев(СтатьяДвиженияДенежныхСредств.Код, 1) = "2" 
			//		И НЕ ВсеМагазины Тогда //Инвестиционные статьи
			//		ОбщегоНазначения.СообщитьОбОшибке("Данная статья ДДС преднаначена только для торговых точек, открытых в текущем месяце");
			//		Если НеКонтролироватьУсловия = Ложь Тогда
			//			Отказ = Истина;
			//		КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если ЭтоНовый()
	//		И ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
	Если ЭтотОбъект.Ссылка.СтатьяДвиженияДенежныхСредств <> ЭтотОбъект.СтатьяДвиженияДенежныхСредств
			И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЦФО"			, ЭтотОбъект.ЦФО);
		Запрос.УстановитьПараметр("Сотрудник"	, ЭтотОбъект.Ответственный);
		Запрос.УстановитьПараметр("СтатьяДДС"	, ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ПраваДоступаКСтатьямДДСНаличные.СтатьяДДС) КАК КоличествоПоЦФОИСотруднику,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ПраваДоступаКСтатьямДДСНаличные.СтатьяДДС = &СтатьяДДС
		|						И ПраваДоступаКСтатьямДДСНаличные.ЦФО = &Сотрудник
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК СтатьяДДСРазрешенаДляСотрудника,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ПраваДоступаКСтатьямДДСНаличные.СтатьяДДС = &СтатьяДДС
		|						И ПраваДоступаКСтатьямДДСНаличные.ЦФО = &ЦФО
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК СтатьяДДСРазрешенаДляЦФО
		|ИЗ
		|	РегистрСведений.ПраваДоступаКСтатьямДДСНаличные КАК ПраваДоступаКСтатьямДДСНаличные
		|ГДЕ
		|	(ПраваДоступаКСтатьямДДСНаличные.ЦФО = &ЦФО
		|			ИЛИ ПраваДоступаКСтатьямДДСНаличные.ЦФО = &Сотрудник)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоПоЦФОИСотруднику > 0
					И Выборка.СтатьяДДСРазрешенаДляСотрудника = 0
					И Выборка.СтатьяДДСРазрешенаДляЦФО = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав для указания данной статьи ДДС");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Управление по развитию сложный случай, поэтому разруливать вот через такой гемор, который идет ниже
	МассивКодовРазрешенныхРазвитию = Новый Массив();
	МассивКодовРазрешенныхРазвитию.Добавить("131010");
	МассивКодовРазрешенныхРазвитию.Добавить("131011");
	МассивКодовРазрешенныхРазвитию.Добавить("310310");
	Если ЦФО = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12")
			И Лев(СтатьяДвиженияДенежныхСредств.Код, 1) <> "2"
			И НЕ ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) //управление по развитию
			И МассивКодовРазрешенныхРазвитию.Найти(СтатьяДвиженияДенежныхСредств.Код) = Неопределено
			И НЕ (Лев(СтатьяДвиженияДенежныхСредств.Код, 4) = "1393"             // Оплата прочих постоянных затрат - только двум пользователям
					И (ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Андросова Ирина")
						ИЛИ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Сокирка Дарья")))
			И НЕ РольДоступна("ПравоПринятияКОплатеЗаявокНаРасходованиеСредств") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для управления по развитию можно указать только статьи из папки Инвестиционная деятельность");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	//Если Лев(СтатьяДвиженияДенежныхСредств.Код, 4) = "2301" Тогда //Инвестиционные статьи для магазинов, открывшихся в текущем месяце
	//	Для Каждого СтрокаТЧ Из ТорговыеТочки Цикл
	//		Если СтрокаТЧ.ТорговаяТочка.Код = "ЦФО_100" Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		//Если СтрокаТЧ.ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин Тогда
	//		//	ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " указана торговая точка, не являющаяся магазином. По данной статье ДДС допускается указывать только магазины");
	//		//	Отказ = Истина;			
	//		//КонецЕсли;
	//		Если НачалоМесяца(СтрокаТЧ.ТорговаяТочка.ДатаОткрытия) <> НачалоМесяца(ДатаРасхода) Тогда
	//			Если Вопрос("В строке № " + СтрокаТЧ.НомерСтроки + " по данной статье ДДС допускается указывать только магазины, открывшиеся в текущем месяце.  Вы указываете затраты на магазин ""Вкусвилл"". Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//				Если НеКонтролироватьУсловия = Ложь Тогда
	//					Отказ = Истина;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		Если СтрокаТЧ.ТорговаяТочка.Код = "ЦФО_100" //Резерв
				И СокрЛП(СтрокаТЧ.Адрес) = "" Тогда 
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " не указан адрес резерва");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НачалоДня(ЭтотОбъект.ДатаРасхода) < НачалоДня(ТекущаяДата())
			И (ЭтотОбъект.ЭтоНовый()
				ИЛИ НЕ ЭтотОбъект.ДатаРасхода = ЭтотОбъект.Ссылка.ДатаРасхода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата расхода не может быть меньше текущей даты");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НеКонтролироватьУсловия = Ложь Тогда
		Если Час(ТекущаяДата()) > 11
				И НачалоДня(ДатаРасхода) = НачалоДня(ТекущаяДата())
				И (ЭтотОбъект.ЭтоНовый()
					ИЛИ ЭтотОбъект.ДатаРасхода <> ЭтотОбъект.Ссылка.ДатаРасхода)
				И НЕ ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда                                                                
			Если Вопрос("Текущее время более 11:00. Допускается указывать дату не ранее завтрашнего дня. Установить следующую возможную дату?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ДатаНоваяРасчитанная = ТекущаяДата() + 86400;
				Удачно = Ложь;
				Пока ДатаНоваяРасчитанная <= ТекущаяДата() + 86400 * 60 Цикл
					Если МожноУстановитьДатуКакДатуРасхода(ДатаНоваяРасчитанная) Тогда
						Удачно = Истина;
						Прервать;
					КонецЕсли;	
					ДатаНоваяРасчитанная = ДатаНоваяРасчитанная + 86400;
				КонецЦикла;	
					
				ДатаРасхода = ДатаНоваяРасчитанная;
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		ТекДата = ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата);
		НачалоНеделиДаты = НачалоНедели(ТекДата);
		Если ТекДата > НачалоНеделиДаты + 2*86400 + 11*3600 Тогда		
			МинДатаРасхода = НачалоНеделиДаты + 8*86400;
		ИначеЕсли (ТекДата > НачалоНеделиДаты + 11*3600)
				И НЕ ТекДата > НачалоНеделиДаты + 2*86400 + 11*3600 Тогда
			МинДатаРасхода = НачалоНеделиДаты + 3*86400;
		ИначеЕсли НЕ ТекДата > НачалоНеделиДаты + 11*3600 Тогда		
			МинДатаРасхода = НачалоНеделиДаты + 86400;
		КонецЕсли;		
		Если ЭтотОбъект.ДатаРасхода < МинДатаРасхода Тогда
			Если Вопрос("Дата расхода должна быть не ранее " + Формат(МинДатаРасхода, "ДЛФ=Д") + ". Установить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ЭтотОбъект.ДатаРасхода = МинДатаРасхода;
			Иначе	
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ МожноУстановитьДатуКакДатуРасхода(ЭтотОбъект.ДатаРасхода) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Дату расхода можно установить только на вторник или четверг (не праздничный)");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные
			И НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.УстановкаЛюбойДатыОплатыБезнал, Ложь)
			И НЕ МожноУстановитьДатуКакДатуРасхода(ЭтотОбъект.ДатаРасхода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дату расхода можно установить только на вторник или четверг (не праздничный)");
		Если НеКонтролироватьУсловия = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	//Если ОтправлятьУведомлениеОтветственному = Истина И Отказ = Ложь Тогда
	//	Попытка
	//		УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявкеОтветственному(Ссылка);
	//		УведомлениеОтветственномуОтправлено = Истина;
	//	Исключение
	//		УведомлениеОтветственномуОтправлено = Ложь;
	//		Сообщить("Не удалось отправить уведомление о заявке. Обратитесь к администратору!", СтатусСообщения.Важное);
	//	КонецПопытки;	
	//КонецЕсли;
	
	Если ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектЗадачи", ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.ОбъектЗадачи = &ОбъектЗадачи
		|	И ЗадачаИсполнителя.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.АкцептованиеЗаявкиНаРасходование)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			обЗадача = Выборка.Ссылка.ПолучитьОбъект();
			обЗадача.Выполнена = Истина;
			обЗадача.Записать();
		КонецЦикла;

		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если НЕ СтрокаТЧ.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " расходы по ТТ не акцептованы");
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СтатьяДвиженияДенежныхСредств.Код <> "131010" //Оплата аренды (торговых точек и магазинов)
			И СтатьяДвиженияДенежныхСредств.Код <> "131011"
			И ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда //Оплата депозита за аренду (торговых точек и магазинов)
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если Организация.ИНН <> "7734675810" //Вкусвилл
					И СтрокаТЧ.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " указан магазин ""Вкусвилл"". Укажите организацию ""Вкусвилл""");
				//Минеев отключил, более не актуальна проверка
				//Если НеКонтролироватьУсловия = Ложь Тогда
				//	Отказ = Истина;
				//КонецЕсли;
			КонецЕсли;
			Если Организация.ИНН <> "7726660031"
					И Организация.ИНН <> "7731626420"//Луг да Поле
					И СтрокаТЧ.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " указана избенка ""Луг да Поле"". Укажите организацию ""Луг да Поле""");
				//Минеев отключил, более не актуальна проверка
				//Если НеКонтролироватьУсловия = Ложь Тогда
				//	Отказ = Истина;
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//
	Если ЭлементыФормы.НачалоПериодаАренды.Видимость
			И ТорговыеТочки.Количество() > 0
			И НЕ ТорговыеТочки[0].Период = НачалоМесяца(НачалоПериодаАренды) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадает период аренды в шапке и в табличной части!", Отказ);
	КонецЕсли;
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные
			И НЕ ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
		Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Физлицо"	, ЭтотОбъект.Контрагент);
			Запрос.УстановитьПараметр("Дата"	, НачалоДня(ЭтотОбъект.Дата));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Организация
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	НЕ СотрудникиОрганизаций.ПометкаУдаления
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &Дата)
			|	И НЕ СотрудникиОрганизаций.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			
			мРаботает = Ложь;
			Пока Выборка.Следующий() Цикл
				Если ЭтотОбъект.Организация = Выборка.Организация Тогда
					мРаботает = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если НЕ мРаботает Тогда		
				ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(Контрагент) + " не работает в организации " + ЭтотОбъект.Организация);
				Если НеКонтролироватьУсловия = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ЭтотОбъект.Контрагент = "Стороннее физическое лицо" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для стороннего физического лица при наличной форме оплаты может быть выбрана только организация ""Избенка""");
			Если НеКонтролироватьУсловия = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	

	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные 
			И ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчетПолучателя) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнен банковский счет получателя!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Минеев доработал, если ставят признак одобрения, а акцептования еще нет, то проверять не нужно
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОдобреноАкцептантом
			И Статус <> Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			//ничего не делаем
		Иначе	
			ПроверитьЛимитПоБюджету();
		КонецЕсли;	
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ФормаОплаты= Перечисления.ФормыОплаты.Безналичные И Не ЗначениеЗаполнено(АК_СчетУчетаРасчетов)	
		И НЕ АК_КонтрольЗадолженности.РасчетыПоАрендеПоСтатье(СтатьяДвиженияДенежныхСредств)Тогда
			Отказ = Истина;
			Сообщить("Не заполнен раздел учета дебиторской задолженности (на вкладке Управленческий учет)")
		КонецЕсли;
	КонецЕсли; 
	

	мПроведение = РежимЗаписи = РежимЗаписиДокумента.Проведение;
КонецПроцедуры

Процедура ПослеЗаписи()
	
	УстановитьОтборПоЗадачам();
	
	Если ОтправляемУведомление = Истина Тогда
		
		Попытка
			//Владыченко Олег 27.12.2016 старт
			//УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявке(ЭтотОбъект.Ссылка);
			МассивЗначенийПрава = УправлениеДопПравамиПользователей.ПрочитатьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ОграниченнаяРассылкаУведомлений, Ложь, Ответственный);
			ОграниченнаяРассылкаУведомлений=МассивЗначенийПрава.Найти(Истина) <> Неопределено;
			
			Если ОграниченнаяРассылкаУведомлений Тогда
				Если  (СтатьяДвиженияДенежныхСредств.Код<>"131015" И СтатьяДвиженияДенежныхСредств.Код<>"131010") Тогда
					УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявке(ЭтотОбъект.Ссылка);
				КонецЕсли;
			Иначе	
				УправлениеЭлектроннойПочтой.НаписатьПисьмоЗаявке(ЭтотОбъект.Ссылка);
			КонецЕсли;
			//Владыченко Олег 27.12.2016 финиш
			
		Исключение
			Сообщить("Не удалось отправить уведомление о создании новой заявки. Обратитесь к администратору!", СтатусСообщения.Важное);
		КонецПопытки;
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Управляющий) Тогда
				СоздатьЗадачуПоДокументу(ЭтотОбъект.Ссылка, Справочники.ВидыЗадачПользователей.АкцептованиеЗаявкиНаРасходование, СтрокаТЧ.Управляющий);
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			МассивПользователей = ПолныеПраваДополнительный.ПолучитьСписокПользователейДляАкцептования(ЭтотОбъект.ФормаОплаты);
			Для Каждого ЭлементМассива Из МассивПользователей Цикл
				Если ЗначениеЗаполнено(ЭлементМассива) Тогда
					СоздатьЗадачуПоДокументу(ЭтотОбъект.Ссылка, Справочники.ВидыЗадачПользователей.АкцептованиеЗаявкиНаРасходование, ЭлементМассива);
				КонецЕсли;
			КонецЦикла;
		Исключение
			Сообщить("Ошибки при уведомлении руководителей о заявке! Обратитесь к администратору!", СтатусСообщения.Внимание);
		КонецПопытки;
		
		пРукОтдела = ПолучитьРуководителяОтдела(ЭтотОбъект.ЦФО);
		Если ЗначениеЗаполнено(пРукОтдела) Тогда
			СоздатьЗадачуПоДокументу(ЭтотОбъект.Ссылка, Справочники.ВидыЗадачПользователей.АкцептованиеЗаявкиНаРасходование, пРукОтдела);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ЭтотОбъект.СтатьяДвиженияДенежныхСредств);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.Пользователь
		|ИЗ
		|	РегистрСведений.ПраваНаАкцептованиеЗаявокПоСтатьямДДС КАК ПраваНаАкцептованиеЗаявокПоСтатьямДДС
		|ГДЕ
		|	ПраваНаАкцептованиеЗаявокПоСтатьямДДС.СтатьяДвиженияДенежныхСредств = &СтатьяДвиженияДенежныхСредств";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
				СоздатьЗадачуПоДокументу(ЭтотОбъект.Ссылка, Справочники.ВидыЗадачПользователей.АкцептованиеЗаявкиНаРасходование, Выборка.Пользователь);
			КонецЕсли;
		КонецЦикла;
		Если СтатьяДвиженияДенежныхСредств.Код = "310310" Тогда // Выдача займа
			СоздатьЗадачуПоДокументу(ЭтотОбъект.Ссылка, Справочники.ВидыЗадачПользователей.ВыдачаЗайма, Справочники.Пользователи.НайтиПоНаименованию("Золотарева Татьяна"),Истина);
			СоздатьЗадачуПоДокументу(ЭтотОбъект.Ссылка, Справочники.ВидыЗадачПользователей.ВыдачаЗайма, Справочники.Пользователи.НайтиПоНаименованию("Гусева Анастасия"),Истина);
		КонецЕсли;	
	КонецЕсли;
	
	
	ОбновитьНадписьЛимитПоСтатьеДДС();
	
	УстановитьКнопкиВводаНаОсновании();
	
	//АК БЕЛН 27.09.2016++

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка
		|ИЗ
		|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
		|ГДЕ
		|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка = &Заявка
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка";

	Запрос.УстановитьПараметр("Заявка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектДок=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НайденнаяСтрока=ОбъектДок.УслугиПоСчетам.НайтиСтроки(Новый Структура("Заявка",Ссылка))[0];	
		НайденнаяСтрока.Контрагент 		 	= Контрагент;
		НайденнаяСтрока.ДоговорКонтрагента		= ДоговорКонтрагента;
		НайденнаяСтрока.Сумма=СуммаДокумента;
		НайденнаяСтрока.СуммаНДС=СуммаНДС;
		НайденнаяСтрока.СтавкаНДС=СтавкаНДС;
		НайденнаяСтрока.Аванс=Аванс;
		НайденнаяСтрока.Комментарий=Комментарий;
		НайденнаяСтрока.ФормаОплаты=ФормаОплаты;
		Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
			ВремХранилище = СчетНаОплату.Получить();
		ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
			КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
			КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
			Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
			Если Файлы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			ВремХранилище = Новый ДвоичныеДанные(Файлы[0].ПолноеИмя);
		КонецЕсли;
		НайденнаяСтрока.ХранилищеФайла			= Новый ХранилищеЗначения(ВремХранилище);	
		НайденнаяСтрока.ИмяФайла 	= СчетНаОплатуИмяФайла;
		НайденнаяСтрока.ИмяФайлаПолное 	= СчетНаОплатуПолноеИмяФайла;
		Попытка
			ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		Сообщить("Перезаполнена строка по "+Ссылка+" в "+ОбъектДок.Ссылка);
	КонецЦикла;
	//АК БЕЛН 27.09.2016--
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если СокрЛП(ЭтотОбъект.НазначениеПлатежа) = ""
			ИЛИ НРег(СокрЛП(ЭтотОбъект.НазначениеПлатежа)) = "оплата по" Тогда
		ЭлементыФормы.НазначениеПлатежа.ОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.НазначениеПлатежа.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если НЕ ЭлементыФормы.ТорговыеТочки.ТолькоПросмотр
			И ЭтотОбъект.ТорговыеТочки.Количество() = 0 Тогда
		ЭлементыФормы.ТорговыеТочки.ЦветРамки = Новый Цвет(255, 0, 0);
	Иначе
		ЭлементыФормы.ТорговыеТочки.ЦветРамки = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	
КонецПроцедуры


Процедура ФормаОплатыПриИзменении(Элемент)
	
	ЭлементыФормы.БанковскийСчетКасса.Значение = ЭлементыФормы.БанковскийСчетКасса.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.БанковскийСчетКасса.Значение);
	
	Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		
		ЭтотОбъект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		ПересчитатьСуммуНДСДокумент();
		
		//БанковскийСчетКасса = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("P00000243"); //Строгино_1
        ЭтотОбъект.БанковскийСчетКасса = Константы.СкладПоУмолчаниюВЗаявкеНаРасходДС.Получить();
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
			ЭтотОбъект.Организация = Справочники.Организации.Избенка;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			ЭтотОбъект.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ЭтотОбъект.БанковскийСчетПолучателя.Пустая() Тогда
			ЭтотОбъект.БанковскийСчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("Строка") Тогда
			ЭтотОбъект.Контрагент = Неопределено;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			ЭтотОбъект.Контрагент 				= Справочники.Контрагенты.ПустаяСсылка();
			ЭтотОбъект.БанковскийСчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчетКасса))
				ИЛИ НЕ ТипЗнч(ЭтотОбъект.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ЭтотОбъект.БанковскийСчетКасса = ЭтотОбъект.Организация.ОсновнойБанковскийСчет;
		Иначе
			Если НЕ ЭтотОбъект.БанковскийСчетКасса.Владелец = ЭтотОбъект.Организация Тогда
				ЭтотОбъект.БанковскийСчетКасса = ЭтотОбъект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьДоступностьБанковскогоСчетаПолучателя();
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
		Если (НЕ ЗначениеЗаполнено(БанковскийСчетКасса))
				ИЛИ НЕ ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			БанковскийСчетКасса = Организация.ОсновнойБанковскийСчет;
		Иначе
			Если НЕ БанковскийСчетКасса.Владелец = ЭтотОбъект.Организация Тогда
				БанковскийСчетКасса = Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
		СформироватьНазначениеПлатежа();
	Иначе
		Если НЕ ЭтотОбъект.ДоговорКонтрагента.Организация = ЭтотОбъект.Организация Тогда
			ЭтотОбъект.ДоговорКонтрагента = Неопределено;	
			СформироватьНазначениеПлатежа();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНадписьЗадолженность();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("Строка")
				И Элемент.Значение <> "Стороннее физическое лицо" Тогда
			Элемент.Значение = "Стороннее физическое лицо";
		КонецЕсли;
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") 
				И ЗначениеЗаполнено(Элемент.Значение)
				И Элемент.Значение.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				И НЕ ЗначениеЗаполнено(Элемент.Значение.ИНН) Тогда
			Сообщить("Значение получателя должно быть выбрано из справочника Физические лица!");
			Элемент.Значение = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Физлицо"	, Контрагент);
		Запрос.УстановитьПараметр("Дата"	, НачалоДня(Дата));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Организация
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	НЕ СотрудникиОрганизаций.ПометкаУдаления
		|	И СотрудникиОрганизаций.Физлицо = &Физлицо
		|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &Дата)
		|	И СотрудникиОрганизаций.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭтотОбъект.Организация = Выборка.Организация;
			ОрганизацияПриИзменении(Неопределено);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Элемент.Значение = Неопределено
			ИЛИ ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ФизическиеЛица")
			ИЛИ ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		УстановитьДоступностьБанковскогоСчетаПолучателя();
		УстановитьВидимость();
		Возврат;
	КонецЕсли;
	//АК БЕЛН 25.07.2016++
	//СтатьяДвиженияДенежныхСредств = Элемент.Значение.СтатьяДвиженияДенежныхСредств;
	//АК БЕЛН 25.07.2016++
	УстановитьДоступностьТипаАренднойПлаты();
	Если НЕ ЭтотОбъект.ДоговорКонтрагента.Владелец = Элемент.Значение Тогда
		ЭтотОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.БанковскийСчетПолучателя.Владелец = Элемент.Значение Тогда
		ЭтотОбъект.БанковскийСчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтавкаНДС = Контрагент.СтавкаНДС;
		ПересчитатьСуммуНДСДокумент();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ЭтотОбъект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент, ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
	ДоговорКонтрагентаПриИзменении(Неопределено);  
	
	УстановитьДоступностьБанковскогоСчетаПолучателя();
	УстановитьВидимость();
	ЗаполнитьСчетКонтрагента();  
	
	ОбновитьНадписьЗадолженность();
	
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Контрагент = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;

		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить("Контрагенты"		, "Контрагенты");
		СписокТипов.Добавить("ФизическиеЛица"	, "Физические лица");
		Если ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда
			СписокТипов.Добавить("СтороннееФизЛицо", "Стороннее физическое лицо");
		КонецЕсли;	

		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранныйЭлемент.Значение = "Контрагенты" Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ИначеЕсли ВыбранныйЭлемент.Значение = "ФизическиеЛица" Тогда
			Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
		ИначеЕсли ВыбранныйЭлемент.Значение = "СтороннееФизЛицо" Тогда
			Контрагент = "Стороннее физическое лицо";	
		КонецЕсли;
		
		КонтрагентПриИзменении(Элемент);
		
	Иначе	
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			пФорма = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
			пФорма.НачальноеЗначениеВыбора = Контрагент;
			пФорма.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
			пФорма.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент) Экспорт
	
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента.Пустая())
			И НЕ ЭтотОбъект.Организация = ДоговорКонтрагента.Организация Тогда
		ЭтотОбъект.Организация	= ДоговорКонтрагента.Организация;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;
	//АК БЕЛН 25.07.2016++
	СтатьяДвиженияДенежныхСредств = ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств;
	//АК БЕЛН 25.07.2016--
	//АК БЕЛН 27.07.2016++
	ЭлементыФормы.ПериодОтработки.АвтоОтметкаНезаполненного=ОбязательностьЗаполненияПериодаОтработки();
	//АК БЕЛН 27.07.2016--
	СформироватьНазначениеПлатежа();
	
	УстановитьДоступностьСуммыНДФЛ();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	спВидыДоговоров = Новый СписокЗначений;
	спВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, ЭтотОбъект.Контрагент, ЭтотОбъект.ДоговорКонтрагента, спВидыДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	УстановитьПояснение();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДСДокумент();
	
КонецПроцедуры

Процедура ЦФОНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пФорма = Справочники.СтруктурныеЕдиницы.ПолучитьФормуВыбора(, Элемент);
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Значение 		= Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Использование 	= Истина;
	пФорма.Открыть();
	
КонецПроцедуры

Процедура ТорговаяТочкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пФорма = Справочники.СтруктурныеЕдиницы.ПолучитьФормуВыбора(, Элемент);
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Значение 		= Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	пФорма.СправочникСписок.Отбор.ТипСтруктурнойЕдиницы.Использование 	= Истина;
	пФорма.Открыть();
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДСДокумент();
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пФорма = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьФормуВыбора(, Элемент);
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличные
			И НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия")
			И НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Кордичева  Анастасия") Тогда
		пФорма.ОтбиратьСтатьи = Истина;
	КонецЕсли;
	Если ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Умарова Вера") Тогда
		пФорма.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	Иначе
		пФорма.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	КонецЕсли;	
	пФорма.СправочникСписок.Порядок.Установить("Код Возр");
	пФорма.НачальноеЗначениеВыбора = Элемент.Значение;
	пФорма.Открыть();
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	Если Элемент.Значение.Код = "310310" //Выдача займов
			ИЛИ (Элемент.Значение.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствНаличные
					И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные)
			ИЛИ (Элемент.Значение.НеУказыватьТорговыеТочкиВЗаявкеНаРасходованиеСредствБезналичные
					И ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичные) Тогда
		ЭтотОбъект.ТорговыеТочки.Очистить();
		
	ИначеЕсли Элемент.Значение.Код = "141023" Тогда //Оплата расходов на проект "Общественный контроль" (оплата УЕК)
		Если ТипЗнч(КонтрагентПоАренде) <> Тип("Строка") Тогда
			КонтрагентПоАренде = "";
		КонецЕсли;
	ИначеЕсли Элемент.Значение.Код = "131010" //Оплата аренды
			И ЭтотОбъект.ТипАренднойПлаты.Пустая() Тогда
		ЭтотОбъект.ТипАренднойПлаты = Перечисления.ТипыАренднойПлаты.ПостояннаяЧасть;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	
	//Если (НЕ Элемент.Значение.Код = "139320")
	//		И НЕ ЭтотОбъект.БанковскийСчетПолучателя.Пустая() Тогда
	//	ЭтотОбъект.БанковскийСчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
	//КонецЕсли;
	УстановитьДоступностьБанковскогоСчетаПолучателя();
	УстановитьДоступностьТипаАренднойПлаты();
	
	ОбновитьНадписьЛимитПоСтатьеДДС();
	
	//
	мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	ТекПользовательНеДемниченко = (НЕ ПараметрыСеанса.ТекущийПользователь = мДемниченко);
	Если мДемниченко = ПолучитьАкцептантаПоСтатьеДДС() Тогда
		Если ТекПользовательНеДемниченко
				И ЭтотОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			ЭтотОбъект.Статус 			= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
			ЭтотОбъект.ДатаАкцептования = Дата(1, 1, 1);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если НЕ СтрокаТЧ.Управляющий = мДемниченко Тогда
				СтрокаТЧ.Управляющий 	= мДемниченко;
				Если ТекПользовательНеДемниченко Тогда
					СтрокаТЧ.Статус			= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
					СтрокаТЧ.ДатаАкцепта	= Дата(1, 1, 1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//+++АК GEYV 23.07.2015
	Если Не СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов.Пустая() Тогда
		
		СчетЗатрат = ОбщегоНазначения.ПолучитьСчет44ДляДр(СтатьяДвиженияДенежныхСредств.ОсновнаяСтатьяДоходовРасходов);
		
	КонецЕсли;
	//---АК
	//Если СтатьяДвиженияДенежныхСредств.Код="310310" Тогда
	//	БанковскийСчетКасса=Справочники.БанковскиеСчета.НайтиПоНаименованию("Прочие безналичные средства",,,Организация);
	//КонецЕсли;
	//АК БЕЛН 27.07.2016++
	ЭлементыФормы.ПериодОтработки.АвтоОтметкаНезаполненного=ОбязательностьЗаполненияПериодаОтработки();
	//АК БЕЛН 27.07.2016--
	
	//АК++ ТУГА 29.08.2016 13455
	//+++АК SUVV 2018.03.01 ИП-00017818
	//АК_СчетУчетаРасчетов = АК_КонтрольЗадолженности.СчетРасчетовПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
	АК_СчетУчетаРасчетов = АК_КонтрольЗадолженности.СчетРасчетовПоСтатьеДДС(Дата, СтатьяДвиженияДенежныхСредств);
	//---АК SUVV
	Если АК_СчетУчетаРасчетов.Пустая() Тогда
		Сообщить("Раздел учета не заполнен")
	КонецЕсли;
	//АК--  
	
КонецПроцедуры

Процедура ДатаРасходаПриИзменении(Элемент)
	
	ОбновитьНадписьЛимитПоСтатьеДДС();
	
КонецПроцедуры

Процедура ПояснениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если (НЕ ТекОбязПояснения = "")
			И НЕ Лев(Элемент.Значение, СтрДлина(ТекОбязПояснения)) = ТекОбязПояснения Тогда
		Сообщить("Отсутствует обязательная часть пояснения [" + ТекОбязПояснения + "] !");
		//СтандартнаяОбработка = Ложь;
		ЭтотОбъект.Пояснение = ТекОбязПояснения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтветственныйПриИзменении(Элемент)
	
	ЭлементыФормы.ЦФО.СписокВыбора = ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(Дата, Ответственный);
	
КонецПроцедуры

Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		
		//доработка Минеев
		Если НЕ ОдобреноАкцептантом Тогда
			Ответ = Вопрос("Вы устанавливаете акцептацию, но признак Одобрено акцептантом не установлен. Продолжить установку признака акцептации?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ЭтотОбъект.ДатаАкцептования = Дата(1, 1, 1);
				Элемент.Значение = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
		//мЕгорова 	= Справочники.Пользователи.НайтиПоНаименованию("Егорова Ольга");
		Если НЕ ПараметрыСеанса.ТекущийПользователь = мДемниченко
				И НЕ ЭтотОбъект.ТорговыеТочки.Найти(мДемниченко, "Управляющий") = Неопределено Тогда
			ЭтотОбъект.Статус 			= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
			ЭтотОбъект.ДатаАкцептования = Дата(1, 1, 1);
			Сообщить("Нет прав на акцептование заявок с акцептантом ""Демниченко Наталия""");
			Возврат;
		КонецЕсли;
		//Если ПараметрыСеанса.ТекущийПользователь = мЕгорова Тогда
		//	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
		//		Если НЕ СтрокаТЧ.Управляющий = мЕгорова Тогда
		//			ЭтотОбъект.Статус 			= Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
		//			ЭтотОбъект.ДатаАкцептования = Дата(1, 1, 1);
		//			Сообщить("Нет прав на акцептование заявок с акцептантом, отличным от ""Егорова Ольга""");
		//			Возврат;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
		Если ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные Тогда //если принимают к оплате
			//если дату оплаты пропустили
			ТекДатаСервера = ПолныеПрава.ТекущаяДатаСервера();
			Если ЭтотОбъект.ДатаРасхода < НачалоДня(ТекДатаСервера) Тогда
				Предупреждение("Дата оплаты заявки прошла. Выполнен перенос даты автоматически.", 120);
				Если ТекДатаСервера - НачалоДня(ТекДатаСервера) <= 3600 * 12 Тогда
					ЭтотОбъект.ДатаРасхода = ТекДатаСервера;
				Иначе
					ЭтотОбъект.ДатаРасхода = ТекДатаСервера + 86400;
				КонецЕсли;
			ИначеЕсли ЭтотОбъект.ДатаРасхода = НачалоДня(ТекДатаСервера) Тогда	
				Если ТекДатаСервера - НачалоДня(ТекДатаСервера) > 3600 * 12 Тогда
					Предупреждение("Данная заявка акцептована после 12:00, соответственно выплата возможна только на следующий день.", 120);
					ЭтотОбъект.ДатаРасхода = ТекДатаСервера + 86400;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		ЭтотОбъект.ДатаАкцептования = ТекущаяДата();
	Иначе
		ЭтотОбъект.ДатаАкцептования = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры


Функция ЕстьПравоАкцептаПоСтроке(ТекДанные)
	
	Если ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
		мЕгорова 	= Справочники.Пользователи.НайтиПоНаименованию("Егорова Ольга");
		Если ТекДанные.Управляющий = мДемниченко
				И НЕ ПараметрыСеанса.ТекущийПользователь = мДемниченко Тогда
			//ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
			//Сообщить("Нет прав на акцептование заявок с акцептантом ""Демниченко Наталия""");
			Возврат Ложь;
		КонецЕсли;
		Если ПараметрыСеанса.ТекущийПользователь = мЕгорова
				И НЕ ТекДанные.Управляющий = мЕгорова Тогда
			//ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
			//Сообщить("Нет прав на акцептование заявок с акцептантом, отличным от ""Егорова Ольга""");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПравоАкцептаТолькоНаличные = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.АкцептЗаявокТолькоНаНаличные, Ложь);
	
	Если ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) 
		ИЛИ (ЭтотОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличные
				И ЕстьПравоАкцептаТолькоНаличные) 
		ИЛИ РольДоступна("ПравоАкцептованияВсехЗаявокНаРасходованиеСредств")
		ИЛИ НеКонтролироватьУсловия 
		ИЛИ ТекДанные.Управляющий = ПараметрыСеанса.ТекущийПользователь
		ИЛИ (ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Машкина Олеся")
				И ТекДанные.Управляющий = Справочники.Пользователи.НайтиПоНаименованию("Несифорова Алена")) Тогда
		
		Возврат Истина;
	Иначе
		//Если ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		//	ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
		//КонецЕсли;
		//ОбщегоНазначения.СообщитьИнформациюПользователю("Недостаточно прав для акцептирования данной ТТ");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

Процедура ТорговыеТочкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если (СтатьяДвиженияДенежныхСредств.Код = "131010"
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "131011"
				ИЛИ СтатьяДвиженияДенежныхСредств.Код = "135012")
			И ТорговыеТочки.Количество() = 1 Тогда //Аренда
 		ОбщегоНазначения.СообщитьОбОшибке("По указанной статье ДДС допускается указывать только одну торговую точку");
		Отказ = Истина;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТорговыеТочкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СчетЗатрат) Тогда
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ТорговыеТочки Цикл
			Если СтрокаТЧ.ТорговаяТочка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
				ЭтотОбъект.СчетЗатрат = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Если НЕ ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант.Пустая() Тогда
			ТекДанные.Управляющий 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант;
		КонецЕсли;
		ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
		ТекДанные.Период = НачалоМесяца(?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата));
	КонецЕсли;
	
	ЭтотОбъект.СуммаДокумента = ЭтотОбъект.ТорговыеТочки.Итог("Сумма");
	
	ПересчитатьСуммуНДСДокумент();
	
	УстановитьВидимость();
	
	УстановитьПояснение();
	
КонецПроцедуры

Процедура ТорговыеТочкиПослеУдаления(Элемент)
	
	ЭтотОбъект.СуммаДокумента = ЭтотОбъект.ТорговыеТочки.Итог("Сумма");
	
	ПересчитатьСуммуНДСДокумент();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ТорговыеТочкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		Если ЗначениеЗаполнено(ТекДанные.Период) Тогда
			мТекстПериода = СтрЗаменить(Формат(ТекДанные.Период, "ДФ = ММММ_гггг"), "_", " ");
			ОформлениеСтроки.Ячейки.ПредставлениеПериода.УстановитьТекст(мТекстПериода);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТорговыеТочкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мТолькоПросмотр = НЕ ЕстьПравоАкцептаПоСтроке(ДанныеСтроки);
	ОформлениеСтроки.Ячейки.Статус.ТолькоПросмотр 		= мТолькоПросмотр;
	//ОформлениеСтроки.Ячейки.Управляющий.ТолькоПросмотр 	= мТолькоПросмотр;
	
КонецПроцедуры

Процедура ТорговыеТочкиУправляющийНачалоВыбора(Элемент, СтандартнаяОбработка)

	мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные.Управляющий = мДемниченко
			И НЕ ПараметрыСеанса.ТекущийПользователь = мДемниченко Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТорговыеТочкиУправляющийОчистка(Элемент, СтандартнаяОбработка)

	мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные.Управляющий = мДемниченко
			И НЕ ПараметрыСеанса.ТекущийПользователь = мДемниченко Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТорговыеТочкиСтатусПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//Если ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
	//	мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	//	мЕгорова 	= Справочники.Пользователи.НайтиПоНаименованию("Егорова Ольга");
	//	Если ТекДанные.Управляющий = мДемниченко
	//			И НЕ ПараметрыСеанса.ТекущийПользователь = мДемниченко Тогда
	//		ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
	//		Сообщить("Нет прав на акцептование заявок с акцептантом ""Демниченко Наталия""");
	//	КонецЕсли;
	//	Если ПараметрыСеанса.ТекущийПользователь = мЕгорова
	//			И НЕ ТекДанные.Управляющий = мЕгорова Тогда
	//		ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
	//		Сообщить("Нет прав на акцептование заявок с акцептантом, отличным от ""Егорова Ольга""");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) Тогда
	//ИначеЕсли РольДоступна("ПравоАкцептованияВсехЗаявокНаРасходованиеСредств") Тогда
	//ИначеЕсли НеКонтролироватьУсловия Тогда
	//ИначеЕсли ТекДанные.Управляющий = ПараметрыСеанса.ТекущийПользователь Тогда	
	//Иначе
	//	Если ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
	//		ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.НеАкцептована;
	//	КонецЕсли;
	//	ОбщегоНазначения.СообщитьИнформациюПользователю("Недостаточно прав для акцептирования данной ТТ");
	//КонецЕсли;
	
	Если ТекДанные.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
		ТекДанные.ДатаАкцепта = ТекущаяДата();
	Иначе
		ТекДанные.ДатаАкцепта = Дата(1, 1, 1);
	КонецЕсли;
	
	//Если ПользовательРуководительОтдела(ТекДанные.ТорговаяТочка) Тогда
	//ИначеЕсли ПользовательУправляющий(ТекДанные.ТорговаяТочка) Тогда
	//ИначеЕсли ЕстьПравоАкцептованияПоСтатьеДДС(СтатьяДвиженияДенежныхСредств) Тогда
	//ИначеЕсли РольДоступна("ПравоАкцептованияВсехЗаявокНаРасходованиеСредств") Тогда
	//ИначеЕсли ТТОбщая(ТекДанные.ТорговаяТочка) И ПользовательРуководительОтдела(ЦФО) Тогда
	//ИначеЕсли ТекДанные.Управляющий = ПараметрыСеанса.ТекущийПользователь Тогда	
	//ИначеЕсли СокрЛП(ЦФО.Код) = "ЦФО_12" //Управление по развитию
	//	И ПользовательРуководительОтдела(ЦФО) Тогда
	//Иначе
	//	ОбщегоНазначения.СообщитьИнформациюПользователю("Недостаточно прав для акцептирования данной ТТ");
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ТорговыеТочкиТорговаяТочкаПриИзменении(Элемент) Экспорт
	
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТТОбщая(ТекДанные.ТорговаяТочка) Тогда
		ТекДанные.ЦФО = ЭтотОбъект.ЦФО;
		//Если НЕ АкцептантПоСтатьеДДС = мДемниченко Тогда
		//	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант.Пустая() Тогда
		//		Если ЗначениеЗаполнено(ТекДанные.ТорговаяТочка.АкцептантЗаявок) Тогда
		//			ТекДанные.Управляющий = ТекДанные.ТорговаяТочка.АкцептантЗаявок;
		//		Иначе
		//			ТекДанные.Управляющий = ПолучитьРуководителяОтдела(ЭтотОбъект.ЦФО);
		//		КонецЕсли;	
		//	Иначе
		//		ТекДанные.Управляющий = ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант;
		//	КонецЕсли;
		//Иначе
		//	ТекДанные.Управляющий = мДемниченко;
		//КонецЕсли;	
	Иначе
		ОтборЦФО = Новый Структура;
		ОтборЦФО.Вставить("СтруктурнаяЕдиница", ТекДанные.ТорговаяТочка);
		ТекДанные.ЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.ПолучитьПоследнее(ЭтотОбъект.Дата, ОтборЦФО).ЦФО;
		//Если НЕ АкцептантПоСтатьеДДС = мДемниченко Тогда
		//	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант.Пустая() Тогда
		//		Если ЗначениеЗаполнено(ТекДанные.ТорговаяТочка.АкцептантЗаявок) Тогда
		//			ТекДанные.Управляющий = ТекДанные.ТорговаяТочка.АкцептантЗаявок;
		//		Иначе
		//			ТекДанные.Управляющий = ПолучитьУправляющегоТочки(ТекДанные.ТорговаяТочка);
		//		КонецЕсли;
		//	Иначе
		//		ТекДанные.Управляющий = ЭтотОбъект.СтатьяДвиженияДенежныхСредств.ОсновнойАкцептант;
		//	КонецЕсли;	
		//Иначе
		//	ТекДанные.Управляющий = мДемниченко;
		//КонецЕсли;	
	КонецЕсли;
	
	// акцептант
	мДемниченко = Справочники.Пользователи.НайтиПоНаименованию("Демниченко Наталия");
	АкцептантПоСтатьеДДС = ПолучитьАкцептантаПоСтатьеДДС();	
	ТекДанные.Управляющий = ПолучитьУправляющегоВСтрокеТЧТТ(ТекДанные.ТорговаяТочка, АкцептантПоСтатьеДДС, мДемниченко);
	
КонецПроцедуры

Процедура ТорговыеТочкиПредставлениеПериодаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	
	ВыбранноеЗначение = СокрЛП(Элемент.Значение);
    Если СтрДлина(ВыбранноеЗначение) = 4 Тогда

        // выбрано значение, которое соответствует смене года в списке
        Пока СтрДлина(ВыбранноеЗначение) = 4 Цикл

            //цикл продолжается до тех пор, пока мы не выберем месяц
            ВыбрГод = Число(ВыбранноеЗначение);
			мСписокВыбора = ПолучитьСписокВыбораПериодТТ(ВыбрГод);
            ВыбранноеЗначение = СокрЛП(Строка(ЭтаФорма.ВыбратьИзСписка(мСписокВыбора, Элемент)));                    
        КонецЦикла;
    КонецЕсли;

    Если НЕ ВыбранноеЗначение = "" Тогда
        НомМесяца = (Найти("янвфевмарапрмайиюниюлавгсеноктноядек", НРег(Лев(ВыбранноеЗначение, 3))) + 2) / 3; //получаем номер месяца
        ВыбрГод = Число(Прав(ВыбранноеЗначение, 4));
        ТекДанные.Период = Дата(ВыбрГод, НомМесяца, 1);
    Иначе
        ТекДанные.Период = Дата(1, 1, 1);
    КонецЕсли;	

	НачалоПериодаАренды = ТекДанные.Период;
	КонецПериодаАренды = КонецМесяца(НачалоПериодаАренды);
	
КонецПроцедуры

Процедура ТорговыеТочкиПредставлениеПериодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Период) Тогда
		мПериод = ТекДанные.Период;
	Иначе
		мПериод = ЭтотОбъект.Дата;
	КонецЕсли;
	мСписокВыбора = ПолучитьСписокВыбораПериодТТ(Год(мПериод));
	
	Элемент.СписокВыбора 	= мСписокВыбора;
	Элемент.Значение 		= СтрЗаменить(Формат(ТекДанные.Период, "ДФ = ММММ_гггг"), "_", " ");
	
КонецПроцедуры


Процедура ЗадачиПоЗаявкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = Истина;
	
	Если НЕ ЗаписатьВФорме() Тогда
		Возврат;
	КонецЕсли;
	
	обЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	обЗадача.ВидЗадачи 		= Справочники.ВидыЗадачПользователей.УточнениеПоЗаявкеНаРасходование;
	обЗадача.Дата 			= ТекущаяДата();
	обЗадача.ОбъектЗадачи 	= Ссылка;
	обЗадача.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	обЗадача.Оповещение 	= Истина;
	обЗадача.СрокОповещения = ТекущаяДата();
	обЗадача.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ОткрытьФайлИзКаталога(Знач пИмяФайла, Каталог)
	
	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	Состояние("Сохраняется файл: " + пИмяФайла);
	
	Файлы = НайтиФайлы(Каталог, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(пИмяФайла), Истина);
	Если Файлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьФайл(Файлы[0].ПолноеИмя, ИмяКаталога + "\" + пИмяФайла);
	
	Состояние("Файл сохранен как: " + пИмяФайла);
	
	РаботаСФайлами.ОткрытьФайлДополнительнойИнформации(ИмяКаталога, пИмяФайла);
	
КонецПроцедуры	

// Сохранение на диск файла и его открытие.
//
Процедура ОткрытьФайлИзХранилища(Знач пИмяФайла, Хранилище, СпособПерезаписи = "", ВопросОПерезаписи = Истина)
	
	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	Состояние("Сохраняется файл: " + пИмяФайла);
	
	пИмяФайла = ПолучитьИмяВременногоФайла(Прав(пИмяФайла, 4));
	
	Состояние("Файл сохранен как: " + пИмяФайла);
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	Если РаботаСФайлами.СохранитьФайлНаДиске(Хранилище, ИмяВременногоФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи) Тогда
		РаботаСФайлами.ОткрытьФайлДополнительнойИнформации(ИмяКаталога, пИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФайл(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = СчетНаОплату;
	ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ОткрытьФайлИзХранилища(СчетНаОплатуИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыбратьФайл()
		
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФайла.Фильтр = "Все файлы (*.*)|*.*";
	
	//АК БЕЛН 25.03.2016++
	Если ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты") и ЗначениеЗаполнено(Контрагент) Тогда
		ДиалогФайла.Каталог=РаботаСДиалогамиКлиент.ПолучитьПапкуКонтрагента(Контрагент.Наименование);	
	КонецЕсли; 
	//АК БЕЛН 25.03.2016--
	
	ВнешняяОбработка = Неопределено;
	
	Если ДиалогФайла.Выбрать() Тогда
		
		ПолноеИмяФайла = ДиалогФайла.ПолноеИмяФайла;
				
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогФайла.ПолноеИмяФайла);
	
	КомментарийКФайлу = Файл.Имя + Символы.ПС + "размер:" + Файл.Размер()+" байт; изменен:" + Файл.ПолучитьВремяИзменения() + "; сохранен в ИБ:" + ТекущаяДата();
	
	СтруктураВозврата = Новый Структура("КомментарийКФайлу,ПолноеИмяФайла,ИмяФайла", КомментарийКФайлу, ПолноеИмяФайла, Файл.Имя);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ВыбратьФайл()

// Сохранить файл
//
Процедура СохранитьФайл(Знач пИмяФайла, Хранилище, СпособПерезаписи = "")

	ИмяКаталога = "C:\Temp";//РаботаСФайлами.ПолучитьИмяКаталога();
	
	Состояние("Сохраняется файл: " + пИмяФайла);
	
	пИмяФайла = ПолучитьИмяВременногоФайла(Прав(пИмяФайла, 4));

	пИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(пИмяФайла));
	РаботаСФайлами.СохранитьФайлНаДиске(Хранилище, пИмяФайла, Ложь, СпособПерезаписи);
	
	Состояние("Файл сохранен как: " + пИмяФайла);

КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточникаЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пИмяФайла   = ЗначениеВозврата.ИмяФайла;
	
	СчетНаОплату = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	
	СчетНаОплатуИмяФайла = пИмяФайла;
	СчетНаОплатуПолноеИмяФайла   = ЗначениеВозврата.ПолноеИмяФайла;
	//ЭлементыФормы.СчетНаОплату.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточникаСохранитьФайлНаДиск(Кнопка)
	
	Каталог=ПолучитьПапкуКонтрагента();
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытия.ПолноеИмяФайла = СчетНаОплатуИмяФайла;
	ДиалогОткрытия.Каталог = Каталог;
	Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла);
	Если ЗначениеЗаполнено(Расширение) Тогда
		ДиалогОткрытия.Фильтр = Расширение + "|*." + Расширение;
	КонецЕсли;
	ДиалогОткрытия.Заголовок = "Выбор файла для сохранения";
	Если НЕ ДиалогОткрытия.Выбрать() Тогда
		Возврат;
	Иначе
		ИмяФайлаДляСохранения = ДиалогОткрытия.ПолноеИмяФайла;
		Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайлаДляСохранения);
		Если НЕ ЗначениеЗаполнено(Расширение) Тогда
			ИмяФайлаДляСохранения = ИмяФайлаДляСохранения+"."+Расширение;
		КонецЕсли;
		ДвоичныеДанные = СчетНаОплату.Получить();
		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные.Записать(ИмяФайлаДляСохранения);		
		ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
			КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
			КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
			Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
			Если Файлы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			КопироватьФайл(Файлы[0].ПолноеИмя,ИмяФайлаДляСохранения);
		КонецЕсли;
	КонецЕсли;
	//ВремХранилище = Неопределено;
	//Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
	//	ВремХранилище = СчетНаОплату;
	//ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
	//	КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
	//	КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
	//	Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
	//	Если Файлы.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	//КонецЕсли;
	//
	//СохранитьФайл(СчетНаОплатуИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Функция ПолучитьПапкуКонтрагента()
	Папка="";
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Папка=РаботаСДиалогамиКлиент.ПолучитьПапкуКонтрагента(Контрагент.Наименование);
	КонецЕсли;
	Возврат Папка;
КонецФункции // ()


Процедура КоманднаяПанельФайлаИсточникаУдалитьФайл(Кнопка)
	
	СчетНаОплату = Новый ХранилищеЗначения(Неопределено);
	СчетНаОплатуИмяФайла = "";
	СчетНаОплатуПолноеИмяФайла = "";
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1ЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пИмяФайла   = ЗначениеВозврата.ИмяФайла;
	
	РасходнаяНакладная = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	
	РасходнаяНакладнаяИмяФайла = пИмяФайла;
	Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
		ЗаписатьБезКонтроля();
	КонецЕсли;	
	//ЭлементыФормы.РасходнаяНакладная.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура ЗаписатьБезКонтроля()
	Запись=Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ЗаписатьXML(Запись,ЭтотОбъект);
	Стр=Запись.Закрыть();
	Если Заблокирован() Тогда
		Разблокировать();
	КонецЕсли;	
	ОбщегоНазначенияСервер.ЗаписатьБезКонтроляПрав(Стр);
	Прочитать();
	ЭтаФорма.Модифицированность=Ложь;
КонецПроцедуры	

Процедура КоманднаяПанельФайлаИсточника1Действие(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(РасходнаяНакладная.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = РасходнаяНакладная;
	ИначеЕсли ЗначениеЗаполнено(РасходнаяНакладнаяИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Расходные накладные\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(РасходнаяНакладнаяИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ОткрытьФайлИзХранилища(РасходнаяНакладнаяИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1СохранитьФайлНаДиск(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(РасходнаяНакладная.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = РасходнаяНакладная;
	ИначеЕсли ЗначениеЗаполнено(РасходнаяНакладнаяИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Расходные накладные\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(РасходнаяНакладнаяИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	СохранитьФайл(РасходнаяНакладнаяИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2ЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пИмяФайла   = ЗначениеВозврата.ИмяФайла;
	
	АктОбОказанииУслуг = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	
	АктОбОказанииУслугИмяФайла = пИмяФайла;
	
	Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
		ЗаписатьБезКонтроля();
	КонецЕсли;	
	
	//ЭлементыФормы.АктОбОказанииУслуг.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2Действие(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(АктОбОказанииУслуг.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = АктОбОказанииУслуг;
	ИначеЕсли ЗначениеЗаполнено(АктОбОказанииУслугИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Акт об оказании услуг\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(АктОбОказанииУслугИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ОткрытьФайлИзХранилища(АктОбОказанииУслугИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2СохранитьФайлНаДиск(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(АктОбОказанииУслуг.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = АктОбОказанииУслуг;
	ИначеЕсли ЗначениеЗаполнено(АктОбОказанииУслугИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Акт об оказании услуг\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(АктОбОказанииУслугИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	СохранитьФайл(АктОбОказанииУслугИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2УдалитьФайл(Кнопка)
	
	АктОбОказанииУслуг = Новый ХранилищеЗначения(Неопределено);
	АктОбОказанииУслугИмяФайла = "";
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1УдалитьФайл(Кнопка)
	
	РасходнаяНакладная = Новый ХранилищеЗначения(Неопределено);
	РасходнаяНакладнаяИмяФайла = "";
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3ЗаменитьФайл(Кнопка)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пИмяФайла   = ЗначениеВозврата.ИмяФайла;
	
	СчетФактураПолученный = Новый ХранилищеЗначения(Новый ДвоичныеДанные(пИмяФайла));	
	
	СчетФактураПолученныйИмяФайла = пИмяФайла;
	
	Если РольДоступна("ПрикреплениеДополнительнойИнформацииКОбъектам") Тогда
		ЗаписатьБезКонтроля();
	КонецЕсли;	
	
	//ЭлементыФормы.СчетФактураПолученный.ЦветТекста = Новый Цвет(0, 0, 0);
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3Действие(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(СчетФактураПолученный.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = СчетФактураПолученный;
	ИначеЕсли ЗначениеЗаполнено(СчетФактураПолученныйИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\СФ полученный\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетФактураПолученныйИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ОткрытьФайлИзХранилища(СчетФактураПолученныйИмяФайла, ВремХранилище, "", Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3СохранитьФайлНаДиск(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(СчетФактураПолученный.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = СчетФактураПолученный;
	ИначеЕсли ЗначениеЗаполнено(СчетФактураПолученныйИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\СФ полученный\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетФактураПолученныйИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	СохранитьФайл(СчетФактураПолученныйИмяФайла, ВремХранилище, "");
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3УдалитьФайл(Кнопка)
	
	СчетФактураПолученный = Новый ХранилищеЗначения(Неопределено);
	СчетФактураПолученныйИмяФайла = "";
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточникаПечать(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(СчетНаОплату.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = СчетНаОплату;
	ИначеЕсли ЗначениеЗаполнено(СчетНаОплатуИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Счета на оплату\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетНаОплатуИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ПечатьФайла(СчетНаОплатуИмяФайла, ВремХранилище);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника1Печать(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(РасходнаяНакладная.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = РасходнаяНакладная;
	ИначеЕсли ЗначениеЗаполнено(РасходнаяНакладнаяИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Расходные накладные\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(РасходнаяНакладнаяИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ПечатьФайла(РасходнаяНакладнаяИмяФайла, ВремХранилище);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника2Печать(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(АктОбОказанииУслуг.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = АктОбОказанииУслуг;
	ИначеЕсли ЗначениеЗаполнено(АктОбОказанииУслугИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\Акт об оказании услуг\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(АктОбОказанииУслугИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ПечатьФайла(АктОбОказанииУслугИмяФайла, ВремХранилище);
	
КонецПроцедуры

Процедура КоманднаяПанельФайлаИсточника3Печать(Кнопка)
	
	ВремХранилище = Неопределено;
	Если ТипЗнч(СчетФактураПолученный.Получить()) = Тип("ДвоичныеДанные") Тогда
		ВремХранилище = СчетФактураПолученный;
	ИначеЕсли ЗначениеЗаполнено(СчетФактураПолученныйИмяФайла) Тогда
		КаталогСохранения = Константы.КаталогХраненияФайловКартинок.Получить();
		КаталогСохранения = КаталогСохранения + ?(Прав(КаталогСохранения, 1) <> "\", "\", "") + "Файлы заявок на расход ДС\СФ полученный\";
		Файлы = НайтиФайлы(КаталогСохранения, Строка(Ссылка.УникальныйИдентификатор()) + "." + РаботаСФайлами.ПолучитьРасширениеФайла(СчетФактураПолученныйИмяФайла), Истина);
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ВремХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файлы[0].ПолноеИмя));
	КонецЕсли;
	
	ПечатьФайла(СчетФактураПолученныйИмяФайла, ВремХранилище);
	
КонецПроцедуры

Процедура ВвестиНачислениеНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
		Сообщить("Не указан договор!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НачалоПериодаАренды) Тогда
		Сообщить("Не указан период аренды!");
		Возврат;
	КонецЕсли; 
	
	Если ЭтотОбъект.ТорговыеТочки.Количество() = 0
			ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ТорговыеТочки[0].ТорговаяТочка) Тогда
		Сообщить("Не указана торговая точка!");
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговаяТочка"		, ЭтотОбъект.ТорговыеТочки[0].ТорговаяТочка); 
	Запрос.УстановитьПараметр("ФормаОплаты"			, ЭтотОбъект.ФормаОплаты); 
	Запрос.УстановитьПараметр("ПериодРегистрации"	, НачалоМесяца(ЭтотОбъект.НачалоПериодаАренды)); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка,
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.НомерСтроки
	|ИЗ
	|	Документ.НачислениеАренднойПлатыОтАрендодателей.НачислениеАренды КАК НачислениеАренднойПлатыОтАрендодателейНачислениеАренды
	|ГДЕ
	|	НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.СтруктурнаяЕдиница = &ТорговаяТочка
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.ПериодРегистрации = &ПериодРегистрации
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.ФормаОплаты = &ФормаОплаты
	|	И НачислениеАренднойПлатыОтАрендодателейНачислениеАренды.Ссылка.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если  Выборка.Следующий() Тогда
		Если Вопрос("По данной торговой точке уже проведено начисление за указанный период! <" + Выборка.Ссылка +
					">, строка № " + Выборка.НомерСтроки + ". Ввести еще одну запись?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации"	, НачалоМесяца(ЭтотОбъект.НачалоПериодаАренды)); 
	Запрос.УстановитьПараметр("ФормаОплаты"			, ЭтотОбъект.ФормаОплаты); 
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеАренднойПлатыОтАрендодателей.Ссылка
	|ИЗ
	|	Документ.НачислениеАренднойПлатыОтАрендодателей КАК НачислениеАренднойПлатыОтАрендодателей
	|ГДЕ
	|	НЕ НачислениеАренднойПлатыОтАрендодателей.ЗапретитьРедактирование
	|	И НачислениеАренднойПлатыОтАрендодателей.Проведен
	|	И НачислениеАренднойПлатыОтАрендодателей.ТипАренднойПлаты = ЗНАЧЕНИЕ(Перечисление.ТипыАренднойПлаты.ПеременнаяЧасть)
	|	И НачислениеАренднойПлатыОтАрендодателей.ФормаОплаты = &ФормаОплаты
	|	И НачислениеАренднойПлатыОтАрендодателей.ПериодРегистрации = &ПериодРегистрации						  
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеАренднойПлатыОтАрендодателей.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументНачисления = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументНачисления = Документы.НачислениеАренднойПлатыОтАрендодателей.СоздатьДокумент();
		ДокументНачисления.Дата 				= ТекущаяДата();
		ДокументНачисления.ПериодРегистрации 	= НачалоМесяца(ЭтотОбъект.НачалоПериодаАренды);
		ДокументНачисления.ТипАренднойПлаты 	= Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
		ДокументНачисления.ФормаОплаты 			= ЭтотОбъект.ФормаОплаты;
	КонецЕсли; 
	
	НоваяСтрока = ДокументНачисления.НачислениеАренды.Добавить();
	НоваяСтрока.Организация 		= ЭтотОбъект.Организация;
	НоваяСтрока.Контрагент 			= ЭтотОбъект.Контрагент;
	НоваяСтрока.ЦФО 				= ЭтотОбъект.ЦФО;
	НоваяСтрока.Договор 			= ЭтотОбъект.ДоговорКонтрагента;
	НоваяСтрока.СтруктурнаяЕдиница 	= ЭтотОбъект.ТорговыеТочки[0].ТорговаяТочка;
	НоваяСтрока.ТипАренднойПлаты 	= Перечисления.ТипыАренднойПлаты.ПеременнаяЧасть;
	НоваяСтрока.ПериодРегистрации 	= НачалоМесяца(ЭтотОбъект.НачалоПериодаАренды);	
	НоваяСтрока.Сумма 				= ЭтотОбъект.СуммаДокумента;
	
	Попытка 
		ДокументНачисления.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("В документ <" + ДокументНачисления + "> добавлена новая строка № " + НоваяСтрока.НомерСтроки + ".");
	Исключение
		Сообщить("Не удалось ввести начисление по причине: " + ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

Процедура ТипАренднойПлатыПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗаполнитьПериодВоВсехСтроках(Кнопка)
	
	НачальнаяДата = НачалоМесяца(Дата);
	Подсказка = "Введите месяц платежа";
	Если ВвестиДату(НачальнаяДата, Подсказка, ЧастиДаты.Дата)Тогда
		
		Для каждого Стр Из ЭтотОбъект.ТорговыеТочки Цикл
		
			Стр.Период = НачалоМесяца(НачальнаяДата);
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК GEYV 28.07.2015
Процедура ДействияФормыДействие(Кнопка = Неопределено)
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ не записан!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//
 	ОткрытьФорму("Документ.ПриказНаКомандировку.Форма.ФормаДокумента", Новый Структура("Основание", ЭтотОбъект.Ссылка));			
	
КонецПроцедуры

Процедура НадписьПриказНаКомандировкуНажатие(Элемент)
	
	Если ЭтоНовый() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ не записан!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПриказНаКомандировку = ОбщегоНазначения.ВернутьДокументПриказНаКомандировку(ЭтотОбъект.Ссылка);
	
	Если ПриказНаКомандировку <> Неопределено Тогда
 		ОткрытьФормуМодально("Документ.ПриказНаКомандировку.Форма.ФормаДокумента", Новый Структура("Ключ"		, ПриказНаКомандировку));			
	Иначе
 		ОткрытьФормуМодально("Документ.ПриказНаКомандировку.Форма.ФормаДокумента", Новый Структура("Основание"	, ЭтотОбъект.Ссылка));			
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры
//---АК
 
Процедура НадписьЗадолженностьНажатие(Элемент)

	ОбъектОтчета = Отчеты.АнализСубконтоФинансовый.Создать();
	//ОбъектОтчета.ДатаНач 		= НачалоМесяца(ТекущаяДата());
	//ОбъектОтчета.ДатаКон 		= ТекущаяДата();
	//ОбъектОтчета.ПоСубсчетам	= Истина;
	//
	//СписокСчетов = Новый СписокЗначений;

	//НоваяСтрока = ОбъектОтчета.Субконто.Добавить();
	//Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	НоваяСтрока.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.Контрагенты;
	//	СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПоставщикамиИПодрядчиками); 		// 60
	//	СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПокупателями); 					// 62
	//	СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками); // 76.1
	//Иначе
	//	НоваяСтрока.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.ФизическиеЛица;
	//	СписокСчетов.Добавить(ПланыСчетов.Финансовый.РасчетыСПодотчетными); 					// 71
	//КонецЕсли;
	//
	//ОбъектОтчета.ПерезаполнитьНачальныеНастройки();
	//
	//
	//ОтборОтчета = ОбъектОтчета.ПостроительОтчета.Отбор;
	//
	//Если ОтборОтчета.Найти("Счет") = Неопределено Тогда
	//	ОтборОтчета.Добавить("Счет");
	//КонецЕсли;
	//ОтборОтчета.Счет.ВидСравнения 	= ВидСравнения.ВСпискеПоИерархии;
	//ОтборОтчета.Счет.Значение 		= СписокСчетов;
	//ОтборОтчета.Счет.Использование	= Истина;
	//
	//Если ОтборОтчета.Найти("Субконто1") = Неопределено Тогда
	//	ОтборОтчета.Добавить("Субконто1");
	//КонецЕсли;
	//ОтборОтчета.Субконто1.Установить(ЭтотОбъект.Контрагент);
	
	
	ФормаОтчета = ОбъектОтчета.ПолучитьФорму();
	ФормаОтчета.КонтрагентДляРасшифровки = ЭтотОбъект.Контрагент;
	ФормаОтчета.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанель2СохранитьГрафик(Кнопка)
	
	Парам = Новый Структура();
	Парам.Вставить("Заявка", ЭтотОбъект.Ссылка);
	ОткрытьФормуМодально("Документ.ЗаявкаНаРасходованиеСредств.Форма.ФормаРедактированияГрафика", Парам);
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗаполнитьГрафик(Кнопка)
	
	Если ЭтотОбъект.ГрафикПогашенияЗайма.Количество() = 0 Тогда
		Сообщить("Для заполнения графика должна быть строка с датой первого платежа");
		Возврат;
	КонецЕсли;

	ПервыйВзнос = ЭтотОбъект.ГрафикПогашенияЗайма[0];
	ТекДата = ПервыйВзнос.ДатаПлатежа;
	Пока ЭтотОбъект.ГрафикПогашенияЗайма.Итог("Сумма") < ЭтотОбъект.СуммаДокумента Цикл
		НС = ЭтотОбъект.ГрафикПогашенияЗайма.Добавить();
		ТекДата = ДобавитьМесяц(ТекДата,1);
		НС.ДатаПлатежа 	= ТекДата;
		НС.Сумма		= ПервыйВзнос.Сумма;
	КонецЦикла;	
	Если ЭтотОбъект.ГрафикПогашенияЗайма.Итог("Сумма") <> ЭтотОбъект.СуммаДокумента Тогда
		НС.Сумма = НС.Сумма - (ЭтотОбъект.ГрафикПогашенияЗайма.Итог("Сумма") - ЭтотОбъект.СуммаДокумента);
	КонецЕсли;
	
КонецПроцедуры

//АК БЕЛН 28.03.2016++
Процедура СтатусПолученныхДокументовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекСтатус)
			И НЕ ЗначениеЗаполнено(СтатусПолученныхДокументов) Тогда
	    Сообщить("Нельзя очистить статус прикрепленных документов, если он был заполнен");
		СтатусПолученныхДокументов = ТекСтатус;
	Иначе
		ТекСтатус = СтатусПолученныхДокументов;
		ВсеДокументыВНаличии = ЗначениеЗаполнено(СтатусПолученныхДокументов);
	КонецЕсли;
	
КонецПроцедуры

//АК БЕЛН 28.03.2016--



Процедура КоманднаяПанель1АкцептоватьВсе(Кнопка)
	
	Для Каждого СтрокаТаб Из ТорговыеТочки Цикл
		Если СтрокаТаб.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			Продолжить;
		КонецЕсли;
		Если ЕстьПравоАкцептаПоСтроке(СтрокаТаб) Тогда
			СтрокаТаб.Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована;
			СтрокаТаб.ДатаАкцепта = ТекущаяДата();
		КонецЕсли;	
	КонецЦикла;
		
	УстановитьВидимость();
	
КонецПроцедуры

//АК БЕЛН 13.04.2016++
Процедура ДействияФормыПоступлениеТоваровИУслугОборудование()
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ не записан!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//
	ОбПоступ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ОбПоступ.ФлОборудование = Истина;
	ОбПоступ.Заполнить(ЭтотОбъект.Ссылка);
	
	ОбПоступ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ЗаписатьДок(Кнопка)
	
	ЭтотОбъект.НеПроверятьДатуЗапретаРедактирования = Истина;
	
	Записать(РежимЗаписиДокумента.Запись);
	ОповеститьОбИзменении(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьФормуДляРедактированияРеквизитовВЗакрытомПериоде(Кнопка)
	Если Модифицированность() Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли; 
	Если Не ЭтоНовый() Тогда
		//Парам=Новый Структура("Ключ",Ссылка);
		//ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаРедактированияДокументаВЗакрытомПериоде",Парам,ЭтаФорма);
		Ф=ЭтотОбъект.ПолучитьФорму("ФормаРедактитированияДокументаВЗакрытомПериоде",ЭтаФорма);
		Ф.Открыть();
	КонецЕсли; 

КонецПроцедуры

Процедура ДействияФормыКонтрольДЗ(Кнопка)
	
	Если Модифицированность() Тогда
		Если Вопрос("Перед выполнением операции документ должен быть записан. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Записать()
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	ОткрытьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ", Новый Структура("СписокДокументов", МассивСсылок), ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если мПроведение
			И НЕ Аванс           //НЕ Аванс - доработал Познахарёв
			И НЕ Отказ Тогда
		//Минеев доработал, если ставят признак одобрения, а акцептования еще нет, то проверять не нужно
		Если ОдобреноАкцептантом
			И НЕ Статус = Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована Тогда
			//ничего не делаем
		Иначе	
			//ФормаКонтроль =	ПолучитьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ"); // пока не проверяем
			//Если ФормаКонтроль.ПревышенЛимит(ЭтотОбъект.Ссылка, Отказ) Тогда
			//	ФормаКонтроль.Открыть();
			//	Если Отказ Тогда
			//		Сообщить("Превышение допустимого лимита дебиторской задолженности больше разрешенного  значения. Документ не проведен");
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОтчетПоТТ(Кнопка)
	
	ТекДанные = ЭлементыФормы.ТорговыеТочки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Сообщить("Выделите строку с ТТ");
		Возврат;	
	КонецЕсли; 

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Магазин", ТекДанные.ТорговаяТочка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументЗаявкаНаРасходованиеСредств.Ссылка КАК Заявка,
	|	ДокументЗаявкаНаРасходованиеСредств.Контрагент,
	|	ДокументЗаявкаНаРасходованиеСредств.Организация,
	|	ДокументЗаявкаНаРасходованиеСредств.ДоговорКонтрагента,
	|	ДокументЗаявкаНаРасходованиеСредств.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ДокументЗаявкаНаРасходованиеСредств.СуммаДокумента КАК Сумма,
	|	ВложенныйЗапрос.Услуга
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств КАК ДокументЗаявкаНаРасходованиеСредств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка КАК Заявка,
	|			КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга КАК Услуга
	|		ИЗ
	|			Документ.КомплектацияМагазинаПоСделкамСПоставщиком.УслугиПоСчетам КАК КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Услуги КАК КомплектацияМагазинаПоСделкамСПоставщикомУслуги
	|				ПО КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка = КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Ссылка
	|					И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.УИН_Строки = КомплектацияМагазинаПоСделкамСПоставщикомУслуги.УИН_Строки
	|		ГДЕ
	|			КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка.Магазин = &Магазин
	|			И НЕ КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Ссылка.ПометкаУдаления
	|			И КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка.ПринятоКОплате
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КомплектацияМагазинаПоСделкамСПоставщикомУслугиПоСчетам.Заявка,
	|			КомплектацияМагазинаПоСделкамСПоставщикомУслуги.Услуга) КАК ВложенныйЗапрос
	|		ПО ДокументЗаявкаНаРасходованиеСредств.Ссылка = ВложенныйЗапрос.Заявка
	|ГДЕ
	|	ДокументЗаявкаНаРасходованиеСредств.ПринятоКОплате
	|	И НЕ ДокументЗаявкаНаРасходованиеСредств.ПометкаУдаления";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	//
	МакетОтчета = ПолучитьМакет("ОтчетПоТТ");
	
	ТД = Новый ТабличныйДокумент;
	Обл = МакетОтчета.ПолучитьОбласть("Шапка");
	ТД.Вывести(Обл);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Обл = МакетОтчета.ПолучитьОбласть("Строка");
		ЗаполнитьЗначенияСвойств(Обл.Параметры, ВыборкаДетальныеЗаписи);
		ТД.Вывести(Обл);
	КонецЦикла;
    ТД.Показать();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Заявка на расходование средств");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	ЕстьПравоНаВвод = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ВводЗаявокНаРасходование2017, Ложь);
	Если ЭтоНовый() Тогда
		Если НЕ ЕстьПравоНаВвод Тогда
			Сообщить("Доступен только ввод заявок с формой оплаты ""НАЛИЧНЫЕ"". Для безналичных воспользуйтесь документом ""Заявка на услуги/материалы"" или обратитесь к администратору.");
			ФормаОплаты = Перечисления.ФормыОплаты.Наличные;
			ЭлементыФормы.ФормаОплаты.ТолькоПросмотр = Истина;
			//Отказ=Истина;
		КонецЕсли;
	Иначе
		Если НЕ ЕстьПравоНаВвод
				И ФормаОплаты = Перечисления.ФормыОплаты.Безналичные Тогда
			Сообщить("Доступен только ввод заявок с формой оплаты ""НАЛИЧНЫЕ"". Для безналичных воспользуйтесь документом ""Заявка на услуги/материалы"" или обратитесь к администратору.");
			//ФормаОплаты=Перечисления.ФормыОплаты.Наличные;
			ЭтаФорма.ТолькоПросмотр = Истина;
			//Отказ=Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаявлениеНаАванс(Кнопка)
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(ЭтотОбъект.Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Попытка
				ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ТабДокумент = Документы.ЗаявкаНаРасходованиеСредств.ПечатьЗаявленияНаАванс(ЭтотОбъект.Ссылка);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 0, Ложь, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), ЭтотОбъект.Ссылка);
КонецПроцедуры

//АК БЕЛН 13.04.2016++
	
ТЗДанныеПользователя = ПолучитьДанныеТекПользователя();

ОтправляемУведомление = Ложь;

НеКонтролироватьУсловия = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.НеКонтроллироватьУсловияВЗаявкеНаРасходДС, Ложь);

//ПредыдущееЗначениеПериода = "";
