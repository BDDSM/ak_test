
Функция ПолучитьОстаткиТоваровККомплектацииПоТекущейСделке()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.УИН_Этапа,
	|	ТоварыККомплектацииСделокСПоставщикамиОстатки.КоличествоОстаток КАК Нераспределено
	|ИЗ
	|	РегистрНакопления.ТоварыККомплектацииСделокСПоставщиками.Остатки(, Сделка = &Сделка) КАК ТоварыККомплектацииСделокСПоставщикамиОстатки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Процедура ЗаполнитьТабДокументовОплатыСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка КАК Заявка,
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.СтрокаСделки КАК УИН_Строки,
	|	ЕСТЬNULL(РасходИзБанка.Ссылка, РасходИзКассы.Ссылка) КАК ПлатёжныйДокумент
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.ТорговыеТочки КАК ЗаявкаНаРасходованиеСредствТорговыеТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|		ПО ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка = РасходИзКассы.ЗаявкаНаРасходованиеСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзБанка КАК РасходИзБанка
	|		ПО ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка = РасходИзБанка.ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствТорговыеТочки.Сделка = &Сделка
	|	И ЗаявкаНаРасходованиеСредствТорговыеТочки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзБанкаСтруктурныеЕдиницы.Ссылка,
	|	РасходИзБанкаСтруктурныеЕдиницы.СтрокаСделки,
	|	РасходИзБанкаСтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Документ.РасходИзБанка.СтруктурныеЕдиницы КАК РасходИзБанкаСтруктурныеЕдиницы
	|ГДЕ
	|	РасходИзБанкаСтруктурныеЕдиницы.Сделка = &Сделка
	|	И РасходИзБанкаСтруктурныеЕдиницы.Ссылка.Проведен";
	
	//
	ТаблицаДокументовОплаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	


&НаКлиенте
Процедура НастроитьГрафик(Команда)
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Сделка с поставщиком");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	МассивРеквизитов = Новый Массив;
	//ТаблицаКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("Сделка",Объект.Ссылка);
	//ТаблицаКомплектацийПоСделке.Параметры.УстановитьЗначениеПараметра("УИН_СтрокиСделки","");
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЭтапыСделки;
		
		Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		//Элементы.СтраницаГрафикОплат.Видимость=Ложь;
		//Элементы.ЭтапыСделкиПерейтиКГрафикуОплат.Доступность=Истина;
	Иначе
		//Элементы.ЭтапыСделки.ТолькоПросмотр=Истина;
		//Элементы.ЭтапыСделкиИзменитьГрафикОплат.Видимость=Истина;
		//Элементы.ЭтапыСделкиПерейтиКГрафикуОплат.Доступность=Ложь;
		Элементы.УсловияОплаты.Доступность		= Ложь;
		Элементы.Контрагент.Доступность			= Ложь;
		Элементы.БезОплаты.Доступность			= Ложь;
		Элементы.ПроизвольныеПлатежи.Доступность= Ложь;
		Если Объект.БезОплаты
			ИЛИ Объект.ПроизвольныеПлатежи Тогда
			Элементы.УсловияОплаты.Видимость		= Ложь;
			Элементы.СтраницаЭтапыСделки.Видимость	= Ложь;
			Если Объект.БезОплаты Тогда
				Элементы.ТаблицаОплатСуммаОплаты.Видимость=Ложь;
				Элементы.ТаблицаОплатЦена.Видимость=Ложь;
			КонецЕсли;	
		КонецЕсли;	
		ЗаполнитьЦеныНоменклатуры();
		ЗаполнитьТаблицуОплатСервер();
		ЗаполнитьКомплектацииПоСделке();
		Если Объект.Проведен Тогда
			ЕстьПраваРедактирования = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ИзменениеСделок, Ложь);
			Если Не ЕстьПраваРедактирования Тогда
				ЭтаФорма.ТолькоПросмотр = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	ТекстЗапроса="ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
	Запрос=новый Запрос(ТекстЗапроса);			 
	///
	Таб = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшПлатёжныхДней");
	
	ТочкаРезерв = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_100");
	//+++АК POZM 2018.06.07 ИП-00018682 
	Акцептант = Справочники.ПользователиСПравомАкцептаОплат.НайтиПоРеквизиту("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Если ЗначениеЗаполнено(Акцептант)
			И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Акцептант,"Активен") Тогда
		ЭтаФорма.АкцептированиеДоступно = Истина;
	КонецЕсли;
	Элементы.Акцептант.СписокВыбора.ЗагрузитьЗначения(Справочники.ПользователиСПравомАкцептаОплат.ПолучитьСписокАктивныхАкцептантов());
	//---АК POZM 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомплектацииПоСделке();
	ТекстЗапроса="ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка КАК Комплектация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин КАК Магазин,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Количество,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Номенклатура,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.ПлановыйСрокНачалаМонтажа,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.АктПодписан,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка = &Сделка
	|	И КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Проведен";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	//Запрос.УстановитьПараметр("УИН_СтрокиСделки",УИН);
	Запрос.УстановитьПараметр("Сделка",Объект.Ссылка);	
	ТаблицаКомплектацийПоСделке.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуКомплектацийСервер()
	ТекстЗапроса="ВЫБРАТЬ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка КАК Комплектация,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Количество,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Номенклатура,
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.НомерСтроки КАК НомерСтрокиКомплектации
	|ИЗ
	|	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	|ГДЕ
	|	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка = &Сделка";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Сделка",Объект.Ссылка);
	ТЗ=Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТЗ,"ТаблицаКомплектацийПоСделке");
КонецПроцедуры	

&НаСервере
Функция ПолучитьМассивДопРеквизитовТаблицыОплат()
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);            
	МассивКД = Новый Массив;
	МассивКД.Добавить(Тип("Дата"));
	ОписаниеТиповДата 			= Новый ОписаниеТипов(МассивКД, , , КД);
	ОписаниеТиповНеопределено 	= Новый ОписаниеТипов("Null");
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.ЭтапыСделки Цикл
		НомерСтр = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Этап"					+ НомерСтр, Новый ОписаниеТипов("Число"), "ТаблицаОплат"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("УИН_Этапа"				+ НомерСтр, Новый ОписаниеТипов("Строка"), "ТаблицаОплат"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Заявка_Этапа"			+ НомерСтр, Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеСредств"), "ТаблицаОплат"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлатежныйДокумент_Этапа"	+ НомерСтр, Новый ОписаниеТипов("ДокументСсылка.РасходИзБанка,ДокументСсылка.РасходИзКассы"), "ТаблицаОплат"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ДатаПлатежа"				+ НомерСтр, ОписаниеТиповДата, "ТаблицаОплат"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВариантОплаты"			+ НомерСтр, Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОплаты"), "ТаблицаОплат"));
	КонецЦикла;	
	
	Возврат МассивРеквизитов;
	
КонецФункции

&НаСервере
Процедура ДобавитьИРазместитьНаФормеКолонкиТаблицыОплат()
	
	МассивРеквизитов = ПолучитьМассивДопРеквизитовТаблицыОплат();
	
	ИзменитьРеквизиты(МассивРеквизитов);  
	
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		
		НомерСтр = Формат(Стр.НомерСтроки, "ЧГ=0");
		
		Группа = Элементы.Добавить("ГруппаЭтапа" + НомерСтр, Тип("ГруппаФормы"), Элементы.ТаблицаОплат);            
		Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаОплатЭтап" + НомерСтр, Тип("ПолеФормы"), Группа); 
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным 	= "ТаблицаОплат.Этап" + НомерСтр;
		Если Объект.БезОплаты Тогда
			НовыйЭлемент.Заголовок	= "БезОплаты";
			Группа.Видимость = Ложь;
		ИначеЕсли Объект.ПроизвольныеПлатежи Тогда
			НовыйЭлемент.Заголовок	= "Произвольные платежи(FIFO)";
			Группа.Видимость = Ложь;	
		ИначеЕсли Стр.ВариантОплаты = Перечисления.ВариантыОплаты.ВУказаннуюДату Тогда
			НовыйЭлемент.Заголовок	= "" + Стр.ПроцентОплаты + "% (" + Формат(Стр.ДатаОплаты, "ДФ=dd.MM.yy") + ")";
		ИначеЕсли Стр.ВариантОплаты = Перечисления.ВариантыОплаты.ВТеченииДней Тогда
			НовыйЭлемент.Заголовок	= "" + Стр.ПроцентОплаты + "% ( в течение " + СокрЛП(Стр.КоличествоДней) + " дней)";	
		ИначеЕсли Стр.ВариантОплаты = Перечисления.ВариантыОплаты.ПриПодписанииАкта Тогда
			НовыйЭлемент.Заголовок	= "" + Стр.ПроцентОплаты + "% ( При подписании акта" +
			?(Стр.КоличествоДней = 0, "", " в течение " + СокрЛП(Стр.КоличествоДней) + " дней") + ")";	
		ИначеЕсли Стр.ВариантОплаты = Перечисления.ВариантыОплаты.ПоГотовности Тогда
			НовыйЭлемент.Заголовок	= "" + Стр.ПроцентОплаты + "% ( По готовности" +
			?(Стр.КоличествоДней = 0, "", " в течение " + СокрЛП(Стр.КоличествоДней) + " дней") + ")";		
		КонецЕсли;	
		НовыйЭлемент.Ширина = 10;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "СуммаЭтапаПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаОплатДатаПлатежа" + НомерСтр, Тип("ПолеФормы"), Группа);       
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным 	= "ТаблицаОплат.ДатаПлатежа" + НомерСтр;
		НовыйЭлемент.Заголовок		= "Дата платежа";
		НовыйЭлемент.Ширина 		= 10;
		НовыйЭлемент.ТолькоПросмотр	= Истина;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДатаПлатежаПриИзменении");
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьТаблицуОплатСервер()
	
	ДобавитьИРазместитьНаФормеКолонкиТаблицыОплат();
	НераскоплектованныеОстатки = ПолучитьОстаткиТоваровККомплектацииПоТекущейСделке();
	
	//Заполняем таблицу
	ТЗОплат = РеквизитФормыВЗначение("ТаблицаОплат");
	
	КолонокГрафика = Объект.ЭтапыСделки.Количество();
	ТекущаяКолонка = 0;
	Для каждого стр из Объект.ГрафикОплат Цикл
		
		Если ТекущаяКолонка > КолонокГрафика Тогда
			ТекущаяКолонка = 0;
		КонецЕсли;
		
		Если ТекущаяКолонка=0 Тогда
			НС=ТЗОплат.Добавить();
			НС.СтруктурнаяЕдиница=Стр.СтруктурнаяЕдиница;
			НС.АктПодписан=Стр.АктПодписан;
			НС.ДатаГотовности=Стр.ДатаГотовности;
			НС.Номенклатура=Стр.Номенклатура;
			НС.Цена=Стр.Цена;
			НС.Количество=Стр.Количество;
			
			СтрокаОстатка=НераскоплектованныеОстатки.Найти(Стр.УИН_Строки,"УИН_Этапа");
			Если СтрокаОстатка<>Неопределено Тогда
				НС.Нераспределено=СтрокаОстатка.Нераспределено;
			КонецЕсли;	
			НС.ЕстьКомплектации=НС.Нераспределено<>НС.Количество;
			ТекущаяКолонка=ТекущаяКолонка+1;
			//СтруктураПоискаКомплектаций=Новый Структура;
			//СтруктураПоискаКомплектаций.Вставить("УИН_СтрокиСделки",Стр.УИН_Строки);
			//СтрокиКомплектации=ТаблицаКомплектацийПоСделке.НайтиСтроки(СтруктураПоискаКомплектаций);
			//Для каждого СтрокаКомплектации Из СтрокиКомплектации Цикл
			//	НС_Комплектации=НС.ТабКомплектацийСтроки.Добавить();
			//	НС_Комплектации.Номенклатура=СтрокаКомплектации.Номенклатура;
			//	НС_Комплектации.Количество=СтрокаКомплектации.Количество;
			//	НС_Комплектации.Комплектация=СтрокаКомплектации.Комплектация;
			//КонецЦикла;	
		КонецЕсли;	
		НомерСтр=Формат(ТекущаяКолонка,"ЧГ=0");
		НС["Этап"+НомерСтр]=Стр.СуммаОплаты;
		Если СокрЛП(Стр.УИН_Строки)="" Тогда
			Стр.УИН_Строки=Новый УникальныйИдентификатор();
			Если НомерСтр="1" Тогда
				Стр.УИН_ПервойСтроки=Стр.УИН_Строки;
			КонецЕсли;	
		КонецЕсли;	
		НС["УИН_Этапа"+НомерСтр]=Стр.УИН_Строки;
		НС["ВариантОплаты"+НомерСтр]=Объект.ЭтапыСделки[ТекущаяКолонка-1].ВариантОплаты;
		НС["ДатаПлатежа"+НомерСтр]=Стр.ДатаПлатежа;
		РассчитатьДатуПлатежаВСтрокеТаблицыОплат(НС,НомерСтр);
		НС.СуммаОплаты=НС.СуммаОплаты+Стр.СуммаОплаты;
		ТекущаяКолонка=ТекущаяКолонка+1;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТЗОплат, "ТаблицаОплат");
	
	ЗаполнитьПлатёжныеДокументыСервер();
	
	
	ОформитьУсловноеОформление();
	
КонецПроцедуры	

&НаСервере
Процедура ОформитьУсловноеОформление()
	//УсловноеОформление
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		//Жирным если есть заявка 
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатЭтап"+НомерСтр);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатСуммаОплаты");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатКоличество");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатЦена");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаОплат.Заявка_Этапа"+НомерСтр, ВидСравненияКомпоновкиДанных.Заполнено, Истина);	
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
		
		//Синим, если оплачено
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатЭтап"+НомерСтр);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаОплат.ПлатежныйДокумент_Этапа"+НомерСтр, ВидСравненияКомпоновкиДанных.Заполнено, Истина);	
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);	
		
		//Красным, если пора платить
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатЭтап"+НомерСтр);
		
		ГруппаОтбор=ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,"Неоплаченные"+НомерСтр,ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбор,
		"ТаблицаОплат.ДатаПлатежа"+НомерСтр, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, НачалоДня(ТекущаяДата()));	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбор,
		"ТаблицаОплат.ПлатежныйДокумент_Этапа"+НомерСтр, ВидСравненияКомпоновкиДанных.Равно, Неопределено);		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбор,
		"ТаблицаОплат.ДатаПлатежа"+НомерСтр, ВидСравненияКомпоновкиДанных.НеРавно, Дата(1,1,1));			
		
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);	
		
		////Недоступна  если указана точка
		//ЭлементУО = УсловноеОформление.Элементы.Добавить();
		//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатЭтап"+НомерСтр);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		//	"ТаблицаОплат.СтруктурнаяЕдиница", ВидСравненияКомпоновкиДанных.Заполнено, Истина);	
		//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
		
		
		//// Если Сумма оплачена, её менять нельзя
		//ЭлементУО = УсловноеОформление.Элементы.Добавить();
		//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаОплатЭтап"+НомерСтр);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		//	"ПлатежныйДокумент_Этапа"+НомерСтр, ВидСравненияКомпоновкиДанных.НеРавно, Неопределено);	
		//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);	
		
	КонецЦикла;
КонецПроцедуры	

&НаСервере 
Процедура РассчитатьДатуПлатежаВСтрокеТаблицыОплат(СтрокаТаблицы,Этап)
	Вариант=СтрокаТаблицы["ВариантОплаты"+Этап];
	Если Вариант=Перечисления.ВариантыОплаты.ВУказаннуюДату Тогда
		СтрокаТаблицы["ДатаПлатежа"+Этап]=Объект.ЭтапыСделки[Число(Этап)-1].ДатаОплаты;
	ИначеЕсли Вариант=Перечисления.ВариантыОплаты.ВТеченииДней И Число(Этап)>1 Тогда
		ДатаПредЭтапа=СтрокаТаблицы["ДатаПлатежа"+(Число(Этап)-1)];
		Если ЗначениеЗаполнено(ДатаПредЭтапа) Тогда
			СтрокаТаблицы["ДатаПлатежа"+Этап]=ДатаПредЭтапа+Объект.ЭтапыСделки[Число(Этап)-1].КоличествоДней*60*60*24;
		Иначе
			СтрокаТаблицы["ДатаПлатежа"+Этап]=Дата(1,1,1);
		КонецЕсли;	
	ИначеЕсли Вариант=Перечисления.ВариантыОплаты.ПриПодписанииАкта Тогда	
		Если ЗначениеЗаполнено(СтрокаТаблицы.АктПодписан) Тогда
			СтрокаТаблицы["ДатаПлатежа"+Этап]=СтрокаТаблицы.АктПодписан+Объект.ЭтапыСделки[Число(Этап)-1].КоличествоДней*60*60*24;
		Иначе
			СтрокаТаблицы["ДатаПлатежа"+Этап]=Дата(1,1,1);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура  СуммаЭтапаПриИзменении(Элемент)
	СуммаПоСтроке=0;
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		СуммаПоСтроке=СуммаПоСтроке+Элементы.ТаблицаОплат.ТекущиеДанные["Этап"+НомерСтр];
	КонецЦикла;	
	ТекущиеДанные.СуммаОплаты=СуммаПоСтроке;
	ТекущиеДанные.Цена=ТекущиеДанные.СуммаОплаты/ТекущиеДанные.Количество;
	ПересчитатьСуммыЭтаповВТекущейСтрокеСервер()
КонецПроцедуры 

&НаКлиенте
Процедура  ДатаПлатежаПриИзменении(Элемент)
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаОплатСуммаОплатыПриИзменении(Элемент)
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	ТекущиеДанные.Цена=ТекущиеДанные.СуммаОплаты/ТекущиеДанные.Количество;
	РассчитатьСуммыЭтапов();
КонецПроцедуры
&НаКлиенте
Процедура РассчитатьСуммыЭтапов()
	Если Объект.БезОплаты ИЛИ Объект.ПроизвольныеПлатежи Тогда
		Элементы.ТаблицаОплат.ТекущиеДанные["Этап1"]=Элементы.ТаблицаОплат.ТекущиеДанные.СуммаОплаты;
		Возврат;
	КонецЕсли;	
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	Сумма=Элементы.ТаблицаОплат.ТекущиеДанные.СуммаОплаты;
	Распределено=0;
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		Элементы.ТаблицаОплат.ТекущиеДанные["Этап"+НомерСтр]=Окр(Сумма*Стр.ПроцентОплаты/100,0);
		Распределено=Распределено+Элементы.ТаблицаОплат.ТекущиеДанные["Этап"+НомерСтр];
	КонецЦикла;	
	Если Распределено<>Сумма Тогда
		Элементы.ТаблицаОплат.ТекущиеДанные["Этап"+НомерСтр]=Элементы.ТаблицаОплат.ТекущиеДанные["Этап"+НомерСтр]+(Сумма-Распределено);
	КонецЕсли;	
	ПересчитатьСуммыЭтаповВТекущейСтрокеСервер();
КонецПроцедуры 	

&НаСервере
Процедура ПересчитатьСуммыЭтаповВТекущейСтрокеСервер()
	Объект.СуммаСделки=ТаблицаОплат.Итог("СуммаОплаты");
КонецПроцедуры	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//АК БЕЛН 25.04.2016++
	//ОбДок=РеквизитФормыВЗначение("Объект");
	Сч=0;
	Для каждого Стр Из ТаблицаОплат Цикл
		Сч=Сч+1;
		Если Не ЗначениеЗаполнено(Стр.ДатаГотовности) Тогда
			Сообщ=Новый СообщениеПользователю;
			Сообщ.Текст="Не заполнена дата готовности в строке "+Строка(Сч);
			Сообщ.Поле="ТаблицаОплат["+Строка(Сч-1)+"].ДатаГотовности";
			Сообщ.КлючДанных=Объект.Ссылка;
			Сообщ.Сообщить();
			Отказ=Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	//АК БЕЛН 25.04.2016--
	
	Если НЕ Объект.БезОплаты Тогда
		Для Каждого Стр Из Объект.ЭтапыСделки Цикл
			Если Стр.ВариантОплаты = Перечисления.ВариантыОплаты.ВУказаннуюДату Тогда
				Если Не ЗначениеЗаполнено(Стр.ДатаОплаты)Тогда
					Сообщить("Не заполнена дата оплаты для этапа сделки номер "+Стр.НомерСтроки);
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если Не Отказ Тогда
		ПеренестиДанныеФормыВДанныеДокументаСервер(ТекущийОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеФормыВДанныеДокументаСервер(ТекущийОбъект)
	Если ТекущийОбъект=Неопределено Тогда
		ТекущийОбъект=Объект;
	КонецЕсли;	
	Док=ТекущийОбъект;
	Док.ГрафикОплат.Очистить();
	Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
		УИН_ПервойСтроки="";
		Для каждого ЭтапОплаты Из Объект.ЭтапыСделки Цикл
			НомерСтр=Формат(ЭтапОплаты.НомерСтроки,"ЧГ=0");
			НС=Док.ГрафикОплат.Добавить();
			НС.СтруктурнаяЕдиница=СтрокаОплаты.СтруктурнаяЕдиница;
			НС.АктПодписан=СтрокаОплаты.АктПодписан;
			НС.ДатаГотовности=СтрокаОплаты.ДатаГотовности;
			НС.Номенклатура=СтрокаОплаты.Номенклатура;
			НС.Количество=СтрокаОплаты.Количество;
			НС.Цена=СтрокаОплаты.Цена;
			НС.НомерСтрокиГрафика=НомерСтр;
			НС.СуммаОплаты=СтрокаОплаты["Этап"+НомерСтр];
			НС.ДатаПлатежа=СтрокаОплаты["ДатаПлатежа"+НомерСтр];
			НС.УИН_Строки=СтрокаОплаты["УИН_Этапа"+НомерСтр];
			Если НомерСтр="1" Тогда
				УИН_ПервойСтроки=НС.УИН_Строки;
			КонецЕсли;	
			НС.УИН_ПервойСтроки=УИН_ПервойСтроки;
			
		КонецЦикла;	
	КонецЦикла;
	//ЗначениеВРеквизитФормы(Док,"Объект");
КонецПроцедуры	

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "Этап") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ТаблицаОплат.ТекущиеДанные;
		Этап = Сред(Поле.Имя, 17, 1);
		ПлатёжныйДокумент = ТекущиеДанные["ПлатежныйДокумент_Этапа" + Этап];
		Заявка = ТекущиеДанные["Заявка_Этапа" + Этап];
		Если ПлатёжныйДокумент<>Неопределено Тогда
			ОткрытьЗначение(ПлатёжныйДокумент);
		ИначеЕсли ЗначениеЗаполнено(Заявка) Тогда
			ОткрытьЗначение(Заявка);
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			Режим = Новый СписокЗначений;
			Режим.Добавить(1, "Создать новую заявку");
			Режим.Добавить(2, "Привязать заявку к этапу");
			Режим.Добавить(3, "Отмена");
			Текст = "ru = """";";
			Ответ = Вопрос(НСтр(Текст), Режим, 0);
			Если Ответ = 3 Тогда
				Возврат;
			КонецЕсли; 
			Если Ответ = 2 Тогда
				
				Записать();
				
				ФормаВыбора = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаВыбора");
				//ФормаВыбора.Параметры.РежимВыбора = Истина;
				ФормаВыбора.ДокументСписок.Отбор.Контрагент.Установить(Объект.Контрагент);
				Заявка = ФормаВыбора.ОткрытьМодально();
				Если ЗначениеЗаполнено(Заявка) Тогда
					ПривязатьЗаявкуКЭтапуНаСервере(Заявка,ТекущиеДанные["УИН_Этапа" + Этап]);
				КонецЕсли;
				Сообщить("Заявка привязана к этапу "+Этап);
				Если ТекущиеДанные.ЕстьКомплектации Тогда
					Сообщить("По данной строке есть документы-комплектации, их нужно перепровести вручную!");
				КонецЕсли;	
				//ЭлементОтбора = ФормаВыбора.ДокументСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));       
				//ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("Контрагент");       
				//ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;       
				//ЭлементОтбора.ПравоеЗначение     = Объект.Контрагент;       
				//ЭлементОтбора.Использование      = Истина;       
				//ДанныеЗаполнения=СобратьЗаявкуПоВыделеннымСтрокамСервер(Этап);
				//ФормаДокумента=ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаОбъекта");
				//ЗаполнитьЗначенияСвойств(ФормаДокумента,ДанныеЗаполнения);
				//ФормаДокумента.КонтрагентПриИзменении(ФормаДокумента.ЭлементыФормы.Контрагент);
				//Для каждого стр из ДанныеЗаполнения.ТорговыеТочки Цикл
				//	НС=ФормаДокумента.ТорговыеТочки.Добавить();
				//	ЗаполнитьЗначенияСвойств(НС,Стр);
				//	ФормаДокумента.ЭлементыФормы.ТорговыеТочки.ТекущаяСтрока = НС;
				//	ФормаДокумента.ТорговыеТочкиТорговаяТочкаПриИзменении(Неопределено);
				//КонецЦикла;	
				//ФормаДокумента.ОткрытьМодально();
				ЗаполнитьПлатёжныеДокументыСервер();
				
			ИначеЕсли Ответ = 1 Тогда
				
				Записать();
				
				Если ТекущиеДанные.ЕстьКомплектации Тогда
					Сообщить("По данной строке есть документы-комплектации, их нужно перепровести вручную!");
				КонецЕсли;	
				
				ДанныеЗаполнения = СобратьЗаявкуПоВыделеннымСтрокамСервер(Этап);
				
				ФормаДокумента = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаОбъекта");
				ЗаполнитьЗначенияСвойств(ФормаДокумента, ДанныеЗаполнения);
				
				ФормаДокумента.КонтрагентПриИзменении(ФормаДокумента.ЭлементыФормы.Контрагент);
				ФормаДокумента.ОрганизацияПриИзменении(ФормаДокумента.ЭлементыФормы.Организация);
				
				Для каждого СтрокаТЧ из ДанныеЗаполнения.ТорговыеТочки Цикл
					НоваяСтрока = ФормаДокумента.ТорговыеТочки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					ФормаДокумента.ЭлементыФормы.ТорговыеТочки.ТекущаяСтрока = НоваяСтрока;
					ФормаДокумента.ТорговыеТочкиТорговаяТочкаПриИзменении(Неопределено);
				КонецЦикла;
				
				ФормаДокумента.ОткрытьМодально();
				
				ЗаполнитьПлатёжныеДокументыСервер();
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлатёжныеДокументыСервер()
	
	ЗаполнитьТабДокументовОплатыСервер();
	
	ТЗОплат = РеквизитФормыВЗначение("ТаблицаОплат");
	Для каждого СтрокаДокументовОплаты Из ТаблицаДокументовОплаты Цикл
		СтрокаОплат = ТЗОплат.Найти(СтрокаДокументовОплаты.УИН_Строки);
		Если СтрокаОплат<>Неопределено Тогда
			Для каждого Стр Из Объект.ЭтапыСделки Цикл
				НомерСтр = Формат(Стр.НомерСтроки, "ЧГ=0");
				Если СтрокаОплат["УИН_Этапа" + НомерСтр] = СтрокаДокументовОплаты.УИН_Строки Тогда
					СтрокаОплат["Заявка_Этапа"				+ НомерСтр] = СтрокаДокументовОплаты.Заявка;
					СтрокаОплат["ПлатежныйДокумент_Этапа"	+ НомерСтр] = СтрокаДокументовОплаты.ПлатёжныйДокумент;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ТЗОплат, "ТаблицаОплат");
	
КонецПроцедуры	

&НаСервере
Функция СобратьЗаявкуПоВыделеннымСтрокамСервер(НомерЭтапа)
	
	//Формируем заявку
	СтруктураЗаявки = Новый Структура;	
	СтруктураЗаявки.Вставить("Дата"				, ТекущаяДата());
	СтруктураЗаявки.Вставить("ФормаОплаты"		, Перечисления.ФормыОплаты.Безналичные);
	СтруктураЗаявки.Вставить("Контрагент"		, Объект.Контрагент);
	СтруктураЗаявки.Вставить("ИнициаторЗаявки"	, Объект.Ответственный.ФизЛицо);
	СтруктураЗаявки.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("120110"));
	СуммаЗаявки = 0;
	МассивТТ = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.ТаблицаОплат.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаОплат.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСтроки["Заявка_Этапа" + НомерЭтапа]) Тогда
			Продолжить;
		КонецЕсли;	
		СтруктураСтроки=Новый Структура;
		СтруктураСтроки.Вставить("ТорговаяТочка"		, ДанныеСтроки.СтруктурнаяЕдиница);
		СтруктураСтроки.Вставить("Сумма"				, ДанныеСтроки["Этап" 		+ НомерЭтапа]);
		СтруктураСтроки.Вставить("Сделка"				, Объект.Ссылка);
		СтруктураСтроки.Вставить("СтрокаСделки"			, ДанныеСтроки["УИН_Этапа"	+ НомерЭтапа]);
		СтруктураСтроки.Вставить("ДатаПлатежаПоСделке"	, ДанныеСтроки["ДатаПлатежа"+ НомерЭтапа]);
		
		СтруктураСтроки.Вставить("ДатаАкцепта"			, ТекущаяДата());
		СтруктураСтроки.Вставить("Период"				, НачалоМесяца(ТекущаяДата()));
		СтруктураСтроки.Вставить("Статус"				, Перечисления.СтатусыЗаявокНаРасходованиеСредств.Акцептована);
		МассивТТ.Добавить(СтруктураСтроки);
		СуммаЗаявки = СуммаЗаявки + СтруктураСтроки.Сумма;
	КонецЦикла;	
	СтруктураЗаявки.Вставить("ТорговыеТочки"	, МассивТТ);
	СтруктураЗаявки.Вставить("СуммаДокумента"	, СуммаЗаявки);
	
	Возврат СтруктураЗаявки;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОплатВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		Для каждого Стр Из Объект.ЭтапыСделки Цикл
			НомСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
			Элементы.ТаблицаОплат.ТекущиеДанные["УИН_Этапа"+НомСтр]=Новый УникальныйИдентификатор();
			Элементы.ТаблицаОплат.ТекущиеДанные["ВариантОплаты"+НомСтр]=Стр.ВариантОплаты;
			Элементы.ТаблицаОплат.ТекущиеДанные["Заявка_Этапа"+НомСтр]=неопределено;
			Элементы.ТаблицаОплат.ТекущиеДанные["ПлатежныйДокумент_Этапа"+НомСтр]=неопределено;
		КонецЦикла;
		
		ТаблицаОплатАктПодписанПриИзменении(Неопределено);
		ПересчитатьСуммыЭтаповВТекущейСтрокеСервер();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатАктПодписанПриИзменении(Элемент)
	СтрокаТаблицы=Элементы.ТаблицаОплат.ТекущиеДанные;
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		Этап=Формат(Стр.НомерСтроки,"ЧГ=0");
		Вариант=СтрокаТаблицы["ВариантОплаты"+Этап];
		Если СокрЛП(Вариант)="В указанную дату" Тогда
			СтрокаТаблицы["ДатаПлатежа"+Этап]=Объект.ЭтапыСделки[Число(Этап)-1].ДатаОплаты;
			//ИначеЕсли Вариант=Перечисления.ВариантыОплаты.ВТеченииДней И Число(Этап)>1 Тогда
		ИначеЕсли СокрЛП(Вариант)="В течении (дней)" И Число(Этап)>1 Тогда
			ДатаПредЭтапа=СтрокаТаблицы["ДатаПлатежа"+(Число(Этап)-1)];
			Если ЗначениеЗаполнено(ДатаПредЭтапа) Тогда
				СтрокаТаблицы["ДатаПлатежа"+Этап]=ДатаПредЭтапа+Объект.ЭтапыСделки[Число(Этап)-1].КоличествоДней*60*60*24;
			Иначе
				СтрокаТаблицы["ДатаПлатежа"+Этап]=Дата(1,1,1);
			КонецЕсли;	
		ИначеЕсли СокрЛП(Вариант)="При подписании акта" Тогда	
			Если ЗначениеЗаполнено(СтрокаТаблицы.АктПодписан) Тогда 
				СтрокаТаблицы["ДатаПлатежа"+Этап]=СтрокаТаблицы.АктПодписан+Объект.ЭтапыСделки[Число(Этап)-1].КоличествоДней*60*60*24;
			Иначе
				СтрокаТаблицы["ДатаПлатежа"+Этап]=Дата(1,1,1);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	АктПодписанПриИзмененииСервер()
КонецПроцедуры

&НаСервере
Процедура АктПодписанПриИзмененииСервер()
	
КонецПроцедуры	

&НаКлиенте
Процедура ПерейтиКГрафикуОплат(Команда)
	
	Если Объект.ЭтапыСделки.Итог("ПроцентОплаты")<>100 Тогда
		Сообщить("Итог процентов по этапам сделки не равен 100. Этапы сделки заполнены неверно, невозможно построить график оплат");
		Возврат;
	КонецЕсли;	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Перезаполнить график оплат?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОплатСервер();
	
	Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаГрафикОплат;
	
	Элементы.СтраницаЭтапыСделки.ТолькоПросмотр	= Истина;
	Элементы.СтраницаГрафикОплат.Видимость		= Истина;
	
	Элементы.ЭтапыСделкиИзменитьГрафикОплат.Видимость		= Истина;
	Элементы.ЭтапыСделкиПерейтиКГрафикуОплат.Доступность	= Ложь;
	Элементы.ЭтапыСделкиИзменитьГрафикОплат.Доступность		= Истина;
	//ТаблицаОплатАктПодписанПриИзменении(Неопределено);
	
	//ЗаполнитьДанныеВСтрокахТаблицыОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВНовойСтрокеТаблицыОплат()
	
	НС=Элементы.ТаблицаОплат.ТекущиеДанные;
	Если НС=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		НС["УИН_Этапа"+НомСтр]=Новый УникальныйИдентификатор();
		НС["ВариантОплаты"+НомСтр]=Стр.ВариантОплаты;
		НС["Заявка_Этапа"+НомСтр]=неопределено;
		НС["ПлатежныйДокумент_Этапа"+НомСтр]=неопределено;
	КонецЦикла;
	
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьДобавленныеКолонкиТаблицыОплат()
	
	МассивРеквизитов=ПолучитьМассивДопРеквизитовТаблицыОплат();
	
	МассивКУдалению=Новый Массив;
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		МассивКУдалению.Добавить(Реквизит.Путь+"."+Реквизит.Имя);
	КонецЦикла;	
	
	ИзменитьРеквизиты(,МассивКУдалению);  
	
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		Эл=Элементы.Найти("ГруппаЭтапа"+НомерСтр);
		Если Эл<>Неопределено Тогда
			Элементы.Удалить(Эл);            
		КонецЕсли;
	КонецЦикла;
	
	//Объект.ГрафикОплат.Очистить();
	
	Кол=УсловноеОформление.Элементы.Количество();
	Для й=5 По Кол Цикл
		УсловноеОформление.Элементы.Удалить(4);
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьЭтапыСделки(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "При изменении этапов сделки данные графика оплат будут потеряны, продолжить?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЭтапыСделки.ТолькоПросмотр=Ложь;
	
	//Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаЭтапыСделки;
	Элементы.СтраницаЭтапыСделки.ТолькоПросмотр=Ложь;
	
	Элементы.СтраницаГрафикОплат.Видимость=Ложь;
	Элементы.ЭтапыСделкиПерейтиКГрафикуОплат.Доступность=Истина;
	Элементы.ЭтапыСделкиИзменитьГрафикОплат.Доступность=Ложь;
	УдалитьДобавленныеКолонкиТаблицыОплат();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатКоличествоПриИзменении(Элемент)
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	ТекущиеДанные.СуммаОплаты=ТекущиеДанные.Количество*ТекущиеДанные.Цена;
	ТаблицаОплатСуммаОплатыПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатЦенаПриИзменении(Элемент)
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	ТекущиеДанные.СуммаОплаты=ТекущиеДанные.Количество*ТекущиеДанные.Цена;
	РассчитатьСуммыЭтапов();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуГрафикаОплат(Команда)
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) Тогда
		Сообщить("По строке указан магазин, изменение запрещено!");
		Возврат;
	КонецЕсли;	
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		Если ЗначениеЗаполнено(ТекущиеДанные["Заявка_Этапа"+НомерСтр]) Тогда
			Сообщить("По строке есть заявка на оплату, изменение запрещено!");
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	Количество=1;
	Если ВвестиЧисло(Количество,"Введите количество которое будет в новой строке") Тогда
		ТекущиеДанные.Количество=ТекущиеДанные.Количество-Количество;
		ТаблицаОплатКоличествоПриИзменении(Неопределено);
		
		НС=ТаблицаОплат.Добавить();
		НС.Номенклатура=ТекущиеДанные.Номенклатура;
		НС.Количество=Количество;
		
		НС.Цена=ТекущиеДанные.Цена;
		НС.СуммаОплаты=НС.Цена*НС.Количество;
		Элементы.ТаблицаОплат.ТекущаяСтрока=НС.ПолучитьИдентификатор();
		Для каждого Стр Из Объект.ЭтапыСделки Цикл
			НомСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
			НС["УИН_Этапа"+НомСтр]=Новый УникальныйИдентификатор();
			НС["ВариантОплаты"+НомСтр]=Стр.ВариантОплаты;
		КонецЦикла;
		ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
		ТаблицаОплатАктПодписанПриИзменении(Неопределено);
		ТаблицаОплатСуммаОплатыПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатПередУдалением(Элемент, Отказ)
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	//Если ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) И Объект.Контрагент<>ПредопределенноеЗначение("Справочник.Контрагенты.БУ_Оборудование") Тогда
	//	Сообщить("По строке указан магазин, изменение запрещено!");
	//	Отказ=Истина;
	//КонецЕсли;
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		Если ЗначениеЗаполнено(ТекущиеДанные["ПлатежныйДокумент_Этапа"+НомерСтр]) Тогда
			Сообщить("По строке есть платёжный документ, удаление запрещено!");
			Отказ=Истина;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ПриИзмененииКонтрагентаСервер();
	Если Объект.Контрагент=Справочники.Контрагенты.БУ_Оборудование Тогда
		Объект.БезОплаты=Истина;
		БезОплатыПриИзменении(Неопределено);
	Иначе
		УсловияОплатыПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	ТекстЗапроса="ВЫБРАТЬ
	|	ДействующиеУсловияОплатыПоСделкамСПоставщикамиСрезПоследних.Условия
	|ИЗ
	|	РегистрСведений.ДействующиеУсловияОплатыПоСделкамСПоставщиками.СрезПоследних(&ДатаДокумента, Контрагент = &Контрагент) КАК ДействующиеУсловияОплатыПоСделкамСПоставщикамиСрезПоследних";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.УсловияОплаты=Выборка.Условия;
		//УсловияОплатыПриИзмененииСервер();
		
	КонецЕсли;	
	ЗаполнитьЦеныНоменклатуры();
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЦеныНоменклатуры()
	ТекстЗапроса="ВЫБРАТЬ
	|	ЦеныПоставщиковСрезПоследних.Номенклатура,
	|	ЦеныПоставщиковСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаДокумента, Поставщик = &Контрагент) КАК ЦеныПоставщиковСрезПоследних";
	Запрос=Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	ТЗ=Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТЗ,"ЦеныНоменклатуры");
	
КонецПроцедуры	

&НаСервере
Процедура УсловияОплатыПриИзмененииСервер()
	ЗаполнитьЭтапыСделкиПоУсловиям();
	ПерестроитьТаблицуОплат();
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЭтапыСделкиПоУсловиям()
	Объект.ЭтапыСделки.Очистить();
	Если Объект.БезОплаты Или Объект.ПроизвольныеПлатежи Тогда
		НС=Объект.ЭтапыСделки.Добавить();
		НС.ПроцентОплаты=100;
		НС.ВариантОплаты=Перечисления.ВариантыОплаты.ВУказаннуюДату;
	Иначе	
		Для каждого Стр из Объект.УсловияОплаты.ЭтапыСделки Цикл
			НС=Объект.ЭтапыСделки.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Стр);
			
			ТекущиеДанные = НС;
			Если ТекущиеДанные.ВариантОплаты = Перечисления.ВариантыОплаты.ВУказаннуюДату И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОплаты) тогда
				
				ТекДата = Объект.Дата;
				ДатаРасхода = Объект.Дата;
				НачалоНеделиДаты = НачалоНедели(ТекДата);
				Если ТекДата > НачалоНеделиДаты + 2*86400 + 11*3600 Тогда		
					МинДатаРасхода = НачалоНеделиДаты + 8*86400;
				ИначеЕсли (ТекДата > НачалоНеделиДаты + 11*3600)
					И НЕ ТекДата > НачалоНеделиДаты + 2*86400 + 11*3600 Тогда
					МинДатаРасхода = НачалоНеделиДаты + 3*86400;
				ИначеЕсли НЕ ТекДата > НачалоНеделиДаты + 11*3600 Тогда		
					МинДатаРасхода = НачалоНеделиДаты + 86400;
				КонецЕсли;		
				Если ДатаРасхода < МинДатаРасхода Тогда
					
					ДатаРасхода = МинДатаРасхода;
					ТекущиеДанные.ДатаОплаты = ДатаРасхода;
					
				Иначе
					Если НЕ МожноУстановитьДатуКакДатуРасхода(ДатаРасхода) Тогда
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	КонтрагентыСУсловиями=ВыбратьКонтрагентовСУсловиями();
	ФормаВыбора=ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУправляемая",,ЭтаФорма);
	ФормаВыбора.Параметры.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;       
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));       
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("Ссылка");       
	ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.ВСписке;       
	ЭлементОтбора.ПравоеЗначение     = КонтрагентыСУсловиями;       
	ЭлементОтбора.Использование      = Истина;       
КонецПроцедуры

&НаСервере 
Функция ВыбратьКонтрагентовСУсловиями()
	ТекстЗапроса="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияОплатыПоСделкамСПоставщиками.Владелец
	|ИЗ
	|	Справочник.УсловияОплатыПоСделкамСПоставщиками КАК УсловияОплатыПоСделкамСПоставщиками
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = ЗНАЧЕНИЕ(Справочник.Контрагенты.БУ_Оборудование)";
	Запрос=Новый Запрос(ТекстЗапроса);
	Контрагенты=Новый СписокЗначений;
	Контрагенты.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец"));
	
	Возврат Контрагенты;
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораУправляемая" Тогда
		Объект.Контрагент = ВыбранноеЗначение;
		ПриИзмененииКонтрагентаСервер();
		Если Объект.Контрагент=Справочники.Контрагенты.БУ_Оборудование Тогда
			Объект.БезОплаты=Истина;
			БезОплатыПриИзменении(Неопределено);
		КонецЕсли;	
		
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбораУправляемая" Тогда
		ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
		ТаблицаОплатНоменклатураПриИзменении(Неопределено);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявкаНаРасходованиеСредств.ФормаВыбора" Тогда	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент<>Справочники.Контрагенты.БУ_Оборудование Тогда
		СтандартнаяОбработка=Ложь;
		НоменклатураПоставщика=ВыбратьНоменклатуруПоставщика();
		ФормаВыбора=ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",,ЭтаФорма);
		ФормаВыбора.Параметры.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
		ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;       
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));       
		ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("Ссылка");       
		ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.ВСписке;       
		ЭлементОтбора.ПравоеЗначение     = НоменклатураПоставщика;       
		ЭлементОтбора.Использование      = Истина;       
	КонецЕсли;	
КонецПроцедуры

&НаСервере 
Функция ВыбратьНоменклатуруПоставщика()
	ТЗ=РеквизитФормыВЗначение("ЦеныНоменклатуры");
	Список=Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Номенклатура"));
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ТаблицаОплатНоменклатураПриИзменении(Элемент)
	ЗаполнитьЦенуВТекущейСтрокеТЧ();
	ТаблицаОплатЦенаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуВТекущейСтрокеТЧ()
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	СтрокиНоменклатуры=ЦеныНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура",ТекущиеДанные.Номенклатура));
	Если СтрокиНоменклатуры.Количество()>0 Тогда
		ТекущиеДанные.Цена=СтрокиНоменклатуры[0].Цена;
		ТекущиеДанные.СуммаОплаты=ТекущиеДанные.Количество*ТекущиеДанные.Цена;
	КонецЕсли;	
КонецПроцедуры	



&НаКлиенте
Процедура ЗаменитьФайл(Команда)
	
	СтруктураВозврат = ОткрытьФормуМодально("Документ.СделкаСПоставщиком.Форма.ФормаВыбораФайла");
	
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		
		Для Каждого ЭлементСписка Из СтруктураВозврат.СписокФайлов Цикл
			//Файл = Новый Файл(СтруктураВозврат.ИмяФайла);
			Файл = Новый Файл(ЭлементСписка.Значение);
			Если Файл.Существует() Тогда
				АдресХранилища = "";
				//ПоместитьФайл(АдресХранилища,, Файл.ПолноеИмя,, Новый УникальныйИдентификатор);
				АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый УникальныйИдентификатор);
				
				ДобавитьФайлНаСервере(АдресХранилища, Файл.Имя, Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПросмотрФайла(Команда)
	
	ТекущаяСтрокаИд = Элементы.Файлы.ТекущаяСтрока;
	ПечатьФайла(ТекущаяСтрокаИд, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаДиск(Команда)
	
	ТекущаяСтрокаИд = Элементы.Файлы.ТекущаяСтрока;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	//Фильтр 									= "txt|*.txt";
	//ДиалогСохраненияФайла.Фильтр 				= Фильтр;
	ДиалогСохраненияФайла.Заголовок   		= "Выберите каталог для сохранения договора";
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		
		ПутьКФайлу = ДиалогСохраненияФайла.Каталог;
		
		ТекДанные = Объект.Файлы.НайтиПоИдентификатору(ТекущаяСтрокаИд);
		ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(ХранилищеЗначенияСервер(ТекущаяСтрокаИд));
		
		Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанныеИзХранилища.Записать(ПутьКФайлу +"\" + ТекДанные.ИмяФайла);
		КонецЕсли;
		
	КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФайлаКоманда(Команда)
	ТекущаяСтрокаИд = Элементы.Файлы.ТекущаяСтрока;
	ПечатьФайла(ТекущаяСтрокаИд);		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	ТекущаяСтрокаИд = Элементы.Файлы.ТекущаяСтрока;	
	Объект.Файлы.Удалить(ТекущаяСтрокаИд);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФайла(Идентификатор, СразуПечать = Истина) Экспорт   	
	
	ТекущиеДанные = Объект.Файлы.НайтиПоИдентификатору(Идентификатор);
	пИмяФайла = ТекущиеДанные.ИмяФайла;
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(ХранилищеЗначенияСервер(Идентификатор));
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
			//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
			//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		//Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
		//	пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
		//	пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
		////ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
		////ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
		////	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
		//ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\mspaint.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
		//	пПрограмма = """C:\Windows\system32\notepad.exe"" ""пИмяФайла""";
		//ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
		//	пПрограмма = """C:\Program Files (x86)\Foxit Software\Foxit PhantomPDF\Foxit PhantomPDF.exe"" ""пИмяФайла""";
		//Иначе
		//	ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;
	
	ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Файл.Расширение);
	//ДвоичныеДанные = пХранилище.Получить();
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;	
	КонецЕсли;    	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлНаСервере(АдресХранилища, ИмяФайла, ИмяФайлаПолное) 
	
	ИмяКаталога = "\\server00\Temp";
	
	Расширешие = "";
	
	Если Найти(НРег(ИмяФайла), ".doc") > 0 Тогда
		Расширешие = ".doc"; 	
	ИначеЕсли Найти(НРег(ИмяФайла), ".docx") > 0 Тогда
		Расширешие = ".docx";	
	ИначеЕсли Найти(НРег(ИмяФайла), ".xls") > 0 Тогда  		
		Расширешие = ".xls";
	ИначеЕсли Найти(НРег(ИмяФайла), ".jpg") > 0 Тогда
		Расширешие = ".jpg";
	ИначеЕсли Найти(НРег(ИмяФайла), ".jpeg") > 0 Тогда
		Расширешие = ".jpeg";
	ИначеЕсли Найти(НРег(ИмяФайла), ".pdf") > 0 Тогда	
		Расширешие = ".pdf";
	КонецЕсли;
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Расширешие);
	//ДвоичныеДанные = пХранилище.Получить();  
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		//ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		ЭтотОбъект = РеквизитФормыВЗначение("Объект");
		
		НовСтрока = ЭтотОбъект.Файлы.Добавить();
		НовСтрока.ХранилищеФайла 	= Новый ХранилищеЗначения(ДвоичныеДанныеИзХранилища);
		НовСтрока.ИмяФайла 			= ИмяФайла;
		НовСтрока.ИмяФайлаПолное 	= ИмяФайлаПолное;
		
		ЗначениеВДанныеФормы(ЭтотОбъект, Объект);
		
		Элементы.Файлы.Обновить();
	КонецЕсли;  
	
КонецПроцедуры


&НаСервере
Функция ХранилищеЗначенияСервер(ИдентификаторСтроки)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущиеДанные = ЭтотОбъект.Файлы[ИдентификаторСтроки]; 
	
	Возврат ПоместитьВоВременноеХранилище(ТекущиеДанные.ХранилищеФайла.Получить(), Новый УникальныйИдентификатор);	
	
КонецФункции


&НаКлиенте
Процедура ТаблицаОплатПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьФильтрыВЗависимыхСписках",0.5,Истина);
	//ПодключитьОбработчикОжидания("ОбновитьЕстьКомплектация",1,Истина);
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьФильтрыВЗависимыхСписках()
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	Укомплектовано=0;
	Если ТекущиеДанные<>Неопределено И ТекущиеДанные.Свойство("УИН_Этапа1") Тогда
		УстановитьФильтрыВЗависимыхСпискахСервер(ТекущиеДанные.УИН_Этапа1);
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте 
Процедура ОбновитьЕстьКомплектация()
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьФильтрыВЗависимыхСпискахСервер(УИН)
	//Возврат;
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка КАК Комплектация,
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Ссылка.Магазин КАК Магазин,
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Количество,
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Номенклатура,
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.ПлановыйСрокНачалаМонтажа,
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.АктПодписан
	//			 |ИЗ
	//			 |	Документ.КомплектацияМагазинаПоСделкамСПоставщиком.Комплектация КАК КомплектацияМагазинаПоСделкамСПоставщикомКомплектация
	//			 |ГДЕ
	//			 |	КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.УИН_СтрокиСделки = &УИН_СтрокиСделки
	//			 |	И КомплектацияМагазинаПоСделкамСПоставщикомКомплектация.Сделка = &Сделка";
	//Запрос=Новый Запрос(ТекстЗапроса);			 
	//Запрос.УстановитьПараметр("УИН_СтрокиСделки",УИН);
	//Запрос.УстановитьПараметр("Сделка",Объект.Ссылка);	
	//ТаблицаКомплектацийПоСделке.Загрузить(Запрос.Выполнить().Выгрузить());
	Если УИН="" Тогда 
		УИН="11";
	КонецЕсли;	
	ОтборСтрок=Новый ФиксированнаяСтруктура("УИН_СтрокиСделки",УИН);
	Элементы.ТаблицаКомплектацийПоСделке.ОтборСтрок=ОтборСтрок;
	СтрокиКомплектации=ТаблицаКомплектацийПоСделке.НайтиСтроки(Новый Структура("УИН_СтрокиСделки",УИН));
	Укомплектовано=0;
	Для Каждого СтрокаКомплектации Из СтрокиКомплектации Цикл
		Укомплектовано=Укомплектовано+СтрокаКомплектации.Количество;
	КонецЦикла;	
КонецПроцедуры	


&НаКлиенте
Процедура ТаблицаКомплектацийПоСделкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные=Элементы.ТаблицаКомплектацийПоСделке.ТекущиеДанные;
	ОткрытьЗначение(ТекущиеДанные.Комплектация);
КонецПроцедуры


&НаКлиенте
Процедура УсловияОплатыПриИзменении(Элемент)
	УсловияОплатыПриИзмененииСервер();
	Для Каждого Стр Из ТаблицаОплат Цикл
		Элементы.ТаблицаОплат.ТекущаяСтрока=Стр.ПолучитьИдентификатор();
		ЗаполнитьДанныеВНовойСтрокеТаблицыОплат();
		ТаблицаОплатСуммаОплатыПриИзменении(Неопределено);
		ТаблицаОплатАктПодписанПриИзменении(Неопределено);
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура УсловияОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТаблицаДокументовОплаты.Количество()>0 Тогда
		Сообщить("По документу введены документы оплаты, изменение условий недоступно");
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;	
	Если Объект.ЭтапыСделки.Количество()>0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Этапы и спецификация сделки будут перезаполнены в документе. Продолжить?"";"
		+ " en = ""Do you want to continue?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка=Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ПеренестиДанныеФормыВДанныеДокументаСервер(Неопределено);
	УдалитьДобавленныеКолонкиТаблицыОплат();
	
КонецПроцедуры


&НаКлиенте
Процедура ЭтапыСделкиПередНачаломИзменения(Элемент, Отказ)
	//Если Объект.ГрафикОплат.Количество()>0 Тогда
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Текст = "ru = ""Спецификация сделки будут перезаполнены в документе. Продолжить?"";"
	//		 + " en = ""Do you want to continue?""";
	//	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		СтандартнаяОбработка=Ложь;
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЭтапыСделкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ЭтапыСделкиПриИзменении(Элемент)
	//ПерестроитьТаблицуОплат();
КонецПроцедуры

&НаСервере
Процедура ПерестроитьТаблицуОплат()
	
	ДобавитьИРазместитьНаФормеКолонкиТаблицыОплат();
	
	//Заполняем таблицу
	ТЗОплат=РеквизитФормыВЗначение("ТаблицаОплат");
	ТЗОплат.Очистить();
	
	Для каждого стр из Объект.ГрафикОплат Цикл
		//Если ТекущаяКолонка>КолонокГрафика Тогда
		//	ТекущаяКолонка=0;
		//КонецЕсли;	
		Если Стр.УИН_Строки=Стр.УИН_ПервойСтроки Тогда
			НС=ТЗОплат.Добавить();
			НС.СтруктурнаяЕдиница=Стр.СтруктурнаяЕдиница;
			НС.АктПодписан=Стр.АктПодписан;
			НС.ДатаГотовности=Стр.ДатаГотовности;
			НС.Номенклатура=Стр.Номенклатура;
			НС.Цена=Стр.Цена;
			НС.Количество=Стр.Количество;
			НС.СуммаОплаты=НС.Цена*НС.Количество;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТЗОплат,"ТаблицаОплат");
	
	
	
	ЗаполнитьПлатёжныеДокументыСервер();
	
	
	ОформитьУсловноеОформление();
	
	
КонецПроцедуры	


&НаКлиенте
Процедура ЭтапыСделкиПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ЭтапыСделкиДатаОплатыПриИзменении(Элемент)
	ПереписатьЗаголовкиТаблицыОплат();
	Для Каждого Стр Из ТаблицаОплат Цикл
		Элементы.ТаблицаОплат.ТекущаяСтрока=Стр.ПолучитьИдентификатор();
		ТаблицаОплатСуммаОплатыПриИзменении(Неопределено);
		ТаблицаОплатАктПодписанПриИзменении(Неопределено);
	КонецЦикла;	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЭтапыСделкиКоличествоДнейПриИзменении(Элемент)
	ПереписатьЗаголовкиТаблицыОплат();
	Для Каждого Стр Из ТаблицаОплат Цикл
		Элементы.ТаблицаОплат.ТекущаяСтрока=Стр.ПолучитьИдентификатор();
		ТаблицаОплатСуммаОплатыПриИзменении(Неопределено);
		ТаблицаОплатАктПодписанПриИзменении(Неопределено);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПереписатьЗаголовкиТаблицыОплат()
	Для каждого Стр Из Объект.ЭтапыСделки Цикл
		НомерСтр=Формат(Стр.НомерСтроки,"ЧГ=0");
		ИмяЭлемента="ТаблицаОплатЭтап"+НомерСтр;
		Элемент=Элементы.Найти(ИмяЭлемента);
		Если Стр.ВариантОплаты=Перечисления.ВариантыОплаты.ВУказаннуюДату Тогда
			Элемент.Заголовок=""+Стр.ПроцентОплаты+"%"+"("+Формат(Стр.ДатаОплаты,"ДФ=dd.MM.yy")+")";
		ИначеЕсли Стр.ВариантОплаты=Перечисления.ВариантыОплаты.ВТеченииДней Тогда
			Элемент.Заголовок=""+Стр.ПроцентОплаты+"%"+"( в течение "+СокрЛП(Стр.КоличествоДней)+" дней)";	
		ИначеЕсли Стр.ВариантОплаты=Перечисления.ВариантыОплаты.ПриПодписанииАкта Тогда
			Элемент.Заголовок=""+Стр.ПроцентОплаты+"%"+"( При подписании акта"+?(Стр.КоличествоДней=0,""," в течение "+СокрЛП(Стр.КоличествоДней)+" дней")+")";	
		ИначеЕсли Стр.ВариантОплаты=Перечисления.ВариантыОплаты.ПоГотовности Тогда
			Элемент.Заголовок=""+Стр.ПроцентОплаты+"%"+"( По готовности"+?(Стр.КоличествоДней=0,""," в течение "+СокрЛП(Стр.КоличествоДней)+" дней")+")";		
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатСтруктурнаяЕдиницаПриИзменении(Элемент)
	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) Тогда
		ТекущиеДанные.СтруктурнаяЕдиница=ТочкаРезерв;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ПодключитьОбработчикОжидания("УстановитьФильтрыВЗависимыхСписках",0.5,Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура БезОплатыПриИзменении(Элемент)
	Если Объект.БезОплаты Тогда
		Элементы.УсловияОплаты.Видимость=Ложь;
		Элементы.СтраницаЭтапыСделки.Видимость=Ложь;
		Элементы.ТаблицаОплатСуммаОплаты.Видимость=Ложь;
		Элементы.ТаблицаОплатЦена.Видимость=Ложь;
		Объект.ПроизвольныеПлатежи=Ложь;
		Объект.УсловияОплаты=ПредопределенноеЗначение("Справочник.УсловияОплатыПоСделкамСПоставщиками.ПустаяСсылка");
		УсловияОплатыПриИзменении(Неопределено);
		//Объект.ЭтапыСделки.Очистить();
	Иначе
		Элементы.УсловияОплаты.Видимость=Истина;
		Элементы.СтраницаЭтапыСделки.Видимость=Истина;
		Элементы.ТаблицаОплатСуммаОплаты.Видимость=Истина;
		Элементы.ТаблицаОплатЦена.Видимость=Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьЗаявкуНаОплату(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПривязатьЗаявкуКЭтапуНаСервере(Заявка,УИН_Строки)
	
	Док = Заявка.ПолучитьОбъект();
	Для каждого СтрокаТЧ Из Док.ТорговыеТочки Цикл
		СтрокаТЧ.Сделка			= Объект.Ссылка;
		СтрокаТЧ.СтрокаСделки	= УИН_Строки;
	КонецЦикла;	
	
	Попытка
		Док.Записать(?(Док.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроизвольныеПлатежиПриИзменении(Элемент)
	Если Объект.ПроизвольныеПлатежи Тогда
		Элементы.УсловияОплаты.Видимость=Ложь;
		Элементы.СтраницаЭтапыСделки.Видимость=Ложь;
		Объект.БезОплаты=Ложь;
		Объект.УсловияОплаты=ПредопределенноеЗначение("Справочник.УсловияОплатыПоСделкамСПоставщиками.ПустаяСсылка");
		УсловияОплатыПриИзменении(Неопределено);
		//Объект.ЭтапыСделки.Очистить();
	Иначе
		Элементы.УсловияОплаты.Видимость=Истина;
		Элементы.СтраницаЭтапыСделки.Видимость=Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтоборажатьКомплектацииНажатие(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ТаблицаКомплектацийПоСделке.Видимость = ОтображатьКомплектации;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
	
КонецПроцедуры

&НаКлиенте
Процедура ОтоборажатьКомплектацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаОплату(Команда)
	//Если Найти(Поле.Имя,"Этап")>0 Тогда
	//	СтандартнаяОбработка=Ложь;
	//	ТекущиеДанные=Элементы.ТаблицаОплат.ТекущиеДанные;
	//	Этап=Сред(Поле.Имя,17,1);
	//	ПлатёжныйДокумент=ТекущиеДанные["ПлатежныйДокумент_Этапа"+Этап];
	//	Заявка=ТекущиеДанные["Заявка_Этапа"+Этап];
	//	Если ПлатёжныйДокумент<>Неопределено Тогда
	//		ОткрытьЗначение(ПлатёжныйДокумент);
	//	ИначеЕсли ЗначениеЗаполнено(Заявка) Тогда
	//		ОткрытьЗначение(Заявка);
	//	Иначе
	//		Режим = РежимДиалогаВопрос.ДаНет;
	//		Текст = "ru = ""Привязать заявку к этапу?"";";
	//		Ответ = Вопрос(НСтр(Текст), Режим, 0);
	//		Если Ответ = КодВозвратаДиалога.Нет Тогда
	//			Возврат;
	//		КонецЕсли; 
	//		Записать();
	//		ФормаВыбора=ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаВыбора");
	//		//ФормаВыбора.Параметры.РежимВыбора = Истина;
	//		ФормаВыбора.ДокументСписок.Отбор.Контрагент.Установить(Объект.Контрагент);
	//		Заявка=ФормаВыбора.ОткрытьМодально();
	//		Если ЗначениеЗаполнено(Заявка) Тогда
	//			ПривязатьЗаявкуКЭтапуНаСервере(Заявка,ТекущиеДанные["УИН_Этапа"+Этап]);
	//		КонецЕсли;
	//		Сообщить("Заявка привязана к этапу "+Этап);
	//		Если ТекущиеДанные.ЕстьКомплектации Тогда
	//			Сообщить("По данной строке есть документы-комплектации, их нужно перепровести вручную!");
	//		КонецЕсли;	
	//		//ЭлементОтбора = ФормаВыбора.ДокументСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));       
	//		//ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("Контрагент");       
	//		//ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;       
	//		//ЭлементОтбора.ПравоеЗначение     = Объект.Контрагент;       
	//		//ЭлементОтбора.Использование      = Истина;       
	//		//ДанныеЗаполнения=СобратьЗаявкуПоВыделеннымСтрокамСервер(Этап);
	//		//ФормаДокумента=ПолучитьФорму("Документ.ЗаявкаНаРасходованиеСредств.ФормаОбъекта");
	//		//ЗаполнитьЗначенияСвойств(ФормаДокумента,ДанныеЗаполнения);
	//		//ФормаДокумента.КонтрагентПриИзменении(ФормаДокумента.ЭлементыФормы.Контрагент);
	//		//Для каждого стр из ДанныеЗаполнения.ТорговыеТочки Цикл
	//		//	НС=ФормаДокумента.ТорговыеТочки.Добавить();
	//		//	ЗаполнитьЗначенияСвойств(НС,Стр);
	//		//	ФормаДокумента.ЭлементыФормы.ТорговыеТочки.ТекущаяСтрока = НС;
	//		//	ФормаДокумента.ТорговыеТочкиТорговаяТочкаПриИзменении(Неопределено);
	//		//КонецЦикла;	
	//		//ФормаДокумента.ОткрытьМодально();
	//		ЗаполнитьПлатёжныеДокументыСервер();
	//	КонецЕсли;	
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСделкиВариантОплатыПриИзменении(Элемент)
	
КонецПроцедуры

Функция МожноУстановитьДатуКакДатуРасхода(ДатаВыполняемойПроверки)
	//Если ДопускаетсяЛюбаяДатаПлатежа Тогда
	//	Возврат Истина;
	//КонецЕсли;	
	Если ДеньНедели(ДатаВыполняемойПроверки) = 2
		ИЛИ ДеньНедели(ДатаВыполняемойПроверки) = 4 Тогда
		ПлатёжныеДни = КэшПлатёжныхДней.НайтиСтроки(Новый Структура("ДатаКалендаря",ДатаВыполняемойПроверки));
		Возврат ПлатёжныеДни.Количество()>0;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ТекстЗапроса="ВЫБРАТЬ
	             |	ЦеныПоставщиковСрезПоследних.Номенклатура,
	             |	ЦеныПоставщиковСрезПоследних.Цена КАК ЦенаВСправочнике,
	             |	СделкаСПоставщикомГрафикОплат.Цена КАК ЦенаВДокументе
	             |ИЗ
	             |	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&НаДату, Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СделкаСПоставщиком.ГрафикОплат КАК СделкаСПоставщикомГрафикОплат
	             |		ПО ЦеныПоставщиковСрезПоследних.Номенклатура = СделкаСПоставщикомГрафикОплат.Номенклатура
	             |			И (СделкаСПоставщикомГрафикОплат.УИН_ПервойСтроки = СделкаСПоставщикомГрафикОплат.УИН_Строки)
	             |ГДЕ
	             |	ЦеныПоставщиковСрезПоследних.Цена <> СделкаСПоставщикомГрафикОплат.Цена
	             |	И СделкаСПоставщикомГрафикОплат.Ссылка = &Сделка";
				 
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("НаДату",Объект.Дата);
	Запрос.УстановитьПараметр("Поставщик",Объект.Контрагент);
	Запрос.УстановитьПараметр("Сделка",Объект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		Если УчетнаяЗапись = Неопределено Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
		КонецЕсли;
		//////////////////
		Письмо = Новый ИнтернетПочтовоеСообщение;
		
		Письмо.Тема 			= "Контрагент: "+Объект.Контрагент +". Обнаружено отклонение цен в сделке от заданных для поставщика по документу "+Объект.Ссылка;
		
		Письмо.Отправитель 		=  "retail.e@vkusvill.ru";
		Письмо.ИмяОтправителя 	=  "retail.e@vkusvill.ru";
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = "pozm@automacon.ru";	
		
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = "sp@vkusvill.ru";	
		//
		ЕстьУвеличение = Ложь;		
		
		ТекстПисьма = Письмо.Тексты.Добавить();
		ТекстПисьма.ТипТекста 	= ТипТекстаПочтовогоСообщения.HTML;
		
		ТекстХТМЛ = "<table border><tr align='center'><td>Номенклатура</td><td>Цена в справочнике</td><td>Цена в документе</td></tr>";

		Пока Выборка.Следующий() Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<tr>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.Номенклатура) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(Выборка.ЦенаВСправочнике) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(Выборка.ЦенаВДокументе, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "</tr>";
			Если Выборка.ЦенаВСправочнике<Выборка.ЦенаВДокументе Тогда
				ЕстьУвеличение = Истина;
			КонецЕсли;	
		КонецЦикла;
		ТекстХТМЛ = ТекстХТМЛ + "</table>";
		
		ТекстПисьма.Текст = ТекстХТМЛ;
		
		Если ЕстьУвеличение Тогда
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = "r@vkusvill.ru";	
		КонецЕсли;	
				
		Почта = Новый ИнтернетПочта;
		Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Почта.Подключиться(Профиль);	
		Почта.Послать(Письмо);
		Почта.Отключиться();
		
		///////////////////////////////
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			ТД.Файл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			//
			//НоваяСтрока = ПрикрепленныеФайлы.Добавить();
			//НоваяСтрока.Файл = СсылкаНаФайл;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	//СпрОбъект.УстановитьНовыйКод("0");
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	Если Лев(НРег(РасширениеРезультата),4)=".doc" Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	Иначе	
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	КонецЕсли;	
	Если ЗначениеЗаполнено(Константы.АК_КаталогДляРаспознаванияФайлов.Получить()) = Истина Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("ОтправлятьНаРаспознование", Истина);
	КонецЕсли;	
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ПрикрепленныеФайлыФайлОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ТД.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	Если Лев(НРег(ФайлСсылка.Расширение),4)=".doc" Тогда
		Картинка = Новый ДвоичныеДанные(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Иначе	
		Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	КонецЕсли;	
	
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//+++АК POZM 2018.03.21 ИП-00018186
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.ПрикрепленныеФайлы.Количество() = 0 И НЕ Объект.Проведен Тогда
			Отказ = Истина;
			Сообщить("Проведение документа без вложений запрещено");
		ИначеЕсли Объект.ПрикрепленныеФайлы.Количество() > 0 И Не ЗначениеЗаполнено(Объект.ПрикрепленныеФайлы[0].Файл) И НЕ Объект.Проведен Тогда
			Отказ = Истина;
			Сообщить("Проведение документа без вложений запрещено");	
		Иначе
			СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.ПрикрепленныеФайлы[0].Файл);
			ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
			Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
				ЗапуститьПриложение(ИмяФайла);
				Сообщить("Сумма сделки = "+Объект.ГрафикОплат.Итог("СуммаОплаты")+", прошу проверить с вложенным документом ");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	

	
	//---АК POZM 	
КонецПроцедуры


&НаКлиенте
Процедура ПрикрепленныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЭтаФорма.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ТД = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
		СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(ТД.Файл);
		ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
		Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
			ЗапуститьПриложение(ИмяФайла);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

