
&НаСервереБезКонтекста
Функция ПолучитьТехнолога(мНоменклатура, мХарактеристика)
	
	МассивФизЛиц = ОбщегоНазначенияСервер.ПолучитьФизЛицТипаРолиИсполнителя(ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству,
					мНоменклатура, мХарактеристика, null, null, ТекущаяДата(), Неопределено, Истина);
	Если МассивФизЛиц.Количество() > 0 Тогда
		Возврат МассивФизЛиц[0];
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
    КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Проверка качества товаров");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	//+++АК SHEP 20170803 ИП-00016394
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПоставщик = ПараметрыСеанса.ТекущийКонтрагент;
	ЭтоПоставщик = ЗначениеЗаполнено(ТекущийПоставщик);
	
	Если ЭтоПоставщик Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Если НЕ ТолькоПросмотр Тогда
			МассивДоступныхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФормаПровестиИЗакрыть,Ответ,ВыбратьФайлПротоколаВебКлиент1");
			Для Каждого Элемент Из Элементы Цикл
				Если Элемент.Видимость И МассивДоступныхЭлементов.Найти(Элемент.Имя) = Неопределено Тогда
					
					ТипЭлемента = Тип(Элемент);
					Если ТипЭлемента = Тип("ГруппаФормы") Тогда
						Продолжить;
					ИначеЕсли ТипЭлемента = Тип("ДекорацияФормы") Тогда
						Продолжить;
					ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") И Элемент.Доступность Тогда
						Элемент.Доступность = Ложь;
					ИначеЕсли НЕ Элемент.ТолькоПросмотр Тогда
						Элемент.ТолькоПросмотр = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.ГруппаРезультатСтраницы.ТекущаяСтраница = Элементы.СтраницаОтвет;
		Элементы.Ответ.АктивизироватьПоУмолчанию = Истина;
		
	КонецЕсли;
	//---АК SHEP 20170803
	
	ПолучитьОстаткиНаТорговыхТочках();
	УправлениеФормой();
	ОбновитьHTML();
	
	Если НЕ Объект.СделанаРассылка Тогда
		ПроверитьНеобходимостьРассылки();
	КонецЕсли;
	
	//+++АК ILIK 2018.07.06 ИП-00018897
	УстановитьВидимостьПротоколаПроверки();
	//---АК ILIK
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если РольДоступна("Технолог")
			И НЕ РольДоступна("ПолныеПрава")
			И НЕ РольДоступна("ПроверкаКачестваТоваров")
			И НЕ РольДоступна("ПроверкаКачестваТоваровВебКлиент") Тогда
		Для каждого Эл Из Элементы Цикл
			Попытка
				Эл.ТолькоПросмотр = Истина;
			Исключение
			КонецПопытки; 	
		КонецЦикла;
		Элементы.ВыбратьФайлПротоколаВебКлиент.Доступность	= Ложь;
		Элементы.УдалитьФайлПротокола.Доступность			= Ложь;
		Элементы.ДатаПовторнойПроверки.ТолькоПросмотр		= Ложь;
		ЭтоТехнолог = Истина;
	КонецЕсли;
	
	//+++АК SHEP 2018.12.12 ИП-00018753.05
	ОтборЛентыСообщений = ПроверкаКачестваТоваровЛентаСообщений.Отбор;
	ОбщегоНазначенияКлиентСервер.УстановитьНедоступныйЭлементОтбора(ОтборЛентыСообщений, "Ссылка", ТекущийОбъект.Ссылка);
	//---АК SHEP 2018.12.12
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Ушли от гостов, проверка не нужна
	
	//Если ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) И Не ЗаполненГостТу() 
	//	И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЖурналаПроверкиКачестваТоваров.НеобходимаПроверка") Тогда
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для проверки у характеристики необходимо заполнить поле ""ГОСТ/ТУ""",, "ХарактеристикаНоменклатуры","Объект", Отказ);	
	//	
	//КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЖурналаПроверкиКачестваТоваров.ПроверкаВыполнена") Тогда
		
		// Пока убрал т.к. стало числовое поле и может быть значение 0
		
		//// Проверим заполнение всех полей "результат"
		//ОшибкаЗаполненияРезультата = НайтиОшибкиЗаполненияРезультата();
		//Если ОшибкаЗаполненияРезультата Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не во всех строках указан результат проверки",, "СоставПоказателей","Объект", Отказ);	
		//КонецЕсли;
		
		// Проверим наличие файла проверки
		ОшибкаЗаполненияФайлаПроверки = ПустаяСтрока(Объект.ИмяФайла);
		
		//+++АК LAGP 2018.03.28 ИП-00018207 В случая когда документ сформирован для внутренней лаборатории, протокол не обязателен.
		//Если ОшибкаЗаполненияФайлаПроверки Тогда
		//+++АК ILIK 2018.07.20 ИП-00018897
		//Если ОшибкаЗаполненияФайлаПроверки И НЕ (ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории")) Тогда
		Если ОшибкаЗаполненияФайлаПроверки И НЕ (ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории") Или ЭтоВнутренняяЛаборатория()) Тогда
		//---АК ILIK
		//---АК LAGP				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан файл протокола проверки",, "ИмяФайла", "Объект", Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЭтоПоставщик Тогда
		УправлениеФормойКлиент();
	КонецЕсли;
	
	//+++АК LAGP 2018.03.13 ИП-00017097.06 В документах созданных на основании документа "Задание лаборатории", в поле "Лаборатория" прописывается "Внутренняя лаборатория"
	//+++АК LAGP 2018.04.13 ИП-00018390 Решено отказаться от надписи и использовать контрагента "Вкусвилл" для документов внутренней лаборатории
	//Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории") Тогда
	//	ЭтаФорма.Элементы.Лаборатория.Видимость 				 = Ложь;
	//	ЭтаФорма.Элементы.НадписьВнутренняяЛаборатория.Видимость = Истина;		
	//КонецЕсли;	
	//---АК LAGP
	
	//+++АК CISA 2018.11.08 ИП-00020059
	Если Параметры.Ключ.Пустая() И НЕ Объект.ДокументОснование.Пустая() И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории") Тогда
		СписокЛабораторий = Новый СписокЗначений;
    	МассивЛабораторий = Объект.ДокументОснование.Лаборатории.ВыгрузитьКолонку("Лаборатория");
		СписокЛабораторий.ЗагрузитьЗначения(МассивЛабораторий);
		ВыбЛаборатория = СписокЛабораторий.ВыбратьЭлемент("Выберите лабораторию");
		Если ВыбЛаборатория <> Неопределено Тогда
			Объект.Лаборатория = ВыбЛаборатория.Значение;
		КонецЕсли;
	    //ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборЛабораторииИзСписка", ЭтаФорма, Параметры), СписокЛабораторий, Элементы.Лаборатория);
	КонецЕсли;
	//---АК CISA
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтаФорма.ФлРассылки Тогда
		СделатьРассылку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЭтаФорма.ФлРассылки Тогда
		
		Объект.СделанаРассылка = Истина;
		Модифицированность	= Истина;
		ФлРассылки			= Ложь;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры


Процедура НоменклатураПриИзмененииСервер()
	
	// Если по товару только 1 активная характеристика, то подставим ее по умолчанию
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Неактивная
	|	И ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Объект.ХарактеристикаНоменклатуры = Результат.Ссылка;
	КонецЕсли;
	
	////+++АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	//Если ЗначениеЗаполнено(Объект.Номенклатура.Технолог) Тогда
	//	Объект.Технолог = Объект.Номенклатура.Технолог;
	//КонецЕсли;
	////---АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииСервер();
	
	ПолучитьОстаткиНаТорговыхТочках();
	ОбновитьHTML();
	
	Объект.Технолог = ПолучитьТехнолога(Объект.Номенклатура, Объект.ХарактеристикаНоменклатуры);
	
	//+++АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	Объект.Производитель = "";
	НайтиПроизводителя();
	//---АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ПолучитьОстаткиНаТорговыхТочках();
	ПерезаполнитьПоказателиНаСервере();
	ОбновитьHTML();
	
	Объект.Технолог = ПолучитьТехнолога(Объект.Номенклатура, Объект.ХарактеристикаНоменклатуры);
	
	//+++АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	НайтиПроизводителя();
	//---АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПоказателейМаркерПриИзменении(Элемент)
	
	ПроверитьНеобходимостьРассылки();
	СформироватьСписокНарушений();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ПроверитьНеобходимостьРассылки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПоказателейПоказательПриИзменении(Элемент)
	
	СформироватьСписокНарушений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПоказателейНарушениеПриИзменении(Элемент)
	
	СформироватьСписокНарушений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПоказателейПередУдалением(Элемент, Отказ)
	
	СформироватьСписокНарушений();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура ОбновитьОстатки(Команда)
	
	ПолучитьОстаткиНаТорговыхТочках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоказатели(Команда)
	
	Если Объект.СоставПоказателей.Количество() > 0 Тогда
		
		Ответ = Вопрос("Показатели будут очищены! Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПерезаполнитьПоказателиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьФайлРезультатаПроверки(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
		Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(Объект.ИмяФайлаСРасширением);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());
		Если ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь) Тогда
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	
	#Иначе
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайла, ПоместитьФайлВоВременноеХранилище());
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			
			ПолученныеФайлы = Новый Массив;
			
			ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДВ.Заголовок = "Укажите каталог для скачивания...";
			
			Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДВ, Истина) Тогда	
				
				ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
				ДвоичныеДанные = ПолучитьИзвременногохранилища(ПолученныеФайлы[0].Хранение);
				
				ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПротоколаВебКлиент(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
		
		ДиалогФайла.МножественныйВыбор = Ложь;
		ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
		
		Если ДиалогФайла.Выбрать() Тогда
			
			ПолноеИмяФайла   = ДиалогФайла.ПолноеИмяФайла;
			ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
			Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
			
			АдресВременногоХранилища = "";
			Если ПоместитьФайл(АдресВременногоХранилища, ПолноеИмяФайла,, Ложь)Тогда
				ЗаписатьФайлНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение);
			Иначе 
				Сообщить("Не удалось добавить файл.");
			КонецЕсли;
			
		КонецЕсли;
		
	#Иначе	
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			Режим = РежимДиалогаВыбораФайла.Открытие;
			ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
			
			ДиалогФайла.МножественныйВыбор = Ложь;
			ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
			
			Если ДиалогФайла.Выбрать() Тогда
				
				ПолноеИмяФайла = ДиалогФайла.ПолноеИмяФайла;
				ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
				
				Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
				Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
				
				//
				ПомещаемыеФайлы = Новый Массив;
				ПомещаемыеФайлы.Добавить(Описание);
				
				//
				ПомещенныеФайлы = Новый Массив;
				
				Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
					СохранитьФайлПротоколаНаСервере(ПомещенныеФайлы, Расширение, ИмяФайлаСРасширением);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
	
	#КонецЕсли
	Объект.ДатаПрикрепления=ТекущаяДата();
	ПроверитьНеобходимостьРассылки();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлОтвета(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
		
		ДиалогФайла.МножественныйВыбор = Ложь;
		ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
		
		Если ДиалогФайла.Выбрать() Тогда
			
			ПолноеИмяФайла   = ДиалогФайла.ПолноеИмяФайла;
			ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
			Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
			
			АдресВременногоХранилища = "";
			Если ПоместитьФайл(АдресВременногоХранилища, ПолноеИмяФайла,, Ложь)Тогда
				ЗаписатьФайлОтветаНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение);
			Иначе 
				Сообщить("Не удалось добавить файл.");
			КонецЕсли;
			
		КонецЕсли;
		
	#Иначе	
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			Режим = РежимДиалогаВыбораФайла.Открытие;
			ДиалогФайла = Новый ДиалогВыбораФайла(Режим);
			
			ДиалогФайла.МножественныйВыбор = Ложь;
			ДиалогФайла.ПроверятьСуществованиеФайла = Истина;
			
			Если ДиалогФайла.Выбрать() Тогда
				
				ПолноеИмяФайла = ДиалогФайла.ПолноеИмяФайла;
				ИмяФайлаСРасширением = ПолучитьСтрокуОтделеннойСимволом(ПолноеИмяФайла, "\");
				
				Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
				Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
				
				//
				ПомещаемыеФайлы = Новый Массив;
				ПомещаемыеФайлы.Добавить(Описание);
				
				//
				ПомещенныеФайлы = Новый Массив;
				
				Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор) Тогда
					СохранитьФайлОтветаНаСервере(ПомещенныеФайлы, Расширение, ИмяФайлаСРасширением);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
	
	#КонецЕсли
	//Объект.ДатаПрикрепления=ТекущаяДата();
	ПроверитьНеобходимостьРассылки();
	
	УправлениеФормой();
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьФайлПротокола(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите удалить файл с результатами?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаПрикрепления=Неопределено;	
	// Т.к. файлы хранятся на сервере
	УдалитьФайлНаСервере();
	ПроверитьНеобходимостьРассылки();
КонецПроцедуры


&НаКлиенте
Процедура УдалитьФайлОтвета(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайлаОтвета)Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите удалить файл с ответом производителя?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Т.к. файлы хранятся на сервере
	УдалитьФайлОтветаНаСервере();
	ПроверитьНеобходимостьРассылки();
	
КонецПроцедуры

//+++АК ILIK 2018.07.06 ИП-00018897
&НаКлиенте
Процедура ЛабораторияПриИзменении(Элемент)
	УстановитьВидимостьПротоколаПроверки();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

&НаСервере
Процедура УправлениеФормой()
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		Элементы.ГруппаФайл.ТекущаяСтраница = Элементы.ГруппаФайлДобавление;
	Иначе
		Элементы.ГруппаФайл.ТекущаяСтраница = Элементы.ГруппаФайлОткрытие;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаОтвета) Тогда
		Элементы.ГруппаФайл1.ТекущаяСтраница = Элементы.ГруппаФайлДобавление1;
	Иначе
		Элементы.ГруппаФайл1.ТекущаяСтраница = Элементы.ГруппаФайлОткрытие1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойКлиент()
	
	Если НЕ ЭтоТехнолог Тогда
		
		Элементы.Лаборатория.ТолькоПросмотр 				= ЭтоВебКлиент();
		Элементы.Номенклатура.ТолькоПросмотр 				= ЭтоВебКлиент();
		Элементы.ХарактеристикаНоменклатуры.ТолькоПросмотр 	= ЭтоВебКлиент();
		//Элементы.СоставПоказателейПерезаполнитьПоказатели.Доступность = Не ЭтоВебКлиент();
		
		Элементы.СоставПоказателейПоказатель.ТолькоПросмотр = ЭтоВебКлиент();
		Элементы.СоставПоказателейНормаОт.ТолькоПросмотр 	= ЭтоВебКлиент();
		Элементы.СоставПоказателейНормаДо.ТолькоПросмотр 	= ЭтоВебКлиент();
		
		Элементы.СоставПоказателей.ИзменятьСоставСтрок 	= НЕ ЭтоВебКлиент();
		Элементы.СоставПоказателей.ИзменятьПорядокСтрок = НЕ ЭтоВебКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогХраненияФайлов()

	Возврат Константы.КаталогХраненияФайлов.Получить();	

КонецФункции

&НаСервере
Процедура СохранитьФайлПротоколаНаСервере(ПомещенныеФайлы, Расширение, ИмяФайлаСРасширением)
	
	//+++АК SHEP 2018.03.12 ИП-00017032
	//Попытка
	//	КаталогХраненияФайлов = Константы.КаталогХраненияФайлов.Получить();
	//	
	//	Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
	//		КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
	//	КонецЕсли;
	//	
	//Исключение
	//	Сообщить("Не удалось получить каталог хранения файлов.");
	//	Возврат;
	//	
	//КонецПопытки;
	КаталогХраненияФайлов = Документы.ПроверкаКачестваТоваров.ПолучитьКаталогХраненияФайлов();
	//---АК SHEP 2018.03.12
	
	// Всегда помещен только 1 файл
	ЭлементМассива = ПомещенныеФайлы[0];	
	
	// Получаем двоичные данные
	ФайлИзХранилища = ПолучитьИзВременногоХранилища(ЭлементМассива.Хранение);
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		ФайлИзХранилища.Записать(ИмяФайлаНаСервере);
		Объект.ИмяФайла = ИмяФайлаНаСервере;
		Объект.ИмяФайлаСРасширением = ИмяФайлаСРасширением;
		
		//+++АК KIRN 2018.02.22 ИП-00017972      
		Объект.ДобавилПротокол = глЗначениеПеременной("глТекущийПользователь");
		//---АК KIRN	
		
		Модифицированность = Истина;
	Исключение
		Сообщить("Не удалось записать файл на сервере.");
	КонецПопытки;	
	
КонецПроцедуры

Процедура СохранитьФайлОтветаНаСервере(ПомещенныеФайлы, Расширение, ИмяФайлаСРасширением)
	
	//+++АК SHEP 2018.03.12 ИП-00017032
	//Попытка
	//	КаталогХраненияФайлов = Константы.КаталогХраненияФайлов.Получить();
	//	
	//	Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
	//		КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
	//	КонецЕсли;
	//	
	//Исключение
	//	Сообщить("Не удалось получить каталог хранения файлов.");
	//	Возврат;
	//	
	//КонецПопытки;
	КаталогХраненияФайлов = Документы.ПроверкаКачестваТоваров.ПолучитьКаталогХраненияФайлов();
	//---АК SHEP 2018.03.12
	
	// Всегда помещен только 1 файл
	ЭлементМассива = ПомещенныеФайлы[0];	
	
	// Получаем двоичные данные
	ФайлИзХранилища = ПолучитьИзВременногоХранилища(ЭлементМассива.Хранение);
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		ФайлИзХранилища.Записать(ИмяФайлаНаСервере);
		Объект.ИмяФайлаОтвета 				= ИмяФайлаНаСервере;
		Объект.ИмяФайлаОтветаСРасширением 	= ИмяФайлаСРасширением;
		
		Модифицированность = Истина;
	Исключение
		Сообщить("Не удалось записать файл на сервере.");
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОстаткиНаТорговыхТочках()
	
	ЭтаФорма.ОстаткиНаТТ.Очистить();
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"			, ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура"	, Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"	, Объект.ХарактеристикаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТоварныйАссортиментТочекСрезПоследних.ТорговаяТочка.id_TT КАК id_TT
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			&Период,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ТоварныйАссортиментТочекСрезПоследних";
	
	СтрокаIdTT = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаIdTT = СтрокаIdTT + ?(ПустаяСтрока(СтрокаIdTT), "", ", ") + "'" + Формат(Выборка.id_TT, "ЧГ=0") + "'";
	
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(СтрокаIdTT)Тогда
		
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
		ADOСоединение.Open();
		
		НачалоПериода = Формат(НачалоДня(ТекущаяДата()-3*86400), "ДФ=yyyy-MM-ddTHH:mm:ss"); // посмотрим назад на 3 дня
		ОкончаниеПериода = Формат(КонецДня(ТекущаяДата()), "ДФ=yyyy-MM-ddTHH:mm:ss");
		
		id_tov = Формат(Объект.Номенклатура.id_tov, "ЧГ=0"); 
		
		// Упорядочим по дате (убывание)
		// Без Характеристики, т.к. подразумевается что на точке всегда 1 характеристика
		СтрЗапрос = 
		"SELECT
		|	dbo_LIST_UCHETA.Дата,
		|	dbo_LIST_UCHETA.id_tt,
		|	dbo_LIST_UCHETA.kon_ost as КонОстатокПоЕЛУ
		|FROM
		|	SMS_Izbenka.dbo.LIST_UCHETA as dbo_LIST_UCHETA (nolock)
		|WHERE
		|	dbo_LIST_UCHETA.Дата >= '" + НачалоПериода + "' and dbo_LIST_UCHETA.Дата <= '" + ОкончаниеПериода + "'
		|	and dbo_LIST_UCHETA.id_tt in (" + СтрокаIdTT + ")
		|	and dbo_LIST_UCHETA.id_tov = '" + id_tov + "'
		|	and dbo_LIST_UCHETA.kon_ost > 0
		|ORDER BY
		|	dbo_LIST_UCHETA.Дата DESC";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		ТабПоЕЛУ = Новый ТаблицаЗначений;
		ТабПоЕЛУ.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
		ТабПоЕЛУ.Колонки.Добавить("id_tt"			, Новый ОписаниеТипов("Число"));
		ТабПоЕЛУ.Колонки.Добавить("КонОстатокПоЕЛУ"	, Новый ОписаниеТипов("Число"));
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабПоЕЛУ.Добавить();
				СтрокаДоб.id_tt 			= Rs.Fields("id_tt").Value;
				СтрокаДоб.КонОстатокПоЕЛУ 	= Rs.Fields("КонОстатокПоЕЛУ").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ADOСоединение.Close();
		
		Если ТабПоЕЛУ.Количество()Тогда
			
			МассивТТ = Новый Массив;
			
			// На всякий случай отсортируем по дате (убывание)
			ТабПоЕЛУ.Сортировать("Дата Убыв");
			Для каждого Стр Из ТабПоЕЛУ  Цикл
			
				СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", Стр.id_tt);
				Если СтруктурнаяЕдиница.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				// т.к. все было отсортировано и ТТ есть в массиве, то значит остатки уже получили
				Если МассивТТ.Найти(СтруктурнаяЕдиница) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивТТ.Добавить(СтруктурнаяЕдиница);
				
				НовСтр = ЭтаФорма.ОстаткиНаТТ.Добавить();
				НовСтр.СтруктурнаяЕдиница 	= СтруктурнаяЕдиница;
				НовСтр.КоличествоОстаток 	= Стр.КонОстатокПоЕЛУ;
			
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Sms_Izbenka.dbo.List_ucheta
	
КонецПроцедуры

//+++АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
Процедура УстановитьПоставщикаНаСервере()
	
	лкТекПроизводитель = Объект.ХарактеристикаНоменклатуры;
	Если НЕ ЗначениеЗаполнено(лкТекПроизводитель) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", лкТекПроизводитель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Объект.Производитель = Выборка.Значение;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура НайтиПроизводителя()
	
	лкОтказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		лкОтказ = Истина;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
	//	лкОтказ = Истина;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		лкОтказ = Истина;
	КонецЕсли;
	
	Если лкОтказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПоставщикаНаСервере();
		
КонецПроцедуры
//---АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков

Процедура ПерезаполнитьПоказателиНаСервере()
	
	Объект.СоставПоказателей.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры.ГосударственныйСтандартТехническоеУсловие) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СоставПоказателей.Загрузить(Объект.ХарактеристикаНоменклатуры.ГосударственныйСтандартТехническоеУсловие.ПоказателиКачества.Выгрузить());
	
КонецПроцедуры
	
&НаСервере
Функция ЗаполненГостТу()
	
	Возврат ЗначениеЗаполнено(Объект.ХарактеристикаНоменклатуры.ГосударственныйСтандартТехническоеУсловие);
	
КонецФункции

&НаСервере
Функция НайтиОшибкиЗаполненияРезультата()
	
	ЕстьОшибка = Ложь;
	
	Для каждого СтрокаТЧ Из Объект.СоставПоказателей Цикл
	
		Если ПустаяСтрока(СтрокаТЧ.Результат)Тогда
			ЕстьОшибка = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат ЕстьОшибка;
	
КонецФункции

&НаСервере
Функция ПоместитьФайлВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());	

КонецФункции


&НаСервере
Функция ПоместитьФайлОтветаВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайлаОтвета), Новый УникальныйИдентификатор());	

КонецФункции

&НаСервере
Процедура УдалитьФайлНаСервере()
	
	Попытка
	
		УдалитьФайлы(Объект.ИмяФайла);
		
		Объект.ИмяФайла = "";
		Объект.ИмяФайлаСРасширением = "";
		Объект.ДатаПрикрепления='00010101';
		Модифицированность = Истина;
	
	Исключение
		
	КонецПопытки;	
	
	УправлениеФормой();
	
КонецПроцедуры

Процедура УдалитьФайлОтветаНаСервере()
	
	Попытка
	
		УдалитьФайлы(Объект.ИмяФайлаОтвета);
		
		Объект.ИмяФайлаОтвета = "";
		Объект.ИмяФайлаОтветаСРасширением = "";
		Модифицированность = Истина;
	
	Исключение
		
	КонецПопытки;	
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

&НаКлиенте
Функция ЭтоВебКлиент()
	
	#Если ВебКлиент Тогда
		Возврат Истина;
	#Иначе
		Возврат Ложь;
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаСРасширениемНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Объект.ИмяФайла)Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
		Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(Объект.ИмяФайлаСРасширением);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		//АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());
		АдресФайла = ПоместитьФайлВоВременноеХранилище();
		Если ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь) Тогда
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	
	#Иначе
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайла, ПоместитьФайлВоВременноеХранилище());
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			
			ПолученныеФайлы = Новый Массив;
			
			ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДВ.Заголовок = "Укажите каталог для скачивания...";
			
			Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДВ, Истина) Тогда	
				
				ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
				ДвоичныеДанные = ПолучитьИзвременногохранилища(ПолученныеФайлы[0].Хранение);
				
				ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОтветаСРасширениемНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Объект.ИмяФайлаОтвета)Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
		Расширение = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(Объект.ИмяФайлаОтветаСРасширением);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		//АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайла), Новый УникальныйИдентификатор());
		АдресФайла = ПоместитьФайлОтветаВоВременноеХранилище();
		Если ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь) Тогда
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	
	#Иначе
	
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			УстановитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайлаОтвета, ПоместитьФайлОтветаВоВременноеХранилище());
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			
			ПолученныеФайлы = Новый Массив;
			
			ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДВ.Заголовок = "Укажите каталог для скачивания...";
			
			Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДВ, Истина) Тогда	
				
				ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
				ДвоичныеДанные = ПолучитьИзвременногохранилища(ПолученныеФайлы[0].Хранение);
				
				ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
				
			КонецЕсли;
			
		Иначе
			ВызватьИсключение "Для данного браузера использование расширения для работы с файлами не поддерживается.";
			
		КонецЕсли;
		
	#КонецЕсли	
	
КонецПроцедуры


&НаСервере
Процедура ЗаписатьФайлНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	//+++АК SHEP 2018.03.12 ИП-00017032
	//Попытка
	//	КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
	//	
	//	Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
	//		КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
	//	КонецЕсли;
	//	
	//Исключение
	//	Сообщить("Не удалось получить каталог хранения файлов.");
	//	Возврат;
	//	
	//КонецПопытки;
	КаталогХраненияФайлов = Документы.ПроверкаКачестваТоваров.ПолучитьКаталогХраненияФайлов();
	//---АК SHEP 2018.03.12
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		
		ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
		
		Объект.ИмяФайла = ИмяФайлаНаСервере;
		Объект.ИмяФайлаСРасширением = ИмяФайлаСРасширением;
		
		//+++АК KIRN 2018.02.22 ИП-00017972      
		Объект.ДобавилПротокол = глЗначениеПеременной("глТекущийПользователь");
		//---АК KIRN		
		
		Модифицированность = Истина;
		
	Исключение
		Сообщить("Не удалось добавить файл.");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлОтветаНаСервере(АдресВременногоХранилища, ИмяФайлаСРасширением, Расширение)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	//+++АК SHEP 2018.03.12 ИП-00017032
	//Попытка
	//	КаталогХраненияФайлов = ПолучитьКаталогХраненияФайлов();
	//	
	//	Если Прав(КаталогХраненияФайлов, 1) <> "\" Тогда
	//		КаталогХраненияФайлов = КаталогХраненияФайлов + "\";
	//	КонецЕсли;
	//	
	//Исключение
	//	Сообщить("Не удалось получить каталог хранения файлов.");
	//	Возврат;
	//	
	//КонецПопытки;
	КаталогХраненияФайлов = Документы.ПроверкаКачестваТоваров.ПолучитьКаталогХраненияФайлов();
	//---АК SHEP 2018.03.12
	
	УникальноеИмяФайла = Новый УникальныйИдентификатор;
	ИмяФайлаНаСервере = КаталогХраненияФайлов + УникальноеИмяФайла + "." + Расширение;
	
	Попытка
		
		ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
		
		Объект.ИмяФайлаОтвета = ИмяФайлаНаСервере;
		Объект.ИмяФайлаОтветаСРасширением = ИмяФайлаСРасширением;
		
		Модифицированность = Истина;
		
	Исключение
		Сообщить("Не удалось добавить файл.");
	КонецПопытки;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьHTML()
	//
	ТаблицаКартинокИзБазы.Очистить();

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НоменклатураЭтикетки.ИмяФайла,
	                      |	НоменклатураЭтикетки.Комментарий
	                      |ИЗ
	                      |	Справочник.Номенклатура.Этикетки КАК НоменклатураЭтикетки
	                      |ГДЕ
	                      |	НоменклатураЭтикетки.Характеристика = &Характеристика
	                      |	И НоменклатураЭтикетки.Ссылка = &Номенклатура
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НоменклатураЭтикетки.НомерСтроки");
	
	Запрос.УстановитьПараметр("Характеристика", Объект.ХарактеристикаНоменклатуры); 

	Запрос.УстановитьПараметр("Номенклатура", Объект.ХарактеристикаНоменклатуры.Владелец); 

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Файл = Новый Файл(Выборка.ИмяФайла);
		//
		//Если НЕ Файл.Существует() Тогда
		//	Продолжить;
		//Иначе
			НоваяСтрока = ТаблицаКартинокИзБазы.Добавить();
			НоваяСтрока.ИмяФайла = Выборка.ИмяФайла;
			НоваяСтрока.Комментарий = Выборка.Комментарий;
		//КонецЕсли;	
	КонецЦикла;
	ЭтикеткиИзБазыHTML = ПолучитьHTMLПоТаблицеКартинок(ТаблицаКартинокИзБазы);
КонецПроцедуры

&НаСервере
Функция ПолучитьHTMLПоТаблицеКартинок(ТаблицаКартинок)

	КартинокВСтроке = 8;

	ПолныйТекстHTML = "
		|<html><body>
		|<table name = ""PictView"">";

	Для НомерСтроки = 1 По ОбщегоНазначения.ЦелМаксимальное(ТаблицаКартинок.Количество()/КартинокВСтроке) Цикл
		ПолныйТекстHTML = ПолныйТекстHTML + "
			|<tr>";
		Для НомерКолонки = 1 По КартинокВСтроке Цикл
			ИндексСтрокиКартики = (НомерСтроки-1) * КартинокВСтроке + НомерКолонки - 1;
			Если ИндексСтрокиКартики = ТаблицаКартинок.Количество() Тогда
				Прервать;
			КонецЕсли; 
			ИмяФайла = ТаблицаКартинок[ИндексСтрокиКартики].ИмяФайла;
			ПолныйТекстHTML = ПолныйТекстHTML+ "
			|<td><table id=""" + ИндексСтрокиКартики + "_T" + """ border=""2"" cellpadding=""0"" bordercolor=#ffffff cellspacing=""0""><tr><td><img name=""picture"" width = 125 height=125 style = ""cursor: pointer"" id = """  + ИндексСтрокиКартики  + """ src = ""file:///" + СтрЗаменить(ИмяФайла, "\", "/") + """></td></tr></table></td>";
		КонецЦикла;	
		ПолныйТекстHTML = ПолныйТекстHTML + "
			|</tr>";
	КонецЦикла;	

	ПолныйТекстHTML = ПолныйТекстHTML + "</body></html>";

	Возврат ПолныйТекстHTML;

КонецФункции

&НаКлиенте
Процедура ЭтикеткиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТаблицаКартинок = ТаблицаКартинокИзБазы;

	Попытка 
		
		Если ДанныеСобытия.Element.name = "picture" Тогда
			ИндексСтроки = Число(ДанныеСобытия.Element.id);

			Картинка = Новый Картинка(ТаблицаКартинок[ИндексСтроки].ИмяФайла);
			Комментарий = ТаблицаКартинок[ИндексСтроки].Комментарий;
			АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
			ПараметрыФормы = Новый Структура("КартинкаСсылка, Комментарий", АдресКартинки, Комментарий); 
			
			ОткрытьФорму("ОбщаяФорма.Фото", ПараметрыФормы);
		КонецЕсли;

	Исключение
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура СделатьРассылку()
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СписокФайловВложений = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Объект.ИмяФайла));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИмяФайлаОтвета) Тогда
		СписокФайловВложений.Добавить(Новый Структура("ИмяФайла",  Объект.ИмяФайлаОтвета));
	КонецЕсли;
	
    //
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.ХарактеристикаНоменклатуры);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовхарактеристик.СвойстваОбъектов.Производитель)";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
    Производитель = Справочники.Контрагенты.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Производитель = ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
	
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	Кому = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И Объект = &Характеристика) КАК СоответствиеОбъектРольСрезПоследних
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	2
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&Дата,
	|			ТипРоли = &ТипРоли
	|				И Объект = &Контрагент) КАК СоответствиеОбъектРольСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, Объект = &Характеристика) КАК СоответствиеОбъектРольСрезПоследних1
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	2
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ТипРоли = &ТипРоли1) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, Объект = &Контрагент) КАК СоответствиеОбъектРольСрезПоследних1
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(вт.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втМин
	|ИЗ
	|	вт КАК вт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(вт.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втМин1
	|ИЗ
	|	вт1 КАК вт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.РольПользователя
	|ПОМЕСТИТЬ втРоли
	|ИЗ
	|	вт КАК вт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
	|		ПО вт.Приоритет = втМин.Приоритет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РолиПользователей.Ссылка
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин КАК втМин
	|			ПО вт.Приоритет = втМин.Приоритет
	|		ПО РолиПользователей.Родитель = вт.РольПользователя
	|			И (РолиПользователей.ПометкаУдаления = ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт1.РольПользователя
	|ИЗ
	|	вт1 КАК вт1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМин1 КАК втМин1
	|		ПО вт1.Приоритет = втМин1.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|ГДЕ
	|	РолиПользователейСоставРоли.Ссылка В
	|			(ВЫБРАТЬ
	|				втРоли.РольПользователя
	|			ИЗ
	|				втРоли)
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Сотрудник";

	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.ДатаПрикрепления),КонецДня(Объект.ДатаПрикрепления),Объект.Дата));
	Запрос.УстановитьПараметр("ТипРоли"	, ПланыВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству);
	Запрос.УстановитьПараметр("ТипРоли1", ПланыВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер);
	МасНом=Новый Массив;
	МасНом.Добавить(Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.ХарактеристикаНоменклатуры);
	
	Запрос.УстановитьПараметр("Номенклатура", МасНом);
	
	Запрос.УстановитьПараметр("Контрагент", Производитель);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    МассивАдресов=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МассивАдресов.Найти(ВыборкаДетальныеЗаписи.Сотрудник)=Неопределено Тогда
			МассивАдресов.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос.Текст =                                                                                   
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И (КонтактнаяИнформация.Тип = &Тип)";
	
	Запрос.УстановитьПараметр("Объект", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();

	
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	

	СтрМаркеры="";
	ФлНеЗеленый=Ложь;
	Для каждого Стр Из Объект.СоставПоказателей Цикл
		Если Не ЗначениеЗаполнено(Стр.Маркер) Тогда
			Продолжить;
		КонецЕсли; 
		СтрМаркеры=СтрМаркеры+", "+Стр.Маркер;
		Если НЕ Стр.Маркер=Перечисления.МаркерыДляАудита.Зеленый Тогда
			ФлНеЗеленый=Истина;
		КонецЕсли; 
	КонецЦикла;
	
	
    Если ФлЕстьМаркер Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Кому.Добавить(ВыборкаДетальныеЗаписи.Представление);
			КонецЕсли; 
		КонецЦикла;
		Если ФлНеЗеленый Тогда
			Кому.Добавить("reklama@izbenka.msk.ru");
		КонецЕсли; 
	КонецЕсли; 
	
	Кому.Добавить("svetlanca-sv@mail.ru");
	Кому.Добавить("thekirillchurkin@gmail.com");
	//Кому.Добавить("product_18@vkusvill.ru"); //+++АК SHEP 2018.06.07 б/н Бабич Светлана Анатольевна попросила убрать из рассылки
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаОтвета) или ЗначениеЗаполнено(СокрЛП(Объект.Ответ)) Тогда
		Кому.Добавить("product_1@vkusvill.ru");
	КонецЕсли; 
	
	//+++АК BARA  ИП-00018147      2018.03.16
	//Кому.Очистить();
	КрасныйМаркер = Ложь;
	Для каждого СтрФ Из Объект.СоставПоказателей Цикл
		Если СтрФ.Маркер = Перечисления.МаркерыДляАудита.Красный Тогда 
			КрасныйМаркер = Истина;
		КонецЕсли;			
	КонецЦикла; 
	
	ЗапросГРРасс = Новый Запрос;
	ЗапросГРРасс.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АК_ГруппыРассылки.ФизЛицо,
	|	АК_ГруппыРассылки.Емейл КАК Емейл,
	|	АК_ГруппыРассылки.Группа
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа В(&Группа)";
	Группа = Новый Массив;
	Группа.Добавить(Справочники.АК_ГруппыРассылки.НайтиПоКоду("000000035"));
	Если КрасныйМаркер Тогда 
		Группа.Добавить(Справочники.АК_ГруппыРассылки.НайтиПоКоду("000000036"));
	КонецЕсли;
	
	ЗапросГРРасс.УстановитьПараметр("Группа", Группа);
	
	РезультатЗапросаГРРасс = ЗапросГРРасс.Выполнить();
	
	ВыборкаГРРасс = РезультатЗапросаГРРасс.Выбрать();
	
	Пока ВыборкаГРРасс.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаГРРасс.Емейл) Тогда 
			Кому.Добавить(ВыборкаГРРасс.Емейл);
		КонецЕсли;
	КонецЦикла;
	//---АК BARA  ИП-00018147
	
	
	СтруктураНовогоПисьма.Вставить("Кому", Кому);
	
	
	СтрМаркеры=Прав(СтрМаркеры,СтрДлина(СтрМаркеры)-2);
	
	СтруктураНовогоПисьма.Вставить("Тема", "Протоколы """+Объект.Номенклатура+"_"+Объект.ХарактеристикаНоменклатуры+"_"+Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"_"+СтрМаркеры+"");
	Макет=Документы.ПроверкаКачестваТоваров.ПолучитьМакет("МакетРассылки");
	ТабДок=Новый ТабличныйДокумент;
	Область=Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Объект);
	
	//+++АК LAGP 2018.03.13ИП-00017097.06
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории") И ФлНеЗеленый Тогда
		Область.Параметры.Лаборатория = "<Внутренняя лаборатория>";	
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории") И НЕ ФлНеЗеленый Тогда	
		Возврат; //по внутренней лаборатории отправляются только не "зеленые" письма
	КонецЕсли;
	//---АК LAGP	
	
	ТабДок.Вывести(Область);
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	Для каждого Стр Из Объект.СоставПоказателей Цикл
		Если Не ЗначениеЗаполнено(Стр.Маркер) Тогда
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,стр);
		ОбластьСтрока.Параметры.Маркер="   "+ОбластьСтрока.Параметры.Маркер;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	Область=Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(Объект);
	//Область.Параметры.ПрикрепленФайлОтвета=?(ЗначениеЗаполнено(Объект.ИмяФайлаОтвета),"Прикреплен файл ответа","");
	ТабДок.Вывести(Область);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроверкаКачестваТоваров.Ссылка как Проверка,
		|	ПроверкаКачестваТоваров.Дата КАК Дата
		|ИЗ
		|	Документ.ПроверкаКачестваТоваров КАК ПроверкаКачестваТоваров
		|ГДЕ
		|	ПроверкаКачестваТоваров.Ссылка <> &Ссылка
		|	И ПроверкаКачестваТоваров.Номенклатура = &Номенклатура
		|	И ПроверкаКачестваТоваров.Производитель = &Производитель
		|	И ПроверкаКачестваТоваров.Дата <= &Дата
		|	И ПроверкаКачестваТоваров.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Запрос.УстановитьПараметр("Дата"			, Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура"	, Объект.Номенклатура);
	Запрос.УстановитьПараметр("Производитель"	, Объект.Производитель);
	Запрос.УстановитьПараметр("Ссылка"			, Объект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    Сч=0;
	КолЗМ=0;
	КолПров=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сч=Сч+1;
		Если Сч=4 Тогда
			Прервать;
		КонецЕсли;
		Область=Макет.ПолучитьОбласть("СтарыеПроверки");
		Область.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		
		ТабДок.Вывести(Область);
		ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
		Для каждого Стр Из ВыборкаДетальныеЗаписи.Проверка.СоставПоказателей Цикл
			Если Не ЗначениеЗаполнено(Стр.Маркер) Тогда
				Продолжить;
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,стр);
			ОбластьСтрока.Параметры.Маркер="   "+ОбластьСтрока.Параметры.Маркер;
			ТабДок.Вывести(ОбластьСтрока);
			Если Стр.Маркер=Перечисления.МаркерыДляАудита.Зеленый Тогда
				КолЗМ=КолЗМ+1;
			КонецЕсли; 
		КонецЦикла;
		КолПров=КолПров+ВыборкаДетальныеЗаписи.Проверка.СоставПоказателей.Количество();
	КонецЦикла;
    Если КолПров > 0 Тогда
		Область = Макет.ПолучитьОбласть("Процент");
		Область.Параметры.ПроцентЗМ=Формат(100*КолЗМ/КолПров,"ЧДЦ=2");
		
		ТабДок.Вывести(Область);
	
	КонецЕсли; 
	
	//+++АК LAGP 2018.03.13 ИП-00017097.06
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаданиеЛаборатории") И ФлНеЗеленый Тогда
		
		Область = Макет.ПолучитьОбласть("ЗаданиеЛабораторииШапка");
		Область.Параметры.ТекстПисьмаОбращенияПокупателя = Объект.ДокументОснование.ТекстПисьма;	
		ТабДок.Вывести(Область);
		
		Если Объект.ДокументОснование.ОтветыТехнологов.Количество() > 0 Тогда
			
			Область = Макет.ПолучитьОбласть("ЗаданиеЛабораторииШапкаТаблицы");
			ТабДок.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("ЗаданиеЛабораторииСтрока");	
			Для каждого СтрокаОтветаТехнолога Из Объект.ДокументОснование.ОтветыТехнологов Цикл
				Область.Параметры.ДатаПартии 		= СтрокаОтветаТехнолога.ДатаПартии;
				Область.Параметры.НомерМагазина 	= СтрокаОтветаТехнолога.НомерМагазина;
				Область.Параметры.ОтветТехнолога 	= СтрокаОтветаТехнолога.ОтветТехнолога;
				ТабДок.Вывести(Область);	
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	//---АК LAGP
	
	//
	ВремФайл = ПолучитьИмяВременногоФайла("htm");
	ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.HTML);
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	ТекстДокумент.Прочитать(ВремФайл);
	
	Текст = ТекстДокумент.ПолучитьТекст();
	НачалоБлокаСтиль 	= Найти(Текст, "<STYLE");
	КонецБлокаСтиль 	= Найти(Текст, "</STYLE");
	ТекстСтиль = Сред(Текст, НачалоБлокаСтиль, КонецБлокаСтиль - НачалоБлокаСтиль + 8);
	НачалоБлокаТело = Найти(Текст, "<BODY");
	КонецБлокаТело 	= Найти(Текст, "</BODY");
	ТекстТело = Сред(Текст, НачалоБлокаТело, КонецБлокаТело - НачалоБлокаТело + 7);
	
	ТекстПолный = "<HTML>" + Символы.ПС +ТекстСтиль +Символы.ПС + ТекстТело + Символы.ПС + "</HTML>";
	ТекстПолный = СтрЗаменить(ТекстПолный, "CELLSPACING=0", "CELLSPACING=0; CELLPADDING=5; border = 0");
	//ТекстПолный = СтрЗаменить(ТекстПолный, "border-left-style: none", "");
	//ТекстПолный = СтрЗаменить(ТекстПолный, "border-top-style: none", "");
	СтруктураНовогоПисьма.Вставить("Тело", ТекстПолный);
	СтрКому = "";
	Для каждого Эл Из Кому Цикл
	    СтрКому = СтрКому + Эл.Значение + "; ";
	КонецЦикла; 
	Попытка
		ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма);
		Сообщить("Отправлено письмо с информацией на " + СтрКому);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмоПоПочте(СтруктураНовогоПисьма)  Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000001");
	
	//СпАдресов = Новый СписокЗначений;
	//Для каждого ЭлСп Из СтруктураНовогоПисьма.Кому Цикл
	//	МассивАдресов = Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение, ";");	
	//	Для каждого Эл Из МассивАдресов Цикл
	//		Если ЗначениеЗаполнено(Эл) Тогда
	//			СпАдресов.Добавить(Сокрлп(Эл));
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЦикла;
	КолАдр=СтруктураНовогоПисьма.Кому.Количество();
	КолИтер=Цел(КолАдр/21)+1;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Почта.Подключиться(Профиль);
	
	
	Для Ит=1 По КолИтер Цикл
		//УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
		
		СпАдресов=Новый СписокЗначений;
		
		Для Сч= (Ит-1)*20+1 По Мин(СтруктураНовогоПисьма.Кому.Количество(),Ит*20) Цикл
			ЭлСп=СтруктураНовогоПисьма.Кому[Сч-1];
			МассивАдресов=Справочники.Контрагенты.РазложитьСтрокуВМассивПодстрок(ЭлСп.Значение,";");	
			Для каждого Эл Из МассивАдресов Цикл
				Если ЗначениеЗаполнено(Эл) Тогда
					СпАдресов.Добавить(Сокрлп(Эл));
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		Письмо.Тема = СтруктураНовогоПисьма.Тема;
		Письмо.ИмяОтправителя = ""+УчетнаяЗапись+"";
		Письмо.ИмяОтправителя  = ""+СокрЛП(УчетнаяЗапись)+"";
		Письмо.Отправитель     = ""+СокрЛП(УчетнаяЗапись)+"";
		
		ТабДок=СтруктураНовогоПисьма.Тело;
		
		ТекстСообщения = Письмо.Тексты.Добавить();
		ТекстСообщения.Текст     = 	ТабДок;
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		Если ЗначениеЗаполнено(Объект.Ответ) Тогда
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = 	"Ответ производителя: "+Объект.Ответ;
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Объект.ИмяФайлаОтвета) Тогда
			ТекстСообщения = Письмо.Тексты.Добавить();
			ТекстСообщения.Текст     = 	"Прикреплен файл ответа производителя";
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		КонецЕсли; 
		
		
		Для каждого Эл1 Из СтруктураНовогоПисьма.СписокФайловВложений Цикл
			Письмо.Вложения.Добавить(Эл1.Значение.ИмяФайла);
		КонецЦикла;
		
		Для каждого Адрес Из СпАдресов Цикл
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = Адрес.Значение;
		КонецЦикла;
		Почта.Послать(Письмо);
	КонецЦикла; 	
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьРассылки()
	
	ЭтаФорма.ФлЕстьМаркер = Ложь;
	Для каждого СтрокаТЧ Из Объект.СоставПоказателей Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Маркер) Тогда
			ЭтаФорма.ФлЕстьМаркер = Истина;
			Прервать;
		КонецЕсли; 	
	КонецЦикла;
	
	ЭтаФорма.ФлРассылки = ((Объект.Статус = Перечисления.СтатусыЖурналаПроверкиКачестваТоваров.ПроверкаВыполнена)
							И (ЗначениеЗаполнено(Объект.ИмяФайла)
								ИЛИ ЗначениеЗаполнено(Объект.ИмяФайлаОтвета)
								ИЛИ ЗначениеЗаполнено(СокрЛП(Объект.Ответ))));
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьСписокНарушений()
	
	СтрНарушения = "";
	Для каждого Стр Из Объект.СоставПоказателей Цикл
		Если Стр.Нарушение
				ИЛИ ЗначениеЗаполнено(Стр.Маркер) Тогда
			СтрНарушения = СтрНарушения + ", " + Строка(Стр.Показатель) + " " + Строка(Стр.Маркер);
		КонецЕсли; 
	КонецЦикла;
	Объект.Нарушения = Прав(СтрНарушения, СтрДлина(СтрНарушения) - 2);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтветПриИзменении(Элемент)
	
	ПроверитьНеобходимостьРассылки();
	
КонецПроцедуры

//АК БЕЛН 21.03.17+

Процедура ЗаполнитьСписокГрупп()
	
	Мас = Новый Массив;                                            
	Для каждого СтрокаТЧ Из Объект.ПоказателиПроверки Цикл
		Если Мас.Найти(СтрокаТЧ.ПоказательПроверки.Родитель) = Неопределено
				И ЗначениеЗаполнено(СтрокаТЧ.ПоказательПроверки.Родитель) Тогда
			Мас.Добавить(СтрокаТЧ.ПоказательПроверки.Родитель);	                                               
		КонецЕсли; 
	КонецЦикла;
	
	СтрГрупп = "";
	Для каждого Эл Из Мас Цикл
		СтрГрупп = СтрГрупп + ", " + Эл;
	КонецЦикла;
	Объект.ГруппыПоказателей = Сред(СтрГрупп, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПроверкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСписокГрупп();
	
КонецПроцедуры
//АК БЕЛН 21.03.17-

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	#Если ВебКлиент ИЛИ ТонкийКлиент Тогда
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да");
		СписокКнопок.Добавить("Нет", "Нет");
		СписокКнопок.Добавить("Отмена", "Отмена");
		ПоказатьВопросПользователю("Документ был модифицирован.
			|
			|Сохранить изменения?", СписокКнопок,,,,, "ПередЗакрытиемЗавершение()");
		
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", КнопкаТаймаута = Неопределено, ОписаниеОповещения = "") Экспорт
	ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута, ОписаниеОповещения, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.Вопрос" Тогда
		
		ОписаниеОповещения = "";
		ВыбранноеЗначение.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		ВыбранноеЗначениеРезультат = Строка(ВыбранноеЗначение.Значение);
		
		Если ОписаниеОповещения = "ПередЗакрытиемЗавершение()" Тогда
			
			Если ВыбранноеЗначениеРезультат = "Да" Тогда
				Записать();
				Закрыть();
			ИначеЕсли ВыбранноеЗначениеРезультат = "Нет" Тогда
				Модифицированность = Ложь;
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//+++АК ILIK 2018.07.06 ИП-00018897
&НаСервере
Функция УстановитьВидимостьПротоколаПроверки()
	ПоказыватьПротоколПроверки = Ложь;
	
	Если РольДоступна("ПолныеПрава")
	 Или РольДоступна("ПроверкаКачестваТоваров")
	 Или РольДоступна("ПроверкаКачестваТоваровВебКлиент") Тогда
	 	ПоказыватьПротоколПроверки = ЭтоВнутренняяЛаборатория();
	КонецЕсли;
	
	Элементы.СтраницаПротоколПроверки.Видимость = ПоказыватьПротоколПроверки; 
	Если Элементы.Найти("ФормаДокументПроверкаКачестваТоваровПечатьПротоколаПроверки") <> Неопределено Тогда
		Элементы.ФормаДокументПроверкаКачестваТоваровПечатьПротоколаПроверки.Видимость = ПоказыватьПротоколПроверки;
	КонецЕсли;
КонецФункции

//+++АК ILIK 2018.07.06 ИП-00018897
&НаСервере
Функция ЭтоВнутренняяЛаборатория()
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Лаборатория, "ИНН") = "7734675810" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

//+++АК ILIK 2018.07.06 ИП-00018897
&НаКлиенте
Процедура ЦельИсследованияПриИзменении(Элемент)
	НайденныеСтроки = Объект.ФизикоХимическиеПоказатели.НайтиСтроки(Новый Структура("Отклонение", Истина));
	
	Объект.Заключение = "Представленный образец " + ?(НайденныеСтроки.Количество() = 0, "", "не ") +  "соответствует требованиям " + Объект.ЦельИсследования;
КонецПроцедуры

//+++АК SHEP 2018.08.12 ИП-00018753.03
&НаКлиенте
Процедура ФайлыПроизводителяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыПроизводителя.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяФайла) Тогда
		ЗапуститьПриложение(ПолучитьПолноеИмяФайлаССервера(Объект.Ссылка, ТекущиеДанные.ИмяФайла));
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.08.12 ИП-00018753.03
&НаСервереБезКонтекста
Функция ПолучитьПолноеИмяФайлаССервера(Ссылка, ИмяФайла)
	Возврат Документы.ПроверкаКачестваТоваров.ПолучитьКаталогХраненияФайлов(Ссылка) + ИмяФайла;
КонецФункции

//+++АК SHEP 2018.12.12 ИП-00018753.05
&НаКлиенте
Процедура ПроверкаКачестваТоваровЛентаСообщенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;
КонецПроцедуры

//+++АК SHEP 2018.12.12 ИП-00018753.05
&НаКлиенте
Процедура ПроверкаКачестваТоваровЛентаСообщенийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
