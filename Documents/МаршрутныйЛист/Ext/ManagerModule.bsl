
Функция СформироватьМаршрутныйЛист(Ссылка) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ПолеСверху 	= 5;
	ТабДок.ПолеСнизу 	= 5;
	ТабДок.ПолеСлева 	= 5;
	ТабДок.ПолеСправа 	= 5;
	ТабДок.АвтоМасштаб	= Истина;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ТабДок;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = Документы.МаршрутныйЛист.ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛист.Маршрут,
	|	МаршрутныйЛист.СтруктурноеПодразделение,
	|	МаршрутныйЛист.Перевозчик,
	|	МаршрутныйЛист.Номер,
	|	МаршрутныйЛист.Дата,
	|	МаршрутныйЛист.Маршрут.ПолноеНаименование
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВЗ_Запрос.Получатель) КАК Получатель,
	|	ВЗ_Запрос.Получатель.Адрес КАК Адрес,
	|	ПРЕДСТАВЛЕНИЕ(ВЗ_Запрос.Получатель.Город) КАК Город,
	|	ПРЕДСТАВЛЕНИЕ(ВЗ_Запрос.Получатель.Регион) КАК Регион,
	|	ВЗ_Запрос.Получатель.Регион.Код КАК РегионКод,
	|	ВЗ_Запрос.Получатель.КоординатыШирота КАК Широта,
	|	ВЗ_Запрос.Получатель.КоординатыДолгота КАК Долгота
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Получатель
	|	ИЗ
	|		Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|			ПО МаршрутныйЛистРасходныеОрдера.Документ = РасходныйОрдерСкладТовары.Ссылка
	|				И (РасходныйОрдерСкладТовары.НомерСтроки = 1)
	|	ГДЕ
	|		МаршрутныйЛистРасходныеОрдера.Ссылка = &Ссылка) КАК ВЗ_Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЗ_Запрос.Получатель.id_TT";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	Шапка = Результаты[0].Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("Отступ");
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Маршрут 		= Шапка.Маршрут;
	Область.Параметры.Склад 		= Шапка.СтруктурноеПодразделение;
	Область.Параметры.Перевозчик 	= Шапка.Перевозчик;
	Область.Параметры.Дата 			= Формат(Шапка.Дата, "ДЛФ=DD");
	Область.Параметры.Номер 		= Шапка.Номер;
	//АК БЕЛН 20.03.17+
	Область.Параметры.МаршрутПолноеНаименование = Шапка.МаршрутПолноеНаименование;
	//АК БЕЛН 20.03.17-
	ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(Область, Ссылка);
	
	//ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(ОбщегоНазначенияКлиентСервер.ПолучитьШтрихкодПоУИНу(Ссылка), 0, 190);
	//
	//Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
	//	
	//	КартинкаQRКода = Новый Картинка(ДанныеQRКода);
	//
	//	Область.Рисунки.QRКодСправа.Картинка = КартинкаQRКода;
	//КонецЕсли;
	
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(Область);
	
	Выборка = Результаты[1].Выбрать();
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.НомерСтроки 	= Формат(НомерСтроки, "ЧГ=0");
		Область.Параметры.ТорговаяТочка = Выборка.Получатель;
		Область.Параметры.Адрес 		= ?(Выборка.РегионКод = 77, "", СокрЛП(Выборка.Регион) + ", ")  + Выборка.Город + ", " + Выборка.Адрес;
		Область.Параметры.Широта 		= Формат(Выборка.Широта, "ЧДЦ=7");
		Область.Параметры.Долгота 		= Формат(Выборка.Долгота, "ЧДЦ=7");
		ТабДок.Вывести(Область);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	
	
	//АК БЕЛН 15.02.2017+
	ТЗПаллеты = СформироватьТаблицу(Ссылка);
	
	Область = Макет.ПолучитьОбласть("ШапкаПаллеты");
	ТабДок.Вывести(Область);
	Сч = 0;
	Для каждого Стр Из ТЗПаллеты Цикл
		Сч = Сч + 1;
		Область = Макет.ПолучитьОбласть("СтрокаПаллеты");
		ЗаполнитьЗначенияСвойств(Область.Параметры, Стр);
		Область.Параметры.НомерСтроки	= Сч;
		Область.Параметры.Итого			= Стр.Долгосрок + Стр.Заморозка + Стр.Овощи + Стр.Охлажден + Стр.Хлеб + Стр.Молочка;
		ТабДок.Вывести(Область);
	КонецЦикла; 
	ТЗПаллеты.Колонки.Добавить("Итог");	
	ТЗПаллеты.ЗаполнитьЗначения(1, "Итог");
	ТЗПаллеты.Свернуть("Итог", "Долгосрок, Заморозка, Овощи, Охлажден, Хлеб, Молочка");
	
	Область = Макет.ПолучитьОбласть("СтрокаПаллеты");
	Область.Параметры.Магазин = "Итого:";
	Если ТЗПаллеты.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Область.Параметры, ТЗПаллеты[0]);
		Область.Параметры.Итого = ТЗПаллеты[0].Долгосрок + ТЗПаллеты[0].Заморозка + ТЗПаллеты[0].Овощи + ТЗПаллеты[0].Охлажден + ТЗПаллеты[0].Хлеб + ТЗПаллеты[0].Молочка;
	КонецЕсли; 
	ТабДок.Вывести(Область);
	//Если Не ЗначениеЗаполнено(Ссылка.ДатаПодачиМашины) Тогда
	//	ОбДок=Ссылка.ПолучитьОбъект();	
	//	ОбДок.ДатаПодачиМашины=ТекущаяДата();
	//	ОбДок.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли; 
	
	//АК БЕЛН 15.02.2017-
	
	Возврат ТабДок;
	
КонецФункции	

//АК БЕЛН 15.02.2017+
Функция СформироватьТаблицу(Ссылка) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Получатель КАК СтруктурнаяЕдиница,
	|	МаршрутныйЛистТорговыеТочки.ПоставкаВСетках КАК КолвоСетокВПоставке,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту ССЫЛКА Справочник.ВремяВыездаПоМаршруту
	|			ТОГДА МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту.ВремяВыезда
	|		ИНАЧЕ МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ПланируемоеВремяВыездаПоМаршруту
	|	КОНЕЦ КАК ВремяВыходаВРейс,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Комментарий КАК Примечание,
	|	МаршрутныйЛистРасходныеОрдера.Документ,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Сборщик КАК Сборщик,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Склад.Владелец,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Склад,
	|	МаршрутныйЛистРасходныеОрдера.Документ.КоличествоПаллет КАК КоличествоПаллет,
	|	МаршрутныйЛистРасходныеОрдера.Документ.Статус КАК Статус,
	|	МаршрутныйЛистРасходныеОрдера.Документ.СборкаТерминаломЗакончена КАК СборкаТерминаломЗакончена,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Водитель КАК Водитель,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.ПогрузкаНачата,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.ДатаЗавершенияПогрузки
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Маршруты.ТорговыеТочки КАК МаршрутныйЛистТорговыеТочки
	|		ПО МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут = МаршрутныйЛистТорговыеТочки.Ссылка
	|			И МаршрутныйЛистРасходныеОрдера.Документ.Получатель = МаршрутныйЛистТорговыеТочки.СтруктурнаяЕдиница
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СканированныеПаллетыСрезПоследних.Ссылка КАК ПаллетРасходныйОрдер,
	|	СканированныеПаллетыСрезПоследних.КоличествоПаллет КАК Паллет
	|ПОМЕСТИТЬ втВодительПринял
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК СканированныеПаллетыСрезПоследних
	|ГДЕ
	|	СканированныеПаллетыСрезПоследних.Ссылка В
	|			(ВЫБРАТЬ
	|				вт.Документ
	|			ИЗ
	|				вт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Маршрут КАК Маршрут,
	|	вт.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	вт.Сборщик,
	|	вт.ДокументСклад КАК Склад,
	|	СУММА(ЕСТЬNULL(втВодительПринял.Паллет, NULL)) КАК ВодительПринял,
	|	МАКСИМУМ(вт.КолвоСетокВПоставке) КАК Сетки,
	|	вт.ВремяВыходаВРейс,
	|	вт.Водитель КАК Водитель,
	|	МАКСИМУМ(вт.ПогрузкаНачата) КАК ПогрузкаНачата,
	|	МИНИМУМ(вт.ДатаЗавершенияПогрузки) КАК ДатаЗавершенияПогрузки
	|ИЗ
	|	вт КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВодительПринял КАК втВодительПринял
	|		ПО вт.Документ = втВодительПринял.ПаллетРасходныйОрдер
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Маршрут,
	|	вт.СтруктурнаяЕдиница,
	|	вт.Сборщик,
	|	вт.ДокументСклад,
	|	вт.ВремяВыходаВРейс,
	|	вт.Водитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт.ВремяВыходаВРейс,
	|	вт.СтруктурнаяЕдиница
	|ИТОГИ ПО
	|	Маршрут,
	|	СтруктурнаяЕдиница";
	ВыбМарш = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтрПодр=Ссылка.СтруктурноеПодразделение;
    
	ТЗКат = Новый ТаблицаЗначений;
	ТЗКат.Колонки.Добавить("Группа");
	ТЗКат.Колонки.Добавить("Поиск");
	ТЗКат.Колонки.Добавить("Неактивные");
	ТЗКат.Колонки.Добавить("ВСборке");
	ТЗКат.Колонки.Добавить("СборкаЗакончена");
	ТЗКат.Колонки.Добавить("НаДебаркадере");
	ТЗКат.Колонки.Добавить("НаДебаркадереВодительПринял");
	
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Долгосрок";
	НовСтр.Поиск="Долгосро";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Заморозка";
	НовСтр.Поиск="Замороз";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Овощи";
	НовСтр.Поиск="Овощи";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Охлажден";
	НовСтр.Поиск="Охл";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Хлеб";
	НовСтр.Поиск="Хлеб";
	НовСтр=ТЗКат.Добавить();
	НовСтр.Группа="Молочка";
	НовСтр.Поиск=?(Найти(Строка(СтрПодр),"Кавказский")>0,"Кавказский","Молоч");
	ТабРез=Новый ТаблицаЗначений;
	
	
	
	ТабРез.Колонки.Добавить("Маршрут"	, Новый ОписаниеТипов("СправочникСсылка.Маршруты"));
	ТабРез.Колонки.Добавить("Магазин"	, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТабРез.Колонки.Добавить("ВремяВыхода", Новый ОписаниеТипов("Дата"));
	ТабРез.Колонки.Добавить("ФактВремя"	, Новый ОписаниеТипов("Дата"));
	ТабРез.Колонки.Добавить("Водитель"	, Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаКонтрагентов"));
	ТабРез.Колонки.Добавить("Долгосрок"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабРез.Колонки.Добавить("Заморозка"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабРез.Колонки.Добавить("Овощи"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабРез.Колонки.Добавить("Охлажден"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабРез.Колонки.Добавить("Хлеб"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабРез.Колонки.Добавить("Молочка"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Ит = 0;
	Пока ВыбМарш.Следующий() Цикл
		//ОблСтрокаНачало.Параметры.Маршрут=ВыбМарш.Маршрут;
		Ит = Ит + 1;
		//ОблСтрокаНачало.Параметры.Номер=Ит;
		Сч=0;
		ВыбТТ=ВыбМарш.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыбТТ.Следующий() Цикл
			Сч=Сч+1;
			ТЗКат=Новый ТаблицаЗначений;
			ТЗКат.Колонки.Добавить("Группа");
			ТЗКат.Колонки.Добавить("Поиск");
			ТЗКат.Колонки.Добавить("Неактивные");
			ТЗКат.Колонки.Добавить("ВСборке");
			ТЗКат.Колонки.Добавить("СборкаЗакончена");
			ТЗКат.Колонки.Добавить("НаДебаркадере");
			ТЗКат.Колонки.Добавить("ВодительПринял");
			ТЗКат.Колонки.Добавить("НаДебаркадереВодительПринял");
			
			НовСтр=ТЗКат.Добавить();
			НовСтр.Группа="Долгосрок";
			НовСтр.Поиск="Долгосро";
			НовСтр=ТЗКат.Добавить();
			НовСтр.Группа="Заморозка";
			НовСтр.Поиск="Замороз";
			НовСтр=ТЗКат.Добавить();
			НовСтр.Группа="Овощи";
			НовСтр.Поиск="Овощи";
			НовСтр=ТЗКат.Добавить();
			НовСтр.Группа="Охлажден";
			НовСтр.Поиск="Охл";
			НовСтр=ТЗКат.Добавить();
			НовСтр.Группа="Хлеб";
			НовСтр.Поиск="Хлеб";
			НовСтр=ТЗКат.Добавить();
			НовСтр.Группа="Молочка";
			НовСтр.Поиск=?(Найти(Строка(СтрПодр),"Кавказский")>0,"Кавказский","Молоч");
			
			
			//ОблСтрокаНачало.Параметры.ТТ=ВыбТТ.СтруктурнаяЕдиница;
			ВыбДетали=ВыбТТ.Выбрать();
			Водитель=Неопределено;
			Сетки=Ложь;
			ВремяВыхода=Дата(1,1,1);
			Пока ВыбДетали.Следующий() Цикл
				Для каждого Стр Из ТЗКат Цикл
					Если Найти(Нрег(Строка(ВыбДетали.Склад)), Нрег(Стр.Поиск))>0 Тогда
						
						СумВыб=?(ВыбДетали.ВодительПринял=null,0,ВыбДетали.ВодительПринял);
						СумСтр=?(Стр.ВодительПринял=Неопределено,0,Стр.ВодительПринял);
						Стр.ВодительПринял=?(Стр.ВодительПринял=Неопределено и ВыбДетали.ВодительПринял=null,Неопределено, СумВыб+СумСтр);
						
					КонецЕсли; 
					Водитель = ВыбДетали.Водитель;
					Если ВыбДетали.Сетки <> NULL Тогда
						Сетки = ВыбДетали.Сетки;
					КонецЕсли; 
					//ВремяВыхода=ВыбДетали.ВремяВыходаВРейс;
					ВремяВыхода = ?(ТипЗнч(ВыбДетали.ВремяВыходаВРейс) = Тип("СправочникСсылка.ВремяВыездаПоМаршруту"),
									ВыбДетали.ВремяВыходаВРейс.ВремяВыезда,
									ВыбДетали.ВремяВыходаВРейс);
					
				КонецЦикла; 
			КонецЦикла;
			
			СтрокаРез = ТабРез.Добавить();
			СтрокаРез.Маршрут		= ВыбМарш.Маршрут;
			СтрокаРез.ФактВремя		= ВыбМарш.ДатаЗавершенияПогрузки;
			СтрокаРез.Водитель		= Водитель;
			СтрокаРез.ВремяВыхода	= ВремяВыхода;
			СтрокаРез.Магазин		= ВыбТТ.СтруктурнаяЕдиница;
			
			Для каждого Стр Из ТЗКат Цикл
				Если Стр.ВодительПринял = Неопределено Тогда
					Кол=0;
				Иначе
					Кол=Стр.ВодительПринял;
				КонецЕсли; 
				СтрокаРез[Стр.Группа]=Кол;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
   	Возврат ТабРез;

КонецФункции  
//АК БЕЛН 15.02.2017+

Функция ПечатьРО_Товары(Ссылка, ТаблицаРО)
	
	//
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_Рейс_РасходныйОрдер_Товары";
	
	ДатаДляСреза = '00010101';
	Для Каждого СтрокаТаб Из ТаблицаРО Цикл
		ДатаДляСреза = Макс(ДатаДляСреза, СтрокаТаб.Документ.Дата);
	КонецЦикла;
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, КонецДня(ДатаДляСреза));
	Запрос.Параметры.Вставить("МассивРО"	, ТаблицаРО.ВыгрузитьКолонку("Документ"));//МассивРО);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерСклад.Ссылка,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация.НаименованиеСокращенное, """") КАК ОрганизацияНаименование,
	|	ЕСТЬNULL(ЦФОСтруктурныхЕдиницСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	РасходныйОрдерСклад.ВерсияДанных,
	|	РасходныйОрдерСклад.ПометкаУдаления,
	|	РасходныйОрдерСклад.Номер,
	|	РасходныйОрдерСклад.Дата,
	|	РасходныйОрдерСклад.ДатаРаспределения,
	|	РасходныйОрдерСклад.Проведен,
	|	РасходныйОрдерСклад.ВидОперации,
	|	РасходныйОрдерСклад.Склад,
	|	РасходныйОрдерСклад.Перевозчик.Наименование КАК ПеревозчикНаименование,
	|	РасходныйОрдерСклад.Перевозчик,
	|	РасходныйОрдерСклад.Водитель.Наименование КАК ВодительНаименование,
	|	РасходныйОрдерСклад.Водитель,
	|	РасходныйОрдерСклад.Автор,
	|	РасходныйОрдерСклад.Товары.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА РасходныйОрдерСклад.ПровереноОператором
	|				ТОГДА РасходныйОрдерСклад.Товары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Количество,
	|		КоличествоУРЗ,
	|		Номенклатура.Наименование КАК Наименование,
	|		Характеристика.Наименование,
	|		ДатаПроизводства КАК ДатаПрзв
	|	) КАК Товары,
	|	РасходныйОрдерСклад.Получатель,
	|	РасходныйОрдерСклад.Расходники.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК Наименование,
	|		ЕдиницаИзмерения,
	|		Отгружено
	|	) КАК Расходники,
	|	РасходныйОрдерСклад.ЕстьРасходники,
	|	ЕСТЬNULL(МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.Наименование, """") КАК Маршрут,
	|	РасходныйОрдерСклад.Комментарий,
	|	РасходныйОрдерСклад.Склад.Владелец КАК СтруктурнаяЕдиница,
	|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут.ОтгружаетсяИзЗоны КАК ОтгружаетсяИзЗоны
	|ИЗ
	|	Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|		ПО РасходныйОрдерСклад.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(&ДатаСреза, ) КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|		ПО РасходныйОрдерСклад.Получатель = ЦФОСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходныйОрдерСклад.Ссылка В(&МассивРО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоличествоВКоробкеСрезПоследних.Характеристика КАК Объект,
	|	КоличествоВКоробкеСрезПоследних.Количество КАК Значение,
	|	КоличествоВКоробкеСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.КоличествоВКоробке.СрезПоследних(
	|			&ДатаСреза,
	|			Характеристика В
	|				(ВЫБРАТЬ
	|					РасходныйОрдерСкладТовары.Характеристика
	|				ИЗ
	|					Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	|				ГДЕ
	|					РасходныйОрдерСкладТовары.Ссылка В (&МассивРО))) КАК КоличествоВКоробкеСрезПоследних";
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабСсылок 			= Результаты[0].Выгрузить();
	ТабХарактеристики 	= Результаты[1].Выгрузить();
	
	ОбластьМаршрут          = Макет.ПолучитьОбласть("Маршрут");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСклад	 		= Макет.ПолучитьОбласть("Склад");
	ОбластьПолучатель 		= Макет.ПолучитьОбласть("Получатель");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОбластьШапкаТаблицыРМ 	= Макет.ПолучитьОбласть("ШапкаТаблицыРМ");
	ОбластьСтрокаРМ 		= Макет.ПолучитьОбласть("СтрокаРМ");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодвалТаблицыРМ 	= Макет.ПолучитьОбласть("ПодвалТаблицыРМ");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьВремяПечати 		= Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьИтог         	= Макет.ПолучитьОбласть("Итог");

	мПеревозчик			= Ссылка.Перевозчик;
	мТекстПеревозчика 	= СокрЛП(мПеревозчик.Наименование);
	
	СтруктураОтбора = Новый Структура("Ссылка");
	
	Для Каждого СтрокаРасходныйОрдер Из ТаблицаРО Цикл
		
		СтруктураОтбора.Ссылка = СтрокаРасходныйОрдер.Документ;
		СтрокиТаблицы = ТабСсылок.НайтиСтроки(СтруктураОтбора);
		
		ВставлятьРазделительСтраниц = Ложь;
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьМаршрут.Параметры.Маршрут = СтрокаТаблицы.Маршрут;
			ТабДокумент.Вывести(ОбластьМаршрут);

			ОбластьЗаголовок.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьЗаголовок.Параметры.Дата = Формат(СтрокаТаблицы.Дата, "ДЛФ=DD");
			
			ОбщегоНазначенияКлиентСервер.ДобавитьШтрихкодВОбластьДокумента(ОбластьЗаголовок, СтрокаТаблицы.Ссылка);
			
			ТабДокумент.Вывести(ОбластьЗаголовок);
			
			ОбластьСклад.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьСклад.Параметры.Перевозчик			 	= мПеревозчик;
			ОбластьСклад.Параметры.ПеревозчикНаименование 	= мТекстПеревозчика;
			ОбластьСклад.Параметры.ГосНомерАвтомобиля 		= СокрЛП(Ссылка.Автомобиль.Наименование);;//СокрЛП(СтрокаРасходныйОрдер.Автомобиль.Наименование);

			ТабНоменклатура = СтрокаТаблицы.Товары.Скопировать();
			ТабНоменклатура.Колонки.Добавить("ПолученоТТ", Новый ОписаниеТипов("Число"));
			КоличествоВУпаковке = 0;
			ИтогКолУпак			= 0;
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Объект", СтрокаТаблицы.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
				КоличествоВУпаковке = 0;
				Если СтрокиХарактеристика.Количество() > 0 Тогда
					КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
				КонецЕсли;	
				
				Если КоличествоВУпаковке > 0 Тогда
					ИтогКолУпак = ИтогКолУпак + Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				КонецЕсли;	
			КонецЦикла;
			ОбластьСклад.Параметры.Коробок = ИтогКолУпак;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ОтгружаетсяИзЗоны)
					И СтрокаТаблицы.ОтгружаетсяИзЗоны <> СтрокаТаблицы.Склад Тогда
				ОбластьСклад.Параметры.Склад = СокрЛП(ОбластьСклад.Параметры.Склад) + " (через " + СокрЛП(СтрокаТаблицы.ОтгружаетсяИзЗоны) + ")";
			КонецЕсли;	
			ТабДокумент.Вывести(ОбластьСклад);//, Выборка.Уровень());

			ОбластьПолучатель.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьПолучатель.Параметры.Водитель 				= Ссылка.Водитель;
			ОбластьПолучатель.Параметры.ВодительНаименование 	= СокрЛП(Ссылка.Водитель.Наименование);
			ТабДокумент.Вывести(ОбластьПолучатель);//, Выборка.Уровень());
			
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
	
			//РасчитыватьПолученоТТ = ЗначениеЗаполнено(СтрокаТаблицы.Получатель)
			//							И ТипЗнч(СтрокаТаблицы.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			//							И ПараметрыСеанса.НеВыполнятьДинамическоеЧтениеКоличествПолученныхТТ = Ложь;
			//Если РасчитыватьПолученоТТ Тогда
			//	ТабДанные = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаРаспределения), СтрокаТаблицы.ДатаРаспределения, СтрокаТаблицы.Дата),
			//					?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаРаспределения), СтрокаТаблицы.ДатаРаспределения, СтрокаТаблицы.Дата),
			//					СтрокаТаблицы.Получатель);
			//												
			//	Для Каждого СтрокаТаб Из ТабНоменклатура Цикл
			//		СтрокаОстаток = ТабДанные.Найти(СтрокаТаб.Номенклатура, "Номенклатура");
			//		Если НЕ СтрокаОстаток = Неопределено Тогда
			//			МинКолво = Мин(СтрокаОстаток.Поступило, СтрокаТаб.Количество);
			//			СтрокаОстаток.Поступило = СтрокаОстаток.Поступило - МинКолво;
			//		Иначе
			//			МинКолво = 0;
			//		КонецЕсли;
			//		СтрокаТаб.ПолученоТТ = МинКолво;
			//	КонецЦикла;
			//	
			//	Для Каждого СтрокаДанные Из ТабДанные Цикл
			//		Если СтрокаДанные.Поступило <= 0 Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		СтрокиТоваров = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДанные.Номенклатура));
			//		Если СтрокиТоваров.Количество() > 0 Тогда
			//			 СтрокиТоваров[0].ПолученоТТ = СтрокиТоваров[0].ПолученоТТ + СтрокаДанные.Поступило;
			//		КонецЕсли;	
			//	КонецЦикла;
			//КонецЕсли;
			
			// Строка
			КолвоКор 	= 0;
			КолвоЕд 	= 0;
			КолвоУРЗ 	= 0;
			КолвоТТ 	= 0;
			ИтогКолУпак = 0;
			ТабНоменклатура.Сортировать("НомерСтроки");
			Для Каждого ВыборкаНоменклатура Из ТабНоменклатура Цикл
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
				
				СтрокиХарактеристика = ТабХарактеристики.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница, Объект", СтрокаТаблицы.СтруктурнаяЕдиница, ВыборкаНоменклатура.Характеристика));
				КоличествоВУпаковке = 0;
				Если СтрокиХарактеристика.Количество() > 0 Тогда
					КоличествоВУпаковке = СтрокиХарактеристика[0].Значение;
				КонецЕсли;	
				Если КоличествоВУпаковке > 0 Тогда
					ОбластьСтрока.Параметры.КолУпакУРЗ 	= Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
					ОбластьСтрока.Параметры.КолУпак 	= Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				Иначе				
					ОбластьСтрока.Параметры.КолУпакУРЗ 	= "";
					ОбластьСтрока.Параметры.КолУпак 	= "";
				КонецЕсли;
				
				Если КоличествоВУпаковке > 0 Тогда
					КолвоКор 	= КолвоКор 		+ Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
					ИтогКолУпак = ИтогКолУпак	+ Окр(ВыборкаНоменклатура.Количество / КоличествоВУпаковке, 1);
				КонецЕсли;	
				КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
				КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
				//СтрокаХарактеристика = ТабХарактеристики.Найти(ВыборкаНоменклатура.Характеристика, "Объект");
				//КоличествоВУпаковке = 0;
				//Если СтрокаХарактеристика <> Неопределено Тогда
				//	КоличествоВУпаковке = СтрокаХарактеристика.Значение;
				//КонецЕсли;	
				//Если КоличествоВУпаковке > 0 Тогда
				//	ОбластьСтрока.Параметры.КолУпакУРЗ = Окр(ВыборкаНоменклатура.КоличествоУРЗ / КоличествоВУпаковке, 1);
				//Иначе				
				//	ОбластьСтрока.Параметры.КолУпакУРЗ = "";
				//КонецЕсли;

				//Если КоличествоВУпаковке > 0 Тогда
				//	КолвоКор = КолвоКор + Окр(ВыборкаНоменклатура.КоличествоУРЗ/КоличествоВУпаковке,1);
				//КонецЕсли;	
				//КолвоЕд 	= КолвоЕд 	+ ВыборкаНоменклатура.Количество;
				//КолвоУРЗ 	= КолвоУРЗ 	+ ВыборкаНоменклатура.КоличествоУРЗ;
				//КолвоТТ 	= КолвоТТ 	+ ВыборкаНоменклатура.ПолученоТТ;

				ТабДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
			
			// Подвал
			ТабДокумент.Вывести(ОбластьПодвалТаблицы);
			ОбластьИтог.Параметры.ИтогКор 	= КолвоКор;
			ОбластьИтог.Параметры.ИтогУРЗ 	= КолвоУРЗ;
			ОбластьИтог.Параметры.ИтогЕд 	= КолвоЕд;
			ОбластьИтог.Параметры.ИтогКолУпак 	= ИтогКолУпак;
			//ОбластьИтог.Параметры.ИтогТТ 	= КолвоТТ;
			ТабДокумент.Вывести(ОбластьИтог);
			
			Если СтрокаТаблицы.ЕстьРасходники Тогда
				ТабДокумент.Вывести(ОбластьШапкаТаблицыРМ);
				ВыборкаРасходники = СтрокаТаблицы.Расходники.Выбрать();
				
				Пока ВыборкаРасходники.Следующий() Цикл
					ОбластьСтрокаРМ.Параметры.Заполнить(ВыборкаРасходники);
					ТабДокумент.Вывести(ОбластьСтрокаРМ);
				КонецЦикла;
				ТабДокумент.Вывести(ОбластьПодвалТаблицыРМ);
			КонецЕсли;
			ОбластьВремяПечати.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + СтрокаТаблицы.Автор;
			
			ТабДокумент.Вывести(ОбластьПодвал);

			ВставлятьРазделительСтраниц = Истина;
			ТабДокумент.Вывести(ОбластьВремяПечати);
			
			//
			//Паллета = Справочники.СоставПаллеты.НайтиПоРеквизиту("РасходныйОрдер", Ссылка);
			//Если Не ЗначениеЗаполнено(Паллета) Тогда
			//	Блокировка=Новый БлокировкаДанных;
			//	Эл=Блокировка.Добавить();
			//	Эл.Область="Справочник.СоставПаллеты";
			//	Эл.Режим=РежимБлокировкиДанных.Исключительный;
			//	Блокировка.Заблокировать();
			//	ОбъектПаллеты=Справочники.СоставПаллеты.СоздатьЭлемент();
			//	ОбъектПаллеты.РасходныйОрдер=Ссылка;
			//	Попытка
			//		ОбъектПаллеты.Записать();
			//	Исключение
			//		Сообщить("Повторите попытку печати");
			//		Возврат Новый ТабличныйДокумент;
			//	КонецПопытки; 
			//КонецЕсли; 
			//Запрос = Новый Запрос;
			//Запрос.Текст = 
			//	"ВЫБРАТЬ
			//	|	СоставПаллеты.Ссылка
			//	|ИЗ
			//	|	Справочник.СоставПаллеты КАК СоставПаллеты
			//	|ГДЕ
			//	|	СоставПаллеты.РасходныйОрдер = &РасходныйОрдер
			//	|	И СоставПаллеты.ПометкаУдаления = ЛОЖЬ";

			//Запрос.УстановитьПараметр("РасходныйОрдер", Ссылка);

			//Результат = Запрос.Выполнить();

			//ВыборкаДетальныеЗаписи = Результат.Выбрать();
			//Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
			//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			//КонецЕсли;
			//ВнешняяКомпонента = Справочники.Номенклатура.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
			//	
			//УчаствуетВМаршруте = "";
			//Запрос = Новый Запрос();
			//Запрос.Текст =
			//"ВЫБРАТЬ
			//|	МаршрутныйЛистРасходныеОрдера.Ссылка.Маршрут КАК Маршрут
			//|ИЗ
			//|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
			//|ГДЕ
			//|	МаршрутныйЛистРасходныеОрдера.Документ = &Документ
			//|	И МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления = ЛОЖЬ";
			//Запрос.УстановитьПараметр("Документ", Ссылка);
			//ВыборкаМ = Запрос.Выполнить().Выбрать();
			//Если ВыборкаМ.Следующий() Тогда
			//	//УчаствуетВМаршруте = ВыборкаМ.Маршрут;
			//	УчаствуетВМаршруте = ВыборкаМ.Маршрут.Наименование+" "+ВыборкаМ.Маршрут.ПолноеНаименование;
			//КонецЕсли;	
			//		
			//Область = Макет.ПолучитьОбласть("Этикетка");
			//ОбластьСтр = Макет.ПолучитьОбласть("СтрокаПал");
			//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//	Область.Параметры.ТорговаяТочка = Ссылка.Получатель;
			//	ШтрихКод = "850" + Прав("000000000000" + Формат(ВыборкаДетальныеЗаписи.Ссылка.ИД, "ЧГ=0"), 12);
			//	ТабДок1 = Новый ТабличныйДокумент();
			//	Область.Параметры.Паллета = "ИД "+ВыборкаДетальныеЗаписи.Ссылка.ИД+" "+Строка(ВыборкаДетальныеЗаписи.Ссылка.РасходныйОрдер);
			//	Область.Параметры.МаршЛист = УчаствуетВМаршруте;
			//	
			//	Рисунок 					= Область.Рисунки["ШтрихКодПал"];
			//	
			//	ПараметрыШК = Новый Структура();
			//	ПараметрыШК.Вставить("Ширина", Рисунок.Ширина);
			//	ПараметрыШК.Вставить("Высота", Рисунок.Высота);
			//	ПараметрыШК.Вставить("ТипКода", 4);
			//	ПараметрыШК.Вставить("ОтображатьТекст", Ложь);
			//	ПараметрыШК.Вставить("РазмерШрифта", 10);
			//	ПараметрыШК.Вставить("Штрихкод", Штрихкод);
			//	Рисунок.Картинка = ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШК);
			//	Область.Параметры.ШК = ШтрихКод;
			//	Область.Параметры.Коробок=КолвоКор;
			//	ТабДок1.Вывести(Область);
			//	Для каждого Стр Из ВыборкаДетальныеЗаписи.Ссылка.Состав Цикл
			//		ОбластьСтр.Параметры.Заполнить(Стр);
			//		ТабДок1.Вывести(ОбластьСтр);
			//	КонецЦикла; 
			//	Если ТабДок.ПроверитьВывод(ТабДок1) Тогда
			//		 ТабДок.Вывести(ТабДок1);
			//	Иначе
			//		 ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			//		 ТабДок.Вывести(ТабДок1);
			//	КонецЕсли; 
			//КонецЦикла;

		КонецЦикла;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	ТабДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьРО_Оборудование(МассивРО)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_Рейс_РасходныйОрдер_Оборудование";
	
	Макет = Документы.РасходныйОрдерСклад.ПолучитьМакет("РасходныйОрдер_Оборудование");
	
	Для Каждого ДокРасходныйОрдер Из МассивРО Цикл
		
		//Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Номер			= ДокРасходныйОрдер.Номер;
		Область.Параметры.Дата			= Формат(ДокРасходныйОрдер.Дата, "ДЛФ=DD");
		Область.Параметры.Склад			= ДокРасходныйОрдер.Склад;
		Область.Параметры.ВидОперации	= ДокРасходныйОрдер.ВидОперации;
		Область.Параметры.Получатель	= ДокРасходныйОрдер.Получатель;
		ТабДокумент.Вывести(Область);
		
		//Шапка
		Область	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(Область);
		
		//Тело
		Область = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрокаТЧ Из ДокРасходныйОрдер.Оборудование Цикл
			ТекОборудование = СтрокаТЧ.Оборудование;
			Область.Параметры.НомерСтроки	= СтрокаТЧ.НомерСтроки;
			Область.Параметры.ОС			= ТекОборудование;
			Область.Параметры.ИнвНомер		= ТекОборудование.ИнвентарныйНомер;
			Область.Параметры.ЗавНомер		= ТекОборудование.ЗаводскойНомер;
			Область.Параметры.Количество	= 1;
			ТабДокумент.Вывести(Область);
		КонецЦикла;
		
		//Итог
		Область	= Макет.ПолучитьОбласть("Итог");
		Область.Параметры.ИтогоКоличество = ДокРасходныйОрдер.Оборудование.Количество();
		ТабДокумент.Вывести(Область);
		
		//Подвал
		Область	= Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Область);
		
		//Время печати
		Область = Макет.ПолучитьОбласть("ВремяПечати");
		Область.Параметры.ВремяПечати = "[" + ТекущаяДата() + "] " + "Автор: " + ДокРасходныйОрдер.Автор;
		ТабДокумент.Вывести(Область);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	ТабДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.ПолеСнизу 			= 5;
	ТабДокумент.ПолеСверху 			= 5;	
	ТабДокумент.АвтоМасштаб 		= Истина;
	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.Защита 				= Ложь;
	ТабДокумент.ТолькоПросмотр 		= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьРасходныйОрдер_Товары(Ссылка) Экспорт
	
	ТЧРасходныеОрдера = Ссылка.РасходныеОрдера;
	
	СтрокаРеквизитов = "Документ";
	ТаблицаРО = ТЧРасходныеОрдера.ВыгрузитьКолонки(СтрокаРеквизитов);
	
	мОтгрузкаВТорговуюТочку = Перечисления.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку;
	Для Каждого СтрокаТЧ Из ТЧРасходныеОрдера Цикл
		Если СтрокаТЧ.Документ.ВидОперации = мОтгрузкаВТорговуюТочку Тогда
			НоваяСтрока = ТаблицаРО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, СтрокаРеквизитов);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРО.Количество() > 0 Тогда
		Возврат ПечатьРО_Товары(Ссылка, ТаблицаРО);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьРасходныйОрдер_Оборудование(Ссылка) Экспорт
	
	ТЧРасходныеОрдера = Ссылка.РасходныеОрдера;
	
	МассивРО = Новый Массив;
	
	мПередачаОборудованияВТТТ = Перечисления.ВидыОперацийРасходСкладскойУчет.ПередачаОборудованияВТорговуюТочку;
	Для Каждого СтрокаТЧ Из ТЧРасходныеОрдера Цикл
		Если СтрокаТЧ.Документ.ВидОперации = мПередачаОборудованияВТТТ Тогда
			МассивРО.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРО.Количество() > 0 Тогда
		Возврат ПечатьРО_Оборудование(МассивРО);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//+++АК KOPA 2018.05.31 ИП-00018542
Функция Сформировать_РТУ_EDI(Рейс) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	МаршрутныйЛистРасходныеОрдера.Документ КАК Документ
	|ПОМЕСТИТЬ втРейс
	|ИЗ
	|	Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
	|ГДЕ
	|	МаршрутныйЛистРасходныеОрдера.Ссылка = &Рейс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугРасходныеОрдера.Ссылка.EDI_ТочкаДоставки
	|ПОМЕСТИТЬ втРТУ
	|ИЗ
	|	втРейс КАК втРейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.РасходныеОрдера КАК РеализацияТоваровУслугРасходныеОрдера
	|		ПО втРейс.Документ = РеализацияТоваровУслугРасходныеОрдера.РасходныйОрдер
	|			И (РеализацияТоваровУслугРасходныеОрдера.Ссылка.Проведен)
	|			И (РеализацияТоваровУслугРасходныеОрдера.Ссылка.Контрагент = &Контрагент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРТУ.EDI_ТочкаДоставки,
	|	ВЫБОР
	|		КОГДА КонтурEDI_СтатусыДокументов.ИмяСтатуса ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОбратныйЗаказ,
	|	ЕСТЬNULL(КонтурEDI_Сообщения.НомерЗаказа, ""НЕТ"") КАК НомерЗаказа,
	|	втРТУ.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.НомерСтороннейТочки КАК Werk_id,
	|	СтруктурныеЕдиницы.Наименование КАК НаименованиеМагазина,
	|	ЕСТЬNULL(КонтурEDI_Сообщения.ДатаЗагрузки, ""Нет"") КАК ДатаЗагрузки
	|ПОМЕСТИТЬ втЗаказПолучен
	|ИЗ
	|	втРТУ КАК втРТУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
	|		ПО втРТУ.Ссылка = КонтурEDI_СтатусыДокументов.Документ
	|			И (КонтурEDI_СтатусыДокументов.ИмяСтатуса = &ИмяСтатусаОбратныйЗаказ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ПО втРТУ.Ссылка = КонтурEDI_Сообщения.Документ
	|			И (НЕ КонтурEDI_Сообщения.ПометкаУдаления)
	|			И (КонтурEDI_Сообщения.ТипСообщения = ""PORDERS"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО втРТУ.EDI_ТочкаДоставки = СтруктурныеЕдиницы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РеализацияТоваровУслугEDI_Товары.Ссылка) КАК Ссылка,
	|	РеализацияТоваровУслугEDI_Товары.Номенклатура,
	|	РеализацияТоваровУслугEDI_Товары.Характеристика,
	|	СУММА(РеализацияТоваровУслугEDI_Товары.Количество) КАК Количество,
	|	втЗаказПолучен.Werk_id,
	|	втЗаказПолучен.EDI_ТочкаДоставки КАК Магазин,
	|	втЗаказПолучен.ЕстьОбратныйЗаказ,
	|	РеализацияТоваровУслугEDI_Товары.НомерСтроки,
	|	втЗаказПолучен.НаименованиеМагазина,
	|	втЗаказПолучен.НомерЗаказа,
	|	втЗаказПолучен.ДатаЗагрузки
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.EDI_Товары КАК РеализацияТоваровУслугEDI_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказПолучен КАК втЗаказПолучен
	|		ПО (втЗаказПолучен.Ссылка = РеализацияТоваровУслугEDI_Товары.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугEDI_Товары.Номенклатура,
	|	РеализацияТоваровУслугEDI_Товары.Характеристика,
	|	втЗаказПолучен.Werk_id,
	|	втЗаказПолучен.EDI_ТочкаДоставки,
	|	втЗаказПолучен.ЕстьОбратныйЗаказ,
	|	РеализацияТоваровУслугEDI_Товары.НомерСтроки,
	|	втЗаказПолучен.НаименованиеМагазина,
	|	втЗаказПолучен.НомерЗаказа,
	|	втЗаказПолучен.ДатаЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(втТовары.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(втТовары.Характеристика) КАК Характеристика,
	|	втТовары.Количество КАК КоличествоРТУ,
	|	втТовары.Werk_id КАК Werk_id,
	|	втТовары.Магазин,
	|	втТовары.ЕстьОбратныйЗаказ,
	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, ""НЕТ"") КАК PLU,
	|	ЕСТЬNULL(КонтурEDI_Статистика.Количество, 0) КАК КоличествоСогл,
	|	втТовары.НаименованиеМагазина КАК НаименованиеМагазина,
	|	втТовары.НомерЗаказа КАК НомерЗаказа,
	|	втТовары.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВЫБОР
	|		КОГДА втТовары.ЕстьОбратныйЗаказ
	|			ТОГДА ВЫБОР
	|					КОГДА втТовары.Номенклатура.Весовой
	|						ТОГДА ВЫБОР
	|								КОГДА втТовары.Количество - 0.9 * ЕСТЬNULL(КонтурEDI_Статистика.Количество, 0) >= 0
	|										И ЕСТЬNULL(КонтурEDI_Статистика.Количество, 0) - 0.9 * втТовары.Количество >= 0
	|									ТОГДА ""1 Загружено без ошибок""
	|								ИНАЧЕ ""2 Загружено с отклонениями""
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА втТовары.Количество = ЕСТЬNULL(КонтурEDI_Статистика.Количество, 0)
	|								ТОГДА ""1 Загружено без ошибок""
	|							ИНАЧЕ ""2 Загружено с отклонениями""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ""3 Не загружено""
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|		ПО втТовары.Номенклатура = КонтурEDI_СоответствияТоваров.Номенклатура
	|			И втТовары.Характеристика = КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры
	|			И (КонтурEDI_СоответствияТоваров.Партнер = &Партнер)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_Статистика КАК КонтурEDI_Статистика
	|		ПО втТовары.Ссылка = КонтурEDI_Статистика.Документ1С
	|			И втТовары.НомерСтроки = КонтурEDI_Статистика.НомерСтрокиТоваров
	|			И (КонтурEDI_Статистика.ТипСообщения = ""PORDERS"")
	|ИТОГИ
	|	МАКСИМУМ(Werk_id),
	|	МАКСИМУМ(НомерЗаказа),
	|	МАКСИМУМ(ДатаЗагрузки),
	|	МАКСИМУМ(Статус)
	|ПО
	|	НаименованиеМагазина";	
#КонецОбласти		
	КонтрагентХ5 = Справочники.Контрагенты.НайтиПоКоду("000001121");
	ПартнерХ5 = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоКоду("000000006");
	
	Запрос.УстановитьПараметр("ИмяСтатусаОбратныйЗаказ", "ОбратныйЗаказ");
	Запрос.УстановитьПараметр("Контрагент", КонтрагентХ5);
	Запрос.УстановитьПараметр("Партнер", ПартнерХ5);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	РезультатЗапроса = Запрос.Выполнить();	
	
	ВыборкаМагазина = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.МаршрутныйЛист.ПолучитьМакет("ОбменХ5");
	
	ОбластьРейс = Макет.ПолучитьОбласть("Шапка");
	ОбластьРейс.Параметры.Рейс = "Рейс: " + Рейс.Номер + " от " + Рейс.Дата;
	ТабДок.Вывести(ОбластьРейс);
	ОбластьМагазин = Макет.ПолучитьОбласть("Магазин");
	ОбластьЗаголовокНоменклатура = Макет.ПолучитьОбласть("ЗаголовокНоменклатура");
	
	НуженРазделитель = Ложь;
	
	Пока ВыборкаМагазина.Следующий() Цикл
		
		Если Не НуженРазделитель Тогда
			НуженРазделитель = Истина;
		Иначе 
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		
		ОбластьМагазин.Параметры.НаименованиеМагазина = ВыборкаМагазина.НаименованиеМагазина;
		ОбластьМагазин.Параметры.Werk_id = Формат(ВыборкаМагазина.Werk_id, "ЧГ=");
		ОбластьМагазин.Параметры.НомерЗаказа = ВыборкаМагазина.НомерЗаказа;
		ОбластьМагазин.Параметры.ДатаЗаказа = ВыборкаМагазина.ДатаЗагрузки;
		//+++AK GREK 24.08.2018 ИП-00018542^01
		ОбластьМагазин.Параметры.СтатусЗаказа = Сред(ВыборкаМагазина.Статус,2);
		//---AK
		
		ТабДок.Вывести(ОбластьМагазин);
			
		ТабДок.Вывести(ОбластьЗаголовокНоменклатура);
		
		ОбластьСтрокаНоменклатура = Макет.ПолучитьОбласть("СтрокаНоменклатура");
		
		Выборка = ВыборкаМагазина.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаНоменклатура.Параметры, Выборка);
			ОбластьСтрокаНоменклатура.Параметры.Отклонение = Выборка.КоличествоРТУ - Выборка.КоличествоСогл;
			
			ТабДок.Вывести(ОбластьСтрокаНоменклатура);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции//---АК KOPA

#Область ДвиженияДокумента

//+++АК LATV 2018.06.23 ИП-00018971
Функция ДвиженияДокумента(Ссылка) Экспорт

	ДвиженияДокумента = Новый Структура();
	ДвиженияДокумента.Вставить("Финансовый", СформироватьДвижения_Финансовый(Ссылка));
	
	Возврат ДвиженияДокумента;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Функция СформироватьДвижения_Финансовый(Ссылка) Экспорт

	// Инициализация
	Отказ = Ложь;
	
	ДвиженияФин = РегистрыБухгалтерии.Финансовый.СоздатьНаборЗаписей();
	
	// Получение данных документа
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, Дата, Организация, Перевозчик, ВидПеревозки, ВариантРасчетаНДС, СтавкаНДС, Сумма, СуммаНДС");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МаршрутныйЛистПриходныеОрдера.ПриходныйОрдер КАК ПриходныйОрдер
		|ИЗ
		|	Документ.МаршрутныйЛист.ПриходныеОрдера КАК МаршрутныйЛистПриходныеОрдера
		|ГДЕ
		|	МаршрутныйЛистПриходныеОрдера.Ссылка = &Ссылка");
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ПриходныеОрдера = Запрос.Выполнить().Выгрузить();
	ДанныеДокумента.Вставить("ПриходныеОрдера", ПриходныеОрдера);
	
	// Формирование движений
	ОтразитьДвиженияПоРегиструБухгалтерии(ДанныеДокумента, ДвиженияФин, Отказ);
	
	// Итоговые действия с движениями
	АК_УчетМСФО.ЗаполнитьОрганизацию(ДвиженияФин, ДанныеДокумента.Организация);
	
	Если ДанныеДокумента.Дата >= Константы.АК_ГраницаОтказаОтКомплектовНа41Счете.Получить() Тогда
		тзНеразделямыеКомплекты = Товародвижение.АК_РазобратьКомплектыВДвиженияхПо41Счёту(ДвиженияФин, Ссылка);
		
		Если тзНеразделямыеКомплекты.Количество() <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Проведение документа невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,, Отказ);
			Для Каждого Стр Из тзНеразделямыеКомплекты Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Комплект ""%1"" невозможно разбить на составляющие из-за нулевого количества всех составляющих комплекта'")
					, Стр["Наименование"]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение результата
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДвижений = ДвиженияФин.Выгрузить();
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Возврат ТаблицаДвижений;

КонецФункции

//+++АК LATV 2018.06.23 ИП-00018971
Процедура ОтразитьДвиженияПоРегиструБухгалтерии(ДанныеДокумента, ДвиженияФин, Отказ)

	Если ДанныеДокумента.Дата < Дата(2016, 12, 1) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДокумента.ВидПеревозки <> Справочники.АК_ВидыПеревозки.ДоставкаНаСклад Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДокумента.ПриходныеОрдера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДокумента.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле
	 Или ДанныеДокумента.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		мСуммаВсего = ДанныеДокумента.Сумма;
	Иначе
		мСуммаВсего = ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС;
	КонецЕсли;
	
	// Таблица сумм, распределенных по поставщикам пропорционально массам
	ПриходныеОрдера = ДанныеДокумента.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер");
	ТаблицаКПроведению = ПолучитьРаспределениеСуммыТранспортныхРасходов(ДанныеДокумента.Дата
		, ПриходныеОрдера, мСуммаВсего);
	Если ТаблицаКПроведению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мОкругленнаяСумма = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКПроведению Цикл
		мОкругленнаяСумма = мОкругленнаяСумма + Окр(СтрокаТаблицы.Сумма, 2);
	КонецЦикла;
	
	РазницаПриОкруглении = мСуммаВсего - мОкругленнаяСумма;
	Если НЕ РазницаПриОкруглении = 0 Тогда // разница при округлении - в последнюю строку
		ПоследняяСтрока = ТаблицаКПроведению[ТаблицаКПроведению.Количество() - 1];
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма + РазницаПриОкруглении;
	КонецЕсли;
	
	ТаблицаТоваровКПроведению 	= ТаблицаКПроведению.СкопироватьКолонки();
	ТаблицаТоваровКПроведению.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаУпаковкиКПроведению 	= ТаблицаКПроведению.СкопироватьКолонки();

	Для Каждого СтрокаТаблицы Из ТаблицаКПроведению Цикл
		Если НЕ СтрокаТаблицы.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			НоваяСтрока = ТаблицаТоваровКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СтруктурнаяЕдиница = НоваяСтрока.Склад.Владелец;
		Иначе
			НоваяСтрока = ТаблицаУпаковкиКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваровКПроведению.Свернуть("СтруктурнаяЕдиница, Номенклатура", "Сумма");
	
	СтруктураНастроек				= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ДоставкаТовараНаСклад, ДанныеДокумента.Дата);
	НастройкаОтраженияНДСПоТоварам	= ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, ДанныеДокумента.Дата);
	
	ТабВыделенияНДС = Новый ТаблицаЗначений();
	ТабВыделенияНДС.Колонки.Добавить("СтрокаТаблицы");
	ТабВыделенияНДС.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабВыделенияНДС.Колонки.Добавить("Сумма");
	Для Каждого СтрокаТаблицы Из ТаблицаТоваровКПроведению Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДоб = ТабВыделенияНДС.Добавить();
		СтрокаДоб.СтрокаТаблицы = СтрокаТаблицы;
		СтрокаДоб.Сумма 		= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаУпаковкиКПроведению Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДоб = ТабВыделенияНДС.Добавить();
		СтрокаДоб.СтрокаТаблицы = СтрокаТаблицы;
		СтрокаДоб.Сумма 		= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(ДанныеДокумента.СуммаНДС, ТабВыделенияНДС.ВыгрузитьКолонку("Сумма"));
	Если Не МассивРаспределения = Неопределено Тогда
		ТабВыделенияНДС.ЗагрузитьКолонку(МассивРаспределения, "СуммаНДС");
	КонецЕсли;
	
	Для Каждого СтрокаНДС Из ТабВыделенияНДС Цикл
		СтрокаНДС.СтрокаТаблицы.Сумма = СтрокаНДС.СтрокаТаблицы.Сумма - СтрокаНДС.СуммаНДС;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		мСчет6004 	= ПланыСчетов.Финансовый.ПрочаяЗадолженность;
		мСчет412 	= ПланыСчетов.Финансовый.МатералыДляВыпуска;
		
		Для Каждого СтрокаТаблицы Из ТаблицаТоваровКПроведению Цикл
			
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			////////////////////////////////////////////////
			// Дт41Кт60 - добавление транспортных расходов
			
			Проводка = ДвиженияФин.Добавить();
			
			Проводка.Период 		= ДанныеДокумента.Дата;
			Проводка.СчетДт 		= СтруктураНастроек.Счет; // 41.01;
			Проводка.КоличествоДт 	= 0;
			
			Попытка
				Проводка.СубконтоДт.МестаХранения 			= СтрокаТаблицы.СтруктурнаяЕдиница;//СтрокаТаблицы.Склад;
				Проводка.СубконтоДт.Товары 					= СтрокаТаблицы.Номенклатура;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров41;
			Исключение
			КонецПопытки;
			
			Проводка.НомерЖурнала			= "ТД";
			Проводка.Содержание				= "Транспортные расходы по доставке на склад";
			
			Проводка.СчетКт 				= мСчет6004;
			Проводка.СубконтоКт.Организации = ДанныеДокумента.Организация;
			Проводка.СубконтоКт.Контрагенты = ДанныеДокумента.Перевозчик;
			Проводка.Сумма 					= Окр(СтрокаТаблицы.Сумма, 2);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаУпаковкиКПроведению Цикл
			
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ДвиженияФин.Добавить();
			
			Проводка.Период 		= ДанныеДокумента.Дата;
			Проводка.СчетДт 		= мСчет412; // 41.02;
			Проводка.КоличествоДт 	= 0;
			
			Попытка
				Проводка.СубконтоДт.Материалы 				= СтрокаТаблицы.Номенклатура;
				Проводка.СубконтоДт.Склады 					= СтрокаТаблицы.Склад;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров41;
			Исключение
			КонецПопытки;
			
			Проводка.НомерЖурнала			= "ТД";
			Проводка.Содержание				= "Транспортные расходы по доставке на склад";
			
			Проводка.СчетКт 				= мСчет6004;
			Проводка.СубконтоКт.Организации = ДанныеДокумента.Организация;
			Проводка.СубконтоКт.Контрагенты = ДанныеДокумента.Перевозчик;
			Проводка.Сумма 					= Окр(СтрокаТаблицы.Сумма, 2);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
			
			Проводка = ДвиженияФин.Добавить();
			Проводка.Период = ДанныеДокумента.Дата;
			Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
			Проводка.СубконтоДт.Организации = ДанныеДокумента.Организация;
			Проводка.СубконтоДт.ВидыНалогов	= НастройкаОтраженияНДСПоТоварам.ДопРеквизит;
			Проводка.СубконтоДт.СтавкиНДС	= ДанныеДокумента.СтавкаНДС;
			
			Проводка.СчетКт = мСчет6004;
			Проводка.СубконтоКт.Организации = ДанныеДокумента.Организация;
			Проводка.СубконтоКт.Контрагенты = ДанныеДокумента.Перевозчик;
			
			Проводка.Сумма 	= ДанныеДокумента.СуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//+++АК LATV 2018.06.23 ИП-00018971
Функция ПолучитьРаспределениеСуммыТранспортныхРасходов(Дата, МассивПриходников, мСуммаВсего, СПоставщиками = Ложь, СХарактеристиками = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",			КонецДня(Дата));
	Запрос.УстановитьПараметр("МассивПриходников",	МассивПриходников);
	Запрос.УстановитьПараметр("Сумма",				мСуммаВсего);
	Запрос.УстановитьПараметр("СПоставщиками",		СПоставщиками);
	Запрос.УстановитьПараметр("СХарактеристиками",	СХарактеристиками);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЗ_Полный.Склад,
		|	ВЗ_Полный.Номенклатура,
		|	ВЗ_Полный.ТипТовара,
		|	СУММА(ВЗ_Полный.Вес) КАК Вес,
		|	ВЗ_Полный.Контрагент,
		|	МАКСИМУМ(ВЗ_Полный.Характеристика) КАК Характеристика
		|ПОМЕСТИТЬ ВТВеса
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТЧТовары.Ссылка.Склад КАК Склад,
		|		ТЧТовары.Номенклатура КАК Номенклатура,
		|		ТЧТовары.Номенклатура.ТипТовара КАК ТипТовара,
		|		ТЧТовары.Количество * ТЧТовары.ЕдиницаИзмерения.Вес КАК Вес,
		|		ВЫБОР
		|			КОГДА &СПоставщиками = ИСТИНА
		|				ТОГДА ТЧТовары.Ссылка.Поставщик
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК Контрагент,
		|		ВЫБОР
		|			КОГДА &СХарактеристиками = ИСТИНА
		|				ТОГДА ТЧТовары.Характеристика
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК Характеристика
		|	ИЗ
		|		Документ.ПриходныйОрдерСклад.Товары КАК ТЧТовары
		|	ГДЕ
		|		ТЧТовары.Ссылка В(&МассивПриходников)
		|		И ТЧТовары.Номенклатура.ЭтоКомплект = ЛОЖЬ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТЧТовары.Склад,
		|		СоставКомплектаСрезПоследних.Составляющая.Владелец,
		|		СоставКомплектаСрезПоследних.Составляющая.Владелец.ТипТовара,
		|		ТЧТовары.Количество * СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Вес * СоставКомплектаСрезПоследних.Количество,
		|		ВЫБОР
		|			КОГДА &СПоставщиками = ИСТИНА
		|				ТОГДА ТЧТовары.Поставщик
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &СХарактеристиками = ИСТИНА
		|				ТОГДА СоставКомплектаСрезПоследних.Составляющая
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ
		|	ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ТЧТовары.Ссылка.Склад) КАК Склад,
		|			ТЧТовары.Ссылка.Поставщик КАК Поставщик,
		|			ТЧТовары.Номенклатура КАК Номенклатура,
		|			ТЧТовары.Характеристика КАК Характеристика,
		|			СУММА(ТЧТовары.Количество) КАК Количество
		|		ИЗ
		|			Документ.ПриходныйОрдерСклад.Товары КАК ТЧТовары
		|		ГДЕ
		|			ТЧТовары.Ссылка В(&МассивПриходников)
		|			И ТЧТовары.Номенклатура.ЭтоКомплект = ИСТИНА
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧТовары.Ссылка.Поставщик,
		|			ТЧТовары.Номенклатура,
		|			ТЧТовары.Характеристика) КАК ТЧТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаСреза, ) КАК СоставКомплектаСрезПоследних
		|			ПО ТЧТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика) КАК ВЗ_Полный
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЗ_Полный.Склад,
		|	ВЗ_Полный.Номенклатура,
		|	ВЗ_Полный.ТипТовара,
		|	ВЗ_Полный.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВеса.Склад,
		|	ВТВеса.Контрагент,
		|	ВТВеса.ТипТовара,
		|	ВТВеса.Номенклатура,
		|	ВТВеса.Характеристика,
		|	&Сумма * ВТВеса.Вес / ВЫБОР
		|		КОГДА ВТОбщийВес.Вес = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ВТОбщийВес.Вес, 1)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	ВТВеса КАК ВТВеса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ВТВеса.Вес) КАК Вес
		|		ИЗ
		|			ВТВеса КАК ВТВеса) КАК ВТОбщийВес
		|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти
