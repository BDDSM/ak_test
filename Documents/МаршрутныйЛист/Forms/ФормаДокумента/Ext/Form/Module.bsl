
Процедура УстановитьВидимостьПоВидуПеревозки()
	
	//+++АК sole 2018.07.12 ИП-00018320.04
	Если Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.АК_ВидыПеревозки.ВозвратПоставщику") Тогда
		УстановитьВидимостьВидПеревозкиВозвратПоставщику(Истина);
		Возврат;
	Иначе
		УстановитьВидимостьВидПеревозкиВозвратПоставщику(Ложь);	
	КонецЕсли;
	//---АК sole 2018.07.12 ИП-00018320.04
	
	мВидимость = (Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ
					ИЛИ Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад
					ИЛИ Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ПеремещениеТовара);
	Элементы.Водитель.Видимость 		= мВидимость; 
	Элементы.Автомобиль.Видимость 		= мВидимость; 
	Элементы.ДатаДоставкиПлан.Видимость = мВидимость; 
	Элементы.ДатаДоставкиФакт.Видимость = мВидимость; 
	
	мВидимость = (Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ);
	Элементы.ГруппаРасходныеОрдера.Видимость 	= мВидимость;
	Элементы.ТорговыеТочки.Видимость			= мВидимость;
	Элементы.Маршрут.Видимость					= мВидимость;
	//+++АК sole 2018.07.02 ИП-00018321.01
	Элементы.ПричинаПеревозки.Видимость			= мВидимость;
	//---АК sole 2018.07.02 ИП-00018321.01
	
	мВидимость = (Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад);
	Элементы.ГруппаПриходныеОрдера.Видимость 		= мВидимость;
	Элементы.МаршрутТранспортныхКомпаний.Видимость	= мВидимость;
	ЭтаФорма.Элементы.ПринудительныйПересчётСумм.Видимость = мВидимость;
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотр()
	
	мТолькоПросмотр = (РольДоступна("Перевозчик")
						И НЕ РольДоступна("ПолныеПрава")
						И НЕ РольДоступна("ФинансовыйДиректор"));
	Элементы.Дата.ТолькоПросмотр 			= мТолькоПросмотр; 
	Элементы.Маршрут.ТолькоПросмотр			= мТолькоПросмотр; 
	Элементы.Подразделение.ТолькоПросмотр	= мТолькоПросмотр; 
	Элементы.Организация.ТолькоПросмотр		= мТолькоПросмотр; 
	Элементы.Перевозчик.ТолькоПросмотр		= мТолькоПросмотр; 
	Элементы.ВидПеревозки.ТолькоПросмотр	= мТолькоПросмотр; 
	Элементы.ДатаДоставкиПлан.ТолькоПросмотр	= мТолькоПросмотр; 
	Элементы.ДатаДоставкиФакт.ТолькоПросмотр	= мТолькоПросмотр; 
	Элементы.Сумма.ТолькоПросмотр				= мТолькоПросмотр; 
	Элементы.ВариантРасчетаНДС.ТолькоПросмотр	= мТолькоПросмотр; 
	Элементы.СтавкаНДС.ТолькоПросмотр			= мТолькоПросмотр; 
	//+++АК SHEP 2018.03.07 ИП-00018096
	РазрешеноРедактированиеНДС = ПолныеПрава.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьНДСВМаршрутномЛисте, Ложь);
	Элементы.ВариантРасчетаНДС.ТолькоПросмотр	= мТолькоПросмотр И НЕ РазрешеноРедактированиеНДС;
	Элементы.СтавкаНДС.ТолькоПросмотр			= мТолькоПросмотр И НЕ РазрешеноРедактированиеНДС;
	Элементы.СуммаНДС.ТолькоПросмотр			= НЕ РазрешеноРедактированиеНДС;
	//---АК SHEP 2018.03.07 
	Элементы.РасходныеОрдера.ТолькоПросмотр 	= мТолькоПросмотр; 
	Элементы.ТорговыеТочки.ТолькоПросмотр 		= мТолькоПросмотр; 
	
КонецПроцедуры

Процедура ЗаполнитьПоАвтомобилю()
	
	Если Объект.Водитель.Пустая() Тогда
		Объект.Водитель = Объект.Автомобиль.ОсновнойВодитель;
	КонецЕсли;
	
	Если НЕ Объект.Перевозчик = Объект.Автомобиль.Перевозчик Тогда
		Объект.Перевозчик = Объект.Автомобиль.Перевозчик;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьСуммуСервер()
	
	Объект.Сумма = Объект.ТорговыеТочки.Итог("Стоимость");
	
	РассчитатьСуммуНДС();
	
КонецПроцедуры

Процедура ЗаполнитьПоМаршрутуСервер()
	
	Перем ТекМаршрут, СтрокаЗаполнения;
	
	Если Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ Тогда
		ТекМаршрут = Объект.Маршрут;
		//+++АК PISH 2018.10.15 ИП-00020043		
		//СтрокаЗаполнения = "Организация, СтруктурноеПодразделение, Перевозчик, Сумма, ВариантРасчетаНДС, СтавкаНДС, СуммаНДС";
		СтрокаЗаполнения = "Организация, СтруктурноеПодразделение, Перевозчик, Сумма, СтавкаНДС, СуммаНДС";
		//---АК PISH
	ИначеЕсли Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаСклад Тогда
		ТекМаршрут = Объект.МаршрутТранспортныхКомпаний;
		//+++АК PISH 2018.10.15 ИП-00020043		
		//СтрокаЗаполнения = "Организация, Перевозчик, Сумма, ВариантРасчетаНДС, СтавкаНДС, СуммаНДС";
		СтрокаЗаполнения = "Организация, Перевозчик, Сумма, СтавкаНДС, СуммаНДС";
		//---АК PISH
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекМаршрут.Пустая() Тогда
		Сообщить("Не указан маршрут! Заполнение невозможно.");
		Возврат;
	КонецЕсли;
	
	//
	ЗаполнитьЗначенияСвойств(Объект, ТекМаршрут, СтрокаЗаполнения);
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Маршрут", ТекМаршрут);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВодителиПоМаршрутуСрезПоследних.Водитель,
	|	ВодителиПоМаршрутуСрезПоследних.Автомобиль
	|ИЗ
	|	РегистрСведений.ВодителиПоМаршруту.СрезПоследних(, Маршрут = &Маршрут) КАК ВодителиПоМаршрутуСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Водитель		= Выборка.Водитель;
		Объект.Автомобиль 	= Выборка.Автомобиль;
	КонецЕсли;
	
	//
	//Объект.Сумма = 0;
	
	Если Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ Тогда
		Объект.ТорговыеТочки.Загрузить(ТекМаршрут.ТорговыеТочки.Выгрузить());
	КонецЕсли;
	
	//ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	//Для каждого СтрокаТЧ Из ОбъектДокумента.ТорговыеТочки Цикл
	//	СтрокаТЧ.Стоимость = 0;
	//КонецЦикла;
	//ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
	//ЗаполнитьСуммуСервер();
	
КонецПроцедуры

#Область АК_ОтключенныйКод
// В связи с появлением связанных рейсов, данная процедура некорректно расчитывает
// суммы в случае если рейс связанный.
Процедура ЗаполнитьСуммыДокументаПоПриходникам()
	
	Если Объект.ПриходныеОрдера.Количество() = 0 Тогда
		Объект.ВариантРасчетаНДС 	= Перечисления.ВариантыРасчетаНДС.ПустаяСсылка();
		Объект.Сумма 				= 0;
		Объект.СуммаНДС 			= 0;
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Маршрут"				, Объект.МаршрутТранспортныхКомпаний);
	Запрос.УстановитьПараметр("ДатаНачала"			, Объект.Дата);
	Запрос.УстановитьПараметр("МассивПриходников"	, Объект.ПриходныеОрдера.Выгрузить().ВыгрузитьКолонку("ПриходныйОрдер"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТарифыНаДоставкуПоМаршруту.ВесОт КАК ВесОт,
	|	ТарифыНаДоставкуПоМаршруту.Сумма КАК Сумма,
	|	ТарифыНаДоставкуПоМаршруту.ВариантРасчетаНДС,
	|	ТарифыНаДоставкуПоМаршруту.СтавкаНДС,
	|	ТарифыНаДоставкуПоМаршруту.СуммаНДС,
	|	ТарифыНаДоставкуПоМаршруту.ЦенаЗаКг,
	|	ТарифыНаДоставкуПоМаршруту.Перевозчик
	|ИЗ
	|	РегистрСведений.ТарифыНаДоставкуПоМаршруту.СрезПоследних(ДОБАВИТЬКДАТЕ(&ДатаНачала, СЕКУНДА, 1), Маршрут = &Маршрут) КАК ТарифыНаДоставкуПоМаршруту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф КАК ЕдиныйТариф
	|		ИЗ
	|			РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
	|				ГДЕ
	|					ТарифыНаДоставкуПоМаршруту.Маршрут = &Маршрут
	|					И НЕ ТарифыНаДоставкуПоМаршруту.Период > &ДатаНачала) КАК ВТПоследняяЗапись
	|				ПО (ВТПоследняяЗапись.Период = ТарифыНаДоставкуПоМаршруту.Период)
	|		ГДЕ
	|			ТарифыНаДоставкуПоМаршруту.Маршрут = &Маршрут
	|			И НЕ ТарифыНаДоставкуПоМаршруту.Период > &ДатаНачала
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф) КАК ВТПоследниеПериоды
	|		ПО (ВТПоследниеПериоды.ЕдиныйТариф = ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТарифыНаДоставкуПоМаршруту.ВесОт УБЫВ";
	
	ТаблицаТарифов = Запрос.Выполнить().Выгрузить();
	
	мОбщийВес = 0;
	Для Каждого СтрокаТЧ Из Объект.ПриходныеОрдера Цикл
		ТекТЧТовары = СтрокаТЧ.ПриходныйОрдер.Товары;
		Для Каждого СтрокаТовары Из ТекТЧТовары Цикл
			мОбщийВес = мОбщийВес + СтрокаТовары.ЕдиницаИзмерения.Вес * СтрокаТовары.Количество;
		КонецЦикла;
	КонецЦикла;
	
	//
	Для Каждого СтрокаТарифа Из ТаблицаТарифов Цикл
		Если НЕ мОбщийВес < СтрокаТарифа.ВесОт Тогда
			Объект.Сумма 				= СтрокаТарифа.Сумма 	* ?(СтрокаТарифа.ЦенаЗаКг, мОбщийВес, 1);
			Объект.СуммаНДС 			= СтрокаТарифа.СуммаНДС * ?(СтрокаТарифа.ЦенаЗаКг, мОбщийВес, 1);
			Объект.ВариантРасчетаНДС 	= СтрокаТарифа.ВариантРасчетаНДС;
			Объект.СтавкаНДС 			= СтрокаТарифа.СтавкаНДС;
			//Объект.Перевозчик 			= СтрокаТарифа.Перевозчик;
			//+++АК sils
			мСуммаВключаетНДС = (Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
			Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
				Если не ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
					Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЕсли;
			
			Объект.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Объект.Сумма,
															   Истина, мСуммаВключаетНДС,
															   УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
			//---АК
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
#КонецОбласти

Процедура ЗаполнитьПоМаршрутуТрКомпанийСервер()
	
КонецПроцедуры

Функция ПолучитьСтоимостьДоставкиСервер(мТорговаяТочка, мГруппаДоставки)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"		, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Организация"		, Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент"		, Объект.Перевозчик);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТорговаяТочка);
	Запрос.УстановитьПараметр("ГруппаДоставки"	, мГруппаДоставки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Флаг,
	|	СУММА(СтоимостьУслугПоДоставкеТовараНаТТ.Ставка) КАК Сумма
	|ИЗ
	|	РегистрСведений.СтоимостьУслугПоДоставкеТовараНаТТ.СрезПоследних(
	|			&ДатаСреза,
	|			Организация = &Организация
	|				И Контрагент = &Перевозчик
	|				И ТТ = &ТорговаяТочка
	|				И ГруппаДоставкиНоменклатуры = &ГруппаДоставки) КАК СтоимостьУслугПоДоставкеТовараНаТТ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанМаршрутныйЛист", Объект.Ссылка);
	ЭтаФорма.Элементы.ЦенаДопоставки.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Рейс (Маршрутный лист)");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если Объект.Ссылка.Пустая() Тогда
		мОснование = ЭтаФорма.Параметры.Основание;
		Если 
				ЗначениеЗаполнено(мОснование)
			И	ТипЗнч(мОснование) = Тип("ДокументСсылка.АК_ЗаявкаНаПеревозку") 
		Тогда
			//+++АК sole 2018.07.11 ИП-00018320.04
			Если мОснование.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаПеревозку.Согласована") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для создания рейса статус документа """ + мОснование + """ должен иметь значение ""Согласована""!", Отказ);
				СтандартнаяОбработка 	= Ложь;
				Возврат;
			КонецЕсли;
			//---АК sole 2018.07.11 ИП-00018320.04
		КонецЕсли;
		Если Объект.ВидПеревозки.Пустая() Тогда
			Объект.ВидПеревозки = Справочники.АК_ВидыПеревозки.ДоставкаНаТТ;
		КонецЕсли;
		Если Объект.СтруктурноеПодразделение.Пустая() Тогда
			Объект.СтруктурноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеСтруктурноеПодразделение");
		КонецЕсли;
		Если Объект.ВариантРасчетаНДС.Пустая() Тогда
			Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТолькоПросмотр();
	УстановитьВидимостьПоВидуПеревозки();
	
	//+++АК SHEP 2018.01.26 ИП-00017365.02
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ ТолькоПросмотр Тогда
		ТолькоПросмотр = Документы.ПоступлениеДопРасходов.ДокументИспользуетсяВТранспортныхДокументах(Объект.Ссылка, Истина);
	КонецЕсли;
	//---АК SHEP 2018.01.26
	
КонецПроцедуры


Процедура РассчитатьСуммуНДС()
	
	мСуммаВключаетНДС = (Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Объект.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Объект.Сумма,
													   Истина, мСуммаВключаетНДС,
													   УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	УстановитьВидимостьПоВидуПеревозки();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
	
	//+++АК PISH 2018.10.15 ИП-00020043
	ЗаполнитьВидРасчетаНДС(Объект.Маршрут);
	//---АК PISH
	
	ЗаполнитьПоМаршрутуСервер();
	УстановитьОтборЦенаДопоставки();
			
КонецПроцедуры

//+++АК PISH 2018.10.15 ИП-00020043
&НаСервере
Процедура ЗаполнитьВидРасчетаНДС(Маршрут)

	Если ЗначениеЗаполнено(Маршрут) и ЗначениеЗаполнено(Маршрут.ДоговорКонтрагента) Тогда 
		Объект.ВариантРасчетаНДС = Маршрут.ДоговорКонтрагента.ВариантРасчетаНДС;              	
	КонецЕсли;
	
КонецПроцедуры
//---АК PISH

&НаКлиенте
Процедура МаршрутТранспортныхКомпанийПриИзменении(Элемент)
	
	ЗаполнитьПоМаршрутуТрКомпанийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ЗаполнитьПоАвтомобилю();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДС();
	
КонецПроцедуры


&НаКлиенте
Процедура ТорговыеТочкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСуммуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиПослеУдаления(Элемент)
	
	ЗаполнитьСуммуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	ТекДанные.Стоимость = ПолучитьСтоимостьДоставкиСервер(ТекДанные.СтруктурнаяЕдиница, ТекДанные.ГруппаДоставкиНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиГруппаДоставкиНоменклатурыПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТорговыеТочки.ТекущиеДанные;
	ТекДанные.Стоимость = ПолучитьСтоимостьДоставкиСервер(ТекДанные.СтруктурнаяЕдиница, ТекДанные.ГруппаДоставкиНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиСтоимостьПриИзменении(Элемент)
	
	ЗаполнитьСуммуСервер();
	
КонецПроцедуры

Функция ПолучитьМаршрутныйЛист()
	
	Возврат Документы.МаршрутныйЛист.СформироватьМаршрутныйЛист(Объект.Ссылка);
	
КонецФункции	

&НаКлиенте
Процедура ПечатьМаршрутногоЛиста(Команда)
	 Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	 	Сообщить("Необходимо записать документ");
	 	Возврат;
	 КонецЕсли; 
	ТабДок = ПолучитьМаршрутныйЛист();
	
	ТабДок.ОтображатьСетку			= Ложь;
	ТабДок.Защита					= Ложь;
	ТабДок.ТолькоПросмотр			= Истина;
	ТабДок.ОтображатьЗаголовки		= Ложь;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.РазмерКолонтитулаСнизу	= 0;
	ТабДок.РазмерКолонтитулаСверху 	= 0;
	ТабДок.ПолеСверху 				= 5;
	ТабДок.ПолеСнизу 				= 5;
	ТабДок.ПолеСлева 				= 5;
	ТабДок.ПолеСправа 				= 5;
	ТабДок.АвтоМасштаб				= Истина;
	ТабДок.Показать();
	Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура ПриходныеОрдераПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если (НЕ ТекДанные.ПриходныйОрдер.Пустая())
			И НЕ ТекДанные.ПриходныйОрдер.Автомобиль.Перевозчик = Объект.Перевозчик Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перевозчик у автомобиля перевозчика в приходном ордере не соответствует перевозчику документа!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекДанные.ДобавленВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеОрдераПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//+++АК sole 2018.05.28 ИП-00018724.02
	//ЗаполнитьСуммыДокументаПоПриходникам();
	//---АК sole 2018.05.28 ИП-00018724.02
	
КонецПроцедуры

//АК БЕЛН 07.02.2017+
&НаКлиенте
Процедура ДатаЗавершенияПогрузкиПриИзменении(Элемент)
	ДатаЗавершенияПогрузкиПриИзмененииСервер();	
КонецПроцедуры

&НаСервере
Процедура ДатаЗавершенияПогрузкиПриИзмененииСервер()
	УстановитьПривилегированныйРежим(Истина);
	Мен=РегистрыСведений.ВремяВыездаПоМаршруту.СоздатьМенеджерЗаписи();
	Мен.Дата=Объект.ДатаЗавершенияПогрузки;
	Мен.Маршрут=Объект.Маршрут;
	Мен.ВремяВыезда=Объект.ДатаЗавершенияПогрузки;
	Мен.Записать();
КонецПроцедуры

&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции
&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


&НаКлиенте
Процедура АктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура АктОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Акт);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.СчетФактура = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СчетФактураОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.СчетФактура);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриложениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Приложение = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПриложениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Приложение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

//АК БЕЛН 07.02.2017-
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не Объект.ДокументыПолучены Тогда
			//Отказ = Истина;
			//Сообщить("Внимание! Проведение без ""Документы получены"" запрещено.",СтатусСообщения.ОченьВажное);
		КонецЕсли;	
		Если Объект.ДокументыПолучены И НЕ Объект.СтатусПолученныхДокументов = Перечисления.СтатусыПолученныхДокументов.ПринятыПоЭДО Тогда
			Если Не ЗначениеЗаполнено(Объект.УПД) Тогда
				Если НЕ ЗначениеЗаполнено(Объект.Акт) Тогда
					//Отказ = Истина;
					//Сообщить("Внимание! Проведение без скана акта/накладной или УПД запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) И Объект.ВариантРасчетаНДС<>Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
					//Отказ = Истина;
					//Сообщить("Внимание! Проведение без скана фактуры или УПД запрещено.",СтатусСообщения.ОченьВажное);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПолученныхДокументовПриИзменении(Элемент)
	
	Объект.ДокументыПолучены = ЗначениеЗаполнено(Объект.СтатусПолученныхДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+++АК sole 2018.05.28 ИП-00018724.02
	Если ЭтаФорма.ПринудительныйПересчётСумм Тогда
		ТекущийОбъект.Сумма = -1;	
	КонецЕсли;
	//---АК sole 2018.05.28 ИП-00018724.02
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтложенноеПроведение", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
	    Для Каждого ИмяФайла Из МассивФайлов Цикл
	        ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.УПД = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.УПД);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

//+++АК sils 22.06.2017 ИП-00016038
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	РассчитатьСуммуНДС();
КонецПроцедуры

//+++АК sils 08.06.2018 ИП-00018876
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	УстановитьВидимостьЦенаДопоставки();
	УстановитьОтборЦенаДопоставки();
КонецПроцедуры

//+++АК sole 2018.06.28 ИП-00018321.05
&НаКлиенте
Процедура ЗаполнитьРасходныеОрдера(Команда)
	 ЗаполнитьРасходныеОрдераНаСервере();
КонецПроцедуры

//+++АК sole 2018.06.28 ИП-00018321.05
&НаСервере
Процедура ЗаполнитьРасходныеОрдераНаСервере()
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПоПодборуРасходныхОрдеров();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЭтаФорма.Объект.ТорговыеТочки.Очистить();
	ЭтаФорма.Объект.РасходныеОрдера.Очистить();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПревСтруктурнаяЕдиница = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтруктурнаяЕдиница <> ПревСтруктурнаяЕдиница Тогда
			ПревСтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			НСтр = ЭтаФорма.Объект.ТорговыеТочки.Добавить();
			Нстр["СтруктурнаяЕдиница"] = Выборка.СтруктурнаяЕдиница;
		КонецЕсли;
		
		НСтр = ЭтаФорма.Объект.РасходныеОрдера.Добавить();
		Нстр["Документ"] = Выборка.РасходныйОрдерСсылка;
		
	КонецЦикла;
	
КонецПроцедуры

//+++АК sole 2018.06.28 ИП-00018321.05
&НаСервере
Функция ПолучитьРезультатЗапросаПоПодборуРасходныхОрдеров()
	
	Перем Запрос;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
"ВЫБРАТЬ
|	РасходныйОрдерСклад.Получатель КАК СтруктурнаяЕдиница,
|	РасходныйОрдерСклад.Ссылка КАК РасходныйОрдерСсылка
|	
|
|ИЗ Справочник.Маршруты.ТорговыеТочки КАК МаршрутыТорговыеТочки
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерСклад КАК РасходныйОрдерСклад ПО
|			РасходныйОрдерСклад.Дата >= &ДатаНачала
|		И	РасходныйОрдерСклад.Дата < &ДатаОкончания
|		И	НЕ РасходныйОрдерСклад.ПометкаУдаления
|		И	РасходныйОрдерСклад.Проведен
|		И	РасходныйОрдерСклад.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отменен) 
|		И	(
|					РасходныйОрдерСклад.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке) 
|				ИЛИ &ПричинаПеревозки = ЗНАЧЕНИЕ(Перечисление.ПричиныПеревозки.ОсновнаяПоставка) 
|			)
|		И	РасходныйОрдерСклад.Организация = &Организация
|		И	РасходныйОрдерСклад.ПричинаПеревозки = &ПричинаПеревозки
|		И   РасходныйОрдерСклад.Склад.Владелец = МаршрутыТорговыеТочки.Ссылка.СтруктурноеПодразделение
|		И	РасходныйОрдерСклад.Получатель = МаршрутыТорговыеТочки.СтруктурнаяЕдиница
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера ПО
|			МаршрутныйЛистРасходныеОрдера.Документ = РасходныйОрдерСклад.Ссылка
|		И	МаршрутныйЛистРасходныеОрдера.Ссылка <> &МаршрутныйЛист
|		И	НЕ МаршрутныйЛистРасходныеОрдера.Ссылка.ПометкаУдаления
|
|ГДЕ	
|		МаршрутыТорговыеТочки.Ссылка = &Маршрут
|	И	МаршрутныйЛистРасходныеОрдера.Ссылка ЕСТЬ NULL
|
|УПОРЯДОЧИТЬ ПО РасходныйОрдерСклад.Получатель
|";
	
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ЭтаФорма.Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ЭтаФорма.Объект.Дата) + 1);
	Запрос.УстановитьПараметр("Маршрут", ЭтаФорма.Объект.Маршрут);
	Запрос.УстановитьПараметр("Организация", ЭтаФорма.Объект.Организация);
	Запрос.УстановитьПараметр("ПричинаПеревозки", ЭтаФорма.Объект.ПричинаПеревозки);
	Запрос.УстановитьПараметр("МаршрутныйЛист", ЭтаФорма.Объект.Ссылка);
	
	Возврат Запрос.Выполнить();
КонецФункции

//+++АК sole 2018.06.28 ИП-00018321.01
&НаКлиенте
Процедура УстановитьОтборЦенаДопоставки()
	
	Если НЕ ЭтаФорма.Элементы.ЦенаДопоставки.Видимость Тогда
		Возврат;			
	КонецЕсли;
	
	ЭтаФорма.ЦенаДопоставки.Отбор.Элементы.Очистить();
	
	ДобавитьОтборЦенаДопоставки("Маршрут", ЭтаФорма.Объект.Маршрут);
	ДобавитьОтборЦенаДопоставки("ПричинаПеревозки", ЭтаФорма.Объект.ПричинаПеревозки);
	ДобавитьОтборЦенаДопоставки("Дата", НачалоДня(ЭтаФорма.Объект.Дата));
	
КонецПроцедуры

//+++АК sole 2018.06.28 ИП-00018321.01
&НаКлиенте
Процедура УстановитьВидимостьЦенаДопоставки()
	
	мВидимость = 
		(
				ЭтаФорма.Объект.ПричинаПеревозки <> ПредопределенноеЗначение("Перечисление.ПричиныПеревозки.ОсновнаяПоставка")
			И	Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.АК_ВидыПеревозки.ДоставкаНаТТ")
		); 
		
	ЭтаФорма.Элементы.ЦенаДопоставки.Видимость = мВидимость;
	
КонецПроцедуры

//+++АК sole 2018.06.28 ИП-00018321.01
&НаКлиенте
Процедура ДобавитьОтборЦенаДопоставки(ИмяПоля, ЗначениеПоля)
	
	ЭлементОтбора = ЭтаФорма.ЦенаДопоставки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЗначениеПоля;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

//+++АК sole 2018.06.28 ИП-00018321.01
&НаКлиенте
Процедура ПричинаПеревозкиПриИзменении(Элемент)
	УстановитьВидимостьЦенаДопоставки();
	УстановитьОтборЦенаДопоставки();
КонецПроцедуры

//+++АК sole 2018.07.12 ИП-00018320.04
Процедура УстановитьВидимостьВидПеревозкиВозвратПоставщику(Отобразить)
	
	Скрыть = Не Отобразить;
	
	ЭтаФорма.Элементы.Автомобиль.Видимость = Скрыть;
	ЭтаФорма.Элементы.Водитель.Видимость = Скрыть;
	ЭтаФорма.Элементы.Маршрут.Видимость = Скрыть;
	ЭтаФорма.Элементы.МаршрутТранспортныхКомпаний.Видимость = Скрыть;
	ЭтаФорма.Элементы.ПричинаПеревозки.Видимость = Скрыть;
	ЭтаФорма.Элементы.СвязанСМаршрутнымЛистом.Видимость = Скрыть;
	ЭтаФорма.Элементы.ПринудительныйПересчётСумм.Видимость = Скрыть;
	ЭтаФорма.Элементы.ДатаДоставкиПлан.Видимость = Скрыть;
	ЭтаФорма.Элементы.ДатаДоставкиФакт.Видимость = Скрыть;
	ЭтаФорма.Элементы.ДатаЗавершенияПогрузки.Видимость = Скрыть;
	ЭтаФорма.Элементы.ДатаПодачиМашины.Видимость = Скрыть;
	ЭтаФорма.Элементы.Отгружено.Видимость = Скрыть;
	ЭтаФорма.Элементы.ПогрузкаНачата.Видимость = Скрыть;
	ЭтаФорма.Элементы.СуммаДопТарифа.Видимость = Скрыть;
	ЭтаФорма.Элементы.ДокументОснование.Видимость = Скрыть;
	ЭтаФорма.Элементы.РасходныеОрдераПричинаПеревозки.Видимость = Скрыть;
	ЭтаФорма.Элементы.РасходныеОрдераТорговаяТочка.Видимость = Скрыть;
	ЭтаФорма.Элементы.ГруппаТорговыеТочки.Видимость = Скрыть;
	ЭтаФорма.Элементы.Дополнительно.Видимость = Скрыть;
	ЭтаФорма.Элементы.ГруппаЦенаДопоставки.Видимость = Скрыть;
	Элементы.ГруппаПриходныеОрдера.Видимость = Скрыть; 
	
	ЭтаФорма.Элементы.РасходныеОрдераСклад.Видимость = Отобразить;
	ЭтаФорма.Элементы.РасходныеОрдераВидОперации.Видимость = Отобразить;
	Элементы.ГруппаРасходныеОрдера.Видимость = Отобразить;
	
	ЭтаФорма.Элементы.Сумма.ТолькоПросмотр = Отобразить;
КонецПроцедуры

//
