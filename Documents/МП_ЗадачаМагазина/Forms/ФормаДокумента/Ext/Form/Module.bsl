
&НаСервере
Процедура ЗаполнитьСтруктуруПоКартинкам()
	
	ТаблицаСтруктурыФайлов.Очистить();
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		Сообщить("Не заполнена константа КаталогХраненияФайловЗадачМП!");
		Возврат;
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МП_ЗадачаМагазинаРакурсы.НомерСтроки,
	|	МП_ЗадачаМагазинаРакурсы.Ракурс,
	|	МП_ЗадачаМагазинаРакурсы.СтатусРакурса
	|ПОМЕСТИТЬ ВТ_Ракурсы
	|ИЗ
	|	&Таб КАК МП_ЗадачаМагазинаРакурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФотографииКЗадачам.Ссылка КАК ПрисоединенныйФайл,
	|	МП_ЗадачаМагазинаРакурсы.Ракурс КАК Ракурс,
	|	ФотографииКЗадачам.РасширениеФайла,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.Непринято)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СортировкаРакурса,
	|	ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК СтатусРакурса,
	|	ФотографииКЗадачам.Комментарий,
	|	ЕСТЬNULL(ФотографииКЗадачам.СтатусФото, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК СтатусФото,
	|	ФотографииКЗадачам.ОтносительноеИмяФайла
	|ИЗ
	|	ВТ_Ракурсы КАК МП_ЗадачаМагазинаРакурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МП_ФотографииКЗадачам КАК ФотографииКЗадачам
	|		ПО (ФотографииКЗадачам.Задача = &Ссылка)
	|			И (ФотографииКЗадачам.Задача <> ЗНАЧЕНИЕ(Документ.МП_ЗадачаМагазина.ПустаяСсылка))
	|			И (ФотографииКЗадачам.Ракурс = МП_ЗадачаМагазинаРакурсы.Ракурс)
	|			И (ФотографииКЗадачам.ПометкаУдаления = ЛОЖЬ)
	|			И ((ВЫРАЗИТЬ(ФотографииКЗадачам.ОтносительноеИмяФайла КАК СТРОКА(10))) <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаРакурса,
	|	Ракурс";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Таб", Объект.Ракурсы.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ракурс") Цикл
		ПервыйПроход = Истина;
		БылоДобавлениеПустого = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПрисоединенныйФайл) Тогда
				УинКартинки = Строка(Выборка.ПрисоединенныйФайл.УникальныйИдентификатор());
				
				СпрСсылка = Выборка.ПрисоединенныйФайл;
				
				ПолноеИмяФайла = "";
				Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
					ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
					Файл = Новый Файл(ПолноеИмяФайла);
					РасширениеФайла = Сред(Файл.Расширение, 2);
					Если НЕ ПервыйПроход Тогда
						ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
						ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
						Если НЕ ФайлМиниатюра.Существует() Тогда
							ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "." + РасширениеФайла;
						КонецЕсли;	
					КонецЕсли;	
				//Иначе
				//	РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
				//	
				//	Если Лев(РасширениеФайла, 1) = "." Тогда
				//		РасширениеФайла = Сред(РасширениеФайла, 2);
				//	КонецЕсли;
				//	
				//	ПолноеИмяФайла = КаталогФотографий + УинКартинки + "." + РасширениеФайла;
				//	Если НЕ ПервыйПроход Тогда
				//		ПолноеИмяФайла = КаталогФотографий + УинКартинки + "thumb." + РасширениеФайла;
				//		ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
				//		Если НЕ ФайлМиниатюра.Существует() Тогда
				//			ПолноеИмяФайла = КаталогФотографий + УинКартинки + "." + РасширениеФайла;
				//		КонецЕсли;	
				//	КонецЕсли;
				КонецЕсли;
				
				Файл = Новый Файл(ПолноеИмяФайла);
				
				Если Файл.Существует()
					И Файл.Размер() > 0 Тогда
					СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
					СтруктураЗаписи.УинКартинки = УинКартинки;
					
					Если ЗначениеЗаполнено(РасширениеФайла) Тогда
						Если ПервыйПроход Тогда
							СтруктураЗаписи.ТолькоМиниатюра = Ложь;
						Иначе
							СтруктураЗаписи.ТолькоМиниатюра = Истина;
						КонецЕсли;	
						
						Попытка
							Картинка = Новый Картинка(ПолноеИмяФайла);
							СтруктураЗаписи.АдресВХранилище = ПоместитьВоВременноеХранилище(Картинка);
							СтруктураЗаписи.Расширение = РасширениеФайла;
							ПервыйПроход = Ложь;
						Исключение
						КонецПопытки;
					КонецЕсли;
				Иначе
					Если НЕ БылоДобавлениеПустого Тогда
						СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
						БылоДобавлениеПустого = Истина;
					Иначе
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
			Иначе
				СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
			КонецЕсли;	
			СтруктураЗаписи.Ракурс = Выборка.Ракурс;
			СтруктураЗаписи.Комментарий = Выборка.Комментарий;
			Если Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
				СтруктураЗаписи.СтатусРакурса = 0;
			ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Непринято Тогда
				СтруктураЗаписи.СтатусРакурса = 1;
			ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Принято Тогда
				СтруктураЗаписи.СтатусРакурса = 2;
			КонецЕсли;
			Если Выборка.СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
				СтруктураЗаписи.СтатусФото = 0;
			ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Непринято Тогда
				СтруктураЗаписи.СтатусФото = 1;
			ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Принято Тогда
				СтруктураЗаписи.СтатусФото = 2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруПоКартинкамДляЗаписиВРегистр()
	
	ТаблицаСтруктурыФайловДляЗаписиВРегистр.Очистить();
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		Сообщить("Не заполнена константа КаталогХраненияФайловЗадачМП!");
		Возврат;
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МП_ЗадачаМагазинаРакурсы.НомерСтроки,
	|	МП_ЗадачаМагазинаРакурсы.Ракурс,
	|	МП_ЗадачаМагазинаРакурсы.СтатусРакурса
	|ПОМЕСТИТЬ ВТ_Ракурсы
	|ИЗ
	|	&Таб КАК МП_ЗадачаМагазинаРакурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФотографииКЗадачам.Ссылка КАК ПрисоединенныйФайл,
	|	МП_ЗадачаМагазинаРакурсы.Ракурс КАК Ракурс,
	|	ФотографииКЗадачам.РасширениеФайла,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.Непринято)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СортировкаРакурса,
	|	ЕСТЬNULL(МП_ЗадачаМагазинаРакурсы.СтатусРакурса, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК СтатусРакурса,
	|	ФотографииКЗадачам.Комментарий,
	|	ЕСТЬNULL(ФотографииКЗадачам.СтатусФото, ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)) КАК СтатусФото,
	|	ФотографииКЗадачам.ОтносительноеИмяФайла
	|ИЗ
	|	ВТ_Ракурсы КАК МП_ЗадачаМагазинаРакурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МП_ФотографииКЗадачам КАК ФотографииКЗадачам
	|		ПО (ФотографииКЗадачам.Задача = &Ссылка)
	|			И (ФотографииКЗадачам.Задача <> ЗНАЧЕНИЕ(Документ.МП_ЗадачаМагазина.ПустаяСсылка))
	|			И (ФотографииКЗадачам.Ракурс = МП_ЗадачаМагазинаРакурсы.Ракурс)
	|			И (ФотографииКЗадачам.ПометкаУдаления = ЛОЖЬ)
	|			И ((ВЫРАЗИТЬ(ФотографииКЗадачам.ОтносительноеИмяФайла КАК СТРОКА(10))) <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаРакурса,
	|	Ракурс";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Таб", Объект.Ракурсы.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ракурс") Цикл
		ПервыйПроход = Истина;
		БылоДобавлениеПустого = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПрисоединенныйФайл) Тогда
				УинКартинки = Строка(Выборка.ПрисоединенныйФайл.УникальныйИдентификатор());
				
				СпрСсылка = Выборка.ПрисоединенныйФайл;
				
				ПолноеИмяФайла = "";
				Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
					ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
					Файл = Новый Файл(ПолноеИмяФайла);
					РасширениеФайла = Сред(Файл.Расширение, 2);
					//Если НЕ ПервыйПроход Тогда
					//	ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
					//	ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
					//	Если НЕ ФайлМиниатюра.Существует() Тогда
					//		ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "." + РасширениеФайла;
					//	КонецЕсли;	
					//КонецЕсли;	
				//Иначе
				//	РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
				//	
				//	Если Лев(РасширениеФайла, 1) = "." Тогда
				//		РасширениеФайла = Сред(РасширениеФайла, 2);
				//	КонецЕсли;
				//	
				//	ПолноеИмяФайла = КаталогФотографий + УинКартинки + "." + РасширениеФайла;
				//	Если НЕ ПервыйПроход Тогда
				//		ПолноеИмяФайла = КаталогФотографий + УинКартинки + "thumb." + РасширениеФайла;
				//		ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
				//		Если НЕ ФайлМиниатюра.Существует() Тогда
				//			ПолноеИмяФайла = КаталогФотографий + УинКартинки + "." + РасширениеФайла;
				//		КонецЕсли;	
				//	КонецЕсли;
				КонецЕсли;
				
				Файл = Новый Файл(ПолноеИмяФайла);
				
				Если Файл.Существует()
					И Файл.Размер() > 0 Тогда
					СтруктураЗаписи = ТаблицаСтруктурыФайловДляЗаписиВРегистр.Добавить();
					СтруктураЗаписи.УинКартинки = УинКартинки;
					
					Если ЗначениеЗаполнено(РасширениеФайла) Тогда
						//Если ПервыйПроход Тогда
							СтруктураЗаписи.ТолькоМиниатюра = Ложь;
						//Иначе
						//	СтруктураЗаписи.ТолькоМиниатюра = Истина;
						//КонецЕсли;	
						
						Попытка
							Картинка = Новый Картинка(ПолноеИмяФайла);
							СтруктураЗаписи.АдресВХранилище = ПоместитьВоВременноеХранилище(Картинка);
							СтруктураЗаписи.Расширение = РасширениеФайла;
							ПервыйПроход = Ложь;
						Исключение
						КонецПопытки;
					КонецЕсли;
				Иначе
					Если НЕ БылоДобавлениеПустого Тогда
						СтруктураЗаписи = ТаблицаСтруктурыФайловДляЗаписиВРегистр.Добавить();
						БылоДобавлениеПустого = Истина;
					Иначе
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
			Иначе
				СтруктураЗаписи = ТаблицаСтруктурыФайловДляЗаписиВРегистр.Добавить();
			КонецЕсли;	
			СтруктураЗаписи.Ракурс = Выборка.Ракурс;
			СтруктураЗаписи.ОтносительноеИмя=Выборка.ОтносительноеИмяФайла;
			СтруктураЗаписи.Комментарий = Выборка.Комментарий;
			Если Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
				СтруктураЗаписи.СтатусРакурса = 0;
			ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Непринято Тогда
				СтруктураЗаписи.СтатусРакурса = 1;
			ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Принято Тогда
				СтруктураЗаписи.СтатусРакурса = 2;
			КонецЕсли;
			Если Выборка.СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
				СтруктураЗаписи.СтатусФото = 0;
			ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Непринято Тогда
				СтруктураЗаписи.СтатусФото = 1;
			ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Принято Тогда
				СтруктураЗаписи.СтатусФото = 2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьHTML(СчитыватьКартинкиССервера = Истина)
	
	//ПолныйТекстHTML = "<html>
	//|<head>
	//|    <script type=""text/javascript"" src=""file:///" + СтрЗаменить(ВременныйКаталог + "\jquery.js", "\", "/") + """></script>
	//|    <script type=""text/javascript"" src=""file:///" + СтрЗаменить(ВременныйКаталог + "\cloudzoom.js", "\", "/") + """></script>
	//|<script type=""text/javascript"">
	//|$(function(){
	//|    $('#zoom1').bind('click',function(){            // Bind a click event to a Cloud Zoom instance.
	//|        var cloudZoom = $(this).data('CloudZoom');  // On click, get the Cloud Zoom object,
	//|            cloudZoom.closeZoom();
	//|            $.fancybox.open(cloudZoom.getGalleryList());// and pass Cloud Zoom's image list to Fancy Box.
	//|            return false;
	//|        });
	//|    });
	//|</script>
	//|    <script type=""text/javascript"">
	//|    CloudZoom.quickStart(); // cz
	//|    </script>
	//|</head>
	//|<body>";
	
	ПолныйТекстHTML = "<html>
	|<body>";
	
	Если СчитыватьКартинкиССервера Тогда
		ЗаполнитьСтруктуруПоКартинкам();
	КонецЕсли;	

	МассивРакурсы = Новый Массив();
	
	Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайлов Цикл
		Если СчитыватьКартинкиССервера Тогда
			Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
				Картинка = ПолучитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
				УдалитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
				Картинка.Записать(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение);
			КонецЕсли;
		КонецЕсли;	
		Если МассивРакурсы.Найти(ЭлементСтруктуры.Ракурс) = Неопределено Тогда
			МассивРакурсы.Добавить(ЭлементСтруктуры.Ракурс);
		КонецЕсли;	
	КонецЦикла;	
	          
	ИндексИсправленныеФотографии = МассивРакурсы.Найти(МП_ИсправленныеФотографии);
	
	Если ИндексИсправленныеФотографии<>Неопределено Тогда
		МассивРакурсы.Удалить(ИндексИсправленныеФотографии);
		МассивРакурсы.Добавить(МП_ИсправленныеФотографии);
	КонецЕсли; 
	
	Счетчик = 1;
	Для Каждого ЭлементРакурс Из МассивРакурсы Цикл
		СтрокаДоб = НумерацияРакурсов.Добавить();
		СтрокаДоб.Ракурс = ЭлементРакурс;
		СтрокаДоб.НомерВОбщемСпискеВывода = Счетчик;
		Счетчик = Счетчик + 1;		
	КонецЦикла;
	
	Для Каждого ЭлементРакурс Из МассивРакурсы Цикл
		ПолныйТекстHTML = ПолныйТекстHTML + "
			|<span><table id = ""Rakurs" + ЭлементРакурс.УникальныйИдентификатор() + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
				+ СформироватьТэгиПоРакурсу(ЭлементРакурс)
				+ "</table></span><p></p>";
	КонецЦикла;				
				
	//ПолныйТекстHTML = ПолныйТекстHTML + "</body>
	//|<script type=""text/javascript"" src=""file:///" + СтрЗаменить(ВременныйКаталог + "\jquery.min.js", "\", "/") + """></script>
	//|<script type=""text/javascript"" src=""file:///" + СтрЗаменить(ВременныйКаталог + "\jquery.loupe.js", "\", "/") + """></script>
	//|<script type=""text/javascript"">$('.lupa').loupe();</script>
	//|</html>";
	
	ПолныйТекстHTML = ПолныйТекстHTML + "</body>
	|</html>";
	
	ДокументHTML = ПолныйТекстHTML;
	
КонецПроцедуры	

&НаКлиенте
Функция СформироватьТэгиПоРакурсу(ЭлементРакурс, ТекущаяКартинка = "")
	
	ТекстВозврата = "";
	
	ТекСтатус = "";
	СтильСтатуса = "";
	СтрокиСтруктуры = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", ЭлементРакурс));
	Если СтрокиСтруктуры.Количество() > 0 Тогда
		Если СтрокиСтруктуры[0].СтатусРакурса = 0 Тогда
			ТекСтатус = "Не обработан";
			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #3232FF""";
		ИначеЕсли СтрокиСтруктуры[0].СтатусРакурса = 1 Тогда
			ТекСтатус = "Не принят";
			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #FF3232""";
		ИначеЕсли СтрокиСтруктуры[0].СтатусРакурса = 2 Тогда
			ТекСтатус = "Принят";
			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #00BE00""";
		КонецЕсли;	
	КонецЕсли;
	СтрокиВПорядкеОбщегоСписка = НумерацияРакурсов.НайтиСтроки(Новый Структура("Ракурс", ЭлементРакурс));
	ТекстПорядкаРакурса = "";
	Если СтрокиВПорядкеОбщегоСписка.Количество() > 0 Тогда
		ТекстПорядкаРакурса = "(" + Строка(СтрокиВПорядкеОбщегоСписка[0].НомерВОбщемСпискеВывода) + " из " + НумерацияРакурсов.Количество() + ")";
	КонецЕсли;	
	ТекстВозврата = ТекстВозврата + "
	|	<tr>
	|		<td valign=""top"">
	|		<table><tr><td>
	|		<span style = ""font-size:18; font-weight: bold; color: #9696FF"">" + ТекстПорядкаРакурса + " " + ЭлементРакурс + "</span>&nbsp;&nbsp;&nbsp;<span><span id = ""CurrentState" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус: " + ТекСтатус + "</span></span><span><br></span>
	|		<span style = ""font-size:14; color: #2D84C4"">Установить статус ракурса</span>&nbsp;&nbsp;<a name = ""SetStatus2"" id = """ + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; font-weight: bold; color: #00BE00"" href = """">Принят</a>&nbsp;&nbsp;<a name = ""SetStatus1"" id = """ + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; font-weight: bold; color: #FF3232"" href = """">Не принят</a>&nbsp;&nbsp;<a name = ""SetStatus0"" id = """ + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; font-weight: bold; color: #3232FF"" href = """">Не обработан</a>
	|		</td></tr></table>
	|<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
	|<tr>		";
	
	КолвоСтрок = СтрокиСтруктуры.Количество();
	Если КолвоСтрок > 0 Тогда
		Если ЗначениеЗаполнено(ТекущаяКартинка) Тогда
			Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
				Если ЭлементСтруктуры.УинКартинки = ТекущаяКартинка Тогда
					ТекКартинкаСтруктура = ЭлементСтруктуры;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		КонецЕсли;	
		Файл = Новый Файл(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение);
		Если Файл.Существует()
			И ЗначениеЗаполнено(ТекКартинкаСтруктура.УинКартинки) Тогда
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%"" align=""right"">
			|
			|<table id=""PhotoOpeartions" + ТекКартинкаСтруктура.УинКартинки + "_PhOp" + ЭлементРакурс.УникальныйИдентификатор() + """>
			|<tr>
			|<td  align=""right"">
			|<img name=ShowBt alt=""Показать изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Show.png", "\", "/") + """>
			|<img name=SaveBt alt=""Сохранить как"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\SaveAs.png", "\", "/") + """>
			|<img name=RotateBt alt=""Перевернуть изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Rotate.png", "\", "/") + """>
			|<img name=TrimBt alt=""Вырезать картинку в сообщение магазину"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Trim.png", "\", "/") + """>
			|</td>
			|</tr>
			|</table>
			|
			|</td>
			|<td valign=""top"" align = ""center"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + ">
			|<p></p>
			|		<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>
			//|			zoomImage:&quot;file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + "&quot;,
			//  |         zoomSizeMode: &quot;image&quot;,
			//|         tintColor:&quot;#000&quot;,
			//|         tintOpacity:0.25,
			//|         captionPosition:&quot;bottom&quot;,
			//|         maxMagnification:4,
			//|         autoInside:450"">
			|</td>
			|<td width = ""40%"" valign=""top"">
			|<table width = ""100%"">
			|<tr>
			|<td width=15></td>
			|<td><span style = ""color: #2D84C4"">&nbsp;&nbsp;Комментарий</span></td>
			|<td width=15></td>
			|</tr>
			|<tr>
			|<td width=15></td>
			|<td>
			|" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
			|</td>
			|<td width=15></td>
			|</tr>
			|</table>
			|
			|</td>
			|</tr>";
		Иначе
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""></td>
			|<td valign=""center"" align = ""center"" height = 150 style = ""font-size:24; font-weight: bold; color: #AAAAAA"">
			|Нет фото
			|</td>
			|<td width = ""40%""></td>
			|</tr>";
		КонецЕсли;
		
		Если Файл.Существует() Тогда
			
			Если ТекКартинкаСтруктура.СтатусФото = 0 Тогда
				ТекСтатус = "Не обработано";
				СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #3232FF""";
			ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 1 Тогда
				ТекСтатус = "Не принято";
				СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #FF3232""";
			ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 2 Тогда
				ТекСтатус = "Принято";
				СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #00BE00""";
			КонецЕсли;
			
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%"">
			|
			|</td>
			|<td valign=""center"" align = ""left"">
			|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
			|<span style = ""font-size:12; color: #2D84C4"">Установить:</span>&nbsp;&nbsp;<a name = ""SetPhotoStatus2"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; color: #00BE00"" href = """">Принято</a>&nbsp;&nbsp;<a name = ""SetPhotoStatus1"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УникальныйИдентификатор() + """ style = ""font-size:12; color: #FF3232"" href = """">Не принято</a></span>
			|</td>
			|<td width = ""40%""></td>
			|</tr>";
		КонецЕсли;	
		
		Если КолвоСтрок > 1 Тогда
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""> </td>
			|<td align = ""left"">
			|<table name = ""PictView>"">
			|
			|<tr>
			|<td>
			|<table id=""" + СтрокиСтруктуры[0].УинКартинки + "_T" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ border=""2"" cellpadding=""0"" bordercolor=" + ?(СтрокиСтруктуры[0].УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff") + " cellspacing=""0""><tr><td><img name=""smallpicture"" width=40 height=40 style = ""cursor: pointer"" id = """ + СтрокиСтруктуры[0].УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + СтрокиСтруктуры[0].УинКартинки + ?(СтрокиСтруктуры[0].ТолькоМиниатюра, "thumb", "") + "." + СтрокиСтруктуры[0].Расширение, "\", "/") + """></td></tr></table></td>";
			Для н = 1 По КолвоСтрок - 1 Цикл
				ЭлементСтруктуры = СтрокиСтруктуры[н];
				ТекстВозврата = ТекстВозврата + "
				|<td><table id=""" + ЭлементСтруктуры.УинКартинки + "_T" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ border=""2"" cellpadding=""0"" bordercolor=" + ?(ЭлементСтруктуры.УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff") + " cellspacing=""0""><tr><td><img name=""smallpicture"" width = 40 height=40 style = ""cursor: pointer"" id = """ + ЭлементСтруктуры.УинКартинки + "_" + Строка(ЭлементРакурс.УникальныйИдентификатор()) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение, "\", "/") + """></td></tr></table></td>";
			КонецЦикла;		
			
			ТекстВозврата = ТекстВозврата + "
			|</tr>
			|
			|</table>
			|</td>
			|<td width = ""40%""> </td>
			|</tr>";
			
			//пиктограммы к фото
			Если СтрокиСтруктуры[0].СтатусФото = 2 Тогда
				СтатусИмя = "Accepted";
			ИначеЕсли СтрокиСтруктуры[0].СтатусФото = 1 Тогда
				СтатусИмя = "Canceled";
			ИначеЕсли СтрокиСтруктуры[0].СтатусФото = 0 Тогда
				СтатусИмя = "Unknown";	
			КонецЕсли;	
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""> </td>
			|<td align = ""left"">
			|<table name = ""StatusPictView>"">
			|
			|<tr>
			|<td>
			|<table cellpadding=""0"" cellspacing=""0""><tr><td width=2 height=16></td><td width=45 height=16 valign=""center"" align=""center""><img name=""statuspicture"" width=16 height=16 src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + СтатусИмя + ".png", "\", "/") + """></td></tr></table></td>";
			Для н = 1 По КолвоСтрок - 1 Цикл
				ЭлементСтруктуры = СтрокиСтруктуры[н];
				Если ЭлементСтруктуры.СтатусФото = 2 Тогда
					СтатусИмя = "Accepted";
				ИначеЕсли ЭлементСтруктуры.СтатусФото = 1 Тогда
					СтатусИмя = "Canceled";
				ИначеЕсли ЭлементСтруктуры.СтатусФото = 0 Тогда
					СтатусИмя = "Unknown";	
				КонецЕсли;
				ТекстВозврата = ТекстВозврата + "
				|<td><table cellpadding=""0"" cellspacing=""0""><tr><td width=45 height=16 valign=""center"" align=""center""><img name=""statuspicture"" width=16 height=16 src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + СтатусИмя + ".png", "\", "/") + """></td></tr></table></td>";
			КонецЦикла;		
			
			ТекстВозврата = ТекстВозврата + "
			|</tr>
			|
			|</table>
			|</td>
			|<td width = ""40%""> </td>
			|</tr>";
		КонецЕсли;
		
		////вывод комментария
		//Если Файл.Существует() Тогда
		//	
		//	ТекстВозврата = ТекстВозврата + "
		//	|<tr>
		//	|<td width = ""20%""></td>
		//	|<td valign=""top"" align = ""left"">
		//	|<span style = ""color: #2D84C4"">Комментарий</span>&nbsp;&nbsp;&nbsp;<a name=""SetKomment"" id=""" + ТекКартинкаСтруктура.УинКартинки + """ style = ""font-size:11; color: #2D84C4"" href="""">Редактировать</a>
		//	|</td>
		//	|<td width = ""20%""></td>
		//	|</tr>";
		//	
		//	
		//	ТекстВозврата = ТекстВозврата + "
		//	|<tr>
		//	|<td width = ""20%""></td>
		//	|<td valign=""top"" align = ""left"">
		//	|<table id=""" + ТекКартинкаСтруктура.УинКартинки + """ border=""0"" width=""100%"">
		//	|
		//	|<tr>
		//	|<td width=""5%""></td>
		//	|<td align = ""left"" width=""90%"">" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
		//	|<td width=""5%""></td>
		//	|</tr>
		//	|
		//	|</table>
		//	|</td>
		//	|<td width = ""20%""></td>
		//	|</tr>";
		//КонецЕсли;			
		
		
	КонецЕсли;		
	
	
	ТекстВозврата = ТекстВозврата + "			
	|	</tr></table></td></tr>";
	
	Возврат ТекстВозврата;
	
КонецФункции	

&НаКлиенте
Функция СформироватьТэгКомментария(УинКартинки, Комментарий)
	
	Комментарий = СтрЗаменить(Комментарий, Символы.ПС, "<br>");
	Возврат "<div name=""SetKomment"" style = ""cursor: pointer; background: #eeeee5; border: 1px dashed #abab9a; padding: 5px;	font: 8pt Tahoma; color:#2c2c2c"" id=""SpanKomment" + УинКартинки + """>" + ?(ЗначениеЗаполнено(Комментарий), СокрЛП(Комментарий), "<br><br>") + "</div>";
	
КонецФункции	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МасштабФотоРакурсов) Тогда
		МасштабФотоРакурсов = 100;
	КонецЕсли;	
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ВременныйКаталог);
	
	БиблиотекаКартинок.ПоказатьДанные.Записать(ВременныйКаталог + "\Show.png");
	БиблиотекаКартинок.ЗаписатьИЗакрыть.Записать(ВременныйКаталог + "\Accepted.png");
	БиблиотекаКартинок.Удалить.Записать(ВременныйКаталог + "\Canceled.png");
	БиблиотекаКартинок.Выбрать.Записать(ВременныйКаталог + "\Unknown.png");
	БиблиотекаКартинок.Записать.Записать(ВременныйКаталог + "\SaveAs.png");
	БиблиотекаКартинок.Сортировка.Записать(ВременныйКаталог + "\Rotate.png");
	БиблиотекаКартинок.ПрочитатьИзменения.Записать(ВременныйКаталог + "\Trim.png");
	
	//СтруктураСкрипты = ПолучитьИзВременногоХранилища(СсылкаНаСкрипт);
	//СтруктураСкрипты.Скрипт1.Записать(ВременныйКаталог + "\jquery.js");
	//СтруктураСкрипты.Скрипт2.Записать(ВременныйКаталог + "\cloudzoom.js");
	//СтруктураСкрипты.ВРеестр1.Записать(ВременныйКаталог + "\1.reg");
	//СтруктураСкрипты.ВРеестр2.Записать(ВременныйКаталог + "\2.reg");
	//УдалитьИзВременногоХранилища(СсылкаНаСкрипт);
	//
	//КомандаСистемы("reg import 1.reg", ВременныйКаталог);
	//КомандаСистемы("reg import 2.reg", ВременныйКаталог);
	
	Элементы.Магазин.ТолькоПросмотр = НЕ МожетРедактировать;
	Элементы.ДатаСоздания.ТолькоПросмотр = НЕ МожетРедактировать;
	Элементы.ДатаВыполнения.ТолькоПросмотр = НЕ МожетРедактировать;
	Элементы.ВариантАктуальности.ТолькоПросмотр = НЕ МожетРедактировать;
	Элементы.АктуальноДо.ТолькоПросмотр = НЕ МожетРедактировать;	
	Элементы.Проверяющий.ТолькоПросмотр = Элементы.Проверяющий.ТолькоПросмотр ИЛИ НЕ МожетРедактировать;
	Элементы.БаллыПоЗаданию.ТолькоПросмотр = Элементы.Проверяющий.ТолькоПросмотр ИЛИ НЕ МожетРедактировать;
	Элементы.ДобавитьРакурс.Доступность = МожетРедактировать;
	
	СформироватьHTML();
	
	ВариантАктуальностиПриИзменении();
	
	ПодключитьОбработчикОжидания("ПроверкаБлокировкиОбмена", 5);
	
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

Процедура ПриЗакрытииНаСервере()
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/МасштабФотоРакурсов", "", МасштабФотоРакурсов);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРакурс(Команда)
	
	ФормаВыбора = ПолучитьФорму("Справочник.МП_Ракурсы.ФормаВыбора");
	ВыбРакурс = ФормаВыбора.ОткрытьМодально();
	
	Если ВыбРакурс <> Неопределено Тогда
		Если Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", ВыбРакурс)).Количество() > 0 Тогда
			Предупреждение("Выбранный ракурс уже есть в задаче!");
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = Объект.Ракурсы.Добавить();
		НоваяСтрока.Ракурс = ВыбРакурс;
		СформироватьHTML();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаРакурс(Уин)
	
	Возврат Справочники.МП_Ракурсы.ПолучитьСсылку(Новый УникальныйИдентификатор(Уин));
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьКомментарийВФото(УинФото, Коммент)
	
	СпрОбъект = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Новый УникальныйИдентификатор(УинФото)).ПолучитьОбъект();
	СпрОбъект.Комментарий = СокрЛП(Коммент);
	СпрОбъект.Записать();
	
КонецПроцедуры	

Функция СкачатьПолнуюКартинкуССервера(УинФото)
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	СпрСсылка = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Новый УникальныйИдентификатор(УинФото));
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СпрСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МП_ФотографииКЗадачам.РасширениеФайла,
	               |	МП_ФотографииКЗадачам.ОтносительноеИмяФайла
	               |ИЗ
	               |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |ГДЕ
	               |	МП_ФотографииКЗадачам.Ссылка = &Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
		ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
		Файл = Новый Файл(ПолноеИмяФайла);
		РасширениеФайла = Сред(Файл.Расширение, 2);
	Иначе
		РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
		
		Если Лев(РасширениеФайла, 1) = "." Тогда
			РасширениеФайла = Сред(РасширениеФайла, 2);
		КонецЕсли;
		
		ПолноеИмяФайла = КаталогФотографий + УинФото + "." + РасширениеФайла;
	КонецЕсли;	
	
	СтрокиТабСтруктура = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", УинФото));
	Если СтрокиТабСтруктура.Количество() > 0 Тогда
		СтрокиТабСтруктура[0].ТолькоМиниатюра = Ложь;
	КонецЕсли;	
	
	Возврат Новый Структура("Расширение, Картинка", РасширениеФайла, Новый Картинка(ПолноеИмяФайла));
	
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаВДД(П)
	// Функция принимает изображение в base64 формата BMP.
	ДД = Base64Значение(П); // Получаем двоичные данные.
	мПустаяКартинка = Новый Картинка(ДД, Ложь);  // Создаем картинку
	Возврат мПустаяКартинка; // Поместить ссылку в реквизит формы

КонецФункции

&НаСервере
Процедура ПересчитатьБаллыПоДокументу()
	
	КолвоПринято = 0;
	МассивРакурсов = Новый Массив();
	Для Каждого СтрокаТаб Из ТаблицаСтруктурыФайлов Цикл
		Если СтрокаТаб.Ракурс = Справочники.МП_Ракурсы.ИсправленныеФотографии Тогда
			Продолжить;
		КонецЕсли;	
		Если МассивРакурсов.Найти(СтрокаТаб.Ракурс) = Неопределено Тогда
			МассивРакурсов.Добавить(СтрокаТаб.Ракурс);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ЭлементРакурс Из МассивРакурсов Цикл
		СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", ЭлементРакурс));
		Если СтрокиРакурс.Количество() > 0 Тогда
			Если СтрокиРакурс[0].СтатусРакурса = Перечисления.СтатусыРакурсов.Принято Тогда
				СтрокиСОтказами = Объект.ОтказыПоРакурсам.НайтиСтроки(Новый Структура("Ракурс", ЭлементРакурс));
				Если СтрокиСОтказами.Количество() > 0 Тогда
					КолвоПринято = КолвоПринято + (3 - ?(СтрокиСОтказами[0].Количество >= 2, 2, СтрокиСОтказами[0].Количество))/3;
				Иначе
					КолвоПринято = КолвоПринято + 1;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Объект.БаллыПоЗаданию = ?(МассивРакурсов.Количество() = 0, 0, КолвоПринято / МассивРакурсов.Количество()) * 100;
	//Если Объект.БаллыПоЗаданию <> 0 и Объект.Проверяющий.Пустая() Тогда
	//	
	//КонецЕсли;
	
	//КолвоПринято = 0;
	//МассивРакурсов = Новый Массив();
	//Для Каждого СтрокаТаб Из ТаблицаСтруктурыФайлов Цикл
	//	Если МассивРакурсов.Найти(СтрокаТаб.Ракурс) = Неопределено Тогда
	//		МассивРакурсов.Добавить(СтрокаТаб.Ракурс);
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//ЗапросВеса = Новый Запрос();
	//ЗапросВеса.УстановитьПараметр("Задача", Объект.Ссылка);
	//ЗапросВеса.Текст = "ВЫБРАТЬ
	//				   |	МАКСИМУМ(МП_ФотографииКЗадачам.ПопыткаВРакурсе) КАК ПопыткаВРакурсе,
	//				   |	МП_ФотографииКЗадачам.Ракурс
	//				   |ИЗ
	//				   |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	//				   |ГДЕ
	//				   |	МП_ФотографииКЗадачам.Задача = &Задача
	//				   |
	//				   |СГРУППИРОВАТЬ ПО
	//				   |	МП_ФотографииКЗадачам.Ракурс";
	//				   
	//ТабВеса = ЗапросВеса.Выполнить().Выгрузить();
	//Для Каждого ЭлементРакурс Из МассивРакурсов Цикл
	//	СтрокиУтвержден = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс, СтатусРакурса", ЭлементРакурс, 2));
	//	Если СтрокиУтвержден.Количество() > 0 Тогда
	//		СтрокаВес = ТабВеса.Найти(ЭлементРакурс, "Ракурс");
	//		Если СтрокаВес <> Неопределено Тогда
	//			КолвоПринято = КолвоПринято + 1 / ?(СтрокаВес.ПопыткаВРакурсе = 0, 1, СтрокаВес.ПопыткаВРакурсе);
	//		Иначе	
	//			КолвоПринято = КолвоПринято + 1;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//Объект.БаллыПоЗаданию = ?(МассивРакурсов.Количество() = 0, 0, КолвоПринято / МассивРакурсов.Количество()) * 100;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьТекПоьзователя()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции	

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	//Сообщить(Элементы.ДокументHTML.Документ.body.InnerHtml);
	
	СтандартнаяОбработка = Ложь;
	Попытка
		Если ДанныеСобытия.Element.name = "picture" Тогда
			Если ЗначениеЗаполнено(ДанныеСобытия.Element.id) Тогда
				id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
				СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
				//Файлы = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
				//Если Файлы.Количество() > 0 Тогда
				//	//Стр = Новый Структура("КартинкаСсылка");
				//	//Стр.Вставить("КартинкаСсылка", ПоместитьВоВременноеХранилище(Новый Картинка(Файлы[0].ПолноеИмя), ЭтаФорма.УникальныйИдентификатор)); 
				//	//Форма = ПолучитьФорму("ОбщаяФорма.Фото", Стр);
				//	//ОткрытьФорму(Форма);
				//	ОткрытьЗначение(Новый Картинка(Файлы[0].ПолноеИмя));
				//КонецЕсли;
				
				РакурсСсылка = ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса);
				СтрокиПоРакурсу = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
				СледКартинка = "";
				Для н = 0 По СтрокиПоРакурсу.Количество() - 1 Цикл
					Если СтрокиПоРакурсу[н].УинКартинки = СтруктураСобытия.УинКартинка
						И н < СтрокиПоРакурсу.Количество() - 1 Тогда
						СтрокиТекКартинка = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
						Если СтрокиТекКартинка.Количество() = 0 Тогда
							СтрокаТекКартинка = ТекКартинкиРакурсов.Добавить();
							СтрокаТекКартинка.УинРакурса = СтруктураСобытия.УинРакурса;
						Иначе	
							СтрокаТекКартинка = СтрокиТекКартинка[0];
						КонецЕсли;	
						СтрокаТекКартинка.УинКартинки = СтрокиПоРакурсу[н + 1].УинКартинки;
						
						ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтрокаТекКартинка.УинКартинки + ".*");
						Если ФайлыКартинки.Количество() = 0 Тогда
							СтрФайл = СкачатьПолнуюКартинкуССервера(СтрокаТекКартинка.УинКартинки);
							СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтрокаТекКартинка.УинКартинки + "." + СтрФайл.Расширение);
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
				
				Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
					Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинРакурса) > 0 Тогда
						ТекФотоПоРакурсу = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
						Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинРакурса + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
						+ СформироватьТэгиПоРакурсу(РакурсСсылка, ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
						+ "</table>";
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		ИначеЕсли ДанныеСобытия.Element.name = "smallpicture" Тогда
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() = 0 Тогда
				СтрФайл = СкачатьПолнуюКартинкуССервера(СтруктураСобытия.УинКартинка);
				СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтруктураСобытия.УинКартинка + "." + СтрФайл.Расширение);
			КонецЕсли;	
			Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
				Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинРакурса) > 0 Тогда
					Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинРакурса + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
					 + СформироватьТэгиПоРакурсу(ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса), СтруктураСобытия.УинКартинка)
					 + "</table>";
					 
					СтрокиТекКартинки = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
					Если СтрокиТекКартинки.Количество() = 0 Тогда
						СтрокаТекКартинки = ТекКартинкиРакурсов.Добавить();
						СтрокаТекКартинки.УинРакурса = СтруктураСобытия.УинРакурса;
					Иначе
						СтрокаТекКартинки = СтрокиТекКартинки[0];
					КонецЕсли;	 
					СтрокаТекКартинки.УинКартинки = СтруктураСобытия.УинКартинка;
				КонецЕсли;	
			КонецЦикла;
			
		ИначеЕсли ДанныеСобытия.Element.name = "SetKomment" Тогда
			Если НЕ МожетРедактировать Тогда
				Предупреждение("У вас нет прав редактирования");
			Иначе	
				Id = СтрЗаменить(ДанныеСобытия.Element.id, "SpanKomment", "");
				СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", Id));
				Если СтрокиФото.Количество() > 0 Тогда
					СтрокаСФото = СтрокиФото[0];
					Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
					Если ВвестиСтроку(Коммент, "Введите комментарий",, Истина) Тогда
						СтрокаСФото.Комментарий = Коммент;
						ЗаписатьКомментарийВФото(Id, Коммент);
					КонецЕсли;
					Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("div") Цикл
						Если Тэг.id = "SpanKomment" + Id Тогда
							Тэг.parentElement.innerHtml = СформироватьТэгКомментария(Id, Коммент);
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли Лев(ДанныеСобытия.Element.name, СтрДлина("SetStatus")) = "SetStatus" Тогда
			Если НЕ МожетРедактировать Тогда
				Предупреждение("У вас нет прав редактирования");
			Иначе
				СтатусКУстановке = СтрЗаменить(ДанныеСобытия.Element.name, "SetStatus", "");
				Если СтатусКУстановке = "0" Тогда
					ТекСтатус = "Не обработан";
					СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #3232FF""";
				ИначеЕсли СтатусКУстановке = "1" Тогда
					ТекСтатус = "Не принят";
					СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #FF3232""";
				ИначеЕсли СтатусКУстановке = "2" Тогда
					ТекСтатус = "Принят";
					СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #00BE00""";
				КонецЕсли;
				
				Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("span") Цикл
					Если Найти(Тэг.id, "CurrentState" + ДанныеСобытия.Element.Id) > 0 Тогда
						//Тэг.parentElement.innerHTML = СформироватьТэгиПоРакурсу(ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса), СтруктураСобытия.УинКартинка);
						Тэг.parentElement.innerHTML = "<span id = ""CurrentState" + ДанныеСобытия.Element.id + """ " + СтильСтатуса + ">Текущий статус: " + ТекСтатус + "</span>";
						ТекРакурс = ПолучитьСсылкуНаРакурс(ДанныеСобытия.Element.id);
						СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", ТекРакурс));
						Если СтрокиРакурс.Количество() > 0 Тогда
							СтрокаРакурс = СтрокиРакурс[0];
						Иначе
							СтрокаРакурс = Объект.Ракурсы.Добавить();
							СтрокаРакурс.Ракурс = ТекРакурс;
						КонецЕсли;
						Если СтатусКУстановке = "0" Тогда
							СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.ПустаяСсылка");
						ИначеЕсли СтатусКУстановке = "1" Тогда
							СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Непринято");
							СтрокиСОтказами = Объект.ОтказыПоРакурсам.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
							Если СтрокиСОтказами.Количество() = 0 Тогда
								СтрокаСОтказом = Объект.ОтказыПоРакурсам.Добавить();
								СтрокаСОтказом.Ракурс = ТекРакурс;
							Иначе
								СтрокаСОтказом = СтрокиСОтказами[0];
							КонецЕсли;
							Коэф = "";
							Если СтрокаСОтказом.Количество + 1 >= 2 Тогда
								Коэф = "1/3";
							ИначеЕсли СтрокаСОтказом.Количество + 1 >= 1 Тогда
								Коэф = "2/3";	
							КонецЕсли;	
							ТекстВопроса = "Учесть отказ по ракурсу в расчете баллов? Новый коэффициент для расчета балла будет " + Коэф;
							Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								СтрокаСОтказом.Количество = СтрокаСОтказом.Количество + 1;
							КонецЕсли;	
						ИначеЕсли СтатусКУстановке = "2" Тогда
							СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Принято");	
						КонецЕсли;
						СтрокиСтатусРакурса = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", ТекРакурс));
						Для Каждого СтрокаРакурс Из СтрокиСтатусРакурса Цикл
							СтрокаРакурс.СтатусРакурса = Число(СтатусКУстановке);
						КонецЦикла;	
						//ФотоНеОбработанные = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс, СтатусФото", ТекРакурс, 0));
						ФотоНеОбработанные = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", ТекРакурс));
						Если ФотоНеОбработанные.Количество() > 0 Тогда
							//Ответ = Вопрос("Проставить всем не обработанным фото ракурса такой же статус?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
							//Если Ответ = КодВозвратаДиалога.Да Тогда
								Для Каждого СтрокаФото Из ФотоНеОбработанные Цикл
									СтрокаФото.СтатусФото = СтатусКУстановке;
									ЗаписатьСтатусВФото(СтрокаФото.УинКартинки, СтатусКУстановке);
								КонецЦикла;
								Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
									Если Найти(Тэг.id, "Rakurs" + ДанныеСобытия.Element.id) > 0 Тогда
										ТекФотоПоРакурсу = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", ДанныеСобытия.Element.id));
										Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + ДанныеСобытия.Element.id + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
											+ СформироватьТэгиПоРакурсу(ТекРакурс, ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
											+ "</table>";
									КонецЕсли;	
								КонецЦикла;
							//КонецЕсли;	
						КонецЕсли;
						ЭтаФорма.Модифицированность = Истина;
					КонецЕсли;	
				КонецЦикла;
				ПересчитатьБаллыПоДокументу();
				Объект.Проверяющий = ПолучитьТекПоьзователя();
			КонецЕсли;	
		ИначеЕсли Лев(ДанныеСобытия.Element.name, СтрДлина("SetPhotoStatus")) = "SetPhotoStatus" Тогда
			Если НЕ МожетРедактировать Тогда
				Предупреждение("У вас нет прав редактирования");
			Иначе
				СтатусКУстановке = СтрЗаменить(ДанныеСобытия.Element.name, "SetPhotoStatus", "");
				Модифицированность = Истина;
				
				id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
				СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
				СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", СтруктураСобытия.УинКартинка));
				Если СтрокиФото.Количество() > 0 Тогда
					СтрокиФото[0].СтатусФото = Число(СтатусКУстановке);
				КонецЕсли;
				ЗаписатьСтатусВФото(СтруктураСобытия.УинКартинка, СтатусКУстановке);
				РакурсСсылка = ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса);
				СтрокиПоРакурсу = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
				ЕстьНеПринятые = Ложь;
				ВсеПриняты = Истина;
				Для Каждого СтрокаПоРакурсу Из СтрокиПоРакурсу Цикл
					ЕстьНеПринятые = Макс(ЕстьНеПринятые, СтрокаПоРакурсу.СтатусФото = 1);
					ВсеПриняты = Мин(ВсеПриняты, СтрокаПоРакурсу.СтатусФото = 2);
				КонецЦикла;	
				Если ВсеПриняты И Не ЕстьНеПринятые Тогда
					//СтатусПринято = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Принято");
					Для Каждого СтрокаПоРакурсу Из СтрокиПоРакурсу Цикл
						СтрокаПоРакурсу.СтатусРакурса = 2;
					КонецЦикла;
					СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
					Если СтрокиРакурс.Количество() > 0 Тогда
						СтрокаРакурс = СтрокиРакурс[0];
					Иначе
						СтрокаРакурс = Объект.Ракурсы.Добавить();
						СтрокаРакурс.Ракурс = РакурсСсылка;
					КонецЕсли;
					СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Принято");
				ИначеЕсли ЕстьНеПринятые Тогда
					//СтатусНеПринято = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Непринято");
					Для Каждого СтрокаПоРакурсу Из СтрокиПоРакурсу Цикл
						СтрокаПоРакурсу.СтатусРакурса = 1;
					КонецЦикла;
					СтрокиРакурс = Объект.Ракурсы.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
					Если СтрокиРакурс.Количество() > 0 Тогда
						СтрокаРакурс = СтрокиРакурс[0];
					Иначе
						СтрокаРакурс = Объект.Ракурсы.Добавить();
						СтрокаРакурс.Ракурс = РакурсСсылка;
					КонецЕсли;
					СтрокаРакурс.СтатусРакурса = ПредопределенноеЗначение("Перечисление.СтатусыРакурсов.Непринято");
					СтрокиСОтказами = Объект.ОтказыПоРакурсам.НайтиСтроки(Новый Структура("Ракурс", РакурсСсылка));
					Если СтрокиСОтказами.Количество() = 0 Тогда
						СтрокаСОтказом = Объект.ОтказыПоРакурсам.Добавить();
						СтрокаСОтказом.Ракурс = РакурсСсылка;
					Иначе
						СтрокаСОтказом = СтрокиСОтказами[0];
					КонецЕсли;
					
					Коммент = "";
					Если СтрокиФото.Количество() > 0 Тогда
						СтрокаСФото = СтрокиФото[0];
						Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
					КонецЕсли;
					
					Результат = ОткрытьФормуМодально("Документ.МП_ЗадачаМагазина.Форма.ФормаКомментарияОтказа", Новый Структура("Комментарий, КолвоОтказов", Коммент, СтрокаСОтказом.Количество));
					
					Если Результат <> Неопределено Тогда
						СтрокаСОтказом.Количество = Результат.КолвоОтказов;
						СтрокаСФото.Комментарий = Результат.Комментарий;
						ЗаписатьКомментарийВФото(СтруктураСобытия.УинКартинка, Результат.Комментарий);
					КонецЕсли;	
				КонецЕсли;
				
				СледКартинка = "";
				Для н = 0 По СтрокиПоРакурсу.Количество() - 1 Цикл
					Если СтрокиПоРакурсу[н].УинКартинки = СтруктураСобытия.УинКартинка
						И н < СтрокиПоРакурсу.Количество() - 1 Тогда
						СтрокиТекКартинка = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
						Если СтрокиТекКартинка.Количество() = 0 Тогда
							СтрокаТекКартинка = ТекКартинкиРакурсов.Добавить();
							СтрокаТекКартинка.УинРакурса = СтруктураСобытия.УинРакурса;
						Иначе	
							СтрокаТекКартинка = СтрокиТекКартинка[0];
						КонецЕсли;	
						СтрокаТекКартинка.УинКартинки = СтрокиПоРакурсу[н + 1].УинКартинки;
						
						ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтрокаТекКартинка.УинКартинки + ".*");
						Если ФайлыКартинки.Количество() = 0 Тогда
							СтрФайл = СкачатьПолнуюКартинкуССервера(СтрокаТекКартинка.УинКартинки);
							СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтрокаТекКартинка.УинКартинки + "." + СтрФайл.Расширение);
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
				
				Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
					Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинРакурса) > 0 Тогда
						ТекФотоПоРакурсу = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинРакурса", СтруктураСобытия.УинРакурса));
						Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинРакурса + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
						+ СформироватьТэгиПоРакурсу(РакурсСсылка, ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
						+ "</table>";
					КонецЕсли;	
				КонецЦикла;
				
				ПересчитатьБаллыПоДокументу();
				Объект.Проверяющий = ПолучитьТекПоьзователя();
			КонецЕсли;	
			
		ИначеЕсли ДанныеСобытия.Element.name = "ShowBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				ОткрытьЗначение(Новый Картинка(ФайлыКартинки[0].ПолноеИмя));
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Element.name = "SaveBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				Если ДиалогСохранения.Выбрать() Тогда
					КопироватьФайл(ФайлыКартинки[0].ПолноеИмя, ДиалогСохранения.ПолноеИмяФайла + ФайлыКартинки[0].Расширение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Element.name = "RotateBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				Список = Новый СписокЗначений();
				Список.Добавить(1, "На 90 градусов против часовой стрелки");
				Список.Добавить(2, "На 90 градусов по часовой стрелке");
				Список.Добавить(3, "На 180 градусов");
				Выбранное = Список.ВыбратьЭлемент("Выберите угол поворота");
				Если Выбранное <> Неопределено Тогда
					ИмяФайла = ФайлыКартинки[0].ПолноеИмя;
					КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяФайла, Выбранное.Значение);
					
					АдресВХранилище = ПоместитьВоВременноеХранилище(Новый Картинка(ИмяФайла), ЭтаФорма.УникальныйИдентификатор);
					ЗаписатьПеревернутоеИзображениеНаСервер(СтруктураСобытия.УинКартинка, АдресВХранилище);
					
					Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
						Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинРакурса) > 0 Тогда
							Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинРакурса + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
							 + СформироватьТэгиПоРакурсу(ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса), СтруктураСобытия.УинКартинка)
							 + "</table>";
						КонецЕсли;	
					КонецЦикла;
					
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Element.name = "TrimBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				ИмяФайла = ФайлыКартинки[0].ПолноеИмя;
				КартинкаТекст = КомпонентаДопГрафика.ВырезатьЧастьИзображения(ИмяФайла);
				Если ЗначениеЗаполнено(КартинкаТекст) Тогда
					КартинкаВырезанная = КартинкаВДД(КартинкаТекст);
					Коммент = "";
					СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", СтруктураСобытия.УинКартинка));
					Если СтрокиФото.Количество() > 0 Тогда
						СтрокаСФото = СтрокиФото[0];
						Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
					КонецЕсли;
					
					СтруктураСообщения = ПолучитьСтруктуруДляСообщенияМОС(СтруктураСобытия.УинРакурса, Объект.Магазин, КартинкаВырезанная, Коммент);
					
					ФормаСообщения = ПолучитьФорму("Документ.СообщениеМОС.Форма.ФормаСообщенияЦО", Новый Структура("ФД", СтруктураСообщения.ФормДокумент), ЭтаФорма);
					
					ЗаполнитьЗначенияСвойств(ФормаСообщения.Объект, СтруктураСообщения);
					ФормаСообщения.Объект.СтруктурныеЕдиницы.Очистить();
					СтрокаТЧ1 = ФормаСообщения.Объект.СтруктурныеЕдиницы.Добавить();
					СтрокаТЧ1.СтруктурнаяЕдиница = Объект.Магазин;
					СтрокаТЧ1.СтаршийСмены = СтруктураСообщения.СтаршийСмены;
					ФормаСообщения.СписокМагазинов.Очистить();
					ФормаСообщения.СписокМагазинов.Добавить(Объект.Магазин, Строка(Объект.Магазин), Истина);
					ФормаСообщения.Объект.ФорматированиеТекста = Истина;
					ФормаСообщения.Открыть();
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	//Сообщить("Разрыв");
	//Сообщить(Элементы.ДокументHTML.Документ.body.InnerHtml);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДляСообщенияМОС(УинРакурса, Магазин, Картинка, Коммент)
	
	РакурсСсылка = ПолучитьСсылкуНаРакурс(УинРакурса);
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Дата", ТекущаяДата());
	СтруктураВозврата.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
	СтруктураВозврата.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.СписокМагазинов);
	СтруктураВозврата.Вставить("КодНаправления", 0);
	СтруктураВозврата.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
	СтруктураВозврата.Вставить("СрокАктуальностиСообщения", 2);
	СтруктураВозврата.Вставить("Тема", "Замечание по фотографии ракурса " + РакурсСсылка);
	СтруктураВозврата.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	СтруктураВозврата.Вставить("СтаршийСмены", МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(Магазин));
	ФормДокумент = Новый ФорматированныйДокумент();
	ФормДокумент.Добавить(Коммент, ТипЭлементаФорматированногоДокумента.Текст);
	ФормДокумент.Добавить("", ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	ФормДокумент.Добавить(Картинка, ТипЭлементаФорматированногоДокумента.Картинка);
	//ТекстХтмл = "";
	//ВложенияХтмл = Новый Структура();
	//ФормДокумент.ПолучитьHTML(ТекстХтмл, ВложенияХтмл);
	СтруктураВозврата.Вставить("ФормДокумент", ФормДокумент);
	//СтруктураВозврата.Вставить("ФормДокументВложения", ВложенияХтмл);
	
	Возврат СтруктураВозврата;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаписатьПеревернутоеИзображениеНаСервер(УинФото, АдресХранилища)
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		Возврат;
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	СпрСсылка = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Новый УникальныйИдентификатор(УинФото));
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МП_ФотографииКЗадачам.Ссылка,
	               |	МП_ФотографииКЗадачам.РасширениеФайла,
	               |	МП_ФотографииКЗадачам.ОтносительноеИмяФайла
	               |ИЗ
	               |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |ГДЕ
	               |	МП_ФотографииКЗадачам.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", СпрСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
			ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
			Файл = Новый Файл(ПолноеИмяФайла);
			РасширениеФайла = Сред(Файл.Расширение, 2);
			ИмяФайлаМиниатюра = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
			УдалитьФайлы(ИмяФайлаМиниатюра);
			Картинка = ПолучитьИзВременногоХранилища(АдресХранилища);
			Картинка.Записать(ПолноеИмяФайла);
			УдалитьИзВременногоХранилища(АдресХранилища);
		Иначе
			РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
			
			Если Лев(РасширениеФайла, 1) = "." Тогда
				РасширениеФайла = Сред(РасширениеФайла, 2);
			КонецЕсли;
			
			ПолноеИмяФайла = КаталогФотографий + УинФото + "." + РасширениеФайла;
			ИмяФайлаМиниатюра = КаталогФотографий + УинФото + "thumb." + РасширениеФайла;
			УдалитьФайлы(ИмяФайлаМиниатюра);
			Картинка = ПолучитьИзВременногоХранилища(АдресХранилища);
			Картинка.Записать(ПолноеИмяФайла);
			УдалитьИзВременногоХранилища(АдресХранилища);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьСтатусВФото(УинФото, Статус)
	
	СпрОбъект = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Новый УникальныйИдентификатор(УинФото)).ПолучитьОбъект();
	Если Статус = "0" Тогда
		СпрОбъект.СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка();
	ИначеЕсли Статус = "1" Тогда
		СпрОбъект.СтатусФото = Перечисления.СтатусыРакурсов.Непринято;
	ИначеЕсли Статус = "2" Тогда
		СпрОбъект.СтатусФото = Перечисления.СтатусыРакурсов.Принято;
	КонецЕсли;
	СпрОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьСтатусДокумента", Истина);
	СпрОбъект.Записать();
	
КонецПроцедуры	


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Ракурсы.Количество() > 0 Тогда
		ВсеСтатусыПриняты = Истина;
		Для Каждого СтрокаТЧ Из Объект.Ракурсы Цикл
			Если СтрокаТЧ.СтатусРакурса = Перечисления.СтатусыРакурсов.Принято Тогда
			Иначе
				ВсеСтатусыПриняты = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеСтатусыПриняты Тогда
			Объект.СтатусЗадачи = Перечисления.СтатусыЗадач.ГОТОВО;
		Иначе
			Если Не ЗначениеЗаполнено(Объект.СтатусЗадачи) Тогда
				Объект.СтатусЗадачи = Перечисления.СтатусыЗадач.НеПринято;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МП_ФотографииКЗадачам.Ссылка
	               |ИЗ
	               |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |ГДЕ
	               |	МП_ФотографииКЗадачам.Задача = &Задача
	               |	И МП_ФотографииКЗадачам.СтатусФото = ЗНАЧЕНИЕ(Перечисление.СтатусыРакурсов.ПустаяСсылка)
	               |	И ПОДСТРОКА(МП_ФотографииКЗадачам.РасширениеФайла, 1, 1) <> "" ""
	               |	И МП_ФотографииКЗадачам.Ракурс <> ЗНАЧЕНИЕ(Справочник.МП_Ракурсы.ИсправленныеФотографии)";
				   
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Набор = РегистрыСведений.МП_ДокументыСНеобработаннымиФото.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Объект.Ссылка);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Движение = Набор.Добавить();
	Иначе
		Движение = Набор[0];
	КонецЕсли;
	Движение.Документ = Объект.Ссылка;
	Движение.ЕстьНеобработанные = НЕ Результат.Пустой();
	Набор.Записать();
	
КонецПроцедуры


&НаКлиенте
Процедура МасштабФотоРакурсовПриИзменении(Элемент)
	
	СформироватьHTML(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Задача магазина");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь());
	Фильтр.Вставить("КлючОбъекта", "Общее/МасштабФотоРакурсов");
		
	Настр = ХранилищеСистемныхНастроек.Выбрать(Фильтр);
	Если Настр.Следующий() Тогда
		МасштабФотоРакурсов = Настр.Настройки;
	КонецЕсли;
	
	МожетРедактировать = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетРедактироватьЗадачиМагазина, Ложь);
	
	//СтруктураСкрипты = Новый Структура("Скрипт1, Скрипт2, ВРеестр1, ВРеестр2", Документы.МП_ЗадачаМагазина.ПолучитьМакет("СкриптJQuery"), Документы.МП_ЗадачаМагазина.ПолучитьМакет("СкриптCloudZoom")
	//		, Документы.МП_ЗадачаМагазина.ПолучитьМакет("РеестрSecurity"), Документы.МП_ЗадачаМагазина.ПолучитьМакет("РеестрAbout"));
	//СсылкаНаСкрипт = ПоместитьВоВременноеХранилище(СтруктураСкрипты, ЭтаФорма.УникальныйИдентификатор);
	
	МП_ИсправленныеФотографии = Справочники.МП_Ракурсы.ИсправленныеФотографии;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантАктуальностиПриИзменении(Элемент = Неопределено)
	
	Если Объект.ВариантАктуальности = ПредопределенноеЗначение("Перечисление.ВариантыАктуальностиЗаданийМП.ДоУказаннойДаты") Тогда
		Элементы.АктуальноДо.Видимость = Истина;
		
		Если НЕ ЗначениеЗаполнено(Объект.АктуальноДо) Тогда
			Объект.АктуальноДо = Объект.Дата;
		КонецЕсли; 
		
	Иначе
		Элементы.АктуальноДо.Видимость = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДатуБлокировкиОбмена(Магазин)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МЗ = РегистрыСведений.МП_БлокировкаОбмена.СоздатьМенеджерЗаписи();
	
	МЗ.СтруктурнаяЕдиница = Магазин;
	МЗ.Прочитать();
	
	МЗ.СтруктурнаяЕдиница = Магазин;
	МЗ.ДатаАктуализацииБлокировки = ТекущаяДата();
	
	МЗ.Записать();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверкаБлокировкиОбмена()
	
	Если Элементы.ФормаЗаблокироватьОбмен.Пометка И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьДатуБлокировкиОбмена(Объект.Магазин);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаблокироватьОбмен(Команда)
	
	Элементы.ФормаЗаблокироватьОбмен.Пометка = НЕ Элементы.ФормаЗаблокироватьОбмен.Пометка; 
	
	ПроверкаБлокировкиОбмена();
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПослеЗаписи(ПараметрыЗаписи)
//	ЗаполнитьСтруктуруПоКартинкамДляЗаписиВРегистр();
//	СоздатьЗаписиПрикрепленныеФотоКОбъектам();
//КонецПроцедуры

//&НаСервере
//Процедура СоздатьЗаписиПрикрепленныеФотоКОбъектам()
//	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
//	Если Прав(КаталогФотографий, 1) <> "\" Тогда
//		КаталогФотографий = КаталогФотографий + "\";
//	КонецЕсли;
//	//МассивРакурсы = Новый Массив();
//	Набор = РегистрыСведений.ПрикрепленныеФотоКОбъектам.СоздатьНаборЗаписей();
//	Набор.Отбор.Объект.Установить(Объект.Ссылка);
//	
//	Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайловДляЗаписиВРегистр Цикл
//		Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
//			//Картинка = ПолучитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
//			УдалитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
//			//Картинка.Записать(КаталогФотографий + "\" + ЭлементСтруктуры.УинКартинки +  "." + ЭлементСтруктуры.Расширение);
//			
//			ФайлОбъект = Новый Файл(КаталогФотографий + ЭлементСтруктуры.ОтносительноеИмя);
//			УинФайла = ФайлОбъект.ИмяБезРасширения;
//			Запись = Набор.Добавить();
//			Запись.СтруктурнаяЕдиница = Объект.Магазин;
//			Запись.ТипЗаписи = ПредопределенноеЗначение("Перечисление.ТипыЗаписейПриложенныхКартинок.ФотоОтчет");
//			Запись.ОтносительноеИмяФайла = ЭлементСтруктуры.ОтносительноеИмя;
//			Запись.Расширение = СтрЗаменить(ФайлОбъект.Расширение, ".", "");
//			Запись.УинЗаписи = УинФайла;
//			Запись.Объект = Объект.Ссылка;
//			Запись.ДатаДобавления = Объект.Дата;
//			Запись.Текст="Комментарий: ракурс "+ЭлементСтруктуры.Ракурс;
//		КонецЕсли;
//	КонецЦикла;	
//	Набор.Записать();
//КонецПроцедуры
// 

