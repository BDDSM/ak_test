
&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		ДатаНачала = СтандартныйПериод.ДатаНачала;
		ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь());
	Фильтр.Вставить("КлючОбъекта", "Общее/МасштабФотоРакурсов");
		
	Настр = ХранилищеСистемныхНастроек.Выбрать(Фильтр);
	Если Настр.Следующий() Тогда
		МасштабФотоРакурсов = Настр.Настройки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытииНаСервере()
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/МасштабФотоРакурсов", "", МасштабФотоРакурсов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаНачала = ТекущаяДата() - 86400*7;
	ДатаОкончания = ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(МасштабФотоРакурсов) Тогда
		МасштабФотоРакурсов = 100;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗапросДляВыполнения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МП_ФотографииКЗадачам.Ссылка КАК ПрисоединенныйФайл,
	               |	МП_ЗадачаМагазинаРакурсы.Ракурс КАК Ракурс,
	               |	МП_ЗадачаМагазинаРакурсы.Ссылка.Магазин КАК Магазин,
	               |	МП_ФотографииКЗадачам.РасширениеФайла,
	               |	МП_ЗадачаМагазинаРакурсы.СтатусРакурса,
	               |	МП_ФотографииКЗадачам.Комментарий,
	               |	МП_ФотографииКЗадачам.ОтносительноеИмяФайла,
	               |	МП_ЗадачаМагазинаРакурсы.Ссылка.Дата КАК Дата,
	               |	МП_ФотографииКЗадачам.СтатусФото КАК СтатусФото,
	               |	МП_ЗадачаМагазинаРакурсы.Ссылка КАК Задача
	               |ИЗ
	               |	Документ.МП_ЗадачаМагазина.Ракурсы КАК МП_ЗадачаМагазинаРакурсы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |		ПО МП_ЗадачаМагазинаРакурсы.Ссылка = МП_ФотографииКЗадачам.Задача
	               |			И МП_ЗадачаМагазинаРакурсы.Ракурс = МП_ФотографииКЗадачам.Ракурс
	               |ГДЕ
	               |	МП_ЗадачаМагазинаРакурсы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И (МП_ЗадачаМагазинаРакурсы.Ссылка.Магазин В (&Магазины)
	               |			ИЛИ &ЕстьОтборПоМагазинам = ЛОЖЬ)
	               |	И (МП_ФотографииКЗадачам.Ракурс В (&Ракурсы)
	               |			ИЛИ &ЕстьОтборПоРакурсам = ЛОЖЬ)
	               |	И (МП_ФотографииКЗадачам.СтатусФото В (&СтатусыФото)
	               |			ИЛИ &ЕстьОтборПоСтатусуФото = ЛОЖЬ)
	               |	И ПОДСТРОКА(МП_ФотографииКЗадачам.ОтносительноеИмяФайла, 1, 1) <> "" ""
	               |	И МП_ФотографииКЗадачам.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МП_ЗадачаМагазинаРакурсы.Ссылка.Дата,
	               |	МП_ЗадачаМагазинаРакурсы.Ссылка.Магазин,
	               |	МП_ЗадачаМагазинаРакурсы.Ракурс";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Магазины", Магазины.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ЕстьОтборПоМагазинам", Магазины.Количество() > 0);
	Запрос.УстановитьПараметр("Ракурсы", Ракурсы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ЕстьОтборПоРакурсам", Ракурсы.Количество() > 0);
	Запрос.УстановитьПараметр("СтатусыФото", СтатусыФото.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ЕстьОтборПоСтатусуФото", СтатусыФото.Количество() > 0);
	
	Возврат Запрос;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьСтруктуруПоКартинкам()
	
	ТаблицаСтруктурыФайлов.Очистить();
	ТекКартинкиРакурсов.Очистить();
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	Если ПустаяСтрока(КаталогФотографий) Тогда
		Сообщить("Не заполнена константа КаталогХраненияФайловЗадачМП!");
		Возврат;
	КонецЕсли;
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Запрос = ПолучитьЗапросДляВыполнения();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Магазин") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Ракурс") Цикл
				ПервыйПроход = Истина;
				БылоДобавлениеПустого = Ложь;
				Пока Выборка.Следующий() Цикл
					Если ЗначениеЗаполнено(Выборка.ПрисоединенныйФайл) Тогда
						УинКартинки = Строка(Выборка.ПрисоединенныйФайл.УникальныйИдентификатор());
						
						СпрСсылка = Выборка.ПрисоединенныйФайл;
						
						ПолноеИмяФайла = "";
						Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
							ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
							Файл = Новый Файл(ПолноеИмяФайла);
							РасширениеФайла = Сред(Файл.Расширение, 2);
							Если НЕ ПервыйПроход Тогда
								ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "thumb." + РасширениеФайла;
								ФайлМиниатюра = Новый Файл(ПолноеИмяФайла);
								Если НЕ ФайлМиниатюра.Существует() Тогда
									ПолноеИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + "." + РасширениеФайла;
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;
						
						Файл = Новый Файл(ПолноеИмяФайла);
						
						Если Файл.Существует()
							И Файл.Размер() > 0 Тогда
							СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
							СтруктураЗаписи.УинКартинки = УинКартинки;
							
							Если ЗначениеЗаполнено(РасширениеФайла) Тогда
								Если ПервыйПроход Тогда
									СтруктураЗаписи.ТолькоМиниатюра = Ложь;
								Иначе
									СтруктураЗаписи.ТолькоМиниатюра = Истина;
								КонецЕсли;	
								
								Попытка
									Картинка = Новый Картинка(ПолноеИмяФайла);
									СтруктураЗаписи.АдресВХранилище = ПоместитьВоВременноеХранилище(Картинка);
									СтруктураЗаписи.Расширение = РасширениеФайла;
									ПервыйПроход = Ложь;
								Исключение
								КонецПопытки;
							КонецЕсли;
						Иначе
							Если НЕ БылоДобавлениеПустого Тогда
								СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
								БылоДобавлениеПустого = Истина;
							Иначе
								Продолжить;
							КонецЕсли;	
						КонецЕсли;	
						
					Иначе
						СтруктураЗаписи = ТаблицаСтруктурыФайлов.Добавить();
					КонецЕсли;	
					СтруктураЗаписи.Задача = Выборка.Задача;
					СтруктураЗаписи.Магазин = Выборка.Магазин;
					СтруктураЗаписи.Дата = Выборка.Дата;
					СтруктураЗаписи.Ракурс = Выборка.Ракурс;
					СтруктураЗаписи.Комментарий = Выборка.Комментарий;
					Если Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
						СтруктураЗаписи.СтатусРакурса = 0;
					ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Непринято Тогда
						СтруктураЗаписи.СтатусРакурса = 1;
					ИначеЕсли Выборка.СтатусРакурса = Перечисления.СтатусыРакурсов.Принято Тогда
						СтруктураЗаписи.СтатусРакурса = 2;
					КонецЕсли;
					Если Выборка.СтатусФото = Перечисления.СтатусыРакурсов.ПустаяСсылка() Тогда
						СтруктураЗаписи.СтатусФото = 0;
					ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Непринято Тогда
						СтруктураЗаписи.СтатусФото = 1;
					ИначеЕсли Выборка.СтатусФото = Перечисления.СтатусыРакурсов.Принято Тогда
						СтруктураЗаписи.СтатусФото = 2;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоличествоЗаписейВОтборе()
	
	Запрос = ПолучитьЗапросДляВыполнения();
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Количество();
	
КонецФункции	

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ПолучитьКоличествоЗаписейВОтборе() > 200 Тогда
		Ответ = Вопрос("Отчет будет содержать более 200 фото и его формирование может занять значительное время, а также забрать значительные ресурсы сервера. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МасштабФотоРакурсов) Тогда
		МасштабФотоРакурсов = 100;
	КонецЕсли;
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	СоздатьКаталог(ВременныйКаталог);
	
	БиблиотекаКартинок.ПоказатьДанные.Записать(ВременныйКаталог + "\Show.png");
	БиблиотекаКартинок.ЗаписатьИЗакрыть.Записать(ВременныйКаталог + "\Accepted.png");
	БиблиотекаКартинок.Удалить.Записать(ВременныйКаталог + "\Canceled.png");
	БиблиотекаКартинок.Выбрать.Записать(ВременныйКаталог + "\Unknown.png");
	БиблиотекаКартинок.Записать.Записать(ВременныйКаталог + "\SaveAs.png");
	БиблиотекаКартинок.Сортировка.Записать(ВременныйКаталог + "\Rotate.png");
	БиблиотекаКартинок.ПрочитатьИзменения.Записать(ВременныйКаталог + "\Trim.png");
	
	СформироватьHTML();
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьHTML(СчитыватьКартинкиССервера = Истина)
	
	ПолныйТекстHTML = "<html>
	|<body>";
	
	Если СчитыватьКартинкиССервера Тогда
		ЗаполнитьСтруктуруПоКартинкам();
	КонецЕсли;
	
	ТабРазнообразиеРакурсов.Очистить();
	
	Для Каждого ЭлементСтруктуры Из ТаблицаСтруктурыФайлов Цикл
		Если СчитыватьКартинкиССервера Тогда
			Если ЗначениеЗаполнено(ЭлементСтруктуры.АдресВХранилище) Тогда
				Картинка = ПолучитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
				УдалитьИзВременногоХранилища(ЭлементСтруктуры.АдресВХранилище);
				Картинка.Записать(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение);
			КонецЕсли;
		КонецЕсли;	
		Если ТабРазнообразиеРакурсов.НайтиСтроки(Новый Структура("Дата, Магазин, Ракурс", ЭлементСтруктуры.Дата, ЭлементСтруктуры.Магазин, ЭлементСтруктуры.Ракурс)).Количество() = 0 Тогда
			СтрокаДоб = ТабРазнообразиеРакурсов.Добавить();
			СтрокаДоб.Магазин = ЭлементСтруктуры.Магазин;
			СтрокаДоб.Ракурс = ЭлементСтруктуры.Ракурс;
			СтрокаДоб.Дата = ЭлементСтруктуры.Дата;
			СтрокаДоб.УинСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ЭлементРакурс Из ТабРазнообразиеРакурсов Цикл
		ПолныйТекстHTML = ПолныйТекстHTML + "
			|<span><table id = ""Rakurs" + ЭлементРакурс.УинСтроки + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
				+ СформироватьТэгиПоРакурсу(ЭлементРакурс)
				+ "</table></span><p></p>";
	КонецЦикла;				
				
	ПолныйТекстHTML = ПолныйТекстHTML + "</body>
	|</html>";
	
	ДокументHTML = ПолныйТекстHTML;
	
КонецПроцедуры	

&НаКлиенте
Функция СформироватьТэгиПоРакурсу(ЭлементРакурс, ТекущаяКартинка = "")
	
	ТекстВозврата = "";
	
	ТекСтатус = "";
	СтильСтатуса = "";
	СтрокиСтруктуры = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Дата, Магазин, Ракурс", ЭлементРакурс.Дата, ЭлементРакурс.Магазин, ЭлементРакурс.Ракурс));
	Если СтрокиСтруктуры.Количество() > 0 Тогда
		Если СтрокиСтруктуры[0].СтатусРакурса = 0 Тогда
			ТекСтатус = "Не обработан";
			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #3232FF""";
		ИначеЕсли СтрокиСтруктуры[0].СтатусРакурса = 1 Тогда
			ТекСтатус = "Не принят";
			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #FF3232""";
		ИначеЕсли СтрокиСтруктуры[0].СтатусРакурса = 2 Тогда
			ТекСтатус = "Принят";
			СтильСтатуса = "style = ""font-size:18; font-weight: bold; color: #00BE00""";
		КонецЕсли;	
	КонецЕсли;
	ТекстПорядкаРакурса = "" + Формат(ЭлементРакурс.Дата, "ДФ=dd.MM.yy") + " " + ЭлементРакурс.Магазин + " " + ЭлементРакурс.Ракурс;
	ТекстВозврата = ТекстВозврата + "
	|	<tr>
	|		<td valign=""top"">
	|		<table><tr><td>
	|		<span style = ""font-size:18; font-weight: bold; color: #9696FF"">" + ТекстПорядкаРакурса + "</span>&nbsp;&nbsp;&nbsp;<span><span id = ""CurrentState" + ЭлементРакурс.УинСтроки + """ " + СтильСтатуса + ">Текущий статус: " + ТекСтатус + "</span></span><span><br></span>
	|		</td></tr></table>
	|<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
	|<tr>		";
	
	КолвоСтрок = СтрокиСтруктуры.Количество();
	Если КолвоСтрок > 0 Тогда
		Если ЗначениеЗаполнено(ТекущаяКартинка) Тогда
			Для Каждого ЭлементСтруктуры Из СтрокиСтруктуры Цикл
				Если ЭлементСтруктуры.УинКартинки = ТекущаяКартинка Тогда
					ТекКартинкаСтруктура = ЭлементСтруктуры;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		Иначе	
			ТекКартинкаСтруктура = СтрокиСтруктуры[0];
		КонецЕсли;	
		Файл = Новый Файл(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение);
		Если Файл.Существует()
			И ЗначениеЗаполнено(ТекКартинкаСтруктура.УинКартинки) Тогда
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%"" align=""right"">
			|
			|<table id=""PhotoOpeartions" + ТекКартинкаСтруктура.УинКартинки + "_PhOp" + ЭлементРакурс.Уинстроки + """>
			|<tr>
			|<td  align=""right"">
			|<img name=ShowBt alt=""Показать изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Show.png", "\", "/") + """>
			|<img name=SaveBt alt=""Сохранить как"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\SaveAs.png", "\", "/") + """>
			|<img name=RotateBt alt=""Перевернуть изображение"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Rotate.png", "\", "/") + """>
			//|<img name=TrimBt alt=""Вырезать картинку в сообщение магазину"" width=16 height=16 style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\Trim.png", "\", "/") + """>
			|</td>
			|</tr>
			|</table>
			|
			|</td>
			|<td valign=""top"" align = ""center"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + ">
			|<p></p>
			|		<img class=""cloudzoom"" name=""picture"" width=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " height=" + Формат(Цел(600 * МасштабФотоРакурсов/100), "ЧГ=0") + " style = ""cursor: pointer"" id = """ + ТекКартинкаСтруктура.УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ТекКартинкаСтруктура.УинКартинки + "." + ТекКартинкаСтруктура.Расширение, "\", "/") + """>
			|</td>
			|<td width = ""40%"" valign=""top"">
			|<table width = ""100%"">
			|<tr>
			|<td width=15></td>
			|<td><span style = ""color: #2D84C4"">&nbsp;&nbsp;Комментарий</span></td>
			|<td width=15></td>
			|</tr>
			|<tr>
			|<td width=15></td>
			|<td>
			|" + СформироватьТэгКомментария(ТекКартинкаСтруктура.УинКартинки, ТекКартинкаСтруктура.Комментарий) + "</td>
			|</td>
			|<td width=15></td>
			|</tr>
			|</table>
			|
			|</td>
			|</tr>";
		Иначе
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""></td>
			|<td valign=""center"" align = ""center"" height = 150 style = ""font-size:24; font-weight: bold; color: #AAAAAA"">
			|Нет фото
			|</td>
			|<td width = ""40%""></td>
			|</tr>";
		КонецЕсли;
		
		Если Файл.Существует() Тогда
			
			Если ТекКартинкаСтруктура.СтатусФото = 0 Тогда
				ТекСтатус = "Не обработано";
				СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #3232FF""";
			ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 1 Тогда
				ТекСтатус = "Не принято";
				СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #FF3232""";
			ИначеЕсли ТекКартинкаСтруктура.СтатусФото = 2 Тогда
				ТекСтатус = "Принято";
				СтильСтатуса = "style = ""font-size:14; font-weight: bold; color: #00BE00""";
			КонецЕсли;
			
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%"">
			|
			|</td>
			|<td valign=""center"" align = ""left"">
			|<span><span id = ""CurrentPhotoState" + ТекКартинкаСтруктура.УинКартинки + "_" + ЭлементРакурс.УинСтроки + """ " + СтильСтатуса + ">Текущий статус фото: " + ТекСтатус + "</span></span>
			|</td>
			|<td width = ""40%""></td>
			|</tr>";
		КонецЕсли;	
		
		Если КолвоСтрок > 1 Тогда
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""> </td>
			|<td align = ""left"">
			|<table name = ""PictView>"">
			|
			|<tr>
			|<td>
			|<table id=""" + СтрокиСтруктуры[0].УинКартинки + "_T" + Строка(ЭлементРакурс.УинСтроки) + """ border=""2"" cellpadding=""0"" bordercolor=" + ?(СтрокиСтруктуры[0].УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff") + " cellspacing=""0""><tr><td><img name=""smallpicture"" width=40 height=40 style = ""cursor: pointer"" id = """ + СтрокиСтруктуры[0].УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + СтрокиСтруктуры[0].УинКартинки + ?(СтрокиСтруктуры[0].ТолькоМиниатюра, "thumb", "") + "." + СтрокиСтруктуры[0].Расширение, "\", "/") + """></td></tr></table></td>";
			Для н = 1 По КолвоСтрок - 1 Цикл
				ЭлементСтруктуры = СтрокиСтруктуры[н];
				ТекстВозврата = ТекстВозврата + "
				|<td><table id=""" + ЭлементСтруктуры.УинКартинки + "_T" + Строка(ЭлементРакурс.УинСтроки) + """ border=""2"" cellpadding=""0"" bordercolor=" + ?(ЭлементСтруктуры.УинКартинки = ТекКартинкаСтруктура.УинКартинки, "#aaaa00", "#ffffff") + " cellspacing=""0""><tr><td><img name=""smallpicture"" width = 40 height=40 style = ""cursor: pointer"" id = """ + ЭлементСтруктуры.УинКартинки + "_" + Строка(ЭлементРакурс.УинСтроки) + """ src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + ЭлементСтруктуры.УинКартинки + ?(ЭлементСтруктуры.ТолькоМиниатюра, "thumb", "") + "." + ЭлементСтруктуры.Расширение, "\", "/") + """></td></tr></table></td>";
			КонецЦикла;		
			
			ТекстВозврата = ТекстВозврата + "
			|</tr>
			|
			|</table>
			|</td>
			|<td width = ""40%""> </td>
			|</tr>";
			
			//пиктограммы к фото
			Если СтрокиСтруктуры[0].СтатусФото = 2 Тогда
				СтатусИмя = "Accepted";
			ИначеЕсли СтрокиСтруктуры[0].СтатусФото = 1 Тогда
				СтатусИмя = "Canceled";
			ИначеЕсли СтрокиСтруктуры[0].СтатусФото = 0 Тогда
				СтатусИмя = "Unknown";	
			КонецЕсли;	
			ТекстВозврата = ТекстВозврата + "
			|<tr>
			|<td width = ""20%""> </td>
			|<td align = ""left"">
			|<table name = ""StatusPictView>"">
			|
			|<tr>
			|<td>
			|<table cellpadding=""0"" cellspacing=""0""><tr><td width=2 height=16></td><td width=45 height=16 valign=""center"" align=""center""><img name=""statuspicture"" width=16 height=16 src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + СтатусИмя + ".png", "\", "/") + """></td></tr></table></td>";
			Для н = 1 По КолвоСтрок - 1 Цикл
				ЭлементСтруктуры = СтрокиСтруктуры[н];
				Если ЭлементСтруктуры.СтатусФото = 2 Тогда
					СтатусИмя = "Accepted";
				ИначеЕсли ЭлементСтруктуры.СтатусФото = 1 Тогда
					СтатусИмя = "Canceled";
				ИначеЕсли ЭлементСтруктуры.СтатусФото = 0 Тогда
					СтатусИмя = "Unknown";	
				КонецЕсли;
				ТекстВозврата = ТекстВозврата + "
				|<td><table cellpadding=""0"" cellspacing=""0""><tr><td width=45 height=16 valign=""center"" align=""center""><img name=""statuspicture"" width=16 height=16 src = ""file:///" + СтрЗаменить(ВременныйКаталог + "\" + СтатусИмя + ".png", "\", "/") + """></td></tr></table></td>";
			КонецЦикла;		
			
			ТекстВозврата = ТекстВозврата + "
			|</tr>
			|
			|</table>
			|</td>
			|<td width = ""40%""> </td>
			|</tr>";
		КонецЕсли;
		
	КонецЕсли;		
	
	
	ТекстВозврата = ТекстВозврата + "			
	|	</tr></table></td></tr>";
	
	Возврат ТекстВозврата;
	
КонецФункции	

&НаКлиенте
Функция СформироватьТэгКомментария(УинКартинки, Комментарий)
	
	Комментарий = СтрЗаменить(Комментарий, Символы.ПС, "<br>");
	Возврат "<div name=""SetKomment"" style = ""cursor: pointer; background: #eeeee5; border: 1px dashed #abab9a; padding: 5px;	font: 8pt Tahoma; color:#2c2c2c"" id=""SpanKomment" + УинКартинки + """>" + ?(ЗначениеЗаполнено(Комментарий), СокрЛП(Комментарий), "<br><br>") + "</div>";
	
КонецФункции	

Функция СкачатьПолнуюКартинкуССервера(УинФото)
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());
	
	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	СпрСсылка = Справочники.МП_ФотографииКЗадачам.ПолучитьСсылку(Новый УникальныйИдентификатор(УинФото));
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СпрСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МП_ФотографииКЗадачам.РасширениеФайла,
	               |	МП_ФотографииКЗадачам.ОтносительноеИмяФайла
	               |ИЗ
	               |	Справочник.МП_ФотографииКЗадачам КАК МП_ФотографииКЗадачам
	               |ГДЕ
	               |	МП_ФотографииКЗадачам.Ссылка = &Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.ОтносительноеИмяФайла) Тогда
		ПолноеИмяФайла = КаталогФотографий + Выборка.ОтносительноеИмяФайла;
		Файл = Новый Файл(ПолноеИмяФайла);
		РасширениеФайла = Сред(Файл.Расширение, 2);
	Иначе
		РасширениеФайла = СокрЛП(Выборка.РасширениеФайла);
		
		Если Лев(РасширениеФайла, 1) = "." Тогда
			РасширениеФайла = Сред(РасширениеФайла, 2);
		КонецЕсли;
		
		ПолноеИмяФайла = КаталогФотографий + УинФото + "." + РасширениеФайла;
	КонецЕсли;	
	
	СтрокиТабСтруктура = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", УинФото));
	Если СтрокиТабСтруктура.Количество() > 0 Тогда
		СтрокиТабСтруктура[0].ТолькоМиниатюра = Ложь;
	КонецЕсли;	
	
	Возврат Новый Структура("Расширение, Картинка", РасширениеФайла, Новый Картинка(ПолноеИмяФайла));
	
КонецФункции

//&НаСервереБезКонтекста
//Функция ПолучитьСтруктуруДляСообщенияМОС(УинРакурса, Магазин, Картинка, Коммент)
//	
//	РакурсСсылка = ПолучитьСсылкуНаРакурс(УинРакурса);
//	СтруктураВозврата = Новый Структура();
//	СтруктураВозврата.Вставить("Дата", ТекущаяДата());
//	СтруктураВозврата.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМОС.ИнформационноеСообщение);
//	СтруктураВозврата.Вставить("ВидПолучателей", Перечисления.ВидыПолучателейМОС.СписокМагазинов);
//	СтруктураВозврата.Вставить("КодНаправления", 0);
//	СтруктураВозврата.Вставить("Отправитель", Справочники.РолиПользователей.Администратор);
//	СтруктураВозврата.Вставить("СрокАктуальностиСообщения", 2);
//	СтруктураВозврата.Вставить("Тема", "Замечание по фотографии ракурса " + РакурсСсылка);
//	СтруктураВозврата.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
//	СтруктураВозврата.Вставить("СтаршийСмены", МеханизмОбменаСообщениями.ПолучитьСтаршегоТекущейСмены(Магазин));
//	ФормДокумент = Новый ФорматированныйДокумент();
//	ФормДокумент.Добавить(Коммент, ТипЭлементаФорматированногоДокумента.Текст);
//	ФормДокумент.Добавить("", ТипЭлементаФорматированногоДокумента.ПереводСтроки);
//	ФормДокумент.Добавить(Картинка, ТипЭлементаФорматированногоДокумента.Картинка);
//	//ТекстХтмл = "";
//	//ВложенияХтмл = Новый Структура();
//	//ФормДокумент.ПолучитьHTML(ТекстХтмл, ВложенияХтмл);
//	СтруктураВозврата.Вставить("ФормДокумент", ФормДокумент);
//	//СтруктураВозврата.Вставить("ФормДокументВложения", ВложенияХтмл);
//	
//	Возврат СтруктураВозврата;
//	
//КонецФункции	

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка
		Если ДанныеСобытия.Element.name = "picture" Тогда
			Если ЗначениеЗаполнено(ДанныеСобытия.Element.id) Тогда
				id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
				СтруктураСобытия = Новый Структура("УинКартинка, УинСтроки", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
				
				//РакурсСсылка = ПолучитьСсылкуНаРакурс(СтруктураСобытия.УинРакурса);
				СтрРазнообразие = ТабРазнообразиеРакурсов.НайтиСтроки(Новый Структура("УинСтроки", СтруктураСобытия.УинСтроки))[0];
				СтрокиПоРакурсу = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Дата, Магазин, Ракурс", СтрРазнообразие.Дата, СтрРазнообразие.Магазин, СтрРазнообразие.Ракурс));
				СледКартинка = "";
				Для н = 0 По СтрокиПоРакурсу.Количество() - 1 Цикл
					Если СтрокиПоРакурсу[н].УинКартинки = СтруктураСобытия.УинКартинка
						И н < СтрокиПоРакурсу.Количество() - 1 Тогда
						СтрокиТекКартинка = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинСтроки", СтруктураСобытия.УинСтроки));
						Если СтрокиТекКартинка.Количество() = 0 Тогда
							СтрокаТекКартинка = ТекКартинкиРакурсов.Добавить();
							СтрокаТекКартинка.УинСтроки = СтруктураСобытия.УинСтроки;
						Иначе	
							СтрокаТекКартинка = СтрокиТекКартинка[0];
						КонецЕсли;	
						СтрокаТекКартинка.УинКартинки = СтрокиПоРакурсу[н + 1].УинКартинки;
						
						ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтрокаТекКартинка.УинКартинки + ".*");
						Если ФайлыКартинки.Количество() = 0 Тогда
							СтрФайл = СкачатьПолнуюКартинкуССервера(СтрокаТекКартинка.УинКартинки);
							СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтрокаТекКартинка.УинКартинки + "." + СтрФайл.Расширение);
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
				
				Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
					Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинСтроки) > 0 Тогда
						ТекФотоПоРакурсу = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинСтроки", СтруктураСобытия.УинСтроки));
						Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинСтроки + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
						+ СформироватьТэгиПоРакурсу(СтрРазнообразие, ?(ТекФотоПоРакурсу.Количество() > 0, ТекФотоПоРакурсу[0].УинКартинки, ""))
						+ "</table>";
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		ИначеЕсли ДанныеСобытия.Element.name = "smallpicture" Тогда
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинСтроки", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			СтрРазнообразие = ТабРазнообразиеРакурсов.НайтиСтроки(Новый Структура("УинСтроки", СтруктураСобытия.УинСтроки))[0];
			СтрокиПоРакурсу = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Дата, Магазин, Ракурс", СтрРазнообразие.Дата, СтрРазнообразие.Магазин, СтрРазнообразие.Ракурс));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() = 0 Тогда
				СтрФайл = СкачатьПолнуюКартинкуССервера(СтруктураСобытия.УинКартинка);
				СтрФайл.Картинка.Записать(ВременныйКаталог + "\" + СтруктураСобытия.УинКартинка + "." + СтрФайл.Расширение);
			КонецЕсли;	
			Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
				Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинСтроки) > 0 Тогда
					Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинСтроки + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
					 + СформироватьТэгиПоРакурсу(СтрРазнообразие, СтруктураСобытия.УинКартинка)
					 + "</table>";
					 
					СтрокиТекКартинки = ТекКартинкиРакурсов.НайтиСтроки(Новый Структура("УинСтроки", СтруктураСобытия.УинСтроки));
					Если СтрокиТекКартинки.Количество() = 0 Тогда
						СтрокаТекКартинки = ТекКартинкиРакурсов.Добавить();
						СтрокаТекКартинки.УинСтроки = СтруктураСобытия.УинСтроки;
					Иначе
						СтрокаТекКартинки = СтрокиТекКартинки[0];
					КонецЕсли;	 
					СтрокаТекКартинки.УинКартинки = СтруктураСобытия.УинКартинка;
				КонецЕсли;	
			КонецЦикла;
			
		ИначеЕсли ДанныеСобытия.Element.name = "ShowBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				ОткрытьЗначение(Новый Картинка(ФайлыКартинки[0].ПолноеИмя));
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Element.name = "SaveBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка", СтрПолучитьСтроку(id, 1));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				Если ДиалогСохранения.Выбрать() Тогда
					КопироватьФайл(ФайлыКартинки[0].ПолноеИмя, ДиалогСохранения.ПолноеИмяФайла + ФайлыКартинки[0].Расширение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Element.name = "RotateBt" Тогда
			
			id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
			СтруктураСобытия = Новый Структура("УинКартинка, УинСтроки", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
			СтрРазнообразие = ТабРазнообразиеРакурсов.НайтиСтроки(Новый Структура("УинСтроки", СтруктураСобытия.УинСтроки))[0];
			СтрокиПоРакурсу = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("Дата, Магазин, Ракурс", СтрРазнообразие.Дата, СтрРазнообразие.Магазин, СтрРазнообразие.Ракурс));
			ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
			Если ФайлыКартинки.Количество() > 0 Тогда
				Список = Новый СписокЗначений();
				Список.Добавить(1, "На 90 градусов против часовой стрелки");
				Список.Добавить(2, "На 90 градусов по часовой стрелке");
				Список.Добавить(3, "На 180 градусов");
				Выбранное = Список.ВыбратьЭлемент("Выберите угол поворота");
				Если Выбранное <> Неопределено Тогда
					ИмяФайла = ФайлыКартинки[0].ПолноеИмя;
					КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяФайла, Выбранное.Значение);
					
					Для Каждого Тэг Из Элементы.ДокументHTML.Документ.getElementsByTagName("table") Цикл
						Если Найти(Тэг.id, "Rakurs" + СтруктураСобытия.УинСтроки) > 0 Тогда
							Тэг.parentElement.innerHTML = "<table id = ""Rakurs" + СтруктураСобытия.УинСтроки + """ border=""1"" cellpadding=""0"" bordercolor=#9696FF cellspacing=""0"" width=""100%"">"
							 + СформироватьТэгиПоРакурсу(СтрРазнообразие, СтруктураСобытия.УинКартинка)
							 + "</table>";
						КонецЕсли;	
					КонецЦикла;
					
				КонецЕсли;	
			КонецЕсли;
			
		//ИначеЕсли ДанныеСобытия.Element.name = "TrimBt" Тогда
		//	
		//	id = СтрЗаменить(ДанныеСобытия.Element.id, "_", Символы.ПС);
		//	СтруктураСобытия = Новый Структура("УинКартинка, УинРакурса", СтрПолучитьСтроку(id, 1), СтрПолучитьСтроку(id, 2));
		//	ФайлыКартинки = НайтиФайлы(ВременныйКаталог, СтруктураСобытия.УинКартинка + ".*");
		//	Если ФайлыКартинки.Количество() > 0 Тогда
		//		ИмяФайла = ФайлыКартинки[0].ПолноеИмя;
		//		КартинкаТекст = КомпонентаДопГрафика.ВырезатьЧастьИзображения(ИмяФайла);
		//		Если ЗначениеЗаполнено(КартинкаТекст) Тогда
		//			КартинкаВырезанная = КартинкаВДД(КартинкаТекст);
		//			Коммент = "";
		//			СтрокиФото = ТаблицаСтруктурыФайлов.НайтиСтроки(Новый Структура("УинКартинки", СтруктураСобытия.УинКартинка));
		//			Если СтрокиФото.Количество() > 0 Тогда
		//				СтрокаСФото = СтрокиФото[0];
		//				Коммент = СтрЗаменить(СтрокаСФото.Комментарий, "<br>", Символы.ПС);
		//			КонецЕсли;
		//			
		//			СтруктураСообщения = ПолучитьСтруктуруДляСообщенияМОС(СтруктураСобытия.УинРакурса, Объект.Магазин, КартинкаВырезанная, Коммент);
		//			
		//			ФормаСообщения = ПолучитьФорму("Документ.СообщениеМОС.Форма.ФормаСообщенияЦО", Новый Структура("ФД", СтруктураСообщения.ФормДокумент), ЭтаФорма);
		//			
		//			ЗаполнитьЗначенияСвойств(ФормаСообщения.Объект, СтруктураСообщения);
		//			ФормаСообщения.Объект.СтруктурныеЕдиницы.Очистить();
		//			СтрокаТЧ1 = ФормаСообщения.Объект.СтруктурныеЕдиницы.Добавить();
		//			СтрокаТЧ1.СтруктурнаяЕдиница = Объект.Магазин;
		//			СтрокаТЧ1.СтаршийСмены = СтруктураСообщения.СтаршийСмены;
		//			ФормаСообщения.СписокМагазинов.Очистить();
		//			ФормаСообщения.СписокМагазинов.Добавить(Объект.Магазин, Строка(Объект.Магазин), Истина);
		//			ФормаСообщения.Объект.ФорматированиеТекста = Истина;
		//			ФормаСообщения.Открыть();
		//		КонецЕсли;	
		//	КонецЕсли;	
			
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
КонецПроцедуры


