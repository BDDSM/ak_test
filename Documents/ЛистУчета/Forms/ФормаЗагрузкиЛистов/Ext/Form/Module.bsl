
&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	СтандартныйПериод = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ДиалогРедактирования = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактирования.Период = СтандартныйПериод;
	Если ДиалогРедактирования.Редактировать() Тогда
		СтандартныйПериод = ДиалогРедактирования.Период;
		ДатаНачала = СтандартныйПериод.ДатаНачала;
		ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеСервер(ДатаОбработки)
	
	МассивТТ = Новый Массив();
	Для Каждого ЭлементСписка Из СтруктурныеЕдиницы Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		МассивТТ.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Если ЗагрузитьТолькоСРасхождениями Тогда
		ТабРасхождения = Отчеты.ОтчетПоРасхождениямДвиженийЛистовУчетаИSQL.ПолучитьТаблицуРасхождений(ДатаОбработки, ДатаОбработки, Ложь, Неопределено);
		ТабРасхождения.Свернуть("ТорговаяТочка");
		Если ТабРасхождения.Количество() > 0 Тогда
			Для Каждого СтрокаТТ Из ТабРасхождения Цикл
				МассивТТ.Добавить(СтрокаТТ.ТорговаяТочка);
			КонецЦикла;	
		Иначе
			МассивТТ.Добавить(Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка,
	               |	СтруктурныеЕдиницы.id_TT,
	               |	СтруктурныеЕдиницы.НомерТочки,
	               |	СтруктурныеЕдиницы.ТипРозничнойТочки
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	СтруктурныеЕдиницы.id_TT > 0
	               |	И СтруктурныеЕдиницы.НомерТочки > 0
	               |	И СтруктурныеЕдиницы.ТипРозничнойТочки <> ЗНАЧЕНИЕ(Перечисление.ТипыРозничныхТочек.ПустаяСсылка)
	               |	И (НЕ СтруктурныеЕдиницы.Ссылка В
	               |					(ВЫБРАТЬ
	               |						ЛистУчета.ТорговаяТочка
	               |					ИЗ
	               |						Документ.ЛистУчета КАК ЛистУчета
	               |					ГДЕ
	               |						НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &ДатаОбработки
	               |						И ЛистУчета.Проведен = ИСТИНА)
	               |			ИЛИ &НЕОтборЗагруженных)
	               |	И (СтруктурныеЕдиницы.Ссылка В (&МассивСсылок)
	               |			ИЛИ &НеОтборТТ)";
				   
	Запрос.УстановитьПараметр("ДатаОбработки", НачалоДня(ДатаОбработки));			   
	Запрос.УстановитьПараметр("НЕОтборЗагруженных", НЕ ЗагрузитьТолькоОтсутствующие);
	Запрос.УстановитьПараметр("НеОтборТТ", МассивТТ.Количество() = 0);
	Запрос.УстановитьПараметр("МассивСсылок", МассивТТ);
	
	ТабТочки = Запрос.Выполнить().Выгрузить();
	
	СтрокиТТ = ТабТочки.НайтиСтроки(Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Избенка));
	Если СтрокиТТ.Количество() > 0 Тогда
		Массивid_TT = Новый Массив();
		МассивНомера = Новый Массив();
		Для Каждого СтрокаТ Из СтрокиТТ Цикл
			Массивid_TT.Добавить(СтрокаТ.id_TT);
			МассивНомера.Добавить(СтрокаТ.НомерТочки);
		КонецЦикла;	
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам(ДатаОбработки, МассивНомера, Массивid_TT);
		//Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекам_БезЧековПродажи(ДатаОбработки, МассивНомера, Массивid_TT);
	КонецЕсли;
	
	СтрокиТТ = ТабТочки.НайтиСтроки(Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Магазин));
	Если СтрокиТТ.Количество() > 0 Тогда
		Массивid_TT = Новый Массив();
		МассивНомера = Новый Массив();
		Для Каждого СтрокаТ Из СтрокиТТ Цикл
			Массивid_TT.Добавить(СтрокаТ.id_TT);
			МассивНомера.Добавить(СтрокаТ.НомерТочки);
		КонецЦикла;	
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл(ДатаОбработки, МассивНомера
																					, Массивid_TT);
																					
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл_БезЧековПродажи(ДатаОбработки, МассивНомера
																					, Массивid_TT);
	КонецЕсли;
	//+++АК BELN 2018.06.05 
	СтрокиТТ = ТабТочки.НайтиСтроки(Новый Структура("ТипРозничнойТочки", Перечисления.ТипыРозничныхТочек.Микромаркет));
	Если СтрокиТТ.Количество() > 0 Тогда
		Массивid_TT = Новый Массив();
		МассивНомера = Новый Массив();
		Для Каждого СтрокаТ Из СтрокиТТ Цикл
			Массивid_TT.Добавить(СтрокаТ.id_TT);
			МассивНомера.Добавить(СтрокаТ.НомерТочки);
		КонецЦикла;	
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл(ДатаОбработки, МассивНомера
																					, Массивid_TT);
																					
		Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета_СКЛ_ПоЧекамВкусвилл_БезЧековПродажи(ДатаОбработки, МассивНомера
																					, Массивid_TT);
	КонецЕсли;
	//---АК BELN 2018.06.05 																			
	
КонецПроцедуры
																				
&НаСервере
Процедура ЗагрузитьДанныеСерверПоСтарому(ДатаОбработки)
	
	//
	МассивТТ = Новый Массив;
	Для Каждого ЭлементСписка Из СтруктурныеЕдиницы Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		МассивТТ.Добавить(ЭлементСписка.Значение.id_TT);
	КонецЦикла;
	
	//
	Обработки.ЗагрузкаДанныхИзAccess.ЗагрузитьДанныеЛистовУчета(ДатаОбработки, МассивТТ);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузкаУжеВыполняется()
	
	Возврат Ложь;
	
	//УжеЗагружаетСотрудник = Константы.ЗагрузкуЛистовПроизводитСотрудник.Получить();
	//ДатаНачалаЗагрузки = Константы.ДатаНачалаЗагрузкиСотрудником.Получить();
	//
	//Если ЗначениеЗаполнено(УжеЗагружаетСотрудник) Тогда
	//	Если ТекущаяДата() - ДатаНачалаЗагрузки >= 1800 Тогда //если больше 0.5 часа, то это видимо глюк какой-то уже
	//		Возврат Ложь;
	//	Иначе	
	//		Сообщение = Новый СообщениеПользователю();
	//		Сообщение.Текст = "Загрузку уже выполняет сотрудник: " + УжеЗагружаетСотрудник + " с " + ДатаНачалаЗагрузки;
	//		Сообщение.Сообщить();
	//		Возврат Истина;
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьКонстантыЗагрузки(Установить = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	//Константы.ЗагрузкуЛистовПроизводитСотрудник.Установить(?(Установить, ПараметрыСеанса.ТекущийПользователь, Справочники.Пользователи.ПустаяСсылка()));
	//Константы.ДатаНачалаЗагрузкиСотрудником.Установить(?(Установить, ТекущаяДата(), '00010101'));
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Если ЗагрузкаУжеВыполняется() Тогда
		Возврат;
	КонецЕсли;
	
	//УстановитьКонстантыЗагрузки();
	
	Если НачалоДня(ТекущаяДата()) <= НачалоДня(ДатаОкончания) Тогда
		ДатаОкончания = НачалоДня(ТекущаяДата()) - 1;
	КонецЕсли;	
	
	Попытка
		ДатаОбработки = ДатаНачала;
		Пока ДатаОбработки <= ДатаОкончания Цикл
			Состояние("Загрузка листов учета за " + Формат(ДатаОбработки, "ДФ=dd.MM.yyyy") + " ...");
			ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Загрузка листов учета");
			APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
			Если НЕ ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
				ИЛИ ДатаВключенияДинамическогоСчитывания > ДатаОбработки Тогда
				ЗагрузитьДанныеСерверПоСтарому(ДатаОбработки);
			Иначе	
				ЗагрузитьДанныеСервер(ДатаОбработки);
			КонецЕсли;
			APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ДатаОбработки);
			ОбработкаПрерыванияПользователя();
			ДатаОбработки = ДатаОбработки + 86400;
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
	//УстановитьКонстантыЗагрузки(Ложь);
	
	Оповестить("ОбновитьЛистыУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата() - 86400;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ТекущаяДата() - 86400;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаВключенияДинамическогоСчитывания = Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить();
	Если НЕ ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
		ИЛИ ДатаВключенияДинамическогоСчитывания > ТекущаяДата() Тогда
		Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры
