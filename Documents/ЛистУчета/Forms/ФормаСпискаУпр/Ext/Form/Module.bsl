
&НаКлиенте
Процедура ЗагрузитьСмену(Команда)
	
	ОткрытьФорму("Документ.ЛистУчета.Форма.ФормаЗагрузкиЛистов",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьЛистыУчета" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкиВЗаполненииПродавцов(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОшибкиВЗаполненииПродавцовВЛистахУчета.Форма",, ЭтаФорма);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКорректировкиСуммДоставка(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОтчетПоКорректировкамСуммДоставка.Форма",, ЭтаФорма);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоОтклонениюГрафиковРаботыПродавцовОтРеальныхВыходов(Команда)
	
	ОткрытьФорму("Отчет.ОтчетОтклонениеГрафиковРаботыПродавцовОтРеальныхВыходов.Форма.ФормаОтчета",, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстаткиСчетаРВВРазрезеТТ(Команда)
	
	ОткрытьФорму("Отчет.ОстаткиСчетаРВВРазрезеТТ.Форма.ФормаОтчета",, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоРасхождениямТоваровМежду1сИSql(Команда)
	
	ОткрытьФорму("Отчет.ОтчетПоРасхождениямДвиженийЛистовУчетаИSQL.Форма.ФормаОтчета",, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура АктыКМ3(Команда)
	
	ОткрытьФорму("Обработка.АктыКМ3.Форма.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьНоменклатуруПоЕЛУ(Команда)
	
	ОткрытьФорму("Документ.ЛистУчета.Форма.ФормаОбнуленияПозицииПоеЛУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистыСЗаполненымиКорректировками(Команда)
	
	ОткрытьФорму("Отчет.ЛистыСЗаполненнымиКорректировками.Форма.ФормаОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетБухгалтераРасчетчика(Команда)
	
	ОткрытьФорму("Отчет.ОтчетБухгалтераРасчетчика.Форма.ФормаОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоПродавцам(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОтчетПоПродавцамВЛистахУчета.Форма",, ЭтаФорма);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоИсправлениям(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОтчетПоИсправлениямЛистовУчета.Форма",, ЭтаФорма);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыИзСейфа(Команда)
	
	ОткрытьФорму("Обработка.ВозвратыИзСейфа.Форма.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистыСНепривязаннымиКассами(Команда)
	
	ОткрытьФорму("Документ.ЛистУчета.Форма.ФормаЛистыСНепривязаннымиКассами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоРасхождениямМеждуОстаткамиЛистовИАстору(Команда)
	
	ОткрытьФорму("Отчет.РасхожденияОстаткаПоЛистуУчетаИПоАстору.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтоматическуюПерезагрузкуСДаты(Команда)
	
	ОткрытьФорму("РегистрСведений.ТорговыеТочкиКПерезагрузкеВЛисты.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольСверкаОборотовВФинансахБухгалтерии(Команда)
	ОткрытьФорму("Отчет.ОтчетКонтрольСверкаОборотовВФинансахБухгалтерии.Форма.ФормаОтчета",, ЭтаФорма);	
КонецПроцедуры
//+++АК GEYV 28.05.2015
&НаКлиенте
Процедура ОтчетКассираОперациониста(Команда)
	ОткрытьФорму("Отчет.ОтчетКассираОперациониста.Форма.ФормаОтчета",, ЭтаФорма);	
КонецПроцедуры
//---АК

&НаКлиенте
Процедура ВыгрузкаДанныхПоДоставкеВБухгалтерию(Команда)
	
	ОткрытьФорму("Обработка.ВыгрузкаДвиженийПоДоставке.Форма.Форма");
	
КонецПроцедуры

Процедура УстановитьТекстЗапросаДляСписка()
	
	Если НЕ ЗначениеЗаполнено(РасчетчикОтбор)
		И НЕ ЗначениеЗаполнено(РазницаПоДеньгам) Тогда
		Список.ТекстЗапроса = "ВЫБРАТЬ
		                      |	ДокументЛистУчета.Ссылка,
		                      |	ДокументЛистУчета.ПометкаУдаления,
		                      |	ДокументЛистУчета.Номер,
		                      |	ДокументЛистУчета.Дата,
		                      |	ДокументЛистУчета.Проведен,
		                      |	ДокументЛистУчета.ТорговаяТочка,
		                      |	ДокументЛистУчета.Обработан,
		                      |	ДокументЛистУчета.ДатаЗакрытияСмены,
		                      |	ВЫБОР
		                      |		КОГДА ДокументЛистУчета.СуммаЭквайрингДоставка > 0
		                      |				ИЛИ ДокументЛистУчета.СуммаНаличныеДоставка > 0
		                      |			ТОГДА ИСТИНА
		                      |		ИНАЧЕ ЛОЖЬ
		                      |	КОНЕЦ КАК ЕстьДоставка,
		                      |	ДокументЛистУчета.Расчетчик,
		                      |	ДокументЛистУчета.СуммаДокумента,
		                      |	ДокументЛистУчета.СуммаИнкассации,
		                      |	ДокументЛистУчета.СуммаЭквайринг,
		                      |	ДокументЛистУчета.КонечныйОстаток,
		                      |	ДокументЛистУчета.Отклонение,
		                      |	ДокументЛистУчета.Купон,
		                      |	ДокументЛистУчета.РазницаПоТоварам,
		                      |	ДокументЛистУчета.Комментарий,
		                      |	ДокументЛистУчета.ЦФО,
		                      |	ДокументЛистУчета.Терминал,
		                      |	ДокументЛистУчета.Организация
		                      |ИЗ
		                      |	Документ.ЛистУчета КАК ДокументЛистУчета";
	КонецЕсли;	
	
//	ВЫБРАТЬ
//	ДокументЛистУчета.Ссылка,
//	ДокументЛистУчета.ПометкаУдаления,
//	ДокументЛистУчета.Номер,
//	ДокументЛистУчета.Дата,
//	ДокументЛистУчета.Проведен,
//	ДокументЛистУчета.ТорговаяТочка,
//	ДокументЛистУчета.Обработан,
//	ДокументЛистУчета.ДатаЗакрытияСмены,
//	ВЫБОР
//		КОГДА ДокументЛистУчета.СуммаЭквайрингДоставка > 0
//				ИЛИ ДокументЛистУчета.СуммаНаличныеДоставка > 0
//			ТОГДА ИСТИНА
//		ИНАЧЕ ЛОЖЬ
//	КОНЕЦ КАК ЕстьДоставка,
//	ДокументЛистУчета.Расчетчик,
//	ДокументЛистУчета.СуммаДокумента,
//	ДокументЛистУчета.СуммаИнкассации,
//	ДокументЛистУчета.СуммаЭквайринг,
//	ДокументЛистУчета.КонечныйОстаток,
//	ДокументЛистУчета.Отклонение,
//	ДокументЛистУчета.Купон,
//	ДокументЛистУчета.РазницаПоТоварам,
//	ДокументЛистУчета.Комментарий,
//	ДокументЛистУчета.ЦФО,
//	ДокументЛистУчета.Терминал,
//	ДокументЛистУчета.Организация
//ИЗ
//	Документ.ЛистУчета КАК ДокументЛистУчета
//ГДЕ
//	(&ЕстьОтборПоРасчетчику = ЛОЖЬ
//			ИЛИ ДокументЛистУчета.Расчетчик = &Расчетчик)
//	И (&ЕстьОтборПоРазнице = ЛОЖЬ
//			ИЛИ ДокументЛистУчета.Отклонение * ВЫБОР
//				КОГДА ДокументЛистУчета.Отклонение < 0
//					ТОГДА -1
//				ИНАЧЕ 1
//			КОНЕЦ >= &Разница)
	
КонецПроцедуры	

Процедура УстановитьПараметрыТекстаЗапросаСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("Расчетчик", РасчетчикОтбор);
	Список.Параметры.УстановитьЗначениеПараметра("ЕстьОтборПоРасчетчику", ЗначениеЗаполнено(РасчетчикОтбор));
	Список.Параметры.УстановитьЗначениеПараметра("Разница", РазницаПоДеньгам);
	Список.Параметры.УстановитьЗначениеПараметра("ЕстьОтборПоРазнице", ЗначениеЗаполнено(РазницаПоДеньгам));
	Список.Параметры.УстановитьЗначениеПараметра("РазницаТовары", РазницаПоТоварам);
	Список.Параметры.УстановитьЗначениеПараметра("ЕстьОтборПоРазницеТовары", ЗначениеЗаполнено(РазницаПоТоварам));
	//Список.Параметры.УстановитьЗначениеПараметра("ТекДата", ТекущаяДата());
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПараметрыТекстаЗапросаСписка();
	ПравоМенятьРасчетчика = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.МожетМенятьРасчетчикаВЛУ, Ложь);
	Элементы.СписокСменитьРасчетчикаВВыеделенныхДокументах.Доступность = ПравоМенятьРасчетчика;
	Элементы.СписокНастройкаПривязкиРасчетчиков.Доступность = ПравоМенятьРасчетчика;
	
КонецПроцедуры


&НаКлиенте
Процедура РасчетчикОтборПриИзменении(Элемент)
	
	УстановитьПараметрыТекстаЗапросаСписка();
	
КонецПроцедуры


&НаКлиенте
Процедура РазницаПоДеньгамПриИзменении(Элемент)
	
	УстановитьПараметрыТекстаЗапросаСписка();
	
КонецПроцедуры


&НаКлиенте
Процедура РасхождениеZотчетовИСуммПробитыхНаКассеВкусвилл(Команда)
	
	ОткрытьФорму("Отчет.РасхождениеZотчетовИСуммПробитыхНаКассеВкусвилл.Форма.ФормаОтчета");
	
КонецПроцедуры


&НаКлиенте
Процедура НастройкаПривязкиРасчетчиков(Команда)
	
	ОткрытьФорму("Документ.ЛистУчета.Форма.ФормаПривязкиРасчетчиков");
	
КонецПроцедуры


&НаКлиенте
Процедура РазницаПоТоварам1ПриИзменении(Элемент)
	
	УстановитьПараметрыТекстаЗапросаСписка();
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчетЭквайрингПоЛистамУчетаИПоступлениям(Команда)
	
	ОткрытьФорму("Отчет.СравнениеЭквайрингаПоЛУИПоступлениям.Форма.ФормаОтчета");
	
КонецПроцедуры

Процедура УстановитьРасчетчика(МассивСсылки, РасчетчикУстановить)
	
	Для Каждого ДокСсылка Из МассивСсылки Цикл
		ЛистОбъект = ДокСсылка.Получитьобъект();
		ЛистОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяЗаписьТолькоПродавцов", Истина);
		ЛистОбъект.Расчетчик = РасчетчикУстановить;
		ЛистОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СменитьРасчетчикаВВыделенныхДокументах(Команда)
	
	РасчетчикУстановить = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Если ВвестиЗначение(РасчетчикУстановить, "Введите расчетчика", Тип("СправочникСсылка.Пользователи")) Тогда
		МассивСсылок = Новый Массив();
		Для Каждого СтрокаВыделенная Из Элементы.Список.ВыделенныеСтроки Цикл
			МассивСсылок.Добавить(СтрокаВыделенная);
		КонецЦикла;
		УстановитьРасчетчика(МассивСсылок, РасчетчикУстановить);
		Элементы.Список.Обновить();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьФайлВыпискиСбербанка(Команда)
	
	ОткрытьФорму("Документ.ЛистУчета.Форма.ФормаПерепривязкиТерминалов");
	
КонецПроцедуры


&НаКлиенте
Процедура Сверка50СчетаСЛистамиУчета(Команда)
	
	ОткрытьФорму("Отчет.Сверка50СчетСЛистамиУчета..Форма.ФормаОтчета");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.05.16 ИП-00017910 
&НаКлиенте
Процедура ПроверкаЛУОРПНоваяСхема(Команда)
	
	ОткрытьФорму("Обработка.СверкаВыгрузкиЛУ.Форма.Форма");
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.05.16 ИП-00017910 
&НаКлиенте
Процедура ОтчетПоПроводкамЛУ_ОРП(Команда)
	
	ОткрытьФорму("Отчет.ПроверкаВыгрузкиЛУвОРП.Форма.ФормаОтчета");
	
КонецПроцедуры


