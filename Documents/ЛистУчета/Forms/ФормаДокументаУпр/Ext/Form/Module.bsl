
&НаСервере
Процедура ПересчитатьСуммуПродажТоваров()
	
	//СуммаРасходаПоТоварам = 0;
	////СуммаНачОстаток = 0;
	////СуммаПоступление = 0;
	////СуммаДегустация = 0;
	////СуммаСписание = 0;
	////СуммаСписаниеПоКачеству = 0;
	////СуммаБой = 0;
	////СуммаАкция = 0;
	////СуммаРазница = 0;
	////СуммаКонОстаток = 0;
	//Для Каждого СтрокаДинамически Из ТоварыДинамически Цикл
	//	СуммаРасходаПоТоварам = СуммаРасходаПоТоварам + СтрокаДинамически.Сумма;
	////	СуммаНачОстаток = СуммаНачОстаток + СтрокаДинамически.Цена * СтрокаДинамически.НачальныйОстаток;
	////	СуммаПоступление = СуммаПоступление + СтрокаДинамически.Цена * СтрокаДинамически.Поступило;
	////	СуммаДегустация = СуммаДегустация + СтрокаДинамически.Цена * СтрокаДинамически.Дегустация;
	////	СуммаСписание = СуммаСписание + СтрокаДинамически.Цена * СтрокаДинамически.Списание;
	////	СуммаСписаниеПоКачеству = СуммаСписаниеПоКачеству + СтрокаДинамически.Цена * СтрокаДинамически.СписаниеПоКачеству;
	////	СуммаБой = СуммаБой + СтрокаДинамически.Цена * СтрокаДинамически.Бой;
	////	СуммаАкция = СуммаАкция + СтрокаДинамически.Цена * СтрокаДинамически.Акция;
	////	СуммаРазница = СуммаРазница + СтрокаДинамически.Цена * СтрокаДинамически.Разница;
	////	СуммаКонОстаток = СуммаКонОстаток + СтрокаДинамически.Цена * СтрокаДинамически.КонечныйОстаток;
	//КонецЦикла;	
	
	//
	//Объект.РазницаПоТоварам = СуммаРасходаПоТоварам - Объект.Отклонение - Объект.СуммаДокумента - Объект.ВозвратПокупателю;// - Объект.СкидкаКопеек;// + Объект.СторноОшибочно;
	
	Если ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
		Объект.РазницаПоТоварам = Документы.ЛистУчета.ПолучитьОтклонениеСуммыТоваров(Объект.Дата, Объект.ТорговаяТочка.СкладТорговогоЗала, ТоварыДинамически.Выгрузить()
								, Новый Структура("НачальныйОстаток, СуммаИнкассации, ОплатаБаллами, КонечныйОстаток, СуммаЭквайринг, СкидкаКопеек", Объект.НачальныйОстаток, Объект.СуммаИнкассации, Объект.ОплатаБаллами, Объект.КонечныйОстаток, Объект.СуммаЭквайринг, Объект.СкидкаКопеек));
	Иначе
		Объект.РазницаПоТоварам = 0;						
	КонецЕсли;							
	
	//+++ZEZA
	
	//Объект.РазницаПоТоварам = СуммаНачОстаток 
	//						+ СуммаПоступление 
	//						+ НачальныйОстаток 
	//						- СуммаБой 
	//						- СуммаДегустация 
	//						- СуммаСписание 
	//						- СуммаСписаниеПоКачеству
	//						- СуммаАкция 
	//						+ СуммаРазница 
	//						- Объект.СуммаИнкассации 
	//						- СуммаКонОстаток 
	//						- КонечныйОстаток 
	//						- Объект.ОплатаБаллами;
	//---ZEZA
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРасчетныеПараметры()
	
	СуммаZОтчета = Объект.СуммаДокумента - Объект.ОплатаБаллами;
	ПересчитатьСуммуПродажТоваров();
	СуммаВозвратовИзСейфа = 0;
	Для Каждого СтрокаТаб Из Объект.ВозвратыИзСейфа Цикл
		СуммаВозвратовИзСейфа = СуммаВозвратовИзСейфа + ?(СтрокаТаб.ПолученаСумма <> 0, СтрокаТаб.ПолученаСумма, СтрокаТаб.Сумма);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРазницу()
	
	Если ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
		Объект.Отклонение = -(Объект.НачальныйОстаток 
							+ Объект.СуммаДокумента 
							+ Объект.КорректировкаZ 
							- Объект.ОплатаБаллами 
							- Объект.СуммаЭквайринг 
							//- Объект.КорректировкаБезнал 
							- Объект.КорректировкаБезнал 
							//- Объект.КорректировкаБезналДоставка 
							//- Объект.КорректировкаНалДоставка 
							- Объект.СуммаИнкассации
							- Объект.КонечныйОстаток - Объект.ВзаимозачетОтклоненийДС.Итог("Сумма"));
	Иначе
		СуммаВозвратовИзСейфаЛок = 0;
		Для Каждого СтрокаТаб Из Объект.ВозвратыИзСейфа Цикл
			СуммаВозвратовИзСейфаЛок = СуммаВозвратовИзСейфаЛок + ?(СтрокаТаб.ПолученаСумма <> 0, СтрокаТаб.ПолученаСумма, СтрокаТаб.Сумма);
		КонецЦикла;					
		Объект.Отклонение = -(Объект.НачальныйОстаток 
							+ Объект.СуммаДокумента 
							- Объект.ОплатаБаллами 
							- Объект.СуммаЭквайринг 
							- Объект.КорректировкаБезнал 
							- Объект.СуммаИнкассации
							- Объект.КонечныйОстаток
							- Объект.Доставка.Итог("СуммаНалИсходная")
							- СуммаВозвратовИзСейфаЛок - Объект.ВзаимозачетОтклоненийДС.Итог("Сумма"));
	КонецЕсли;						
	
	//+++ZEZA
	//Объект.Отклонение =	-(НачальныйОстаток 
	//					+ Объект.СуммаДокумента 
	//					+ Объект.КорректировкаZ 
	//					- Объект.ОплатаБаллами 
	//					- Объект.СуммаЭквайринг 
	//					+ Объект.КорректировкаБезнал 
	//					- Объект.КорректировкаБезналДоставка 
	//					- Объект.КорректировкаНалДоставка 
	//					- Объект.СуммаИнкассации
	//					- КонечныйОстаток); 
	//---ZEZA
	
КонецПроцедуры	

&НаСервере
Процедура ПерезаполнитьТаблицуТоваров()
	
	//Если НЕ ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
	//	ИЛИ ДатаВключенияДинамическогоСчитывания > Объект.Дата Тогда
	//	Возврат;
	//КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПоЧекам = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(Объект.Дата, Объект.Дата, Объект.ТорговаяТочка);
	
	//+++АК SaMi 2018.04.24  ИП-00018340.01 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДобавитьПроизводствоВТаблицуТоваров(ДанныеПоЧекам); 
	
	ТоварыПроизводство.Загрузить(ДокументОбъект.ДополнительныеСвойства.ТоварыПроизводство);
	//---АК SaMi  2018.04.24 
		
	Если Объект.Дата < '20140401' Тогда
		Для Каждого СтрокаТаб Из ДанныеПоЧекам Цикл
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + СтрокаТаб.ПолученоСДругихТТ - СтрокаТаб.ОтправленоНаДругиеТТ;
			СтрокаТаб.ПолученоСДругихТТ = 0;
			СтрокаТаб.ОтправленоНаДругиеТТ = 0;
		КонецЦикла;	
	КонецЕсли;	
	
	////ОстаткиПоСкл = ВнешниеДанные.ПолучитьТаблицуОстатков(Объект.Дата, Объект.Дата, Объект.ТорговаяТочка);
	////здесь пока что одинаково, но будет чтение остатков немного по-разному
	//Если Объект.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
		ЗапросОстатков = Новый Запрос();
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		                       |	ТоварыНаСкладахОстатки.Номенклатура,
		                       |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток * ЕСТЬNULL(ТоварыНаСкладахОстатки.ЕдиницаИзмерения.Коэффициент, 1)) КАК КоличествоОстаток
		                       |ИЗ
		                       |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	ТоварыНаСкладахОстатки.Номенклатура";
		ЗапросОстатков.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(Объект.Дата) - 1, ВидГраницы.Включая));
		ЗапросОстатков.УстановитьПараметр("Склад", Объект.ТорговаяТочка.СкладТорговогоЗала);
		Остатки = ЗапросОстатков.Выполнить().Выгрузить();
	//Иначе
	//	ЗапросОстатков = Новый Запрос();
	//	ЗапросОстатков.Текст = "ВЫБРАТЬ
	//						   |	ТоварыНаСкладахОстатки.Номенклатура,
	//						   |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток * ЕСТЬNULL(ТоварыНаСкладахОстатки.ЕдиницаИзмерения.Коэффициент, 1)) КАК КоличествоОстаток
	//						   |ИЗ
	//						   |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	//						   |
	//						   |СГРУППИРОВАТЬ ПО
	//						   |	ТоварыНаСкладахОстатки.Номенклатура";
	//	ЗапросОстатков.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(Объект.Дата) - 1, ВидГраницы.Включая));
	//	ЗапросОстатков.УстановитьПараметр("Склад", Объект.ТорговаяТочка.СкладТорговогоЗала);
	//	Остатки = ЗапросОстатков.Выполнить().Выгрузить();
	//КонецЕсли;						   
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT
	                  |	dbo_LIST_UCHETA.id_tov,
	                  |	dbo_LIST_UCHETA.kon_ost as КонОстатокПоЕЛУ
	                  |FROM
	                  |	SMS_Izbenka.dbo.LIST_UCHETA as dbo_LIST_UCHETA (nolock)
	                  |WHERE
					  |dbo_LIST_UCHETA.Дата >= '" + Формат(НачалоДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_LIST_UCHETA.Дата <= '" + Формат(КонецДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
	                  |	and dbo_LIST_UCHETA.id_tt = " + Формат(Объект.ТорговаяТочка.id_TT, "ЧГ=0");
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТабПоЕЛУ = Новый ТаблицаЗначений();
	ТабПоЕЛУ.Колонки.Добавить("id_tov", Новый ОписаниеТипов("Число"));
	ТабПоЕЛУ.Колонки.Добавить("КонОстатокПоЕЛУ", Новый ОписаниеТипов("Число"));
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабПоЕЛУ.Добавить();
			СтрокаДоб.id_tov = Rs.Fields("id_tov").Value;
			СтрокаДоб.КонОстатокПоЕЛУ = Rs.Fields("КонОстатокПоЕЛУ").Value;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ДанныеПоЧекам);
	Запрос.УстановитьПараметр("ТабОстатки", Остатки);
	Запрос.УстановитьПараметр("ТабПоЕЛУ", ТабПоЕЛУ);
	//Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(НачалоДня(Объект.Дата) - 1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Склад", Объект.ТорговаяТочка.СкладТорговогоЗала);
	Запрос.УстановитьПараметр("ТорговаяТочка", Объект.ТорговаяТочка);
	Запрос.УстановитьПараметр("ДатаЦен", НачалоДня(Объект.Дата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Сумма КАК Сумма,
	               |	Таб.Продано КАК Продано,
	               |	Таб.ПродажиККМ КАК ПродажиККМ,
	               |	Таб.Дегустация КАК Дегустация,
	               |	Таб.Списание КАК Списание,
	               |	Таб.СписаниеПоКачеству КАК СписаниеПоКачеству,
	               |	Таб.Бой КАК Бой,
	               |	Таб.Акция КАК Акция,
	               |	Таб.Поступило КАК Поступило,
	               |	Таб.ПоступилоБезВозврата КАК ПоступилоБезВозврата,
	               |	Таб.Разница,
				   |	Таб.ОтправленоНаДругиеТТ,
	               |	Таб.ПолученоСДругихТТ,
	               |	Таб.ВозвратПокупателя,
				   |	Таб.Комплектация КАК Комплектация,
				   |	Таб.Производство КАК Производство,				   
	               |	Таб.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_ДанныеЧеков
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходныйОрдерСкладТовары.Номенклатура,
	               |	СУММА(РасходныйОрдерСкладТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ОтправленоСкладом
	               |ИЗ
	               |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |ГДЕ
	               |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения = &ДатаЦен
	               |	И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |	И РасходныйОрдерСкладТовары.Ссылка.Получатель = &ТорговаяТочка
	               |	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерСкладТовары.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Сумма, 0) КАК Сумма,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Продано, 0) КАК Продано,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.ПродажиККМ, 0) КАК ПродажиККМ,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Дегустация, 0) КАК Дегустация,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Списание, 0) КАК Списание,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.СписаниеПоКачеству, 0) КАК СписаниеПоКачеству,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Бой, 0) КАК Бой,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Акция, 0) КАК Акция,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Поступило, 0) КАК Поступило,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.ПоступилоБезВозврата, 0) КАК ПоступилоБезВозврата,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Разница, 0) КАК Разница,
				   |	ЕСТЬNULL(ВТ_ДанныеЧеков.ВозвратПокупателя, 0) КАК ВозвратПокупателя,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.ПолученоСДругихТТ, 0) КАК ПолученоСДругихТТ,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.ОтправленоНаДругиеТТ, 0) КАК ОтправленоНаДругиеТТ,
	               |	ЕСТЬNULL(ВТ_ДанныеЧеков.Номенклатура, ВТ_ОтправленоСкладом.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_ОтправленоСкладом.Количество, 0) КАК ОтправленоСкладом,
				   |	ЕСТЬNULL(ВТ_ДанныеЧеков.Комплектация, 0) КАК Комплектация,
				   |	ЕСТЬNULL(ВТ_ДанныеЧеков.Производство, 0) КАК Производство
	               |ПОМЕСТИТЬ ВТ_ДанныеЧековСОтправленными
	               |ИЗ
	               |	ВТ_ДанныеЧеков КАК ВТ_ДанныеЧеков
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОтправленоСкладом КАК ВТ_ОтправленоСкладом
	               |		ПО ВТ_ДанныеЧеков.Номенклатура = ВТ_ОтправленоСкладом.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб.Номенклатура,
	               |	Таб.КоличествоОстаток
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	&ТабОстатки КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб.id_tov,
	               |	Таб.КонОстатокПоЕЛУ
	               |ПОМЕСТИТЬ ВТ_КонОстЕЛУВрем
	               |ИЗ
	               |	&ТабПоЕЛУ КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	ВТ_КонОстЕЛУВрем.КонОстатокПоЕЛУ
	               |ПОМЕСТИТЬ ВТ_КонОстЕЛУ
	               |ИЗ
	               |	ВТ_КонОстЕЛУВрем КАК ВТ_КонОстЕЛУВрем
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ВТ_КонОстЕЛУВрем.id_tov = Номенклатура.id_tov
	               |ГДЕ
	               |	Номенклатура.СлужебныйТовар = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВЗ_Запрос.Номенклатура, ВТ_КонОстЕЛУ.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	ЕСТЬNULL(ВЗ_Запрос.НачальныйОстаток, 0) КАК НачальныйОстаток,
	               |	ЕСТЬNULL(ВЗ_Запрос.Продано, 0) КАК Продано,
	               |	ЕСТЬNULL(ВЗ_Запрос.ПродажиККМ, 0) КАК ПродажиККМ,
	               |	ЕСТЬNULL(ВЗ_Запрос.ПродажиККМ, 0) - ЕСТЬNULL(ВЗ_Запрос.Продано, 0) КАК РазницаККМ,
	               |	ЕСТЬNULL(ВЗ_Запрос.Сумма, 0) КАК Сумма,
	               |	ЕСТЬNULL(ВЗ_Запрос.Дегустация, 0) КАК Дегустация,
	               |	ЕСТЬNULL(ВЗ_Запрос.Списание, 0) КАК Списание,
	               |	ЕСТЬNULL(ВЗ_Запрос.СписаниеПоКачеству, 0) КАК СписаниеПоКачеству,
	               |	ЕСТЬNULL(ВЗ_Запрос.Бой, 0) КАК Бой,
	               |	ЕСТЬNULL(ВЗ_Запрос.Акция, 0) КАК Акция,
	               |	ЕСТЬNULL(ВЗ_Запрос.Поступило, 0) КАК Поступило,
				   |	ЕСТЬNULL(ВЗ_Запрос.Комплектация, 0) КАК Комплектация,
				   |	ЕСТЬNULL(ВЗ_Запрос.Производство, 0) КАК Производство,				   
				   |	ЕСТЬNULL(ВЗ_Запрос.ОтправленоСкладом, 0) КАК ОтправленоСкладом,
	               |	ЕСТЬNULL(ВЗ_Запрос.ПоступилоБезВозврата, 0) КАК ПоступилоБезВозврата,
	               |	ЕСТЬNULL(ВЗ_Запрос.Разница, 0) КАК Разница,
				   |	ЕСТЬNULL(ВЗ_Запрос.ВозвратПокупателя, 0) КАК ВозвратПокупателя,
	               |	ЕСТЬNULL(ВЗ_Запрос.ПолученоСДругихТТ, 0) КАК ПолученоСДругихТТ,
	               |	ЕСТЬNULL(ВЗ_Запрос.ОтправленоНаДругиеТТ, 0) КАК ОтправленоНаДругиеТТ,
	               |	ЕСТЬNULL(ВЗ_Запрос.КонечныйОстаток, 0) КАК КонечныйОстаток,
	               |	ЕСТЬNULL(ВТ_КонОстЕЛУ.КонОстатокПоЕЛУ, 0) КАК КонечныйОстатокЕЛУ,
	               |	ЕСТЬNULL(НоменклатураСпр.Наименование, ВТ_КонОстЕЛУ.Номенклатура.Наименование) КАК Наименование
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Номенклатура, ВЗ_Остатки.Номенклатура) КАК Номенклатура,
	               |		ЕСТЬNULL(ВЗ_Остатки.КоличествоОстаток, 0) КАК НачальныйОстаток,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Продано, 0) КАК Продано,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.ПродажиККМ, 0) КАК ПродажиККМ,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Сумма, 0) КАК Сумма,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Дегустация, 0) КАК Дегустация,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Списание, 0) КАК Списание,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.СписаниеПоКачеству, 0) КАК СписаниеПоКачеству,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Бой, 0) КАК Бой,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Акция, 0) КАК Акция,
				   |		ЕСТЬNULL(ВТ_ДанныеЧеков.ОтправленоСкладом, 0) КАК ОтправленоСкладом,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Поступило, 0) КАК Поступило,
				   |		ЕСТЬNULL(ВТ_ДанныеЧеков.Комплектация, 0) КАК Комплектация,
				   |		ЕСТЬNULL(ВТ_ДанныеЧеков.Производство, 0) КАК Производство,				   
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.ПоступилоБезВозврата, 0) КАК ПоступилоБезВозврата,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Разница, 0) КАК Разница,
				   |		ЕСТЬNULL(ВТ_ДанныеЧеков.ВозвратПокупателя, 0) КАК ВозвратПокупателя,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.ПолученоСДругихТТ, 0) КАК ПолученоСДругихТТ,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.ОтправленоНаДругиеТТ, 0) КАК ОтправленоНаДругиеТТ,
	               |		ЕСТЬNULL(ВЗ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ДанныеЧеков.Поступило, 0) + ЕСТЬNULL(ВТ_ДанныеЧеков.Разница, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Продано, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Дегустация, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Списание, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.СписаниеПоКачеству, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Бой, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Акция, 0) + ЕСТЬNULL(ВТ_ДанныеЧеков.ПолученоСДругихТТ, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.ОтправленоНаДругиеТТ, 0) + ЕСТЬNULL(ВТ_ДанныеЧеков.Комплектация, 0)  + ЕСТЬNULL(ВТ_ДанныеЧеков.Производство, 0) КАК КонечныйОстаток
	               |	ИЗ
	               |		ВТ_ДанныеЧековСОтправленными КАК ВТ_ДанныеЧеков
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВЗ_Остатки
	               |			ПО ВТ_ДанныеЧеков.Номенклатура = ВЗ_Остатки.Номенклатура) КАК ВЗ_Запрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	               |		ПО ВЗ_Запрос.Номенклатура = НоменклатураСпр.Ссылка
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_КонОстЕЛУ КАК ВТ_КонОстЕЛУ
	               |		ПО ВЗ_Запрос.Номенклатура = ВТ_КонОстЕЛУ.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ДатаЦен,
	               |				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ВЗ_Запрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НоменклатураСпр.СлужебныйТовар = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ДанныеЧеков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Остатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КонОстЕЛУВрем
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КонОстЕЛУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ОтправленоСкладом
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ДанныеЧековСОтправленными";
				   
	ТабТовары = Запрос.Выполнить().Выгрузить();
	ТабТовары.Колонки.Добавить("КИнвентаризации");
	
	Для Каждого СтрокаКИнвентаризации Из Объект.ПозицииКИнвентаризации Цикл
		СтрокаТовар = ТабТовары.Найти(СтрокаКИнвентаризации.Номенклатура, "Номенклатура");
		Если СтрокаТовар <> Неопределено Тогда
			СтрокаТовар.КИнвентаризации = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	ТабТовары.Колонки.Добавить("РазницаОтработана");
	
	Для Каждого СтрокаОтработанная Из Объект.ОтработанныеРазницыПоТоварам Цикл
		СтрокаТовар = ТабТовары.Найти(СтрокаОтработанная.Номенклатура, "Номенклатура");
		Если СтрокаТовар <> Неопределено Тогда
			СтрокаТовар.РазницаОтработана = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	//+++АК sils 14.12.2018 ИП-00020532
	ТабУслуги = ТабТовары.СкопироватьКолонки();
	ТекКол = ТабТовары.Количество();
	Пока ТекКол <> 0 Цикл
		стр = ТабТовары[ТекКол - 1];
		Если стр.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.РеализуемаяУслуга Тогда
			ЗаполнитьЗначенияСвойств(ТабУслуги.Добавить(), стр);
			ТабТовары.Удалить(стр);
		КонецЕсли;
		ТекКол = ТекКол - 1;
	КонецЦикла;
	УслугиДинамически.Загрузить(ТабУслуги);
	//---АК
	
	ТоварыДинамически.Загрузить(ТабТовары);
	
КонецПроцедуры	

&НаСервере
Процедура ПерезаполнитьТаблицуПеремещенийМеждуТТ()
	
	ТоварыПередачиМеждуТТ.Очистить();
	Если Объект.Дата < '20140401' Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаПеремещений = ВнешниеДанные.ПолучитьТаблицуПеремещенийМеждуТТПолная(Объект.Дата, Объект.Дата, Объект.ТорговаяТочка);
	
	Для Каждого СтрокаПеремещение Из ТаблицаПеремещений Цикл
		СтрокаДоб = ТоварыПередачиМеждуТТ.Добавить();
		СтрокаДоб.ТорговаяТочка = СтрокаПеремещение.ТТКорреспондент;
		СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
		СтрокаДоб.КоличествоПолучено = СтрокаПеремещение.ПолученоСДругихТТ;
		СтрокаДоб.КоличествоПередано = СтрокаПеремещение.ОтправленоНаДругиеТТ;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПеречитатьТаблицуНепривязанныхКасс()
	
	НепривязанныеКассы.Очистить();
	КолвоНеПривязанныхКасс = 0;
	
	Если Объект.НеПривязанныеКассыПеренесены = Ложь Тогда
		//Если ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
		//	
		//	
		//	
		//	Запрос = Новый Запрос();
		//	Запрос.Текст = "ВЫБРАТЬ
		//				   |	ОсновныеСредства.Ссылка,
		//				   |	ОсновныеСредства.ЗаводскойНомер,
		//				   |	ВЫБОР
		//					|	КОГДА ОсновныеСредства.Наименование ПОДОБНО &ККМ
		//					|		ТОГДА ВЫБОР
		//					|				КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
		//					|						И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
		//					|					ТОГДА ЛОЖЬ
		//					|				ИНАЧЕ ИСТИНА
		//					|			КОНЕЦ
		//					|	ИНАЧЕ ЛОЖЬ
		//					|КОНЕЦ КАК ЭтоККМ,
		//					|ВЫБОР
		//					|	КОГДА ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
		//					|		ТОГДА ИСТИНА
		//					|	ИНАЧЕ ВЫБОР
		//					|			КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
		//					|					И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
		//					|				ТОГДА ИСТИНА
		//					|			ИНАЧЕ ЛОЖЬ
		//					|		КОНЕЦ
		//					|КОНЕЦ КАК ЭтоЧПМ
		//				   |ИЗ
		//				   |	Справочник.ОсновныеСредства КАК ОсновныеСредства
		//				   |ГДЕ
		//				   |	(ОсновныеСредства.Наименование ПОДОБНО &ККМ
		//				   |			ИЛИ ОсновныеСредства.Наименование ПОДОБНО &ЧПМ)";
		//				   
		//	Запрос.УстановитьПараметр("ККМ", "%ККМ%");
		//	Запрос.УстановитьПараметр("ЧПМ", "%ЧПМ%");
		//	Запрос.УстановитьПараметр("Дата", Объект.Дата);
		//	
		//	Результаты = Запрос.ВыполнитьПакет();
		//	ТабКешККМ = Результаты[0].Выгрузить();
		//	
		//	ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
		//	
		//	ADOСоединение = Новый COMОбъект("ADODB.Connection");
		//	ADOСоединение.ConnectionTimeOut = 0;
		//	ADOСоединение.CommandTimeOut    = 0;
		//	
		//	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
		//	
		//	СтрЗапрос = "SELECT DISTINCT
		//				   |	dbo_Shifts.CashID
		//				   |FROM
		//				   |SMS_Izbenka.dbo.Shifts as dbo_Shifts (nolock)
		//				   |		INNER JOIN SMS_Izbenka.dbo.Checks as dbo_Checks (nolock)
		//				   |		ON dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
		//				   |WHERE
		//				   |	DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime) >= '" + Формат(НачалоДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
		//				   | 	and DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime) <= '" + Формат(КонецДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
		//				   |	and dbo_Checks.OperationType > 0
		//				   |	and dbo_Checks.BaseSum - dbo_Checks.SummBonus > 0
		//				   | 	and dbo_Checks.ShopNo = " + Формат(Объект.ТорговаяТочка.НомерТочки, "ЧН=; ЧГ=0");
		//	
		//	ADOСоединение.ConnectionString  = СтрСоедиение;
		//	ADOСоединение.Open();
		//	
		//	rs = ADOСоединение.Execute(СтрЗапрос);
		//	
		//	ТаблицаСДаннымиПоКассам = Новый ТаблицаЗначений();
		//	ТаблицаСДаннымиПоКассам.Колонки.Добавить("CashID", Новый ОписаниеТипов("Число"));
		//	ТаблицаСДаннымиПоКассам.Колонки.Добавить("Касса", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		//	
		//	Попытка
		//		rs.MoveFirst();
		//		
		//		Пока НЕ rs.EOF() Цикл
		//			СтрокаДоб = ТаблицаСДаннымиПоКассам.Добавить();
		//			СтрокаДоб.CashID = Rs.Fields("CashID").Value;
		//			Если Объект.Организация = ОргСП Тогда
		//				СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаДоб.CashID, "ЧРГ=; ЧГ=0"), Истина));
		//			Иначе
		//				СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаДоб.CashID, "ЧРГ=; ЧГ=0"), Истина));
		//			КонецЕсли;
		//			Если СтрокиККМ.Количество() > 0 Тогда
		//				СтрокаДоб.Касса = СтрокиККМ[0].Ссылка;
		//			КонецЕсли;
		//			rs.MoveNext();
		//		КонецЦикла;
		//	Исключение
		//	КонецПопытки;
		//	ADOСоединение = Неопределено;
		//	
		//	КолвоСтрок = ТаблицаСДаннымиПоКассам.Количество();
		//	Для н = 1 По КолвоСтрок Цикл
		//		Если ЗначениеЗаполнено(ТаблицаСДаннымиПоКассам[КолвоСтрок - н].Касса) Тогда
		//			СтрокиТаб = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", ТаблицаСДаннымиПоКассам[КолвоСтрок - н].Касса));
		//			Если СтрокиТаб.Количество() > 0 Тогда
		//				ТаблицаСДаннымиПоКассам.Удалить(КолвоСтрок - н);
		//			КонецЕсли;
		//		КонецЕсли;	
		//	КонецЦикла;
		//	
		//	Для Каждого СтрокаТаб Из ТаблицаСДаннымиПоКассам Цикл
		//		СтрокаДоб = НепривязанныеКассы.Добавить();
		//		СтрокаДоб.Касса = СтрокаТаб.CashID;
		//	КонецЦикла;
		//	
		//Иначе
		//	Запрос = Новый Запрос();
		//	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
		//	Запрос.Текст = "ВЫБРАТЬ
		//				   |	Терминалы.ID_SQL,
		//				   |	Терминалы.Ссылка,
		//				   |	СоответствиеОсновныхСредствТерминаламСрезПоследних.ОсновноеСредство
		//				   |ИЗ
		//				   |	Справочник.Терминалы КАК Терминалы
		//				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОсновныхСредствТерминалам.СрезПоследних(&Дата, ) КАК СоответствиеОсновныхСредствТерминаламСрезПоследних
		//				   |		ПО Терминалы.Ссылка = СоответствиеОсновныхСредствТерминаламСрезПоследних.Терминал";
		//				   
		//	Результаты = Запрос.ВыполнитьПакет();
		//	ТабКешККМ = Результаты[0].Выгрузить();
		//	
		//	ADOСоединение = Новый COMОбъект("ADODB.Connection");
		//	ADOСоединение.ConnectionTimeOut = 0;
		//	ADOСоединение.CommandTimeOut    = 0;
		//	
		//	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
		//	
		//	СтрЗапрос = "SELECT DISTINCT
		//			   |dbo_Cash.Name as Name
		//			   |FROM
		//			   |	SMS_Union.dbo.Checks as dbo_Checks (nolock)
		//			   |		INNER JOIN SMS_Union.dbo.Cash as dbo_Cash (nolock)
		//			   |		ON dbo_Checks.CashUID = dbo_Cash.CashUID
		//			   |	WHERE dbo_Checks.CloseDate >= '" + Формат(НачалоДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
		//			   | 	and dbo_Checks.ShopNo = " + Формат(Объект.ТорговаяТочка.НомерТочки, "ЧН=; ЧГ=0");
		//				
		//	ADOСоединение.ConnectionString  = СтрСоедиение;
		//	ADOСоединение.Open();
		//	
		//	rs = ADOСоединение.Execute(СтрЗапрос);
		//	
		//	ТабКассыЗадействованные = Новый ТаблицаЗначений();
		//	ТабКассыЗадействованные.Колонки.Добавить("Терминал");
		//	ТабКассыЗадействованные.Колонки.Добавить("ОсновноеСредство");
		//	ТабКассыЗадействованные.Колонки.Добавить("Имя");
		//	Если НЕ rs.EOF() Тогда
		//		rs.MoveFirst();
		//		
		//		Пока НЕ rs.EOF() Цикл
		//			СтрокаККМ = ТабКешККМ.Найти(Rs.Fields("Name").Value, "ID_SQL");
		//			СтрокаДоб = ТабКассыЗадействованные.Добавить();
		//			Если СтрокаККМ <> Неопределено Тогда
		//				СтрокаДоб.Терминал = СтрокаККМ.Ссылка;
		//				СтрокаДоб.ОсновноеСредство = СтрокаККМ.ОсновноеСредство;
		//			КонецЕсли;
		//			СтрокаДоб.Имя = Rs.Fields("Name").Value;
		//			rs.MoveNext();
		//		КонецЦикла;
		//	КонецЕсли;
		//	ADOСоединение = Неопределено;
		//	
		//	КолвоСтрок = ТабКассыЗадействованные.Количество();
		//	Для н = 1 По КолвоСтрок Цикл
		//		Если ЗначениеЗаполнено(ТабКассыЗадействованные[КолвоСтрок - н].ОсновноеСредство) Тогда
		//			СтрокиТаб = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", ТабКассыЗадействованные[КолвоСтрок - н].ОсновноеСредство));
		//			Если СтрокиТаб.Количество() > 0 Тогда
		//				ТабКассыЗадействованные.Удалить(КолвоСтрок - н);
		//			КонецЕсли;
		//		КонецЕсли;	
		//	КонецЦикла;
		//	
		//	Для Каждого СтрокаТаб Из ТабКассыЗадействованные Цикл
		//		СтрокаДоб = НепривязанныеКассы.Добавить();
		//		СтрокаДоб.Касса = СтрокаТаб.Имя;
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		//+++АК MIND 2018.02.04 переделываю нановую логику, так как в УНФ начали выкручиваться и код у них не лезет уже в 6 символов
		Если ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
			
			Запрос = Новый Запрос();
			//Запрос.Текст = "ВЫБРАТЬ
			//               |	ОсновныеСредства.Ссылка,
			//               |	ОсновныеСредства.ЗаводскойНомер,
			//               |	ВЫБОР
			//               |		КОГДА ОсновныеСредства.Наименование ПОДОБНО &ККМ
			//               |			ТОГДА ВЫБОР
			//               |					КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
			//               |							И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
			//               |						ТОГДА ЛОЖЬ
			//               |					ИНАЧЕ ИСТИНА
			//               |				КОНЕЦ
			//               |		ИНАЧЕ ЛОЖЬ
			//               |	КОНЕЦ КАК ЭтоККМ,
			//               |	ВЫБОР
			//               |		КОГДА ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
			//               |			ТОГДА ИСТИНА
			//               |		ИНАЧЕ ВЫБОР
			//               |				КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
			//               |						И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
			//               |					ТОГДА ИСТИНА
			//               |				ИНАЧЕ ЛОЖЬ
			//               |			КОНЕЦ
			//               |	КОНЕЦ КАК ЭтоЧПМ
			//               |ИЗ
			//               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
			//               |ГДЕ
			//               |	(ОсновныеСредства.Наименование ПОДОБНО &ККМ
			//               |			ИЛИ ОсновныеСредства.Наименование ПОДОБНО &ЧПМ)";
			//			   
			//Запрос.УстановитьПараметр("ККМ", "%ККМ%");
			//Запрос.УстановитьПараметр("ЧПМ", "%ЧПМ%");
			//Запрос.УстановитьПараметр("Дата", Объект.Дата);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ОсновныеСредства.Ссылка,
			               |	ВЫБОР
			               |		КОГДА ПОДСТРОКА(ОсновныеСредства.КодКассыВУНФ, 1, 1) <> """"
			               |			ТОГДА ОсновныеСредства.КодКассыВУНФ
			               |		ИНАЧЕ ОсновныеСредства.ЗаводскойНомер
			               |	КОНЕЦ КАК ЗаводскойНомер
			               |ИЗ
			               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
			               |ГДЕ
			               |	ОсновныеСредства.ПометкаУдаления = ЛОЖЬ";

			
			Результаты = Запрос.ВыполнитьПакет();
			ТабКешККМ = Результаты[0].Выгрузить();
			
			ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
			
			ADOСоединение = Новый COMОбъект("ADODB.Connection");
			ADOСоединение.ConnectionTimeOut = 0;
			ADOСоединение.CommandTimeOut    = 0;
			
			СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
			
			СтрЗапрос = "SELECT DISTINCT
						   |	dbo_Shifts.CashID
						   |FROM
						   |SMS_Izbenka.dbo.Shifts as dbo_Shifts (nolock)
						   |		INNER JOIN SMS_Izbenka.dbo.Checks as dbo_Checks (nolock)
						   |		ON dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
						   |WHERE
						   |	dbo_Shifts.CloseDateTime >= '" + Формат(НачалоДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
						   | 	and dbo_Shifts.CloseDateTime <= '" + Формат(КонецДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
						   |	and dbo_Checks.OperationType > 0
						   |	and dbo_Checks.BaseSum - dbo_Checks.SummBonus > 0
						   | 	and dbo_Checks.ShopNo = " + Формат(Объект.ТорговаяТочка.НомерТочки, "ЧН=; ЧГ=0");
			
			ADOСоединение.ConnectionString  = СтрСоедиение;
			ADOСоединение.Open();
			
			rs = ADOСоединение.Execute(СтрЗапрос);
			
			ТаблицаСДаннымиПоКассам = Новый ТаблицаЗначений();
			ТаблицаСДаннымиПоКассам.Колонки.Добавить("CashID", Новый ОписаниеТипов("Число"));
			ТаблицаСДаннымиПоКассам.Колонки.Добавить("Касса", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
			
			Попытка
				rs.MoveFirst();
				
				Пока НЕ rs.EOF() Цикл
					СтрокаДоб = ТаблицаСДаннымиПоКассам.Добавить();
					СтрокаДоб.CashID = Rs.Fields("CashID").Value;
					//Если Объект.Организация = ОргСП Тогда
					//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаДоб.CashID, "ЧРГ=; ЧГ=0"), Истина));
					//Иначе
						СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер", Формат(СтрокаДоб.CashID, "ЧРГ=; ЧГ=0")));
					//КонецЕсли;
					Если СтрокиККМ.Количество() > 0 Тогда
						СтрокаДоб.Касса = СтрокиККМ[0].Ссылка;
					КонецЕсли;
					rs.MoveNext();
				КонецЦикла;
			Исключение
			КонецПопытки;
			ADOСоединение = Неопределено;
			
			КолвоСтрок = ТаблицаСДаннымиПоКассам.Количество();
			Для н = 1 По КолвоСтрок Цикл
				Если ЗначениеЗаполнено(ТаблицаСДаннымиПоКассам[КолвоСтрок - н].Касса) Тогда
					//+++АК ILIK 2018.09.11 ИП-00018846
					//СтрокиТаб = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", ТаблицаСДаннымиПоКассам[КолвоСтрок - н].Касса));
					//Если СтрокиТаб.Количество() > 0 Тогда
						ТаблицаСДаннымиПоКассам.Удалить(КолвоСтрок - н);
					//КонецЕсли;
					//---АК ILIK
				КонецЕсли;	
			КонецЦикла;
			
			Для Каждого СтрокаТаб Из ТаблицаСДаннымиПоКассам Цикл
				СтрокаДоб = НепривязанныеКассы.Добавить();
				СтрокаДоб.Касса = СтрокаТаб.CashID;
			КонецЦикла;
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.CashName КАК ID_SQL,
			               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал,
			               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Касса
			               |ИЗ
			               |	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&Дата, РабочееМесто.СтруктурнаяЕдиница = &ТТ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних";
						   
			Запрос.УстановитьПараметр("Дата", Объект.Дата);
			Запрос.УстановитьПараметр("ТТ", Объект.ТорговаяТочка);
						   
			Результаты = Запрос.ВыполнитьПакет();
			ТабКешККМ = Результаты[0].Выгрузить();
			
			ADOСоединение = Новый COMОбъект("ADODB.Connection");
			ADOСоединение.ConnectionTimeOut = 0;
			ADOСоединение.CommandTimeOut    = 0;
			
			СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
			
			СтрЗапрос = "SELECT DISTINCT
					   |'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))) as Name
					   |FROM
					   |	SMS_Union.dbo.Checks as dbo_Checks (nolock)
					   |	WHERE dbo_Checks.CloseDate >= '" + Формат(НачалоДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(Объект.Дата), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
					   | 	and dbo_Checks.ShopNo = " + Формат(Объект.ТорговаяТочка.НомерТочки, "ЧН=; ЧГ=0");
						
			ADOСоединение.ConnectionString  = СтрСоедиение;
			ADOСоединение.Open();
			
			rs = ADOСоединение.Execute(СтрЗапрос);
			
			ТабКассыЗадействованные = Новый ТаблицаЗначений();
			ТабКассыЗадействованные.Колонки.Добавить("Терминал");
			ТабКассыЗадействованные.Колонки.Добавить("ОсновноеСредство");
			ТабКассыЗадействованные.Колонки.Добавить("Имя");
			Если НЕ rs.EOF() Тогда
				rs.MoveFirst();
				
				Пока НЕ rs.EOF() Цикл
					СтрокаККМ = ТабКешККМ.Найти(Rs.Fields("Name").Value, "ID_SQL");
					СтрокаДоб = ТабКассыЗадействованные.Добавить();
					Если СтрокаККМ <> Неопределено Тогда
						СтрокаДоб.Терминал = СтрокаККМ.Терминал;
						СтрокаДоб.ОсновноеСредство = СтрокаККМ.Касса;
					КонецЕсли;
					СтрокаДоб.Имя = Rs.Fields("Name").Value;
					rs.MoveNext();
				КонецЦикла;
			КонецЕсли;
			ADOСоединение = Неопределено;
			
			КолвоСтрок = ТабКассыЗадействованные.Количество();
			Для н = 1 По КолвоСтрок Цикл
				Если ЗначениеЗаполнено(ТабКассыЗадействованные[КолвоСтрок - н].ОсновноеСредство) Тогда
					//+++АК ILIK 2018.09.11 ИП-00018846
					//СтрокиТаб = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", ТабКассыЗадействованные[КолвоСтрок - н].ОсновноеСредство));
					//Если СтрокиТаб.Количество() > 0 Тогда
						ТабКассыЗадействованные.Удалить(КолвоСтрок - н);
					//КонецЕсли;
					//---АК ILIK
				КонецЕсли;	
			КонецЦикла;
			
			Для Каждого СтрокаТаб Из ТабКассыЗадействованные Цикл
				СтрокаДоб = НепривязанныеКассы.Добавить();
				СтрокаДоб.Касса = СтрокаТаб.Имя;
			КонецЦикла;
			
		КонецЕсли;
		
		КолвоНеПривязанныхКасс = НепривязанныеКассы.Количество();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ручной ввод документов не предусмотрен",,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие листа учета");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	
	//mind 2017-04-19 эти переменные сейчас получается не участвуют в расчетах
	////+++ZEZA
	//НачальныйОстаток = АК_ПолучитьОстатокПоСчету5001(Объект.Ссылка.МоментВремени(),  Объект.Организация, Объект.ТорговаяТочка);
	//
	////
	//КонечныйОстаток = АК_РассчитатьКонечныйОстаток();
	//
	////---ZEZA
	
	//
	//ДатаВключенияДинамическогоСчитывания = Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить();
	//Если ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
	//	И ДатаВключенияДинамическогоСчитывания <= Объект.Дата Тогда
		Элементы.Товары.Видимость = Ложь;
		Элементы.ТоварыДинамически.Видимость = Истина;
	//Иначе
	//	Элементы.Товары.Видимость = Истина;
	//	Элементы.ТоварыДинамически.Видимость = Ложь;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТорговаяТочка) Тогда
		ПерезаполнитьТаблицуТоваров();
		ПерезаполнитьТаблицуПеремещенийМеждуТТ();
		ТоварыИзменения.Очистить();
	КонецЕсли;
	
	Элементы.ZОтчетыСумма.Видимость = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПоказыватьВЛистахУчетаZОтчеты, Ложь);
	ОбновитьДанныеZОтчетов();
	
	Элементы.КорректировкаБезналДоставка.Видимость 	= (НЕ Объект.КорректировкаБезналДоставка = 0);
	Элементы.КорректировкаНалДоставка.Видимость 	= (НЕ Объект.КорректировкаНалДоставка = 0);
	//Элементы.ZОтчетыСуммаПоНал.Видимость = ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка);
	//Элементы.ZОтчетыСуммаПоБезнал.Видимость = ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка);
	
	ПеречитатьТаблицуНепривязанныхКасс();
	
	РедактированиеДоставки = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактироватьДанныеОДоставкеВЛистахУчета, Ложь);
	
	Элементы.СуммаЭквайрингДоставка.Доступность = РедактированиеДоставки;
	Элементы.СуммаНаличныеДоставка.Доступность = РедактированиеДоставки;
	
	Элементы.КорректировкаБезналДоставка.Доступность = РедактированиеДоставки;
	Элементы.КорректировкаНалДоставка.Доступность = РедактированиеДоставки;
	Элементы.РасшифровкаДоставка.Доступность = РедактированиеДоставки;
	
	ЭтоМагазин = (Объект.ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин);
	Если ЭтоМагазин Тогда
		Элементы.ПеренестиБезналВНаличнуюЧасть.Видимость = Ложь;
		//ADOСоединение = Новый COMОбъект("ADODB.Connection");
		//ADOСоединение.ConnectionTimeOut = 0;
		//ADOСоединение.CommandTimeOut    = 0;
		//
		//СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
		//
		//ADOСоединение.ConnectionString  = СтрСоедиение;
		//ADOСоединение.Open();
		//
		//СтрЗапрос = "SELECT PKO._Fld3906 as Summa, RTRIM(CAST(PKO._Fld3913 as CHAR(250))) as Komment
		//				|FROM VV.dbo._Document272 as PKO (nolock)
		//				|INNER JOIN VV.dbo._Reference176 as TT (nolock)
		//				|ON PKO._Fld3912RRef = TT._IDRRef
		//				|WHERE PKO._Date_Time >= '" + Формат(НачалоДня(ДобавитьМесяц(Объект.дата, 12*2000)), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and PKO._Date_Time <= '" + Формат(КонецДня(ДобавитьМесяц(Объект.дата, 12*2000)), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and PKO._Posted = 1 and TT._Fld1530 = " + Формат(Объект.ТорговаяТочка.id_TT, "ЧГ=0") + "
		//				|	and PKO._Fld3897RRef = 0xBBE48F2DCD140F9D40E644061959A9F7
		//				|	and PKO._Fld3911RRef = 0x97E8000C291D1FD111E228CF2A9E8736
		//				|UNION ALL
		//				|SELECT RKO._Fld4124 * (-1), RTRIM(CAST(RKO._Fld4131 as CHAR(250))) as Komment 
		//				|FROM VV.dbo._Document277 as RKO (nolock)
		//				|INNER JOIN VV.dbo._Reference176 as TT (nolock)
		//				|ON RKO._Fld4130RRef = TT._IDRRef
		//				|WHERE RKO._Date_Time >= '" + Формат(НачалоДня(ДобавитьМесяц(Объект.дата, 12*2000)), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and RKO._Date_Time <= '" + Формат(КонецДня(ДобавитьМесяц(Объект.дата, 12*2000)), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and RKO._Posted = 1 and TT._Fld1530 = " + Формат(Объект.ТорговаяТочка.id_TT, "ЧГ=0") + "
		//				|	and RKO._Fld4115RRef = 0xBBE48F2DCD140F9D40E644061959A9F7
		//				|	and RKO._Fld4129RRef = 0x97E8000C291D1FD111E228CF2A9E8736";
		//
		//
		//rs = ADOСоединение.Execute(СтрЗапрос);
		//
		//Попытка
		//	rs.MoveFirst();
		//	
		//	Пока НЕ rs.EOF() Цикл
		//		КорректирующийДокументАстор = КорректирующийДокументАстор + Rs.Fields("Summa").Value;
		//		КомментарийКорректировкиАстор = КомментарийКорректировкиАстор + ?(ПустаяСтрока(КомментарийКорректировкиАстор), "", ", ") + Rs.Fields("Komment").Value;
		//		rs.MoveNext();
		//	КонецЦикла;
		//Исключение
		//КонецПопытки;
		//ADOСоединение = Неопределено;
	КонецЕсли;	
	
	//Элементы.ПродавцыКоличествоЧасов.Видимость = ЭтоМагазин;
	Элементы.ТоварыДинамическиКИнвентаризации.Видимость = ЭтоМагазин;
	Элементы.ТоварыДинамическиГруппаИнвентаризация.Видимость = ЭтоМагазин;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПерезаполнитьТаблицуТоваров();
	ПерезаполнитьТаблицуПеремещенийМеждуТТ();
	ТоварыИзменения.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаПриИзменении(Элемент)
	
	ПерезаполнитьТаблицуТоваров();
	ПерезаполнитьТаблицуПеремещенийМеждуТТ();
	ТоварыИзменения.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДоставка()
	
	Возврат Объект.Доставка.Выгрузить();
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДоставка(Результат)
	
	Объект.Доставка.Загрузить(Результат);
	
	Объект.СуммаЭквайрингДоставка 	= Результат.Итог("СуммаБН");
	Объект.СуммаНаличныеДоставка 	= Результат.Итог("СуммаНал");
	
	ТекРазницаБН 	= 0;
	ТекРазницаНал 	= 0;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		Если НЕ СтрокаТаблицы.СуммаБН = СтрокаТаблицы.СуммаБНИсходная Тогда
			ТекРазницаБН 	= ТекРазницаБН 	+ СтрокаТаблицы.СуммаБН 	- СтрокаТаблицы.СуммаБНИсходная;
		КонецЕсли;
		Если НЕ СтрокаТаблицы.СуммаНал = СтрокаТаблицы.СуммаНалИсходная Тогда
			ТекРазницаНал 	= ТекРазницаНал + СтрокаТаблицы.СуммаНал 	- СтрокаТаблицы.СуммаНалИсходная;
		КонецЕсли;
	КонецЦикла;
	Объект.КорректировкаБезналДоставка 	= ТекРазницаБН;
	Объект.КорректировкаНалДоставка 	= ТекРазницаНал;
	
	Элементы.КорректировкаБезналДоставка.Видимость 	= (НЕ Объект.КорректировкаБезналДоставка = 0);
	Элементы.КорректировкаНалДоставка.Видимость 	= (НЕ Объект.КорректировкаНалДоставка = 0);
	
КонецПроцедуры
	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Обработан Тогда
		Если ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
			Если Объект.ZОтчеты.Количество() > 0 Тогда
				ВсеКассыНеСоответствуют = Истина;
				Для Каждого СтрокаЗ Из Объект.ZОтчеты Цикл
					Если Объект.Организация = ВнешниеДанные.ПолучитьОрганизацияДляКассы(СтрокаЗ.Касса, Объект.Дата) Тогда
						ВсеКассыНеСоответствуют = Ложь;
					Иначе
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = "Организация листа учета не соотвествует организации кассы: " + СтрокаЗ.Касса;
						Сообщение.Сообщить();
					КонецЕсли;	
				КонецЦикла;	
				Если ВсеКассыНеСоответствуют Тогда
					//Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
			Если Объект.СуммаЭквайринг <> 0
				И НЕ ЗначениеЗаполнено(Объект.Терминал) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В листе указана сумма эквайринг, но не привязан терминал к торговой точке",,,, Отказ);
			КонецЕсли;	
		КонецЕсли;
		Если КолвоНеПривязанныхКасс > 0 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Есть непривязанные кассы (одноименная закладка). Нельзя провести документ в статусе ""Обработан"".";
			Сообщение.Сообщить();
			Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПроводитьЛистУчетаСПроблемамиПоКассам, Ложь) Тогда
			//Если ПараметрыСеанса.ТекущийПользователь.Наименование <> "Умарова Вера" Тогда
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
		Если Объект.ZОтчеты.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не указан ни один Z-отчет. Нельзя провести документ в статусе ""Обработан"".";
			Сообщение.Сообщить();
			Если НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПроводитьЛистУчетаСПроблемамиПоКассам, Ложь) Тогда
			//Если ПараметрыСеанса.ТекущийПользователь.Наименование <> "Умарова Вера" Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//+++АК SaMi 2018.07.18 ИП-00019214 
	ПроверитьВозвратыИзСейфа(Отказ);
	//---АК SaMi  2018.07.18 
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ДанныеФормыВЗначение(ТоварыДинамически, Тип("ТаблицаЗначений")));
	//+++АК sils 16.12.2018 ИП-00020532
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаУслугКПроведению", ДанныеФормыВЗначение(УслугиДинамически, Тип("ТаблицаЗначений")));
	//---АК
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТоварыИзменение", ДанныеФормыВЗначение(ТоварыИзменения, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТоварыПеремещениеМеждуТТ", ДанныеФормыВЗначение(ТоварыПередачиМеждуТТ, Тип("ТаблицаЗначений")));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТорговаяТочкаИзбенки(ТоргТочка)
	
	Возврат ТоргТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка;
	
КонецФункции	

&НаСервере
Процедура ПересчитатьСтрокуПослеРедактирования(ИдентификаторТекДанных)
	
	ТекДанные = ТоварыДинамически.НайтиПоИдентификатору(ИдентификаторТекДанных);
	
	ТабДвижения = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(Объект.Дата, Объект.Дата, Объект.ТорговаяТочка, ТекДанные.Номенклатура);
	Если Объект.Дата < '20140401' Тогда
		Для Каждого СтрокаТаб Из ТабДвижения Цикл
			СтрокаТаб.Поступило = СтрокаТаб.Поступило + СтрокаТаб.ПолученоСДругихТТ - СтрокаТаб.ОтправленоНаДругиеТТ;
			СтрокаТаб.ПолученоСДругихТТ = 0;
			СтрокаТаб.ОтправленоНаДругиеТТ = 0;
		КонецЦикла;	
	КонецЕсли;
	Если ТабДвижения.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекДанные, ТабДвижения[0]);
	КонецЕсли;	
	ЗапросНачОстаток = Новый Запрос();
	ЗапросНачОстаток.Текст = "ВЫБРАТЬ
	                         |	ТоварыНаСкладахОстатки.Номенклатура,
	                         |	ТоварыНаСкладахОстатки.КоличествоОстаток
	                         |ИЗ
	                         |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                         |			&ДатаОстатков,
	                         |			Склад = &Склад
	                         |				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки";
	
	ЗапросНачОстаток.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(Объект.Дата) - 1, ВидГраницы.Включая));
	ЗапросНачОстаток.УстановитьПараметр("Склад", Объект.ТорговаяТочка.СкладТорговогоЗала);
	ЗапросНачОстаток.УстановитьПараметр("Номенклатура", ТекДанные.Номенклатура);
	Выборка = ЗапросНачОстаток.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекДанные.НачальныйОстаток = Выборка.КоличествоОстаток;
	Иначе
		ТекДанные.НачальныйОстаток = 0;
	КонецЕсли;
	
	СтрокиИзменения = ТоварыИзменения.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));
	Для Каждого СтрокаИзменение Из СтрокиИзменения Цикл
		Если НачалоДня(СтрокаИзменение.Дата) = НачалоДня(Объект.Дата) Тогда
			Если СтрокаИзменение.КодОперации = 400 Тогда
				ТекДанные.Поступило = ТекДанные.Поступило + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 510 Тогда
				ТекДанные.Продано = ТекДанные.Продано + СтрокаИзменение.Количество;
				ТекДанные.Сумма = ТекДанные.Сумма + СтрокаИзменение.Сумма;
			ИначеЕсли СтрокаИзменение.КодОперации = 101 Тогда
				ТекДанные.Дегустация = ТекДанные.Дегустация + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 102 Тогда
				ТекДанные.Списание = ТекДанные.Списание + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 103 Тогда
				ТекДанные.СписаниеПоКачеству = ТекДанные.СписаниеПоКачеству + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 104 Тогда
				ТекДанные.Бой = ТекДанные.Бой + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 105 Тогда
				ТекДанные.Акция = ТекДанные.Акция + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 520 Тогда
				ТекДанные.Разница = ТекДанные.Разница + СтрокаИзменение.Количество;	
			КонецЕсли;
		ИначеЕсли НачалоДня(СтрокаИзменение.Дата) < НачалоДня(Объект.Дата) Тогда
			Если СтрокаИзменение.КодОперации = 400 ИЛИ СтрокаИзменение.КодОперации = 520 Тогда
				ТекДанные.НачальныйОстаток = ТекДанные.НачальныйОстаток + СтрокаИзменение.Количество;
			ИначеЕсли СтрокаИзменение.КодОперации = 510 ИЛИ СтрокаИзменение.КодОперации = 101 ИЛИ СтрокаИзменение.КодОперации = 102
				ИЛИ СтрокаИзменение.КодОперации = 103 ИЛИ СтрокаИзменение.КодОперации = 104 ИЛИ СтрокаИзменение.КодОперации = 105 Тогда
				ТекДанные.НачальныйОстаток = ТекДанные.НачальныйОстаток - СтрокаИзменение.Количество;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	ТекДанные.КонечныйОстаток = ТекДанные.НачальныйОстаток + ТекДанные.Поступило + ТекДанные.Разница - ТекДанные.Продано - ТекДанные.Дегустация - ТекДанные.Списание - ТекДанные.СписаниеПоКачеству 
				- ТекДанные.Бой - ТекДанные.Акция + ТекДанные.ПолученоСДругихТТ - ТекДанные.ОтправленоНаДругиеТТ;
				
	ТекДанные.РазницаККМ = ТекДанные.ПродажиККМ - ТекДанные.Продано;
	
	//Если ТекДанные.Продано <= 0 Тогда
	//	ТекДанные.Сумма = 0;
	//КонецЕсли;	
	
	ПересчитатьСуммуПродажТоваров();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЭтоНоменклатураБезОстатков(Номенклатура)
	
	Возврат Номенклатура.БезОстатков;
	
КонецФункции

&НаКлиенте
Процедура ТоварыДинамическиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекДанные = Элементы.ТоварыДинамически.ТекущиеДанные;
	
	Если ТекДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выполнять корректировки для Вкусвилла");
	//	Возврат;
	//КонецЕсли;
	
	//Если ЭтоНоменклатураБезОстатков(ТекДанные.Номенклатура) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выполнять корректировки по номенклатуре с признаком ""Без остатков""");
	//	Возврат;
	//КонецЕсли;
	
	Если (НачалоДня(ТекущаяДата()) - НачалоДня(Объект.Дата)) / 86400 >= 28 Тогда
		Сообщить("Нельзя выполнять корректировку за период больше чем 28 дней от текущей даты");
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметры = Новый Структура();
	СтруктураПараметры.Вставить("ДатаНач", НачалоДня(Объект.Дата) - 86400*3);
	СтруктураПараметры.Вставить("ДатаКон", НачалоДня(Объект.Дата));
	СтруктураПараметры.Вставить("ТорговаяТочка", Объект.ТорговаяТочка);
	СтруктураПараметры.Вставить("Номенклатура", ТекДанные.Номенклатура);
	СтруктураПараметры.Вставить("ДатаЛиста", НачалоДня(Объект.Дата));
	
	СтруктураПараметры.Вставить("Перенесено", Новый Массив());
	
	//БылНачОстаток= ТекДанные.НачальныйОстаток;
	СтрокиВИзменениях = ТоварыИзменения.НайтиСтроки(Новый Структура("Номенклатура, АвтоматическоеДвижение", ТекДанные.Номенклатура, Ложь));
	Для Каждого СтрокаИзменение Из СтрокиВИзменениях Цикл
		СтруктураПараметры.Перенесено.Добавить(Новый Структура("Дата, КодОперации, Количество, СуммаОперации"
			, СтрокаИзменение.Дата, СтрокаИзменение.КодОперации, СтрокаИзменение.Количество, СтрокаИзменение.Сумма));
	КонецЦикла;	
	
	СтруктураИзменений = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаВнесенияКорректировки", Новый Структура("ТекущиеЗначения", СтруктураПараметры), ЭтаФорма);
	
	Если ТипЗнч(СтруктураИзменений) = Тип("Структура") Тогда
		СтрокиВИзменениях = ТоварыИзменения.НайтиСтроки(Новый Структура("Номенклатура, АвтоматическоеДвижение", ТекДанные.Номенклатура, Ложь));
		Для Каждого СтрокаИзменение Из СтрокиВИзменениях Цикл
			ТоварыИзменения.Удалить(СтрокаИзменение);
		КонецЦикла;
		Для Каждого ИзменениеСтруктура Из СтруктураИзменений.МассивИзменений Цикл
			СтрокаДоб = ТоварыИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб, ИзменениеСтруктура);
			СтрокаДоб.Номенклатура = ТекДанные.Номенклатура;
		КонецЦикла;
		ПересчитатьСтрокуПослеРедактирования(Элементы.ТоварыДинамически.ТекущаяСтрока);
	КонецЕсли;	
	
	//ТекДанные.КонечныйОстаток = ТекДанные.НачальныйОстаток + ТекДанные.Поступило + ТекДанные.Разница - ТекДанные.Продано - ТекДанные.Дегустация - ТекДанные.Списание - ТекДанные.СписаниеПоКачеству - ТекДанные.Бой - ТекДанные.Акция;
	//ПересчитатьСуммуПродажТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеZОтчетов()
	
	УстановитьПривилегированныйРежим(Истина); //на чтение остатков дадим всем право чтения
	
	ТабДвижения = Объект.ZОтчеты.Выгрузить();
	ТабДвижения.Свернуть("Касса", "Сумма, СуммаПоНал, СуммаПоБезнал");
	
	Для Каждого СтрокаДвижение Из ТабДвижения Цикл
		Если СтрокаДвижение.СуммаПоНал + СтрокаДвижение.СуммаПоБезнал > 0 Тогда
			СтрокаДвижение.Сумма = СтрокаДвижение.СуммаПоНал + СтрокаДвижение.СуммаПоБезнал;
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	Таб.Касса КАК Касса,
	//			   |	Таб.Сумма КАК Сумма,
	//			   |	Таб.СуммаПоНал КАК СуммаПоНал,
	//			   |	Таб.СуммаПоБезнал КАК СуммаПоБезнал
	//			   |ПОМЕСТИТЬ ВТ_Движения
	//			   |ИЗ
	//			   |	&Таб КАК Таб
	//			   |
	//			   |ИНДЕКСИРОВАТЬ ПО
	//			   |	Касса
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	ФинансовыйОстатки.Субконто1 КАК Касса,
	//			   |	ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0) КАК Сумма
	//			   |ИЗ
	//			   |	РегистрБухгалтерии.Финансовый.Остатки(
	//			   |			&ДатаКон,
	//			   |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НераспределеннаяРозничнаяВыручка),
	//			   |			,
	//			   |			) КАК ФинансовыйОстатки
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |УНИЧТОЖИТЬ ВТ_Движения";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.Субконто1 КАК Касса,
	               |	ЕСТЬNULL(ФинансовыйОстатки.СуммаОстаток, 0) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&ДатаКон, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.НераспределеннаяРозничнаяВыручка), , ) КАК ФинансовыйОстатки";
	
	Запрос.УстановитьПараметр("Таб", ТабДвижения);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(НачалоДня(Объект.Дата) - 1, ВидГраницы.Включая));
	
	ТабДанные = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из Объект.ZОтчеты Цикл
		СтрокаДанные = ТабДанные.Найти(СтрокаТаб.Касса, "Касса");
		СтрокаЗ = ТабДвижения.Найти(СтрокаТаб.Касса, "Касса");
		СтрокаТаб.НакопленнаяСумма = ?(СтрокаЗ = Неопределено, 0, СтрокаЗ.Сумма) + ?(СтрокаДанные = Неопределено, 0, СтрокаДанные.Сумма);
		СтрокаТаб.Сумма = СтрокаЗ.Сумма;
	КонецЦикла;
	
	ТабДинамически = Объект.ZОтчеты.Выгрузить();
	ТабДинамически.Свернуть("Касса, НакопленнаяСумма");
	ZОтчетыДинамически.Загрузить(ТабДинамически);
	Для Каждого СтрокаДинамически Из ZОтчетыДинамически Цикл
		СтрокиДокумента = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", СтрокаДинамически.Касса));
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокаДинамически.ВведенныйОстаток = СтрокиДокумента[0].ВведенныйОстаток;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДанныеZОтчетов()
	
	Если Объект.НеПерезагружатьЗОтчеты Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабКеш = Объект.ZОтчеты.Выгрузить();
	Объект.ZОтчеты.Очистить();
	ZОтчетыДинамически.Очистить();
	
	Если ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		
		СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
		
		ADOСоединение.ConnectionString  = СтрСоедиение;
		ADOСоединение.Open();
		
		СтрЗапрос = "SELECT
					|   	dbo_Shifts.CashID,
					|   	SUM(dbo_Checks.BaseSum + CASE WHEN ABS((dbo_Checks.SummCash + dbo_Checks.SummBank + dbo_Checks.SummBonus) - dbo_Checks.BaseSum) BETWEEN 0.01 AND 1 THEN (dbo_Checks.SummCash + dbo_Checks.SummBank + dbo_Checks.SummBonus) - dbo_Checks.BaseSum ELSE 0 END) as BaseSum,
					|   	SUM(dbo_Checks.SummBonus) as SummBonus,
					|   	MAX(dbo_Shifts.Number) as Number
					|   FROM
					|   	SMS_Izbenka.dbo.Shifts as dbo_Shifts (nolock)
					|   		INNER JOIN SMS_Izbenka.dbo.Checks as dbo_Checks (nolock)
					|   	ON dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
					|   WHERE
					|   	CONVERT(date, DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime)) = " + ВнешниеДанные.ФорматПоля(Объект.Дата, Истина) + "
					|  and dbo_Checks.ShopNo = " + ВнешниеДанные.ФорматПоля(Объект.ТорговаяТочка.НомерТочки) + "
					|   	and dbo_Checks.OperationType > 0 and (dbo_Checks.BaseSum - dbo_Checks.SummBonus) > 0
					|   
					|   GROUP BY
					|   	dbo_Shifts.CashID";
					
		ТабЗОтчеты = Новый ТаблицаЗначений();
		ТабЗОтчеты.Колонки.Добавить("Number", Новый ОписаниеТипов("Строка"));
		ТабЗОтчеты.Колонки.Добавить("CashID", Новый ОписаниеТипов("Число"));
		ТабЗОтчеты.Колонки.Добавить("BaseSum", Новый ОписаниеТипов("Число"));
		ТабЗОтчеты.Колонки.Добавить("SummBonus", Новый ОписаниеТипов("Число"));
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабЗОтчеты.Добавить();
				СтрокаДоб.Number 		= Rs.Fields("Number").Value;
				СтрокаДоб.CashID 		= Rs.Fields("CashID").Value;
				СтрокаДоб.BaseSum 		= Rs.Fields("BaseSum").Value;
				СтрокаДоб.SummBonus 	= Rs.Fields("SummBonus").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ADOСоединение.Close();
		
		//+++АК MIND 2018.02.04 здесь аналогичная переделка под выкрутасы УНФ
		Запрос = Новый Запрос();
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	ОсновныеСредства.Ссылка,
		//               |	ОсновныеСредства.ЗаводскойНомер,
		//               |	ВЫБОР
		//               |		КОГДА ОсновныеСредства.Наименование ПОДОБНО &ККМ
		//               |			ТОГДА ВЫБОР
		//               |					КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
		//               |							И ОсновныеСредства.ДатаПереходаЧПМВККМ > &ДатаНач
		//               |						ТОГДА ЛОЖЬ
		//               |					ИНАЧЕ ИСТИНА
		//               |				КОНЕЦ
		//               |		ИНАЧЕ ЛОЖЬ
		//               |	КОНЕЦ КАК ЭтоККМ,
		//               |	ВЫБОР
		//               |		КОГДА ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
		//               |			ТОГДА ИСТИНА
		//               |		ИНАЧЕ ВЫБОР
		//               |				КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
		//               |						И ОсновныеСредства.ДатаПереходаЧПМВККМ > &ДатаНач
		//               |					ТОГДА ИСТИНА
		//               |				ИНАЧЕ ЛОЖЬ
		//               |			КОНЕЦ
		//               |	КОНЕЦ КАК ЭтоЧПМ
		//               |ИЗ
		//               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
		//               |ГДЕ
		//               |	(ОсновныеСредства.Наименование ПОДОБНО &ККМ
		//               |			ИЛИ ОсновныеСредства.Наименование ПОДОБНО &ЧПМ)";
		//			   
		//Запрос.УстановитьПараметр("id_tt", Объект.ТорговаяТочка.id_TT);
		//Запрос.УстановитьПараметр("ТТ", Объект.ТорговаяТочка);
		//Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
		//Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
		//Запрос.УстановитьПараметр("ККМ", "%ККМ%");
		//Запрос.УстановитьПараметр("ЧПМ", "%ЧПМ%");
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОсновныеСредства.Ссылка,
		               |	ВЫБОР
		               |		КОГДА ПОДСТРОКА(ОсновныеСредства.КодКассыВУНФ, 1, 1) <> """"
		               |			ТОГДА ОсновныеСредства.КодКассыВУНФ
		               |		ИНАЧЕ ОсновныеСредства.ЗаводскойНомер
		               |	КОНЕЦ КАК ЗаводскойНомер
		               |ИЗ
		               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
		               |ГДЕ
		               |	ОсновныеСредства.ПометкаУдаления = ЛОЖЬ";
		
		Результаты = Запрос.ВыполнитьПакет();
		ТабКешККМ = Результаты[0].Выгрузить();
		
		ВнешниеИсточникиДанных.SMS_Izbenka.РазорватьСоединение();
		
		ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
		
		Для Каждого СтрокаЗОтчет Из ТабЗОтчеты Цикл
			//Если Объект.Организация = ОргСП Тогда
			//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаЗОтчет.CashID, "ЧРГ=; ЧГ=0"), Истина));
			//Иначе
				СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер", Формат(СтрокаЗОтчет.CashID, "ЧРГ=; ЧГ=0")));
			//КонецЕсли;
			Если СтрокиККМ.Количество() > 0 Тогда
				СтрокаДоб = Объект.ZОтчеты.Добавить();
				СтрокаДоб.Касса = СтрокиККМ[0].Ссылка;
				СтрокаДоб.ZОтчет = СтрокаЗОтчет.Number;
				СтрокаДоб.Сумма = СтрокаЗОтчет.BaseSum - СтрокаЗОтчет.SummBonus;
				СтрокиСБезналом = Объект.ОплатыПоБанковскимКартам.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДоб.Касса));
				Если СтрокиСБезналом.Количество() > 0 Тогда
					СтрокаДоб.СуммаПоБезнал = Мин(СтрокиСБезналом[0].Сумма, СтрокаДоб.Сумма);
				КонецЕсли;	
				СтрокаДоб.СуммаПоНал = СтрокаДоб.Сумма - СтрокаДоб.СуммаПоБезнал;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Объект.ZОтчеты.Загрузить(Документы.ЛистУчета.ПересчитатьТаблицуЗОтчетов(Объект.Выручка.Выгрузить(), Объект.ОплатыПоБанковскимКартам.Выгрузить(), Объект.Дата));
	КонецЕсли;
	
	//Для Каждого СтрокаЗ Из ТабКеш Цикл
	//	СтрокиТаб = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", СтрокаЗ.Касса));
	//	Если СтрокиТаб.Количество() > 0 Тогда
	//		СтрокиТаб[0].ВведенныйОстаток = СтрокаЗ.ВведенныйОстаток;
	//	КонецЕсли;	
	//КонецЦикла;
	
	КорБезнал = Объект.КорректировкаБезнал;
	Счетчик = 0;
	Пока КорБезнал <> 0 И Счетчик < Объект.ZОтчеты.Количество() Цикл
		Если Объект.КорректировкаБезнал < 0 Тогда
			КорБезнал = КорБезнал * ?(КорБезнал < 0, -1, 1);
			МинСумма = Мин(Объект.ZОтчеты[Счетчик].СуммаПоБезнал, КорБезнал);
			Объект.ZОтчеты[Счетчик].СуммаПоБезнал = Объект.ZОтчеты[Счетчик].СуммаПоБезнал - МинСумма;
			Объект.ZОтчеты[Счетчик].СуммаПоНал = Объект.ZОтчеты[Счетчик].СуммаПоНал + МинСумма;
			КорБезнал = КорБезнал - МинСумма;
		Иначе
			МинСумма = Мин(Объект.ZОтчеты[Счетчик].СуммаПоНал, КорБезнал);
			Объект.ZОтчеты[Счетчик].СуммаПоБезнал = Объект.ZОтчеты[Счетчик].СуммаПоБезнал + МинСумма;
			Объект.ZОтчеты[Счетчик].СуммаПоНал = Объект.ZОтчеты[Счетчик].СуммаПоНал - МинСумма;
			КорБезнал = КорБезнал - МинСумма;
		КонецЕсли;	
		Счетчик = Счетчик + 1;
	КонецЦикла;	
	
	ОбновитьДанныеZОтчетов();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьZОтчеты(Команда)
	
	Объект.НеПерезагружатьЗОтчеты = Ложь;
	ЗагрузитьДанныеZОтчетов();
	
КонецПроцедуры

&НаСервере
Функция ТабЧастьНаличныхИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Таб.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаВозврата", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.Выручка.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.ОсновноеСредство,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.СуммаВозврата
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.ОсновноеСредство,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.СуммаВозврата
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.ОсновноеСредство = ВТ_Текущая.ОсновноеСредство
	               |			И ВТ_ПослеРедактирования.Сумма = ВТ_Текущая.Сумма
	               |			И ВТ_ПослеРедактирования.СуммаВозврата = ВТ_Текущая.СуммаВозврата
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.ОсновноеСредство, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.ОсновноеСредство, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Сумма, 0) <> ЕСТЬNULL(ВТ_Текущая.Сумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаВозврата, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаВозврата, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

&НаСервере
Функция ТабЧастьБезналичныхИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	Таб.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаДоставка", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаВозврата", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.ОплатыПоБанковскимКартам.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.Терминал,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.СуммаДоставка,
				   |	ЛистУчетаВыручка.СуммаВозврата
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.Терминал,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.СуммаДоставка,
				   |	ЛистУчетаВыручка.СуммаВозврата
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.Терминал = ВТ_Текущая.Терминал
	               |			И ВТ_ПослеРедактирования.Сумма = ВТ_Текущая.Сумма
	               |			И ВТ_ПослеРедактирования.СуммаДоставка = ВТ_Текущая.СуммаДоставка
				   |			И ВТ_ПослеРедактирования.СуммаВозврата = ВТ_Текущая.СуммаВозврата
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.Терминал, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.Терминал, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Сумма, 0) <> ЕСТЬNULL(ВТ_Текущая.Сумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаДоставка, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаДоставка, 0)
				   |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаВозврата, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаВозврата, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

&НаСервере
Функция ТабЧастьБалловИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	Таб.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.ОплатыПоБанковскимКартам.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.Терминал,
	               |	ЛистУчетаВыручка.Сумма
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.Терминал,
	               |	ЛистУчетаВыручка.Сумма
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.Терминал = ВТ_Текущая.Терминал
	               |			И ВТ_ПослеРедактирования.Сумма = ВТ_Текущая.Сумма
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.Терминал, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.Терминал, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Сумма, 0) <> ЕСТЬNULL(ВТ_Текущая.Сумма, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

&НаСервере
Функция ТабЧастьАктовИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("ККМ", Новый ОписаниеТипов("СправочникСсылка.Терминалы"));
	Таб.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Таб.Колонки.Добавить("АктПолучилCотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Таб.Колонки.Добавить("ЭтоВозвратБезнал", Новый ОписаниеТипов("Булево"));
	Таб.Колонки.Добавить("АктПолучен", Новый ОписаниеТипов("Булево"));
	Таб.Колонки.Добавить("ВыгруженВБухгалтерию", Новый ОписаниеТипов("Булево"));
	Таб.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("ПолученаСумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаПоНДС10", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаПоНДС18", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.АктыКМ3.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.ККМ,
	               |	ЛистУчетаВыручка.ОсновноеСредство,
	               |	ЛистУчетаВыручка.ЭтоВозвратБезнал,
	               |	ЛистУчетаВыручка.АктПолучен,
	               |	ЛистУчетаВыручка.АктПолучилCотрудник,
	               |	ЛистУчетаВыручка.ВыгруженВБухгалтерию,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.ПолученаСумма,
	               |	ЛистУчетаВыручка.СуммаПоНДС10,
	               |	ЛистУчетаВыручка.СуммаПоНДС18,
				   |	ЛистУчетаВыручка.Комментарий
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.ККМ,
	               |	ЛистУчетаВыручка.ОсновноеСредство,
	               |	ЛистУчетаВыручка.ЭтоВозвратБезнал,
	               |	ЛистУчетаВыручка.АктПолучен,
	               |	ЛистУчетаВыручка.АктПолучилCотрудник,
	               |	ЛистУчетаВыручка.ВыгруженВБухгалтерию,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.ПолученаСумма,
	               |	ЛистУчетаВыручка.СуммаПоНДС10,
	               |	ЛистУчетаВыручка.СуммаПоНДС18,
				   |	ЛистУчетаВыручка.Комментарий
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.ККМ = ВТ_Текущая.ККМ
	               |			И ВТ_ПослеРедактирования.ОсновноеСредство = ВТ_Текущая.ОсновноеСредство
	               |			И ВТ_ПослеРедактирования.АктПолучен = ВТ_Текущая.АктПолучен
	               |			И ВТ_ПослеРедактирования.АктПолучилCотрудник = ВТ_Текущая.АктПолучилCотрудник
	               |			И ВТ_ПослеРедактирования.ВыгруженВБухгалтерию = ВТ_Текущая.ВыгруженВБухгалтерию
	               |			И ВТ_ПослеРедактирования.Сумма = ВТ_Текущая.Сумма
	               |			И ВТ_ПослеРедактирования.ПолученаСумма = ВТ_Текущая.ПолученаСумма
	               |			И ВТ_ПослеРедактирования.СуммаПоНДС10 = ВТ_Текущая.СуммаПоНДС10
	               |			И ВТ_ПослеРедактирования.СуммаПоНДС18 = ВТ_Текущая.СуммаПоНДС18
				   |			И ВТ_ПослеРедактирования.Комментарий = ВТ_Текущая.Комментарий
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.ККМ, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.ККМ, ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ОсновноеСредство, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.ОсновноеСредство, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ЭтоВозвратБезнал, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Текущая.ЭтоВозвратБезнал, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.АктПолучен, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Текущая.АктПолучен, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.АктПолучилCотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.АктПолучилCотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ВыгруженВБухгалтерию, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Текущая.ВыгруженВБухгалтерию, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Сумма, 0) <> ЕСТЬNULL(ВТ_Текущая.Сумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ПолученаСумма, 0) <> ЕСТЬNULL(ВТ_Текущая.ПолученаСумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаПоНДС10, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаПоНДС10, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаПоНДС18, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаПоНДС18, 0)
				   |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Комментарий, 0) <> ЕСТЬNULL(ВТ_Текущая.Комментарий, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ТабЧастьЧековИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("КлючСтрокиАкта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Таб.Колонки.Добавить("УИНЧека", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Таб.Колонки.Добавить("СуммаЧека", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.ЧекиПоАктамКМ3.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.КлючСтрокиАкта,
	               |	ЛистУчетаВыручка.УИНЧека,
	               |	ЛистУчетаВыручка.СуммаЧека
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.КлючСтрокиАкта,
	               |	ЛистУчетаВыручка.УИНЧека,
	               |	ЛистУчетаВыручка.СуммаЧека
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.КлючСтрокиАкта = ВТ_Текущая.КлючСтрокиАкта
	               |			И ВТ_ПослеРедактирования.УИНЧека = ВТ_Текущая.УИНЧека
	               |			И ВТ_ПослеРедактирования.СуммаЧека = ВТ_Текущая.СуммаЧека
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.КлючСтрокиАкта, 0) <> ЕСТЬNULL(ВТ_Текущая.КлючСтрокиАкта, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.УИНЧека, 0) <> ЕСТЬNULL(ВТ_Текущая.УИНЧека, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаЧека, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаЧека, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ТабЧастьВозвратовИзСейфаИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("ВозвратПолучилCотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Таб.Колонки.Добавить("ВозвратПолучен", Новый ОписаниеТипов("Булево"));
	Таб.Колонки.Добавить("ВыгруженВБухгалтерию", Новый ОписаниеТипов("Булево"));
	Таб.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("ПолученаСумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаПоНДС10", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаПоНДС18", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.ВозвратыИзСейфа.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.ВозвратПолучен,
	               |	ЛистУчетаВыручка.ВозвратПолучилCотрудник,
	               |	ЛистУчетаВыручка.ВыгруженВБухгалтерию,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.ПолученаСумма,
	               |	ЛистУчетаВыручка.СуммаПоНДС10,
	               |	ЛистУчетаВыручка.СуммаПоНДС18,
	               |	ЛистУчетаВыручка.Комментарий
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.ВозвратПолучен,
	               |	ЛистУчетаВыручка.ВозвратПолучилCотрудник,
	               |	ЛистУчетаВыручка.ВыгруженВБухгалтерию,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.ПолученаСумма,
	               |	ЛистУчетаВыручка.СуммаПоНДС10,
	               |	ЛистУчетаВыручка.СуммаПоНДС18,
	               |	ЛистУчетаВыручка.Комментарий
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.ВозвратПолучен = ВТ_Текущая.ВозвратПолучен
	               |			И ВТ_ПослеРедактирования.ВозвратПолучилCотрудник = ВТ_Текущая.ВозвратПолучилCотрудник
	               |			И ВТ_ПослеРедактирования.ВыгруженВБухгалтерию = ВТ_Текущая.ВыгруженВБухгалтерию
	               |			И ВТ_ПослеРедактирования.Сумма = ВТ_Текущая.Сумма
	               |			И ВТ_ПослеРедактирования.ПолученаСумма = ВТ_Текущая.ПолученаСумма
	               |			И ВТ_ПослеРедактирования.СуммаПоНДС10 = ВТ_Текущая.СуммаПоНДС10
	               |			И ВТ_ПослеРедактирования.СуммаПоНДС18 = ВТ_Текущая.СуммаПоНДС18
	               |			И ВТ_ПослеРедактирования.Комментарий = ВТ_Текущая.Комментарий
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.ВозвратПолучен, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Текущая.ВозвратПолучен, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ВозвратПолучилCотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.ВозвратПолучилCотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ВыгруженВБухгалтерию, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Текущая.ВыгруженВБухгалтерию, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Сумма, 0) <> ЕСТЬNULL(ВТ_Текущая.Сумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.ПолученаСумма, 0) <> ЕСТЬNULL(ВТ_Текущая.ПолученаСумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаПоНДС10, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаПоНДС10, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаПоНДС18, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаПоНДС18, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Комментарий, 0) <> ЕСТЬNULL(ВТ_Текущая.Комментарий, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ТабЧастьТоваровВозвратовИзСейфаИзменена(МассивСтрок)
	
	Таб = Новый ТаблицаЗначений();
	Таб.Колонки.Добавить("КлючСтрокиВозврата", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	Таб.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таб.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таб.Колонки.Добавить("СуммаПоНДС10", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СуммаПоНДС18", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИзменение Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Таб.Добавить(), СтрокаИзменение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.УстановитьПараметр("ТабТек", Объект.ТоварыПоВозвратам.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаВыручка.КлючСтрокиВозврата,
	               |	ЛистУчетаВыручка.Номенклатура,
	               |	ЛистУчетаВыручка.Количество,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.СтавкаНДС,
	               |	ЛистУчетаВыручка.СуммаПоНДС10,
	               |	ЛистУчетаВыручка.СуммаПоНДС18
	               |ПОМЕСТИТЬ ВТ_ПослеРедактирования
	               |ИЗ
	               |	&Таб КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛистУчетаВыручка.КлючСтрокиВозврата,
	               |	ЛистУчетаВыручка.Номенклатура,
	               |	ЛистУчетаВыручка.Количество,
	               |	ЛистУчетаВыручка.Сумма,
	               |	ЛистУчетаВыручка.СтавкаНДС,
	               |	ЛистУчетаВыручка.СуммаПоНДС10,
	               |	ЛистУчетаВыручка.СуммаПоНДС18
	               |ПОМЕСТИТЬ ВТ_Текущая
	               |ИЗ
	               |	&ТабТек КАК ЛистУчетаВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК ЕстьРазличия
	               |ИЗ
	               |	ВТ_ПослеРедактирования КАК ВТ_ПослеРедактирования
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Текущая КАК ВТ_Текущая
	               |		ПО ВТ_ПослеРедактирования.КлючСтрокиВозврата = ВТ_Текущая.КлючСтрокиВозврата
	               |			И ВТ_ПослеРедактирования.Номенклатура = ВТ_Текущая.Номенклатура
	               |			И ВТ_ПослеРедактирования.Количество = ВТ_Текущая.Количество
	               |			И ВТ_ПослеРедактирования.Сумма = ВТ_Текущая.Сумма
	               |			И ВТ_ПослеРедактирования.СтавкаНДС = ВТ_Текущая.СтавкаНДС
	               |			И ВТ_ПослеРедактирования.СуммаПоНДС10 = ВТ_Текущая.СуммаПоНДС10
	               |			И ВТ_ПослеРедактирования.СуммаПоНДС18 = ВТ_Текущая.СуммаПоНДС18
	               |ГДЕ
	               |	(ЕСТЬNULL(ВТ_ПослеРедактирования.КлючСтрокиВозврата, ЛОЖЬ) <> ЕСТЬNULL(ВТ_Текущая.КлючСтрокиВозврата, ЛОЖЬ)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Количество, 0) <> ЕСТЬNULL(ВТ_Текущая.Количество, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.Сумма, 0) <> ЕСТЬNULL(ВТ_Текущая.Сумма, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) <> ЕСТЬNULL(ВТ_Текущая.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка))
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаПоНДС10, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаПоНДС10, 0)
	               |			ИЛИ ЕСТЬNULL(ВТ_ПослеРедактирования.СуммаПоНДС18, 0) <> ЕСТЬNULL(ВТ_Текущая.СуммаПоНДС18, 0))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Текущая
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПослеРедактирования";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции





&НаКлиенте
Процедура СуммаНалОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаРедактированияНал", Новый Структура("ТаблицаНаличнойОплаты, ЭтоИзбенка, ДатаЛиста", ПолучитьДанныеВыручка(), ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка), Объект.Дата), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если ТабЧастьНаличныхИзменена(Результат) Тогда
			Объект.НаличнаяЧастьСкорректирована = Истина;
			Объект.Выручка.Очистить();
			Для Каждого СтрокаИзменение Из Результат Цикл
				ЗаполнитьЗначенияСвойств(Объект.Выручка.Добавить(), СтрокаИзменение);
			КонецЦикла;
			Безнал = Объект.ОплатыПоБанковскимКартам.Итог("Сумма");
			Выручка = Объект.Выручка.Итог("Сумма");
			Объект.СуммаНал = Объект.Выручка.Итог("Сумма");
			Объект.ВозвратПокупателю = Объект.Выручка.Итог("СуммаВозврата");
			Объект.СуммаДокумента = Объект.СуммаНал + Безнал + Объект.ОплатаБаллами - Объект.ВозвратПокупателю;
			//ПересчитатьРасчетныеПараметры();
			СуммаZОтчета = Объект.СуммаНал + Безнал - Объект.ВозвратПокупателю;
		КонецЕсли;	
		ЗагрузитьДанныеZОтчетов();
		ПересчитатьРазницу();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыручка()
	Возврат ЗначениеВСтрокуВнутр(Объект.Выручка.Выгрузить());
КонецФункции

&НаСервере
Функция ПолучитьДанныеБезнал()
	Возврат ЗначениеВСтрокуВнутр(Объект.ОплатыПоБанковскимКартам.Выгрузить());
КонецФункции

&НаСервере
Функция ПолучитьДанныеАктов()
	Возврат ЗначениеВСтрокуВнутр(Объект.АктыКМ3.Выгрузить());
КонецФункции

&НаСервере
Функция ПолучитьДанныеЧековПоАктам()
	Возврат ЗначениеВСтрокуВнутр(Объект.ЧекиПоАктамКМ3.Выгрузить());
КонецФункции

&НаСервере
Функция ПолучитьДанныеВозвратыИзСейфа()
	Возврат ЗначениеВСтрокуВнутр(Объект.ВозвратыИзСейфа.Выгрузить());
КонецФункции

&НаСервере
Функция ПолучитьДанныеТоваровПоВозвратамИзСейфа()
	Возврат ЗначениеВСтрокуВнутр(Объект.ТоварыПоВозвратам.Выгрузить());
КонецФункции


&НаСервере
Функция ПолучитьДанныеБаллы()
	Возврат ЗначениеВСтрокуВнутр(Объект.ОплатыБонусами.Выгрузить());
КонецФункции

&НаКлиенте
Процедура СуммаЭквайрингОткрытие(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка=Ложь;
	//ТаблицаОплатыПоБанковскимКартам = ПолучитьДанныеОплатыПоБанковскимКартам();
	//ТаблицаОплатыПоБанковскимКартам.ВыбратьСтроку();
	
	СтандартнаяОбработка=Ложь;
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаРедактированияОплатаБезнал", Новый Структура("ТаблицаДанные, ДатаЛиста", ПолучитьДанныеБезнал(), Объект.Дата), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если ТабЧастьБезналичныхИзменена(Результат) Тогда
			Объект.БезналичнаяЧастьСкорректирована = Истина;
			Объект.ОплатыПоБанковскимКартам.Очистить();
			Для Каждого СтрокаИзменение Из Результат Цикл
				ЗаполнитьЗначенияСвойств(Объект.ОплатыПоБанковскимКартам.Добавить(), СтрокаИзменение);
			КонецЦикла;
			Объект.СуммаЭквайринг = Объект.ОплатыПоБанковскимКартам.Итог("Сумма");
			Объект.СуммаДокумента = Объект.СуммаНал + Объект.СуммаЭквайринг + Объект.ОплатаБаллами - Объект.ВозвратПокупателю;
			Объект.ВозвратПокупателюБезнал = Объект.ОплатыПоБанковскимКартам.Итог("СуммаВозврата");
			//ПересчитатьРасчетныеПараметры();
			СуммаZОтчета = Объект.СуммаНал + Объект.СуммаЭквайринг - Объект.ВозвратПокупателю;
		КонецЕсли;	
		ЗагрузитьДанныеZОтчетов();
		ПересчитатьРазницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПокупателюБезналОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаРедактированияОплатаБезнал", Новый Структура("ТаблицаДанные", ПолучитьДанныеБезнал()), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если ТабЧастьБезналичныхИзменена(Результат) Тогда
			Объект.БезналичнаяЧастьСкорректирована = Истина;
			Объект.ОплатыПоБанковскимКартам.Очистить();
			Для Каждого СтрокаИзменение Из Результат Цикл
				ЗаполнитьЗначенияСвойств(Объект.ОплатыПоБанковскимКартам.Добавить(), СтрокаИзменение);
			КонецЦикла;
			Объект.СуммаЭквайринг = Объект.ОплатыПоБанковскимКартам.Итог("Сумма");
			Объект.СуммаДокумента = Объект.СуммаНал + Объект.СуммаЭквайринг + Объект.ОплатаБаллами - Объект.ВозвратПокупателю;
			Объект.ВозвратПокупателюБезнал = Объект.ОплатыПоБанковскимКартам.Итог("СуммаВозврата");
			//ПересчитатьРасчетныеПараметры();
			СуммаZОтчета = Объект.СуммаНал + Объект.СуммаЭквайринг - Объект.ВозвратПокупателю;
		КонецЕсли;	
		ЗагрузитьДанныеZОтчетов();
		ПересчитатьРазницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБалламиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаРедактированияБаллы", Новый Структура("ТаблицаДанные", ПолучитьДанныеБаллы()), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если ТабЧастьБалловИзменена(Результат) Тогда
			Объект.ОплатаБалламиСкорректирована = Истина;
			Объект.ОплатыБонусами.Очистить();
			Для Каждого СтрокаИзменение Из Результат Цикл
				ЗаполнитьЗначенияСвойств(Объект.ОплатыБонусами.Добавить(), СтрокаИзменение);
			КонецЦикла;
			Объект.ОплатаБаллами = Объект.ОплатыБонусами.Итог("Сумма");
			Объект.СуммаДокумента = Объект.СуммаНал + Объект.СуммаЭквайринг + Объект.ОплатаБаллами;
			//ПересчитатьРасчетныеПараметры();
			СуммаZОтчета = Объект.СуммаНал + Объект.СуммаЭквайринг - Объект.ВозвратПокупателю;
		КонецЕсли;	
		ПересчитатьРазницу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОплатыПоБанковскимКартам()
	Возврат Объект.ОплатыПоБанковскимКартам.Выгрузить();
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗаписьИзмененийВSqlУдачна")
		И ТекущийОбъект.ДополнительныеСвойства.ЗаписьИзмененийВSqlУдачна = Истина Тогда
		ТоварыИзменения.Очистить();
		ТекущийОбъект.ДополнительныеСвойства.ЗаписьИзмененийВSqlУдачна = Ложь;
		ПерезаполнитьТаблицуТоваров();
	КонецЕсли;	
	
	ОбновитьДанныеZОтчетов();
	
	Если Объект.Обработан
		И ЗначениеЗаполнено(Объект.Расчетчик) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Объект", Объект.ТорговаяТочка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СоответствиеОбъектРоль.Объект
		               |ИЗ
		               |	РегистрСведений.СоответствиеОбъектРоль КАК СоответствиеОбъектРоль
		               |ГДЕ
		               |	СоответствиеОбъектРоль.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейпользователя.БухгалтерРасчетчик)
		               |	И СоответствиеОбъектРоль.Объект = &Объект";
					   
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Запрос.УстановитьПараметр("Сотрудник", Объект.Расчетчик.ФизЛицо);
			Запрос.Текст = "ВЫБРАТЬ
			               |	РолиПользователейСоставРоли.Ссылка
			               |ИЗ
			               |	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
			               |		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
			               |ГДЕ
			               |	РолиПользователейСоставРоли.Сотрудник = &Сотрудник
			               |	И РолиПользователейТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейпользователя.БухгалтерРасчетчик)";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Запись = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
				Запись.Период = Объект.Дата - 86400;
				Запись.Объект = Объект.ТорговаяТочка;
				Запись.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик;
				Запись.РольПользователя = Выборка.Ссылка;
				Запись.Записать();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Кратко(Команда)
	
	Элементы.ZОтчеты.Видимость = Ложь;
	Элементы.ZОтчетыДинамически.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подробно(Команда)
	
	Элементы.ZОтчетыДинамически.Видимость = Ложь;
	Элементы.ZОтчеты.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаДоставки(Команда)
	
	Перем мПараметрыФормы, Результат, мДоставкаСкорректирована, мТаблицаДоставки;
	
	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("Доставка", ПолучитьДанныеДоставка());
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаДоставка", мПараметрыФормы, ЭтаФорма);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мДоставкаСкорректирована = Результат.ДоставкаСкорректирована;
	Если мДоставкаСкорректирована
			И НЕ Объект.ДоставкаСкорректирована Тогда
		Объект.ДоставкаСкорректирована = Истина;
	КонецЕсли;
	
	мТаблицаДоставки = Результат.ТаблицаДоставки;
	Если ТипЗнч(мТаблицаДоставки) = Тип("ТаблицаЗначений") Тогда
		
		ОбновитьДанныеДоставка(мТаблицаДоставки);
		
		ПересчитатьРазницу();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКнопкиАктовКМ3()
	
	Если Объект.АктыКМ3.НайтиСтроки(Новый Структура("АктПолучен", Ложь)).Количество() > 0 Тогда
		Элементы.АктыКМ3.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.АктыКМ3.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	Если Объект.ВозвратыИзСейфа.НайтиСтроки(Новый Структура("ВозвратПолучен", Ложь)).Количество() > 0 Тогда
		Элементы.ВозвратыИзСейфа.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.ВозвратыИзСейфа.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьРасчетныеПараметры();
	
	Элементы.СуммаНал.КнопкаОткрытия = Объект.РасшифровкаНал;
	//Элементы.СуммаНал.ТолькоПросмотр = Объект.РасшифровкаНал;
	
	Элементы.СуммаЭквайринг.КнопкаОткрытия = Объект.РасшифровкаБН;
	//Элементы.СуммаЭквайринг.ТолькоПросмотр = Объект.РасшифровкаБН;
	
	Элементы.ВозвратПокупателюБезнал.КнопкаОткрытия = Объект.РасшифровкаБН;
	
	Элементы.ОплатаБаллами.КнопкаОткрытия = Объект.РасшифровкаБонусы;
	//Элементы.ОплатаБаллами.ТолькоПросмотр = Объект.РасшифровкаБонусы;
	
	//Элементы.ВозвратПокупателю.ТолькоПросмотр = Объект.РасшифровкаНал;
	
	ЭтоТоргТочкаИзбенки = ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка);
	Элементы.КорректировкаZ.ТолькоПросмотр 		= НЕ ЭтоТоргТочкаИзбенки;
	Элементы.КорректировкаБезнал.ТолькоПросмотр = НЕ ЭтоТоргТочкаИзбенки;
	Элементы.ZОтчеты.ИзменятьСоставСтрок = ЭтоТоргТочкаИзбенки;
	Элементы.ZОтчетыКасса.ТолькоПросмотр = НЕ ЭтоТоргТочкаИзбенки;
	Элементы.ZОтчетыZОтчет.ТолькоПросмотр = НЕ ЭтоТоргТочкаИзбенки;
	Элементы.ZОтчетыСумма.ТолькоПросмотр = НЕ ЭтоТоргТочкаИзбенки;
	
	УстановитьЦветКнопкиАктовКМ3();
	
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ZОтчетыДинамическиНакопленнаяСумма_ВручнуюПриИзменении(Элемент)
	
	СтрокиКасса = Объект.ZОтчеты.НайтиСтроки(Новый Структура("Касса", Элементы.ZОтчетыДинамически.ТекущиеДанные.Касса));
	Для Каждого СтрокаКасса Из СтрокиКасса Цикл 
		СтрокаКасса.ВведенныйОстаток = Элементы.ZОтчетыДинамически.ТекущиеДанные.ВведенныйОстаток;
	КонецЦикла;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьОстатки(Команда)
	
	СоответствиеЦен = Новый Соответствие();
	
	Для Каждого СтрокаТовар Из ТоварыДинамически Цикл
		Если СтрокаТовар.КонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеЦен.Вставить(СтрокаТовар.Номенклатура, 0);
	КонецЦикла;	
	ПолучитьЦеныДляНоменклатуры(СоответствиеЦен, Объект.Дата);
	
	Для Каждого СтрокаТовар Из ТоварыДинамически Цикл
		КонОстаток = СтрокаТовар.КонечныйОстаток;
		Если СтрокаТовар.КонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТовар.Разница 		= СтрокаТовар.Разница - КонОстаток;
		СтрокаТовар.КонечныйОстаток = 0;
		СтрокаДоб = ТоварыИзменения.Добавить();
		СтрокаДоб.Дата 			= Объект.Дата;
		СтрокаДоб.Номенклатура 	= СтрокаТовар.Номенклатура;
		СтрокаДоб.КодОперации 	= 510;
		СтрокаДоб.Количество 	= КонОстаток;
		СтрокаДоб.Сумма 		= КонОстаток * СоответствиеЦен.Получить(СтрокаТовар.Номенклатура);
		СтрокаТовар.Сумма 		= СтрокаТовар.Сумма + СтрокаДоб.Сумма;
	КонецЦикла;	
	
	ПересчитатьСуммуПродажТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныйОстатокПриИзменении(Элемент)
	
	ПересчитатьРазницу();
	ПересчитатьРасчетныеПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаИнкассацииПриИзменении(Элемент)
	
	//+++ZEZA
	//??? КонечныйОстаток = АК_РассчитатьКонечныйОстаток();
	//---ZEZA
	
	//
	ПересчитатьРазницу();
	ПересчитатьРасчетныеПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура КонечныйОстатокПриИзменении(Элемент)
	
	ПересчитатьРазницу();
	ПересчитатьРасчетныеПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаZПриИзменении(Элемент)
	
	ПересчитатьРазницу();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаБезналПриИзменении(Элемент)
	
	ПересчитатьРазницу();
	ЗагрузитьДанныеZОтчетов();
	
КонецПроцедуры

//+++ZEZA

&НаСервере
Функция АК_ПолучитьОстатокПоСчету5001(МоментВремени, Организация, СтруктурнаяЕдиница)
	
	//
	РезультатСумма = 0;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ФинансовыйОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет = ЗНАЧЕНИЕ(ПланСчетов.Финансовый.Касса), , Субконто1 = &Субконто1) КАК ФинансовыйОстатки";
				   
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Дата"		, МоментВремени);
	//ПостроительЗапроса.Параметры.Вставить("Организация"	, Организация);
	ПостроительЗапроса.Параметры.Вставить("Субконто1"	, СтруктурнаяЕдиница);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатСумма = Выборка.СуммаОстаток;
	КонецЕсли;
	
	//
	Возврат РезультатСумма;
	
КонецФункции	

&НаСервере
Функция АК_РассчитатьКонечныйОстаток()
	
	//
	Возврат НачальныйОстаток 
			+ Объект.СуммаДокумента 
			+ Объект.КорректировкаZ 
			- Объект.ОплатаБаллами 
			- Объект.СуммаЭквайринг 
			- Объект.КорректировкаБезнал 
			//- Объект.КорректировкаНалДоставка 
			//- Объект.КорректировкаБезналДоставка 
			- Объект.СуммаИнкассации 
			+ Объект.Отклонение;
					
КонецФункции					

&НаКлиенте
Процедура КонечныйОстаток1ПриИзменении(Элемент)
	
	//
	ПересчитатьРазницу();
	ПересчитатьРасчетныеПараметры();
	
КонецПроцедуры

//---ZEZA

&НаСервере
Процедура ПроверитьДублиПродавцов(Отказ)
	
	ТаблицаДублей = Документы.ЛистУчета.ЕстьДублиПродавцов(Объект.Продавцы.Выгрузить().ВыгрузитьКолонку("Продавец"), Объект.Дата, Объект.Ссылка);
	Если ТаблицаДублей.Количество() > 0 Тогда
		Отказ = Истина;
		Для Каждого СтрокаДубль Из ТаблицаДублей Цикл
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Указанный продавец: " + СтрокаДубль.Продавец + " уже есть в листе учета: " + СтрокаДубль.ЛистУчета;
			Сообщение.Сообщить();
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьДублиПродавцов(Отказ);
	КонецЕсли;	
	//+++АК GEYV 21.05.2015
	Если 
		//(Объект.КорректировкаZ <> Объект.Ссылка.КорректировкаZ И Объект.КорректировкаZ <> 0)
		//Или 
		(Объект.КорректировкаБезнал <> Объект.Ссылка.КорректировкаБезнал И Объект.КорректировкаБезнал <> 0)
		Тогда
		
		ТабДок = Печать(Неопределено);
		
		ТабДок.Показать();
		
	КонецЕсли;
	//---АК
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТовар(Команда)
	
	//Если НЕ ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выполнять корректировки для Вкусвилла");
	//	Возврат;
	//КонецЕсли;
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Если ВвестиЗначение(Номенклатура) Тогда
		СтрокиНоменклатура = ТоварыДинамически.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		Если СтрокиНоменклатура.Количество() > 0 Тогда
			Элементы.ТоварыДинамически.ТекущаяСтрока = СтрокиНоменклатура[0].ПолучитьИдентификатор();
		Иначе
			СтрокаТаб = ТоварыДинамически.Добавить();
			СтрокаТаб.Номенклатура = Номенклатура;
			Элементы.ТоварыДинамически.ТекущаяСтрока = СтрокаТаб.ПолучитьИдентификатор();
		КонецЕсли;	
		Элементы.ТоварыДинамически.ИзменитьСтроку();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрПользователь()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции	

&НаКлиенте
Процедура ОбработанПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Расчетчик)
		И Объект.Обработан Тогда
		Объект.Расчетчик = ПолучитьПараметрПользователь();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьЦеныДляНоменклатуры(СоответствиеЦен, Дата)
	
	Для Каждого ЭлементСоотвествие Из СоответствиеЦен Цикл
		СоответствиеЦен.Вставить(ЭлементСоотвествие.Ключ, Документы.ЛистУчета.ПолучитьСреднююЦенуДляНоменклатуры(ЭлементСоотвествие.Ключ, Дата));
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СкорректироватьПоЕЛУВыбранную(Команда)
	
	//Если НЕ ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выполнять корректировки для Вкусвилла");
	//	Возврат;
	//КонецЕсли;
	
	ТекДанные = Элементы.ТоварыДинамически.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонОстаток = ТекДанные.КонечныйОстаток;
	КонОстатокЕЛУ = ТекДанные.КонечныйОстатокЕЛУ;
	Разница = КонОстаток - КонОстатокЕЛУ;
	
	Если Разница = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СоответствиеЦен = Новый Соответствие();
	СоответствиеЦен.Вставить(ТекДанные.Номенклатура, 0);
	
	ПолучитьЦеныДляНоменклатуры(СоответствиеЦен, Объект.Дата);
	
	СтрокаДоб = ТоварыИзменения.Добавить();
	СтрокаДоб.Дата = Объект.Дата;
	СтрокаДоб.Номенклатура = ТекДанные.Номенклатура;
	СтрокаДоб.КодОперации = 510;
	СтрокаДоб.Количество = Разница;
	СтрокаДоб.ЭтоКорректировкаПоеЛУ = Истина;
	СтрокаДоб.Сумма = Разница * СоответствиеЦен.Получить(ТекДанные.Номенклатура);
	
	ТекДанные.КонечныйОстаток = КонОстатокЕЛУ;
	ТекДанные.Разница = ТекДанные.Разница - Разница;
	ТекДанные.Сумма = ТекДанные.Сумма + СтрокаДоб.Сумма;
	
	ПересчитатьСуммуПродажТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьПоЕЛУВсе(Команда)
	
	//Если НЕ ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выполнять корректировки для Вкусвилла");
	//	Возврат;
	//КонецЕсли;
	
	СоответствиеЦен = Новый Соответствие();
	
	Для Каждого ТекДанные Из ТоварыДинамически Цикл
		КонОстаток = ТекДанные.КонечныйОстаток;
		КонОстатокЕЛУ = ТекДанные.КонечныйОстатокЕЛУ;
		Разница = КонОстаток - КонОстатокЕЛУ;
		Если Разница = 0 Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеЦен.Вставить(ТекДанные.Номенклатура, 0);
	КонецЦикла;	
	ПолучитьЦеныДляНоменклатуры(СоответствиеЦен, Объект.Дата);
	
	Для Каждого ТекДанные Из ТоварыДинамически Цикл
		КонОстаток = ТекДанные.КонечныйОстаток;
		КонОстатокЕЛУ = ТекДанные.КонечныйОстатокЕЛУ;
		Разница = КонОстаток - КонОстатокЕЛУ;
		Если Разница = 0 Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаДоб = ТоварыИзменения.Добавить();
		СтрокаДоб.Дата = Объект.Дата;
		СтрокаДоб.Номенклатура = ТекДанные.Номенклатура;
		СтрокаДоб.КодОперации = 510;
		СтрокаДоб.Количество = Разница;
		СтрокаДоб.ЭтоКорректировкаПоеЛУ = Истина;
		СтрокаДоб.Сумма = Разница * СоответствиеЦен.Получить(ТекДанные.Номенклатура);
		
		ТекДанные.КонечныйОстаток = КонОстатокЕЛУ;
		ТекДанные.Разница = ТекДанные.Разница - Разница;
		ТекДанные.Сумма = ТекДанные.Сумма + СтрокаДоб.Сумма;
	КонецЦикла;
	
	ПересчитатьСуммуПродажТоваров();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуРедактированияАктов()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат КонецДня(Константы.ДатаЗапретаРедактированияАктовКМ3.Получить());
	
КонецФункции	

&НаКлиенте
Процедура АктыКМ3(Команда)
	
	Если Объект.Дата <= ПолучитьДатуРедактированияАктов() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Редактирование актов этого периода закрыто";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаРедактированияАктовКМ3", Новый Структура("ТаблицаАкты, ТаблицаЧеки, ТаблицаВозвратыИзСейфа, ТаблицаТоваровВозвратовИзСейфа, ЭтоИзбенка, ТТ, Дата, ЛистУчета"
											, ПолучитьДанныеАктов(), ПолучитьДанныеЧековПоАктам(), ПолучитьДанныеВозвратыИзСейфа(), ПолучитьДанныеТоваровПоВозвратамИзСейфа(), ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка), Объект.ТорговаяТочка, Объект.Дата, Объект.Ссылка), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		МассивАкты = Результат.Акты;
		МассивЧеки = Результат.Чеки;
		МассивВозвраты = Результат.Возвраты;
		МассивТоварыВозвратов = Результат.ТоварыВозвратов;
		Если ТабЧастьАктовИзменена(МассивАкты)
			ИЛИ ТабЧастьЧековИзменена(МассивЧеки) Тогда
			Объект.АктыРедактировались = Истина;
			Объект.АктыКМ3.Очистить();
			Объект.ЧекиПоАктамКМ3.Очистить();
			Для Каждого СтрокаИзменение Из МассивАкты Цикл
				ЗаполнитьЗначенияСвойств(Объект.АктыКМ3.Добавить(), СтрокаИзменение);
			КонецЦикла;
			
			Для Каждого СтрокаИзменение Из МассивЧеки Цикл
				ЗаполнитьЗначенияСвойств(Объект.ЧекиПоАктамКМ3.Добавить(), СтрокаИзменение);
			КонецЦикла;
		КонецЕсли;
		
		Если ТабЧастьВозвратовИзСейфаИзменена(МассивВозвраты)
			ИЛИ ТабЧастьТоваровВозвратовИзСейфаИзменена(МассивТоварыВозвратов) Тогда
			Объект.ВозвратыРедактировались = Истина;
			Объект.ВозвратыИзСейфа.Очистить();
			Объект.ТоварыПоВозвратам.Очистить();
			Для Каждого СтрокаИзменение Из МассивВозвраты Цикл
				ЗаполнитьЗначенияСвойств(Объект.ВозвратыИзСейфа.Добавить(), СтрокаИзменение);
			КонецЦикла;
			
			Для Каждого СтрокаИзменение Из МассивТоварыВозвратов Цикл
				ЗаполнитьЗначенияСвойств(Объект.ТоварыПоВозвратам.Добавить(), СтрокаИзменение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ПересчитатьРасчетныеПараметры();
	ПересчитатьРазницу();
	УстановитьЦветКнопкиАктовКМ3();
	
КонецПроцедуры

&НаКлиенте
Процедура ZОтчетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьДанныеZОтчетов();
		Объект.НеПерезагружатьЗОтчеты = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыИзСейфа(Команда)
	
	Если Объект.Дата <= ПолучитьДатуРедактированияАктов() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Редактирование актов этого периода закрыто";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаРедактированияВозвратовИзСейфа", Новый Структура("ТаблицаВозвратыИзСейфа, ТаблицаТоваровВозвратовИзСейфа, ЭтоИзбенка, ТТ, Дата"
											, ПолучитьДанныеВозвратыИзСейфа(), ПолучитьДанныеТоваровПоВозвратамИзСейфа(), ЭтоТорговаяТочкаИзбенки(Объект.ТорговаяТочка), Объект.ТорговаяТочка, Объект.Дата), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		МассивВозвраты = Результат.Возвраты;
		МассивТоварыВозвратов = Результат.ТоварыВозвратов;
		
		Если ТабЧастьВозвратовИзСейфаИзменена(МассивВозвраты)
			ИЛИ ТабЧастьТоваровВозвратовИзСейфаИзменена(МассивТоварыВозвратов) Тогда
			Объект.ВозвратыРедактировались = Истина;
			Объект.ВозвратыИзСейфа.Очистить();
			Объект.ТоварыПоВозвратам.Очистить();
			Для Каждого СтрокаИзменение Из МассивВозвраты Цикл
				ЗаполнитьЗначенияСвойств(Объект.ВозвратыИзСейфа.Добавить(), СтрокаИзменение);
			КонецЦикла;
			
			Для Каждого СтрокаИзменение Из МассивТоварыВозвратов Цикл
				ЗаполнитьЗначенияСвойств(Объект.ТоварыПоВозвратам.Добавить(), СтрокаИзменение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ПересчитатьРасчетныеПараметры();
	ПересчитатьРазницу();
	УстановитьЦветКнопкиАктовКМ3();
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровПереноса()
	
	Структура = Новый Структура();
	Структура.Вставить("ТабЗВЛисте", ЗначениеВСтрокуВнутр(Объект.ZОтчеты.Выгрузить()));
	Структура.Вставить("Выручка", ЗначениеВСтрокуВнутр(Объект.Выручка.Выгрузить()));
	Структура.Вставить("ОплатыПоБанковскимКартам", ЗначениеВСтрокуВнутр(Объект.ОплатыПоБанковскимКартам.Выгрузить()));
	
	Возврат Структура;
	
КонецФункции	

&НаКлиенте
Процедура ПеренестиСуммыВДругойЛист(Команда)
	
	СтрПереноса = ПолучитьСтруктуруПараметровПереноса();
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаПереносаЗОтчетов", Новый Структура("ТаблицаЗОтчетыВЛисте, Выручка, ОплатыПоБанковскимКартам, Дата, ТорговаяТочка, Организация"
																	, СтрПереноса.ТабЗВЛисте, СтрПереноса.Выручка, СтрПереноса.ОплатыПоБанковскимКартам, Объект.Дата, Объект.ТорговаяТочка, Объект.Организация));
																	
	Если Результат = Истина Тогда
		Объект.НеПривязанныеКассыПеренесены = Истина;
		Объект.НеПерезагружатьЗОтчеты = Истина;
		ПеречитатьТаблицуНепривязанныхКасс();
	КонецЕсли;																	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеИзАстораСервер()
	
	Возврат; //mind более не используется
	
	ТаблицаРКОиПКОАстора.Очистить();
	ИтогАсторПриход = 0;
	ИтогАсторРасход = 0;
	
	ИмяСервераИнформационнойБазыДляПодключения = "srv-sql01";
	ИмяИнформационнойБазыНаСервереДляПодключения 	= "VV";
	ПользовательИнформационнойБазыДляПодключения 	= "Обмен";
	ПарольИнформационнойБазыДляПодключения			= "123321";
	
	Попытка
		
		Коннектор = Новый COMObject("V82.COMConnector");
		// создается объект COM-соединение
		
		Строка = "Srvr="""+СокрЛП(ИмяСервераИнформационнойБазыДляПодключения)+""";Ref="""+СокрЛП(ИмяИнформационнойБазыНаСервереДляПодключения)+""";Usr="""+СокрЛП(ПользовательИнформационнойБазыДляПодключения)+""";Pwd="+ПарольИнформационнойБазыДляПодключения+";";
		СоединениеСБазой = Коннектор.Connect(Строка);
	Исключение
		СоединениеСБазой = Неопределено;
		Сообщить("Подключится к базе невозможно! " + Символы.ПС+Строка(ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
					|	ПриходныйКассовыйОрдер.ПометкаУдаления,
					|	ПриходныйКассовыйОрдер.Номер,
					|	ПриходныйКассовыйОрдер.Дата,
					|	ПриходныйКассовыйОрдер.Проведен,
					|	""ПКО"" КАК Вид,
					|	ПриходныйКассовыйОрдер.Сумма КАК Приход,
					|	0 КАК Расход,
					|	ПриходныйКассовыйОрдер.КлассификацияОперации,
					|	ПриходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств,
					|	ЕСТЬNULL(ВложенныйЗапрос.ЗначениеСубконтоПредставление, """") КАК ПредставлениеСубконто
					|ИЗ
					|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ПриходныйКассовыйОрдерСубконтоКоррСчета.Ссылка КАК Ссылка,
					|			ПРЕДСТАВЛЕНИЕ(ПриходныйКассовыйОрдерСубконтоКоррСчета.ЗначениеСубконто) КАК ЗначениеСубконтоПредставление
					|		ИЗ
					|			Документ.ПриходныйКассовыйОрдер.СубконтоКоррСчета КАК ПриходныйКассовыйОрдерСубконтоКоррСчета
					|		ГДЕ
					|			ПриходныйКассовыйОрдерСубконтоКоррСчета.НомерСтроки = 1) КАК ВложенныйЗапрос
					|		ПО ПриходныйКассовыйОрдер.Ссылка = ВложенныйЗапрос.Ссылка
					|ГДЕ
					|	НАЧАЛОПЕРИОДА(ПриходныйКассовыйОрдер.Дата, ДЕНЬ) = &Дата
					|	И ПриходныйКассовыйОрдер.ДенежнаяЯчейка.Владелец.ИД = &ИД
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ
					|	РасходныйКассовыйОрдер.ПометкаУдаления,
					|	РасходныйКассовыйОрдер.Номер,
					|	РасходныйКассовыйОрдер.Дата,
					|	РасходныйКассовыйОрдер.Проведен,
					|	""РКО"",
					|	0,
					|	РасходныйКассовыйОрдер.Сумма,
					|	РасходныйКассовыйОрдер.КлассификацияОперации,
					|	РасходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств,
					|	ЕСТЬNULL(ВложенныйЗапрос.ЗначениеСубконтоПредставление, """")
					|ИЗ
					|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			РасходныйКассовыйОрдерСубконтоКоррСчета.Ссылка КАК Ссылка,
					|			ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдерСубконтоКоррСчета.ЗначениеСубконто) КАК ЗначениеСубконтоПредставление
					|		ИЗ
					|			Документ.РасходныйКассовыйОрдер.СубконтоКоррСчета КАК РасходныйКассовыйОрдерСубконтоКоррСчета
					|		ГДЕ
					|			РасходныйКассовыйОрдерСубконтоКоррСчета.НомерСтроки = 1) КАК ВложенныйЗапрос
					|		ПО РасходныйКассовыйОрдер.Ссылка = ВложенныйЗапрос.Ссылка
					|ГДЕ
					|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, ДЕНЬ) = &Дата
					|	И РасходныйКассовыйОрдер.ДенежнаяЯчейка.Владелец.ИД = &ИД
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";
					
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ИД", Объект.ТорговаяТочка.id_TT);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ТаблицаРКОиПКОАстора.Добавить();
		СтрокаДоб.Проведен = Выборка.Проведен;
		СтрокаДоб.ПомеченНаУдаление = Выборка.ПометкаУдаления;
		СтрокаДоб.Дата = Выборка.Дата;
		СтрокаДоб.Номер = Выборка.Номер;
		СтрокаДоб.ВидДокумента = Выборка.Вид;
		СтрокаДоб.Приход = Выборка.Приход;
		СтрокаДоб.Расход = Выборка.Расход;
		СтрокаДоб.КлассификацияОперации = СоединениеСБазой.string(Выборка.КлассификацияОперации);
		СтрокаДоб.Информация = Выборка.ПредставлениеСубконто;
		СтрокаДоб.СтатьяДДС = СоединениеСБазой.string(Выборка.СтатьяДвиженияДенежныхСредств);
		ИтогАсторПриход = ИтогАсторПриход + СтрокаДоб.Приход;
		ИтогАсторРасход = ИтогАсторРасход + СтрокаДоб.Расход;
	КонецЦикла;	
	
	СоединениеСБазой = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзАстора(Команда)
	
	ПрочитатьДанныеИзАстораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьРеквизитыШапки(Команда)
	
	Элементы.Группа10.Видимость = НЕ Элементы.Группа10.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасхожденияСоСкладомСервер()
	
	РасхожденияСоСкладом.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЗ_Запрос.Номенклатура,
	               |	СУММА(ВЗ_Запрос.ПолученоТочкой) КАК ПолученоТочкой,
	               |	СУММА(ВЗ_Запрос.ОтправленоСкладом) КАК ОтправленоСкладом,
	               |	СУММА(ВЗ_Запрос.ПолученоТочкой - ВЗ_Запрос.ОтправленоСкладом) КАК Разница
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура КАК Номенклатура,
	               |		ДвиженияТоваровПоЛистамУчетаОбороты.КоличествоОборот КАК ПолученоТочкой,
	               |		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОтправленоСкладом
	               |	ИЗ
	               |		РегистрНакопления.ДвиженияТоваровПоЛистамУчета.Обороты(
	               |				&ДатаНач,
	               |				&ДатаКон,
	               |				,
	               |				ВидДвиженияТовара В (ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Поступление), ЗНАЧЕНИЕ(Перечисление.ВидДвиженияТовараПоЛистуУчета.Разница))
	               |					И СтруктурнаяЕдиница = &ТТ) КАК ДвиженияТоваровПоЛистамУчетаОбороты
	               |	ГДЕ
	               |		НЕ ДвиженияТоваровПоЛистамУчетаОбороты.Номенклатура В
	               |					(ВЫБРАТЬ
	               |						Номенклатура.Ссылка
	               |					ИЗ
	               |						Справочник.Номенклатура КАК Номенклатура
	               |					ГДЕ
	               |						Номенклатура.СлужебныйТовар = ИСТИНА)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		РасходныйОрдерСкладТовары.Номенклатура,
	               |		0,
	               |		РасходныйОрдерСкладТовары.Количество
	               |	ИЗ
	               |		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
	               |	ГДЕ
	               |		ВЫБОР
	               |				КОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения <> ДАТАВРЕМЯ(1, 1, 1)
	               |					ТОГДА РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения
	               |				ИНАЧЕ РасходныйОрдерСкладТовары.Ссылка.Дата
	               |			КОНЕЦ МЕЖДУ &ДатаНачД И &ДатаКонД
	               |		И РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |		И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
	               |		И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
	               |		И РасходныйОрдерСкладТовары.Ссылка.Получатель = &ТТ
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПриходныйОрдерСкладТовары.Номенклатура,
	               |		0,
	               |		ПриходныйОрдерСкладТовары.Количество * -1
	               |	ИЗ
	               |		Документ.ПриходныйОрдерСклад.Товары КАК ПриходныйОрдерСкладТовары
	               |	ГДЕ
	               |		ПриходныйОрдерСкладТовары.Ссылка.Дата МЕЖДУ &ДатаНачД И &ДатаКонД
	               |		И ПриходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
	               |		И ПриходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ИзТорговойТочки)
	               |		И ПриходныйОрдерСкладТовары.Ссылка.Поставщик = &ТТ) КАК ВЗ_Запрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЗ_Запрос.Номенклатура
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВЗ_Запрос.ПолученоТочкой - ВЗ_Запрос.ОтправленоСкладом) <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЗ_Запрос.Номенклатура.Наименование";
							  
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачД", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКонД", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ТТ", Объект.ТорговаяТочка);
	
	РасхожденияСоСкладом.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасхожденияСоСкладом(Команда)
	
	ОбновитьРасхожденияСоСкладомСервер();
	
КонецПроцедуры

//+++АК GEYV 21.05.2015
&НаСервере
Функция Печать(ПараметрКоманды)
	Возврат Документы.ЛистУчета.НапечататьОбъяснительную(Объект,Новый ТабличныйДокумент);
КонецФункции
//---АК

&НаСервере
Процедура ПоискТовараПоПодстрокеПриИзмененииСервер()
	
	Если НЕ ЗначениеЗаполнено(ПоискТовараПоПодстроке)
		И НЕ ВыводитьСтрокиТолькоСРазницей
		И НЕ ВыводитьТолькоСОтрицательнымиОстатками Тогда
		Элементы.ТоварыДинамически.ОтборСтрок = Новый ФиксированнаяСтруктура();
	Иначе	
		//Запрос = Новый Запрос();
		//Запрос.УстановитьПараметр("Таб", ТоварыДинамически.Выгрузить());
		//Запрос.УстановитьПараметр("Наименование", "%" + ПоискТовараПоПодстроке+ "%");
		//Запрос.УстановитьПараметр("ВыводитьСРазницей", ВыводитьСтрокиТолькоСРазницей);
		//Запрос.Текст = "ВЫБРАТЬ
		//			   |	ВТ.Номенклатура,
		//			   |	ВТ.Разница
		//			   |ПОМЕСТИТЬ ВТ_Таб
		//			   |ИЗ
		//			   |	&Таб КАК ВТ
		//			   |;
		//			   |
		//			   |////////////////////////////////////////////////////////////////////////////////
		//			   |ВЫБРАТЬ
		//			   |	ВТ_Таб.Номенклатура
		//			   |ИЗ
		//			   |	ВТ_Таб КАК ВТ_Таб
		//			   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		//			   |		ПО ВТ_Таб.Номенклатура = НоменклатураСпр.Ссылка
		//			   |ГДЕ
		//			   |	НоменклатураСпр.Наименование ПОДОБНО &Наименование
		//			   |	И (ВТ_Таб.Разница <> 0
		//			   |			ИЛИ &ВыводитьСРазницей = ЛОЖЬ)";
		//			   
		//ТоварыМассив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		//
		//Для Каждого СтрокаТовар Из ТоварыДинамически Цикл
		//	Если ТоварыМассив.Найти(СтрокаТовар.Номенклатура) <> Неопределено Тогда
		//		СтрокаТовар.ПодходитПодОтбор = Истина;
		//	Иначе
		//		СтрокаТовар.ПодходитПодОтбор = Ложь;
		//	КонецЕсли;	
		//КонецЦикла;	
		//
		//Элементы.ТоварыДинамически.ОтборСтрок = Новый ФиксированнаяСтруктура("ПодходитПодОтбор", Истина);
		Для Каждого СтрокаТовар Из ТоварыДинамически Цикл
			Если СтрокаТовар.Номенклатура = ПоискТовараПоПодстроке
				ИЛИ (СтрокаТовар.Разница <> 0 И ВыводитьСтрокиТолькоСРазницей)
				ИЛИ (СтрокаТовар.КонечныйОстаток < 0 И ВыводитьТолькоСОтрицательнымиОстатками)
				ИЛИ (СтрокаТовар.КонечныйОстатокЕЛУ < 0 И ВыводитьТолькоСОтрицательнымиОстатками) Тогда
				СтрокаТовар.ПодходитПодОтбор = Истина;
			Иначе
				СтрокаТовар.ПодходитПодОтбор = Ложь;
			КонецЕсли;	
		КонецЦикла;	
		
		Элементы.ТоварыДинамически.ОтборСтрок = Новый ФиксированнаяСтруктура("ПодходитПодОтбор", Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискТовараПоПодстрокеПриИзменении(Элемент)
	
	ПоискТовараПоПодстрокеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьСтрокиТолькоСРазницейПриИзменении(Элемент)
	
	ПоискТовараПоПодстрокеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьТолькоСОтрицательнымиОстаткамиПриИзменении(Элемент)
	ПоискТовараПоПодстрокеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКИнвенатризации(Команда)
	
	ТекСтрока = Элементы.ТоварыДинамически.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ПозицииКИнвентаризации.Количество() >= 10 Тогда
		Предупреждение("Нельзя помещать более 10 позиций к инвентаризации");
		Возврат;
	КонецЕсли;	
	
	Если Объект.ПозицииКИнвентаризации.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрока.КИнвентаризации = Истина; 
	
	СтрокаДоб = Объект.ПозицииКИнвентаризации.Добавить();
	СтрокаДоб.Номенклатура = ТекСтрока.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСИнвентаризации(Команда)
	
	ТекСтрока = Элементы.ТоварыДинамически.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока.КИнвентаризации = Ложь; 
	КонецЕсли;
	
	КолвоСтрок = Объект.ПозицииКИнвентаризации.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если Объект.ПозицииКИнвентаризации[КолвоСтрок - н].Номенклатура = ТекСтрока.Номенклатура Тогда
			Объект.ПозицииКИнвентаризации.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазницаОтработана(Команда)
	
	ТекСтрока = Элементы.ТоварыДинамически.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ОтработанныеРазницыПоТоварам.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрока.РазницаОтработана = Истина; 
	
	СтрокаДоб = Объект.ОтработанныеРазницыПоТоварам.Добавить();
	СтрокаДоб.Номенклатура = ТекСтрока.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРазницаОтработана(Команда)
	
	ТекСтрока = Элементы.ТоварыДинамически.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока.РазницаОтработана = Ложь; 
	КонецЕсли;
	
	КолвоСтрок = Объект.ОтработанныеРазницыПоТоварам.Количество();
	Для н = 1 По КолвоСтрок Цикл
		Если Объект.ОтработанныеРазницыПоТоварам[КолвоСтрок - н].Номенклатура = ТекСтрока.Номенклатура Тогда
			Объект.ОтработанныеРазницыПоТоварам.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьФайлДвоичнымиДаннымиВСтрокуПриложенных(ИдентификаторСтроки, Знач ДвоичныеДанные)
	ОбъектТекущий = РеквизитФормыВЗначение("Объект");
	ТекДанные = Объект.ПриложенныеДокументы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбъектТекущий.ПриложенныеДокументы[ТекДанные.НомерСтроки - 1].ВременноеХранилище = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	ЗначениеВРеквизитФормы(ОбъектТекущий, "Объект");
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьФайлыПриложенныеДокументы(Команда)
	
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайла");
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		Для Каждого СтрокаФайл Из СтруктураВозврат.ТЗ_ИмяФайла Цикл
			Файл = Новый Файл(СтрокаФайл.ИмяФайла);
			СтрокаДоб = Объект.ПриложенныеДокументы.Добавить();
			СтрокаДоб.Наименование = Файл.ИмяБезРасширения;
			СтрокаДоб.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
			СтрокаДоб.Расширение = Файл.Расширение;
			СтрокаДоб.ВременноеХранилище = ЗначениеВСтрокуВнутр(Новый ДвоичныеДанные(СтрокаФайл.ИмяФайла));
			//ДобавитьФайлДвоичнымиДаннымиВСтрокуПриложенных(СтрокаДоб.ПолучитьИдентификатор(), Новый ДвоичныеДанные(СтрокаФайл.ИмяФайла));
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеФайла(ИдентификаторСтроки)
	
	КаталогПриложенных = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогПриложенных, 1) <> "\" Тогда
		КаталогПриложенных = КаталогПриложенных + "\";
	КонецЕсли;
	КаталогПриложенных = КаталогПриложенных + "ЛистыУчета\" + Формат(Объект.Дата, "ДФ=yyyyMM") + "\";
	
	ТекДанные = Объект.ПриложенныеДокументы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗначениеВХранилище = ТекДанные.ВременноеХранилище;
	Если ЗначениеЗаполнено(ЗначениеВХранилище) Тогда
		Возврат ЗначениеИзСтрокиВнутр(ЗначениеВХранилище);
	Иначе
		Возврат Новый ДвоичныеДанные(КаталогПриложенных + ТекДанные.УникальныйИдентификатор + ТекДанные.Расширение);
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ПриложенныеДокументыНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Каталог = КаталогВременныхФайлов();
	ДвДанные = ПолучитьДвоичныеДанныеФайла(Элементы.ПриложенныеДокументы.ТекущиеДанные.ПолучитьИдентификатор());
	//ДвДанные = Элементы.ПриложенныеДокументы.ТекущиеДанные.ВременноеХранилище;
	ДвДанные.Записать(Каталог + Элементы.ПриложенныеДокументы.ТекущиеДанные.УникальныйИдентификатор + Элементы.ПриложенныеДокументы.ТекущиеДанные.Расширение);
	ЗапуститьПриложение(Каталог + Элементы.ПриложенныеДокументы.ТекущиеДанные.УникальныйИдентификатор + Элементы.ПриложенныеДокументы.ТекущиеДанные.Расширение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СтруктураВозврат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораФайла");
	Если СтруктураВозврат <> Неопределено
		И СтруктураВозврат.БылВыборФайла Тогда
		Для Каждого СтрокаФайл Из СтруктураВозврат.ТЗ_ИмяФайла Цикл
			Файл = Новый Файл(СтрокаФайл.ИмяФайла);
			СтрокаДоб = Объект.ПриложенныеДокументы.Добавить();
			СтрокаДоб.Наименование = Файл.ИмяБезРасширения;
			СтрокаДоб.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
			СтрокаДоб.Расширение = Файл.Расширение;
			СтрокаДоб.ВременноеХранилище = ЗначениеВСтрокуВнутр(Новый ДвоичныеДанные(СтрокаФайл.ИмяФайла));
			//ДобавитьФайлДвоичнымиДаннымиВСтрокуПриложенных(СтрокаДоб.ПолучитьИдентификатор(), Новый ДвоичныеДанные(СтрокаФайл.ИмяФайла));
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмо(Команда)
	
	ОткрытьФорму("Документ.ЛистУчета.Форма.ФормаОтправкиУведомления", Новый Структура("ТТ, ТемаПисьма", Объект.ТорговаяТочка, Объект.Комментарий));
	
КонецПроцедуры

Функция ПолучитьТабДокТорг16()
	
	ТабДокумент = Новый ТабличныйДокумент();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", Объект.ТоварыАктаСписания.Выгрузить());
	Запрос.УстановитьПараметр("ДатаПрошлМесяц", ДобавитьМесяц(Объект.Дата, -1));
	Запрос.УстановитьПараметр("ТекМесяц", Объект.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Номенклатура
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СебестоимостьТоваровСрезПоследнихПрошлМесяц.Номенклатура, СебестоимостьТоваровСрезПоследних.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(СебестоимостьТоваровСрезПоследнихПрошлМесяц.Себестоимость, СебестоимостьТоваровСрезПоследних.Себестоимость) КАК Себестоимость
	               |ИЗ
	               |	РегистрСведений.СебестоимостьТоваров.СрезПоследних(
	               |			&ДатаПрошлМесяц,
	               |			Номенклатура В
	               |				(ВЫБРАТЬ
	               |					ВТ_Товары.Номенклатура
	               |				ИЗ
	               |					ВТ_Товары КАК ВТ_Товары)) КАК СебестоимостьТоваровСрезПоследнихПрошлМесяц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьТоваров.СрезПоследних(
	               |				&ТекМесяц,
	               |				Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_Товары.Номенклатура
	               |					ИЗ
	               |						ВТ_Товары КАК ВТ_Товары)) КАК СебестоимостьТоваровСрезПоследних
	               |		ПО СебестоимостьТоваровСрезПоследнихПрошлМесяц.Номенклатура = СебестоимостьТоваровСрезПоследних.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТовар = Объект.ТоварыАктаСписания.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого СтрокаТовар Из СтрокиТовар Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовар.Цена) Тогда
				СтрокаТовар.Цена = Выборка.Себестоимость;
			КонецЕсли;	
			СтрокаТовар.Сумма = СтрокаТовар.Количество * СтрокаТовар.Цена;
		КонецЦикла;	
	КонецЦикла;	
	
	Если Объект.ТоварыАктаСписания.НайтиСтроки(Новый Структура("НомерАкта", 0)).Количество() > 0 Тогда
		//mind заблокируем таблицу
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировка = Блокировка.Добавить();
		ЭлементБлокировка.Область = "РегистрСведений.НомераДокументовПериодические";
		ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировка.УстановитьЗначение("Вид", "АктСписанияЛистУчета");
		ЭлементБлокировка.УстановитьЗначение("Организация", Объект.Организация);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Вид", "АктСписанияЛистУчета");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Период", НачалоГода(Объект.Дата));
		Запрос.Текст = "ВЫБРАТЬ
		               |	НомераДокументов.Номер,
		               |	НомераДокументов.Организация.Префикс КАК Префикс
		               |ИЗ
		               |	РегистрСведений.НомераДокументовПериодические КАК НомераДокументов
		               |ГДЕ
		               |	НомераДокументов.Период = &Период
		               |	И НомераДокументов.Вид = &Вид
		               |	И НомераДокументов.Организация = &Организация";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		СтандартнаяОбработка = Ложь;
		Если Выборка.Следующий() Тогда
			МаксНомер = Выборка.Номер + 1;
		Иначе
			МаксНомер = 1;
		КонецЕсли;
		
		СтрокиБезНомера = Объект.ТоварыАктаСписания.НайтиСтроки(Новый Структура("НомерАкта", 0));
		Для Каждого СтрокаБезНомера Из СтрокиБезНомера Цикл
			СтрокаБезНомера.НомерАкта = МаксНомер;
		КонецЦикла;	
		
		Запись = РегистрыСведений.НомераДокументовПериодические.СоздатьМенеджерЗаписи();
		Запись.Период = НачалоГода(Объект.Дата);
		Запись.Вид = "АктСписанияЛистУчета";
		Запись.Организация = Объект.Организация;
		Запись.Номер = МаксНомер;
		Запись.Записать();
	КонецЕсли;
	
	Макет = Документы.ЛистУчета.ПолучитьМакет("ТОРГ16");
	
	// Выводим общие реквизиты шапки
	ОписаниеОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
	Если Объект.ТоварыАктаСписания.Количество() > 0 Тогда
		ОбластьМакета.Параметры.НомерДокумента            = Формат(Объект.ТоварыАктаСписания[0].НомерАкта, "ЧГ=0");
	КонецЕсли;	
	ОбластьМакета.Параметры.ДатаДокумента            = Формат(Объект.Дата, "ДЛФ=DD");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ОписаниеОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Объект.ТорговаяТочка;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Объект.Организация, Объект.Дата);
	
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
	
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 11;
	СтрокПодвала    = 0;
	НомерСтраницы   = 1;
	Ном             = 0;
	
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.УстановитьПараметр("Таб", Объект.ТоварыАктаСписания.Выгрузить());
	ЗапросТовары.Текст = "ВЫБРАТЬ
	                     |	Таб.Номенклатура,
	                     |	Таб.Количество,
	                     |	Таб.ПричинаСписания,
	                     |	Таб.Цена,
	                     |	Таб.Сумма
	                     |ПОМЕСТИТЬ ВТ_Данные
	                     |ИЗ
	                     |	&Таб КАК Таб
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	ВТ_Данные.Номенклатура,
	                     |	ВТ_Данные.Количество,
	                     |	ВТ_Данные.ПричинаСписания,
	                     |	ВТ_Данные.Цена,
	                     |	ВТ_Данные.Сумма,
	                     |	НоменклатураСпр.Наименование КАК Товар,
	                     |	НоменклатураСпр.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдИзмКод,
	                     |	НоменклатураСпр.ЕдиницаХраненияОстатков.Наименование КАК ЕдИзм
	                     |ИЗ
	                     |	ВТ_Данные КАК ВТ_Данные
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	                     |		ПО ВТ_Данные.Номенклатура = НоменклатураСпр.Ссылка
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	Товар";
						 
						 
	ВыборкаСтрокТовары = ЗапросТовары.Выполнить().Выбрать();

	КоличествоСтрок  = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ДатаСписанияТовара = Объект.Дата;
		ОбластьМакета.Параметры.ПризнакиПониженияКачестваНаименование = ВыборкаСтрокТовары.ПричинаСписания;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	СтрокНаСтранице = 27;
	СтрокШапки      = 5;
	СтрокПодвала    = 11;
	НомерСтраницы   = 1;
	Ном             = 0;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтраницы    = НомерСтраницы + 1;
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	ИтогоСтоимость = 0;

	// Выводим многострочную часть документа
	ВыборкаСтрокТовары.Сбросить();
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		ОбластьМакета.Параметры.КоличествоМест = ВыборкаСтрокТовары.Количество;
		
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.Товар;
		ОбластьМакета.Параметры.Цена = ВыборкаСтрокТовары.Цена;
		ОбластьМакета.Параметры.Стоимость = ВыборкаСтрокТовары.Сумма;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;

	КонецЦикла;

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.СуммаСписанияПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСтоимость, Справочники.Валюты.НайтиПоКоду("643"));
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
КонецФункции	

&НаКлиенте
Процедура АктНаСписание(Команда)
	
	МассивДанные = Новый Массив();
	Для Каждого СтрокаТаб Из Объект.ТоварыАктаСписания Цикл
		МассивДанные.Добавить(Новый Структура("Номенклатура, Количество", СтрокаТаб.Номенклатура, СтрокаТаб.Количество));
	КонецЦикла;
	
	Результат = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаУказанияСоставаАкта", Новый Структура("ПричинаСписания, ДанныеАкта, ЛистСсылка", ?(Объект.ТоварыАктаСписания.Количество() > 0, Объект.ТоварыАктаСписания[0].ПричинаСписания, ""), МассивДанные, Объект.Ссылка));
	Если Результат <> Неопределено Тогда
		НомерАкта = 0;
		Если Объект.ТоварыАктаСписания.Количество() > 0 Тогда
			НомерАкта = Объект.ТоварыАктаСписания[0].НомерАкта;
		КонецЕсли;	
		Объект.ТоварыАктаСписания.Очистить();
		Для Каждого ЭлементМассива Из Результат Цикл
			СтрокаДоб = Объект.ТоварыАктаСписания.Добавить();
			СтрокаДоб.НомерАкта = НомерАкта;
			СтрокаДоб.ПричинаСписания = ЭлементМассива.ПричинаСписания;
			СтрокаДоб.Номенклатура = ЭлементМассива.Номенклатура;
			СтрокаДоб.Количество = ЭлементМассива.Количество;
		КонецЦикла;
		ТабДок = ПолучитьТабДокТорг16();
		ТабДок.Показать();
		Записать();
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДанныеДляФормированияПретензии()
	
	СтруктураВозврат = Новый Структура();
	Если Объект.Организация.ИНН = "7726660031" Тогда
		СтруктураВозврат.Вставить("ФайлМакет", Документы.ЛистУчета.ПолучитьМакет("ПретензияЛугДаПоле"));
	Иначе	
		СтруктураВозврат.Вставить("ФайлМакет", Документы.ЛистУчета.ПолучитьМакет("ПретензияВкусвилл"));
	КонецЕсли;	
	
	СтруктураВозврат.Вставить("Адрес", Объект.ТорговаяТочка.Адрес);
	СтруктураВозврат.Вставить("Сумма", Объект.ТоварыАктаСписания.Итог("Сумма"));
	СтруктураВозврат.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СтруктураВозврат.Сумма, Справочники.Валюты.НайтиПоКоду("643")));
	СтруктураВозврат.Вставить("НомерАкта", ?(Объект.ТоварыАктаСписания.Количество() > 0, Формат(Объект.ТоварыАктаСписания[0].НомерАкта, "ЧГ=0"), ""));
	
	Возврат СтруктураВозврат;
	
КонецФункции	

&НаКлиенте
Процедура ПретензияПоМонтажуОборудования(Команда)
	
	Предупреждение("Претензия действительна ТОЛЬКО к Договору монтажа, заключенного по форме Договора монтажа ООО ""Вкусвилл""\ ООО ""Луг да Поле"". К Договорам, заключенным по форме Поставщика претензия НЕДЕЙСТВИТЕЛЬНА!");
	
	СтрДанные = ПолучитьДанныеДляФормированияПретензии();
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Фильтр = "Файл претензии (*.doc)|*.doc";
	ДиалогСохранения.МножественныйВыбор = Ложь;
	ДиалогСохранения.Заголовок = "Введите имя файла для сохранения";
	Если ДиалогСохранения.Выбрать() Тогда
		СтрДанные.ФайлМакет.Записать(ДиалогСохранения.ПолноеИмяФайла);
		Попытка
			КомОбъектВорд = Новый COMОбъект("Word.Application");
		Исключение
			Сообщить("Не удалось создать объект Word. " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		ДокВорд = КомОбъектВорд.Documents.Open(ДиалогСохранения.ПолноеИмяФайла);
		ДокВорд.Bookmarks("АдресМагазина").Range.Select();
		КомОбъектВорд.Selection.TypeText(СтрДанные.Адрес);
		
		ДокВорд.Bookmarks("ДатаАкта").Range.Select();
		КомОбъектВорд.Selection.TypeText(Формат(Объект.Дата, "ДЛФ=DD"));
		
		ДокВорд.Bookmarks("ДатаТекст").Range.Select();
		КомОбъектВорд.Selection.TypeText(Формат(Объект.Дата, "ДЛФ=DD"));
		
		ДокВорд.Bookmarks("НомерАкта").Range.Select();
		КомОбъектВорд.Selection.TypeText(СтрДанные.НомерАкта);
		
		ДокВорд.Bookmarks("СуммаПропись1").Range.Select();
		КомОбъектВорд.Selection.TypeText(Формат(СтрДанные.Сумма, "ЧДЦ=2") + " (" + СтрДанные.СуммаПрописью + ")");
		
		ДокВорд.Bookmarks("СуммаПропись2").Range.Select();
		КомОбъектВорд.Selection.TypeText(Формат(СтрДанные.Сумма, "ЧДЦ=2") + " (" + СтрДанные.СуммаПрописью + ")");
		ДокВорд.Close(-1);
		КомОбъектВорд = Неопределено;
		ЗапуститьПриложение(ДиалогСохранения.ПолноеИмяФайла);
	КонецЕсли;	
	
КонецПроцедуры

//+++АК MIND 2017.11.18 вызывается из интерфейсной функции пользователя для привязки FiscNo
Функция ПолучитьСписокFiscNoНаВыбор()
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT VZ.FiscNo, VZ.summ_NonResttable
					|FROM (SELECT [cashid]
					|      ,[shift_no]
					|      ,[FiscSessinonNo]
					|      ,[shift_closedate]
					|      ,[summ_shift]
					|      ,[summ_cash]
					|      ,[summ_bank]
					|      ,[summ_NonResttable]
					|      ,[FiscNo]
					|      ,[Model]
					|      ,[ROMVersion]
					|      ,ROW_NUMBER() over (Partition BY FiscNo order by shift_closedate desc) as rn
					|  FROM [SMS_REPL].[dbo].[Z_Reports] (nolock)
					|  where shift_closedate between " + ВнешниеДанные.ФорматПоля(НачалоДня(Объект.Дата)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(Объект.Дата)) + "
					|		and cashid between " + ВнешниеДанные.ФорматПоля(Объект.ТорговаяТочка.НомерТочки * 10) + " and " + ВнешниеДанные.ФорматПоля(Объект.ТорговаяТочка.НомерТочки * 10 + 9) + ") as VZ
					|  WHERE VZ.rn = 1";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	СписокКВыбору = Новый СписокЗначений();
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СписокКВыбору.Добавить(Формат(Rs.Fields("FiscNo").Value, "ЧГ=0"), "Сумма по Z: " + Формат(Rs.Fields("summ_NonResttable").Value, "ЧГ=0"));
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат СписокКВыбору;
	
КонецФункции	

//+++АК MIND 2017.11.18 
Процедура ЗаписатьFiscNoВКассу(Касса, FiscNo)
	
	КассаОбъект = Касса.ПолучитьОбъект();
	КассаОбъект.Fisc_no = FiscNo;
	КассаОбъект.Записать();
	ЗагрузитьДанныеZОтчетов();
	
КонецПроцедуры	

//+++АК MIND 2017.11.18 эта сервисная функция привязывает в кассу FiscNo по выбранному пользователем значения из sql
&НаКлиенте
Процедура УстановитьСоответствиеИзSQL(Команда)
	
	ТекДанные = Элементы.ZОтчетыДинамически.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СписокКВыбору = ПолучитьСписокFiscNoНаВыбор();
	ПредВыбор = Неопределено;
	Для Каждого ЭлементСписка Из СписокКВыбору Цикл
		Если ЭлементСписка.Представление = "Сумма по Z: " + Формат(ТекДанные.НакопленнаяСумма, "ЧГ=0") Тогда
			ПредВыбор = ЭлементСписка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	ВыбранныйЭлемент = СписокКВыбору.ВыбратьЭлемент("Выберите элемент по сумме накопленных Z", ПредВыбор);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ЗаписатьFiscNoВКассу(ТекДанные.Касса, ВыбранныйЭлемент.Значение);
	КонецЕсли;	
	
КонецПроцедуры

//+++АК SaMi 2018.07.18 ИП-00019214 
Процедура ПроверитьВозвратыИзСейфа(Отказ)
	
	УстанавливатьОтказ = Ложь;
	
	Если Объект.Обработан Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЛистУчета.Обработан
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			УстанавливатьОтказ = НЕ Выборка.Обработан;
		КонецЕсли;
		
	КонецЕсли; 
	
	ТаблицаСравнения = Объект.ТоварыПоВозвратам.Выгрузить(, "Номенклатура, Количество");
	
	ТаблицаСравнения.Свернуть("Номенклатура", "Количество");
	ТаблицаСравнения.Колонки.Добавить("КоличествоПоТовародвижениям", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	 
	Для Каждого Строка Из ТоварыДинамически Цикл
		Если Строка.ВозвратПокупателя <> 0 Тогда
			СтрокаТовара = ТаблицаСравнения.Найти(Строка.Номенклатура);
			
			Если СтрокаТовара = Неопределено Тогда
				СтрокаТовара = ТаблицаСравнения.Добавить();
				СтрокаТовара.Номенклатура = Строка.Номенклатура;  
			КонецЕсли; 
			
			СтрокаТовара.КоличествоПоТовародвижениям = СтрокаТовара.КоличествоПоТовародвижениям + Строка.ВозвратПокупателя;
		КонецЕсли; 
	КонецЦикла;  
	
	ЕстьРасхождения = Ложь;
	
	Для Каждого Строка Из ТаблицаСравнения Цикл
		Если Строка.Количество <> Строка.КоличествоПоТовародвижениям Тогда
			Сообщить("Обнаружены расхождения по возврату товара <" + Строка.Номенклатура + ">. По товародвижению : " + Строка.КоличествоПоТовародвижениям + ". По возврату из сейфа: " + Строка.Количество, СтатусСообщения.Важное);
			ЕстьРасхождения = Истина;
		КонецЕсли; 
	КонецЦикла;  
	
	Если ЕстьРасхождения И УстанавливатьОтказ Тогда
		Сообщить("Нельзя провести документ в статусе ""Обработан""", СтатусСообщения.Важное);		
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры 
//---АК SaMi  2018.07.18 

//+++АК sils 14.12.2018 ИП-00020532
&НаКлиенте
Процедура УслугиДинамическиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
