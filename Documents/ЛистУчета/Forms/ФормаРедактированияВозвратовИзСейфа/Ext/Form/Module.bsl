
&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции	


&НаКлиенте
Процедура ВозвратыИзСейфаВозвратПолученПриИзменении(Элемент)
	
	Если Элементы.ВозвратыИзСейфа.ТекущиеДанные.ВозвратПолучен Тогда
		Элементы.ВозвратыИзСейфа.ТекущиеДанные.ВозвратПолучилCотрудник = ПолучитьТекущегоПользователя();
	Иначе	
		Элементы.ВозвратыИзСейфа.ТекущиеДанные.ВозвратПолучилCотрудник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВозвратыИзСейфаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ВозвратыИзСейфа.ТекущиеДанные.ВыгруженВБухгалтерию = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элементы.ВозвратыИзСейфа.ТекущиеДанные.КлючСтроки) Тогда
		Элементы.ВозвратыИзСейфа.ТекущиеДанные.КлючСтроки = Строка(Новый УникальныйИдентификатор());
		Элементы.ТоварыПоВозвратам.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтрокиВозврата", Элементы.ВозвратыИзСейфа.ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВозвратыИзСейфа.Загрузить(ЗначениеИзСтрокиВнутр(Параметры.ТаблицаВозвратыИзСейфа));
	ТоварыПоВозвратам.Загрузить(ЗначениеИзСтрокиВнутр(Параметры.ТаблицаТоваровВозвратовИзСейфа));
	ЭтоИзбенка = Параметры.ЭтоИзбенка;
	ТТ = Параметры.ТТ;
	Дата = Параметры.Дата;
	
	Элементы.ТоварыПоВозвратам.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтрокиВозврата", "");
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПоВозвратамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не ЗначениеЗаполнено(Элементы.ТоварыПоВозвратам.ТекущиеДанные.КлючСтрокиВозврата) Тогда
		Элементы.ТоварыПоВозвратам.ТекущиеДанные.КлючСтрокиВозврата = Элементы.ВозвратыИзСейфа.ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПоВозвратамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекДанные = Элементы.ВозвратыИзСейфа.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана строка в верхней таблице");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)
	
	Ставка18 = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
	КолвоСтрок = ТоварыПоВозвратам.Количество();
	Для н = 1 По КолвоСтрок Цикл
		СтрокиТаб = ВозвратыИзСейфа.НайтиСтроки(Новый Структура("КлючСтроки", ТоварыПоВозвратам[КолвоСтрок - н].КлючСтрокиВозврата));
		Если СтрокиТаб.Количество() = 0 Тогда
			ТоварыПоВозвратам.Удалить(КолвоСтрок - н);
		Иначе
			Если ТоварыПоВозвратам[КолвоСтрок - н].СтавкаНдс = Ставка18 Тогда
				ТоварыПоВозвратам[КолвоСтрок - н].СуммаПоНДС18 = ТоварыПоВозвратам[КолвоСтрок - н].Сумма;
			Иначе	
				ТоварыПоВозвратам[КолвоСтрок - н].СуммаПоНДС10 = ТоварыПоВозвратам[КолвоСтрок - н].Сумма;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ТоварыПоВозвратам Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаб.Номенклатура) Тогда
			Предупреждение("Номенклатура должна быть заполнена во всех строках чеков возврата");
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаб.Количество) Тогда
			Предупреждение("Количество должно быть заполнено во всех строках чеков возврата");
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаб.СтавкаНДС) Тогда
			Предупреждение("Ставка НДС должна быть заполнена во всех строках чеков возврата");
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого ТекДанные Из ВозвратыИзСейфа Цикл
		СтрокиТовары = ТоварыПоВозвратам.НайтиСтроки(Новый Структура("КлючСтрокиВозврата", ТекДанные.КлючСтроки));
		СуммаИтог = 0;
		СуммаИтог10 = 0;
		СуммаИтог18 = 0;
		Для Каждого СтрокаТовар Из СтрокиТовары Цикл
			СуммаИтог = СуммаИтог + СтрокаТовар.Сумма;
			СуммаИтог10 = СуммаИтог10 + СтрокаТовар.СуммаПоНДС10;
			СуммаИтог18 = СуммаИтог18 + СтрокаТовар.СуммаПоНДС18;
		КонецЦикла;
		ТекДанные.Сумма = СуммаИтог;
		ТекДанные.СуммаПоНДС10 = СуммаИтог10;
		ТекДанные.СуммаПоНДС18 = СуммаИтог18;
	КонецЦикла;	
	
	МассивВозвраты = Новый Массив();
	Для Каждого СтрокаТаб Из ВозвратыИзСейфа Цикл
		МассивВозвраты.Добавить(Новый Структура("Сумма, ПолученаСумма, СуммаПоНДС10, СуммаПоНДС18, КлючСтроки, Комментарий, ВозвратПолучен, ВозвратПолучилCотрудник, ВыгруженВБухгалтерию"
				, СтрокаТаб.Сумма, СтрокаТаб.ПолученаСумма, СтрокаТаб.СуммаПоНДС10, СтрокаТаб.СуммаПоНДС18, СтрокаТаб.КлючСтроки, СтрокаТаб.Комментарий, СтрокаТаб.ВозвратПолучен, СтрокаТаб.ВозвратПолучилCотрудник, СтрокаТаб.ВыгруженВБухгалтерию));
	КонецЦикла;
			
	МассивТоварыВозвратов = Новый Массив();
	Для Каждого СтрокаТаб Из ТоварыПоВозвратам Цикл
		МассивТоварыВозвратов.Добавить(Новый Структура("КлючСтрокиВозврата, Номенклатура, Количество, СтавкаНДС, Сумма, СуммаПоНДС10, СуммаПоНДС18"
				, СтрокаТаб.КлючСтрокиВозврата, СтрокаТаб.Номенклатура, СтрокаТаб.Количество, СтрокаТаб.СтавкаНДС, СтрокаТаб.Сумма, СтрокаТаб.СуммаПоНДС10, СтрокаТаб.СуммаПоНДС18));
	КонецЦикла;		
	
	Результат = Новый Структура();
	Результат.Вставить("Возвраты", МассивВозвраты);
	Результат.Вставить("ТоварыВозвратов", МассивТоварыВозвратов);
	
	Закрыть(Результат);
	
КонецПроцедуры


&НаКлиенте
Процедура ВозвратыИзСейфаПриАктивизацииСтроки(Элемент)
	
	Элементы.ТоварыПоВозвратам.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтрокиВозврата"
			, ?(Элементы.ВозвратыИзСейфа.ТекущиеДанные = Неопределено, "", Элементы.ВозвратыИзСейфа.ТекущиеДанные.КлючСтроки));
	
КонецПроцедуры

Процедура ПриИзмененииНоменклатуры()
	
	ТекДанные = ТоварыПоВозвратам.НайтиПоИдентификатору(Элементы.ТоварыПоВозвратам.ТекущаяСтрока);
	ТекДанные.СтавкаНДС = ТекДанные.Номенклатура.СтавкаНДС;
	
КонецПроцедуры

Процедура ПересчитатьИтогПоСтроке()
	
	ТекДанные = ВозвратыИзСейфа.НайтиПоИдентификатору(Элементы.ВозвратыИзСейфа.ТекущаяСтрока);
	СтрокиТовары = ТоварыПоВозвратам.НайтиСтроки(Новый Структура("КлючСтрокиВозврата", ТекДанные.КлючСтроки));
	СуммаИтог = 0;
	СуммаИтог10 = 0;
	СуммаИтог18 = 0;
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СуммаИтог = СуммаИтог + СтрокаТовар.Сумма;
		СуммаИтог10 = СуммаИтог10 + СтрокаТовар.Сумма;
	КонецЦикла;	
	
	ТекДанные.ПолученаСумма = СуммаИтог;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыПоВозвратамНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоВозвратамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
	
	ПересчитатьИтогПоСтроке();
	
КонецПроцедуры

Процедура ЗаполнитьПоЧекуНаСервере(РеквизитыПоиска)
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	ТабКешЧеки = Новый ТаблицаЗначений();
	ТабКешЧеки.Колонки.Добавить("Номенклатура");
	ТабКешЧеки.Колонки.Добавить("Количество");
	ТабКешЧеки.Колонки.Добавить("СуммаЧека");
	ТабКешЧеки.Колонки.Добавить("СуммаПоНдс10");
	ТабКешЧеки.Колонки.Добавить("СуммаПоНдс18");
	
	Если ТТ.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
		СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
		
		ADOСоединение.ConnectionString  = СтрСоедиение;
		ADOСоединение.Open();
		
		СтрЗапрос = "SELECT Ch.CheckUID,
		|  Ch.BaseSum,
		|  Chl.UID as UID,
		|  Chl.Qnt as Qnt,
		|  Chl.SummaPoNDS10 as SummaPoNDS10,
		|  Chl.SummaPoNDS18 as SummaPoNDS18
		|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock)
		|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid, ArticleBin2UID.UID as UID, SUM(Chl.Quantity) as Qnt,
		|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
		|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
		|						FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
		|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
		|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
		|						WHERE Chl.date_ch = '" + Формат(КонецДня(РеквизитыПоиска.ДатаЧека), "ДФ=yyyy-MM-dd") + "' and Chl.id_tt_cl = " + Формат(ТТ.id_TT, "ЧГ=0") + " and Chl.OperationType_cl IN (1, 201, 3, 202, 203)
		|						GROUP BY Chl.CheckUid, ArticleBin2UID.UID) as Chl ON Ch.CheckUID = Chl.CheckUid
		|where Ch.CloseDate >= '" + Формат(НачалоДня(РеквизитыПоиска.ДатаЧека), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(РеквизитыПоиска.ДатаЧека), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.OperationType IN (1, 201, 3, 202, 203)
		|and Ch.ShopNo IN (" + ТТ.НомерТочки + ")
		|and Ch.CashCheckNo = " + Формат(РеквизитыПоиска.НомерЧека, "ЧГ=0") + "
		|";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Если НЕ rs.EOF() Тогда	
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабКешЧеки.Добавить();
				СтрокаДоб.Количество = Rs.Fields("Qnt").Value;
				СтрокаДоб.СуммаПоНдс10 = Rs.Fields("SummaPoNDS10").Value;
				СтрокаДоб.СуммаПоНдс18 = Rs.Fields("SummaPoNDS18").Value;
				Если Rs.Fields("UID").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID").Value, 2, 36)));
				КонецЕсли;
				Если СтрокаДоб.Количество < 0 Тогда
					СтрокаДоб.Количество = СтрокаДоб.Количество * (-1)
				КонецЕсли;
				Если СтрокаДоб.СуммаПоНдс10 < 0 Тогда
					СтрокаДоб.СуммаПоНдс10 = СтрокаДоб.СуммаПоНдс10 * (-1)
				КонецЕсли;
				Если СтрокаДоб.СуммаПоНдс18 < 0 Тогда
					СтрокаДоб.СуммаПоНдс18 = СтрокаДоб.СуммаПоНдс18 * (-1)
				КонецЕсли;
				СтрокаДоб.СуммаЧека = СтрокаДоб.СуммаПоНдс18 + СтрокаДоб.СуммаПоНдс10;
				rs.MoveNext();
			КонецЦикла;
		КонецЕсли;
	Иначе
		СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_union");
		
		ADOСоединение.ConnectionString  = СтрСоедиение;
		ADOСоединение.Open();
		
		СтрЗапрос = "SELECT Ch.CheckUID,
		|  Ch.BaseSum,
		|  Chl.UID as UID,
		|  Chl.Qnt as Qnt,
		|  Chl.SummaPoNDS10 as SummaPoNDS10,
		|  Chl.SummaPoNDS18 as SummaPoNDS18
		|FROM [SMS_UNION].[dbo].[Checks] as Ch (nolock)
		|	LEFT OUTER JOIN (SELECT Chl.CheckUid As CheckUid, ArticleBin2UID.UID as UID, SUM(Chl.Quantity) as Qnt,
		|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS10, 
		|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN Chl.BaseSum * -1 ELSE 0 END) as SummaPoNDS18
		|						FROM [SMS_UNION].[dbo].[CheckLine] as Chl (nolock)
		|						INNER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock)
		|						ON Chl.id_tov_cl = ArticleBin2UID.id_tov
		|						WHERE Chl.date_ch = '" + Формат(КонецДня(РеквизитыПоиска.ДатаЧека), "ДФ=yyyy-MM-dd") + "' and Chl.id_tt_cl = " + Формат(ТТ.id_TT, "ЧГ=0") + "
		|						GROUP BY Chl.CheckUid, ArticleBin2UID.UID) as Chl ON Ch.CheckUID = Chl.CheckUid
		|where Ch.CloseDate >= '" + Формат(НачалоДня(РеквизитыПоиска.ДатаЧека), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and Ch.CloseDate <= '" + Формат(КонецДня(РеквизитыПоиска.ДатаЧека), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
		|and Ch.ShopNo = " + Формат(ТТ.НомерТочки, "ЧГ=0") + "
		|and Ch.CashCheckNo = " + Формат(РеквизитыПоиска.НомерЧека, "ЧГ=0") + "
		|";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Если НЕ rs.EOF() Тогда	
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабКешЧеки.Добавить();
				СтрокаДоб.Количество = Rs.Fields("Qnt").Value;
				СтрокаДоб.СуммаПоНдс10 = Rs.Fields("SummaPoNDS10").Value;
				СтрокаДоб.СуммаПоНдс18 = Rs.Fields("SummaPoNDS18").Value;
				Если Rs.Fields("UID").Value <> NULL Тогда
					СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(Rs.Fields("UID").Value, 2, 36)));
				КонецЕсли;
				Если СтрокаДоб.Количество < 0 Тогда
					СтрокаДоб.Количество = СтрокаДоб.Количество * (-1)
				КонецЕсли;
				Если СтрокаДоб.СуммаПоНдс10 < 0 Тогда
					СтрокаДоб.СуммаПоНдс10 = СтрокаДоб.СуммаПоНдс10 * (-1)
				КонецЕсли;
				Если СтрокаДоб.СуммаПоНдс18 < 0 Тогда
					СтрокаДоб.СуммаПоНдс18 = СтрокаДоб.СуммаПоНдс18 * (-1)
				КонецЕсли;
				СтрокаДоб.СуммаЧека = СтрокаДоб.СуммаПоНдс18 + СтрокаДоб.СуммаПоНдс10;
				rs.MoveNext();
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
	
	ADOСоединение.Close();
	
	ТекДанные = ВозвратыИзСейфа.НайтиПоИдентификатору(Элементы.ВозвратыИзСейфа.ТекущаяСтрока);
	Для Каждого СтрокаЧек Из ТабКешЧеки Цикл
		СтрокаДоб = ТоварыПоВозвратам.Добавить();
		СтрокаДоб.КлючСтрокиВозврата = ТекДанные.КлючСтроки;
		СтрокаДоб.Номенклатура = СтрокаЧек.Номенклатура;
		СтрокаДоб.Количество = СтрокаЧек.Количество;
		СтрокаДоб.Сумма = СтрокаЧек.СуммаЧека;
		СтрокаДоб.СуммаПоНдс10 = СтрокаЧек.СуммаПоНдс10;
		СтрокаДоб.СуммаПоНдс18 = СтрокаЧек.СуммаПоНдс18;
		Если СтрокаДоб.СуммаПоНдс18 > 0 Тогда
			СтрокаДоб.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтрокаДоб.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;	
	КонецЦикла;
	
	ПересчитатьИтогПоСтроке();
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьПоЧеку(Команда)
	
	ТекДанные = Элементы.ВозвратыИзСейфа.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана строка в верхней таблице");
		Возврат;
	КонецЕсли;
	
	РеквизитыПоиска = ОткрытьФормуМодально("Документ.ЛистУчета.Форма.ФормаВводаРеквизитовПоискаЧека");
	Если РеквизитыПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьПоЧекуНаСервере(РеквизитыПоиска);
	
КонецПроцедуры

