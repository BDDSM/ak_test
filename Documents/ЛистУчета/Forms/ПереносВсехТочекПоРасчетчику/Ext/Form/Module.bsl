
Процедура ОбновитьСоставТочек()
	
	ТабКопия = ПопадающиеПодПеренос.Выгрузить();
	ПопадающиеПодПеренос.Очистить();
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза", ПеренестиНачинаяСДаты);
	Запрос.УстановитьПараметр("Роль", СРасчетчика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектРольСрезПоследних.Объект,
	               |	СоответствиеОбъектРольСрезПоследних.ТипРоли
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ДатаСреза, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)) КАК СоответствиеОбъектРольСрезПоследних
	               |ГДЕ
	               |	СоответствиеОбъектРольСрезПоследних.РольПользователя = &Роль
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СоответствиеОбъектРольСрезПоследних.Объект.НомерТочки";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ПопадающиеПодПеренос.Добавить();
		СтрокаДоб.Переносить = Истина;
		СтрокаДоб.ТорговаяТочка = Выборка.Объект;
		СтрокаКеш = ТабКопия.Найти(СтрокаДоб.ТорговаяТочка, "ТорговаяТочка");
		Если СтрокаКеш <> Неопределено Тогда
			СтрокаДоб.Переносить = СтрокаКеш.Переносить;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьИЗакрытьСервер()
	
	Для Каждого СтрокаТаб Из ПопадающиеПодПеренос Цикл
		Если НЕ СтрокаТаб.Переносить Тогда
			Продолжить;
		КонецЕсли;	
		Запись = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
		Запись.Период = ПеренестиНачинаяСДаты;
		Запись.Объект = СтрокаТаб.ТорговаяТочка;
		Запись.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик;
		Запись.РольПользователя = НаРасчетчика;
		Запись.Записать();
		Если ЗначениеЗаполнено(ПереносДействуетДоДаты) Тогда
			Запись = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
			Запись.Период = ПереносДействуетДоДаты + 86400;
			Запись.Объект = СтрокаТаб.ТорговаяТочка;
			Запись.ТипРоли = ПланыВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик;
			Запись.РольПользователя = СРасчетчика;
			Запись.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ ЗначениеЗаполнено(СРасчетчика) Тогда
		Сообщить("Не указан расчетчик, с которого нужно перенести данные");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаРасчетчика) Тогда
		Сообщить("Не указан расчетчик, на которого нужно перенести данные");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПеренестиНачинаяСДаты) Тогда
		Сообщить("Не указана дата начала переноса");
	КонецЕсли;
	
	ЗаписатьИЗакрытьСервер();
	
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СРасчетчикаПриИзменении(Элемент)
	
	ОбновитьСоставТочек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНачинаяСДатыПриИзменении(Элемент)
	
	ОбновитьСоставТочек();
	
КонецПроцедуры

Функция ПолучитьСписокРасчетчиков()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	РолиПользователейТипыРолей.Ссылка
				   |ИЗ
				   |	Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
				   |ГДЕ
				   |	РолиПользователейТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БухгалтерРасчетчик)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаКлиенте
Процедура СРасчетчикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокРасчетчиков());
	
КонецПроцедуры

&НаКлиенте
Процедура НаРасчетчикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокРасчетчиков());
	
КонецПроцедуры
