
Процедура ПрочитатьДанныеЗаПериодСервер(ДатаСчитывания)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка,
	               |	ОсновныеСредства.ЗаводскойНомер,
	               |	ВЫБОР
	               |		КОГДА ОсновныеСредства.Наименование ПОДОБНО &ККМ
	               |			ТОГДА ВЫБОР
	               |					КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
	               |							И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоККМ,
	               |	ВЫБОР
	               |		КОГДА ОсновныеСредства.Наименование ПОДОБНО &ЧПМ
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ОсновныеСредства.ДатаПереходаЧПМВККМ <> ДАТАВРЕМЯ(1, 1, 1)
	               |						И ОсновныеСредства.ДатаПереходаЧПМВККМ > &Дата
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ЭтоЧПМ
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	(ОсновныеСредства.Наименование ПОДОБНО &ККМ
	               |			ИЛИ ОсновныеСредства.Наименование ПОДОБНО &ЧПМ)";
	
	Запрос.УстановитьПараметр("ККМ", "%ККМ%");
	Запрос.УстановитьПараметр("ЧПМ", "%ЧПМ%");
	Запрос.УстановитьПараметр("Дата", ДатаСчитывания);
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабКешККМ = Результаты[0].Выгрузить();
	
	ОргСП = Справочники.Организации.НайтиПоКоду("000000003");
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	
	СтрСоедиение = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	
	СтрЗапрос = "SELECT DISTINCT
	|	dbo_Checks.ShopNo as ShopNo,
	|	dbo_Shifts.CashID as CashID
	|FROM
	|SMS_Izbenka.dbo.Shifts as dbo_Shifts (nolock)
	|		INNER JOIN SMS_Izbenka.dbo.Checks as dbo_Checks (nolock)
	|		ON dbo_Shifts.ShiftUID = dbo_Checks.ShiftUID
	|WHERE
	|	DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime) >= '" + Формат(НачалоДня(ДатаСчитывания), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
	| 	and DATEADD(SECOND, -dbo_Shifts.Second_lag, dbo_Shifts.CloseDateTime) <= '" + Формат(КонецДня(ДатаСчитывания), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
	|	and dbo_Checks.OperationType > 0
	|	and dbo_Checks.BaseSum - dbo_Checks.SummBonus > 0
	| 	" + ?(ЗначениеЗаполнено(ТорговаяТочка), "and dbo_Checks.ShopNo = " + Формат(ТорговаяТочка.НомерТочки, "ЧН=; ЧГ=0"), "");
	
	ADOСоединение.ConnectionString  = СтрСоедиение;
	ADOСоединение.Open();
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТаблицаСДаннымиПоКассам = Новый ТаблицаЗначений();
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("CashID");
	ТаблицаСДаннымиПоКассам.Колонки.Добавить("НомерМагазина");
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТаблицаСДаннымиПоКассам.Добавить();
			СтрокаДоб.НомерМагазина = Rs.Fields("ShopNo").Value;
			СтрокаДоб.CashID = Rs.Fields("CashID").Value;
			//Если Объект.Организация = ОргСП Тогда
			//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаДоб.CashID, "ЧРГ=; ЧГ=0"), Истина));
			//Иначе
			//	СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаДоб.CashID, "ЧРГ=; ЧГ=0"), Истина));
			//КонецЕсли;
			//Если СтрокиККМ.Количество() > 0 Тогда
			//	СтрокаДоб.Касса = СтрокиККМ[0].Ссылка;
			//КонецЕсли;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаСчитывания));
	Запрос.Текст = "ВЫБРАТЬ
	|	Терминалы.ID_SQL,
	|	Терминалы.Ссылка,
	|	СоответствиеОсновныхСредствТерминаламСрезПоследних.ОсновноеСредство
	|ИЗ
	|	Справочник.Терминалы КАК Терминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОсновныхСредствТерминалам.СрезПоследних(&Дата, ) КАК СоответствиеОсновныхСредствТерминаламСрезПоследних
	|		ПО Терминалы.Ссылка = СоответствиеОсновныхСредствТерминаламСрезПоследних.Терминал";
	
	ТабКешТерминалы = Запрос.Выполнить().Выгрузить();
	
	СтрЗапрос = "SELECT DISTINCT
				|dbo_Checks.ShopNo as ShopNo,
				|'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))) as Name
				|FROM
				|	SMS_Union.dbo.Checks as dbo_Checks (nolock)
				|	WHERE dbo_Checks.CloseDate >= '" + Формат(НачалоДня(ДатаСчитывания), "ДФ=yyyy-MM-ddTHH:mm:ss") + "' and dbo_Checks.CloseDate <= '" + Формат(КонецДня(ДатаСчитывания), "ДФ=yyyy-MM-ddTHH:mm:ss") + "'
				| 	" + ?(ЗначениеЗаполнено(ТорговаяТочка), "and dbo_Checks.ShopNo = " + Формат(ТорговаяТочка.НомерТочки, "ЧН=; ЧГ=0"), "");
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	ТабКассыЗадействованные = Новый ТаблицаЗначений();
	ТабКассыЗадействованные.Колонки.Добавить("Терминал");
	ТабКассыЗадействованные.Колонки.Добавить("ОсновноеСредство");
	ТабКассыЗадействованные.Колонки.Добавить("Имя");
	ТабКассыЗадействованные.Колонки.Добавить("НомерМагазина");
	Если НЕ rs.EOF() Тогда
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаККМ = ТабКешТерминалы.Найти(Rs.Fields("Name").Value, "ID_SQL");
			СтрокаДоб = ТабКассыЗадействованные.Добавить();
			Если СтрокаККМ <> Неопределено Тогда
				СтрокаДоб.Терминал = СтрокаККМ.Ссылка;
				СтрокаДоб.ОсновноеСредство = СтрокаККМ.ОсновноеСредство;
			КонецЕсли;
			СтрокаДоб.Имя = Rs.Fields("Name").Value;
			СтрокаДоб.НомерМагазина = Rs.Fields("ShopNo").Value;
			rs.MoveNext();
		КонецЦикла;
	КонецЕсли;
	ADOСоединение = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаZОтчеты.Касса,
	               |	ЛистУчета.Ссылка КАК Ссылка,
	               |	ЛистУчета.Организация,
	               |	ЛистУчета.ТорговаяТочка.ТипРозничнойТочки КАК ТипРозничнойТочки,
	               |	ЛистУчета.ТорговаяТочка.НомерТочки КАК НомерТочки
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчета.ZОтчеты КАК ЛистУчетаZОтчеты
	               |		ПО ЛистУчета.Ссылка = ЛистУчетаZОтчеты.Ссылка
	               |ГДЕ
	               |	ЛистУчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЛистУчета.Проведен = ИСТИНА
	               |	И (ЛистУчета.ТорговаяТочка = &ТорговаяТочка
	               |			ИЛИ &ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	               |	И ЛистУчета.НеПривязанныеКассыПеренесены = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	ЛистУчета.Дата";
				   
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаСчитывания));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаСчитывания));
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ТаблицаКассПоЧекам = Новый ТаблицаЗначений();
		ТаблицаКассПоЧекам.Колонки.Добавить("Касса");
		БылоДобавление = Ложь;
		Если Выборка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
			СтрокиСКассамиВЧеках = ТаблицаСДаннымиПоКассам.НайтиСтроки(Новый Структура("НомерМагазина", Выборка.НомерТочки));
			Для Каждого СтрокаКасса Из СтрокиСКассамиВЧеках Цикл
				Если Выборка.Организация = ОргСП Тогда
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоЧПМ", Формат(СтрокаКасса.CashID, "ЧРГ=; ЧГ=0"), Истина));
				Иначе
					СтрокиККМ = ТабКешККМ.НайтиСтроки(Новый Структура("ЗаводскойНомер, ЭтоККМ", Формат(СтрокаКасса.CashID, "ЧРГ=; ЧГ=0"), Истина));
				КонецЕсли;
				Если СтрокиККМ.Количество() > 0 Тогда
					СтрокаДоб = ТаблицаКассПоЧекам.Добавить();
					СтрокаДоб.Касса = СтрокиККМ[0].Ссылка;
				Иначе
					СтрокаДоб = ТаблицаЛисты.Добавить();
					СтрокаДоб.ЛистУчета = Выборка.Ссылка;
					БылоДобавление = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ БылоДобавление Тогда
				Пока Выборка.Следующий() Цикл
					Если Выборка.Касса = NULL Тогда
						Продолжить;
					КонецЕсли;
					СтрокаНайденная = ТаблицаКассПоЧекам.Найти(Выборка.Касса, "Касса");
					Если СтрокаНайденная <> Неопределено Тогда
						ТаблицаКассПоЧекам.Удалить(СтрокаНайденная);
					КонецЕсли;	
				КонецЦикла;
				Если ТаблицаКассПоЧекам.Количество() > 0 Тогда
					СтрокаДоб = ТаблицаЛисты.Добавить();
					СтрокаДоб.ЛистУчета = Выборка.Ссылка;
				КонецЕсли;	
			КонецЕсли;	
		Иначе	
			СтрокиСКассамиВЧеках = ТабКассыЗадействованные.НайтиСтроки(Новый Структура("НомерМагазина", Выборка.НомерТочки));
			Для Каждого СтрокаКасса Из СтрокиСКассамиВЧеках Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаКасса.ОсновноеСредство) Тогда
					СтрокаДоб = ТаблицаЛисты.Добавить();
					СтрокаДоб.ЛистУчета = Выборка.Ссылка;
					БылоДобавление = Истина;
					Прервать;
				Иначе
					СтрокаДоб = ТаблицаКассПоЧекам.Добавить();
					СтрокаДоб.Касса = СтрокаКасса.ОсновноеСредство;
				КонецЕсли;
			КонецЦикла;	
			Если НЕ БылоДобавление Тогда
				Пока Выборка.Следующий() Цикл
					Если Выборка.Касса = NULL Тогда
						Продолжить;
					КонецЕсли;	
					СтрокаНайденная = ТаблицаКассПоЧекам.Найти(Выборка.Касса, "Касса");
					Если СтрокаНайденная <> Неопределено Тогда
						ТаблицаКассПоЧекам.Удалить(СтрокаНайденная);
					КонецЕсли;	
				КонецЦикла;
				Если ТаблицаКассПоЧекам.Количество() > 0 Тогда
					СтрокаДоб = ТаблицаЛисты.Добавить();
					СтрокаДоб.ЛистУчета = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	
	ТаблицаЛисты.Очистить();
	
	ДатаОбработки = ДатаНачала;
	Пока ДатаОбработки <= ДатаОкончания Цикл
		Состояние("Обработка данных за " + Формат(ДатаОбработки, "ДФ=dd.MM.yyyy"));
		ПрочитатьДанныеЗаПериодСервер(ДатаОбработки);
		ДатаОбработки = ДатаОбработки + 86400;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаНачала = НачалоМесяца(ТекущаяДата());
	ДатаОкончания = КонецМесяца(ТекущаяДата());
	
КонецПроцедуры
