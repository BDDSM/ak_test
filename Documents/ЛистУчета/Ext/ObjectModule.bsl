//Перем ЦФОУправлениеРозницей;

Перем СДСРозничнаяВыручка;
Перем СДСИнкассация;
Перем СДСОплатаБаллами;
Перем СДРЭквайринг;
Перем БСЭквайринг;

Перем СДРОтклонение;
Перем СДРОтклонение20121001;
Перем СчитыватьТаблицуТоваровСЧековДляПроведения Экспорт; // в переменную следует ставить истина если происходит проведение
														  // но нет возможности читать таблицу чеков

Функция ПолучитьПервыйЦФОВПериоде(ТорговаяТочка,ДатаПериода)
	
	Если ДатаПериода < Дата("20130501000000") Тогда
		Возврат Неопределено;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТорговаяТочка"	, ТорговаяТочка);
		Запрос.УстановитьПараметр("НачалоПериода"	, НачалоМесяца(ДатаПериода));
		Запрос.УстановитьПараметр("КонецПериода"	, КонецМесяца(ДатаПериода));
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛистУчета.ЦФО,
		|	ЛистУчета.Дата КАК Дата
		|ИЗ
		|	Документ.ЛистУчета КАК ЛистУчета
		|ГДЕ
		|	ЛистУчета.Проведен
		|	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
		|	И ЛистУчета.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.ЦФО;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Процедура ПроведениеТоваровПоРегистрам(ТабТоваров)
//	                               -
//	Если ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Избенка
//			И ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗапросНастроек = Новый Запрос;
//	ЗапросНастроек.УстановитьПараметр("Дата", КонецДня(Дата));
//	ЗапросНастроек.Текст =
//	"ВЫБРАТЬ
//	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ВидОперации,
//	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.Счет,
//	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.ЦФО,
//	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДоходовРасходов,
//	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтруктурнаяЕдиница,
//	|	НастройкаОтраженияОперацийВУчетеСрезПоследних.СтатьяДвиженияТоваров
//	|ИЗ
//	|	РегистрСведений.НастройкаОтраженияОперацийВУчете.СрезПоследних(&Дата, ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Продажа), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Списание), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Подарки), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Дегустация), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоКачеству), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоСроку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_Бой), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВУчете.ЛистыУчета_ВозвратПокупателя))) КАК НастройкаОтраженияОперацийВУчетеСрезПоследних";
//	ТабНастройкиПроводок = ЗапросНастроек.Выполнить().Выгрузить();
//	
//	//СТДПроданного					= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000002");
//	//СТДСписанного					= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000003");
//	//СТДПодарки						= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000005");
//	//СТДДегустация					= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000006");
//	//СТДПоКачеству					= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000007");
//	//СТДПоСроку						= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000008");
//	//СТДБой							= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000009");
//	//СТДИнвентаризация				= Справочники.СтатьиТовародвижения.НайтиПоКоду("00000017");
//	//СДПодарки			= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("21001");
//	//СДСебестоимость 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20110");
//	//СДСписаниеПрочее 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20410");
//	//СДСписаниеКачество 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20411");
//	//СДСписаниеДегустация 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20412");
//	//СДСписаниеПоСроку 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20413");
//	//СДИнвентаризация 	= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20124");
//	
//	ВидПроданного = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Продажа;
//	ВидСписанного = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Списание;
//	ВидПодарки = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Подарки;
//	ВидДегустация = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Дегустация;
//	ВидПоКачеству = Перечисления.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоКачеству;
//	ВидПоСроку = Перечисления.ВидыОперацийВУчете.ЛистыУчета_СписаниеПоСроку;
//	ВидБой = Перечисления.ВидыОперацийВУчете.ЛистыУчета_Бой;
//	ВидИнвентаризация = Перечисления.ВидыОперацийВУчете.ЛистыУчета_ИнвентаризацияВкусвилл;
//	ВидВозвратПокупателя = Перечисления.ВидыОперацийВУчете.ЛистыУчета_ВозвратПокупателя;
//	
//	СчетЗатратыТочекДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
//	СчетЗатратыТоварныеДляРаспределения = ПланыСчетов.Финансовый.ЗатратыТоварныеДляРаспределения;
//	СчетТовары = ПланыСчетов.Финансовый.Товары;
//	СчетУпаковка = ПланыСчетов.Финансовый.МатералыДляВыпуска;
//	
//	ТипТовараУпаковка = Перечисления.ТипыТоваров.Упаковка;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Дата"				, КонецДня(Дата));
//	Запрос.УстановитьПараметр("ТорговаяТочка"		, ТорговаяТочка);
//	Запрос.УстановитьПараметр("МассивНоменклатур"	, ТабТоваров.ВыгрузитьКолонку("Номенклатура"));
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СпрНоменклатура.Ссылка КАК Ссылка,
//	|	ВЗ_Расчетчики.Расчетчик КАК Расчетчик,
//	|	СпрНоменклатура.ТипТовара
//	|ИЗ
//	|	Справочник.Номенклатура КАК СпрНоменклатура
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&Дата, ТорговаяТочка = &ТорговаяТочка) КАК ВЗ_Расчетчики
//	|		ПО (ВЗ_Расчетчики.ГруппаУРЗ = СпрНоменклатура.ГруппаНоменклатурыУРЗ)
//	|ГДЕ
//	|	СпрНоменклатура.Ссылка В(&МассивНоменклатур)";
//	//"ВЫБРАТЬ
//	//|	Номенклатура.Ссылка,
//	//|	ВЗ_Расчетчики.Расчетчик
//	//|ИЗ
//	//|	Справочник.Номенклатура КАК Номенклатура
//	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	//|			ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
//	//|			МАКСИМУМ(ПорядокОбеспеченияТорговыхТочекСрезПоследних.Расчетчик) КАК Расчетчик
//	//|		ИЗ
//	//|			РегистрСведений.ПорядокОбеспеченияТорговыхТочек.СрезПоследних(&Дата, ТорговаяТочка = &ТорговаяТочка) КАК ПорядокОбеспеченияТорговыхТочекСрезПоследних
//	//|		
//	//|		СГРУППИРОВАТЬ ПО
//	//|			ПорядокОбеспеченияТорговыхТочекСрезПоследних.ГруппаНоменклатуры) КАК ВЗ_Расчетчики
//	//|		ПО (Номенклатура.Родитель = ВЗ_Расчетчики.ГруппаНоменклатуры
//	//|				ИЛИ Номенклатура.Родитель.Родитель = ВЗ_Расчетчики.ГруппаНоменклатуры)
//	//|ГДЕ
//	//|	Номенклатура.Ссылка В(&МассивНоменклатур)";
//	ТабНоменклатура = Запрос.Выполнить().Выгрузить();
//	
//	Для Каждого СтрокаТовар Из ТабТоваров Цикл
//		
//		СтрокаРасчетчик = ТабНоменклатура.Найти(СтрокаТовар.Номенклатура, "Ссылка");
//		
//		Если СтрокаТовар.Продано <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПроданного, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				//Проводка.Организация								= Организация;
//				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//				Проводка.Содержание									= "Себестоимость проданных товаров";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт                               = СтрокаТовар.Продано;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт                               = СтрокаТовар.Продано;
//				КонецЕсли;	
//				
//				//Проводка.СчетДт										= СчетЗатратыТоварныеДляРаспределения;
//				//Проводка.СубконтоДт.ТорговыеТочки 				= ТорговаяТочка;
//				//Проводка.СубконтоДт.СтатьиДоходовРасходов 	= СДСебестоимость;
//				//Проводка.СубконтоДт.ЦФО							= ЦФО;
//				//Проводка.СчетКт										= СчетТовары;
//				//Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//				//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//				//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДПроданного;
//				//Проводка.КоличествоКт								= СтрокаТовар.Продано;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Если СтрокаТовар.Дегустация <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидДегустация, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				//Проводка.Организация								= Организация;
//				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//				Проводка.Содержание									= "Себестоимость товаров, списанных для дегустации";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				//Проводка.СчетДт										= ЗатратыТочекДляРаспределения;
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Дегустация;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Дегустация;
//				КонецЕсли;
//				
//				
//				////Проводка.СчетДт										= ЗатратыТочекДляРаспределения;
//				//Проводка.СчетДт										= СчетЗатратыТоварныеДляРаспределения;
//				//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДСписаниеДегустация;
//				//Проводка.СубконтоДт.ЦФО								= ЦФО;
//				//
//				//Проводка.СчетКт										= СчетТовары;
//				//Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//				//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//				//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДДегустация;
//				//Проводка.КоличествоКт								= СтрокаТовар.Дегустация;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Если СтрокаТовар.Списание <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПоСроку, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				//Проводка.Организация								= Организация;
//				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//				Проводка.Содержание									= "Себестоимость товаров, списанных по сроку";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				//Проводка.СчетДт										= ЗатратыТочекДляРаспределения;
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Списание;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Списание;
//				КонецЕсли;
//				
//				
//				////Проводка.СчетДт										= ЗатратыТочекДляРаспределения;
//				//Проводка.СчетДт										= СчетЗатратыТоварныеДляРаспределения;
//				//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДСписаниеПоСроку;
//				//Проводка.СубконтоДт.ЦФО								= ЦФО;
//				//
//				//Проводка.СчетКт										= СчетТовары;
//				//Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//				//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//				//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДПоСроку;
//				//Проводка.КоличествоКт								= СтрокаТовар.Списание;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Если СтрокаТовар.СписаниеПоКачеству <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПоКачеству, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				//Проводка.Организация								= Организация;
//				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//				Проводка.Содержание									= "Себестоимость товаров, списанных по качеству";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				//Проводка.СчетДт										= ЗатратыТочекДляРаспределения;
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.СписаниеПоКачеству;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.СписаниеПоКачеству;
//				КонецЕсли;
//				
//				////Проводка.СчетДт										= ЗатратыТочекДляРаспределения;
//				//Проводка.СчетДт										= СчетЗатратыТоварныеДляРаспределения;
//				//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДСписаниеКачество;
//				//Проводка.СубконтоДт.ЦФО								= ЦФО;
//				//
//				//Проводка.СчетКт										= СчетТовары;
//				//Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//				//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//				//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДПоКачеству;
//				//Проводка.КоличествоКт								= СтрокаТовар.СписаниеПоКачеству;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Если СтрокаТовар.Бой <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидБой, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				//Проводка.Организация								= Организация;
//				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//				Проводка.Содержание									= "Себестоимость бой";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Бой;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Бой;
//				КонецЕсли;
//				
//				//Проводка.СчетДт										= СчетЗатратыТоварныеДляРаспределения;
//				//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДСписаниеПрочее;
//				//Проводка.СубконтоДт.ЦФО								= ЦФО;
//				//
//				//Проводка.СчетКт										= СчетТовары;
//				//Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//				//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//				//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДСписанного;//СТДБой;
//				//Проводка.КоличествоКт								= СтрокаТовар.Бой;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		Если СтрокаТовар.Акция <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПодарки, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				//Проводка.Организация								= Организация;
//				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//				Проводка.Содержание									= "Себестоимость подарков покупателям";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Акция;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт								= СтрокаТовар.Акция;
//				КонецЕсли;
//				
//				//Проводка.СчетДт										= СчетЗатратыТоварныеДляРаспределения;
//				//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//				//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДПодарки;
//				//Проводка.СубконтоДт.ЦФО								= ЦФО;
//				//
//				//Проводка.СчетКт										= СчетТовары;
//				//Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//				//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//				//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДПодарки;
//				//Проводка.КоличествоКт								= СтрокаТовар.Акция;
//			КонецЕсли;	
//		КонецЕсли;
//		
//		//разницу проводим только для вкусвилла, так как это расхождения остатков с инвентаризацией
//		Если СтрокаТовар.Разница <> 0 Тогда
//			Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
//				СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидИнвентаризация, "ВидОперации");
//				Если СтрокаКешНастройка <> Неопределено Тогда
//					Проводка = Движения.Финансовый.Добавить();
//					Проводка.Период 									= Дата;
//					//Проводка.Организация								= Организация;
//					//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//					Проводка.Содержание									= "Себестоимость прочее";
//					Проводка.НомерЖурнала								= "ТТ";
//					
//					Если СтрокаТовар.Разница < 0 Тогда
//						Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//						Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//						Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//						Проводка.СубконтоДт.ЦФО								= ЦФО;
//						
//						Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//							Проводка.СчетКт										= СчетУпаковка;
//							Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//							Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоКт								= СтрокаТовар.Разница * (-1);
//						Иначе	
//							Проводка.СчетКт										= СчетТовары;
//							//оводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//							Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоКт								= СтрокаТовар.Разница * (-1);
//						КонецЕсли;
//						
//						//Проводка.СчетДт										= СчетЗатратыТочекДляРаспределения;
//						//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//						//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДИнвентаризация;
//						//Проводка.СубконтоДт.ЦФО								= ЦФО;
//						//
//						//Проводка.СчетКт										= СчетТовары;
//						////Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//						//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//						//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДИнвентаризация;
//						//Проводка.КоличествоКт								= СтрокаТовар.Разница * (-1);
//					Иначе
//						Проводка.СчетКт										= СтрокаКешНастройка.Счет;
//						Проводка.СубконтоКт.ТорговыеТочки 					= ТорговаяТочка;
//						Проводка.СубконтоКт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//						Проводка.СубконтоКт.ЦФО								= ЦФО;
//						
//						Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//							Проводка.СчетДт										= СчетУпаковка;
//							Проводка.СубконтоДт.Материалы						= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоДт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//							Проводка.СубконтоДт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоДт								= СтрокаТовар.Разница;
//						Иначе	
//							Проводка.СчетДт										= СчетТовары;
//							//оводка.СубконтоДт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//							Проводка.СубконтоДт.Товары							= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоДт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоДт								= СтрокаТовар.Разница;
//						КонецЕсли;
//						
//						//Проводка.СчетКт										= СчетЗатратыТочекДляРаспределения;
//						//Проводка.СубконтоКт.ТорговыеТочки 					= ТорговаяТочка;
//						//Проводка.СубконтоКт.СтатьиДоходовРасходов 			= СДИнвентаризация;
//						//Проводка.СубконтоКт.ЦФО								= ЦФО;
//						//
//						//Проводка.СчетДт										= СчетТовары;
//						////Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//						//Проводка.СубконтоДт.Товары							= СтрокаТовар.Номенклатура;
//						//Проводка.СубконтоДт.СтатьиТовародвижения			= СТДИнвентаризация;
//						//Проводка.КоличествоДт								= СтрокаТовар.Разница;
//					КонецЕсли;	
//				КонецЕсли;	
//			ИначеЕсли ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
//				СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидПроданного, "ВидОперации");
//				Если СтрокаКешНастройка <> Неопределено Тогда
//					Проводка = Движения.Финансовый.Добавить();
//					Проводка.Период 									= Дата;
//					//Проводка.Организация								= Организация;
//					//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//					Проводка.Содержание									= "Себестоимость прочее";
//					Проводка.НомерЖурнала								= "ТТ";
//					
//					Если СтрокаТовар.Разница < 0 Тогда
//						Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//						Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//						Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//						Проводка.СубконтоДт.ЦФО								= ЦФО;
//						
//						Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//							Проводка.СчетКт										= СчетУпаковка;
//							Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//							Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоКт								= СтрокаТовар.Разница * (-1);
//						Иначе	
//							Проводка.СчетКт										= СчетТовары;
//							//оводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//							Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоКт								= СтрокаТовар.Разница * (-1);
//						КонецЕсли;
//						
//						//Проводка.СчетДт										= СчетЗатратыТочекДляРаспределения;
//						//Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//						//Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СДИнвентаризация;
//						//Проводка.СубконтоДт.ЦФО								= ЦФО;
//						//
//						//Проводка.СчетКт										= СчетТовары;
//						////Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//						//Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//						//Проводка.СубконтоКт.СтатьиТовародвижения			= СТДИнвентаризация;
//						//Проводка.КоличествоКт								= СтрокаТовар.Разница * (-1);
//					Иначе
//						Проводка.СчетКт										= СтрокаКешНастройка.Счет;
//						Проводка.СубконтоКт.ТорговыеТочки 					= ТорговаяТочка;
//						Проводка.СубконтоКт.СтатьиДоходовРасходов 			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//						Проводка.СубконтоКт.ЦФО								= ЦФО;
//						
//						Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//							Проводка.СчетДт										= СчетУпаковка;
//							Проводка.СубконтоДт.Материалы						= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоДт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//							Проводка.СубконтоДт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоДт								= СтрокаТовар.Разница;
//						Иначе	
//							Проводка.СчетДт										= СчетТовары;
//							//оводка.СубконтоДт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//							Проводка.СубконтоДт.Товары							= СтрокаТовар.Номенклатура;
//							Проводка.СубконтоДт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//							Проводка.КоличествоДт								= СтрокаТовар.Разница;
//						КонецЕсли;
//						
//						//Проводка.СчетКт										= СчетЗатратыТочекДляРаспределения;
//						//Проводка.СубконтоКт.ТорговыеТочки 					= ТорговаяТочка;
//						//Проводка.СубконтоКт.СтатьиДоходовРасходов 			= СДИнвентаризация;
//						//Проводка.СубконтоКт.ЦФО								= ЦФО;
//						//
//						//Проводка.СчетДт										= СчетТовары;
//						////Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//						//Проводка.СубконтоДт.Товары							= СтрокаТовар.Номенклатура;
//						//Проводка.СубконтоДт.СтатьиТовародвижения			= СТДИнвентаризация;
//						//Проводка.КоличествоДт								= СтрокаТовар.Разница;
//					КонецЕсли;	
//				КонецЕсли;	
//				
//			КонецЕсли;
//		КонецЕсли;	
//		
//		Если СтрокаТовар.ВозвратПокупателя <> 0 Тогда
//			СтрокаКешНастройка = ТабНастройкиПроводок.Найти(ВидВозвратПокупателя, "ВидОперации");
//			Если СтрокаКешНастройка <> Неопределено Тогда
//				
//				СтрокаКешНастройкаПродано = ТабНастройкиПроводок.Найти(ВидПроданного, "ВидОперации");
//				Если СтрокаКешНастройкаПродано <> Неопределено Тогда
//					Проводка = Движения.Финансовый.Добавить();
//					Проводка.Период 									= Дата;
//					//Проводка.Организация								= Организация;
//					//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
//					Проводка.Содержание									= "Себестоимость проданных товаров";
//					Проводка.НомерЖурнала								= "ТТ";
//					
//					Проводка.СчетДт										= СтрокаКешНастройкаПродано.Счет;
//					Проводка.СубконтоДт.ТорговыеТочки 					= ТорговаяТочка;
//					Проводка.СубконтоДт.СтатьиДоходовРасходов 			= СтрокаКешНастройкаПродано.СтатьяДоходовРасходов;
//					Проводка.СубконтоДт.ЦФО								= ЦФО;
//					
//					Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//						Проводка.СчетКт										= СчетУпаковка;
//						Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//						Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//						Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройкаПродано.СтатьяДвиженияТоваров;
//						Проводка.КоличествоКт                               = СтрокаТовар.ВозвратПокупателя * -1;
//					Иначе	
//						Проводка.СчетКт										= СчетТовары;
//						Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//						Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//						Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройкаПродано.СтатьяДвиженияТоваров;
//						Проводка.КоличествоКт                               = СтрокаТовар.ВозвратПокупателя * -1;
//					КонецЕсли;	
//					
//				КонецЕсли;
//				
//				Проводка = Движения.Финансовый.Добавить();
//				Проводка.Период 									= Дата;
//				Проводка.Содержание									= "Себестоимость возврата от покупателя";
//				Проводка.НомерЖурнала								= "ТТ";
//				
//				Проводка.СчетДт										= СтрокаКешНастройка.Счет;
//				Проводка.СубконтоДт.ТорговыеТочки					= ТорговаяТочка;
//				Проводка.СубконтоДт.СтатьиДоходовРасходов			= СтрокаКешНастройка.СтатьяДоходовРасходов;
//				Проводка.СубконтоДт.ЦФО								= ЦФО;
//				
//				Если СтрокаРасчетчик.ТипТовара = ТипТовараУпаковка Тогда
//					Проводка.СчетКт										= СчетУпаковка;
//					Проводка.СубконтоКт.Материалы						= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.Склады							= ТорговаяТочка.СкладТорговогоЗала;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт                               = СтрокаТовар.ВозвратПокупателя;
//				Иначе	
//					Проводка.СчетКт										= СчетТовары;
//					Проводка.СубконтоКт.МестаХранения					= СтрокаРасчетчик.Расчетчик;
//					Проводка.СубконтоКт.Товары							= СтрокаТовар.Номенклатура;
//					Проводка.СубконтоКт.СтатьиТовародвижения			= СтрокаКешНастройка.СтатьяДвиженияТоваров;
//					Проводка.КоличествоКт                               = СтрокаТовар.ВозвратПокупателя;
//				КонецЕсли;
//				
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;	
//	
//КонецПроцедуры	

Процедура ПроведениеПоРегиструТоваров(ТабТоваров, ТоварыПеремещениеМеждуТТ)
	
	//ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	//
	//ДатаУсеченияБазы = '00010101';
	//
	//СтрЗапрос = "SELECT CAST([SMS_REPL].[dbo].[date_arc] () as datetime) as date";
	//			   
	//rs = ADOСоединение.Execute(СтрЗапрос);
	//
	//Попытка
	//	rs.MoveFirst();
	//	
	//	Если НЕ rs.EOF() Тогда
	//		ДатаУсеченияБазы = Rs.Fields("date").Value;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	//
	//ADOСоединение = Неопределено;
	//
	//Если Дата < КонецДня(ДатаУсеченияБазы) + 1 Тогда
	////	Возврат;
	//КонецЕсли;	
	
	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.ТоварыНаСкладах.Очистить();
	
	Движения.ДвиженияТоваровПоЛистамУчета.Записывать = Истина;
	Движения.ДвиженияТоваровПоЛистамУчета.Очистить();
	
	//+++АК Susk (Суслин К.В.) 2018.04.17 ИП-00017896
	Движения.ПрочиеСклады.Записывать = Истина;
	Движения.ПрочиеСклады.Очистить();
	//---АК Susk (Суслин К.В.) 
	
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка.ТипРозничнойТочки) Тогда
		Возврат;
	КонецЕсли;
	
	СкладТТ = ТорговаяТочка.СкладТорговогоЗала;
	СкладРасхождений = ТорговаяТочка.СкладРасхождений;
	ЗапросКешТовары = Новый Запрос();
	ЗапросКешТовары.Текст = "ВЫБРАТЬ
	                        |	Номенклатура.Ссылка,
	                        |	Номенклатура.ЕдиницаХраненияОстатков
	                        |ИЗ
	                        |	Справочник.Номенклатура КАК Номенклатура
	                        |ГДЕ
	                        |	Номенклатура.Ссылка В(&Товары)";
							
	ЗапросКешТовары.УстановитьПараметр("Товары", ТабТоваров.ВыгрузитьКолонку("Номенклатура"));
	ТабКеш = ЗапросКешТовары.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(СкладТТ) Тогда
		Для Каждого СтрокаТовар Из ТабТоваров Цикл
			СтрокаКеш = ТабКеш.Найти(СтрокаТовар.Номенклатура, "Ссылка");
			//+++АК SaMi 2018.04.25  ИП-00018340.01 
			//Поступило = СтрокаТовар.Поступило + СтрокаТовар.Разница + СтрокаТовар.ПолученоСДругихТТ - СтрокаТовар.ОтправленоНаДругиеТТ + СтрокаТовар.Комплектация;
			Поступило = СтрокаТовар.Поступило + СтрокаТовар.Разница + СтрокаТовар.ПолученоСДругихТТ - СтрокаТовар.ОтправленоНаДругиеТТ + СтрокаТовар.Комплектация + СтрокаТовар.Производство;
			//---АК SaMi  2018.04.25 
			РасходКоличество = СтрокаТовар.Дегустация + СтрокаТовар.Акция + СтрокаТовар.Списание + СтрокаТовар.СписаниеПоКачеству + СтрокаТовар.Бой + СтрокаТовар.Продано;
			Если Поступило - РасходКоличество <> 0 Тогда
				Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
				Движение.Период = Дата;
				Движение.Склад = СкладТТ;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.ЕдиницаИзмерения = ?(СтрокаКеш = Неопределено, Неопределено, СтрокаКеш.ЕдиницаХраненияОстатков);
				Движение.Количество = Поступило - РасходКоличество;
			КонецЕсли;
			
			//РасходКоличество = СтрокаТовар.Дегустация + СтрокаТовар.Акция + СтрокаТовар.Списание + СтрокаТовар.СписаниеПоКачеству + СтрокаТовар.Бой + СтрокаТовар.Продано;
			//Если РасходКоличество <> 0 Тогда
			//	Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
			//	Движение.Период = Дата;
			//	Движение.Склад = СкладТТ;
			//	Движение.Номенклатура = СтрокаТовар.Номенклатура;
			//	Движение.ЕдиницаИзмерения = ?(СтрокаКеш = Неопределено, Неопределено, СтрокаКеш.ЕдиницаХраненияОстатков);
			//	Движение.Количество = РасходКоличество;
			//КонецЕсли;
			
			Если СтрокаТовар.Поступило <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Поступление;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Поступило;
			КонецЕсли;
			
			Если СтрокаТовар.ПоступилоБезВозврата <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.ПоступлениеБезВозвратаНаСклад;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.ПоступилоБезВозврата;
			КонецЕсли;
			
			Если СтрокаТовар.Разница <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Разница;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Разница;
			КонецЕсли;
			
			Если СтрокаТовар.Дегустация <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Дегустация;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Дегустация * -1;
			КонецЕсли;
			
			Если СтрокаТовар.Акция <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Акция;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Акция * -1;
			КонецЕсли;
			
			Если СтрокаТовар.Списание <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Списание;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Списание * -1;
			КонецЕсли;
			
			Если СтрокаТовар.СписаниеПоКачеству <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.СписаниеПоКачеству;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.СписаниеПоКачеству * -1;
			КонецЕсли;
			
			Если СтрокаТовар.Бой <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Бой;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Бой * -1;
			КонецЕсли;
			
			Если СтрокаТовар.Продано <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Продажа;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Продано * -1;
			КонецЕсли;
			
			Если СтрокаТовар.ВозвратПокупателя <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.ВозвратОтПокупателя;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.ВозвратПокупателя;
			КонецЕсли;
			
			Если СтрокаТовар.Комплектация <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Комплектация;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Комплектация;
			КонецЕсли;
			
			//+++АК SaMi 2018.04.25 ИП-00018340.01 
			Если СтрокаТовар.Производство <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.Производство;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.Производство;
			КонецЕсли;
			//---АК SaMi  2018.04.25 
			
		КонецЦикла;	
		
		Для Каждого СтрокаТовар Из ТоварыПеремещениеМеждуТТ Цикл
			Если СтрокаТовар.КоличествоПолучено <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.ПолученоСДругойТТ;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.КоличествоПолучено;
				Движение.СтруктурнаяЕдиницаПеремещения = СтрокаТовар.ТорговаяТочка;
			КонецЕсли;
			
			Если СтрокаТовар.КоличествоПередано <> 0 Тогда
				Движение = Движения.ДвиженияТоваровПоЛистамУчета.Добавить();
				Движение.Период = Дата;
				Движение.СтруктурнаяЕдиница = ТорговаяТочка;
				Движение.ВидДвиженияТовара = Перечисления.ВидДвиженияТовараПоЛистуУчета.ОтправленоНаДругуюТТ;
				Движение.Номенклатура = СтрокаТовар.Номенклатура;
				Движение.Количество = СтрокаТовар.КоличествоПередано * (-1);
				Движение.СтруктурнаяЕдиницаПеремещения = СтрокаТовар.ТорговаяТочка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//+++АК Susk (Суслин К.В.) 2018.04.17 ИП-00017896
	//Заполняю регистр "Прочие склады" по другому
	
	////+++АК MIND 2018.02.15 новая схема инвентаризаций на торговых точках, убираем на спец склад, а с него списываем концом месяца
	////+++АК Susk (Суслин К.В.) 2018.03.07 ИП-00017896 - проверка на новую дату товародвижения	 
	//Если ЗначениеЗаполнено(СкладРасхождений) И Товародвижение.ТовародвижениеПоНовойСхеме(Дата) Тогда
	////---АК Susk (Суслин К.В.) 
	//	Для Каждого СтрокаТовар Из ТабТоваров Цикл
	//		СтрокаКеш = ТабКеш.Найти(СтрокаТовар.Номенклатура, "Ссылка");
	//		Если СтрокаТовар.Разница <> 0 Тогда
	//			Движение = Движения.ТоварыНаСкладах.ДобавитьПриход();
	//			Движение.Период = Дата;
	//			Движение.Склад = СкладРасхождений;
	//			Движение.Номенклатура = СтрокаТовар.Номенклатура;
	//			Движение.ЕдиницаИзмерения = ?(СтрокаКеш = Неопределено, Неопределено, СтрокаКеш.ЕдиницаХраненияОстатков);
	//			Движение.Количество = СтрокаТовар.Разница;
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;
	////---АК MIND 
	
	Если Товародвижение.ТовародвижениеПоНовойСхеме(Дата) Тогда
		
		Если СкладРасхождений.Пустая() Тогда
			СкладРасхождений = СоздатьНедостающиеСкладыРасхождений();
		КонецЕсли;
		
		ТаблицаДвижений = Движения.ДвиженияТоваровПоЛистамУчета.Выгрузить(, "ВидДвиженияТовара,Номенклатура,Количество");
		
		СоздатьДвиженияПоПрочимСкладам(СкладРасхождений, ТаблицаДвижений);
		
	КонецЕсли;
	
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры	

Процедура ЗаписатьКорректировкиЛистаУчета(Отказ = Ложь)
	
	ЭтоКопияБазы = ОбщегоНазначения.ЭтоКопияБазы();
	Если ЭтоКопияБазы Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ДополнительныеСвойства.Свойство("ТоварыИзменение") Тогда
		Возврат;
	КонецЕсли;
	
	//+++ZEZA
	МассивДат = Новый Массив;
	//---ZEZA
	
	Если ДополнительныеСвойства.ТоварыИзменение.Количество() > 0 Тогда
		
		//
		МинДатаИзменения 	= НачалоДня(Дата);
		МаксДатаИзменения 	= НачалоДня(Дата);
		МассивНоменклатура 	= Новый Массив();
		ТабИзмененияКоличества = Новый ТаблицаЗначений();
		ТабИзмененияКоличества.Колонки.Добавить("Дата"					, Новый ОписаниеТипов("Дата"));
		ТабИзмененияКоличества.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабИзмененияКоличества.Колонки.Добавить("id_tov"				, Новый ОписаниеТипов("Число"));
		ТабИзмененияКоличества.Колонки.Добавить("КоличествоИзменение"	, Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаИзменение Из ДополнительныеСвойства.ТоварыИзменение Цикл
			МинДатаИзменения 	= Мин(СтрокаИзменение.Дата	, МинДатаИзменения);
			МаксДатаИзменения 	= Макс(СтрокаИзменение.Дата	, МаксДатаИзменения);
			Если МассивНоменклатура.Найти(СтрокаИзменение.Номенклатура) = Неопределено Тогда
				МассивНоменклатура.Добавить(СтрокаИзменение.Номенклатура);
			КонецЕсли;
			
			//+++ZEZA
			МассивДат.Добавить(НачалоДня(СтрокаИзменение.Дата));
			//---ZEZA
			
		КонецЦикла;
		
		// добавление строк для каждой даты в таблицу изменений количеств для записи в таблицу остатков
		Для Каждого ЭлементНоменклатура Из МассивНоменклатура Цикл
			ДатаОбработки = Мин(МинДатаИзменения, НачалоДня(Дата));
			Пока ДатаОбработки <= Макс(МаксДатаИзменения, НачалоДня(Дата)) Цикл
				СтрокиИзменений = ДополнительныеСвойства.ТоварыИзменение.НайтиСтроки(Новый Структура("Дата, Номенклатура, АвтоматическоеДвижение", ДатаОбработки, ЭлементНоменклатура, Ложь));
				Если СтрокиИзменений.Количество() > 0 Тогда
					Для Каждого СтрокаИзменение Из СтрокиИзменений Цикл
						СтрокаТабИзменение = ТабИзмененияКоличества.Добавить();
						СтрокаТабИзменение.Дата 				= СтрокаИзменение.Дата;
						СтрокаТабИзменение.Номенклатура 		= СтрокаИзменение.Номенклатура;
						СтрокаТабИзменение.КоличествоИзменение 	= СтрокаИзменение.Количество;
						Если СтрокаИзменение.КодОперации = 510 
								ИЛИ СтрокаИзменение.КодОперации = 101
								ИЛИ СтрокаИзменение.КодОперации = 102
								ИЛИ СтрокаИзменение.КодОперации = 103 
								ИЛИ СтрокаИзменение.КодОперации = 104 
								ИЛИ СтрокаИзменение.КодОперации = 105 Тогда
							СтрокаТабИзменение.КоличествоИзменение = СтрокаИзменение.Количество * (-1);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СтрокаТабИзменение = ТабИзмененияКоличества.Добавить();
					СтрокаТабИзменение.Дата 				= ДатаОбработки;
					СтрокаТабИзменение.Номенклатура 		= ЭлементНоменклатура;
					СтрокаТабИзменение.КоличествоИзменение 	= 0;
				КонецЕсли;		
				ДатаОбработки = ДатаОбработки + 86400;
			КонецЦикла;	
		КонецЦикла;	
			
		ТабИзмененияКоличества.Свернуть("Дата, Номенклатура, id_tov", "КоличествоИзменение");
		ТабИзмененияКоличества.Сортировать("Дата");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатура);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.id_tov
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
					   
		ТабНоменклатура = Запрос.Выполнить().Выгрузить();
		ТабНоменклатура.Индексы.Добавить("Ссылка");
		
		//обработаем таблицу изменений количества, чтобы в каждой дате количество стояло с учетом изменений предыдущих дат
		Для Каждого СтрокаИзменениеКоличества Из ТабИзмененияКоличества Цикл
			СтрокаНоменклатура = ТабНоменклатура.Найти(СтрокаИзменениеКоличества.Номенклатура, "Ссылка");
			СтрокаИзменениеКоличества.id_tov = СтрокаНоменклатура.id_tov;
			СтрокиИзмененияПоНоменклатуре = ТабИзмененияКоличества.НайтиСтроки(Новый Структура("Дата, Номенклатура", СтрокаИзменениеКоличества.Дата - 86400, СтрокаИзменениеКоличества.Номенклатура));
			Если СтрокиИзмененияПоНоменклатуре.Количество() > 0 Тогда
				СтрокаИзменениеКоличества.КоличествоИзменение = СтрокаИзменениеКоличества.КоличествоИзменение + СтрокиИзмененияПоНоменклатуре[0].КоличествоИзменение; 
			КонецЕсли;	
		КонецЦикла;
		
		КолвоСтрок = ТабИзмененияКоличества.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если ТабИзмененияКоличества[КолвоСтрок - н].КоличествоИзменение = 0 Тогда
				ТабИзмененияКоличества.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;	
		
		ИД_ТТ 	= ТорговаяТочка.id_TT;
		НомерТТ = ТорговаяТочка.НомерТочки;
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		ТекстОтборНоменклатура = "9999999";
		Для Каждого ЭлементАйди Из ТабНоменклатура.ВыгрузитьКолонку("id_tov") Цикл
			ТекстОтборНоменклатура = ТекстОтборНоменклатура + ", " + ВнешниеДанные.ФорматПоля(ЭлементАйди);
		КонецЦикла;	
		
		ТабРеквизитыОпераций = Новый ТаблицаЗначений();
		ТабРеквизитыОпераций.Колонки.Добавить("ManufacturerID");
		ТабРеквизитыОпераций.Колонки.Добавить("BasePrice");
		ТабРеквизитыОпераций.Колонки.Добавить("id_tov_cl");
		ТабРеквизитыОпераций.Колонки.Добавить("date_ch");
		
		СтрЗапрос = "SELECT DISTINCT Chl.ManufacturerID
					|		, Chl.BasePrice
					|		, Chl.id_tov_cl
					|		, CAST(Chl.date_ch as datetime) as date_ch
					|FROM [SMS_IZBENKA].[dbo].[CheckLine] as Chl (nolock)
					|  
					|WHERE Chl.date_ch >= " + ВнешниеДанные.ФорматПоля(МинДатаИзменения, Истина) + " and Chl.date_ch <= " + ВнешниеДанные.ФорматПоля(КонецДня(МаксДатаИзменения), Истина) + "
					|	and Chl.id_tov_cl IN (" + ТекстОтборНоменклатура + ")
					|	and Chl.ID_TT_cl = " + ВнешниеДанные.ФорматПоля(ИД_ТТ) + "
					|  
					|";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабРеквизитыОпераций.Добавить();
				СтрокаДоб.ManufacturerID = Rs.Fields("ManufacturerID").Value;
				СтрокаДоб.BasePrice = Rs.Fields("BasePrice").Value;
				СтрокаДоб.id_tov_cl = Rs.Fields("id_tov_cl").Value;
				СтрокаДоб.date_ch = Rs.Fields("date_ch").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		ТабРеквизитыЧеков = Новый ТаблицаЗначений();
		ТабРеквизитыЧеков.Колонки.Добавить("CashID");
		
		СтрЗапрос = "SELECT DISTINCT Ch.CashId
					|FROM [SMS_IZBENKA].[dbo].[Checks] as Ch (nolock)
					|  
					|WHERE Ch.CloseDate >= " + ВнешниеДанные.ФорматПоля(МинДатаИзменения) + " and Ch.CloseDate <= " + ВнешниеДанные.ФорматПоля(КонецДня(МаксДатаИзменения)) + "
					|	and Ch.CashId <> 0
					|	and Ch.ShopNo = " + ВнешниеДанные.ФорматПоля(НомерТТ) + "
					|  
					|";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабРеквизитыЧеков.Добавить();
				СтрокаДоб.CashId = Rs.Fields("CashId").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		СчетчикЦиклов = 0;
		ТекстДобавленияЧеков 		= "";
		ТекстДобавленияСтрокЧеков 	= "";
		Для Каждого СтрокаИзменение Из ДополнительныеСвойства.ТоварыИзменение Цикл
			Если СчетчикЦиклов % 500 = 0 Тогда
				ТекстДобавленияЧеков = ТекстДобавленияЧеков + Символы.ПС +
									"INSERT INTO [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[Checks]
									|		   ([CheckUID]
									|		   ,[ShopNo]
									|		   ,[CashID]
									|		   ,[CloseDate]
									|		   ,[BaseSum]
									|		   ,[Discount]
									|		   ,[OperationType]
									|		   ,[JournType]
									|		   ,[JournDateTime])
									|VALUES ";
									
				ТекстДобавленияСтрокЧеков = ТекстДобавленияСтрокЧеков + Символы.ПС +
									"INSERT INTO [SMS_IZBENKA" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[CheckLine]
									|		   ([CheckLineUID]
									|		   ,[CheckUID]
									|		   ,[ScaleUID]
									|		   ,[ScalePropertyUID]
									|		   ,[ManufacturerID]
									|		   ,[ArticleUID]
									|		   ,[BasePrice]
									|		   ,[Quantity]
									|		   ,[BaseSum]
									|		   ,[Discount]
									|		   ,[DiscountType]
									|		   ,[id_tt_cl]
									|		   ,[id_tov_cl]
									|		   ,[date_ch]
									|		   ,[time_ch]
									|		   ,[OperationType_cl])
									|VALUES ";
			КонецЕсли;
			УИНЧека 		= Строка(Новый УникальныйИдентификатор());
			УинСтрокиЧека 	= Строка(Новый УникальныйИдентификатор());
			
			СтрокаНоменклатура = ТабНоменклатура.Найти(СтрокаИзменение.Номенклатура, "Ссылка");
			СтрокиРеквизитов = ТабРеквизитыОпераций.НайтиСтроки(Новый Структура("id_tov_cl", СтрокаНоменклатура.id_tov));
			
			//ScaleUID = "";
			//ScalePropertyUID = "";
			ManufacturerID = "";
			//ArticleUID = "";
			BasePrice = 0;
			CashID = 0;
			Если СтрокиРеквизитов.Количество() > 0 Тогда
				//ScaleUID 			= СтрокиРеквизитов[0].ScaleUID;
				//ScalePropertyUID 	= СтрокиРеквизитов[0].ScalePropertyUID;
				ManufacturerID 		= СтрокиРеквизитов[0].ManufacturerID;
				//ArticleUID 			= СтрокиРеквизитов[0].ArticleUID;
				//BasePrice = СтрокиРеквизитов[0].BasePrice;
			КонецЕсли;	
			
			Если ТабРеквизитыЧеков.Количество() > 0 Тогда
				CashID = ТабРеквизитыЧеков[0].CashID;
			КонецЕсли;	
			
			//Если СтрокаИзменение.КодОперации <> 1 Тогда
			//	BasePrice = 0;
			//КонецЕсли;
			//СуммаКор = BasePrice * СтрокаИзменение.Количество;
			СуммаКор = 0;
			
			КолКорректировки = СтрокаИзменение.Количество;
			КодОперации = СтрокаИзменение.КодОперации;
			Если КодОперации = 400
					И КолКорректировки < 0 Тогда
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 401;
			ИначеЕсли КодОперации = 520
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 521;
			ИначеЕсли КодОперации = 101
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 111;
			ИначеЕсли КодОперации = 102
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 112;
			ИначеЕсли КодОперации = 103
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 113;
			ИначеЕсли КодОперации = 104
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 114;
			ИначеЕсли КодОперации = 105
					И КолКорректировки < 0 Тогда
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 115; // подарок идет теперь с кодом продажи
			ИначеЕсли КодОперации = 105 Тогда
				КодОперации = 1;
			ИначеЕсли КодОперации = 510 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				СуммаКор = СтрокаИзменение.Сумма * (-1);
				Если КолКорректировки = 0 Тогда
					BasePrice = 0;
				Иначе
					BasePrice = Окр(СтрокаИзменение.Сумма / КолКорректировки, 2);
					Если BasePrice < 0 Тогда
						BasePrice = BasePrice * (-1);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			ТекстДобавленияЧеков = ТекстДобавленияЧеков + Символы.ПС + ?(Прав(ТекстДобавленияЧеков, 1) = ")", ",", "") +
				"('" + УИНЧека + "', " + Формат(НомерТТ, "ЧГ=0") + ", " + Формат(CashID, "ЧГ=0") + ", '" +
				Формат(НачалоДня(СтрокаИзменение.Дата) + ?(СтрокаИзменение.ЭтоКорректировкаПоеЛУ, 5400, 3600), "ДФ='yyyy-MM-ddTHH:mm:ss'") + "'
				|		, " + Формат(СуммаКор, "ЧРД=.; ЧН=; ЧГ=0") + ", 0, " + Формат(КодОперации, "ЧГ=0") + "
				|		, 3, '" + Формат(ТекущаяДата(), "ДФ='yyyy-MM-ddTHH:mm:ss'") + "')";
									
			ТекстДобавленияСтрокЧеков = ТекстДобавленияСтрокЧеков + Символы.ПС + ?(Прав(ТекстДобавленияСтрокЧеков, 1) = ")", ",", "") +
				"('" + УинСтрокиЧека + "', '" + УИНЧека + "', NULL, NULL, NULL
				|	,NULL, " + Формат(BasePrice, "ЧРД=.; ЧН=; ЧГ=0") + ", " + Формат(КолКорректировки, "ЧРД=.; ЧН=; ЧГ=0") + "
				|	, " + Формат(СуммаКор, "ЧРД=.; ЧН=; ЧГ=0") + ",0,0, " + Формат(ИД_ТТ, "ЧГ=0") + ", " +
				Формат(СтрокаНоменклатура.id_tov, "ЧГ=0") + "
				|	, '" + Формат(НачалоДня(СтрокаИзменение.Дата) + ?(СтрокаИзменение.ЭтоКорректировкаПоеЛУ, 5400, 3600), "ДФ=yyyy-MM-dd") + "', '" +
				Формат(НачалоДня(СтрокаИзменение.Дата) + ?(СтрокаИзменение.ЭтоКорректировкаПоеЛУ, 5400, 3600), "ДФ=HH:mm:ss") + "', '" + Формат(КодОперации, "ЧГ=0") + "')"; //+++ZEZA
									
			//ТекстДобавленияСтрокЧеков = ТекстДобавленияСтрокЧеков + Символы.ПС + ?(Прав(ТекстДобавленияСтрокЧеков, 1) = ")", ",", "")
			//							+ "('" + УинСтрокиЧека + "', '" + УИНЧека + "', '" + ScaleUID + "', '" + ScalePropertyUID + "', '" + ManufacturerID + "' 
			//							|	,'" + ArticleUID + "', " + Формат(BasePrice, "ЧРД=.; ЧН=; ЧГ=0") + ", " + Формат(КолКорректировки, "ЧРД=.; ЧН=; ЧГ=0") + "
			//							|	, " + Формат(СуммаКор, "ЧРД=.; ЧН=; ЧГ=0") + ",0,0, " + Формат(ИД_ТТ, "ЧГ=0") + ", " + Формат(СтрокаНоменклатура.id_tov, "ЧГ=0") + "
			//							|	, '" + Формат(НачалоДня(СтрокаИзменение.Дата) + 3600, "ДФ=yyyy-MM-dd") + "', '" + Формат(НачалоДня(СтрокаИзменение.Дата) + 3600, "ДФ=HH:mm:ss") + "', '" + Формат(КодОперации, "ЧГ=0") + "')"; //+++ZEZA
			
			СчетчикЦиклов = СчетчикЦиклов + 1;
		КонецЦикла;	
		
		СтрЗапрос = ТекстДобавленияЧеков + Символы.ПС + ТекстДобавленияСтрокЧеков;
		
		ЗапросПолный = "declare @err int =1
					|while @err=1
					|begin
					| begin try
					|" + СтрЗапрос + "
					|select @err=0
					| 
					| END TRY
					|  BEGIN CATCH
					| 
					|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
					|begin
					|-- запись в лог факта блокировки
					|	set @err=1
					|end
					|else
					|begin
					| 
					|-- прочая ошибка - выход  
					| return
					| end
					| 
					|  END CATCH 
					|end -- while";
		
		ADOСоединение.Execute(ЗапросПолный);
		
		ADOСоединение.Execute("Declare @Kolvo int = DATEDIFF(day, '2014-01-01', GetDate())
								|EXEC Reports.dbo.Update_DTT_data @id_job = 1000, @id_tt = " + ВнешниеДанные.ФорматПоля(ИД_ТТ) + ", @days = @Kolvo;");
		
	КонецЕсли;
	
	//+++ZEZA необходимо перепровести те документы, в которые были перенесны операции
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЛистУчета.Ссылка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) В (&МассивДат)
	               |	И ЛистУчета.Проведен
	               |	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
	               |	И ЛистУчета.Ссылка <> &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета.Дата";
	
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("МассивДат", МассивДат);
	ПостроительЗапроса.Параметры.Вставить("ТорговаяТочка", ТорговаяТочка);
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		//
		Попытка
			ДокументОбъект.СчитыватьТаблицуТоваровСЧековДляПроведения = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			//??? Отказ = Истина; //как быть с отказами? 
		КонецПопытки;	
		
	КонецЦикла;	
	
	//---ZEZA
	
	//
	ДополнительныеСвойства.Вставить("ЗаписьИзмененийВSqlУдачна", Истина); //если выполнение пришло сюда, значит запись изменений прошла успешно
	
КонецПроцедуры	

Процедура ЗаписатьКорректировкиЛистаУчетаПоВкусвилл(Отказ = Ложь)
	
	ЭтоКопияБазы = ОбщегоНазначения.ЭтоКопияБазы();
	Если ЭтоКопияБазы Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ДополнительныеСвойства.Свойство("ТоварыИзменение") Тогда
		Возврат;
	КонецЕсли;
	
	//+++ZEZA
	МассивДат = Новый Массив;
	//---ZEZA
	
	Если ДополнительныеСвойства.ТоварыИзменение.Количество() > 0 Тогда
		
		//
		МинДатаИзменения 	= НачалоДня(Дата);
		МаксДатаИзменения 	= НачалоДня(Дата);
		МассивНоменклатура 	= Новый Массив();
		ТабИзмененияКоличества = Новый ТаблицаЗначений();
		ТабИзмененияКоличества.Колонки.Добавить("Дата"					, Новый ОписаниеТипов("Дата"));
		ТабИзмененияКоличества.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабИзмененияКоличества.Колонки.Добавить("id_tov"				, Новый ОписаниеТипов("Число"));
		ТабИзмененияКоличества.Колонки.Добавить("КоличествоИзменение"	, Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаИзменение Из ДополнительныеСвойства.ТоварыИзменение Цикл
			МинДатаИзменения 	= Мин(СтрокаИзменение.Дата	, МинДатаИзменения);
			МаксДатаИзменения 	= Макс(СтрокаИзменение.Дата	, МаксДатаИзменения);
			Если МассивНоменклатура.Найти(СтрокаИзменение.Номенклатура) = Неопределено Тогда
				МассивНоменклатура.Добавить(СтрокаИзменение.Номенклатура);
			КонецЕсли;
			
			//+++ZEZA
			МассивДат.Добавить(НачалоДня(СтрокаИзменение.Дата));
			//---ZEZA
			
		КонецЦикла;
		
		// добавление строк для каждой даты в таблицу изменений количеств для записи в таблицу остатков
		Для Каждого ЭлементНоменклатура Из МассивНоменклатура Цикл
			ДатаОбработки = Мин(МинДатаИзменения, НачалоДня(Дата));
			Пока ДатаОбработки <= Макс(МаксДатаИзменения, НачалоДня(Дата)) Цикл
				СтрокиИзменений = ДополнительныеСвойства.ТоварыИзменение.НайтиСтроки(Новый Структура("Дата, Номенклатура, АвтоматическоеДвижение", ДатаОбработки, ЭлементНоменклатура, Ложь));
				Если СтрокиИзменений.Количество() > 0 Тогда
					Для Каждого СтрокаИзменение Из СтрокиИзменений Цикл
						СтрокаТабИзменение = ТабИзмененияКоличества.Добавить();
						СтрокаТабИзменение.Дата 				= СтрокаИзменение.Дата;
						СтрокаТабИзменение.Номенклатура 		= СтрокаИзменение.Номенклатура;
						СтрокаТабИзменение.КоличествоИзменение 	= СтрокаИзменение.Количество;
						Если СтрокаИзменение.КодОперации = 510 
								ИЛИ СтрокаИзменение.КодОперации = 101
								ИЛИ СтрокаИзменение.КодОперации = 102
								ИЛИ СтрокаИзменение.КодОперации = 103 
								ИЛИ СтрокаИзменение.КодОперации = 104 
								ИЛИ СтрокаИзменение.КодОперации = 105 Тогда
							СтрокаТабИзменение.КоличествоИзменение = СтрокаИзменение.Количество * (-1);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СтрокаТабИзменение = ТабИзмененияКоличества.Добавить();
					СтрокаТабИзменение.Дата 				= ДатаОбработки;
					СтрокаТабИзменение.Номенклатура 		= ЭлементНоменклатура;
					СтрокаТабИзменение.КоличествоИзменение 	= 0;
				КонецЕсли;		
				ДатаОбработки = ДатаОбработки + 86400;
			КонецЦикла;	
		КонецЦикла;	
			
		ТабИзмененияКоличества.Свернуть("Дата, Номенклатура, id_tov", "КоличествоИзменение");
		ТабИзмененияКоличества.Сортировать("Дата");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатура);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.id_tov
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
					   
		ТабНоменклатура = Запрос.Выполнить().Выгрузить();
		ТабНоменклатура.Индексы.Добавить("Ссылка");
		
		//обработаем таблицу изменений количества, чтобы в каждой дате количество стояло с учетом изменений предыдущих дат
		Для Каждого СтрокаИзменениеКоличества Из ТабИзмененияКоличества Цикл
			СтрокаНоменклатура = ТабНоменклатура.Найти(СтрокаИзменениеКоличества.Номенклатура, "Ссылка");
			СтрокаИзменениеКоличества.id_tov = СтрокаНоменклатура.id_tov;
			СтрокиИзмененияПоНоменклатуре = ТабИзмененияКоличества.НайтиСтроки(Новый Структура("Дата, Номенклатура", СтрокаИзменениеКоличества.Дата - 86400, СтрокаИзменениеКоличества.Номенклатура));
			Если СтрокиИзмененияПоНоменклатуре.Количество() > 0 Тогда
				СтрокаИзменениеКоличества.КоличествоИзменение = СтрокаИзменениеКоличества.КоличествоИзменение + СтрокиИзмененияПоНоменклатуре[0].КоличествоИзменение; 
			КонецЕсли;	
		КонецЦикла;
		
		КолвоСтрок = ТабИзмененияКоличества.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если ТабИзмененияКоличества[КолвоСтрок - н].КоличествоИзменение = 0 Тогда
				ТабИзмененияКоличества.Удалить(КолвоСтрок - н);
			КонецЕсли;	
		КонецЦикла;	
		
		ИД_ТТ 	= ТорговаяТочка.id_TT;
		НомерТТ = ТорговаяТочка.НомерТочки;
		
		ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
		
		ТекстОтборНоменклатура = "9999999";
		Для Каждого ЭлементАйди Из ТабНоменклатура.ВыгрузитьКолонку("id_tov") Цикл
			ТекстОтборНоменклатура = ТекстОтборНоменклатура + ", " + ВнешниеДанные.ФорматПоля(ЭлементАйди);
		КонецЦикла;	
		
		ТабРеквизитыОпераций = Новый ТаблицаЗначений();
		ТабРеквизитыОпераций.Колонки.Добавить("id_kontr");
		ТабРеквизитыОпераций.Колонки.Добавить("id_tov_cl");
		ТабРеквизитыОпераций.Колонки.Добавить("date_ch");
		
		СтрЗапрос = "SELECT DISTINCT Chl.id_kontr, Chl.id_tov, cAST(CAST(Chl.closedate as date) as datetime) as date_ch
					|FROM [SMS_REPL].[dbo].[TD_move] as Chl (nolock)
					|  
					|WHERE Chl.closedate >= " + ВнешниеДанные.ФорматПоля(МинДатаИзменения) + " and Chl.closedate <= " + ВнешниеДанные.ФорматПоля(КонецДня(МаксДатаИзменения)) + "
					|	and Chl.id_tov IN (" + ТекстОтборНоменклатура + ")
					|	and Chl.ShopNo_rep = " + ВнешниеДанные.ФорматПоля(НомерТТ) + "
					|  
					|";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабРеквизитыОпераций.Добавить();
				СтрокаДоб.id_kontr = Rs.Fields("id_kontr").Value;
				СтрокаДоб.id_tov_cl = Rs.Fields("id_tov").Value;
				СтрокаДоб.date_ch = Rs.Fields("date_ch").Value;
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		СчетчикЦиклов = 0;
		ТекстДобавленияЧеков 		= "";
		ТекстДобавленияСтрокЧеков 	= "";
		Для Каждого СтрокаИзменение Из ДополнительныеСвойства.ТоварыИзменение Цикл
			Если СчетчикЦиклов % 500 = 0 Тогда
				ТекстДобавленияЧеков = ТекстДобавленияЧеков + Символы.ПС +
									"INSERT INTO [SMS_REPL" + ?(ЭтоКопияБазы, "_Deb", "") + "].[dbo].[TD_Move]
									|		   ([Id_doc]
									|		   ,[opendate]
									|		   ,[closedate]
									|		   ,[line_no]
									|		   ,[id_kontr]
									|		   ,[id_tov]
									|		   ,[operation_type]
									|		   ,[operation_type_orig]
									|		   ,[Quantity]
									|		   ,[CashierID]
									|		   ,[Confirm_type]
									|		   ,[Confirm_date]
									|		   ,[Confirm_reason]
									|		   ,[Descr]
									|		   ,[ShopNo_rep]
									|		   ,[flg_confirm])
									|VALUES ";
									
			КонецЕсли;
			
			СтрокаНоменклатура = ТабНоменклатура.Найти(СтрокаИзменение.Номенклатура, "Ссылка");
			СтрокиРеквизитов = ТабРеквизитыОпераций.НайтиСтроки(Новый Структура("id_tov_cl", СтрокаНоменклатура.id_tov));
			
			id_kontr = "";
			Если СтрокиРеквизитов.Количество() > 0 Тогда
				//+++АК KIRN 2018.05.21 ИП-00018227
				id_kontr 		= ?(ЗначениеЗаполнено(СтрокиРеквизитов[0].id_kontr),СтрокиРеквизитов[0].id_kontr,"")
				//id_kontr 		= СтрокиРеквизитов[0].id_kontr;
				//---АК KIRN 
			КонецЕсли;	
			
			КолКорректировки = СтрокаИзменение.Количество;
			КодОперации = СтрокаИзменение.КодОперации;
			Если КодОперации = 400
					И КолКорректировки < 0 Тогда
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 401;
			ИначеЕсли КодОперации = 520
					И КолКорректировки < 0 Тогда //у вкусвилла знак обратный избенке	
				КолКорректировки = КолКорректировки * (-1);
			ИначеЕсли КодОперации = 520
					И КолКорректировки > 0 Тогда //у вкусвилла знак обратный избенке	
				КолКорректировки = КолКорректировки;	
				КодОперации = 521;
			ИначеЕсли КодОперации = 101
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 111;
			ИначеЕсли КодОперации = 102
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 112;
			ИначеЕсли КодОперации = 103
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 113;
			ИначеЕсли КодОперации = 104
					И КолКорректировки < 0 Тогда	
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 114;
			ИначеЕсли КодОперации = 105
					И КолКорректировки < 0 Тогда
				КолКорректировки = КолКорректировки * (-1);
				КодОперации = 115; // подарок идет теперь с кодом продажи
			ИначеЕсли КодОперации = 105 Тогда
				//КодОперации = 1;
			ИначеЕсли КодОперации = 510 Тогда	
				КолКорректировки = КолКорректировки * (-1);
			ИначеЕсли НЕ ЗначениеЗаполнено(КодОперации) Тогда 
				ВызватьИсключение "Запрещено вставлять в TD_MOVE операцию с кодом 0";
			КонецЕсли;	
			
			ТекстДобавленияЧеков = ТекстДобавленияЧеков + Символы.ПС + ?(Прав(ТекстДобавленияЧеков, 1) = ")", ",", "")
				+ "(NEWID(), 
				|" + ВнешниеДанные.ФорматПоля(НачалоДня(СтрокаИзменение.Дата) + 3600) + ", 
				|" + ВнешниеДанные.ФорматПоля(НачалоДня(СтрокаИзменение.Дата) + 3600) + ",
				|" + ВнешниеДанные.ФорматПоля(СчетчикЦиклов + 1) + ",
		 		|" + ВнешниеДанные.ФорматПоля(id_kontr) + ",
				|" + ВнешниеДанные.ФорматПоля(СтрокаНоменклатура.id_tov) + ",
				|" + ВнешниеДанные.ФорматПоля(КодОперации) + ",
				|" + ВнешниеДанные.ФорматПоля(КодОперации) + ",
				|" + ВнешниеДанные.ФорматПоля(КолКорректировки) + ",
				|111,
				|1,
				|" + ВнешниеДанные.ФорматПоля(ТекущаяДата()) + ",
				|0,
				|'Корректировка из листа учета',
				|" + ВнешниеДанные.ФорматПоля(НомерТТ) + ",
				|1)";
				
			СчетчикЦиклов = СчетчикЦиклов + 1;
		КонецЦикла;	
		
		СтрЗапрос = ТекстДобавленияЧеков + Символы.ПС + ТекстДобавленияСтрокЧеков;
		
		ЗапросПолный = СтрЗапрос + "
					|";
		
		//ЗапросПолный = "declare @err int =1
		//			|while @err=1
		//			|begin
		//			| begin try
		//			|" + СтрЗапрос + "
		//			|select @err=0
		//			| 
		//			| END TRY
		//			|  BEGIN CATCH
		//			| 
		//			|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
		//			|begin
		//			|-- запись в лог факта блокировки
		//			|	set @err=1
		//			|end
		//			|else
		//			|begin
		//			| 
		//			|-- прочая ошибка - выход  
		//			| return
		//			| end
		//			| 
		//			|  END CATCH 
		//			|end -- while";
		
		ADOСоединение.Execute(ЗапросПолный);
		
		ADOСоединение.Execute("Declare @Kolvo int = DATEDIFF(day, '2014-01-01', GetDate())
								|EXEC Reports.dbo.Update_DTT_data @id_job = 1000, @id_tt = " + ВнешниеДанные.ФорматПоля(ИД_ТТ) + ", @days = @Kolvo;");
		
	КонецЕсли;
	
	//+++ZEZA необходимо перепровести те документы, в которые были перенесны операции
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЛистУчета.Ссылка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) В (&МассивДат)
	               |	И ЛистУчета.Проведен
	               |	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
	               |	И ЛистУчета.Ссылка <> &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета.Дата";
	
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("МассивДат", МассивДат);
	ПостроительЗапроса.Параметры.Вставить("ТорговаяТочка", ТорговаяТочка);
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		//
		Попытка
			ДокументОбъект.СчитыватьТаблицуТоваровСЧековДляПроведения = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			//??? Отказ = Истина; //как быть с отказами? 
		КонецПопытки;	
		
	КонецЦикла;	
	
	//---ZEZA
	
	//
	ДополнительныеСвойства.Вставить("ЗаписьИзмененийВSqlУдачна", Истина); //если выполнение пришло сюда, значит запись изменений прошла успешно
	
КонецПроцедуры	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ++ АК Зайцева А. 14582
	Если ЗначениеЗаполнено(ЭтотОбъект.ТорговаяТочка.СкладТорговогоЗала) И ЭтотОбъект.ТорговаяТочка.СкладТорговогоЗала.ЗаблокироватьДвижениеПоСкладу И ЭтотОбъект.ТорговаяТочка.СкладТорговогоЗала.ДатаБлокировкиДвижений <= НачалоДня(ТекущаяДата()) Тогда
		Сообщить("Движения по складу " + ЭтотОбъект.ТорговаяТочка.СкладТорговогоЗала.Наименование + " заблокированы! Проведение невозможно.");
		Отказ = Истина;
	КонецЕсли;
	//--

	ТипРознТочки = ТорговаяТочка.ТипРозничнойТочки;
	ЭтоИзбенка = (ТипРознТочки = Перечисления.ТипыРозничныхТочек.Избенка);
	//ПервыйЦФОВПериоде 									= ПолучитьПервыйЦФОВПериоде(ТорговаяТочка, Дата);
	//Если ПервыйЦФОВПериоде = Неопределено Тогда 
		ЦФО_ТТ											= ЭтотОбъект.ЦФО;
	//Иначе
	//	ЦФО_ТТ											= ПервыйЦФОВПериоде;
	//КонецЕсли;		
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	
	//Выручка
	
	//+++АК POZM 2018.08.30 ИП-00019521 
	ТекстЗапросаПоАктивнымКурьерам = "ВЫБРАТЬ
	                         |	Контрагенты.Ссылка
	                         |ИЗ
	                         |	Справочник.Контрагенты КАК Контрагенты
	                         |ГДЕ
	                         |	Контрагенты.ДатаНачалаФормированияРТУПоПродажамЧерезКурьеров <= &Дата
	                         |			И Контрагенты.ДатаНачалаФормированияРТУПоПродажамЧерезКурьеров <> ДАТАВРЕМЯ(1, 1, 1)";
	ЗапросПоАктивнымКурьерам = Новый Запрос(ТекстЗапросаПоАктивнымКурьерам);
	ЗапросПоАктивнымКурьерам.УстановитьПараметр("Дата",ЭтотОбъект.Дата);
	ТабАктивныхКурьеров = ЗапросПоАктивнымКурьерам.Выполнить().Выгрузить();
	СуммаНаличныхПродажКурьерам = 0;
	Для каждого СтрокаРасшифровки Из ЭтотОбъект.Выручка Цикл
	
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Курьер) И ТабАктивныхКурьеров.Найти(СтрокаРасшифровки.Курьер) <> Неопределено Тогда
			СуммаНаличныхПродажКурьерам = СуммаНаличныхПродажКурьерам + СтрокаРасшифровки.Сумма;
		КонецЕсли;	
	
	КонецЦикла; 
	//---АК POZM 
	
	Проводка = Движения.Финансовый.Добавить();
	Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
	
	//+++ZEZA
	Если Дата < '20140203' Тогда
		Проводка.Сумма = СуммаДокумента - СуммаЭквайринг + ?(НеВключатьКупонВВыручку,0,Купон) + КорректировкаZ - КорректировкаБезнал;
	ИначеЕсли Дата < '20170101' Тогда	
		Проводка.Сумма = СуммаДокумента - СуммаЭквайринг + КорректировкаZ - КорректировкаБезнал; //??? c 03.02.14 купон не включается в выручку
	Иначе		
		//+++АК POZM 2018.08.30 ИП-00019521 
		Проводка.Сумма = СуммаДокумента - СуммаЭквайринг + КорректировкаZ - КорректировкаБезнал - ОплатаБаллами - СуммаНаличныхПродажКурьерам;		
		//---АК POZM 
	КонецЕсли;
	//---ZEZA
	
	////mind 2014-08-05
	//Если Не ЭтоИзбенка Тогда
	//	Проводка.Сумма = Проводка.Сумма - ВозвратПокупателю;
	//КонецЕсли;	
		
	//Проводка.Организация								= Организация;
	//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
	Проводка.Содержание									= "Выручка ТТ";
	
	Проводка.СчетДт 									= ПланыСчетов.Финансовый.Касса;
	Проводка.СубконтоДт.СтруктурныеЕдиницы 				= ТорговаяТочка;
	Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
	Если Проводка.Период >= '20150101' Тогда
		Проводка.СубконтоДт.Организации 					= Организация;
	Иначе
		Проводка.СубконтоДт.Организации 					= Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
	Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
	Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
	Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
	
	//+++АК POZM 2018.08.30 ИП-00019521 
	Сч62_1 = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
	Если СуммаНаличныхПродажКурьерам <> 0 Тогда
		Для каждого СтрокаРасшифровки Из ЭтотОбъект.Выручка Цикл
	
			Если ЗначениеЗаполнено(СтрокаРасшифровки.Курьер) И ТабАктивныхКурьеров.Найти(СтрокаРасшифровки.Курьер) <> Неопределено Тогда
				
				ПроводкаПоКурьерам = Движения.Финансовый.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаПоКурьерам,Проводка);
				
				ПроводкаПоКурьерам.СчетКт									= Сч62_1;
				ПроводкаПоКурьерам.СубконтоКт.Организации					= Организация;
				ПроводкаПоКурьерам.СубконтоКт.Контрагенты					= СтрокаРасшифровки.Курьер;
				
				
				ПроводкаПоКурьерам.Сумма = СтрокаРасшифровки.Сумма;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	
	//---АК POZM 
	
	Если Отклонение <> 0 Тогда
		//И ЭтоИзбенка Тогда
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
		//+++АК MIND 2017.12.07 попросили сделать сумму красиво в проводках отклонений
		Если Отклонение < 0 Тогда
			СторонаКасса = "Кт";
			СторонаЗатраты = "Дт"
		Иначе
			СторонаКасса = "Дт";
			СторонаЗатраты = "Кт"
		КонецЕсли;	
		Проводка.Сумма														= Отклонение * ?(Отклонение < 0, -1, 1);
		
		Проводка["Счет" + СторонаКасса]										= ПланыСчетов.Финансовый.Касса;
		Проводка["Субконто" + СторонаКасса].СтруктурныеЕдиницы 				= ТорговаяТочка;
		Проводка["Субконто" + СторонаКасса].СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
		Проводка["Субконто" + СторонаКасса].Организации 					= Организация;
		
		Проводка["Счет" + СторонаЗатраты]									= ПланыСчетов.Финансовый.ЗатратыТочекДляРаспределения;
		Проводка["Субконто" + СторонаЗатраты].ТорговыеТочки					= ТорговаяТочка;
		Проводка["Субконто" + СторонаЗатраты].СтатьиДоходовРасходов			= СДРОтклонение20121001;
		Проводка["Субконто" + СторонаЗатраты].ЦФО								= ЦФО_ТТ;
		
		Проводка.Содержание									= "Отклонение сумм выручки ТТ";
	КонецЕсли;		
	
	//Если СуммаЭквайринг + КорректировкаZ <> 0 Тогда
	Если СуммаЭквайринг + КорректировкаБезнал <> 0 Тогда
		Если РасшифровкаБН Тогда
			Для Каждого СтрокаБН ИЗ ОплатыПоБанковскимКартам Цикл 
				ЕСли СтрокаБН.Сумма = 0 Тогда
					ПРодолжить;
				КонецЕсли;
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
				Проводка.Сумма										= СтрокаБН.Сумма;
				//Проводка.Организация								= Организация;
				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
				Проводка.Содержание									= "Списание денежных средств с кредитной карты";
				
				Проводка.СчетДт 									= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
				Проводка.СубконтоДт.Организации 					= Организация;
				Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ?(Дата >= Дата("20130101"), ТорговаяТочка, БСЭквайринг);
				Проводка.СубконтоДт.Терминалы						= СтрокаБН.Терминал;
				
				//+++АК POZM 2018.08.30 ИП-00019521 
				Если ЗначениеЗаполнено(СтрокаБН.Курьер) И ТабАктивныхКурьеров.Найти(СтрокаБН.Курьер) <> Неопределено Тогда
					Проводка.СчетКт									= Сч62_1;
					Проводка.СубконтоКт.Организации					= Организация;
					Проводка.СубконтоКт.Контрагенты					= СтрокаБН.Курьер;
				Иначе	
					Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
					Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
					Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
					Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
				КонецЕсли;	
			КонецЦикла;
		Иначе
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
			//Проводка.Сумма										= СуммаЭквайринг + КорректировкаБезнал;
			//по избенке сумма безнала уже сразу уменьшена на сумму возврата, добавим ее в проводку по безналу
			Проводка.Сумма										= СуммаЭквайринг + КорректировкаБезнал + ВозвратПокупателюБезнал;
			//Проводка.Организация								= Организация;
			//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
			Проводка.Содержание									= "Списание денежных средств с кредитной карты";
			
			//Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка И
			//	ТорговаяТочка.Терминал = Справочники.Терминалы.ПустаяСсылка() Тогда
			//	Проводка.СчетДт 									= ПланыСчетов.Финансовый.Касса; //Случайные надатия на кнопку "Кредит". Считаем наличными
			//	Проводка.СубконтоДт.СтруктурныеЕдиницы 				= ТорговаяТочка;
			//	Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
			//	Если Проводка.Период >= '20150101' Тогда
			//		Проводка.СубконтоДт.Организации 					= Организация;
			//	Иначе
			//		Проводка.СубконтоДт.Организации 					= Справочники.Организации.ПустаяСсылка();	
			//	КонецЕсли;
			//Иначе
				Проводка.СчетДт 									= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
				Проводка.СубконтоДт.Организации 					= Организация;
				//Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ?(Дата >= Дата("20130101"), ТорговаяТочка, БСЭквайринг);
				Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ТорговаяТочка;
				Проводка.СубконтоДт.Терминалы						= Терминал;
			//КонецЕсли;
			
			Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
			Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
			Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
			Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозвратПокупателюБезнал <> 0 Тогда
		Если РасшифровкаБН Тогда
			Для Каждого СтрокаБН ИЗ ОплатыПоБанковскимКартам Цикл 
				ЕСли СтрокаБН.СуммаВозврата = 0 Тогда
					ПРодолжить;
				КонецЕсли;
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
				Проводка.Сумма										= СтрокаБН.СуммаВозврата * (-1);
				//Проводка.Организация								= Организация;
				//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
				Проводка.Содержание									= "Возврат денежных средств на кредитную карту";
				
				Проводка.СчетДт 									= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
				Проводка.СубконтоДт.Организации 					= Организация;
				Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ?(Дата >= Дата("20130101"), ТорговаяТочка, БСЭквайринг);
				Проводка.СубконтоДт.Терминалы						= СтрокаБН.Терминал;
				
				Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
				Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
				Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
				Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
			КонецЦикла;
		Иначе
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
			Проводка.Сумма										= ВозвратПокупателюБезнал * (-1);
			//Проводка.Организация								= Организация;
			//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
			Проводка.Содержание									= "Возврат денежных средств на кредитную карту";
			//
			//+++АК KIRN 2018.05.28 ИП-00018604.01 
			//Если ЭтоИзбенка И ТорговаяТочка.Терминал = Справочники.Терминалы.ПустаяСсылка() Тогда
			//	Проводка.СчетДт 									= ПланыСчетов.Финансовый.Касса; //Случайные надатия на кнопку "Кредит". Считаем наличными
			//	Проводка.СубконтоДт.СтруктурныеЕдиницы 				= ТорговаяТочка;
			//	Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
			//	Если Проводка.Период >= '20150101' Тогда
			//		Проводка.СубконтоДт.Организации 					= Организация;
			//	Иначе
			//		Проводка.СубконтоДт.Организации 					= Справочники.Организации.ПустаяСсылка();	
			//	КонецЕсли;
			//Иначе
			//---АК KIRN 
				Проводка.СчетДт 									= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
				Проводка.СубконтоДт.Организации 					= Организация;
				Проводка.СубконтоДт.ИсточникиДенежныхСредств		= ?(Дата >= Дата("20130101"), ТорговаяТочка, БСЭквайринг);
				Проводка.СубконтоДт.Терминалы						= Терминал;
			//КонецЕсли;
			
			Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
			Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
			Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
			Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
		КонецЕсли;
	КонецЕсли;	
	
	Если Доставка.Количество() > 0 Тогда
		
		СЕ_Доставка = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("id_TT", 192);
		
		Если ЭтотОбъект.Дата < Дата(2014, 3, 1) Тогда
			Для Каждого Платеж Из ЭтотОбъект.Доставка Цикл
				Если Платеж.СуммаБН <> 0 Тогда
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
					Проводка.Сумма										= Платеж.СуммаБН;
					//Проводка.Организация								= Организация;
					//Проводка.СтруктурнаяЕдиница							= СЕ_Доставка;
					Проводка.Содержание									= "Списание денежных средств с кредитной карты";
					
					Проводка.СчетДт 									= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
					Проводка.СубконтоДт.Организации 					= Организация;
					Проводка.СубконтоДт.ИсточникиДенежныхСредств		= СЕ_Доставка;
					Проводка.СубконтоДт.Терминалы						= Эквайринг.ПолучитьТерминал(Платеж.Терминал,Дата);
					
					Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
					Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
					Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
					Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
				КонецЕсли;
				Если Платеж.СуммаНал <> 0 Тогда
					Если Дата < Дата("20131216000000") Тогда
						Проводка = Движения.Финансовый.Добавить();
						Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
						Проводка.Сумма										= Платеж.СуммаНал;
						//Проводка.Организация								= Организация;
						//Проводка.СтруктурнаяЕдиница							= СЕ_Доставка;
						Проводка.Содержание									= "Оплата наличными вместо платежа по эквайрингу";
						
						Проводка.СчетДт 									= ПланыСчетов.Финансовый.Касса;
						Проводка.СубконтоДт.СтруктурныеЕдиницы 				= СЕ_Доставка;
						Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
						Если Проводка.Период >= '20150101' Тогда
							Проводка.СубконтоДт.Организации 					= Организация;
						Иначе
							Проводка.СубконтоДт.Организации 					= Справочники.Организации.ПустаяСсылка();	
						КонецЕсли;
						
						Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
						Проводка.СубконтоКт.ТорговыеТочки					= ТорговаяТочка;
						Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
						Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
					Иначе
						 Отбор = Новый Структура;
						 Отбор.Вставить("Терминал",Платеж.Терминал);
						 СтрРезультат = РегистрыСведений.СотрудникиУправленияДоставки.ПолучитьПоследнее(Дата,Отбор);
						 СотрудникУправленияДоставки = СтрРезультат.СотрудникУправленияДоставки;
						 Если ЗначениеЗаполнено(СотрудникУправленияДоставки) Тогда
							Проводка = Движения.Финансовый.Добавить();
							Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
							Проводка.Сумма										= Платеж.СуммаНал;
							//Проводка.Организация								= Организация;
							//Проводка.СтруктурнаяЕдиница							= СЕ_Доставка;
							Проводка.Содержание									= "Передача в подотчет сотруднику упр. доставки";
							
							Проводка.СчетДт 									= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами;
							Проводка.СубконтоДт.Организации						= Организация;
							Проводка.СубконтоДт.ФизическиеЛица					= СотрудникУправленияДоставки;
							
							Проводка.СчетКт 									= ПланыСчетов.Финансовый.Касса;
							Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ТорговаяТочка;
							Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
							Если Проводка.Период >= '20150101' Тогда
								Проводка.СубконтоКт.Организации 					= Организация;
							Иначе
								Проводка.СубконтоКт.Организации 					= Справочники.Организации.ПустаяСсылка();	
							КонецЕсли;
							
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если (НЕ ЭтотОбъект.Дата < Дата("20140201000000"))
					И НЕ ЭтотОбъект.КорректировкаНалДоставка = 0 Тогда
					//И ((ЭтотОбъект.КорректировкаНалДоставка + ЭтотОбъект.КорректировкаБезналДоставка) < 0) Тогда
					
				Проводка = Движения.Финансовый.Добавить();
				Проводка.Период	= ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаЗакрытияСмены), ЭтотОбъект.ДатаЗакрытияСмены, ЭтотОбъект.Дата);
				Проводка.Сумма				= ЭтотОбъект.КорректировкаНалДоставка;// + ЭтотОбъект.КорректировкаБезналДоставка;
				//Проводка.Организация		= ЭтотОбъект.Организация;
				//Проводка.СтруктурнаяЕдиница	= ЭтотОбъект.ТорговаяТочка;
				Проводка.Содержание			= "Выручка ТТ";
				
				Проводка.СчетДт 			= ПланыСчетов.Финансовый.Касса;
				Проводка.СубконтоДт.СтруктурныеЕдиницы 				= ЭтотОбъект.ТорговаяТочка;
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
				Если Проводка.Период >= '20150101' Тогда
					Проводка.СубконтоДт.Организации 					= Организация;
				Иначе
					Проводка.СубконтоДт.Организации 					= Справочники.Организации.ПустаяСсылка();	
				КонецЕсли;
				
				Проводка.СчетКт				= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
				Проводка.СубконтоКт.ТорговыеТочки					= ЭтотОбъект.ТорговаяТочка;
				Проводка.СубконтоКт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
				Проводка.СубконтоКт.ЦФО								= ЦФО_ТТ;
				
			КонецЕсли;
			
		Иначе
			
		    Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка"	, ЭтотОбъект.Ссылка);
			Запрос.УстановитьПараметр("Дата"	, ЭтотОбъект.Дата);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиУправленияДоставки.СотрудникУправленияДоставки,
			|	СотрудникиУправленияДоставки.Терминал КАК Терминал
			|ПОМЕСТИТЬ ВТСотрудникиУправленияДоставки
			|ИЗ
			|	РегистрСведений.СотрудникиУправленияДоставки.СрезПоследних(&Дата, ) КАК СотрудникиУправленияДоставки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Терминал
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЛистУчетаДоставка.Ссылка,
			|	ВЫБОР
			|		КОГДА НЕ ЛистУчетаДоставка.Терминал.Справочно
			|			ТОГДА ЛистУчетаДоставка.Терминал
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Терминалы.ПустаяСсылка)
			|	КОНЕЦ КАК Терминал,
			|	ЕСТЬNULL(ВТСотрудникиУправленияДоставки.СотрудникУправленияДоставки, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Сотрудник,
			|	ЛистУчетаДоставка.СуммаНал,
			|	ЛистУчетаДоставка.СуммаБН,
			|	ЛистУчетаДоставка.СуммаБНИсходная,
			|	ЛистУчетаДоставка.СуммаНалИсходная
			|ПОМЕСТИТЬ ВТДоставка
			|ИЗ
			|	Документ.ЛистУчета.Доставка КАК ЛистУчетаДоставка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиУправленияДоставки КАК ВТСотрудникиУправленияДоставки
			|		ПО (ВТСотрудникиУправленияДоставки.Терминал = ЛистУчетаДоставка.Терминал)
			|ГДЕ
			|	ЛистУчетаДоставка.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДоставка.Терминал,
			|	СУММА(ВТДоставка.СуммаБН) - СУММА(ВТДоставка.СуммаБНИсходная) КАК СуммаКорректировки,
			|	СУММА(ВТДоставка.СуммаБНИсходная) КАК СуммаБНИсходная
			|ИЗ
			|	ВТДоставка КАК ВТДоставка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДоставка.Терминал
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДоставка.Сотрудник,
			|	СУММА(ВТДоставка.СуммаНал) - СУММА(ВТДоставка.СуммаНалИсходная) КАК СуммаКорректировки,
			|	СУММА(ВТДоставка.СуммаНалИсходная) КАК СуммаНалИсходная
			|ИЗ
			|	ВТДоставка КАК ВТДоставка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДоставка.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиУправленияДоставки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТДоставка";
			//|
			//|ИМЕЮЩИЕ
			//|	СУММА(ВТДоставка.СуммаНал) - СУММА(ВТДоставка.СуммаНалИсходная) + СУММА(ВТДоставка.СуммаБН) - СУММА(ВТДоставка.СуммаБНИсходная) = 0
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			
			Счет572 = ПланыСчетов.Финансовый.ДенежныеСредстваВПутиЭквайринг;
			Счет904 = ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
			Счет71 	= ПланыСчетов.Финансовый.РасчетыСПодотчетнымиЛицами;
			Счет50 	= ПланыСчетов.Финансовый.Касса;
			ВыборкаПоТерминалам = РезультатыЗапроса[2].Выбрать();
			Пока ВыборкаПоТерминалам.Следующий() Цикл
				
				Если НЕ ВыборкаПоТерминалам.СуммаБНИсходная = 0 Тогда
					
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период	= ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаЗакрытияСмены), ЭтотОбъект.ДатаЗакрытияСмены, ЭтотОбъект.Дата);
					Проводка.Сумма									= ВыборкаПоТерминалам.СуммаБНИсходная;
					//Проводка.Организация							= ЭтотОбъект.Организация;
					//Проводка.СтруктурнаяЕдиница						= СЕ_Доставка;
					Проводка.Содержание								= "Списание денежных средств с кредитной карты";
					
					Проводка.СчетДт = Счет572;
					Проводка.СубконтоДт.Организации 				= ЭтотОбъект.Организация;
					Проводка.СубконтоДт.ИсточникиДенежныхСредств 	= СЕ_Доставка;
					Проводка.СубконтоДт.Терминалы					= ВыборкаПоТерминалам.Терминал;
					
					Проводка.СчетКт	= Счет904;
					Проводка.СубконтоКт.ТорговыеТочки				= ЭтотОбъект.ТорговаяТочка;
					Проводка.СубконтоКт.СтатьиДоходовРасходов		= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
					Проводка.СубконтоКт.ЦФО							= ЦФО_ТТ;
					
				КонецЕсли;
				
				Если НЕ ВыборкаПоТерминалам.СуммаКорректировки = 0 Тогда
					
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период	= ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаЗакрытияСмены), ЭтотОбъект.ДатаЗакрытияСмены, ЭтотОбъект.Дата);
					Проводка.Сумма									= ВыборкаПоТерминалам.СуммаКорректировки;
					//Проводка.Организация							= ЭтотОбъект.Организация;
					//Проводка.СтруктурнаяЕдиница						= СЕ_Доставка;
					Проводка.Содержание								= "Корректировка списания денежных средств с кредитной карты";
					
					Проводка.СчетДт = Счет572;
					Проводка.СубконтоДт.Организации 				= ЭтотОбъект.Организация;
					Проводка.СубконтоДт.ИсточникиДенежныхСредств 	= СЕ_Доставка;
					Проводка.СубконтоДт.Терминалы					= ВыборкаПоТерминалам.Терминал;
					
					Проводка.СчетКт	= Счет904;
					Проводка.СубконтоКт.ТорговыеТочки				= ЭтотОбъект.ТорговаяТочка;
					Проводка.СубконтоКт.СтатьиДоходовРасходов		= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
					Проводка.СубконтоКт.ЦФО							= ЦФО_ТТ;
					
				КонецЕсли;
					
			КонецЦикла;
			
			ВыборкаПоСотрудникам = РезультатыЗапроса[3].Выбрать();
			Пока ВыборкаПоСотрудникам.Следующий() Цикл
				
				Если НЕ ВыборкаПоСотрудникам.СуммаНалИсходная = 0 Тогда
					
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период	= ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаЗакрытияСмены), ЭтотОбъект.ДатаЗакрытияСмены, ЭтотОбъект.Дата);
					Проводка.Сумма								= ВыборкаПоСотрудникам.СуммаНалИсходная;
					//Проводка.Организация						= ЭтотОбъект.Организация;
					//Проводка.СтруктурнаяЕдиница					= СЕ_Доставка;
					Проводка.Содержание							= "Передача в подотчет сотруднику упр. доставки";
					
					Проводка.СчетДт = Счет71;
					Проводка.СубконтоДт.Организации				= ЭтотОбъект.Организация;
					Проводка.СубконтоДт.ФизическиеЛица			= ВыборкаПоСотрудникам.Сотрудник;
					
					Проводка.СчетКт = Счет50;
					Проводка.СубконтоКт.СтруктурныеЕдиницы 				= ЭтотОбъект.ТорговаяТочка;
					Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 	= СДСРозничнаяВыручка;
					Если Проводка.Период >= '20150101' Тогда
						Проводка.СубконтоКт.Организации 	= Организация;
					Иначе
						Проводка.СубконтоКт.Организации 					= Справочники.Организации.ПустаяСсылка();	
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ВыборкаПоСотрудникам.СуммаКорректировки = 0 Тогда
					
					Проводка = Движения.Финансовый.Добавить();
					Проводка.Период	= ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаЗакрытияСмены), ЭтотОбъект.ДатаЗакрытияСмены, ЭтотОбъект.Дата);
					Проводка.Сумма								= ВыборкаПоСотрудникам.СуммаКорректировки;
					//Проводка.Организация						= ЭтотОбъект.Организация;
					//Проводка.СтруктурнаяЕдиница					= СЕ_Доставка;
					Проводка.Содержание							= "Корректировка передачи в подотчет сотруднику упр. доставки";
					
					Проводка.СчетДт = Счет71;
					Проводка.СубконтоДт.Организации				= ЭтотОбъект.Организация;
					Проводка.СубконтоДт.ФизическиеЛица			= ВыборкаПоСотрудникам.Сотрудник;
					
					Проводка.СчетКт	= Счет904;
					Проводка.СубконтоКт.ТорговыеТочки			= ЭтотОбъект.ТорговаяТочка;
					Проводка.СубконтоКт.СтатьиДоходовРасходов	= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
					Проводка.СубконтоКт.ЦФО						= ЦФО_ТТ;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	
	////проведение начисленных бонусов
	//Если Дата >= '20140301'
	//	И НачисленныйБонусПокупателям > 0 Тогда
	//	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.БонусыПокупателямЕжедневные, Дата);
	//	Проводка = Движения.Финансовый.Добавить();
	//		Проводка.Период	= ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаЗакрытияСмены), ЭтотОбъект.ДатаЗакрытияСмены, ЭтотОбъект.Дата);
	//		Проводка.Сумма				= НачисленныйБонусПокупателям;
	//		Проводка.Организация		= Организация;
	//		Проводка.СтруктурнаяЕдиница	= ТорговаяТочка;
	//		Проводка.Содержание			= "Бонус по карте";
	//		
	//		Проводка.СчетДт 							= СтруктураНастроек.Счет;
	//		Проводка.СубконтоДт.ТорговыеТочки  			= ТорговаяТочка;
	//		Проводка.СубконтоДт.СтатьиДоходовРасходов	= СтруктураНастроек.СтатьяДоходовРасходов;
	//		Проводка.СубконтоДт.ЦФО						= ?(ЗначениеЗаполнено(ЦФО_ТТ), ЦФО_ТТ, СтруктураНастроек.ЦФО);
	//		
	//		Проводка.СчетКт				= ПланыСчетов.Финансовый.ПрочаяЗадолженность;
	//		Проводка.СубконтоКт.Организации						= СтруктураНастроек.ДопРеквизит;
	//		Проводка.СубконтоКт.Контрагенты						= СтруктураНастроек.ДопРеквизит1;
	//КонецЕсли;	
	
	
	
	//Инкассация
	Если ЭтоИзбенка Тогда
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период 										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
		Проводка.Сумма											= СуммаИнкассации;
		//Проводка.Организация									= Организация;
		//Проводка.СтруктурнаяЕдиница								= ТорговаяТочка;
		Проводка.Содержание										= "Инкассация";
		
		Проводка.СчетКт 										= ПланыСчетов.Финансовый.Касса;
		Проводка.СубконтоКт.СтруктурныеЕдиницы 					= ТорговаяТочка;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 		= СДСИнкассация;
		Если Проводка.Период >= '20150101' Тогда
			Проводка.СубконтоКт.Организации					 		= Организация;
		Иначе
			Проводка.СубконтоКт.Организации 					= Справочники.Организации.ПустаяСсылка();	
		КонецЕсли;
		
		Проводка.СчетДт											= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
		Проводка.СубконтоДт.Организации							= Организация;
		Проводка.СубконтоДт.ИсточникиДенежныхСредств			= ТорговаяТочка;
	КонецЕсли;	
	
	Если ОплатаБаллами <> 0 Тогда
		
		Проводка = Движения.Финансовый.Добавить();
		Проводка.Период	= Дата;
		Проводка.Сумма = ОплатаБаллами;
		//Проводка.Организация									= Организация;
		///Проводка.СтруктурнаяЕдиница								= ТорговаяТочка;
		Проводка.Содержание										= "Оплата баллами";
		
		Если Дата < '20170101' Тогда
			Проводка.СчетДт											= ПланыСчетов.Финансовый.ПрочаяЗадолженность;
			Проводка.СубконтоДт.Организации							= Справочники.Организации.Избенка;
			Проводка.СубконтоДт.Контрагенты							= Справочники.Контрагенты.НайтиПоКоду("000000970"); //Бонус
			Проводка.СчетКт 										= ПланыСчетов.Финансовый.Касса;
			Проводка.СубконтоКт.СтруктурныеЕдиницы 					= ТорговаяТочка;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств 		= СДСОплатаБаллами;
			Если Проводка.Период >= '20150101' Тогда
				Проводка.СубконтоКт.Организации 						= Организация;
			Иначе
				Проводка.СубконтоКт.Организации 					= Справочники.Организации.ПустаяСсылка();	
			КонецЕсли;	
		//++++ АК AZAP 09.02.2017 ИП-00014893
		//mind переделано 2017-04-10
	Иначе
			Проводка.Организация = Организация;
			Проводка.СчетДт											= ПланыСчетов.Финансовый.ПрочаяЗадолженность;
			Проводка.СубконтоДт.Организации							= Организация;;
			Проводка.СубконтоДт.Контрагенты							= Справочники.Контрагенты.НайтиПоКоду("000000970"); //Бонус
			Проводка.СчетКт 										= ПланыСчетов.Финансовый.БонусыИСертификаты;
			Проводка.СубконтоКт.ТорговыеТочки	 					= ТорговаяТочка;
			Проводка.СубконтоКт.СтатьиДоходовРасходов		 		= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("20901");
			Проводка.СубконтоКт.ЦФО			 						= ЦФО;
		КонецЕсли;
		//---- АК AZAP
		
	КонецЕсли;
	
	ТоварыПеремещениеМеждуТТ = Новый ТаблицаЗначений();
	ТоварыПеремещениеМеждуТТ.Колонки.Добавить("ТорговаяТочка");
	ТоварыПеремещениеМеждуТТ.Колонки.Добавить("Номенклатура");
	ТоварыПеремещениеМеждуТТ.Колонки.Добавить("КоличествоПередано");
	ТоварыПеремещениеМеждуТТ.Колонки.Добавить("КоличествоПолучено");
	
	Если СчитыватьТаблицуТоваровСЧековДляПроведения
			И ЗначениеЗаполнено(ТорговаяТочка) Тогда
		НеВключатьРазницуВПродажу = (Дата >= '20140818');
		Если НЕ ДополнительныеСвойства.Свойство("ТаблицаТоваровКПроведению") Тогда
			ТабТовары = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(Дата, Дата, ТорговаяТочка);
			ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ТабТовары);
		КонецЕсли;	
		//+++АК SaMi 2018.04.28 ИП-00018340.01 
		ДобавитьПроизводствоВТаблицуТоваров(ДополнительныеСвойства.ТаблицаТоваровКПроведению);
		//---АК SaMi  2018.04.28 
		Если Дата < '20140401' Тогда
			Для Каждого СтрокаТаб Из ДополнительныеСвойства.ТаблицаТоваровКПроведению Цикл
				СтрокаТаб.Поступило = СтрокаТаб.Поступило + СтрокаТаб.ПолученоСДругихТТ - СтрокаТаб.ОтправленоНаДругиеТТ;
				СтрокаТаб.ПолученоСДругихТТ = 0;
				СтрокаТаб.ОтправленоНаДругиеТТ = 0;
			КонецЦикла;
		Иначе
			Если НЕ ДополнительныеСвойства.Свойство("ТоварыПеремещениеМеждуТТ") Тогда
				ТаблицаПеремещений = ВнешниеДанные.ПолучитьТаблицуПеремещенийМеждуТТПолная(Дата, Дата, ТорговаяТочка);
				Для Каждого СтрокаПеремещение Из ТаблицаПеремещений Цикл
					СтрокаДоб = ТоварыПеремещениеМеждуТТ.Добавить();
					СтрокаДоб.ТорговаяТочка = СтрокаПеремещение.ТТКорреспондент;
					СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
					СтрокаДоб.КоличествоПолучено = СтрокаПеремещение.ПолученоСДругихТТ;
					СтрокаДоб.КоличествоПередано = СтрокаПеремещение.ОтправленоНаДругиеТТ;
				КонецЦикла;
			Иначе
				ТоварыПеремещениеМеждуТТ = ДополнительныеСвойства.ТоварыПеремещениеМеждуТТ;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//Минеев - проводки по НДС листов учета переехали в закрытие месяца и считываются из базы бухгалтерии
	////ПРОВОДКИ ПО НДС
	//СтруктураНастроекНДС = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыЛистУчета, ЭтотОбъект.Дата);
	//Если ЗначениеЗаполнено(СтруктураНастроекНДС.Счет)
	//	И ДополнительныеСвойства.Свойство("ТаблицаТоваровКПроведению") Тогда
	//	//Минеев 2017-04-17 новый механизм выполнения проводок по НДС, надо НДС расчитывать также как при выгрузке в бухгалтерию, а там идет разделение по кассам и как здесь
	//	//сделать не получится
	//	//Запрос = Новый Запрос();
	//	//Запрос.УстановитьПараметр("Таб", ДополнительныеСвойства.ТаблицаТоваровКПроведению);
	//	//Запрос.Текст = "ВЫБРАТЬ
	//	//			   |	Таб.Номенклатура,
	//	//			   |	Таб.Сумма
	//	//			   |ПОМЕСТИТЬ ВТ_Товары
	//	//			   |ИЗ
	//	//			   |	&Таб КАК Таб
	//	//			   |;
	//	//			   |
	//	//			   |////////////////////////////////////////////////////////////////////////////////
	//	//			   |ВЫБРАТЬ
	//	//			   |	СУММА(ВТ_Товары.Сумма) КАК Сумма,
	//	//			   |	НоменклатураСпр.СтавкаНДС КАК СтавкаНДС
	//	//			   |ИЗ
	//	//			   |	ВТ_Товары КАК ВТ_Товары
	//	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	//	//			   |		ПО ВТ_Товары.Номенклатура = НоменклатураСпр.Ссылка
	//	//			   |
	//	//			   |СГРУППИРОВАТЬ ПО
	//	//			   |	НоменклатураСпр.СтавкаНДС
	//	//			   |;
	//	//			   |
	//	//			   |////////////////////////////////////////////////////////////////////////////////
	//	//			   |УНИЧТОЖИТЬ ВТ_Товары";
	//	//			   
	//	//Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	//Пока Выборка.Следующий() Цикл
	//	//	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Выборка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
	//	//	Если СуммаНДС <> 0 Тогда
	//	//		Проводка = Движения.Финансовый.Добавить();
	//	//		Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
	//	//		
	//	//		Проводка.Сумма = СуммаНДС;
	//	//		
	//	//		Проводка.Содержание									= "НДС выручка ТТ";
	//	//		
	//	//		Проводка.СчетДт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
	//	//		Проводка.СубконтоДт.ТорговыеТочки					= ТорговаяТочка;
	//	//		Проводка.СубконтоДт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
	//	//		Проводка.СубконтоДт.ЦФО								= ЦФО_ТТ;
	//	//		
	//	//		Проводка.СчетКт 							= СтруктураНастроекНДС.Счет;
	//	//		Проводка.СубконтоКт.Организации  			= Организация;
	//	//		Проводка.СубконтоКт.ВидыНалогов			= СтруктураНастроекНДС.ДопРеквизит;
	//	//		Проводка.СубконтоКт.СтавкиНДС			 	= Выборка.СтавкаНДС;
	//	//		
	//	//	КонецЕсли;	
	//	//КонецЦикла;
	//	
	//	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	//	ADOСоединение.ConnectionTimeOut = 0;
	//	ADOСоединение.CommandTimeOut    = 0;
	//	ADOСоединение.ConnectionString  = "DRIVER={SQL Server Native Client 10.0};SERVER=SRV-SQL01;UID=izbenka;PWD=cjyzcjyz;DATABASE=SMS_UNION;LANGUAGE=русский";
	//	ADOСоединение.Open();
	//	
	//	СтрЗапрос = "SELECT SUM(QntT.SummaPoNDS10) SummaPoNDS10,
	//				|	SUM(QntT.SummaPoNDS18) SummaPoNDS18
	//				|FROM (SELECT dbo_Checks.ShopNo as TT, dbo_CheckLine.date_ch as CloseDate, 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1))) as NameKKM,
	//				|				   				SUM(CASE WHEN dbo_Checks.BaseSum < 0 THEN dbo_CheckLine.Quantity * (-1) ELSE dbo_CheckLine.Quantity END) as Qnt, 
	//				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 10 THEN dbo_CheckLine.BaseSum ELSE 0 END) as SummaPoNDS10, 
	//				|				   				SUM(CASE WHEN ArticleBin2UID.Stavka = 18 THEN dbo_CheckLine.BaseSum ELSE 0 END) as SummaPoNDS18 
	//				|				   			FROM SMS_Union.dbo.CheckLine as dbo_CheckLine (nolock) 
	//				|				   			INNER JOIN SMS_Union.dbo.Checks as dbo_Checks (nolock) ON dbo_CheckLine.CheckUID = dbo_Checks.CheckUID
	//				|							LEFT OUTER JOIN IzbenkaFin.dbo.ArticleBin2UID as ArticleBin2UID (nolock) ON dbo_CheckLine.id_tov_cl = ArticleBin2UID.id_tov
	//				|				   			WHERE dbo_CheckLine.date_ch = " + ВнешниеДанные.ФорматПоля(Дата, Истина) + " and dbo_Checks.ShopNo = " + ВнешниеДанные.ФорматПоля(ТорговаяТочка.НомерТочки) + " and CONVERT(date, dbo_Checks.CloseDate) = " + ВнешниеДанные.ФорматПоля(Дата, Истина) + "
	//				|				   			GROUP BY dbo_Checks.ShopNo, dbo_CheckLine.date_ch, 'ККМ ' + CONVERT(nvarchar, CAST(convert(decimal(15,2),dbo_Checks.CashID) / 10 as numeric(10, 1)))) as QntT
	//				|";
	//	
	//	rs = ADOСоединение.Execute(СтрЗапрос);
	//
	//	Попытка //если набор пустой, то выдает ошибку
	//		rs.MoveFirst();
	//		
	//		СуммаДляРасчетаНДС = СуммаДокумента - ОплатаБаллами;
	//		СуммаПоНДС10Расч = 0;
	//		СуммаПоНДС18Расч = 0;
	//		
	//		Если НЕ rs.EOF() Тогда
	//			СуммаПоНДС10Расч = Rs.Fields("SummaPoNDS10").Value;
	//			СуммаПоНДС18Расч = Rs.Fields("SummaPoNDS18").Value;
	//		КонецЕсли;
	//		КоэффициентВыручкиПоНДС10 = ?(СуммаПоНДС10Расч + СуммаПоНДС18Расч = 0, 1, СуммаПоНДС10Расч / (СуммаПоНДС10Расч + СуммаПоНДС18Расч));
	//		СумНДС10 = 0;
	//		СумНДС18 = 0;
	//		ЧастьСуммыПоНДС10 = Окр(СуммаДляРасчетаНДС * КоэффициентВыручкиПоНДС10, 2, РежимОкругления.Окр15как20);
	//		ЧастьСуммыПоНДС18 = СуммаДляРасчетаНДС - ЧастьСуммыПоНДС10;
	//		СумНДС10 = УчетНДС.РассчитатьСуммуНДС(ЧастьСуммыПоНДС10, Истина, Истина, 10);
	//		СумНДС18 = УчетНДС.РассчитатьСуммуНДС(ЧастьСуммыПоНДС18, Истина, Истина, 18);
	//		
	//		//учтем возвраты
	//		Для Каждого СтрокаВозврат Из ВозвратыИзСейфа Цикл
	//			Если ЗначениеЗаполнено(СтрокаВозврат.СуммаПоНДС10) Тогда
	//				СумНДС10 = СумНДС10 - УчетНДС.РассчитатьСуммуНДС(СтрокаВозврат.СуммаПоНДС10, Истина, Истина, 10);
	//			КонецЕсли;
	//			
	//			Если ЗначениеЗаполнено(СтрокаВозврат.СуммаПоНДС18) Тогда
	//				СумНДС18 = СумНДС18 - УчетНДС.РассчитатьСуммуНДС(СтрокаВозврат.СуммаПоНДС18, Истина, Истина, 10);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Если СумНДС10 <> 0 Тогда
	//			Проводка = Движения.Финансовый.Добавить();
	//			Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
	//			
	//			Проводка.Сумма = СумНДС10;
	//			
	//			Проводка.Содержание									= "НДС выручка ТТ";
	//			
	//			Проводка.СчетДт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
	//			Проводка.СубконтоДт.ТорговыеТочки					= ТорговаяТочка;
	//			Проводка.СубконтоДт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
	//			Проводка.СубконтоДт.ЦФО								= ЦФО_ТТ;
	//			
	//			Проводка.СчетКт 							= СтруктураНастроекНДС.Счет;
	//			Проводка.СубконтоКт.Организации  			= Организация;
	//			Проводка.СубконтоКт.ВидыНалогов			= СтруктураНастроекНДС.ДопРеквизит;
	//			Проводка.СубконтоКт.СтавкиНДС			 	= Перечисления.СтавкиНДС.НДС10;
	//			
	//		КонецЕсли;
	//		
	//		Если СумНДС18 <> 0 Тогда
	//			Проводка = Движения.Финансовый.Добавить();
	//			Проводка.Период										= ?(ЗначениеЗаполнено(ДатаЗакрытияСмены), ДатаЗакрытияСмены, Дата);
	//			
	//			Проводка.Сумма = СумНДС18;
	//			
	//			Проводка.Содержание									= "НДС выручка ТТ";
	//			
	//			Проводка.СчетДт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
	//			Проводка.СубконтоДт.ТорговыеТочки					= ТорговаяТочка;
	//			Проводка.СубконтоДт.СтатьиДоходовРасходов			= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
	//			Проводка.СубконтоДт.ЦФО								= ЦФО_ТТ;
	//			
	//			Проводка.СчетКт 							= СтруктураНастроекНДС.Счет;
	//			Проводка.СубконтоКт.Организации  			= Организация;
	//			Проводка.СубконтоКт.ВидыНалогов			= СтруктураНастроекНДС.ДопРеквизит;
	//			Проводка.СубконтоКт.СтавкиНДС			 	= Перечисления.СтавкиНДС.НДС18;
	//			
	//		КонецЕсли;
	//	Исключение
	//	КонецПопытки;
	//	
	//	ADOСоединение = Неопределено;
	//КонецЕсли;	
	//
	//
	//
	ТаблицаТоваровКПроведению = Новый ТаблицаЗначений();
	ТаблицаТоваровКПроведению.Колонки.Добавить("Номенклатура");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Поступило");
	ТаблицаТоваровКПроведению.Колонки.Добавить("ПоступилоБезВозврата");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Продано");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Дегустация");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Списание");
	ТаблицаТоваровКПроведению.Колонки.Добавить("СписаниеПоКачеству");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Бой");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Акция");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Разница");
	ТаблицаТоваровКПроведению.Колонки.Добавить("Комплектация");
	ТаблицаТоваровКПроведению.Колонки.Добавить("ВозвратПокупателя");
	ТаблицаТоваровКПроведению.Колонки.Добавить("ПолученоСДругихТТ");
	ТаблицаТоваровКПроведению.Колонки.Добавить("ОтправленоНаДругиеТТ");
	//+++АК SaMi 2018.04.25 ИП-00018340.01 
	ТаблицаТоваровКПроведению.Колонки.Добавить("Производство", Новый ОписаниеТипов("Число"));
	//---АК SaMi  2018.04.25 
	
	//
	ДатаВключенияДинамическогоСчитывания = Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить();
	
	//
	Если ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
		И ДатаВключенияДинамическогоСчитывания <= Дата Тогда
		
		//
		Если ДополнительныеСвойства.Свойство("ТаблицаТоваровКПроведению") Тогда
			Для Каждого СтрокаТовар Из ДополнительныеСвойства.ТаблицаТоваровКПроведению Цикл
				СтрокаДоб		 				= ТаблицаТоваровКПроведению.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоб, СтрокаТовар);
			КонецЦикла;	
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТовар Из Товары Цикл
			СтрокаДоб 					= ТаблицаТоваровКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб, СтрокаТовар);
		КонецЦикла;
	КонецЕсли;
	
	//выкинем служебные товары из проведения
	ЗапросБезОстатков = Новый Запрос();
	ЗапросБезОстатков.Текст = "ВЫБРАТЬ
	                          |	Номенклатура.БезОстатков,
	                          |	Номенклатура.СлужебныйТовар,
	                          |	Номенклатура.Ссылка
	                          |ИЗ
	                          |	Справочник.Номенклатура КАК Номенклатура
	                          |ГДЕ
	                          |	(Номенклатура.СлужебныйТовар = ИСТИНА
	                          |			ИЛИ Номенклатура.БезОстатков = ИСТИНА)
	                          |	И Номенклатура.Ссылка В(&МассивСсылок)";
							  
	ЗапросБезОстатков.УстановитьПараметр("МассивСсылок", ТаблицаТоваровКПроведению.ВыгрузитьКолонку("Номенклатура"));
							
	ТабБезОстатков = ЗапросБезОстатков.Выполнить().Выгрузить();
	
	КолвоСтрок = ТаблицаТоваровКПроведению.Количество();
	Для н = 1 По КолвоСтрок Цикл
		СтрокиСлужебные = ТабБезОстатков.НайтиСтроки(Новый Структура("Ссылка, СлужебныйТовар", ТаблицаТоваровКПроведению[КолвоСтрок - н].Номенклатура, Истина));
		Если СтрокиСлужебные.Количество() > 0 Тогда
			ТаблицаТоваровКПроведению.Удалить(КолвоСтрок - н);
		КонецЕсли;	
	КонецЦикла;
	
	//Если ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин Тогда
		Если ДополнительныеСвойства.Свойство("ТоварыИзменение") Тогда
			//удалим все корректировки по товарам без остатков и сделаем свои нужные корректировки
			//КолвоСтрок = ДополнительныеСвойства.ТоварыИзменение.Количество();
			//Для н = 1 По КолвоСтрок Цикл
			//	СтрокиБезОстатков = ТабБезОстатков.НайтиСтроки(Новый Структура("Ссылка, БезОстатков", ДополнительныеСвойства.ТоварыИзменение[КолвоСтрок - н].Номенклатура, Истина));
			//	Если СтрокиБезОстатков.Количество() > 0 Тогда
			//		ДополнительныеСвойства.ТоварыИзменение.Удалить(КолвоСтрок - н);
			//	КонецЕсли;	
			//КонецЦикла;
		Иначе
			ТоварыИзменение = Новый ТаблицаЗначений();
			ТоварыИзменение.Колонки.Добавить("Дата"						, Новый ОписаниеТипов("Дата"));
			ТоварыИзменение.Колонки.Добавить("Номенклатура"				, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТоварыИзменение.Колонки.Добавить("КодОперации"				, Новый ОписаниеТипов("Число"));
			ТоварыИзменение.Колонки.Добавить("Количество"				, Новый ОписаниеТипов("Число"));
			ТоварыИзменение.Колонки.Добавить("Сумма"					, Новый ОписаниеТипов("Число"));
			ТоварыИзменение.Колонки.Добавить("АвтоматическоеДвижение"	, Новый ОписаниеТипов("Булево"));
			ТоварыИзменение.Колонки.Добавить("ЭтоКорректировкаПоеЛУ"	, Новый ОписаниеТипов("Булево"));
			
			ДополнительныеСвойства.Вставить("ТоварыИзменение", ТоварыИзменение);
		КонецЕсли;	
		
		Если ЭтоИзбенка Тогда
			Для Каждого СтрокаТаб Из ТаблицаТоваровКПроведению Цикл
				СтрокиБезОстатков = ТабБезОстатков.НайтиСтроки(Новый Структура("Ссылка, БезОстатков", СтрокаТаб.Номенклатура, Истина));
				Если СтрокиБезОстатков.Количество() > 0 Тогда
					ПоступилоКоличество = СтрокаТаб.Поступило + СтрокаТаб.Разница + СтрокаТаб.ПолученоСДругихТТ - СтрокаТаб.ОтправленоНаДругиеТТ;
					РасходКоличество = СтрокаТаб.Дегустация + СтрокаТаб.Акция + СтрокаТаб.Списание + СтрокаТаб.СписаниеПоКачеству + СтрокаТаб.Бой + СтрокаТаб.Продано;
					СуммаДвижений = ПоступилоКоличество - РасходКоличество;
					Если СуммаДвижений <> 0 Тогда
						СтрокаТаб.Продано = СтрокаТаб.Продано + СуммаДвижений;
						СтрокаИзменение = ДополнительныеСвойства.ТоварыИзменение.Добавить();
						СтрокаИзменение.Дата 			= НачалоДня(Дата);
						СтрокаИзменение.Номенклатура 	= СтрокаТаб.Номенклатура;
						СтрокаИзменение.КодОперации 	= 510;
						СтрокаИзменение.Количество 		= СуммаДвижений;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЭтоИзбенка Тогда
			ЗаписатьКорректировкиЛистаУчета(Отказ);
		Иначе
			ЗаписатьКорректировкиЛистаУчетаПоВкусвилл(Отказ);
		КонецЕсли;	
	//КонецЕсли;	
	
	//ПроведениеТоваровПоРегистрам(ТаблицаТоваровКПроведению);
	ПроведениеПоРегиструТоваров(ТаблицаТоваровКПроведению, ТоварыПеремещениеМеждуТТ);
	
	//+++АК SaMi 2018.04.25 ИП-00018340.01 
	ПроведениеПоРегиструТоваровПроизводство();
	//---АК SaMi  2018.04.25 
	
	
	ТабСуммЗОтчетов = ZОтчеты.Выгрузить();
	ТабСуммЗОтчетов.Свернуть("Касса", "Сумма, СуммаПоНал, СуммаПоБезнал");
	
	Для Каждого СтрокаСумма Из ТабСуммЗОтчетов Цикл
		
		Если СтрокаСумма.Сумма <> 0 Тогда
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= Дата;
			//Проводка.Организация								= Организация;
			//Проводка.СтруктурнаяЕдиница							= ТорговаяТочка;
			Проводка.Содержание									= "Z-отчет";
			Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт										= ПланыСчетов.Финансовый.НераспределеннаяРозничнаяВыручка;
			Проводка.СубконтоДт.ОсновныеСредства				= СтрокаСумма.Касса;
			//Если Проводка.Период >= '20150101' Тогда
				Проводка.СубконтоДт.Организации						= Организация;
			//Иначе
			//	Проводка.СубконтоДт.Организации 					= Справочники.Организации.ПустаяСсылка();	
			//КонецЕсли;	
			Проводка.СубконтоДт.СтруктурныеЕдиницы				= ТорговаяТочка;
			Если СтрокаСумма.СуммаПоНал + СтрокаСумма.СуммаПоБезнал > 0 Тогда
				Проводка.Сумма = СтрокаСумма.СуммаПоНал + СтрокаСумма.СуммаПоБезнал;
			Иначе	
				Проводка.Сумма = СтрокаСумма.Сумма;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
	
	//+++ZEZA
	
	//
	Если ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
			И ДатаВключенияДинамическогоСчитывания <= Дата Тогда
		
		Если НЕ ДополнительныеСвойства.Свойство("ПризнакНеСинхронизироватьОстатки") Тогда
			
			//
			Если ТорговаяТочка.ТипРозничнойТочки <> Перечисления.ТипыРозничныхТочек.Магазин Тогда
				Отказ = Отказ ИЛИ НЕ АК_СкорректироватьНачальныйОстатокВСледующемЛУ();
			Иначе
				Если Дата >= '20140901' Тогда
					Отказ = Отказ ИЛИ НЕ АК_СкорректироватьНачальныйОстатокВСледующемЛУ();
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);	
	
	//---ZEZA
	
	//ЗапросКеш = Новый Запрос;
	//ЗапросКеш.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	//ЗапросКеш.Текст =
	//"ВЫБРАТЬ
	//|	ЛистУчетаСотрудникиАутсорс.Ссылка,
	//|	ЛистУчетаСотрудникиАутсорс.Сотрудник,
	//|	ЛистУчетаСотрудникиАутсорс.КоличествоЧасов,
	//|	ЛистУчетаСотрудникиАутсорс.Сотрудник.ГруппаСотрудников КАК ГруппаСотрудников,
	//|	ЛистУчетаСотрудникиАутсорс.Сотрудник.Должность КАК Должность,
	//|	ЛистУчетаСотрудникиАутсорс.ДатаПервого,
	//|	ЛистУчетаСотрудникиАутсорс.ДатаПоследнего
	//|ИЗ
	//|	Документ.ЛистУчета.СотрудникиАутсорс КАК ЛистУчетаСотрудникиАутсорс
	//|ГДЕ
	//|	ЛистУчетаСотрудникиАутсорс.Ссылка = &Ссылка";
	//
	//РезультатЗапроса = ЗапросКеш.Выполнить();
	//
	//// tuta
	//ЗапросКонтрагенты = Новый Запрос;
	//МассивГруппСотрудников = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ГруппаСотрудников");
	//ЗапросКонтрагенты.УстановитьПараметр("МассивГруппСотрудников", МассивГруппСотрудников);
	//ЗапросКонтрагенты.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КонтрагентыСотрудников.ГруппаСотрудников,
	//|	КонтрагентыСотрудников.Контрагент
	//|ИЗ
	//|	РегистрСведений.КонтрагентыСотрудниковАутсорсинг.СрезПоследних(, ГруппаСотрудников В (&МассивГруппСотрудников)) КАК КонтрагентыСотрудников";
	//ТабКонтрагентовСотрудников = ЗапросКонтрагенты.Выполнить().Выгрузить();
	//СтруктураОтбора = Новый Структура("ГруппаСотрудников");
	//ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	///////
	//НаборЗаписей = РегистрыСведений.ЖурналУчетаСотрудниковАутсорсинг.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ЛистУчета.Установить(ЭтотОбъект.Ссылка);
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтруктураОтбора.ГруппаСотрудников = Выборка.ГруппаСотрудников;
	//	СтрокиТаблицы = ТабКонтрагентовСотрудников.НайтиСтроки(СтруктураОтбора);
	//	ТекКонтрагент = ?(СтрокиТаблицы.Количество() > 0, СтрокиТаблицы[0].Контрагент, ПустойКонтрагент);
	//	
	//	Если ЗначениеЗаполнено(Выборка.ДатаПервого) Тогда
	//		Движение = НаборЗаписей.Добавить();
	//		Движение.ДатаОтметки 	= Выборка.ДатаПервого;
	//		Движение.Сотрудник 		= Выборка.Сотрудник;
	//		Движение.ЛистУчета 		= ЭтотОбъект.Ссылка;
	//		Движение.ТорговаяТочка 	= ЭтотОбъект.ТорговаяТочка;
	//		Движение.Контрагент 	= ТекКонтрагент;
	//		Движение.Должность 		= Выборка.Должность;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Выборка.ДатаПоследнего) Тогда
	//		Движение = НаборЗаписей.Добавить();
	//		Движение.ДатаОтметки 	= Выборка.ДатаПоследнего;
	//		Движение.Сотрудник 		= Выборка.Сотрудник;
	//		Движение.ЛистУчета 		= ЭтотОбъект.Ссылка;
	//		Движение.ТорговаяТочка 	= ЭтотОбъект.ТорговаяТочка;
	//		Движение.Контрагент 	= ТекКонтрагент;
	//		Движение.Должность 		= Выборка.Должность;
	//	КонецЕсли;
	//КонецЦикла;	
	//НаборЗаписей.Записать();
	
	//+++АК POZM 2018.08.28 ИП-00019521 
	МассивТочек = Новый Массив;
	МассивТочек.Добавить(ЭтотОбъект.ТорговаяТочка);
	ТабПродажКурьеров = Документы.ЛистУчета.ПолучитьПродажиЧерезКурьеровЗаПериод(НачалоДня(ЭтотОбъект.Дата),КонецДня(ЭтотОбъект.Дата),,МассивТочек);
	ТабПродажКурьеров.Колонки.Добавить("СуммаНДС");
	ТабПродажКурьеров.Свернуть("Контрагент,СтавкаНДС","Сумма,СуммаНДС");
	Для каждого Стр Из ТабПродажКурьеров Цикл
	
		Стр.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Стр.Сумма      ,Истина,Истина,УчетНДС.ПолучитьСтавкуНДС(Стр.СтавкаНДС));
	
	КонецЦикла; 
	
	Если ТабПродажКурьеров.Итог("Сумма") <> 0 Тогда
		Для каждого ПродажиКурьера Из ТабПродажКурьеров Цикл

			////////////   НДС
			Проводка = Движения.Финансовый.Добавить();
			Проводка.Период 									= Дата;
			
			Проводка.Содержание									= "корректировка продаж на сумму продаж курьеров";
			Проводка.НомерЖурнала								= "ТТ";
			
			Проводка.СчетДт = ПланыСчетов.Финансовый.НалогиУН;
			Проводка.Организация				= ЭтотОбъект.Организация;
			Проводка.СубконтоДт.Организации	= ЭтотОбъект.Организация;
			Проводка.СубконтоДт.ВидыНалогов				= Справочники.ВидыНалогов.НайтиПоКоду("000000001");
			Проводка.СубконтоДт.СтавкиНДС		= ПродажиКурьера.СтавкаНДС;
			
			Проводка.СчетКт										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
			
			Проводка.СубконтоКт.ТорговыеТочки				= ЭтотОбъект.ТорговаяТочка;
			Проводка.СубконтоКт.СтатьиДоходовРасходов		= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
			Проводка.СубконтоКт.ЦФО							= ЦФО_ТТ;
									
			Проводка.Сумма = ПродажиКурьера.СуммаНДС;

		
		КонецЦикла; 
			
	КонецЕсли;
	//---АК POZM
	
	//+++АК ILIK 2018.09.19 ИП-00019521.04
	ВыполнитьДвиженияПоРасчетамСКонтрагентами();
	//---АК ILIK
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//mind нужно проверить соотвествие часов датам прихода и ухода
	//система включается с 01.10.2017
	Если Дата >= '20171001' Тогда
		Для Каждого СтрокаТаб Из Продавцы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаПрихода) Тогда
				СтрокаТаб.ДатаПрихода= НачалоДня(Дата) + 8*3600;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаУхода) Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТаб.КоличествоЧасов)
				И Цел((СтрокаТаб.ДатаУхода - СтрокаТаб.ДатаПрихода) / 3600) <> СтрокаТаб.КоличествоЧасов Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода + 3600 * СтрокаТаб.КоличествоЧасов;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаТаб Из Промоутеры Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаПрихода) Тогда
				СтрокаТаб.ДатаПрихода= НачалоДня(Дата) + 8*3600;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаУхода) Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТаб.КоличествоЧасов)
				И Цел((СтрокаТаб.ДатаУхода - СтрокаТаб.ДатаПрихода) / 3600) <> СтрокаТаб.КоличествоЧасов Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода + 3600 * СтрокаТаб.КоличествоЧасов;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаТаб Из Кассиры Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаПрихода) Тогда
				СтрокаТаб.ДатаПрихода= НачалоДня(Дата) + 8*3600;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаУхода) Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТаб.КоличествоЧасов)
				И Цел((СтрокаТаб.ДатаУхода - СтрокаТаб.ДатаПрихода) / 3600) <> СтрокаТаб.КоличествоЧасов Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода + 3600 * СтрокаТаб.КоличествоЧасов;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаТаб Из Грузчики Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаПрихода) Тогда
				СтрокаТаб.ДатаПрихода= НачалоДня(Дата) + 8*3600;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.ДатаУхода) Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТаб.КоличествоЧасов)
				И Цел((СтрокаТаб.ДатаУхода - СтрокаТаб.ДатаПрихода) / 3600) <> СтрокаТаб.КоличествоЧасов Тогда
				СтрокаТаб.ДатаУхода = СтрокаТаб.ДатаПрихода + 3600 * СтрокаТаб.КоличествоЧасов;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Свойство("ВыполняетсяЗаписьТолькоПродавцов") Тогда
		Возврат;
	КонецЕсли;
	
	АктНаСписаниеСформирован = Ложь;
	Для Каждого СтрокаТаб Из ТоварыАктаСписания Цикл
		Если СтрокаТаб.Количество > 0 Тогда
			АктНаСписаниеСформирован = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	//для правильной сортировки списка листов по номеру точки
	Дата = Макс(НачалоДня(Дата), НачалоДня(Дата) + 86399 - ТорговаяТочка.НомерТочки);
	
	//проверим нет ли такого листа в этот день
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчета.Ссылка
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчета.Дата, ДЕНЬ) = &Дата
	               |	И ЛистУчета.Ссылка <> &Ссылка
	               |	И ЛистУчета.ПометкаУдаления = ЛОЖЬ
	               |	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка";
				   
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На дату " + Дата + " уже введен лист учета по " + ТорговаяТочка,,,, Отказ);
		Возврат;
	КонецЕсли;	
	
	Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
		Отклонение = -(НачальныйОстаток 
							+ СуммаДокумента 
							+ КорректировкаZ 
							- ОплатаБаллами 
							- СуммаЭквайринг 
							- КорректировкаБезнал 
							- СуммаИнкассации
							- КонечныйОстаток - ВзаимозачетОтклоненийДС.Итог("Сумма"));
		ПозицииКИнвентаризации.Очистить();					
	Иначе
		СуммаВозвратовИзСейфаЛок = 0;
		Для Каждого СтрокаТаб Из ВозвратыИзСейфа Цикл
			СуммаВозвратовИзСейфаЛок = СуммаВозвратовИзСейфаЛок + ?(СтрокаТаб.ПолученаСумма <> 0, СтрокаТаб.ПолученаСумма, СтрокаТаб.Сумма);
		КонецЦикла;
		Если Дата >= '20140901' Тогда
			Отклонение = -(НачальныйОстаток 
								+ СуммаДокумента 
								- ОплатаБаллами 
								- СуммаЭквайринг 
								- КорректировкаБезнал 
								- СуммаИнкассации
								- КонечныйОстаток
								- Доставка.Итог("СуммаНалИсходная")
								- СуммаВозвратовИзСейфаЛок - ВзаимозачетОтклоненийДС.Итог("Сумма"));
			
			//Отклонение = КонечныйОстатокПоАстору - КонечныйОстаток;
		КонецЕсли;
	КонецЕсли;
	
	СуммаДокумента_ПоТоварам = 0;
	Для Каждого СтрокаТаб Из ЭтотОбъект.Товары Цикл
		СуммаДокумента_ПоТоварам = СуммаДокумента_ПоТоварам + СтрокаТаб.Цена * СтрокаТаб.Расход;
	КонецЦикла;
	
	мДатаСреза = ?(НЕ ЭтотОбъект.ЭтоНовый(), ЭтотОбъект.Дата, ТекущаяДата());
	ТекЦФО = ОбщиеПроцедуры.ПолучитьЦФОПоСтруктурнойЕдинице(ЭтотОбъект.ТорговаяТочка, мДатаСреза);
	Если НЕ ЭтотОбъект.ЦФО = ТекЦФО Тогда
		ЭтотОбъект.ЦФО = ТекЦФО;
	КонецЕсли;
	
	КолвоСтрок = ЧекиПоАктамКМ3.Количество();
	Для н = 1 По КолвоСтрок Цикл
		СтрокаАкта = АктыКМ3.Найти(ЧекиПоАктамКМ3[КолвоСтрок - н].КлючСтрокиАкта, "КлючСтроки");
		Если СтрокаАкта = Неопределено Тогда
			ЧекиПоАктамКМ3.Удалить(КолвоСтрок - н);
		КонецЕсли;
	КонецЦикла;	
	
	////проставим основные средства и терминалы в таблицах расшифровки
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаДок", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ТТ", ЭтотОбъект.ТорговаяТочка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал,
	|	ПривязкиОборудованияКРабочимМестамСрезПоследних.Касса КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&ДатаДок, РабочееМесто.СтруктурнаяЕдиница = &ТТ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних";
	ТабТерминалы = Запрос.Выполнить().Выгрузить();
	
	Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
		Для Каждого СтрокаТаб Из ОплатыПоБанковскимКартам Цикл
			Если ЗначениеЗаполнено(СтрокаТаб.Терминал) Тогда
					//И НЕ ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
				СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.Терминал, "Терминал");
				Если СтрокаТерминал <> Неопределено Тогда
					СтрокаТаб.ОсновноеСредство = СтрокаТерминал.ОсновноеСредство;
				КонецЕсли;	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаб.Терминал)
					И ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
				СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.ОсновноеСредство, "Терминал");
				Если СтрокаТерминал <> Неопределено Тогда
					СтрокаТаб.Терминал = СтрокаТерминал.Терминал;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Для Каждого СтрокаТаб Из Выручка Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
			СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.ОсновноеСредство, "Терминал");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаТаб.ККМ = СтрокаТерминал.Терминал;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаб.ККМ)
				И НЕ ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
			СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.ККМ, "Терминал");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаТаб.ОсновноеСредство = СтрокаТерминал.ОсновноеСредство;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из ОплатыБонусами Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.Терминал)
				И НЕ ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
			СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.Терминал, "Терминал");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаТаб.ОсновноеСредство = СтрокаТерминал.ОсновноеСредство;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаб.Терминал)
				И ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
			СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.ОсновноеСредство, "Терминал");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаТаб.Терминал = СтрокаТерминал.Терминал;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаб Из АктыКМ3 Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.ККМ) Тогда
				//И НЕ ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
			СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.ККМ, "Терминал");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаТаб.ОсновноеСредство = СтрокаТерминал.ОсновноеСредство;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаб.ККМ)
				И ЗначениеЗаполнено(СтрокаТаб.ОсновноеСредство) Тогда
			СтрокаТерминал = ТабТерминалы.Найти(СтрокаТаб.ОсновноеСредство, "Терминал");
			Если СтрокаТерминал <> Неопределено Тогда
				СтрокаТаб.ККМ = СтрокаТерминал.Терминал;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	//+++ZEZA ???накручено, но это все пока не перескочим на 50й счет
	//Если ЭтоНовый() Тогда
	ДатаВключенияДинамическогоСчитывания = Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить();
	
	//данный механизм нужно применять только для листов с новой системой учета
	Если ЗначениеЗаполнено(ДатаВключенияДинамическогоСчитывания)
			И ДатаВключенияДинамическогоСчитывания <= Дата Тогда
		Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Избенка Тогда
			АК_СкорректироватьНачальныйОстаток();
		ИначеЕсли ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			Если Дата >= '20140902' Тогда
				АК_СкорректироватьНачальныйОстаток();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	//КонецЕсли;	
	//---ZEZA
	
	Продавцы.Сортировать("Пч, Продавец");
	
	Если СчитыватьТаблицуТоваровСЧековДляПроведения
			И ЗначениеЗаполнено(ТорговаяТочка) Тогда
		НеВключатьРазницуВПродажу = (Дата >= '20140818');	
		Если НЕ ДополнительныеСвойства.Свойство("ТаблицаТоваровКПроведению") Тогда
			ТабТовары = ВнешниеДанные.ПолучитьДвиженияТоваровПолная(Дата, Дата, ТорговаяТочка);
			ДополнительныеСвойства.Вставить("ТаблицаТоваровКПроведению", ТабТовары);
		КонецЕсли;	
		//+++АК SaMi 2018.04.28 ИП-00018340.01 
		ДобавитьПроизводствоВТаблицуТоваров(ДополнительныеСвойства.ТаблицаТоваровКПроведению);
		//---АК SaMi  2018.04.28 

		Если Дата < '20140401' Тогда
			Для Каждого СтрокаТаб Из ДополнительныеСвойства.ТаблицаТоваровКПроведению Цикл
				СтрокаТаб.Поступило = СтрокаТаб.Поступило + СтрокаТаб.ПолученоСДругихТТ - СтрокаТаб.ОтправленоНаДругиеТТ;
				СтрокаТаб.ПолученоСДругихТТ = 0;
				СтрокаТаб.ОтправленоНаДругиеТТ = 0;
			КонецЦикла;
		Иначе
			Если НЕ ДополнительныеСвойства.Свойство("ТоварыПеремещениеМеждуТТ") Тогда
				ТоварыПеремещениеМеждуТТ = Новый ТаблицаЗначений();
				ТоварыПеремещениеМеждуТТ.Колонки.Добавить("ТорговаяТочка");
				ТоварыПеремещениеМеждуТТ.Колонки.Добавить("Номенклатура");
				ТоварыПеремещениеМеждуТТ.Колонки.Добавить("КоличествоПередано");
				ТоварыПеремещениеМеждуТТ.Колонки.Добавить("КоличествоПолучено");
				ТаблицаПеремещений = ВнешниеДанные.ПолучитьТаблицуПеремещенийМеждуТТПолная(Дата, Дата, ТорговаяТочка);
				Для Каждого СтрокаПеремещение Из ТаблицаПеремещений Цикл
					СтрокаДоб = ТоварыПеремещениеМеждуТТ.Добавить();
					СтрокаДоб.ТорговаяТочка = СтрокаПеремещение.ТТКорреспондент;
					СтрокаДоб.Номенклатура = СтрокаПеремещение.Номенклатура;
					СтрокаДоб.КоличествоПолучено = СтрокаПеремещение.ПолученоСДругихТТ;
					СтрокаДоб.КоличествоПередано = СтрокаПеремещение.ОтправленоНаДругиеТТ;
				КонецЦикла;
				ДополнительныеСвойства.Вставить("ТоварыПеремещениеМеждуТТ", ТоварыПеремещениеМеждуТТ);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ТаблицаТоваровКПроведению") Тогда
		//СуммаРасходаПоТоварам = 0;
		//Для Каждого СтрокаДинамически Из ДополнительныеСвойства.ТаблицаТоваровКПроведению Цикл
		//	СуммаРасходаПоТоварам = СуммаРасходаПоТоварам + СтрокаДинамически.Сумма;
		//КонецЦикла;	
		//
		////
		//РазницаПоТоварам = СуммаРасходаПоТоварам - Отклонение - СуммаДокумента - ВозвратПокупателю;
		Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			РазницаПоТоварам = 0;
		Иначе	
			РазницаПоТоварам = Документы.ЛистУчета.ПолучитьОтклонениеСуммыТоваров(Дата, ТорговаяТочка.СкладТорговогоЗала, ДополнительныеСвойства.ТаблицаТоваровКПроведению
								, Новый Структура("НачальныйОстаток, СуммаИнкассации, ОплатаБаллами, КонечныйОстаток, СуммаЭквайринг, СкидкаКопеек", НачальныйОстаток, СуммаИнкассации, ОплатаБаллами, КонечныйОстаток, СуммаЭквайринг, СкидкаКопеек));
		КонецЕсли;						
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ТаблицаТоваровКПроведению") Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Таб", ДополнительныеСвойства.ТаблицаТоваровКПроведению);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.Номенклатура,
		               |	Таб.Сумма
		               |ПОМЕСТИТЬ ВТ_Товары
		               |ИЗ
		               |	&Таб КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СУММА(ВТ_Товары.Сумма) КАК Сумма,
		               |	НоменклатураСпр.СтавкаНДС КАК СтавкаНДС
		               |ИЗ
		               |	ВТ_Товары КАК ВТ_Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		               |		ПО ВТ_Товары.Номенклатура = НоменклатураСпр.Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НоменклатураСпр.СтавкаНДС
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Товары";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		ОбщаяСуммаНДС = 0;
		ОбщаяСумма = 0;
		Пока Выборка.Следующий() Цикл
			СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Выборка.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
			ОбщаяСуммаНДС = ОбщаяСуммаНДС + СуммаНДС;
			ОбщаяСумма = ОбщаяСумма + Выборка.Сумма;
		КонецЦикла;
		ПроцентОтОбщей = ?(ОбщаяСумма = 0, 0, ОбщаяСуммаНДС / ОбщаяСумма);
		СуммаДокументаБезНДС = СуммаДокумента - СуммаДокумента * ПроцентОтОбщей;
	КонецЕсли;
	
	КаталогПриложенных = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогПриложенных, 1) <> "\" Тогда
		КаталогПриложенных = КаталогПриложенных + "\";
	КонецЕсли;
	КаталогПриложенных = КаталогПриложенных + "ЛистыУчета\" + Формат(Дата, "ДФ=yyyyMM") + "\";
	СоздатьКаталог(КаталогПриложенных);
	Для Каждого СтрокаТаб Из ПриложенныеДокументы Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.ВременноеХранилище) Тогда
			ЗначениеВХранилище = ЗначениеИзСтрокиВнутр(СтрокаТаб.ВременноеХранилище);
			Если ТипЗнч(ЗначениеВХранилище) = Тип("ДвоичныеДанные") Тогда
				ЗначениеВХранилище.Записать(КаталогПриложенных + СтрокаТаб.УникальныйИдентификатор + СтрокаТаб.Расширение);
				СтрокаТаб.ВременноеХранилище = "";
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

//
Функция АК_СкорректироватьНачальныйОстаток()
	
	//
	ВсеОК = Истина;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЛистУчета.Ссылка,
	               |	ЛистУчета.КонечныйОстаток,
	               |	ЛистУчета.КонечныйОстатокПоАстору
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата < &Дата
	               |	И ЛистУчета.Дата >= &ДатаДинамическогоСчитывания
	               |	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
	               |	И ЛистУчета.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета.Дата УБЫВ";
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Дата", НачалоДня(Дата));
	ПостроительЗапроса.Параметры.Вставить("ДатаДинамическогоСчитывания", Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить());
	ПостроительЗапроса.Параметры.Вставить("ТорговаяТочка", ТорговаяТочка);
	ПостроительЗапроса.Параметры.Вставить("Сумма", НачальныйОстаток);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//
		Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			НачальныйОстаток = Выборка.КонечныйОстаток;
			СуммаВозвратовИзСейфаЛок = 0;
			Для Каждого СтрокаТаб Из ВозвратыИзСейфа Цикл
				СуммаВозвратовИзСейфаЛок = СуммаВозвратовИзСейфаЛок + ?(СтрокаТаб.ПолученаСумма <> 0, СтрокаТаб.ПолученаСумма, СтрокаТаб.Сумма);
			КонецЦикла;
			Отклонение = -(НачальныйОстаток 
								+ СуммаДокумента 
								- ОплатаБаллами 
								- СуммаЭквайринг 
								- КорректировкаБезнал 
								- СуммаИнкассации
								- КонечныйОстаток
								- Доставка.Итог("СуммаНалИсходная")
								- СуммаВозвратовИзСейфаЛок - ВзаимозачетОтклоненийДС.Итог("Сумма"));
			
		Иначе
			НачальныйОстаток = Выборка.КонечныйОстаток;
			Отклонение = -(НачальныйОстаток 
							+ СуммаДокумента 
							+ КорректировкаZ 
							- ОплатаБаллами 
							- СуммаЭквайринг 
							- КорректировкаБезнал 
							//- КорректировкаБезналДоставка 
							//- КорректировкаНалДоставка 
							- СуммаИнкассации 
							- КонечныйОстаток - ВзаимозачетОтклоненийДС.Итог("Сумма"));
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	Возврат ВсеОК;	
	
КонецФункции	


//
Функция АК_СкорректироватьНачальныйОстатокВСледующемЛУ()
	
	//
	ВсеОК = Истина;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЛистУчета.Ссылка,
	               |	ЛистУчета.НачальныйОстаток
	               |ИЗ
	               |	Документ.ЛистУчета КАК ЛистУчета
	               |ГДЕ
	               |	ЛистУчета.Дата >= &Дата
	               |	И ЛистУчета.Дата >= &ДатаДинамическогоСчитывания
	               |	И ЛистУчета.ТорговаяТочка = &ТорговаяТочка
	               |	И ЛистУчета.Проведен
	               |	И ЛистУчета.Ссылка <> &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛистУчета.Дата";
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Дата", НачалоДня(Дата + 24 * 60 * 60));
	ПостроительЗапроса.Параметры.Вставить("ДатаДинамическогоСчитывания", Константы.ДатаВключенияДинамическогоЧтенияТоваровЛУ.Получить());
	ПостроительЗапроса.Параметры.Вставить("ТорговаяТочка", ТорговаяТочка);
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
		//СуммаПроверки = КонечныйОстатокПоАстору;
		СуммаПроверки = КонечныйОстаток;
	Иначе	
		СуммаПроверки = КонечныйОстаток;
	КонецЕсли;	
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НачальныйОстаток = СуммаПроверки Тогда
			Продолжить;
		КонецЕсли;	
		//
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТорговаяТочка.ТипРозничнойТочки = Перечисления.ТипыРозничныхТочек.Магазин Тогда
			//ДокументОбъект.НачальныйОстаток = КонечныйОстатокПоАстору;
			ДокументОбъект.НачальныйОстаток = КонечныйОстаток;
		Иначе	
			ДокументОбъект.НачальныйОстаток = КонечныйОстаток;
		КонецЕсли;	
		
		////
		//ДокументОбъект.Отклонение = -(ДокументОбъект.НачальныйОстаток 
		//								+ ДокументОбъект.СуммаДокумента 
		//								+ ДокументОбъект.КорректировкаZ 
		//								- ДокументОбъект.ОплатаБаллами 
		//								- ДокументОбъект.СуммаЭквайринг 
		//								- ДокументОбъект.КорректировкаБезнал 
		//								//- ДокументОбъект.КорректировкаБезналДоставка 
		//								//- ДокументОбъект.КорректировкаНалДоставка 
		//								- ДокументОбъект.СуммаИнкассации 
		//								- ДокументОбъект.КонечныйОстаток); 
										
		//
		ДокументОбъект.СчитыватьТаблицуТоваровСЧековДляПроведения = Истина;
		
		//
		Попытка
			
			//
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПризнакНеСинхронизироватьОстатки", Истина);
			
			//
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ВсеОК = Ложь;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЦикла;	
	
	//
	Возврат ВсеОК;	
	
КонецФункции	

Процедура ПриКопировании(ОбъектКопирования)
	
	Расчетчик = Неопределено;
	КонечныйОстатокПоАстору = 0;
	НеПривязанныеКассыПеренесены = Ложь;
	Обработан = Ложь;
	
КонецПроцедуры

//---ZEZA

//+++АК Susk (Суслин К.В.) 2018.04.17 ИП-00017896
Функция СоздатьНедостающиеСкладыРасхождений()
	
	НовСклад = Справочники.Склады.СоздатьЭлемент();
	НовСклад.Владелец = ТорговаяТочка;
	НовСклад.Наименование = "Склад расхождений";
	НовСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный;
	НовСклад.Записать();
		
	ТТОб = ТорговаяТочка.ПолучитьОбъект();
	ТТОБ.СкладРасхождений = НовСклад.Ссылка;
	ТТОб.ОбменДанными.Загрузка = Истина;
	ТТОб.Записать();
	
	Возврат НовСклад.Ссылка;
		
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.04.17 ИП-00017896
Процедура СоздатьДвиженияПоПрочимСкладам(СкладРасхождений, ТаблицаДвижений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДвижений.ВидДвиженияТовара,
	               |	ТаблицаДвижений.Номенклатура,
	               |	ТаблицаДвижений.Количество
	               |ПОМЕСТИТЬ ТаблицаДвиженияДокумента
	               |ИЗ
	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДвиженияДокумента.ВидДвиженияТовара,
	               |	ТаблицаДвиженияДокумента.Номенклатура,
	               |	СУММА(ТаблицаДвиженияДокумента.Количество) КАК Количество
	               |ИЗ
	               |	ТаблицаДвиженияДокумента КАК ТаблицаДвиженияДокумента
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыОперацийПрочихСкладов КАК ВидыОперацийПрочихСкладов
	               |		ПО ТаблицаДвиженияДокумента.ВидДвиженияТовара = ВидыОперацийПрочихСкладов.ВидОперации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДвиженияДокумента.ВидДвиженияТовара,
	               |	ТаблицаДвиженияДокумента.Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = ДобавитьДвижениеПоПрочимСкладам();
		Движение.Номенклатура = Выборка.Номенклатура;
		Движение.Склад = СкладРасхождений;
		Движение.Количество = -Выборка.Количество;
		Движение.СтатьяТД = Выборка.ВидДвиженияТовара;	
	КонецЦикла;			
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.04.17 ИП-00017896
Функция ДобавитьДвижениеПоПрочимСкладам()
	
	Движение = Движения.ПрочиеСклады.ДобавитьПриход();
	Движение.Период = Дата;
	
	Возврат Движение;
	
КонецФункции		

//+++АК SaMi 2018.04.28 ИП-00018340.01 
Процедура ДобавитьПроизводствоВТаблицуТоваров(ТаблицаТоваров) Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ТоварыПроизводство") Тогда
		ТаблицаДвиженияТоваровПроизводство = ПолучитьДвиженияТоваровПроизводство();
		ДополнительныеСвойства.Вставить("ТоварыПроизводство", ТаблицаДвиженияТоваровПроизводство);	
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("Производство") <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаТоваров.Колонки.Добавить("Производство", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТаблицаДвиженияТоваровПроизводство Цикл
		СтрокаТовара = ТаблицаТоваров.Найти(Строка.Номенклатура,  "Номенклатура"); 
		
		Если СтрокаТовара = Неопределено Тогда
			Сообщить("Некорректная информация в БД по товару <" + Строка.Номенклатура + ">!", СтатусСообщения.ОченьВажное); 
			Продолжить;
		КонецЕсли; 
		
		СтрокаТовара.Производство = СтрокаТовара.Производство + Строка.Произведено - Строка.Списано;		
		СтрокаТовара.Комплектация = СтрокаТовара.Комплектация - (Строка.Произведено - Строка.Списано);
	КонецЦикла;  
	
КонецПроцедуры 
//---АК SaMi  2018.04.28 

//+++АК SaMi 2018.04.24  ИП-00018340.01
Функция ПолучитьДвиженияТоваровПроизводство() 
	
	ТабДанные = Новый ТаблицаЗначений();
	
	ТабДанные.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("НоменклатураПродукция"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДанные.Колонки.Добавить("Списано"				, Новый ОписаниеТипов("Число"));
	ТабДанные.Колонки.Добавить("Произведено"				, Новый ОписаниеТипов("Число"));

	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	СтрЗапрос = "SELECT 
				|		  UINTov._Fld4946 AS TovarUID
				|		, UINProduct._Fld4946 AS ProductUID				
				|		, SUM(Proizvedeno) as Proizvedeno
				|		, SUM(Spisano) as Spisano
				|FROM [SMS_REPL].[dbo].[dtt_Production] as TD (nolock)
				|
			  	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINTov (nolock) ON TD.id_tov = UINTov._Fld4953 and UINTov._Fld4944_TYPE = 0x08 and UINTov._Fld4944_RTRef = 0x0000001D
			  	|LEFT OUTER JOIN IzbenkaFin.dbo._InfoRg4943 UINProduct (nolock) ON TD.Corr_id_tt = UINProduct._Fld4953 and UINProduct._Fld4944_TYPE = 0x08 and UINProduct._Fld4944_RTRef = 0x0000001D				
				|LEFT OUTER JOIN IzbenkaFin.dbo._Reference29 TovSpr (nolock) ON TD.id_tov = TovSpr._Fld760
				|	
				|WHERE TD.ShopNo = " + ВнешниеДанные.ФорматПоля(ТорговаяТочка.НомерТочки) + "
				|	and TD.date_tt = " + ВнешниеДанные.ФорматПоля(НачалоДня(Дата))  + "
				|  GROUP BY UINTov._Fld4946, UINProduct._Fld4946";
				   
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанные.Добавить();
			
			Если Rs.Fields("TovarUID").Value <> NULL Тогда
				СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("TovarUID").Value));
			КонецЕсли;
			
			Если Rs.Fields("ProductUID").Value <> NULL Тогда
				СтрокаДоб.НоменклатураПродукция = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Rs.Fields("ProductUID").Value));
			КонецЕсли;
			
			СтрокаДоб.Списано = Rs.Fields("Spisano").Value;
			СтрокаДоб.Произведено = Rs.Fields("Proizvedeno").Value;
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат ТабДанные;
	
КонецФункции 
//---АК SaMi  2018.04.24 

//+++АК SaMi 2018.04.25 ИП-00018340.01 
Процедура ПроведениеПоРегиструТоваровПроизводство()
	
	Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Записывать = Истина;
	Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Очистить();
	
	Если НЕ ДополнительныеСвойства.Свойство("ТоварыПроизводство") Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого Строка Из ДополнительныеСвойства.ТоварыПроизводство Цикл
		НоваяЗапись = Движения.ДвиженияТоваровПоЛистамУчетаПроизводство.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		
		НоваяЗапись.Период = Дата;
		НоваяЗапись.СтруктурнаяЕдиница = ТорговаяТочка;
	КонецЦикла;  
	
КонецПроцедуры 	
//---АК SaMi  2018.04.25

//+++АК ILIK 2018.09.19 ИП-00019521.04
Процедура ВыполнитьДвиженияПоРасчетамСКонтрагентами()
	УстановитьПривилегированныйРежим(Истина);
	
	Сч62_1 = ПланыСчетов.Финансовый.РасчетыСПокупателямиПрочие;
	
	Движения.РасчетыСКонтрагентами.Записывать = Истина;
	Движения.РасчетыСКонтрагентами.Очистить();
	
	Для Каждого Проводка Из Движения.Финансовый Цикл
		Если Проводка.СчетКт <> Сч62_1 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Проводка.Период;
		Движение.Организация = Проводка.СубконтоКт.Организации;
		Движение.Контрагент = Проводка.СубконтоКт.Контрагенты;
		Движение.СчетУчета = Проводка.СчетКт;
		Движение.Сумма = Проводка.Сумма;
	КонецЦикла;  
КонецПроцедуры

СДСРозничнаяВыручка = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101").Ссылка;
СДСИнкассация		= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("901010").Ссылка;
СДСОплатаБаллами	= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110101").Ссылка;
СДРЭквайринг		= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39391").Ссылка;
БСЭквайринг			= Справочники.БанковскиеСчета.НайтиПоКоду("000000425");

СДРОтклонение		= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
СДРОтклонение20121001		= Справочники.СтатьиДоходовРасходов.НайтиПоКоду("39313").Ссылка;

СчитыватьТаблицуТоваровСЧековДляПроведения = Истина;

//ЦФОУправлениеРозницей = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000003").Ссылка;

