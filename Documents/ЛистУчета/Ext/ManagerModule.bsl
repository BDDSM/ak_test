
Функция ЕстьДублиПродавцов(МассивПродавцов, Дата, Ссылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистУчетаПродавцы.Продавец,
	               |	ЛистУчетаПродавцы.Ссылка КАК ЛистУчета
	               |ИЗ
	               |	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) = &Дата
	               |	И ЛистУчетаПродавцы.Ссылка.Проведен
	               |	И ЛистУчетаПродавцы.Продавец В(&Продавцы)
	               |	И ЛистУчетаПродавцы.Ссылка <> &Ссылка";
				   
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Продавцы", МассивПродавцов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПересчитатьТаблицуЗОтчетов(ТаблицаНаличные, ТаблицаБезнал, Дата) Экспорт
	
	ТаблицаЗОтчеты = Новый ТаблицаЗначений();
	ТаблицаЗОтчеты.Колонки.Добавить("Касса");
	ТаблицаЗОтчеты.Колонки.Добавить("Сумма");
	ТаблицаЗОтчеты.Колонки.Добавить("СуммаПоНал");
	ТаблицаЗОтчеты.Колонки.Добавить("СуммаПоБезнал");
	ТаблицаЗОтчеты.Колонки.Добавить("ВведенныйОстаток");
	
	//Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	СоответствиеОсновныхСредствТерминаламСрезПоследних.Терминал,
	//			   |	СоответствиеОсновныхСредствТерминаламСрезПоследних.ОсновноеСредство
	//			   |ИЗ
	//			   |	РегистрСведений.СоответствиеОсновныхСредствТерминалам.СрезПоследних(
	//			   |			&Дата,
	//			   |			Терминал В (&ККМ)
	//			   |				ИЛИ Терминал В (&Терминалы)) КАК СоответствиеОсновныхСредствТерминаламСрезПоследних";
	//			   
	//Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	//Запрос.УстановитьПараметр("ККМ", ТаблицаНаличные.ВыгрузитьКолонку("ККМ"));
	//Запрос.УстановитьПараметр("Терминалы", ТаблицаБезнал.ВыгрузитьКолонку("Терминал"));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Терминал,
	               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.Касса КАК ОсновноеСредство,
	               |	ПривязкиОборудованияКРабочимМестамСрезПоследних.РабочееМесто.CashName КАК CashName
	               |ИЗ
	               |	РегистрСведений.ПривязкиОборудованияКРабочимМестам.СрезПоследних(&Дата, ) КАК ПривязкиОборудованияКРабочимМестамСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка,
	               |	ОсновныеСредства.Fisc_no
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства";
				   
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ККМ", ТаблицаНаличные.ВыгрузитьКолонку("ККМ"));
	Запрос.УстановитьПараметр("Терминалы", ТаблицаБезнал.ВыгрузитьКолонку("Терминал"));
	
	Результаты = Запрос.ВыполнитьПакет();
	ТабОснСредство = Результаты[0].Выгрузить();
	ТабКеш = Результаты[1].Выгрузить();
	
	Для Каждого СтрокаНал Из ТаблицаНаличные Цикл
		СтрокаТаб = ТаблицаЗОтчеты.Добавить();
		Если ЗначениеЗаполнено(СтрокаНал.ОсновноеСредство) Тогда
			СтрокаТаб.Касса = СтрокаНал.ОсновноеСредство;
		Иначе
			СтрокиОснСредство = ТабОснСредство.НайтиСтроки(Новый Структура("Терминал, CashName", СтрокаНал.ККМ, СтрокаНал.РабочееМестоВСкл));
			Если СтрокиОснСредство.Количество() > 0 Тогда
				СтрокаОснСредство = СтрокиОснСредство[0];
			Иначе	
				СтрокаОснСредство = ТабОснСредство.Найти(СтрокаНал.ККМ, "Терминал");
			КонецЕсли;
			Если СтрокаОснСредство = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаб.Касса = СтрокаОснСредство.ОсновноеСредство;
		КонецЕсли;
		СтрокаТаб.Сумма = СтрокаНал.Сумма;
		СтрокаТаб.СуммаПоНал = СтрокаНал.Сумма;
	КонецЦикла;
	
	Для Каждого СтрокаБНал Из ТаблицаБезнал Цикл
		СтрокаТаб = ТаблицаЗОтчеты.Добавить();
		СтрокаВНалЧасти = ТаблицаНаличные.Найти(СтрокаБНал.РабочееМестоВСкл, "РабочееМестоВСкл");
		Если СтрокаВНалЧасти <> Неопределено Тогда
			СтрокаТаб.Касса = СтрокаВНалЧасти.ОсновноеСредство;
		Иначе	
			Если ЗначениеЗаполнено(СтрокаБНал.ОсновноеСредство) Тогда
				СтрокаТаб.Касса = СтрокаБНал.ОсновноеСредство;
			Иначе
				СтрокиОснСредство = ТабОснСредство.НайтиСтроки(Новый Структура("Терминал, CashName", СтрокаБНал.Терминал, СтрокаБНал.РабочееМестоВСкл));
				Если СтрокиОснСредство.Количество() > 0 Тогда
					СтрокаОснСредство = СтрокиОснСредство[0];
				Иначе	
					СтрокаОснСредство = ТабОснСредство.Найти(СтрокаБНал.Терминал, "Терминал");
				КонецЕсли;
				Если СтрокаОснСредство = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаб.Касса = СтрокаОснСредство.ОсновноеСредство;
			КонецЕсли;	
		КонецЕсли;	
		СтрокаТаб.Сумма = СтрокаБНал.Сумма;
		СтрокаТаб.СуммаПоБезнал = СтрокаБНал.Сумма;
		
		СтрокаТаб = ТаблицаЗОтчеты.Добавить();
		Если СтрокаВНалЧасти <> Неопределено Тогда
			СтрокаТаб.Касса = СтрокаВНалЧасти.ОсновноеСредство;
		Иначе
			Если ЗначениеЗаполнено(СтрокаБНал.ОсновноеСредство) Тогда
				СтрокаТаб.Касса = СтрокаБНал.ОсновноеСредство;
			Иначе
				СтрокиОснСредство = ТабОснСредство.НайтиСтроки(Новый Структура("Терминал, CashName", СтрокаБНал.Терминал, СтрокаБНал.РабочееМестоВСкл));
				Если СтрокиОснСредство.Количество() > 0 Тогда
					СтрокаОснСредство = СтрокиОснСредство[0];
				Иначе	
					СтрокаОснСредство = ТабОснСредство.Найти(СтрокаБНал.Терминал, "Терминал");
				КонецЕсли;
				Если СтрокаОснСредство = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаб.Касса = СтрокаОснСредство.ОсновноеСредство;
			КонецЕсли;
		КонецЕсли;	
		СтрокаТаб.Сумма = СтрокаБНал.СуммаДоставка;
		СтрокаТаб.СуммаПоБезнал = СтрокаБНал.СуммаДоставка;
	КонецЦикла;
	
	ТаблицаЗОтчеты.Свернуть("Касса", "Сумма, СуммаПоНал, СуммаПоБезнал, ВведенныйОстаток");
	
	ADOСоединение = ВнешниеДанныеКлиентСервер.ПолучитьADOСоединение();
	
	ТекстЗапроса = "SELECT VZ.FiscNo, VZ.summ_NonResttable
					|FROM (SELECT [cashid]
					|      ,[shift_no]
					|      ,[FiscSessinonNo]
					|      ,[shift_closedate]
					|      ,[summ_shift]
					|      ,[summ_cash]
					|      ,[summ_bank]
					|      ,[summ_NonResttable]
					|      ,[FiscNo]
					|      ,[Model]
					|      ,[ROMVersion]
					|      ,ROW_NUMBER() over (Partition BY FiscNo order by shift_closedate desc) as rn
					|  FROM [SMS_REPL].[dbo].[Z_Reports] (nolock)
					|  where shift_closedate between " + ВнешниеДанные.ФорматПоля(НачалоДня(Дата)) + " and " + ВнешниеДанные.ФорматПоля(КонецДня(Дата)) + ") as VZ
					|  WHERE VZ.rn = 1";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	ТабДанныеКеш = Новый ТаблицаЗначений();
	ТабДанныеКеш.Колонки.Добавить("FiscNo");
	ТабДанныеКеш.Колонки.Добавить("summ_NonResttable");

	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабДанныеКеш.Добавить();
			СтрокаДоб.FiscNo = Формат(Rs.Fields("FiscNo").Value, "ЧГ=0");
			СтрокаДоб.summ_NonResttable = Rs.Fields("summ_NonResttable").Value;   
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Для Каждого СтрокаТаб Из ТаблицаЗОтчеты Цикл
		СтрокаКеш = ТабКеш.Найти(СтрокаТаб.Касса, "Ссылка");
		Если СтрокаКеш <> Неопределено
			И ЗначениеЗаполнено(СтрокаКеш.Fisc_no) Тогда
			СтрокаКешДанные = ТабДанныеКеш.Найти(СтрокаКеш.Fisc_no, "FiscNo");
			Если СтрокаКешДанные <> Неопределено Тогда
				СтрокаТаб.ВведенныйОстаток = СтрокаКешДанные.summ_NonResttable;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ТаблицаЗОтчеты;
	
КонецФункции	

Функция ПолучитьСреднююЦенуДляНоменклатуры(Номенклатура_id_tov, Дата, СтрокаСоединения = "") Экспорт
	
	id_tov = 0;
	Если ТипЗнч(Номенклатура_id_tov) = Тип("СправочникСсылка.Номенклатура") Тогда
		id_tov = Номенклатура_id_tov.id_tov;
	Иначе
		id_tov = Номенклатура_id_tov;
	КонецЕсли;
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ?(ПустаяСтрока(СтрокаСоединения), ОбменСAccess.ПолучитьСтрокуСоединения("SMS_IZBENKA"), СтрокаСоединения);
	ADOСоединение.Open();
	
	СтрЗапрос = "SELECT TOP 50 
				  |	AVG([BasePrice]) As AvgPrice
				  |	
				  |FROM [SMS_IZBENKA].[dbo].[CheckLine] as a (nolock)
				  |Where [date_ch] >= '" + Формат(Дата - 86400 * 3, "ДФ=yyyy-MM-dd") + "' and [date_ch] <= '" + Формат(Дата, "ДФ=yyyy-MM-dd") + "' and [id_tov_cl] = " + Формат(id_tov, "ЧН=; ЧГ=0") + " and [OperationType_cl] = 1
				  |and [BaseSum] <> 0 and ([id_nabor] is null or [id_nabor] = 0)";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	СредняяЦена = 0;
	Попытка
		rs.MoveFirst();
		
		Если НЕ rs.EOF() Тогда
			СредняяЦена = Rs.Fields("AvgPrice").Value;
		КонецЕсли;
	Исключение
	КонецПопытки;
	ADOСоединение.Close();
	
	Возврат ?(ТипЗнч(СредняяЦена) <> Тип("Число"), 0, СредняяЦена);
	
КонецФункции	

Функция ПолучитьОтклонениеСуммыТоваров(Дата, СкладОстатки, ТабДвижения, СтруктураСуммы) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таб", ТабДвижения);
	Запрос.УстановитьПараметр("Склад", СкладОстатки);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(НачалоДня(Дата) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаЦен", КонецДня(Дата));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток * ЕСТЬNULL(ТоварыНаСкладахОстатки.ЕдиницаИзмерения.Коэффициент, 1)) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстатки.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб.Дегустация КАК Дегустация,
	               |	Таб.Продано КАК Продано,
	               |	Таб.Списание КАК Списание,
	               |	Таб.СписаниеПоКачеству КАК СписаниеПоКачеству,
	               |	Таб.Бой КАК Бой,
	               |	Таб.Акция КАК Акция,
	               |	Таб.Поступило + Таб.ПолученоСДругихТТ - Таб.ОтправленоНаДругиеТТ КАК Поступило,
	               |	Таб.Разница,
	               |	Таб.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_ДанныеЧеков
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЗ_Запрос.Номенклатура КАК Номенклатура,
	               |	ЕСТЬNULL(ВЗ_Запрос.НачальныйОстаток, 0) КАК НачальныйОстаток,
	               |	ЕСТЬNULL(ВЗ_Запрос.Дегустация, 0) КАК Дегустация,
	               |	ЕСТЬNULL(ВЗ_Запрос.Списание, 0) КАК Списание,
	               |	ЕСТЬNULL(ВЗ_Запрос.СписаниеПоКачеству, 0) КАК СписаниеПоКачеству,
	               |	ЕСТЬNULL(ВЗ_Запрос.Бой, 0) КАК Бой,
	               |	ЕСТЬNULL(ВЗ_Запрос.Акция, 0) КАК Акция,
	               |	ЕСТЬNULL(ВЗ_Запрос.Поступило, 0) КАК Поступило,
	               |	ЕСТЬNULL(ВЗ_Запрос.Разница, 0) КАК Разница,
	               |	ЕСТЬNULL(ВЗ_Запрос.КонечныйОстаток, 0) КАК КонечныйОстаток
	               |ПОМЕСТИТЬ ВТ_Полные
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Номенклатура, ВЗ_Остатки.Номенклатура) КАК Номенклатура,
	               |		ЕСТЬNULL(ВЗ_Остатки.КоличествоОстаток, 0) КАК НачальныйОстаток,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Дегустация, 0) КАК Дегустация,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Списание, 0) КАК Списание,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.СписаниеПоКачеству, 0) КАК СписаниеПоКачеству,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Бой, 0) КАК Бой,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Акция, 0) КАК Акция,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Поступило, 0) КАК Поступило,
	               |		ЕСТЬNULL(ВТ_ДанныеЧеков.Разница, 0) КАК Разница,
	               |		ЕСТЬNULL(ВЗ_Остатки.КоличествоОстаток, 0) + ЕСТЬNULL(ВТ_ДанныеЧеков.Поступило, 0) + ЕСТЬNULL(ВТ_ДанныеЧеков.Разница, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Продано, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Дегустация, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Списание, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.СписаниеПоКачеству, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Бой, 0) - ЕСТЬNULL(ВТ_ДанныеЧеков.Акция, 0) КАК КонечныйОстаток
	               |	ИЗ
	               |		ВТ_ДанныеЧеков КАК ВТ_ДанныеЧеков
	               |			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВЗ_Остатки
	               |			ПО ВТ_ДанныеЧеков.Номенклатура = ВЗ_Остатки.Номенклатура) КАК ВЗ_Запрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Полные.Номенклатура,
	               |	ВТ_Полные.НачальныйОстаток,
	               |	ВТ_Полные.Дегустация,
	               |	ВТ_Полные.Списание,
	               |	ВТ_Полные.СписаниеПоКачеству,
	               |	ВТ_Полные.Бой,
	               |	ВТ_Полные.Акция,
	               |	ВТ_Полные.Поступило,
	               |	ВТ_Полные.Разница,
	               |	ВТ_Полные.КонечныйОстаток,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	               |ИЗ
	               |	ВТ_Полные КАК ВТ_Полные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ДатаЦен,
	               |				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ОсновнойТипЦенПродаж)
	               |					И ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	               |					И Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВТ_Полные.Номенклатура
	               |						ИЗ
	               |							ВТ_Полные КАК ВТ_Полные)) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ВТ_Полные.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ДанныеЧеков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Остатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Полные";
				   
	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	ИтогоНачальный = 0;
	ИтогоПоступило = 0;
	ИтогоДегустация = 0;
	ИтогоСписание = 0;
	ИтогоСписаниеПоКачеству = 0;
	ИтогоБой = 0;
	ИтогоАкция = 0;
	ИтогоРазница = 0;
	ИтогоКонечныйОстаток = 0;
	Для Каждого СтрокаТовар Из ТабТовары Цикл
		ИтогоНачальный = ИтогоНачальный + СтрокаТовар.НачальныйОстаток * СтрокаТовар.Цена;
		ИтогоПоступило = ИтогоПоступило + СтрокаТовар.Поступило * СтрокаТовар.Цена;
		ИтогоДегустация = ИтогоДегустация + СтрокаТовар.Дегустация * СтрокаТовар.Цена;
		ИтогоСписание = ИтогоСписание + СтрокаТовар.Списание * СтрокаТовар.Цена;
		ИтогоСписаниеПоКачеству = ИтогоСписаниеПоКачеству + СтрокаТовар.СписаниеПоКачеству * СтрокаТовар.Цена;
		ИтогоБой = ИтогоБой + СтрокаТовар.Бой * СтрокаТовар.Цена;
		ИтогоАкция = ИтогоАкция + СтрокаТовар.Акция * СтрокаТовар.Цена;
		ИтогоРазница = ИтогоРазница + СтрокаТовар.Разница * СтрокаТовар.Цена;
		ИтогоКонечныйОстаток = ИтогоКонечныйОстаток + СтрокаТовар.КонечныйОстаток * СтрокаТовар.Цена;
	КонецЦикла;	
	
	//Возврат ИтогоНачальный + СтруктураСуммы.НачальныйОстаток + ИтогоПоступило - ИтогоДегустация
	//			- ИтогоСписание - ИтогоСписаниеПоКачеству - ИтогоБой - ИтогоАкция + ИтогоРазница - ИтогоКонечныйОстаток
	//			- СтруктураСуммы.СуммаИнкассации - СтруктураСуммы.ОплатаБаллами - СтруктураСуммы.СуммаЭквайринг - СтруктураСуммы.СкидкаКопеек - СтруктураСуммы.КонечныйОстаток;
	
	Возврат ИтогоРазница;
	
КонецФункции				
//+++АК GEYV 19.05.2015
Функция  НапечататьОбъяснительную(Документ,ТабличныйДокумент) Экспорт
	

	Макет = Документы.ЛистУчета.ПолучитьМакет("Объяснительная");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Для каждого ТекСтрока Из Документ.Продавцы Цикл
	
		Если ТекСтрока.Пч = 2 Тогда
		
			ФизЛицо = ТекСтрока.Продавец;	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Если ФизЛицо.Пустая() И Документ.Продавцы.Количество() Тогда
	
		ФизЛицо = Документ.Продавцы[0].Продавец;
	
	КонецЕсли;
	
	ДанныеФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицо);
	//ДанныеФизЛица = ОбщегоНазначения.ДанныеФизЛица(Документ.Организация,Документ.Расчетчик.ФизЛицо,Документ.Дата);
	
	ОбластьШапка.Параметры.ТипТТ = ?(Документ.Организация.Код = "000000004","ТТ","магазина");
	
	НомерТорговойТочки = "Управление розницей";
	
	Если ЗначениеЗаполнено(Документ.ТорговаяТочка.КодОПБух) Тогда
		
		Подключение = ОбщегоНазначения.ПодключитьсяКБухгалтерии();
		
		Если Подключение <> Неопределено Тогда
			
			ОргБух = Подключение.Справочники.Организации.НайтиПоРеквизиту("ИНН",Документ.Организация.ИНН);
			
			Если Не ОргБух.Пустая() Тогда
			
				ОП = Подключение.Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Документ.ТорговаяТочка.КодОПБух,,,ОргБух);	
				
				Если Не Оп.Пустая() Тогда
					
					НомерТорговойТочки = Оп.Description;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	ОбластьШапка.Параметры.НомерТТ = НомерТорговойТочки;
	ОбластьШапка.Параметры.Дата = Документ.Дата;
	ОбластьШапка.Параметры.Организация = Документ.Организация.Наименование;
	ОбластьШапка.Параметры.ФИОКратко = ДанныеФизЛица;
	ОбластьШапка.Параметры.Сумма =?(Документ.КорректировкаБезнал<0,Документ.КорректировкаБезнал*(-1),Документ.КорректировкаБезнал);
	ОбластьШапка.Параметры.ФИО = ФизЛицо;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции
//---АК

//+++АК POZM 2018.08.28 ИП-00019521 
Функция ПолучитьПродажиЧерезКурьеровЗаПериод(ДатаНачала,ДатаОкончания,МассивКурьеров = Неопределено, МассивТочек = Неопределено) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЛистУчетаЗаказыКурьеров.Ссылка,
	               |	ЛистУчетаЗаказыКурьеров.Номенклатура,
	               |	ЛистУчетаЗаказыКурьеров.Контрагент,
	               |	ЛистУчетаЗаказыКурьеров.Количество,
	               |	ЛистУчетаЗаказыКурьеров.Сумма,
	               |	ЛистУчетаЗаказыКурьеров.Ссылка.ТорговаяТочка,
	               |	ЛистУчетаЗаказыКурьеров.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ЛистУчета.ЗаказыКурьеров КАК ЛистУчетаЗаказыКурьеров
	               |ГДЕ
	               |	ЛистУчетаЗаказыКурьеров.Ссылка.Проведен
	               |	И ЛистУчетаЗаказыКурьеров.Ссылка.ДатаЗакрытияСмены МЕЖДУ &ДатаЗакрытияСменыС И &ДатаЗакрытияСменыПо
	               |	И ЛистУчетаЗаказыКурьеров.Контрагент.ДатаНачалаФормированияРТУПоПродажамЧерезКурьеров <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ЛистУчетаЗаказыКурьеров.Ссылка.ДатаЗакрытияСмены >= ЛистУчетаЗаказыКурьеров.Контрагент.ДатаНачалаФормированияРТУПоПродажамЧерезКурьеров";
	Если ЗначениеЗаполнено(МассивКурьеров) Тогда
		ТекстЗапроса = ТекстЗапроса + " И ЛистУчетаЗаказыКурьеров.Контрагент В (&МассивКурьеров)";
	КонецЕсли;	
	Если ЗначениеЗаполнено(МассивТочек) Тогда
		ТекстЗапроса = ТекстЗапроса + " И ЛистУчетаЗаказыКурьеров.Ссылка.ТорговаяТочка В(&МассивТочек)";
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗакрытияСменыС",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаЗакрытияСменыПо",ДатаОкончания);
	Запрос.УстановитьПараметр("МассивКурьеров",МассивКурьеров);
	Запрос.УстановитьПараметр("МассивТочек",МассивТочек);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;
КонецФункции	
//---АК POZM 