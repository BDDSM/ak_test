
&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользователяПоНаименованию(мНаименование)
	
	Возврат Справочники.Пользователи.НайтиПоНаименованию(мНаименование);
	
КонецФункции

Процедура ЗаполнитьСписокВыбораУслугиСервер()
	
	Возврат;
	
	Если Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущиеДанные = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	
	Элементы.УслугиСтавкаНДС.СписокВыбора.Очистить();
	Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		Элементы.УслугиСтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
	Иначе
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура.СтавкаНДС) Тогда
			Элементы.УслугиСтавкаНДС.СписокВыбора.Добавить(ТекущиеДанные.Номенклатура.СтавкаНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьРеквизитовПоВидуОперации()
	Док = РеквизитФормыВЗначение("Объект");
	Объект.ЭтоЗаявкаПоАренде = Док.ЭтоЗаявкаПоАренде();
	Элементы.СтраницаАренды.Видимость = Объект.ЭтоЗаявкаПоАренде;
	Элементы.СтраницаКорпКарты.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты;
	Элементы.СтраницаОплатаПоставщику.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику;
	
	//+++АК LAGP 2018.08.30 ИП-00019684.01 Видимость вкладки "перечисление налогов" на основании одноименной галки в договоре  
	//Элементы.СтраницаПеречислениеНалога.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога;	
	ЭтоПеречислениеНалога = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога;	
	Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		ЭтоДоговорБюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.ДоговорКонтрагента, "ПеречислениеВБюджет");
		Элементы.СтраницаПеречислениеНалога.Видимость = ЭтоДоговорБюджет ИЛИ ЭтоПеречислениеНалога;
	Иначе
		Элементы.СтраницаПеречислениеНалога.Видимость = ЭтоПеречислениеНалога;
	КонецЕсли;
	//---АК LAGP
	
	Элементы.СтраницаЗайм.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ВариантРасчетаНДС.Видимость = Ложь;
		Элементы.Группа11.Видимость = Ложь;
		
		//+++АК LAGP 2018.07.16 ИП-00019242 Доступ к прикреплении файлов при виде операции "Перечисление налога"
		Элементы.Группа11.Видимость 	= Истина;
		Элементы.НомерСчета.Видимость 	= Ложь;
		Элементы.ДатаСчета.Видимость 	= Ложь;
		Элементы.Группа21.Видимость 	= Истина;
		//---АК LAGP 
		
		Элементы.ДатаПоступления.Видимость = Ложь;
		Элементы.СчетКонтрагента.Видимость = Истина;
		Элементы.КорпКарта.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ВариантРасчетаНДС.Видимость = Ложь;
		Элементы.Группа11.Видимость = Ложь;
		Элементы.ДатаПоступления.Видимость = Ложь;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту Тогда
			Элементы.СчетКонтрагента.Видимость = Ложь;
			Элементы.КорпКарта.Видимость = Истина;
			
			//+++АК LAGP 2017.12.14 ИП-00017436 
			Если Объект.КорпКарта.Закрыта Тогда
				Сообщить("Используемая корпоративная карта закрыта!");
			КонецЕсли;	
			Если Объект.КорпКарта.ПометкаУдаления Тогда
				Сообщить("Используемая корпоративная карта помечена на удаление!");
			КонецЕсли;	
			//---АК LAGP
			
		иначе
			Элементы.КорпКарта.Видимость = Ложь;
		КонецЕсли;	 
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ВариантРасчетаНДС.Видимость = Ложь;
		Элементы.Группа11.Видимость = Ложь;
		Элементы.ДатаПоступления.Видимость = Ложь;	
		Элементы.СчетКонтрагента.Видимость = Истина;
		//+++АК LAGP 31.01.2018 ИП-00017738 При оплате за создание корп. карты, объект в базе уже создан, для того чтобы он через обработку "платёжный календарь" попал в СубконтоДт3 документа "РасходИзБанка" его надо выбрать в этом документе.
		//Элементы.КорпКарта.Видимость = Ложь;
		Элементы.КорпКарта.Видимость = Истина;
		//---АК LAGP 31.01.2018
	Иначе
		
		//+++АК LAGP 2018.09.28 ИП-00019684 Для контрагентов ИФНС и УФК доступна странци бюджетных платежей
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику Тогда
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Наименование");
				Если Найти(НаименованиеКонтрагента, "ИФНС") > 0 ИЛИ Найти(НаименованиеКонтрагента, "УФК") > 0 Тогда
					Элементы.СтраницаПеречислениеНалога.Видимость = ИСТИНА;		
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		//---АК LAGP 
		
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.ВариантРасчетаНДС.Видимость = Истина;
		Элементы.Группа11.Видимость = Истина;
		Элементы.ДатаПоступления.Видимость = Истина;
		Элементы.СчетКонтрагента.Видимость = Истина;
		Элементы.КорпКарта.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику Тогда
		
		Элементы.ЗаймПериодДействияНачало.ТолькоПросмотр = ЗаймТолькоПросмотр;
		Элементы.ЗаймПериодДействияКонец.ТолькоПросмотр = ЗаймТолькоПросмотр;
		Элементы.ЗаймПроцентПогашенияОтСуммыПоставки.ТолькоПросмотр = ЗаймТолькоПросмотр;
		Элементы.ЗаймСпособПогашения.ТолькоПросмотр = ЗаймТолькоПросмотр;
		Элементы.ЗаймСуммаПогашенияВМесяц.ТолькоПросмотр = ЗаймТолькоПросмотр;
		Элементы.ЗаймТипПогашенияЧастями.ТолькоПросмотр = ЗаймТолькоПросмотр;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ОбработатьВыборКонтрагентаСервер(пКонтрагент)
	
	Если Не ЗначениеЗаполнено(пКонтрагент)
		ИЛИ Объект.Организация.Пустая() Тогда
		Если НЕ Объект.ДоговорКонтрагента.Пустая() Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Возврат;
	КонецЕсли;	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"	, пКонтрагент);
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Если Объект.ДоговорКонтрагента.Пустая() Тогда
		Объект.ДоговорКонтрагента = ДопМодульСервер.ПолучитьОсновнойДоговорКонтрагента(Объект.Организация, пКонтрагент,
			?(Не ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата), Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		КонецЕсли;		
		
		Если Объект.ДоговорКонтрагента.Пустая() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.ДоговорКонтрагента = Выборка.Ссылка;
			КонецЕсли;	
		КонецЕсли;
		
		//+++АК LAGP 2018.05.25 ИП-00018788 Изменить правило заполнения "договора" в Заявке на услуги/материалы.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда	
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
		КонецЕсли;
		//---АК LAGP
		
	Иначе
		Объект.Контрагент 			= Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Сообщить("Запрещено выбирать контрагента, у которого нет договора с организацией """ + Объект.Организация + """");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетов = Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств) Тогда
		Объект.СтатьяДДС = Объект.ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеСтавкиНДС(Номенклатура)
	
	Список = Новый Массив;
	Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		Список.Добавить(Перечисления.СтавкиНДС.БезНДС);
	Иначе
		Если ЗначениеЗаполнено(Номенклатура.СтавкаНДС) Тогда
			Список.Добавить(Номенклатура.СтавкаНДС);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент.СтавкаНДС)
			И Объект.Контрагент.СтавкаНДС <> Номенклатура.СтавкаНДС Тогда
			Список.Добавить(Объект.Контрагент.СтавкаНДС);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции	

Функция МожноУстановитьДатуКакДатуРасхода(ДатаВыполняемойПроверки)
	Если ДопускаетсяЛюбаяДатаПлатежа Тогда
		Возврат Истина;
	КонецЕсли;	
	Если ДеньНедели(ДатаВыполняемойПроверки) = 2
		ИЛИ ДеньНедели(ДатаВыполняемойПроверки) = 4 Тогда
		//Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(ДатаВыполняемойПроверки));
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		//|ИЗ
		//|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		//|ГДЕ
		//|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = &ДатаКалендаря
		//|	И РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
		//			   
		//Результат = Запрос.Выполнить();
		//Возврат НЕ Результат.Пустой();
		ПлатёжныеДни = КэшПлатёжныхДней.НайтиСтроки(Новый Структура("ДатаКалендаря",ДатаВыполняемойПроверки));
		Возврат ПлатёжныеДни.Количество()>0;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьНадписьИтогоПоДокументу()
	
	//
	Если Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда
		
		НадписьИтогоПоДокументу = "Всего по документу " + Формат(Объект.Услуги.Итог("Сумма"), "ЧДЦ=2; ЧРД=-") + ", руб., без НДС";
		
	ИначеЕсли Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда
		
		НадписьИтогоПоДокументу = "Всего по документу " + Формат(Объект.Услуги.Итог("Сумма"), "ЧДЦ=2; ЧРД=-") + ", руб., в т.ч. НДС " +
		Формат(Объект.Услуги.Итог("СуммаНДС"), "ЧДЦ=2; ЧРД=-");
		
	ИначеЕсли Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху") Тогда
		
		НадписьИтогоПоДокументу = "Всего по документу " + Формат(Объект.Услуги.Итог("Сумма") + Объект.Услуги.Итог("СуммаНДС"), "ЧДЦ=2; ЧРД=-") +
		", руб., в т.ч. НДС " + Формат(Объект.Услуги.Итог("СуммаНДС"), "ЧДЦ=2; ЧРД=-");
		
	Иначе	
		
		НадписьИтогоПоДокументу = "";
		
	КонецЕсли;
	
КонецПроцедуры	

//++tuga 13456
Функция ПолучитьВыборкуЦеныВнеДиапазона() Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыУслуги.НомерСтроки КАК НомерСтроки,
	|	ЗаявкаНаУслугиМатериалыУслуги.Номенклатура КАК Номенклатура,
	|	ЗаявкаНаУслугиМатериалыУслуги.Цена КАК Цена
	|ПОМЕСТИТЬ ВТУслуги
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУслуги.Цена,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) - ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеМинус, 0) КАК ЦенаМин,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0) КАК ЦенаМакс,
	|	ВТУслуги.НомерСтроки,
	|	ВТУслуги.Номенклатура
	|ИЗ
	|	ВТУслуги КАК ВТУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|				&Период,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Т.Номенклатура
	|						ИЗ
	|							ВТУслуги КАК Т)
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныПоставщиковСрезПоследних
	|		ПО ВТУслуги.Номенклатура = ЦеныПоставщиковСрезПоследних.Номенклатура
	|ГДЕ
	|	(
	// убрал условие по просьбе ворошилова
	//ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) - ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеМинус, 0) > ВТУслуги.Цена ИЛИ
	|			ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0) < ВТУслуги.Цена
	|				И ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0) > 0)";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции
//--tuga 


Процедура ЗаполнитьВременныеРеквизитыФормыСервер()
	
	ЗаполнитьСписокВыбораУслугиСервер();
	
	Если Объект.Услуги.Количество() = 0
		ИЛИ Объект.Услуги.НайтиСтроки(Новый Структура("ДатаПоступления", Объект.ДатаПоступления)).Количество() = Объект.Услуги.Количество() Тогда
		ПоступлениеНеОднойДатой = Ложь;
	КонецЕсли;
	Если Объект.Услуги.Количество() = 0
		ИЛИ Объект.Услуги.НайтиСтроки(Новый Структура("РольПодтверждения", Объект.РольПодтверждения)).Количество() = Объект.Услуги.Количество() Тогда
		НЕОднаРольПодтверждения = Ложь;
	КонецЕсли;
	
	АкцептованныеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Акцептована", Истина));
	Для Каждого СтрокаТЧ Из АкцептованныеСтроки Цикл
		СтрокаТЧ.АкцептованаСумма = СтрокаТЧ.Сумма;
	КонецЦикла;	
	
	//
	Запрос = Новый Запрос;
	СписокТиповРолей = Новый Массив;
	СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//+++ AK suvv 2018.06.05 ИП-00018376.01
	СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
	//--- AK suvv
	//СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"));
	Запрос.УстановитьПараметр("ТипыРолей", СписокТиповРолей);
	Запрос.УстановитьПараметр("Платёжки", Объект.Оплата.Выгрузить().ВыгрузитьКолонку("РасходИзБанка"));
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	//+++АК SUVV 2018.02.28 ИП-00017941
	Запрос.УстановитьПараметр("ВыбДата", Объект.Дата);
	//---АК SUVV
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектРольСрезПоследних.Объект КАК Точка,
	|	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК Роль,
	|	РолиПользователейСоставРоли.Сотрудник КАК ФизЛицо,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользователиРуководители.Ссылка КАК РуководительПользователя
	|ПОМЕСТИТЬ НазначенноеВРегистре
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			,
	|			Объект ССЫЛКА Справочник.СтруктурныеЕдиницы
	|				И ТипРоли В (&ТипыРолей)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиРуководители
	|				ПО Пользователи.ФизЛицо.Руководитель = ПользователиРуководители.ФизЛицо
	|					И (Пользователи.ФизЛицо.Руководитель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначенноеВРегистре.Точка,
	|	НазначенноеВРегистре.ТипРоли,
	|	НазначенноеВРегистре.Роль,
	|	НазначенноеВРегистре.ФизЛицо,
	|	НазначенноеВРегистре.Пользователь,
	|	НазначенноеВРегистре.РуководительПользователя
	|ИЗ
	|	НазначенноеВРегистре КАК НазначенноеВРегистре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазначенноеВРегистре.Точка,
	|	ТипыРолейПользователя.Ссылка,
	|	РолиПользователейСоставРоли.Ссылка,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	Пользователи.Ссылка,
	|	NULL
	|ИЗ
	|	НазначенноеВРегистре КАК НазначенноеВРегистре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	|		ПО НазначенноеВРегистре.Роль.Родитель = РолиПользователейСоставРоли.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	|		ПО (ТипыРолейПользователя.Код = ""UpravlyayushchiiPoRoznice"")
	|ГДЕ
	|	НазначенноеВРегистре.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	|   ИЛИ НазначенноеВРегистре.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)
	//--- AK suvv
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Руководитель,
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Руководитель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиСПравомАкцептаОплат.Пользователь КАК Акцептант,
	|	ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо КАК ФизЛицо,
	|	ПользователиСПравомАкцептаОплат.Родитель.Пользователь КАК Родитель,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Пользователь КАК Дед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Пользователь КАК Прадед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Пользователь КАК Прапрадед,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Родитель.Пользователь КАК Прапрапрадед
	|ИЗ
	|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	|ГДЕ
	|	ПользователиСПравомАкцептаОплат.Активен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиСПравомАкцептаОплат.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо,
	|	ПользователиСПравомАкцептаОплат.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Пользователь,
	|	ПользователиСПравомАкцептаОплат.Родитель.Родитель.Родитель.Родитель.Родитель.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СтатьяДДС,
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.НеТребоватьЗаполненияСчетовНаОплату,
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.НеКонтролироватьПлатёжныйДень,
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.НеКонтролироватьВремяСоздания
	|ИЗ
	|	РегистрСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы КАК ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы
	|ГДЕ
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.Документ = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИзБанка.Ссылка,
	|	РасходИзБанка.Оплачено,
	|	РасходИзБанка.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Ссылка В(&Платёжки)
	|	И РасходИзБанка.Проведен
	|	И РасходИзБанка.Оплачено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиСПравомАкцептаОплат.ЛимитПоАвансам - ЕСТЬNULL(ВложенныйЗапрос.ВыбраноЛимитаПоАвансамАкцептанта, 0) КАК ОстатокЛимитаПоАвансамАкцептанта
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(АвансыПоАкцептантамОстатки.СуммаОстаток) КАК ВыбраноЛимитаПоАвансамАкцептанта
	|	ИЗ
	|		РегистрНакопления.АвансыПоАкцептантам.Остатки(
	|				,
	|				Акцептант = &ТекущийПользователь
	|					И Заявка <> &Заявка) КАК АвансыПоАкцептантамОстатки) КАК ВложенныйЗапрос,
	|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	|ГДЕ
	|	ПользователиСПравомАкцептаОплат.Пользователь = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоставкаНаТТ.Ссылка,
	|	ДоставкаНаТТ.Дата,
	|	ДоставкаНаТТ.СуммаДокумента
	|ИЗ
	|	Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
	|ГДЕ
	|	ДоставкаНаТТ.Проведен
	|	И ДоставкаНаТТ.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.Дата,
	|	МаршрутныйЛист.Сумма + ВЫБОР
	|		КОГДА МаршрутныйЛист.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	|			ТОГДА МаршрутныйЛист.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Проведен
	|	И МаршрутныйЛист.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщиеТранспортныеРасходы.Ссылка,
	|	ОбщиеТранспортныеРасходы.Дата,
	|	ОбщиеТранспортныеРасходы.Сумма + ВЫБОР
	|		КОГДА ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	|			ТОГДА ОбщиеТранспортныеРасходы.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
	|ГДЕ
	|	ОбщиеТранспортныеРасходы.Проведен
	|	И ОбщиеТранспортныеРасходы.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Проведен
	|	И ПоступлениеДопРасходов.ЗаявкаНаРсходованиеСредств = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//+++АК SUVV 2018.02.28 ИП-00017941
	//|ВЫБРАТЬ
	//|	СоответствияСтатейСчетов.СтатьяДДС,
	//|	СоответствияСтатейСчетов.Счет,
	//|	СоответствияСтатейСчетов.ВидОперацииЗаявки КАК ВидОперации
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетов.СтатьяДДС КАК СтатьяДДС,
	|	СоответствияСтатейСчетов.Счет КАК Счет,
	|	СоответствияСтатейСчетов.ВидОперацииЗаявки КАК ВидОперации
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоответствияСтатейСчетовСрезПоследних.СтатьяДДС КАК СтатьяДДС,
	|		МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	|	ИЗ
	|		РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, ) КАК СоответствияСтатейСчетовСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоответствияСтатейСчетовСрезПоследних.СтатьяДДС) КАК СтатьиИСчетаМаксПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО СтатьиИСчетаМаксПериод.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	|			И СтатьиИСчетаМаксПериод.МаксПериод = СоответствияСтатейСчетов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//---АК SUVV
	|ВЫБРАТЬ
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СтатьяДДС
	|ИЗ   		РегистрСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы КАК ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы
	|ГДЕ
	|	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.НеКонтролироватьЛимитыПоАвансам = ИСТИНА
	
	//+++АК POZM 2018.09.11 ИП-00018684.01 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|		ЕСТЬNULL(ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследнихПоТочкам.СтруктурнаяЕдиница, ЕСТЬNULL(РасходыНаСтруктурныеЕдиницыОбороты.СтруктурнаяЕдиница, ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследних.СтруктурнаяЕдиница)) КАК Точка,
	|		ЕСТЬNULL(ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследнихПоТочкам.ЛимитНаУслуги, ЕСТЬNULL(ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследних.ЛимитНаУслуги, 0)) - СУММА(ЕСТЬNULL(РасходыНаСтруктурныеЕдиницыОбороты.СуммаНаУслугиОборот, 0)) + СУММА(ЕСТЬNULL(РасходыНаСтруктурныеЕдиницы.СуммаНаУслуги, 0)) КАК Остаток
	|	ИЗ
	|		РегистрСведений.ЛимитыРасходовНаСтруктурныеЕдиницы.СрезПоследних(, СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка)) КАК ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследнихПоТочкам
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыНаСтруктурныеЕдиницы.Обороты КАК РасходыНаСтруктурныеЕдиницыОбороты
	|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЛимитыРасходовНаСтруктурныеЕдиницы.СрезПоследних(, СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.Пустаяссылка)) КАК ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследних
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасходыНаСтруктурныеЕдиницы КАК РасходыНаСтруктурныеЕдиницы
	|				ПО РасходыНаСтруктурныеЕдиницыОбороты.СтруктурнаяЕдиница = РасходыНаСтруктурныеЕдиницы.СтруктурнаяЕдиница
	|					И (РасходыНаСтруктурныеЕдиницы.Регистратор = &Заявка)
	|			ПО ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследнихПоТочкам.СтруктурнаяЕдиница = РасходыНаСтруктурныеЕдиницыОбороты.СтруктурнаяЕдиница
    |
	|	СГРУППИРОВАТЬ ПО
	|		ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследнихПоТочкам.ЛимитНаУслуги,
	|		ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследних.ЛимитНаУслуги,
	|		ЕСТЬNULL(ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследнихПоТочкам.СтруктурнаяЕдиница, ЕСТЬNULL(РасходыНаСтруктурныеЕдиницыОбороты.СтруктурнаяЕдиница, ЛимитыРасходовНаСтруктурныеЕдиницыСрезПоследних.СтруктурнаяЕдиница))";
	//---АК POZM 
	
	Результат = Запрос.ВыполнитьПакет();
	Таб = Результат[1].Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшПодтверждающих");
	///
	Таб = Результат[2].Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшРуководителей");
	
	///
	Таб = Результат[3].Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшАкцептантов");
	
	Элементы.Акцептант.СписокВыбора.ЗагрузитьЗначения(Таб.ВыгрузитьКолонку("Акцептант"));
	Элементы.УслугиАкцептант.СписокВыбора.ЗагрузитьЗначения(Таб.ВыгрузитьКолонку("Акцептант"));
	
	
	
	Акцептанты = КэшАкцептантов.НайтиСтроки(Новый Структура("Акцептант",ПараметрыСеанса.ТекущийПользователь));
	Если Акцептанты.Количество()>0 Тогда
		АкцептированиеДоступно = Истина;
	КонецЕсли;	
	
	ЗаполнитьакцептантовИПодтверждающих();
	
	Таб = Результат[4].Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшИсключений");
	ЗаполнитьДопускаетсяЛюбаяДатаПлатежа();
	
	///
	Таб = Результат[5].Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшПлатёжныхДней");
	
	РасширенныеПрава = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РасширенныеПраваПоЗаявкамНаУслугиМатериалы, Ложь);
	УправлениеИсключениямиКонтроляСчетов = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.УправлениеИсключениямиКонтроляСчетов, Ложь);
	МожноРедактироватьДатуОплаты = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеДатыОплатыВАкцептованнойЗаявке, Ложь);
	///
	ТабОплат = Результат[6].Выгрузить();
	
	ВсеСтрокиОплачены = Ложь;
	ПолностьюОплачена = (ЗначениеЗаполнено(Объект.Ссылка) и Объект.СуммаДокумента>0) И (Объект.СуммаДокумента = Объект.Оплата.Итог("СуммаОплаты") И  Объект.СуммаДокумента = ТабОплат.Итог("СуммаДокумента"));
	Для Каждого Стр из объект.Оплата Цикл
		Стр.СтрокаОплачена=Стр.РасходИзБанка.Проведен И Стр.РасходИзБанка.Оплачено; 
	КонецЦикла;
	НеПодтвержденныеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Подтверждено",Ложь));
	Подтверждена = НеПодтвержденныеСтроки.Количество()=0;
	
	//ОстатокЛимитаПоАвансамАкцептанта = 0;
	//Выборка = Результат[7].Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ОстатокЛимитаПоАвансамАкцептанта = Выборка.ОстатокЛимитаПоАвансамАкцептанта;
	//КонецЕсли;
	
	СуммаПоступленийПоДокументу = 0;
	Выборка = Результат[8].Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаПоступленийПоДокументу = СуммаПоступленийПоДокументу + Выборка.СуммаДокумента;
	КонецЦикла;
	
	Таб = Результат[9].Выгрузить();
	ЗначениеВРеквизитФормы(Таб, "КэшСтатьяДДСВидОперации");
	
	СтатьиДДСБезКонтроляЛимитовПоАвансам.ЗагрузитьЗначения(Результат[10].Выгрузить().ВыгрузитьКолонку("СтатьяДДС"));
	
	////////////////////////// реквизиты для перечисления налогов
	ДокРасходБанка = Документы.РасходИзБанка.СоздатьДокумент();
	СписокВыбора = ДокРасходБанка.ПолучитьСписокСтатусовОтправителя();
	Для Каждого Значение Из СписокВыбора Цикл
		Эл = Элементы.СтатусСоставителя.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(Эл,Значение);
	КонецЦикла;	
	СписокВыбора = ДокРасходБанка.ПолучитьСписокОснованийНалоговогоПлатежа();
	Для Каждого Значение Из СписокВыбора Цикл
		Эл = Элементы.ПоказательОснования.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(Эл,Значение);
	КонецЦикла;	
	
	
	Элементы.ПериодичностьУплаты.СписокВыбора.Добавить("МС", "МС - месячный платеж");
	Элементы.ПериодичностьУплаты.СписокВыбора.Добавить("КВ", "КВ - квартальный платеж");
	Элементы.ПериодичностьУплаты.СписокВыбора.Добавить("ПЛ", "ПЛ - полугодовой платеж");
	Элементы.ПериодичностьУплаты.СписокВыбора.Добавить("ГД", "ГД - годовой платеж"); 
	Элементы.ПериодичностьУплаты.СписокВыбора.Добавить("-",  "Платеж по конкретной дате");
	Элементы.ПериодичностьУплаты.СписокВыбора.Добавить("0",  "0 - значение не указывается");
	
	СписокВыбора = ДокРасходБанка.ПолучитьСписокПоказателейТипаНалоговогоПлатежа();
	Для Каждого Значение Из СписокВыбора Цикл
		Эл = Элементы.ПоказательТипа.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(Эл,Значение);
	КонецЦикла;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
		УстановитьРеквизитыПоказателяПериода();
		УстановитьВидимостьРеквизитовПлатежаВБюджет();
	КонецЕсли;
	
	ЗаймТолькоПросмотр = Ложь;
	Если Объект.ПогашениеЗайма.Количество() >0 Тогда
		Если Объект.ПогашениеЗайма.НайтиСтроки(Новый Структура("Операция", Документы.КорректировкаВзаиморасчетов.ПустаяСсылка())).Количество() <> Объект.ПогашениеЗайма.Количество() Тогда
			ЗаймТолькоПросмотр = Истина;// Уже начали оформлять возврат займа
		КонецЕсли;
	КонецЕсли;
	
	//+++АК POZM 2018.09.11 ИП-00018684.01 
	Таб = Результат[11].Выгрузить();
	
	ЗначениеВРеквизитФормы(Таб, "ОстаткиЛимитовТочек");
	
	ПравоПревышенияЛимитаПоТТ = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПревышениеЛимитовПоТТ, Ложь);
	
	УправлениеРазвития = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12");
	//---АК POZM 
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьАкцептантовИПодтверждающих()
	///
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Док = РеквизитФормыВЗначение("Объект");
		Объект.ЭтоЗаявкаПоАренде = Док.ЭтоЗаявкаПоАренде();
		Если Объект.ЭтоЗаявкаПоАренде Тогда
			Если Не ЗначениеЗаполнено(Объект.Акцептант) Тогда
				Андросова = ПолучитьПользователяПоНаименованию("Андросова Ирина");
				Объект.Акцептант = Андросова;// пока так, если что - разовьём тему
			КонецЕсли;
			СтрокиБезПодтверждающего=Объект.Услуги.НайтиСтроки(Новый Структура("Подтверждающий",Справочники.Пользователи.ПустаяСсылка()));
			Для каждого Стр Из СтрокиБезПодтверждающего Цикл
				Стр.Подтверждающий = Андросова;
			КонецЦикла;	
		КонецЕсли	
	КонецЕсли;
	
	///
	
КонецПроцедуры	
&НаСервере
Процедура ЗаполнитьДопускаетсяЛюбаяДатаПлатежа()
	Если ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		СтатьиСИсключениями = КэшИсключений.НайтиСтроки(Новый Структура("СтатьяДДС,НеКонтролироватьПлатёжныйДень",Объект.СтатьяДДС,Истина));
		Если СтатьиСИсключениями.Количество()>0 Тогда
			ДопускаетсяЛюбаяДатаПлатежа = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	ДопускаетсяЛюбаяДатаПлатежа = Ложь;
КонецПроцедуры	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Заявка на услуги/материалы");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = ПолучитьТекущегоПользователя();
	КонецЕсли;
	
	//17100 koro 30.10.17
	ОбновитьОтветственного();
	
	ЦФОПользователя = ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(Объект.Дата, Объект.Ответственный);
	Элементы.ЦФО.СписокВыбора.ЗагрузитьЗначения(ЦФОПользователя.ВыгрузитьЗначения());
	Если Объект.ЦФО.Пустая() Тогда
		Если Элементы.ЦФО.СписокВыбора.Количество() = 1 Тогда
			Объект.ЦФО = Элементы.ЦФО.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьВременныеРеквизитыФормыСервер();
	
	//+++АК POZM 2018.03.27 ИП-00018108 
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Акцептант) Тогда
		ЗаполнитьАкцептантаПоОтветственному();
	КонецЕсли;	
	//---АК POZM 
		
КонецПроцедуры

//+++АК POZM 2018.03.27 ИП-00018108 
&НаСервере
Процедура ЗаполнитьАкцептантаПоОтветственному()
	Док = РеквизитФормыВЗначение("Объект");
	Док.ЗаполнитьАкцептантаПоОтветственному();
КонецПроцедуры	
//---АК POZM 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоступлениеОднойДатойПриИзменении(Неопределено);
	
	//Элементы.НачалоПериодаАренды.ТолькоПросмотр = (ЗначениеЗаполнено(Объект.ДокументОснование)
	//												И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.НачислениеАренднойПлатыОтАрендодателей"));
	УстановитьВидимостьРеквизитовПоВидуОперации();
	//Если ЗначениеЗаполнено(Объект.ДокументОснование)
	//		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.НачислениеАренднойПлатыОтАрендодателей") Тогда
	//	Элементы.НачалоПериодаАренды.Видимость = Истина;
	//Иначе	
	//	Элементы.НачалоПериодаАренды.Видимость = Ложь;
	//КонецЕсли;
	
	ОбновитьНадписьИтогоПоДокументу();
	//Элементы.ФормаПросмотрСчетаКомплектацииУслуг.Видимость = (ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") И ЗначениеЗаполнено(Объект.ДокументОснование));
	Если ПолностьюОплачена И Подтверждена Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		//+++АК POZM 2018.08.09 ИП-00019432 
		Этаформа.Элементы.УслугиЗагрузитьУслуги.Доступность = Ложь;
		//---АК POZM 
		Сообщить("Заявка полностью оплачена, доступен только просмотр");
	ИначеЕсли ПолностьюОплачена Тогда
		ЭтаФорма.Элементы.Оплата.Доступность = Ложь;
		//ЭтаФорма.Элементы.Группа1.Доступность = Ложь;
	КонецЕсли;	
	
	//+++ АК pozm 09.10.2017 ИП-00015260
	УстановитьВидимостьДоступностьПоАренде(Истина);	//+++АК LAGP 2018.05.28 ИП-00018788 Изменить правило заполнения "договора" в Заявке на услуги/материалы. Добавлена переменная (ПриОткрытии=Истина)
	//--- АК pozm 09.10.2017 ИП-00015260
	
	ЗаймСпособПогашенияПриИзменении(Неопределено,Ложь);
	ЗаймТипПогашенияЧастямиПриИзменении(Неопределено,Ложь);
	
	//+++АК LAGP 2018.02.15 ИП-00017849
	Элементы.ИНННадпись.Заголовок = "ИНН: " + ПолучитьИННКонтрагента(Объект.Контрагент);
	//---АК LAGP
	
	//+++АК SUVV 2018.02.20 ИП-00017907
	Если не АкцептированиеДоступно Тогда 
		ЭтаФорма.Элементы.УслугиКомментарийАкцептанта.Доступность = Ложь;
	КонецЕсли;
	//---АК SUVV
	
	//+++ AK suvv 21.05.2017 ИП-00018555
	ИзменитьВидимостьСуммыРемонта();
	////+++AK GREK 20.02.2018 ИП-00017689.01   
	//Если Объект.СтатьяДДС.Код = "230116" Тогда
	//	Сумма = ПолучитьОбщуюСуммуРемонта();
	//	Если Сумма > 0 Тогда
	//		СуммаРемонта = "Общая сумма ремонта: " + Сумма;
	//		Элементы.СуммаРемонта.Видимость = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	////---AK
	//--- AK suvv
	//+++АК sils 08.06.2018 ИП-00018876
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщуюСуммуРемонта()
	Запрос = новый Запрос;
	//+++ AK suvv 21.05.2017 ИП-00018555
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница.ОбщаяСтоимость КАК ОбщаяСтоимость
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница,
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница.ОбщаяСтоимость";	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаявкаНаУслугиМатериалы.Ссылка,
	//               |	ЗаявкаНаУслугиМатериалы.СтатьяДДС,
	//               |	ЗаявкаНаУслугиМатериалы.ТорговыеТочкиСписок,
	//               |	СтруктурныеЕдиницы.Ссылка КАК ТТ,
	//               |	СтруктурныеЕдиницы.ОбщаяСтоимость КАК ОбщаяСтоимость
	//               |ИЗ
	//               |	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	//               |		ПО (ЗаявкаНаУслугиМатериалы.ТорговыеТочкиСписок ПОДОБНО ""%"" + СтруктурныеЕдиницы.Наименование + ""%"")
	//               |ГДЕ
	//               |	ЗаявкаНаУслугиМатериалы.Ссылка = &Ссылка";
	//--- AK suvv
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Возврат Рез.Выгрузить().Итог("ОбщаяСтоимость");
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьПоАренде(ПриОткрытии)
	Элементы.СтраницаПервичныеДокументы.Видимость = Объект.ЭтоЗаявкаПоАренде;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПеременнойЧастиАрендыАрендатору ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда
		Элементы.СтраницаПервичныеДокументы.ТолькоПросмотр = НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеВложенийПервичныхДокументовЗаявкиАрендаПеременнаяЧасть, Ложь);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПостояннойЧастиАрендыАрендатору ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю Тогда
		Элементы.СтраницаПервичныеДокументы.ТолькоПросмотр = НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеВложенийПервичныхДокументовЗаявкиАрендаПостояннаяЧасть, Ложь);
	КонецЕсли;	
	Если НЕ Элементы.СтраницаПервичныеДокументы.ТолькоПросмотр  И ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ТолькоПросмотр = Ложь;
		Элементы.СтраницаЗаявки.ТолькоПросмотр = Истина;
		Элементы.Оплата.ТолькоПросмотр = Истина;
		Элементы.Группа1.ТолькоПросмотр = Истина;
		Элементы.ГруппаКонтрагент.ТолькоПросмотр = Истина;
		Элементы.Группа11.ТолькоПросмотр = Истина;
		Элементы.Группа14.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//+++АК LAGP 2018.05.28 ИП-00018788 Изменить правило заполнения "договора" в Заявке на услуги/материалы.
	Если НЕ ПриОткрытии Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда	
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2018.10.21 ИП-00018521.01 Добавлена колонка "Сумма всего с НДФЛ" для дальнейшего расчёта в отчёте "Реестр налоговый агент по уплате НДФЛ аренда"
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Элементы.УслугиСуммаВсегоСНДФЛ.Видимость = ФизЛицоАренда(Объект.Контрагент);
	КонецЕсли;
	//---АК LAGP
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+++АК VERT 2018.03.19 ИП-00018128
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РезультатПроверки = ПроверитьРеквизитыНаСервере();
		НаличиеОшибок = РезультатПроверки.ЕстьОшибки И (РезультатПроверки.СтруктураОшибок.ОшибкаСтопОплата ИЛИ РезультатПроверки.СтруктураОшибок.ОшибкаСрокДоговора);
		// С данной ролью можно проводить с ошибкой
		Отказ = НЕ РезультатПроверки.ИсключениеИзПравил И НаличиеОшибок И НЕ ДопМодульСервер.ПолучитьЗначениеПраваПользователя("ПроведениеЗаявкиНаУслугиМатериалы", Ложь);
		Если Отказ Тогда 
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОткрытьФормуПроверкиРеквизитов", ЭтаФорма, Новый Структура("РезультатПроверки", РезультатПроверки)), "Документ не проведен.");
			Возврат;
		Иначе
			ПараметрыЗаписи.Вставить("РезультатПроверки", РезультатПроверки);
		КонецЕсли;
		
	КонецЕсли;
	//---АК VERT 2018.03.19 ИП-00018128
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		Авансы = Объект.Оплата.НайтиСтроки(Новый Структура("Аванс",Истина));
		Если Авансы.Количество()>0 Тогда
			Отказ = Истина;
			Сообщить("Не заполнена плановая дата получения. Для указания аванса это обязательно!");
		КонецЕсли;	
	КонецЕсли;	
	
	//+++АК POZM 2018.06.22 ИП-00018896
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Отказ = Истина;
		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = "Не заполнен вид операции";
		СообщениеПользователю.Сообщить();
	КонецЕсли;	
	//---АК POZM 
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЗначениеЗаполнено(Объект.Акцептант) Тогда
			СтрокиБезАкцептанта = Объект.Услуги.НайтиСтроки(Новый Структура("Акцептант",ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")));
			Для Каждого Стр Из СтрокиБезАкцептанта Цикл
				Сообщить("В строке "+Стр.НомерСтроки+" не заполнен акцептант!");
				Отказ = Истина;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.ЭтоЗаявкаПоАренде Тогда
			СтрокиБезПодтверждающего = Объект.Услуги.НайтиСтроки(Новый Структура("Подтверждающий",ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")));
			Для Каждого Стр Из СтрокиБезПодтверждающего Цикл
				Сообщить("В строке "+Стр.НомерСтроки+" не заполнен подтверждающий!");
				Отказ = Истина;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты") Тогда
		Если Не ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			Сообщить("Для корпоративных карт обязательно указание физлица!");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику") Тогда
		Если Не ЗначениеЗаполнено(Объект.ЗаймПериодДействияКонец) ИЛИ Не ЗначениеЗаполнено(Объект.ЗаймПериодДействияНачало) Или Объект.ЗаймПериодДействияКонец<Объект.ЗаймПериодДействияНачало Тогда
			Сообщить("Для операции выдачи займа, необходимо корректно указать период займа");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) И ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		СтрокиНастроекДляСтатьи = КэшСтатьяДДСВидОперации.НайтиСтроки(Новый Структура("ВидОперации,СтатьяДДС",Объект.ВидОперации,объект.СтатьяДДС));
		Если СтрокиНастроекДляСтатьи.Количество() = 0 Тогда // такого сочетания нет в настройках
			СтрокиНастроекДляСтатьи = КэшСтатьяДДСВидОперации.НайтиСтроки(Новый Структура("ВидОперации",Объект.ВидОперации));
			Для Каждого СтрокаНастроек Из СтрокиНастроекДляСтатьи Цикл
				Если ЗначениеЗаполнено(СтрокаНастроек.СтатьяДДС) Тогда
					Сообщить("Для указанного вида операции должна быть другая статья ДДС");
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			СтрокиНастроекДляСтатьи = КэшСтатьяДДСВидОперации.НайтиСтроки(Новый Структура("СтатьяДДС",Объект.СтатьяДДС));
			Для Каждого СтрокаНастроек Из СтрокиНастроекДляСтатьи Цикл
				Если ЗначениеЗаполнено(СтрокаНастроек.ВидОперации) Тогда
					Сообщить("Для указанной статьи ДДС должен быть другой вид операции");
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.СчетНаОплату) И Не Объект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Парам = Новый Структура;
		//Парам.Вставить("Ключ",Объект.Ссылка);
		Парам.Вставить("Контрагент",Объект.Контрагент);
		Парам.Вставить("НомерСчета",Объект.НомерСчета);
		Парам.Вставить("СчетНаОплату",Объект.СчетНаОплату);
		Парам.Вставить("ДатаСчета",Объект.ДатаСчета);
		Парам.Вставить("СчетКонтрагента",Объект.СчетКонтрагента);
		РезультатПодтверждения = ОткрытьФормуМодально("Документ.ЗаявкаНаУслугиМатериалы.Форма.ФормаПодтвержденияСкана",Парам,);
		Если РезультатПодтверждения = Истина Тогда
			Объект.СканПодтвердил = ПараметрыСеанса.ТекущийПользователь;
			Объект.СканПодтвердилДата = ТекущаяДата();
		КонецЕсли;	
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетНаОплату)	Тогда
		Объект.СканПодтвердил = Неопределено;
		Объект.СканПодтвердилДата = Дата(1,1,1);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.СчетНаОплату) И НЕ ЗначениеЗаполнено(Объект.СканПодтвердил) И НЕ Объект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Сообщить("Необходимо подтверждение скана счета");
		Отказ = Истина;
	КонецЕсли;	
	
	//+++ AK suvv 05.04.2018 ИП-00018071
	ПараметрыЗаписи.Вставить("ФормироватьЗаявкуПоОплатеНДФЛ", Ложь);
	
	Если не Отказ и не Объект.Проведен и ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 	
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету") и
			Объект.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента Тогда 	
			
			Режим = РежимДиалогаВопрос.ДаНет; 
			Ответ = Вопрос("Сформировать платеж по оплате НДФЛ?", Режим, 0); 
			
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				СуммаНДФЛ = 0;
				Если ВвестиЧисло(СуммаНДФЛ, "Введите сумму для расчета НДФЛ", 10, 2) Тогда
					СуммаНДФЛ = Окр(СуммаНДФЛ/0.87 - СуммаНДФЛ); 
				КонецЕсли;
				ПараметрыЗаписи.Вставить("ФормироватьЗаявкуПоОплатеНДФЛ", Истина);
				ПараметрыЗаписи.Вставить("СуммаНДФЛ", СуммаНДФЛ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//--- AK suvv
	
	//+++АК LAGP 2018.05.21 ИП-00018696 Помощник заполнения назначения платежа.
	ДопускаетсяНеУказыватьСчет = Ложь;			
	Если ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		СтатьиСИсключениями = КэшИсключений.НайтиСтроки(Новый Структура("СтатьяДДС,НеТребоватьЗаполненияСчетовНаОплату",Объект.СтатьяДДС,Истина));
		Если СтатьиСИсключениями.Количество()>0 Тогда
			ДопускаетсяНеУказыватьСчет = Истина;
		КонецЕсли;	
	КонецЕсли;
			
	Если НЕ ДопускаетсяНеУказыватьСчет Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НомерСчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаСчета) Тогда
			Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, ПараметрыЗаписи);
			ПоказатьВопрос(Оповещение, "Не заполнены дата или номер счета.", РежимДиалогаВопрос.ОК, 10);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2018.05.28 ИП-00018788 Нельзя проводить аренду с незаполненным документом.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету") ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю") Тогда
			Сообщить("Не заполнен договор контрагента. Для видов операции ""Оплата переменной части аренды арендодателю"" и ""Оплата переменной части аренды арендодателю по счету"" это обязательное поле!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	//---АК LAGP	
	
	//+++АК LAGP 2018.05.25 ИП-00018696 Просьба Павла Жмако.
	ЕстьНоменклатураПрочее = ПроверитьНаПрочее();
	Если ЕстьНоменклатураПрочее Тогда
		Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, Неопределено);
		ПоказатьВопрос(Оповещение, "Исправьте наименование номенклатуры. ""Прочее"" не должно быть!", РежимДиалогаВопрос.ОК, 10);
		Отказ = Истина;
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.07.18 ИП-00019260 Проверка на пустое назначение
	Если Объект.Оплата.Количество() > 0 Тогда
		ЕстьПустоеНазначение = Объект.Оплата.НайтиСтроки(Новый Структура("НазначениеПлатежа", ""));
		Если ЕстьПустоеНазначение.Количество() > 0 Тогда		
			Сообщить("Есть пустые назначения на вкладке ""Оплаты""! Документ не записан.");
			Отказ = Истина;
		КонецЕсли;	
		
		//+++АК LAGP 2018.09.14 ИП-00019260 Проверка частично заполненных назначений, т.е. где есть только маска.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику И НЕ Отказ Тогда
			Для каждого СтрокаОплат Из Объект.Оплата Цикл
				ПроверяемоеНазначение = НРег(СтрЗаменить(СтрокаОплат.НазначениеПлатежа, Символы.ПС, ""));
				НадписьОплатаПоСчету = Найти(ПроверяемоеНазначение, "оплата по счету");
				Если НадписьОплатаПоСчету > 0 Тогда
					НадписьОт = Найти(ПроверяемоеНазначение, " от ");	
					Если НадписьОт > 0 Тогда
						НадписьОт = НадписьОт + 4 + 10; //10 символов даты, 4 символа " от "
						НадписьСумма = Найти(ПроверяемоеНазначение, "сумма");	
						Если НадписьСумма >= НадписьОт Тогда
							КоличествоСимволовОписанияТовара = НадписьСумма - НадписьОт;
							Если КоличествоСимволовОписанияТовара < 8 Тогда
								Сообщить("Не заполнено назначение в одной из строк во вкладке ""Оплаты""! Документ не записан.");
								Отказ = Истина;		
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		//---АК LAGP
		
	КонецЕсли;	
	//---АК LAGP
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПроверкиРеквизитов(ДополнительныеПараметры) Экспорт
	
	РезультатПроверки = ДополнительныеПараметры.РезультатПроверки;
	ОткрытьФорму("ОбщаяФорма.ФормаПроверкиРеквизитов", РезультатПроверки);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		Сообщить("Не заполнена статья ДДС!");
		Отказ = Истина;
	КонецЕсли;	
	
	Если НЕ Объект.ЭтоЗаявкаПоАренде Тогда
		Если НЕ 
			(Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога ИЛИ 
			Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы ИЛИ
			Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту ИЛИ
			Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты) Тогда
			
			ДопускаетсяНеУказыватьСчет = Ложь;
			
			Если ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
				СтатьиСИсключениями = КэшИсключений.НайтиСтроки(Новый Структура("СтатьяДДС,НеТребоватьЗаполненияСчетовНаОплату",Объект.СтатьяДДС,Истина));
				Если СтатьиСИсключениями.Количество()>0 Тогда
					ДопускаетсяНеУказыватьСчет = Истина;
					Возврат;
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ДопускаетсяНеУказыватьСчет Тогда
				
				Если Не ЗначениеЗаполнено(Объект.НомерСчета) Тогда
					Сообщить("Не заполнен номер счета!");
					Отказ = Истина;
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Объект.ДатаСчета) Тогда
					Сообщить("Не заполнена дата счета!");
					Отказ = Истина;
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Объект.СчетНаОплату) Тогда
					Сообщить("Не вложен скан счета!");
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.НачалоПериодаАренды) Тогда
			Сообщить("Не заполнен период аренды!");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") Тогда
		
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УслугиБезНоменклатуры = Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура",Справочники.Номенклатура.ПустаяСсылка()));
		Для Каждого Стр Из УслугиБезНоменклатуры Цикл
			Отказ = Истина;
			Сообщить("В строке "+Стр.НомерСтроки+" не заполнена номенклатура!");
		КонецЦикла;	
		
	КонецЕсли;	
	
	// Процедура контроля всего в одном пакете запросов
	ПриЗаписиДокументаКонтрольНаСервере(ПараметрыЗаписи,ТекущийОбъект,Отказ);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//АК++ tuga 22-9-16 #13456
		Выборка = ПолучитьВыборкуЦеныВнеДиапазона();
		
		Если Выборка.Количество() > 0 Тогда
			Отказ = Истина;
			Пока Выборка.Следующий() Цикл
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Поле	= "Услуги[" + (Выборка.НомерСтроки - 1) + "].Цена";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Текст = "В строке " + Выборка.НомерСтроки + " цена " + Формат(Выборка.Цена, "ЧДЦ=2") +
				" не соответствует установленному диапазону [" + Формат(Выборка.ЦенаМин, "ЧДЦ=2") + ";" +
				Формат(Выборка.ЦенаМакс, "ЧДЦ=2") + "]";
				Сообщение.Сообщить();
			КонецЦикла;
			Сообщить("Документ не проведен.");
			Возврат;
		КонецЕсли;
		//АК--
		ОплатыБезДаты = Объект.Оплата.НайтиСтроки(Новый Структура("ДатаПлатежа",Дата(1,1,1)));
		Для Каждого Стр Из ОплатыБезДаты Цикл
			Отказ = Истина;
			Сообщить("В строке "+Стр.НомерСтроки+" не заполнена дата платежа!");
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.СчетУчетаРасчетов.Код = "60.7" Тогда
		Отказ = Истина;
		Сообщить("Счет 60.7 запрещено использовать, выберите другой счет");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиДокументаКонтрольНаСервере(ПараметрыЗаписи,ТекущийОбъект,Отказ)
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалы.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалы.Ссылка <> &СсылкаНаЭтуЗаявку
	|	И ЗаявкаНаУслугиМатериалы.НомерСчета = &НомерСчета
	|	И ЗаявкаНаУслугиМатериалы.Проведен
	|	И ЗаявкаНаУслугиМатериалы.ДатаСчета = &ДатаСчета
	|	И ЗаявкаНаУслугиМатериалы.Контрагент = &Контрагент
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ
	|					ИСТИНА КАК НеКонтролироватьУникальность
	|				ИЗ
	|					РегистрСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы КАК ИсключенияКонтроляУникальностиСчетов
	|				ГДЕ
	|					ИсключенияКонтроляУникальностиСчетов.НеКонтролироватьУникальностьСчетовНаОплату
	|					И (ИсключенияКонтроляУникальностиСчетов.Документ = &СсылкаНаЭтуЗаявку
	|							И &СсылкаНаЭтуЗаявку <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|						ИЛИ ИсключенияКонтроляУникальностиСчетов.СтатьяДДС = &СтатьяДДС))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СсылкаНаЭтуЗаявку",ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерСчета",Объект.НомерСчета);
	Запрос.УстановитьПараметр("ДатаСчета",Объект.ДатаСчета);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("СтатьяДДС",Объект.СтатьяДДС);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщить("Внимание! Уже есть заявка с аналогичным счетом по данному контрагенту! "+Выборка.Ссылка);
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы ИЛИ
		ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты")  Тогда
		Возврат;
	КонецЕсли;	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//+++АК SHEP 2017.11.21 ИП-00017244
		ФормаКонтрольОткрывать = Истина;
		Если ПараметрыЗаписи.Свойство("Акцептование") Тогда
			// тут так принято (ПолучитьПользователяПоНаименованию)
			ФормаКонтрольОткрывать = (ПолучитьТекущегоПользователя() <> ПолучитьПользователяПоНаименованию("Курвяков Евгений"));
		КонецЕсли;
		//---АК SHEP 2017.11.21
		
		//+++АК SHEP 2017.11.21 ИП-00017244: добавил условие (ФормаКонтрольОткрывать)
		Если ФормаКонтрольОткрывать Тогда
			ФормаКонтроль = ПолучитьФорму("ОбщаяФорма.АК_ФормаКонтрольДЗ", Новый Структура("РежимПроведения", Истина));
			Если ФормаКонтроль.ПревышенЛимит(Объект.Ссылка) Тогда
				ФормаКонтроль.Открыть();
			КонецЕсли;
		КонецЕсли;
		
		//+++06.12.17 17417 koro Проверка реквизитов
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			//РезультатПроверки = ПроверитьРеквизитыНаСервере();	
			Если ПараметрыЗаписи.РезультатПроверки.ЕстьОшибки Тогда 
				ОткрытьФорму("ОбщаяФорма.ФормаПроверкиРеквизитов", ПараметрыЗаписи.РезультатПроверки);	
			 КонецЕсли;	
		КонецЕсли;	
		//---koro
		
	КонецЕсли;
	
	//+++ AK suvv 04.04.2018 ИП-00018071
	Если ПараметрыЗаписи.ФормироватьЗаявкуПоОплатеНДФЛ Тогда
		ДокПоОплатеНДФЛ = СформироватьПлатежПоОплатеНДФЛ(ПараметрыЗаписи.СуммаНДФЛ);
		Если не ДокПоОплатеНДФЛ.Проведен Тогда 
			//+++ AK suvv 20.04.2018 ИП-00018071
			//ДокПоОплатеНДФЛ.ПолучитьФорму("ФормаДокумента").Открыть();
			Форма = ПолучитьФорму("Документ.ЗаявкаНаУслугиМатериалы.ФормаОбъекта");
			ДанныеФормы = Форма.Объект;
			ЗаполнитьДокументНаСервере(ДанныеФормы, ДокПоОплатеНДФЛ);
			КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
			Форма.Открыть();
			//--- AK suvv
		КонецЕсли;
	КонецЕсли;
	//--- AK suvv
	
КонецПроцедуры

//+++ AK suvv 20.04.2018 ИП-00018071
&НаСервереБезКонтекста
Процедура ЗаполнитьДокументНаСервере(ДанныеФормы, ДокПоОплатеНДФЛ)
	
	ЗначениеВДанныеФормы(ДокПоОплатеНДФЛ,ДанныеФормы);
	
КонецПроцедуры
//--- AK suvv


Процедура ОрганизацияПриИзмененииСервер()
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ДлинаПрефикса = СтрДлина(Объект.Организация.Префикс);
		Если ДлинаПрефикса = 0
			ИЛИ Лев(Объект.Номер, ДлинаПрефикса) <> Объект.Организация.Префикс Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ДоговорКонтрагента.Организация = Объект.Организация Тогда
		Объект.ДоговорКонтрагента = Неопределено;
		ОбработатьВыборКонтрагентаСервер(Объект.Контрагент);	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер()
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы Тогда
		НазначениеПлатежа = "Оплата на командировочные расходы ("+Объект.Контрагент+")";
		Если Объект.Оплата.Количество()>0 Тогда
			Объект.Оплата[0].НазначениеПлатежа = НазначениеПлатежа;
		Иначе
			НС = Объект.Оплата.Добавить();
			НС.НазначениеПлатежа = НазначениеПлатежа;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту Тогда
		
		
		ТекстЗапроса="ВЫБРАТЬ
		|	КорпоративныеБанковскиеКарты.Ссылка
		|ИЗ
		|	Справочник.КорпоративныеБанковскиеКарты КАК КорпоративныеБанковскиеКарты
		|ГДЕ
		|	КорпоративныеБанковскиеКарты.ФизЛицо = &ФизЛицо
		|	И КорпоративныеБанковскиеКарты.Организация = &Организация";
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Запрос.УстановитьПараметр("ФизЛицо",Объект.Контрагент);
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.КорпКарта = Выборка.Ссылка;
		КонецЕсли;	
		НазначениеПлатежа = "Пополнение бизнес-карты сотрудника ("+Объект.КорпКарта+")";
		Если Объект.Оплата.Количество()>0 Тогда
			Объект.Оплата[0].НазначениеПлатежа = НазначениеПлатежа;
		Иначе
			НС = Объект.Оплата.Добавить();
			НС.НазначениеПлатежа = НазначениеПлатежа;
		КонецЕсли;	
		//+++АК bara 10.11.2017  17197
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницыФизлицСрезПоследних.Подразделение
		|ИЗ
		|	РегистрСведений.СтруктурныеЕдиницыФизлиц.СрезПоследних(&ДатаДок, ФизЛицо = &ФизЛицо) КАК СтруктурныеЕдиницыФизлицСрезПоследних";
		
		Запрос.УстановитьПараметр("ФизЛицо", Объект.Контрагент);
		Если ЗначениеЗаполнено(Объект.Дата) Тогда 			
			Запрос.УстановитьПараметр("ДатаДок", Объект.Дата);
		иначе
			Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если  Выборка.Следующий() Тогда 
			Объект.ЦФО = Выборка.Подразделение;	
		КонецЕсли;;		
		//---АК bara 10.11.2017  17197
		
	//+++АК LAGP 31.01.2018 ИП-00017738 При оплате за создание корп. карты, объект в базе уже создан, для того чтобы он через обработку "платёжный календарь" попал в СубконтоДт3 документа "РасходИзБанка" его надо выбрать в этом документе.
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты Тогда	
		ТекстЗапроса="ВЫБРАТЬ
		|	КорпоративныеБанковскиеКарты.Ссылка
		|ИЗ
		|	Справочник.КорпоративныеБанковскиеКарты КАК КорпоративныеБанковскиеКарты
		|ГДЕ
		|	КорпоративныеБанковскиеКарты.ФизЛицо = &ФизЛицо
		|	И КорпоративныеБанковскиеКарты.Организация = &Организация";
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Запрос.УстановитьПараметр("ФизЛицо",Объект.Контрагент);
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.КорпКарта = Выборка.Ссылка;
		КонецЕсли;
	//---АК LAGP 
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.СчетКонтрагента = ?(ЗначениеЗаполнено(Объект.Контрагент.ОсновнойБанковскийСчет)
		И Объект.Контрагент.ОсновнойБанковскийСчет.Владелец = Объект.Контрагент,
		Объект.Контрагент.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
	Иначе
		Объект.СчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент)<>Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;	
	//+++АК POZM 2018.01.11 ИП-00017514 
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда
	//---АК POZM 	
		
		//+++АК POZM 2018.12.17 ИП-00020554
		СтатьяДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтатьяДвиженияДенежныхСредств"); 
		Если ЗначениеЗаполнено(СтатьяДДС) Тогда
			Объект.СтатьяДДС = СтатьяДДС;
		КонецЕсли;	
		МассивСчетов = УправлениеДенежнымиСредствами.ПолучитьСчетРасчетовСКонтрагентом(Объект.Дата, Объект.СтатьяДДС, Объект.Контрагент);
		//---АК POZM 

		
		//+++АК LAGP 2018.09.19 б/н В случаях, когда возвращается несколько значений в массив счетов, для определённых статей ДДС, необходимо брать первое в массиве
		СтатьиИсключения = Новый Массив; //Здесь необходимо хранить статьи-исключения
		СтатьиИсключения.Добавить(ОбщегоНазначенияПовтИсп.ВернутьСтатьюДДСПоУсловию("141022"));
		СтатьяДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтатьяДвиженияДенежныхСредств"); 
		БратьПервое = (МассивСчетов.Количество() = 1);
		Если ЗначениеЗаполнено(СтатьяДДС) Тогда
			СтатьяДДСПопадаетВУсловие = СтатьиИсключения.Найти(СтатьяДДС);
			Если НЕ СтатьяДДСПопадаетВУсловие = Неопределено Тогда
				БратьПервое = Истина;	
			КонецЕсли;	
		КонецЕсли;	 				
		
		//Если МассивСчетов.Количество() = 1 Тогда
		Если БратьПервое Тогда
		//---АК LAGP
			Объект.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду(МассивСчетов[0]).Ссылка;
		Иначе
			Объект.СчетУчетаРасчетов = Планысчетов.Финансовый.РасчетыСПоставщиками;
		КонецЕсли;
	//+++АК POZM 2018.01.11 ИП-00017514 
	КонецЕсли;
    //---АК POZM 
	
	Если НЕ Объект.ДоговорКонтрагента.Владелец = Объект.Контрагент Тогда
		Объект.ДоговорКонтрагента = Неопределено;
		ОбработатьВыборКонтрагентаСервер(Объект.Контрагент);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
		//Объект.СчетУчетаРасчетов = Объект.ДоговорКонтрагента.СчетУчетаРасчетов;
	КонецЕсли;	
	
	//+++АК POZM 2018.01.11 ИП-00017514 
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда
	//---АК POZM 	
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств) Тогда
			Объект.СтатьяДДС = Объект.ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	//+++АК POZM 2018.01.11 ИП-00017514 
	КонецЕсли;
	//---АК POZM 
	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.ДоговорКонтрагента.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.ВариантРасчетаНДС = ?(Объект.Контрагент.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.БезНДС, Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	КонецЕсли;
	
	//17100 koro 30.10.17
	ОбновитьОтветственного();
	
	ЗаполнитьСписокВыбораУслугиСервер();
	
КонецПроцедуры	

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	//+++АК LAGP 2018.02.15 ИП-00017849
	Элементы.ИНННадпись.Заголовок = "ИНН: " + ПолучитьИННКонтрагента(Объект.Контрагент);
	//---АК LAGP
	
	//+++АК LAGP 2018.08.30 ИП-00019684.01 Видимость вкладки "перечисление налогов" на основании одноименной галки в договоре  
	ЭтоПеречислениеНалога = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ЭтоДоговорБюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ПеречислениеВБюджет");
		Элементы.СтраницаПеречислениеНалога.Видимость = ЭтоДоговорБюджет ИЛИ ЭтоПеречислениеНалога;
	Иначе
		Элементы.СтраницаПеречислениеНалога.Видимость = ЭтоПеречислениеНалога;	
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.09.28 ИП-00019684 Для контрагентов ИФНС и УФК доступна странци бюджетных платежей
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Наименование");
			Если Найти(НаименованиеКонтрагента, "ИФНС") > 0 ИЛИ Найти(НаименованиеКонтрагента, "УФК") > 0 Тогда
				Элементы.СтраницаПеречислениеНалога.Видимость = ИСТИНА;		
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК LAGP 2018.10.21 ИП-00018521.01 Добавлена колонка "Сумма всего с НДФЛ" для дальнейшего расчёта в отчёте "Реестр налоговый агент по уплате НДФЛ аренда"
	Элементы.УслугиСуммаВсегоСНДФЛ.Видимость = ФизЛицоАренда(Объект.Контрагент);	
	//---АК LAGP	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
		//ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();
		ФормаВыбора.НачальноеЗначениеВыбора = Объект.Контрагент;
		
		Результат = ФормаВыбора.ОткрытьМодально();
		Если НЕ Результат = Неопределено Тогда
			Объект.Контрагент = Результат;
			ОбработатьВыборКонтрагентаСервер(Результат);
			КонтрагентПриИзмененииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзмененииСервер()
	
	Если (НЕ Объект.ДоговорКонтрагента.Пустая())
		И НЕ Объект.Организация = Объект.ДоговорКонтрагента.Организация Тогда
		Объект.Организация = Объект.ДоговорКонтрагента.Организация;
		Если НЕ ПустаяСтрока(Объект.Номер) Тогда
			ДлинаПрефикса = СтрДлина(Объект.Организация.Префикс);
			Если ДлинаПрефикса = 0
				ИЛИ Лев(Объект.Номер, ДлинаПрефикса) <> Объект.Организация.Префикс Тогда
				Объект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//+++АК POZM 2018.01.11 ИП-00017514 
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету Тогда
	//---АК POZM 	
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом) Тогда
			Объект.СчетУчетаРасчетов = Объект.ДоговорКонтрагента.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
		Если Объект.СчетУчетаРасчетов.Код = "60.7" Тогда
			Объект.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НайтиПоКоду("60.4");
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств) Тогда
			Объект.СтатьяДДС = Объект.ДоговорКонтрагента.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	//+++АК POZM 2018.01.11 ИП-00017514 
	КонецЕсли;
    //---АК POZM 
	
	//+++АК LAGP 2018.08.30 ИП-00019684.01 Видимость вкладки "перечисление налогов" на основании одноименной галки в договоре  
	ЭтоПеречислениеНалога = Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ЭтоДоговорБюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ПеречислениеВБюджет");
		Элементы.СтраницаПеречислениеНалога.Видимость = ЭтоДоговорБюджет ИЛИ ЭтоПеречислениеНалога;
	Иначе	
	    Элементы.СтраницаПеречислениеНалога.Видимость = ЭтоПеречислениеНалога;
	КонецЕсли;
	//---АК LAGP
	
	//+++АК LAGP 2018.09.28 ИП-00019684 Для контрагентов ИФНС и УФК доступна странци бюджетных платежей
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Наименование");
			Если Найти(НаименованиеКонтрагента, "ИФНС") > 0 ИЛИ Найти(НаименованиеКонтрагента, "УФК") > 0 Тогда
				Элементы.СтраницаПеречислениеНалога.Видимость = ИСТИНА;		
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	//---АК LAGP
		
КонецПроцедуры	

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.РасчетыПоКредитамИЗаймам") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Финансовый"));
	КонецЕсли;	
	
 	//+++АК LAGP 2018.05.28 Письмо от 2018.05.28 Фильтр на договор по аренде
	СтруктураДополнительныхПараметров 	= Новый Структура;
	СтруктураОтбора						= Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.НачалоПериодаАренды) И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю") ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету")) Тогда 
		СтруктураДополнительныхПараметров.Вставить("СрокДействия", СтруктураОтбора);
		СтруктураОтбора.Вставить("ЗначениеОтбора", Объект.НачалоПериодаАренды);
		СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.БольшеИлиРавно);
	КонецЕсли;	
	//---АК LAGP
	
	//+++АК sils 19.08.2018 ИП-00019578
	СтруктураОтбора1 = Новый Структура;
	СтруктураОтбора1.Вставить("ЗначениеОтбора", СписокВидовДоговоров);
	СтруктураОтбора1.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	СтруктураОтбора1.Вставить("ДоступностьОтбора", Истина);
	СтруктураДополнительныхПараметров.Вставить("ВидДоговора", СтруктураОтбора1);
	//---АК
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
	Объект, ЭтаФорма, Элемент, Объект.Контрагент, Объект.ДоговорКонтрагента,
	СписокВидовДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров); //+++АК LAGP 2018.05.28 Письмо от 2018.05.28 Добавлена СтруктураДополнительныхПараметров
	
КонецПроцедуры

Процедура ВариантРасчетаНДСПриИзмененииСервер()
	
	//Услуги
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Объект.Контрагент.СтавкаНДС) Тогда
					СтрокаТЧ.СтавкаНДС = Объект.Контрагент.СтавкаНДС;
				Иначе
					СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
				КонецЕсли;
			Иначе
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
		Док = РеквизитФормыВЗначение("Объект");
		Док.ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ);
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	ВариантРасчетаНДСПриИзмененииСервер();
	
КонецПроцедуры

Процедура ЗаполнитьЦФОСервер()
	
	ЦФОПользователя = ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(Объект.Дата, Объект.Ответственный);
	Элементы.ЦФО.СписокВыбора.ЗагрузитьЗначения(ЦФОПользователя.ВыгрузитьЗначения());
	Если НЕ ЗначениеЗаполнено(Объект.ЦФО) Тогда
		Если Элементы.ЦФО.СписокВыбора.Количество() = 1 Тогда
			Объект.ЦФО = Элементы.ЦФО.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ЗаполнитьЦФОСервер();
	
КонецПроцедуры



&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьНадписьИтогоПоДокументу();
	ЗаполнитьАкцептантовИПодтверждающих();
КонецПроцедуры

Процедура УслугиНоменклатураПриИзмененииСервер()
	
	Если Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	//
	СтрокаТабличнойЧасти = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	Если ЗначениеЗаполнено(Объект.Контрагент) И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Объект.Контрагент.СтавкаНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораУслугиСервер();
	
	Док = РеквизитФормыВЗначение("Объект");
	Док.ОбновитьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	УслугиНоменклатураПриИзмененииСервер();
	
	//+++АК LAGP 2018.05.18 ИП-00018696 Помощник заполнения назначения платежа.
	ДополнитьНазначение();	
	//---АК LAGP	
	
КонецПроцедуры

Процедура УслугиКоличествоПриИзмененииСервер()
	
	Если Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	Док = РеквизитФормыВЗначение("Объект");
	Док.ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиКоличествоПриИзмененииСервер();
	СброситьАкцептПриПревышении();
КонецПроцедуры

Процедура УслугиЦенаПриИзмененииСервер()
	
	Если Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	Док = РеквизитФормыВЗначение("Объект");
	Док.ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиЦенаПриИзмененииСервер();
	СброситьАкцептПриПревышении();
КонецПроцедуры

Процедура УслугиСуммаПриИзмененииСервер()
	
	Если Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекДанные = Объект.Услуги.НайтиПоИдентификатору(Элементы.Услуги.ТекущаяСтрока);
	
	Если ТекДанные.Количество <> 0 Тогда
		ТекДанные.Цена = ТекДанные.Сумма / ТекДанные.Количество;
	ИначеЕсли ТекДанные.Цена <> 0 Тогда
		ТекДанные.Количество = ТекДанные.Сумма / ТекДанные.Цена;
	КонецЕсли;	
	
	Док = РеквизитФормыВЗначение("Объект");
	Док.РассчитатьСуммуНДСТабЧасти(ТекДанные, Объект.ВариантРасчетаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СброситьАкцептПриПревышении();
	
	УслугиСуммаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьАкцептПриПревышении()
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные.Сумма > ТекущиеДанные.АкцептованаСумма
		И ТекущиеДанные.Акцептована Тогда
		Сообщить("Акцепт со строки сброшен, так как сумма оплаты превысила акцептованную!");
		ТекущиеДанные.Акцептована = Ложь;
		ТекущиеДанные.АвтоАкцепт = Ложь;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	УслугиЦенаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеСтавкиНДС(ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеСтавкиНДС(ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПолученоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекущиеДанные.КоличествоПолучено > ТекущиеДанные.Количество Тогда
		ТекущиеДанные.КоличествоПолучено = ТекущиеДанные.Количество;
		Сообщить("Невозможно получить больше заказанного");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВсеПозицииДокументаПолучены(Команда)
	//Если Не ПодтверждениеДоступно Тогда
	//	Сообщить("У вас нет права на подтверждение получения. Команда не может быть выполнена!");
	//	Возврат;
	//КонецЕсли;	
	
	//+++АК SHEP 2017.11.21 ИП-00017244 закомментировал
	// У Е. Курвякова при акцепте Заявки на услуги и мат. убрать всплывающие окна:
	// 1) с просьбой подтвердить выполненные работы
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Текст = "ru = ""Все позиции документа получены?"";" ;
	//Ответ = Вопрос(НСтр(Текст), Режим, 0);
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	//---АК SHEP 2017.11.21
	
	ДатаПодтверждения = ТекущаяДата();
	Для каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		Если ПодтверждениеДоступноКлиент(СтрокаТЧ) Тогда
			
			СтрокаТЧ.КоличествоПолучено 		= СтрокаТЧ.Количество;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПодтвердилПользователь)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ПодтвердилДата)
				ИЛИ НЕ СтрокаТЧ.Подтверждено Тогда
				
				СтрокаТЧ.ПодтвердилПользователь	= ПолучитьТекущегоПользователя();
				СтрокаТЧ.ПодтвердилДата			= ДатаПодтверждения;
				СтрокаТЧ.Подтверждено			= Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлыПоСтрокеСервер(УИН_СтрокиОплат)
	
	Возврат Объект.ПрикрепленныеФайлы.Выгрузить(Новый Структура("УИН_СтрокиОплат", УИН_СтрокиОплат));
	
КонецФункции	

Процедура ПолучитьВыбранныеФайлыПоСтрокеСервер(УИН_СтрокиОплат, ТЗФайлов)
	
	СтруктураДляПоиска = Новый Структура("УИН_СтрокиОплат", УИН_СтрокиОплат);
	
	МассивСтрок = Объект.ПрикрепленныеФайлы.НайтиСтроки(СтруктураДляПоиска); 
	Для каждого СтрокаТЧ Из МассивСтрок Цикл 
		Объект.ПрикрепленныеФайлы.Удалить(СтрокаТЧ); 
	КонецЦикла; 
	
	//
	Для каждого СтрокаТаблицы Из ТЗФайлов Цикл
		НоваяСтрока = Объект.ПрикрепленныеФайлы.Добавить();
		НоваяСтрока.УИН_СтрокиОплат	= УИН_СтрокиОплат;
		НоваяСтрока.Файл			= СтрокаТаблицы.Файл;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФайламиСтроки(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Парам = Новый Структура;
	Парам.Вставить("УИН_СтрокиОплат", ТекущиеДанные.УИН_Строки);
	Парам.Вставить("СоставФайлов"	, ФайлыПоСтрокеСервер(ТекущиеДанные.УИН_Строки));
	Результат = ОткрытьФормуМодально("Документ.ЗаявкаНаУслугиМатериалы.Форма.ФормаУправленияФайлами", Парам, ЭтаФорма);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПолучитьВыбранныеФайлыПоСтрокеСервер(ТекущиеДанные.УИН_Строки, Результат);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

Функция СобратьПлатёжкуПоСтрокеСервер(ДанныеСтроки)
	
	//Формируем заявку
	СтруктураПлатёжки = Новый Структура;	
	СтруктураПлатёжки.Вставить("Дата"				, ТекущаяДата());
	СтруктураПлатёжки.Вставить("ДоговорКонтрагента"	, Объект.ДоговорКонтрагента);
	СтруктураПлатёжки.Вставить("Контрагент"			, Объект.Контрагент);
	СтруктураПлатёжки.Вставить("Организация"		, Объект.Организация);
	//Сумма=0;
	//Для й = 1 По ДатыТаблицыПлатежей.Количество() Цикл
	//	Сумма = Сумма + ДанныеСтроки["Дата" + Формат(й, "ЧГ=0")];
	//КонецЦикла;
	
	//
	Сумма = ДанныеСтроки.СуммаОплаты;
	ОстатокПоСтроке = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка"			, Объект.Ссылка);
	Запрос.УстановитьПараметр("УИН_СтрокиОплат"	, ДанныеСтроки.УИН_Строки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоЗаявкамНаУслугиМатериалыОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыПоЗаявкамНаУслугиМатериалы.Остатки(
	|			,
	|			Заявка = &Заявка
	|				И УИН_СтрокиОплат = &УИН_СтрокиОплат) КАК РасчетыПоЗаявкамНаУслугиМатериалыОстатки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОстатокПоСтроке = Выборка.СуммаОстаток;
	КонецЕсли;	
	
	Если ОстатокПоСтроке = 0 Тогда
		Сообщить("Остатка долга по строке нет. Документ оплаты не требуется.");
		Возврат Неопределено;
	ИначеЕсли ОстатокПоСтроке < Сумма Тогда
		Сообщить("Остаток долга по строке меньше запланированной суммы. Документ будет заполнен на сумму остатка.");
		Сумма = Мин(Выборка.СуммаОстаток, Сумма);
	КонецЕсли;	
	
	СтруктураПлатёжки.Вставить("СуммаДокумента"					, Сумма);
	
	//
	СтруктураПлатёжки.Вставить("ДокументОснование"				, Объект.Ссылка);
	СтруктураПлатёжки.Вставить("УИН_СтрокиОснования"			, ДанныеСтроки.УИН_Строки);
	СтруктураПлатёжки.Вставить("СчетБанк"						, ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СтруктураПлатёжки.Вставить("СтатьяДвиженияДенежныхСредств"	, Объект.СтатьяДДС);
	СтруктураПлатёжки.Вставить("ЦФО"							, Объект.ЦФО);
	СтруктураПлатёжки.Вставить("ТорговаяТочка"					, Объект.СтруктурнаяЕдиница);
	СтруктураПлатёжки.Вставить("ЗаявкаНаРасходованиеСредств"	, Объект.Ссылка);
	СтруктураПлатёжки.Вставить("ВидОперации"					, Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	СтруктураПлатёжки.Вставить("НазначениеПлатежа"				, ДанныеСтроки.НазначениеПлатежа);
	СтруктураПлатёжки.Вставить("ОчередностьПлатежа"				, 5);
	
	Возврат СтруктураПлатёжки;
	
КонецФункции

Функция ПолучитьСуммыПоЗаявке()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК ПолученоНаСумму,
	|	0 КАК ОплаченаСумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.ДокументОснование = &Заявка
	|	И ПоступлениеТоваровУслуг.СтатусПолученныхДокументов = ЗНАЧЕНИЕ(Перечисление.СтатусыПолученныхДокументов.ПолученОригинал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	РасходИзБанка.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|ГДЕ
	|	РасходИзБанка.Проведен
	|	И РасходИзБанка.ЗаявкаНаРасходованиеСредств = &Заявка
	|ИТОГИ
	|	СУММА(ПолученоНаСумму),
	|	СУММА(ОплаченаСумма)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК ПолученоНаСумму,
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.ВариантРасчетаНДС,
	|	ПоступлениеТоваровУслуг.СтатусПолученныхДокументов,
	|	ПоступлениеТоваровУслуг.СчетФактураПолученныйИмяФайла,
	|	ПоступлениеТоваровУслуг.АктОбОказанииУслугИмяФайла,
	|	ПоступлениеТоваровУслуг.РасходнаяНакладнаяИмяФайла
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.ДокументОснование = &Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслуг.Дата УБЫВ";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	//
	Выборка = РезультатыЗапроса[0].Выбрать();
	СуммыПоЗаявке = Новый Структура;
	СуммыПоЗаявке.Вставить("ПолученоНаСумму", 0);
	СуммыПоЗаявке.Вставить("ОплаченаСумма"	, 0);
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СуммыПоЗаявке, Выборка);
	КонецЕсли;
	
	//
	Рез = Новый Структура;
	Рез.Вставить("СуммыПоЗаявке", СуммыПоЗаявке);
	Рез.Вставить("Ссылка");
	Рез.Вставить("ПолученоНаСумму");
	Рез.Вставить("ВариантРасчетаНДС");
	Рез.Вставить("СтатусПолученныхДокументов");
	Рез.Вставить("СчетФактураПолученныйИмяФайла");
	Рез.Вставить("АктОбОказанииУслугИмяФайла");
	Рез.Вставить("РасходнаяНакладнаяИмяФайла");
	Выборка = РезультатыЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Рез, Выборка);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции	

&НаКлиенте
Функция МожноОплачиватьЗаявку(ТекСтрокаОплат) 
	
	Если ТекСтрокаОплат.Аванс Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ошибка = Ложь;
	
	ИнформацияОПоступлении = ПолучитьСуммыПоЗаявке();
	
	СуммыПоЗаявке = ИнформацияОПоступлении.СуммыПоЗаявке;
	
	Неоплачено = (СуммыПоЗаявке.ПолученоНаСумму - СуммыПоЗаявке.ОплаченаСумма);
	Если ТекСтрокаОплат.СуммаОплаты > Неоплачено Тогда
		Сообщить("Сумма оплаты по строке превышает остаток неоплаченных поставленных товаров по заявке в размере: " + Неоплачено +
		". Расход из банка не может быть создан");
		Ошибка = Истина;
	КонецЕсли;
	Если ИнформацияОПоступлении.ВариантРасчетаНДС <> ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС")
		И НЕ ЗначениеЗаполнено(ИнформацияОПоступлении.СчетФактураПолученныйИмяФайла) Тогда
		Сообщить("В документе " + ИнформацияОПоступлении.Ссылка + " нет скана счет-фактуры. Расход из банка не может быть создан");
		Ошибка = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИнформацияОПоступлении.РасходнаяНакладнаяИмяФайла) Тогда
		Сообщить("В документе " + ИнформацияОПоступлении.Ссылка + " нет скана накладной. Расход из банка не может быть создан");
		Ошибка = Истина;
	КонецЕсли;
	Если ИнформацияОПоступлении.СтатусПолученныхДокументов <> ПредопределенноеЗначение("Перечисление.СтатусыПолученныхДокументов.ПолученОригинал") Тогда
		Сообщить("В документе " + ИнформацияОПоступлении.Ссылка + " статус полученных документов не конечный. Расход из банка не может быть создан");
		Ошибка = Истина;
	КонецЕсли;
	
	Возврат (НЕ Ошибка);
	
КонецФункции	

&НаКлиенте
Процедура СоздатьРасходИзБанка(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ ЭтаФорма.Модифицированность Тогда
		Предупреждение("Сначала нужно записать заявку");
		Возврат;
	КонецЕсли;
	Если НЕ Объект.Проведен Тогда
		Предупреждение("Сначала нужно провести заявку");
		Возврат;
	КонецЕсли;
	
	//
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.РасходИзБанка)
			И ТекущиеДанные.РасходИзБанка.Оплачено Тогда
			Предупреждение("Строка уже оплачена");
			Возврат;
		КонецЕсли;
		
		Если МожноОплачиватьЗаявку(ТекущиеДанные) Тогда
			
			СтруктураНовойПлатёжки = СобратьПлатёжкуПоСтрокеСервер(Новый Структура("ДатаПлатежа, НомерСтроки, СуммаОплаты, УИН_Строки, НазначениеПлатежа", ТекущиеДанные.ДатаПлатежа, ТекущиеДанные.НомерСтроки, ТекущиеДанные.СуммаОплаты, ТекущиеДанные.УИН_Строки, ТекущиеДанные.НазначениеПлатежа));
			Если СтруктураНовойПлатёжки = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.РасходИзБанка) Тогда
				Парам = Новый Структура;
				Парам.Вставить("Ключ", ТекущиеДанные.РасходИзБанка);
				ТекПП = ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта", Парам);
			Иначе	
				ТекПП = ПолучитьФорму("Документ.РасходИзБанка.ФормаОбъекта");
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(ТекПП, СтруктураНовойПлатёжки);
			
			ТекПП.ОрганизацияПриИзменении(ТекПП.ЭлементыФормы.Организация);
			ТекПП.КонтрагентПриИзменении(ТекПП.ЭлементыФормы.Контрагент);
			ТекПП.ДоговорКонтрагентаПриИзменении(ТекПП.ЭлементыФормы.ДоговорКонтрагента);
			ТекПП.СтатьяДвиженияДенежныхСредств = СтруктураНовойПлатёжки.СтатьяДвиженияДенежныхСредств ;// а то её меняют в предыдущих обработчиках 		
			ТекПП.УстановитьСчетаУчетаБУ();
			ТекПП.УстановитьСтатьюДДС_БУ_ПоУмолчанию();
			
			Попытка
				ТекПП.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
				ТекПП.Записать(РежимЗаписиДокумента.Запись);
				Если ТекПП.Проведен Тогда
					ТекПП.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;	
				
			КонецПопытки;
			
			ТекущиеДанные.РасходИзБанка = ТекПП.Ссылка;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОплатаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если НоваяСтрока ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.УИН_Строки) Тогда
		ТекущиеДанные.УИН_Строки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаДатаПлатежаПриИзмененииСервер(ДатаРасхода);
	
	//Если  НЕ УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.УстановкаЛюбойДатыОплатыБезнал, Ложь)
	//		И НЕ МожноУстановитьДатуКакДатуРасхода(ДатаРасхода) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Дату расхода можно установить только на вторник или четверг (не праздничный)");
	//	//Если НеКонтролироватьУсловия = Ложь Тогда
	//	//	Отказ = Истина;
	//	//КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОплатаДатаПлатежаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	
	ПроверитьДатуПлатежа(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатуПлатежа(ТекущиеДанные)
	
	СтатьиСИсключениями = КэшИсключений.НайтиСтроки(Новый Структура("СтатьяДДС,НеКонтролироватьВремяСоздания",Объект.СтатьяДДС,Истина));
	Если СтатьиСИсключениями.Количество()>0 Тогда
		Возврат;
	КонецЕсли;	
	
	Отказ = Ложь;
	ДатаРасхода = ТекущиеДанные.ДатаПлатежа;
	Если НачалоДня(ДатаРасхода) < НачалоДня(ТекущаяДата())
		И Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата платежа не может быть меньше текущей даты, Строка - " + ТекущиеДанные.НомерСтроки);
		Отказ = Истина;
	КонецЕсли;
	
	Если Час(ТекущаяДата()) > 11
		И НачалоДня(ДатаРасхода) = НачалоДня(ТекущаяДата())
		И Объект.Ссылка.Пустая() Тогда                                                                
		Если Вопрос("Текущее время более 11:00. Допускается указывать дату не ранее завтрашнего дня. Установить следующую возможную дату?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ДатаНоваяРасчитанная = ТекущаяДата() + 86400;
			Удачно = Ложь;
			Пока ДатаНоваяРасчитанная <= ТекущаяДата() + 86400 * 60 Цикл
				Если МожноУстановитьДатуКакДатуРасхода(ДатаНоваяРасчитанная) Тогда
					Удачно = Истина;
					Прервать;
				КонецЕсли;	
				ДатаНоваяРасчитанная = ДатаНоваяРасчитанная + 86400;
			КонецЦикла;	
			
			ДатаРасхода = ДатаНоваяРасчитанная;
			ТекущиеДанные.ДатаПлатежа = ДатаРасхода;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//ТекДата = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), ТекущаяДата(), Объект.Дата);
	//НачалоНеделиДаты = НачалоНедели(ТекДата);
	//Если ТекДата > НачалоНеделиДаты + 2*86400 + 11*3600 Тогда		
	//	МинДатаРасхода = НачалоНеделиДаты + 8*86400;
	//ИначеЕсли (ТекДата > НачалоНеделиДаты + 11*3600)
	//		И НЕ ТекДата > НачалоНеделиДаты + 2*86400 + 11*3600 Тогда
	//	МинДатаРасхода = НачалоНеделиДаты + 3*86400;
	//ИначеЕсли НЕ ТекДата > НачалоНеделиДаты + 11*3600 Тогда		
	//	МинДатаРасхода = НачалоНеделиДаты + 86400;
	//КонецЕсли;		
	//Если ДатаРасхода < МинДатаРасхода Тогда
	//	Если Вопрос("Дата расхода должна быть не ранее " + Формат(МинДатаРасхода, "ДЛФ=Д") + ". Установить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//		ДатаРасхода = МинДатаРасхода;
	//		ТекущиеДанные.ДатаПлатежа = ДатаРасхода;
	//	Иначе
	//		Отказ = истина;
	//	КонецЕсли;
	//Иначе
	Если НЕ МожноУстановитьДатуКакДатуРасхода(ДатаРасхода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дату расхода можно установить только на вторник или четверг (не праздничный)");
		Отказ = Истина;
	КонецЕсли;
	//КонецЕсли;
	
	//
	ОплатаДатаПлатежаПриИзмененииСервер(ДатаРасхода);
	
	Если Отказ Тогда
		ТекущиеДанные.ДатаПлатежа = Неопределено;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаРасходИзБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	Если НЕ ПоступлениеНеОднойДатой Тогда
		Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
			СтрокаТЧ.ДатаПоступления = Объект.ДатаПоступления;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАкцептованаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Акцептована Тогда
		//+++ AK suvv 2018.09.05 ИП-00019410
		Если ПолучитьЗначениеРеквизита(Объект.СтатьяДДС, "Код") = "230116" Тогда 
		//--- AK suvv
			СуммаПревышенияЛимита = ПолучитьСуммуПревышенияЛимитаПоСЕ(ТекущиеДанные.СтруктурнаяЕдиница, ТекущиеДанные.Сумма);
			Если СуммаПревышенияЛимита > 0 Тогда
				Ответ = Вопрос("Превышен лимит по торговой точке на " + СуммаПревышенияЛимита + " руб. Продолжить акцептование?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					ТекущиеДанные.Акцептована = Ложь;
					ТекущиеДанные.Акцептовал = Неопределено;
					ТекущиеДанные.АкцептовалДата = Дата(1,1,1);
					ТекущиеДанные.Автоакцепт = Ложь;
					Возврат;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		//--- AK suvv 
		ТекущиеДанные.Акцептовал	= ПолучитьТекущегоПользователя();
				
		Если УслугиАкцептованиеДоступноКлиент(ТекущиеДанные) И ПроверкаЛимитовАвансовУспешна() И ПроверкаЛимитовЗаявокУспешна(ТекущиеДанные.Акцептовал, ТекущиеДанные.Сумма) И ПроверкаЛимитовРасходовНаТочкиУспешна(ТекущиеДанные.СтруктурнаяЕдиница,ТекущиеДанные.Сумма) Тогда
		
			
			ТекущиеДанные.АкцептовалДата			= ТекущаяДата();
			//ТекущиеДанные.КоличествоПолучено		= ТекущиеДанные.Количество;
		Иначе
			ТекущиеДанные.Акцептована 				= Ложь;
			ТекущиеДанные.Акцептовал 	= Неопределено;
			ТекущиеДанные.АкцептовалДата 			= Дата(1, 1, 1);
			//	ТекущиеДанные.КоличествоПолучено		= 0;
		КонецЕсли;	
		
	Иначе
		
		Если РасширенныеПрава
			ИЛИ ТекущиеДанные.Акцептовал = ПолучитьТекущегоПользователя()
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Акцептовал) Тогда //можно
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "ru = ""Отменить акцепт?"";";
			Ответ = Вопрос(НСтр(Текст), Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ТекущиеДанные.Акцептована = Истина;
				Возврат;
			КонецЕсли;	
			
			ТекущиеДанные.Акцептована 				= Ложь;
			ТекущиеДанные.Акцептовал 				= Неопределено;
			ТекущиеДанные.АкцептовалДата 			= Дата(1,1,1);
			//ТекущиеДанные.КоличествоПолучено		= 0;
			ТекущиеДанные.Автоакцепт = Ложь;
		Иначе
			ТекущиеДанные.Акцептована = Истина;
			Сообщить("Вы не можете отменить акцепт");
		КонецЕсли;	
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЛимитовАвансовУспешна()
	Если СтатьиДДСБезКонтроляЛимитовПоАвансам.НайтиПоЗначению(Объект.СтатьяДДС)<>Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	СчетаИсключений=Новый СписокЗначений;
	СчетаИсключений.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.1"));
	СчетаИсключений.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.2"));
	СчетаИсключений.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.3"));
	СчетаИсключений.Добавить(ПланыСчетов.Финансовый.НайтиПоКоду("60.5"));
	
	Если СчетаИсключений.НайтиПоЗначению(Объект.СчетУчетаРасчетов)<>Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТП = ПараметрыСеанса.ТекущийПользователь;
	Попытка  // пока в режиме отладки
		ТабОстатковЛимитов = АК_КонтрольЗадолженности.ПолучитьТаблицуОстатковЛимитовАкцептантов();
		СтрокаТекущегоАкцептанта = ТабОстатковЛимитов.Найти(ТП,"Акцептант");
		Если СтрокаТекущегоАкцептанта = Неопределено Тогда
			ОстатокЛимитаПоАвансамАкцептанта = 0;
		Иначе
			ОстатокЛимитаПоАвансамАкцептанта = СтрокаТекущегоАкцептанта.ОстатокЛимита;
		КонецЕсли;	
	Исключение
		ОстатокЛимитаПоАвансамАкцептанта = 0;
	КонецПопытки;	
	АвансыОплат = Объект.Оплата.НайтиСтроки(Новый Структура("Аванс",Истина));
	Если АвансыОплат.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СуммаАвансов = 0;
	Для Каждого Аванс Из АвансыОплат Цикл
		СуммаАвансов = СуммаАвансов + Аванс.СуммаОплаты;
	КонецЦикла;	
	Если СуммаПоступленийПоДокументу>СуммаАвансов Тогда
		Возврат Истина;
	КонецЕсли;	
	ТабРаспределения = ПолучитьТабРаспределенияАвансовПоАкцептантам();
	
	СтрокиТП = ТабРаспределения.НайтиСтроки(Новый Структура("Акцептант",ТП));
	СуммаВЭтомДокументе = 0;
	Для Каждого СтрокаТП ИЗ СтрокиТП Цикл
		СуммаВЭтомДокументе = СуммаВЭтомДокументе + СтрокаТП.Сумма;
	КонецЦикла;	
	ОстатокСУчетомСтроки = ОстатокЛимитаПоАвансамАкцептанта - СуммаВЭтомДокументе;
	Если ОстатокСУчетомСтроки < 0 Тогда
		Сообщить("Внимание! Превышена сумма установленных Вам лимитов авансов на "+(-ОстатокСУчетомСтроки),СтатусСообщения.ОченьВажное);
		//Сообщить("Запрет акцептования сверх установленного лимита будет установлен с 28 апреля 2017. Сейчас система находится в режиме тестирования.");
		
		//Режим = РежимДиалогаВопрос.ДаНет;
		//Текст = "ru = ""Превышена сумма установленных лимитов по авансам. Всё равно акцептовать?"";";
		//Ответ = Вопрос(НСтр(Текст), Режим, 0);
		//Если Ответ = КодВозвратаДиалога.Нет Тогда
		//	Возврат Ложь;
		//КонецЕсли; 
		
	КонецЕсли;	
	Возврат Истина;
КонецФункции	

//+++АК LAGP 2018.06.04 ИП-00018684 Добавлен лимит по заявкам
&НаСервере
Функция ПроверкаЛимитовЗаявокУспешна(ТекущийПользователь, СуммаВЗаявке)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиСПравомАкцептаОплат.Ссылка
		|ИЗ
		|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
		|ГДЕ
		|	ПользователиСПравомАкцептаОплат.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиСПравомАкцептаОплат.Ссылка
		|ИЗ
		|	Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
		|ГДЕ
		|	ПользователиСПравомАкцептаОплат.Пользователь = &Пользователь
		|	И ПользователиСПравомАкцептаОплат.ЛимитПоЗаявкам < &СуммаВСтрокеЗаявки";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("СуммаВСтрокеЗаявки", СуммаВЗаявке);
	
	Результат = Запрос.ВыполнитьПакет();
	ПользовательНеНайден = Результат[0].Пустой();
	ЛимитаДостаточно 	 = Результат[1].Пустой();	
	
	ЕстьДополнительноеПраво = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ПроверкаЛимитаПриАкцептеЗаявокНаУслуги, Ложь);
	
	ПроверкаПройдена = (НЕ ПользовательНеНайден И ЛимитаДостаточно) ИЛИ НЕ ЕстьДополнительноеПраво;
	
	Если НЕ ПроверкаПройдена Тогда
		Если ПользовательНеНайден Тогда		
			Сообщить("Внимание! Пользователю не установлены лимиты по заявкам!",СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Если НЕ ЛимитаДостаточно Тогда		
			Сообщить("Внимание! Превышена сумма установленных вам лимитов на сумму заявки!",СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;	
		
	Возврат ПроверкаПройдена;
	
КонецФункции	

&НаСервере
Функция ПолучитьТабРаспределенияАвансовПоАкцептантам()
	Док = РеквизитФормыВЗначение("Объект");
	Возврат Док.ПолучитьТабРаспределенияАвансовПоАкцептантам();
КонецФункции	

&НаКлиенте
Процедура НеОднаРольПодтвержденияПриИзменении(Элемент)
	
	Если НеОднаРольПодтверждения Тогда
		//Для Каждого Стр Из Объект.Услуги Цикл
		//	Стр.РольПодтверждения = Объект.РольПодтверждения;
		//КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ПоступлениеОднойДатойПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РольПодтвержденияПриИзменении(Элемент)
	
	НеОднаРольПодтвержденияПриИзменении(Неопределено);
	ПроверитьПодтверждениеДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодтверждениеДоступноСервер()
	
	// Роль подтверждения не используется уже, это надо удалить совсем
	//ПодтверждениеДоступно = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РасширенныеПраваПоЗаявкамНаУслугиМатериалы, Ложь);
	//Если НЕ ПодтверждениеДоступно Тогда
	//	ПодтверждениеДоступно = ЗначениеЗаполнено(Объект.РольПодтверждения.СоставРоли.Найти(ПараметрыСеанса.ТекущийПользователь.ФизЛицо));
	//КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиПодтвержденоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Подтверждено Тогда
		    
		Если ПодтверждениеДоступноКлиент(ТекущиеДанные) Тогда
			ТекущиеДанные.ПодтвердилПользователь	= ПолучитьТекущегоПользователя();
			ТекущиеДанные.ПодтвердилДата			= ТекущаяДата();
			ТекущиеДанные.КоличествоПолучено		= ТекущиеДанные.Количество;
		Иначе
			ТекущиеДанные.Подтверждено 				= Ложь;
			ТекущиеДанные.ПодтвердилПользователь 	= Неопределено;
			ТекущиеДанные.ПодтвердилДата 			= Дата(1, 1, 1);
			ТекущиеДанные.КоличествоПолучено		= 0;
		КонецЕсли;	
		
		//+++АК LAGP 2018.06.05 ИП-00018530 Настройка контроля соответствия получателя ИП и номера счета для ИП
		Если НЕ Документы.ЗаявкаНаУслугиМатериалы.СчётИПКорректный(Объект.Контрагент, Объект.СчетКонтрагента) Тогда
			Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, Неопределено);
			ПоказатьВопрос(Оповещение, "Банковский счёт получателя не совпадает с маской счетов ""40802"" свойственной индивидуальным предпринимателям.", РежимДиалогаВопрос.ОК, 10);		
		КонецЕсли;
		//---АК LAGP
		
	Иначе
		
		Если РасширенныеПрава
			ИЛИ ТекущиеДанные.ПодтвердилПользователь = ПолучитьТекущегоПользователя()
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ПодтвердилПользователь) Тогда //можно
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "ru = ""Отменить подтверждение?"";";
			Ответ = Вопрос(НСтр(Текст), Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ТекущиеДанные.Подтверждено = Истина;
				Возврат;
			КонецЕсли;	
			
			ТекущиеДанные.Подтверждено 				= Ложь;
			ТекущиеДанные.ПодтвердилПользователь 	= Неопределено;
			ТекущиеДанные.ПодтвердилДата 			= Дата(1,1,1);
			ТекущиеДанные.КоличествоПолучено		= 0;
			
		Иначе
			ТекущиеДанные.Подтверждено = Истина;
			Сообщить("Вы не можете отменить подтверждение");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодтверждениеДоступноКлиент(ДанныеСтроки)
	
	Если РасширенныеПрава
		ИЛИ (ЗначениеЗаполнено(ДанныеСтроки.Подтверждающий)
		И ДанныеСтроки.Подтверждающий = ПолучитьТекущегоПользователя()) Тогда
		
		Возврат Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Подтверждающий)
		И НЕ ДанныеСтроки.Подтверждающий = ПолучитьТекущегоПользователя() Тогда
		
		Сообщить("Для точки " + ДанныеСтроки.СтруктурнаяЕдиница + " выбран другой подтверждающий. Он и должен подтверждать");
		Возврат Ложь;
		
	Иначе // Проверка по схеме
		
		ПодтверждающийПоУмолчанию = ПодтверждающийПоУмолчаниюСервер(ДанныеСтроки.СтруктурнаяЕдиница);
		ПомощникУправляющего = ПомощникУправляющегоПоУмолчаниюСервер(ДанныеСтроки.СтруктурнаяЕдиница);
		Если Не ЗначениеЗаполнено(ПодтверждающийПоУмолчанию) Тогда
			Сообщить("Для точки " + ДанныеСтроки.СтруктурнаяЕдиница + " не проставлен помощник управляющего и управляющий. Невозможно проверить");
			Возврат Истина;
		КонецЕсли;	
		ТекПользователь = ПолучитьТекущегоПользователя();
		Если ПодтверждающийПоУмолчанию = ТекПользователь или ПомощникУправляющего = ТекПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекПользователь.ФизЛицо) Тогда
			Сообщить("У Вас в карточке пользователя не проставлено физлицо. Вы не можете подтверждать!");
			Возврат Ложь;
		КонецЕсли;	
		
		ТекТочка = ДанныеСтроки.СтруктурнаяЕдиница;
		Удовлетворяет = ПодтверждающийУдовлетворяетСервер(ТекТочка,ТекПользователь);
		Если НЕ Удовлетворяет Тогда
			Сообщить(""+ТекПользователь + " не может подтверждать получения для структурной единицы " + ТекТочка);
			Возврат Ложь
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере 
Функция ПользовательВВеткеАкцептанта(Пользователь,Акцептант)
	//Поищем вверх
	Акцептанты = КэшАкцептантов.НайтиСтроки(Новый Структура("Акцептант",Пользователь));
	Если Акцептанты.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаАкцептанта = Акцептанты[0];
	Если СтрокаАкцептанта.Родитель = Акцептант Или
		СтрокаАкцептанта.Дед = Акцептант Или
		СтрокаАкцептанта.Прадед = Акцептант Или
		СтрокаАкцептанта.Прапрадед = Акцептант Или
		СтрокаАкцептанта.Прапрапрадед = Акцептант Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//Поищем вниз
	Акцептанты = КэшАкцептантов.НайтиСтроки(Новый Структура("Акцептант",Акцептант));
	Если Акцептанты.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаАкцептанта = Акцептанты[0];
	Если СтрокаАкцептанта.Родитель = Пользователь Или
		СтрокаАкцептанта.Дед = Пользователь Или
		СтрокаАкцептанта.Прадед = Пользователь Или
		СтрокаАкцептанта.Прапрадед = Пользователь Или
		СтрокаАкцептанта.Прапрапрадед = Пользователь Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
			
КонецФункции	
&НаКлиенте
Функция УслугиАкцептованиеДоступноКлиент(ДанныеСтроки)
	ТП = ПолучитьТекущегоПользователя();
	Если РасширенныеПрава ИЛИ ТП = Объект.Акцептант ИЛИ ДанныеСтроки.Акцептант = ТП Тогда
		
		Возврат Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Акцептант)
		И НЕ Объект.Акцептант = ТП Тогда
		Если ПользовательВВеткеАкцептанта(ТП,Объект.Акцептант) Тогда
			Возврат Истина;
		Иначе	
			Сообщить("Для заявки выбран другой акцептант. Он и должен акцептовать");
			Возврат Ложь;
		КонецЕсли;
		
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Акцептант)
		И НЕ ДанныеСтроки.Акцептант = ТП Тогда
		Если ПользовательВВеткеАкцептанта(ТП,ДанныеСтроки.Акцептант) Тогда
			Возврат Истина;
		Иначе	
			Сообщить("Для точки " + ДанныеСтроки.СтруктурнаяЕдиница + " выбран другой акцептант. Он и должен акцептовать");
			Возврат Ложь;
		КонецЕсли;
	Иначе // Проверка по схеме, но её пока нет
		
		//Возврат АкцептированиеДоступно;		
		//ПодтверждающийПоУмолчанию = ПодтверждающийПоУмолчаниюСервер(ДанныеСтроки.СтруктурнаяЕдиница);
		//ПомощникУправляющего = ПомощникУправляющегоПоУмолчаниюСервер(ДанныеСтроки.СтруктурнаяЕдиница);
		//Если Не ЗначениеЗаполнено(ПодтверждающийПоУмолчанию) Тогда
		//	Сообщить("Для точки " + ДанныеСтроки.СтруктурнаяЕдиница + " не проставлен помощник управляющего и управляющий. Невозможно проверить");
		//	Возврат Истина;
		//КонецЕсли;	
		//ТекПользователь = ПолучитьТекущегоПользователя();
		//Если ПодтверждающийПоУмолчанию = ТекПользователь или ПомощникУправляющего = ТекПользователь Тогда
		//	Возврат Истина;
		//КонецЕсли;
		//
		//Если НЕ ЗначениеЗаполнено(ТекПользователь.ФизЛицо) Тогда
		//	Сообщить("У Вас в карточке пользователя не проставлено физлицо. Вы не можете подтверждать!");
		//	Возврат Ложь;
		//КонецЕсли;	
		//
		//ТекТочка = ДанныеСтроки.СтруктурнаяЕдиница;
		//Удовлетворяет = ПодтверждающийУдовлетворяетСервер(ТекТочка,ТекПользователь);
		//Если НЕ Удовлетворяет Тогда
		//	Сообщить(""+ТекПользователь + " не может подтверждать получения для структурной единицы " + ТекТочка);
		//	Возврат Ложь
		//КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные.Подтверждено Тогда
		Сообщить("Строка подтверждена, удаление невозможно");
		Отказ = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.Акцептована Тогда
		Сообщить("Строка акцептована, удаление невозможно");
		Отказ = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаАкцептованаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Акцептована Тогда
		
		Если АкцептированиеДоступно
			И (НЕ ЗначениеЗаполнено(Объект.Акцептант)
			ИЛИ Объект.Акцептант = ПолучитьТекущегоПользователя()) Тогда
			
			ТекущиеДанные.Акцептовал		= ПолучитьТекущегоПользователя();
			ТекущиеДанные.АкцептовалДата	= ТекущаяДата();
			
		Иначе
			ТекущиеДанные.Акцептована 		= Ложь;
			ТекущиеДанные.Акцептовал		= Неопределено;
			ТекущиеДанные.АкцептовалДата	= Дата(1, 1, 1);
		КонецЕсли;
		
	ИначеЕсли АкцептированиеДоступно Тогда
		
		ТекущиеДанные.Акцептовал		= Неопределено;
		ТекущиеДанные.АкцептовалДата	= Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АкцептоватьВсеСтроки(Команда)
	
	Если НЕ АкцептированиеДоступно Тогда
		Сообщить("У вас нет права на акцептирование оплат. Команда не может быть выполнена!");
		Возврат;
	КонецЕсли;	
	
	//
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Акцептовать все строки?"";" ;
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПодтверждения = ТекущаяДата();
	Для каждого СтрокаТЧ Из Объект.Оплата Цикл
		//СтрокаТЧ.КоличествоПолучено = СтрокаТЧ.Количество;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Акцептовал)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.АкцептовалДата)
			ИЛИ НЕ СтрокаТЧ.Акцептована  Тогда
			СтрокаТЧ.Акцептовал		= ПолучитьТекущегоПользователя();
			СтрокаТЧ.АкцептовалДата	= ДатаПодтверждения;
			СтрокаТЧ.Акцептована	= Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные.Акцептована Тогда
		Сообщить("Строка акцептована, удаление невозможно");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование
		И (Элемент.ТекущиеДанные.Подтверждено ИЛИ Элемент.ТекущиеДанные.Акцептована) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Если НоваяСтрока Тогда
	//	Элемент.ТекущиеДанные.ПодтвердилПользователь=Неопределено;
	//	Элемент.ТекущиеДанные.ПодтвердилДата=Неопределено;
	//	Элемент.ТекущиеДанные.Подтверждено=Ложь;
	//	Элемент.ТекущиеДанные.КоличествоПолучено=0;
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные) тогда
		//	Элемент.ТекущиеДанные.Акцептовал=Неопределено;
		//	Элемент.ТекущиеДанные.АкцептовалДата=Неопределено;
		//	Элемент.ТекущиеДанные.Акцептована=Ложь;
		//	Элемент.ТекущиеДанные.РасходИзБанка=Неопределено;
		//	Элемент.ТекущиеДанные.УИН_Строки= Новый УникальныйИдентификатор;
		//КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаАвансПриИзменении(Элемент)
	
	//ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	//Если ТекущиеДанные.Акцептована Тогда
	//	ТекущиеДанные.Акцептована 		= Ложь;
	//	ТекущиеДанные.Акцептовал 		= Неопределено;
	//	ТекущиеДанные.АкцептовалДата 	= Дата(1, 1, 1);
	//	Сообщить("Акцепт со строки сброшен, так как изменен признак аванса");
	//КонецЕсли;
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;	
	Для Каждого Стр Из Объект.Услуги Цикл
		Стр.Акцептована 		= Ложь;
		Стр.Акцептовал 		= Неопределено;
		Стр.АкцептовалДата 	= Дата(1, 1, 1);
		Стр.Автоакцепт = Ложь;
	КонецЦикла;	
	Сообщить("Акцепт сброшен, так как изменен признак аванса");
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные.СуммаОплаты > ТекущиеДанные.АкцептованаСумма
		И ТекущиеДанные.Акцептована Тогда
		Сообщить("Акцепт со строки сброшен, так как сумма оплаты превысила акцептованную!");
		ТекущиеДанные.Акцептована = Ложь;
		ТекущиеДанные.Акцептовал 		= Неопределено;
		ТекущиеДанные.АкцептовалДата 	= Дата(1, 1, 1);
		ТекущиеДанные.Автоакцепт = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ТекущиеДанные.Подтверждающий = ПодтверждающийПоУмолчаниюСервер(ТекущиеДанные.СтруктурнаяЕдиница);
	
	Если Не ЗначениеЗаполнено(Объект.Акцептант) Тогда
		ТекущиеДанные.Акцептант = АкцептантПоУмолчаниюСервер(ТекущиеДанные.СтруктурнаяЕдиница);
	КонецЕсли;	
	
	//+++ AK suvv 21.05.2018 ИП-00018555
	ИзменитьВидимостьСуммыРемонта();
	//--- AK suvv
	
КонецПроцедуры

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура УслугиСтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	//+++ AK suvv 2018.09.05 ИП-00019410
	Если ПолучитьЗначениеРеквизита(Объект.СтатьяДДС, "Код") = "230116" Тогда
	//--- AK suvv
		СтандартнаяОбработка = Ложь;
		ТекСтруктурнаяЕдиница = Элементы.Услуги.ТекущиеДанные.СтруктурнаяЕдиница;
		Если ЗначениеЗаполнено(ТекСтруктурнаяЕдиница) Тогда 
			ТекСтруктурнаяЕдиница.ПолучитьФорму("НовыйМагазин").Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //--- AK suvv

&НаСервере
Функция АкцептантПоУмолчаниюСервер(СтруктурнаяЕдиница) Экспорт
	ПодтверждающийПоУмолчанию = ПодтверждающийПоУмолчаниюСервер(СтруктурнаяЕдиница);
	Если Не ЗначениеЗаполнено(ПодтверждающийПоУмолчанию) Тогда
		Возврат ПодтверждающийПоУмолчанию;
	КонецЕсли;	
	// Акцептант по умолчанию - это подтверждающий по умолчанию или любой его начальник из акцептантов
	Акцептанты = КэшАкцептантов.НайтиСтроки(Новый Структура ("Акцептант",ПодтверждающийПоУмолчанию));
	Если Акцептанты.Количество()>0 Тогда
		Возврат ПодтверждающийПоУмолчанию;
	КонецЕсли;	
	
	й=0; // на случай зацикливания
	ТекФизЛицо = ПодтверждающийПоУмолчанию.ФизЛицо;
	Пока й<10  Цикл
		ТекФизЛицо = ТекФизЛицо.Руководитель;
		Если Не ЗначениеЗаполнено(ТекФизЛицо) Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Акцептанты = КэшАкцептантов.НайтиСтроки(Новый Структура("ФизЛицо",ТекФизЛицо));
		Если Акцептанты.Количество()>0 Тогда
			Возврат Акцептанты[0].Акцептант;
		КонецЕсли;	
		й=й+1;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаСервере
Функция ПодтверждающийПоУмолчаниюСервер(СтруктурнаяЕдиница)
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Если СтруктурнаяЕдиница.Код = "ЦФО_000" Тогда // ВСЕ
		Возврат Объект.Ответственный;
	КонецЕсли;	
	
	//СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//
	//Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	//Если Помощники.Количество() > 0 Тогда
	//	Если ЗначениеЗаполнено(Помощники[0].РуководительПользователя) Тогда // решили что по умолчания не помощник управляющего, а теперь управляющий
	//		 Возврат Помощники[0].РуководительПользователя;
	//	Иначе	
	//		 Возврат Помощники[0].Пользователь;
	//	КонецЕсли;	 
	//КонецЕсли;	
	//
	//
	//СтруктураОтбора = Новый Структура("Точка", СтруктурнаяЕдиница);
	//
	//КтоНибудь = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	//Если КтоНибудь.Количество() > 0 Тогда
	//	Возврат КтоНибудь[0].Пользователь;
	//КонецЕсли;	
	//
	//Возврат Справочники.Пользователи.ПустаяСсылка();
	
	// новая схема
	
	СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"));
	Управляющие = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если Управляющие.Количество() > 0 Тогда
		Возврат Управляющие[0].Пользователь;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если Помощники.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Помощники[0].РуководительПользователя) Тогда 
			Возврат Помощники[0].РуководительПользователя;
		Иначе	
			Возврат Помощники[0].Пользователь;
		КонецЕсли;	
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Иначе
		СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
		Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
		Если Помощники.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Помощники[0].РуководительПользователя) Тогда 
				Возврат Помощники[0].РуководительПользователя;
			Иначе	
				Возврат Помощники[0].Пользователь;
			КонецЕсли;
		КонецЕсли;
	//--- AK suvv
	КонецЕсли;	
	
КонецФункции

Функция ПомощникУправляющегоПоУмолчаниюСервер(СтруктурнаяЕдиница)
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Если СтруктурнаяЕдиница.Код = "ЦФО_000" Тогда // ВСЕ
		Возврат Объект.Ответственный;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	
	Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если Помощники.Количество() > 0 Тогда
		Возврат Помощники[0].Пользователь;
	//+++ AK suvv 2018.06.08 ИП-00018376.01
	Иначе
		СтруктураОтбора = Новый Структура("Точка, ТипРоли", СтруктурнаяЕдиница, ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы);
		Помощники = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
		Если Помощники.Количество() > 0 Тогда			
			Возврат Помощники[0].Пользователь;
		КонецЕсли;
	//--- AK suvv
	КонецЕсли;	
	
	
	//СтруктураОтбора = Новый Структура("Точка", СтруктурнаяЕдиница);
	//
	//КтоНибудь = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	//Если КтоНибудь.Количество() > 0 Тогда
	//	Возврат КтоНибудь[0].Пользователь;
	//КонецЕсли;	
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура УслугиПодтверждающийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Подтверждающий) Тогда
		Возврат;
	КонецЕсли;
	
	ПодтверждающийПоУмолчанию = ПодтверждающийПоУмолчаниюСервер(ТекущиеДанные.СтруктурнаяЕдиница);
	ПомощникУправляющего = ПомощникУправляющегоПоУмолчаниюСервер(ТекущиеДанные.СтруктурнаяЕдиница);
	Если ПодтверждающийПоУмолчанию = ТекущиеДанные.Подтверждающий или ПомощникУправляющего = ТекущиеДанные.Подтверждающий Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Подтверждающий.ФизЛицо) Тогда
		Сообщить("У выбранного пользователя не проставлено физлицо. Он не может подтверждать!");
		ТекущиеДанные.Подтверждающий = ПодтверждающийПоУмолчанию;
		Возврат;
	КонецЕсли;	
	
	ТекТочка = ТекущиеДанные.СтруктурнаяЕдиница;
	Удовлетворяет = ПодтверждающийУдовлетворяетСервер(ТекТочка,ТекущиеДанные.Подтверждающий);
	Если НЕ Удовлетворяет Тогда
		Сообщить(""+ТекущиеДанные.Подтверждающий + " не может подтверждать получения для структурной единицы " + ТекТочка);
		//ТекущиеДанные.Подтверждающий = ПодтверждающийПоУмолчанию;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодтверждающийУдовлетворяетСервер(Точка,ВыбранныйПодтверждающий)
	
	СтруктураОтбора = Новый Структура("Точка,Пользователь", Точка,ВыбранныйПодтверждающий);
	КтоНибудь = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если КтоНибудь.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура("Точка,РуководительПользователя", Точка,ВыбранныйПодтверждающий);
	КтоНибудь = КэшПодтверждающих.НайтиСтроки(СтруктураОтбора);
	Если КтоНибудь.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	
	// попробуем через руководителей помощника выйти
	ТекФизЛицо = ПомощникУправляющегоПоУмолчаниюСервер(Точка).ФизЛицо;
	
	Если НЕ ЗначениеЗаполнено(ТекФизЛицо.Руководитель) Тогда
		Возврат Ложь;// всё равно никого не найдёт
	КонецЕсли;
	
	СтруктураОтбора=Новый Структура("Физлицо, Руководитель", ТекФизЛицо, ВыбранныйПодтверждающий.ФизЛицо);
	СтрокиКэша = КэшРуководителей.НайтиСтроки(СтруктураОтбора);
	Если СтрокиКэша.Количество()>0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	й = 0;
	Пока ЗначениеЗаполнено(ТекФизЛицо.Руководитель) Цикл
		й = й + 1;
		ТекФизЛицо = ТекФизЛицо.Руководитель;
		СтруктураОтбора = Новый Структура("Физлицо, Руководитель", ТекФизЛицо, ВыбранныйПодтверждающий.ФизЛицо);
		СтрокиКэша = КэшРуководителей.НайтиСтроки(СтруктураОтбора);
		Если СтрокиКэша.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		Если й = 10 Тогда 
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

Функция АкцептантПодходитСервер(Акцептант)
	
	Если ЗначениеЗаполнено(Акцептант) Тогда
		
		Акцептанты = КэшАкцептантов.НайтиСтроки(Новый Структура ("Акцептант",Акцептант));
		Если Акцептанты.Количество()>0 Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура АкцептантПриИзменении(Элемент)
	
	//Для Каждого СтрокаТЧ Из Объект.Оплата Цикл
	//	СтрокаТЧ.Акцептована 	= Ложь;
	//	СтрокаТЧ.Акцептовал 	= Неопределено;
	//	СтрокаТЧ.АкцептовалДата = Дата(1, 1, 1);
	//КонецЦикла;	
	
	Если  ЗначениеЗаполнено(Объект.Акцептант) И НЕ АкцептантПодходитСервер(Объект.Акцептант) Тогда
		Сообщить("Акцептанта " + Объект.Акцептант + " нет в списке активных акцептантов. Он не сможет акцептовать заявку");
		Объект.Акцептант = Неопределено;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.Услуги Цикл
		Стр.Акцептант = Неопределено;
	КонецЦикла;	
КонецПроцедуры

Процедура СтатьДДСПриИзмененииСервер()
	
	//+++АК SUVV 2018.02.28 ИП-00017941
	//Объект.СчетУчетаРасчетов = АК_КонтрольЗадолженности.СчетРасчетовПоСтатьеДДС(Объект.СтатьяДДС);
	Объект.СчетУчетаРасчетов = АК_КонтрольЗадолженности.СчетРасчетовПоСтатьеДДС(Объект.Дата, Объект.СтатьяДДС);
	//---АК SUVV
	ЗаполнитьДопускаетсяЛюбаяДатаПлатежа();
	
КонецПроцедуры	

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(Объект.СтатьяДДС);
	СтатьДДСПриИзмененииСервер();
	Для Каждого Стр Из Объект.Оплата Цикл
		ПроверитьДатуПлатежа(Стр);
	КонецЦикла;	
	
	СтрокиНастроекДляСтатьи = КэшСтатьяДДСВидОперации.НайтиСтроки(Новый Структура("СтатьяДДС",Объект.СтатьяДДС));
	Для Каждого СтрокаНастроек Из СтрокиНастроекДляСтатьи Цикл
		Если ЗначениеЗаполнено(СтрокаНастроек.ВидОперации) И Объект.ВидОперации <> СтрокаНастроек.ВидОперации Тогда
			Объект.ВидОперации = СтрокаНастроек.ВидОперации;
			ВидОперацииПриИзменении(Неопределено);
		КонецЕсли;	
		
	КонецЦикла;
	
	//+++ AK suvv 21.05.2018 ИП-00018555
	ИзменитьВидимостьСуммыРемонта();
	//--- AK suvv
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитовПоВидуОперации();
	ЗаполнитьАкцептантовИПодтверждающих();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты")
		ТОГДА
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Перезаполнить документ значениями по умолчания для данного вида операции?"";";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПервоначальноеЗаполнениеПоВидуОперацииСервер();
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		СтрокиНастроекДляСтатьи = КэшСтатьяДДСВидОперации.НайтиСтроки(Новый Структура("ВидОперации",Объект.ВидОперации));
		Для Каждого СтрокаНастроек Из СтрокиНастроекДляСтатьи Цикл
			Если ЗначениеЗаполнено(СтрокаНастроек.СтатьяДДС) И Объект.СтатьяДДС <> СтрокаНастроек.СтатьяДДС Тогда
				Объект.СтатьяДДС = СтрокаНастроек.СтатьяДДС;
				СтатьяДДСПриИзменении(Неопределено);
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьПоАренде(Ложь); //+++АК LAGP 2018.05.28 ИП-00018788 Изменить правило заполнения "договора" в Заявке на услуги/материалы. Добавлена переменная (ПриОткрытии=Истина)

КонецПроцедуры

&НаСервере
Процедура ПервоначальноеЗаполнениеПоВидуОперацииСервер()
	Док=РеквизитФормыВЗначение("Объект");
	Док.ПервоначальноеЗаполнениеПоВидуОперации();
	ЗначениеВРеквизитФормы(Док,"Объект");
КонецПроцедуры	
&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Услуги.Количество() > 0
		ИЛИ Объект.Оплата.Количество() > 0 Тогда
		Если Вопрос("Очистить табличные части?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			//СтандартнаяОбработка = Ложь;	
			Возврат;
		КонецЕсли;
		Объект.Услуги.Очистить();
		Объект.Оплата.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаАрендыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоПериодаАренды) Тогда
		Объект.НачалоПериодаАренды = НачалоМесяца(Объект.НачалоПериодаАренды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаАрендыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Услуги.Количество() > 0
		ИЛИ Объект.Оплата.Количество() > 0 Тогда
		Если НЕ Вопрос("Очистить табличные части?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			СтандартнаяОбработка = Ложь;	
			Возврат;
		КонецЕсли;
		Объект.Услуги.Очистить();
		Объект.Оплата.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	Если Объект.ЦФО.Код = "ЦФО_12   " Тогда
		Объект.Акцептант = ПолучитьПользователяПоНаименованию("Курвяков Евгений");// пока так, если что - разовьём тему
		//+++ АК pozm ИП-00015046
		Для Каждого Стр Из Объект.Услуги Цикл
			Если Не Стр.Подтверждено Тогда
				Стр.Подтверждающий = Объект.Акцептант;
			КонецЕсли;	
		КонецЦикла;	
		//--- АК pozm ИП-00015046
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрСчетаКомплектацииУслуг(Команда)
	ИмяФ="";
	АдресСчетаВоВременномХранилище=ПолучитьАдресСчетаКомплектации(ИмяФ);
	ПечатьФайла(АдресСчетаВоВременномХранилище,ИмяФ,Ложь);
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресСчетаКомплектации(ИмяФ)
	СтрокаЗаявки = Объект.ДокументОснование.УслугиПоСчетам.Найти(Объект.УИН_СтрокиОснования);
	ИмяФ = СтрокаЗаявки.ИмяФайла;
	Возврат ПоместитьВоВременноеХранилище(СтрокаЗаявки.ХранилищеФайла.Получить(), Новый УникальныйИдентификатор);
КонецФункции	

&НаКлиенте
Процедура ПечатьФайла(Адрес,Имя, СразуПечать = Истина) Экспорт   	
	
	пИмяФайла = Имя;
	
	ДвоичныеДанныеИзХранилища = ПолучитьИзВременногоХранилища(Адрес);
	
	Файл = Новый Файл(пИмяФайла);
	Если СразуПечать = Истина Тогда
		Если Найти(НРег(Файл.Расширение), ".doc") > 0 Тогда
			пПрограмма = """rundll32 SHELL32.DLL,ShellExec_RunDLL winword ""пИмяФайла"" /mFilePrintDefault /mDocClose /mFileExit""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".xls") > 0 Тогда
			пПрограмма = "WScript.exe ""D:\Izbenka\Базы 1С\ExcelPrint.vbs"" ""пИмяФайла""";
			//ИначеЕсли Найти(пИмяФайла, ".ppt") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\powerpnt.exe""";
			//ИначеЕсли Найти(пИмяФайла, "vsd") > 0 Тогда
			//	пПрограмма = """C:\Program Files (x86)\Microsoft Office\Office11\visio.exe""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".bmp") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".dib") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".rle") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".jpeg") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".tif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".gif") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".png") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".ico") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".wmf") > 0
			ИЛИ Найти(НРег(Файл.Расширение), ".emf") > 0 Тогда
			пПрограмма = """C:\Windows\system32\mspaint.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".txt") > 0 Тогда
			пПрограмма = """C:\Windows\system32\notepad.exe"" /p ""пИмяФайла""";
		ИначеЕсли Найти(НРег(Файл.Расширение), ".pdf") > 0 Тогда	
			пПрограмма = """c:\Program Files (x86)\Foxit Software\Foxit Reader\Foxit Reader.exe"" /p ""пИмяФайла""";
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Печать файлов данного формата (" + пИмяФайла + ") не поддерживается");
			Возврат;
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	ИмяКаталога = "\\server00\Temp";//РаботаСФайлами.ПолучитьИмяКаталога(); 	
	
	
	ИмяВременногоФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, Строка(Новый УникальныйИдентификатор) + Файл.Расширение);
	//ДвоичныеДанные = пХранилище.Получить();
	Если ТипЗнч(ДвоичныеДанныеИзХранилища) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеИзХранилища.Записать(ИмяВременногоФайла);
		
		пПрограмма = СтрЗаменить(пПрограмма, "пИмяФайла", ИмяВременногоФайла);
		
		Если СразуПечать = Истина Тогда
			ЗапуститьПриложение(пПрограмма);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;	
	КонецЕсли;    	
	
КонецПроцедуры	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкиВыполнены", Истина); //+++АК VERT 2018.03.22 ИП-00018128 в форме проверки выполнены перед записью
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ЭтоЗаявкаПоАренде = ТекущийОбъект.ЭтоЗаявкаПоАренде();
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		//+++АК POZM 2018.05.31 ИП-00018739 
		//ТекущийОбъект.ВсеДокументыВНаличии();
		ПолныеПрава.ЗарегистрироватьОтложенныйРасчетНаличияПоступленийПоЗаявке(ТекущийОбъект.Ссылка);
		//---АК POZM 
	КонецЕсли;	
	
	ТекущийОбъект.ОбработатьАвтоАкцептСтрок();
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.СчетНаОплату = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			//
			//НоваяСтрока = ПрикрепленныеФайлы.Добавить();
			//НоваяСтрока.Файл = СсылкаНаФайл;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.СчетНаОплату);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	//СпрОбъект.УстановитьНовыйКод("0");
	СпрОбъект.Наименование 	= СтрокаТаблицы.Представление;
	СпрОбъект.Расширение 	= РасширениеРезультата;
	Если Лев(НРег(РасширениеРезультата),4)=".doc" Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(СтрокаТаблицы.ДанныеКартинки));
	Иначе	
		СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	КонецЕсли;	
	Если ЗначениеЗаполнено(Константы.АК_КаталогДляРаспознаванияФайлов.Получить()) = Истина Тогда
		СпрОбъект.ДополнительныеСвойства.Вставить("ОтправлятьНаРаспознование", Истина);
	КонецЕсли;	
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	Если Лев(НРег(ФайлСсылка.Расширение),4)=".doc" Тогда
		Картинка = Новый ДвоичныеДанные(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Иначе	
		Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	КонецЕсли;	
	
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьИсключениеКонтроляСчета(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Сначала нужно записать документ!");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Отменить контроль уникальности счета  для документа?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	
	Если УправлениеИсключениямиКонтроляСчетов Тогда
		ЗарегистрироватьИсключениеКонтроляСчетаДляЗаявкиСервер();
	Иначе
		Сообщить("У Вас нет прав на отмену контроля уникальности счета!");
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИсключениеКонтроляСчетаДляЗаявкиСервер()
	МенеджерЗаписи = РегистрыСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Автор = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Документ = Объект.Ссылка;
	МенеджерЗаписи.НеКонтролироватьУникальностьСчетовНаОплату = Истина;
	МенеджерЗаписи.Записать();
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьИсключениеКонтроляСчета(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Вернуть контроль уникальности счета  для документа?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Если УправлениеИсключениямиКонтроляСчетов Тогда
		УдалитьИсключениеКонтроляСчетаСервер();
	Иначе
		Сообщить("У Вас нет прав на отмену контроля уникальности счета!");
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьИсключениеКонтроляСчетаСервер()
	МенеджерЗаписи = РегистрыСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Объект.Ссылка;
	МенеджерЗаписи.Удалить();
КонецПроцедуры	

&НаКлиенте
Процедура АкцептантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Услуги.Количество()>0 Тогда
		СтрокиБезАкцептантов = Объект.Услуги.НайтиСтроки(Новый Структура("Акцептант",ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")));
		Если СтрокиБезАкцептантов.Количество()<> Объект.Услуги.Количество() Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "Изменение акцептанта сбросит выбранных акцептантов в строках услуг. Продолжить?";
			Ответ = Вопрос(Текст, Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАкцептантПриИзменении(Элемент)
	Объект.Акцептант = Неопределено;
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если НЕ АкцептантПодходитСервер(ТекущиеДанные.Акцептант) Тогда
		Сообщить("Акцептанта " + ТекущиеДанные.Акцептант + " нет в списке активных акцептантов. Он не сможет акцептовать заявку");
		ТекущиеДанные.Акцептант = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАкцептантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "При изменении статьи ДДС будут перепроверены даты платежа в строке оплат. Продолжить?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура АкцептоватьЗаявку() Экспорт
	ТекущийПользователь = ПолучитьТекущегоПользователя();
	Для Каждого Стр Из Объект.Услуги Цикл
		Если Стр.Акцептована Тогда
			Продолжить;
		КонецЕсли;
		Стр.Акцептовал	= ТекущийПользователь;
		
		//+++АК LAGP 2018.06.04 ИП-00018684 Механизм ограничения на акцепт документа Заявка на услуги/материалы 
		//Если УслугиАкцептованиеДоступноКлиент(Стр) И ПроверкаЛимитовАвансовУспешна() Тогда
		Если УслугиАкцептованиеДоступноКлиент(Стр) И ПроверкаЛимитовАвансовУспешна() И ПроверкаЛимитовЗаявокУспешна(ТекущийПользователь, Стр.Сумма) И ПроверкаЛимитовРасходовНаТочкиУспешна(Стр.СтруктурнаяЕдиница,Стр.Сумма) Тогда
		//---АК LAGP	
			
			Стр.Акцептована = Истина;
			Стр.АкцептовалДата	= ТекущаяДата();
			Стр.АвтоАкцепт = Ложь;
		Иначе
			Стр.Акцептовал	= Неопределено;
		КонецЕсли;	
	КонецЦикла;
	//+++ АК pozm ИП-00015046
	Если ТекущийПользователь = ПолучитьПользователяПоНаименованию("Курвяков Евгений") Тогда// пока так, если что - разовьём тему
		ВсеПозицииДокументаПолучены(Неопределено); //
	КонецЕсли;	
	//--- АК pozm ИП-00015046
КонецПроцедуры	

&НаКлиенте
Процедура ОтчетПоТТ(Команда)
	ИмяТекущегоОтчета = "ОтчетПоТТ";
	Точка = Элементы.Услуги.ТекущиеДанные.СтруктурнаяЕдиница;
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СбросНастроек",Истина);
	ПараметрыОтчета.Вставить("Точка",Точка);
	СформироватьОтчетПоТТ(ПараметрыОтчета);
	Элементы.ОтчетСтраница.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ОтчетСтраница;
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетПоТТ(ПараметрыОтчета)
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Если ПараметрыОтчета.СбросНастроек Тогда	
		СхемаКомпоновкиДанных = Документы.ЗаявкаНаУслугиМатериалы.ПолучитьМакет("МакетОтчетаПоТТ"); 
		
		//СхемаКомпоновкиДанных.Параметры.Магазин.Значение = ПараметрыОтчета.Точка;
		
		ЭтаФорма["АдресСхемы"] = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		Для Каждого ЭлементОтбора Из СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы	Цикл
			Если СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Магазин" Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ПравоеЗначение = ПараметрыОтчета.Точка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Иначе
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТаблицаОтчета.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТаблицаОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаОтчетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОписаниеОбработкиРасшифровки = ОбработатьРасшифровкуКл( Расшифровка, СтандартнаяОбработка); 
	
	Если ОписаниеОбработкиРасшифровки <> Неопределено Тогда
		ОбработатьРасшифровкуОтчета(ОписаниеОбработкиРасшифровки);	
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработатьРасшифровкуОтчета(ОписаниеОбработкиРасшифровки)
	
	ОбработатьРасшифровку(ОписаниеОбработкиРасшифровки);
	
КонецПроцедуры

Процедура ОбработатьРасшифровку(ОписаниеОбработкиРасшифровки) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ЭтаФорма["АдресДанныхРасшифровки"]);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма["АдресСхемы"]);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, 
	ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	//
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ТаблицаОтчета.Очистить();
	ПроцессорВывода.УстановитьДокумент(ТаблицаОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЭтаФорма["АдресДанныхРасшифровки"] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Функция ОбработатьРасшифровкуКл( Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки,
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия);
	
	ОписаниеОбработкиРасшифровки = Неопределено;
	
	Если Не (ПараметрВыполненногоДействия = Неопределено) Тогда
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрВыполненногоДействия);
			
		Иначе
			
			ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Расшифровка, ПараметрВыполненногоДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОбработкиРасшифровки;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОтчетаОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СбросНастроек",Ложь);
	Если ИмяТекущегоОтчета = "ОтчетПоТТ" Тогда
		СформироватьОтчетПоТТ(ПараметрыОтчета);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчет(Команда)
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику") Тогда
		ТекущиеДанные.Аванс = Истина;
	ИначеЕсли НоваяСтрока Тогда
		ТекущиеДанные.Аванс = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерСчета) И ЗначениеЗаполнено(Объект.ДатаСчета) И Не ЗначениеЗаполнено(ТекущиеДанные.НазначениеПлатежа) И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику") ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику") ) Тогда
		ТекущиеДанные.НазначениеПлатежа = ТекущиеДанные.НазначениеПлатежа + "Оплата по счету № "+СокрЛП(Объект.НомерСчета)+" от "+Формат(Объект.ДатаСчета,"ДФ=dd.MM.yyyy");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		АК_КонтрольЗадолженности.ЗаполнитьРазделыУчетаКонтрагентаПоДокументу(Объект.Ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ВидПеречисленияВБюджет) Тогда
		Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
	КонецЕсли;
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога Тогда
		
		Объект.КодОКТМО = Объект.Организация.КодОКТМО;
		
		Если Объект.ДоговорКонтрагента.ПеречислениеВБюджет Тогда
			Объект.КодБК=Объект.ДоговорКонтрагента.КодБК;
			Объект.КодОКТМО=Объект.ДоговорКонтрагента.КодОКТМО;
		КонецЕсли;	
		
		Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
			Объект.СтатусСоставителя   = ?(Объект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "01", "09");
			Объект.ПоказательОснования = Элементы.ПоказательОснования.СписокВыбора[0].Значение;
			Объект.ПоказательТипа      = Элементы.ПоказательТипа.СписокВыбора[0].Значение;
			Объект.ПоказательПериода   = "МС." + Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Объект.Дата), "ЧГ=");
			
			УстановитьРеквизитыПоказателяПериода();
			
		ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			
			Объект.СтатусСоставителя   = ?(Объект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "06", "17");
			Объект.ПоказательОснования = Элементы.ПоказательОснованияТаможня.СписокВыбора[0].Значение;
			Объект.ПоказательТипа      = Элементы.ПоказательТипаТаможня.СписокВыбора[0].Значение;
			Объект.ПоказательПериода   = "";
			Объект.ПоказательНомера    = "0";
			
		Иначе
			
			Объект.СтатусСоставителя   = "08";
			Объект.ПоказательОснования = "0";
			Объект.ПоказательТипа      = "0";
			Объект.ПоказательПериода   = "0";
			Объект.ПоказательНомера    = "0";
			
		КонецЕсли;
		
	Иначе
		
		Объект.КодБК               = "";
		Объект.СтатусСоставителя   = "";
		Объект.ПоказательОснования = "";
		Объект.ПоказательТипа      = "";
		Объект.ПоказательПериода   = "";
		Объект.ПоказательНомера    = "";
		Объект.ПоказательДаты      = "";
		Объект.КодОКТМО 			= "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПоказателяПериода()
	
	Если Объект.ПоказательПериода = "0" ИЛИ ПустаяСтрока(Объект.ПоказательПериода) ИЛИ ПустаяСтрока(СтрЗаменить(Объект.ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		
		СтрокаВидаПериода = Лев(Объект.ПоказательПериода, 2);
		СтрокаПериода     = Сред(Объект.ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(Объект.ПоказательПериода, 7);
		
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		
		Попытка
			
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
			
		Исключение
			
			Объект.ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоказательПериода();
	
	
	Если ПериодичностьУплаты = "0" Тогда
		
		Объект.ПоказательПериода = "0";
		
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		
		Объект.ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		Объект.ПоказательПериода = ПериодичностьУплаты + "." + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=") + "." + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПериодичностьУплаты) Тогда
		ПериодичностьУплаты = "0";
	КонецЕсли;
	
	Если ПериодичностьУплаты <> "0" И ПериодичностьУплаты <> "-" Тогда
		
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(ТекущаяДата());
		КонецЕсли;
		
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
		
	Иначе
		
		ГодПлатежа = 0;
		
	КонецЕсли;
	
	УстановитьПоказательПериода();
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовПлатежаВБюджет()
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Если ПустаяСтрока(ПериодичностьУплаты) ИЛИ (ПериодичностьУплаты = "0") Тогда
			Элементы.ГруппаПоказательПериода.Видимость = Ложь;
			
		Иначе
			Элементы.ГруппаПоказательПериода.Видимость = Истина;
			Если ПериодичностьУплаты = "-" Тогда
				Элементы.ДатаПлатежа.Видимость = Истина;
				Элементы.ГодПлатежа.Видимость = Ложь;
				Элементы.ПериодПлатежа.Видимость = Ложь;
			Иначе
				Элементы.ДатаПлатежа.Видимость = Ложь;
				Элементы.ГодПлатежа.Видимость = Истина;
				Элементы.ПериодПлатежа.Видимость        = НЕ ПериодичностьУплаты = "ГД";
				Если ПериодичностьУплаты = "МС" Тогда
					Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
					Элементы.ПериодПлатежа.Заголовок     = "Месяц:";
				ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
					Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
					Элементы.ПериодПлатежа.Заголовок     = "Квартал:";
				ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
					Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
					Элементы.ПериодПлатежа.Заголовок     = "Полугодие:";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПлатежаПриИзменении(Элемент)
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПлатежаПриИзменении(Элемент)
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПлатежаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	//+++ АК bara 17.11.17 17242
	НазначениеПлатежа = "Перевод на бизнес-счет предприятия первоначального взноса для выпуска корпоративной карты "+Объект.ФизЛицо;
	//--- АК bara 17.11.17 17242

	Если Объект.Оплата.Количество()>0 Тогда
		Объект.Оплата[0].НазначениеПлатежа = НазначениеПлатежа;
	Иначе
		НС = Объект.Оплата.Добавить();
		НС.НазначениеПлатежа = НазначениеПлатежа;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КорпКартаПриИзменении(Элемент)
	НазначениеПлатежа = "Пополнение бизнес-карты сотрудника ("+Объект.КорпКарта+"). Без НДС.";
	Если Объект.Оплата.Количество()>0 Тогда
		Объект.Оплата[0].НазначениеПлатежа = НазначениеПлатежа;
	Иначе
		НС = Объект.Оплата.Добавить();
		НС.НазначениеПлатежа = НазначениеПлатежа;
	КонецЕсли;	
	
	ПроверитьСостояниеКорпКарты(Объект.КорпКарта); //+++АК LAGP 2017.12.14 ИП-00017436
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаймСпособПогашенияПриИзменении(Элемент, Перезаполнять = Истина)
	Если Объект.ЗаймСпособПогашения = 1 Тогда
		Элементы.ГруппаПогашенияЧастями.Видимость = Истина;
	Иначе
		Элементы.ГруппаПогашенияЧастями.Видимость = Ложь;
	КонецЕсли;	
	Если Перезаполнять Тогда
		ПерезаполнитьТЧЗаймаСервер();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаймТипПогашенияЧастямиПриИзменении(Элемент, Перезаполнять = Истина)
	Если Объект.ЗаймТипПогашенияЧастями = 0 Тогда
		Элементы.ЗаймПроцентПогашенияОтСуммыПоставки.Видимость = Истина;
		Элементы.ЗаймСуммаПогашенияВМесяц.Видимость = Ложь;
	Иначе
		Элементы.ЗаймПроцентПогашенияОтСуммыПоставки.Видимость = Ложь;
		Элементы.ЗаймСуммаПогашенияВМесяц.Видимость = Истина;
	КонецЕсли;
	Если Перезаполнять Тогда
		ПерезаполнитьТЧЗаймаСервер();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаймСуммаПогашенияВМесяцПриИзменении(Элемент)
	Если Объект.ЗаймСуммаПогашенияВМесяц=0 Тогда 
		Возврат;
	КонецЕсли;
	
	СуммаЗаявки = Объект.Услуги.Итог("Сумма");
	
	//Если СуммаЗаявки/Объект.ЗаймСуммаПогашенияВМесяц<>Цел(СуммаЗаявки/Объект.ЗаймСуммаПогашенияВМесяц) Тогда
	
	//Сообщить("Ежемесячная сумма погашения должна быть кратна сумме заявки");
	//Иначе
	Объект.ЗаймПериодДействияКонец = КонецМесяца(ДобавитьМесяц(Объект.ЗаймПериодДействияНачало,Цел(СуммаЗаявки/Объект.ЗаймСуммаПогашенияВМесяц)));
	//КонецЕсли;	
	ПерезаполнитьТЧЗаймаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаймПроцентПогашенияОтСуммыПоставкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СуммыВНазначенияПлатежа(Команда)
	СуммыВНазначенияПлатежаСервер();
КонецПроцедуры

&НаСервере
Процедура СуммыВНазначенияПлатежаСервер()
	Док=РеквизитФормыВЗначение("Объект");
	Док.ПроставитьСуммуВНазначенияПлатежа();
	ЗначениеВРеквизитФормы(Док,"Объект");
КонецПроцедуры	

&НаКлиенте
Процедура ПогашениеЗаймаОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймаОперацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТЧЗаймаСервер()
	Док = РеквизитФормывЗначение("Объект");
	Док.ПерезаполнитьТЧЗайма();
	ЗначениеВРеквизитФормы(Док,"Объект");
КонецПроцедуры	


//++ АК LUZA 20170818 ИП-00016332
&НаКлиенте
Процедура РедактироватьРаспознанныеДанные(Команда)
	Если ЗначениеЗаполнено(Объект.СчетНаОплату) Тогда
		ПараметрыФормы = Новый Структура("Ключ, Заявка", Объект.СчетНаОплату, Объект.Ссылка);	
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаЭлемента", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры
//-- АК LUZA 20170818 ИП-00016332
&НаКлиенте
Процедура СтатьяДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.ПроверкаВыбранногоЗначения(ВыбранноеЗначение,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПриИзменении(Элемент)
	Объект.СканПодтвердил = Неопределено;
	Объект.СканПодтвердилДата = Дата(1,1,1);
КонецПроцедуры
//+++ АК pozm 09.10.2017 ИП-00015260
&НаКлиенте
Процедура АктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл с изображением акта";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Акт = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура АктОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Акт);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл с изображением УПД";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.УПД = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.УПД);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл с изображением счета-фактуры";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.СчетФактура = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.СчетФактура);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл с изображением";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. "+ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Приложение = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриложениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Приложение);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБезПроведения(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Новый документ нужно записывать обычным способом");
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("В документ будут записаны только первичные документы. Другие изменения не будут сохранены. Продолжить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		
		ЗаписатьБезПроведенияСервер();
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБезПроведенияСервер()
	Док = Объект.Ссылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(Док,Объект,"Акт,СчетФактура,Приложение,УПД,СчетНаОплату,НомерСчета,ДатаСчета");
	Док.ОбменДанными.Загрузка = Истина;
	Док.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры
//--- АК pozm 09.10.2017 ИП-00015260

//koro 17100 30.10.2017
&НаСервере
Процедура ОбновитьОтветственного()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элементы.Ответственный1.Видимость = Истина;
			если ЗначениеЗаполнено(Объект.Контрагент.ОсновнойБухгалтерПокупателя) Тогда
				ОтветственныйСотрудник = Объект.Контрагент.ОсновнойБухгалтерПокупателя.ФизЛицо;
			Иначеесли  ЗначениеЗаполнено(Объект.Контрагент.ОсновнойМенеджерПокупателя) Тогда
				ОтветственныйСотрудник = Объект.Контрагент.ОсновнойМенеджерПокупателя.ФизЛицо;
			Иначе	
				ОтветственныйСотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();	
			КонецЕсли;
		Иначе
			ОтветственныйСотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();
			Элементы.Ответственный1.Видимость = Ложь;
		КонецЕсли;							
	Иначе 
		ОтветственныйСотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();
		Элементы.Ответственный1.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

//+++АК VERT 2018.03.21 ИП-00018128
&НаСервере
Функция ПроверитьРеквизитыНаСервере()

	Возврат Документы.ЗаявкаНаУслугиМатериалы.ПроверитьКорректностьРеквизитов(Объект);
	
КонецФункции	

//+++АК LAGP 2017.12.14 ИП-00017436
&НаСервереБезКонтекста
Процедура ПроверитьСостояниеКорпКарты(КорпКарта)
	
	Если КорпКарта.Закрыта Тогда
		Сообщить("Используемая корпоративная карта закрыта!");
	КонецЕсли;	
	Если КорпКарта.ПометкаУдаления Тогда
		Сообщить("Используемая корпоративная карта помечена на удаление!");
	КонецЕсли;	
	
КонецПроцедуры	

//+++АК LAGP 2018.02.15 ИП-00017849
&НаСервереБезКонтекста
Функция ПолучитьИННКонтрагента(мКонтрагент)
	
	Если ЗначениеЗаполнено(мКонтрагент) Тогда 
		Возврат мКонтрагент.ИНН;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

//+++ AK suvv 04.04.2018 ИП-00018071
Функция СформироватьПлатежПоОплатеНДФЛ(СуммаНДФЛ)
	
	НовДок = Документы.ЗаявкаНаУслугиМатериалы.СоздатьДокумент();
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Колосова,
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиницаВсе
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы,
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Код = ""Колосова Екатерина""
	|	И СтруктурныеЕдиницы.Код = ""ЦФО_000""";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Колосова = Выборка.Колосова;
	СтруктурнаяЕдиницаВсе = Выборка.СтруктурнаяЕдиницаВсе;
	
	НовДок.Дата = Объект.Дата;
	НовДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовДок.Организация = Объект.Организация;
	НовДок.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
	НовДок.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НалогиСФОТ;
	НовДок.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога;	
	НовДок.Комментарий = "Оплата НДФЛ за <" + Объект.Контрагент + ">";
	НовДок.СуммаДокумента = СуммаНДФЛ;
	НовДок.ЦФО = СтруктурнаяЕдиницаВсе;
	НовДок.ПоступлениеОднойДатой = Объект.ПоступлениеОднойДатой;
	НовДок.ДокументОснование = Объект.Ссылка;
	НовДок.Акцептант = Объект.Акцептант;
	НовДок.ВсеДокументыВНаличии = Объект.ВсеДокументыВНаличии;
	НовДок.ПоказательПериода   = "МС." + Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Объект.Дата), "ЧГ=");
	НовДок.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	НовДок.НачалоПериодаАренды = Объект.НачалоПериодаАренды;
	НовДок.ПоказательОснования = 0;
	НовДок.ПоказательТипа = 0;
	НовДок.СтатьяДДС = Объект.СтатьяДДС;
	
	СтрокаОплаты = НовДок.Оплата.Добавить();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ОбразецПлатежногоПорученияНДФЛ) Тогда
		Шаблон = Объект.ДоговорКонтрагента.ОбразецПлатежногоПорученияНДФЛ.Скопировать();
		ЗаполнитьЗначенияСвойств(НовДок, Шаблон, , "ВидОперации");	
		СтрокаОплаты.НазначениеПлатежа = Шаблон.НазначениеПлатежа;
		НовДок.СтатьяДДС = Шаблон.СтатьяДвиженияДенежныхСредств;
	Иначе
		НовДок.Комментарий = "Оплата НДФЛ за <" + Объект.Контрагент + ">";
		НовДок.Контрагент = Справочники.Контрагенты.НайтиПоКоду(?(Найти(Объект.Организация.Наименование,"Луг да Поле")>0,"000000283","000000258")); 
		НовДок.СчетКонтрагента = НовДок.Контрагент.ОсновнойБанковскийСчет;
		НовДок.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		НовДок.КодОКТМО = НовДок.Организация.КодОКТМО;
		НовДок.КодБК = "18210102010011000110";
		НовДок.СтатусСоставителя = "02";
	КонецЕсли;
	
	СтрокаОплаты.СуммаОплаты = СуммаНДФЛ;
	СтрокаОплаты.УИН_Строки = Новый УникальныйИдентификатор;
	СтрокаОплаты.НазначениеПлатежа = "Оплата НДФЛ за " + Формат(Объект.Дата, "ДФ=ММММ") + " " + Формат(Объект.Дата, "ДФ=гггг") + " г. " + Строка(Объект.Контрагент) + " по договору аренды " + Объект.ДоговорКонтрагента.Номер + " от " + Формат(Объект.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy") + "г. Сумма "+ Формат(СуммаНДФЛ, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	СтрокаОплаты.ДатаПлатежа = ТекущаяДата();
	
	СтрокаУслуг = НовДок.Услуги.Добавить();
	СтрокаУслуг.СтруктурнаяЕдиница = СтруктурнаяЕдиницаВсе;
	СтрокаУслуг.Подтверждающий = Колосова;
	СтрокаУслуг.Сумма = НовДок.СуммаДокумента;
	СтрокаУслуг.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	СтрокаУслуг.Количество = 1;
	СтрокаУслуг.Цена = СтрокаУслуг.Сумма;
	СтрокаУслуг.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Налог");
		
	Попытка НовДок.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Заявка на оплату НДФЛ " + НовДок + " успешно создана.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат НовДок;
	
КонецФункции //--- AK suvv

//+++АК LAGP 2018.05.18 ИП-00018696 Помощник заполнения назначения платежа.
&НаКлиенте
Процедура ДатаСчетаПриИзменении(Элемент)
	
	ДополнитьНазначение();	
	
КонецПроцедуры

//+++АК LAGP 2018.05.18 ИП-00018696 Помощник заполнения назначения платежа.
&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	ДополнитьНазначение();	
	
КонецПроцедуры

//+++АК LAGP 2018.05.18 ИП-00018696 Помощник заполнения назначения платежа.
&НаКлиенте
Процедура ДополнитьНазначение()
	
	//+++АК LAGP 2018.07.17 ИП-00019260 Формирование назначения платежа для всех строк одинаковое.
	СтрокаОплатНайдена = Неопределено;
	Для каждого СтрокаОплата Из Объект.Оплата Цикл
		Если Лев(СтрокаОплата.НазначениеПлатежа, 18) =	"Оплата по счету № " Тогда
			СтрокаОплатНайдена = СтрокаОплата;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НЕ СтрокаОплатНайдена = Неопределено Тогда
		РедактируемаяСтрока = СтрокаОплатНайдена;
	Иначе
		РедактируемаяСтрока = Объект.Оплата.Добавить();
	КонецЕсли;	
	
	ЕстьНоменклатураПрочее = ПроверитьНаПрочее();
	Если ЕстьНоменклатураПрочее Тогда
		Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, Неопределено);
		ПоказатьВопрос(Оповещение, "Исправьте наименование номенклатуры. ""Прочее"" не должно быть!", РежимДиалогаВопрос.ОК, 10);	
		Возврат;
	КонецЕсли;
	
	СобраннаяНадписьНазначенияПлатежа = "Оплата по счету № " + Объект.НомерСчета + " от " + ?(ЗначениеЗаполнено(Объект.ДатаСчета), Формат(Объект.ДатаСчета, "ДФ=dd.MM.yyyy"), " --- ");
		
	Если Объект.Услуги.Количество() > 0 Тогда
		НоменклатураНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Услуги[0].Номенклатура, "Наименование");
		СобраннаяНадписьНазначенияПлатежа = СобраннаяНадписьНазначенияПлатежа + " за " + НоменклатураНаименование;	
	КонецЕсли;	
	
	РедактируемаяСтрока.НазначениеПлатежа = СобраннаяНадписьНазначенияПлатежа;
	
	Если СтрДлина(РедактируемаяСтрока.НазначениеПлатежа) > 200 Тогда
		Ответ = Вопрос("Обратите внимание, наименование номенклатуры не полностью вошло в назначение платежа: должно быть не более 200 символов.", РежимДиалогаВопрос.ОК);
			
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			РедактируемаяСтрока.НазначениеПлатежа = Лев(РедактируемаяСтрока.НазначениеПлатежа, 199) + ".";			
		КонецЕсли;	
	КонецЕсли;
	
	//Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
	//	НоваяСтрокаОплат = Объект.Оплата.Добавить();
	//	НоменклатураНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Наименование");
	//	НоваяСтрокаОплат.НазначениеПлатежа = СобраннаяНадписьНазначенияПлатежа + " за " + НоменклатураНаименование;	
	//	
	//	Если СтрДлина(НоваяСтрокаОплат.НазначениеПлатежа) > 200 Тогда
	//		Ответ = Вопрос("Обратите внимание, наименование номенклатуры не полностью вошло в назначение платежа: должно быть не более 200 символов.", РежимДиалогаВопрос.ОК);
	//		
	//		Если Ответ = КодВозвратаДиалога.ОК Тогда
	//			НоваяСтрокаОплат.НазначениеПлатежа = Лев(НоваяСтрокаОплат.НазначениеПлатежа, 199) + ".";			
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;	
	//---АК LAGP 2018.07.17
	
КонецПроцедуры	

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура ИзменитьВидимостьСуммыРемонта();
	  
	Если ПолучитьЗначениеРеквизита(Объект.СтатьяДДС, "Код") = "230116" Тогда 
		Сумма = ПолучитьОбщуюСуммуРемонта();
		Если Сумма > 0 Тогда
			СуммаРемонта = "Общая сумма ремонта: " + Сумма;
			Элементы.СуммаРемонта.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.СуммаРемонта.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 21.05.2018 ИП-00018555
&НаСервере
Функция ПолучитьСуммуПревышенияЛимитаПоСЕ(СЕ, СуммаПоСЕ)
	
	СуммаСУчетомТекДокумента = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница,
	|	СУММА(ЗаявкаНаУслугиМатериалыУслуги.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы.Услуги КАК ЗаявкаНаУслугиМатериалыУслуги
	|ГДЕ
	//+++ AK suvv 2018.09.05 ИП-00019410
	|   ЗаявкаНаУслугиМатериалыУслуги.Ссылка.СтатьяДДС.Код = ""230116""
	//|	ЗаявкаНаУслугиМатериалыУслуги.Ссылка.КонтрольСтоимостиРабот
	//--- AK suvv
	|	И ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И НЕ ЗаявкаНаУслугиМатериалыУслуги.Ссылка.ПометкаУдаления
	|	И ЗаявкаНаУслугиМатериалыУслуги.Акцептована
	|	И ЗаявкаНаУслугиМатериалыУслуги.Ссылка <> &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаУслугиМатериалыУслуги.СтруктурнаяЕдиница";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СЕ); 
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаСУчетомТекДокумента = СуммаСУчетомТекДокумента + Выборка.Сумма;
	КонецЕсли;
	
	СуммаСУчетомТекДокумента = СуммаСУчетомТекДокумента + СуммаПоСЕ;
	Если СуммаСУчетомТекДокумента > СЕ.ОбщаяСтоимость Тогда 
		Возврат СуммаСУчетомТекДокумента - СЕ.ОбщаяСтоимость;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции //--- AK suvv

//+++ AK suvv 21.05.2018 ИП-00018555
&НаСервере
Функция ПолучитьЗначениеРеквизита(НазваниеОбъекта, НазваниеРеквизита)
	
	Возврат НазваниеОбъекта[НазваниеРеквизита];
	
КонецФункции //--- AK suvv

//+++АК LAGP 2018.05.18 ИП-00018696 Помощник заполнения назначения платежа.
&НаКлиенте
Процедура ПоказатьВопросЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
	КонецЕсли;	
	
КонецПроцедуры

//+++АК LAGP 2018.05.25 ИП-00018696 Просьба Павла Жмако.
&НаСервере
Функция ПроверитьНаПрочее()
	
	ЕстьНоменклатураПрочее = Ложь;
	Если Объект.Услуги.Количество() > 0 Тогда
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			НоменклатураНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Наименование");
			Если Найти(НоменклатураНаименование, "Прочие") ИЛИ Найти(НоменклатураНаименование, "Прочее") Тогда    //+++АК LAGP 2018.05.25 ИП-00018696 Просьба Павла Жмако.
				Возврат Истина;				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

//+++ AK suvv 20.06.2018 ИП-00018193
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	ОбновитьНадписьИтогоПоДокументу();
КонецПроцедуры  //--- AK suvv

//+++АК POZM 2018.07.29 ИП-00019333 
&НаКлиенте
Процедура ЗагрузитьУслуги(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВариантРасчетаНДС", Объект.ВариантРасчетаНДС);
	ПараметрыФормы.Вставить("Партнер", Объект.Контрагент);
	
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЗагружатьСуммы", Истина);
	ПараметрыФормы.Вставить("ЗагружатьКоличество", Истина);
				
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработатьВыборСервер(ВыбранноеЗначение); 
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборСервер(ВыбранноеЗначение)
	ТЗУслуг = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Для Каждого Стр Из ТЗУслуг Цикл
		НС = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Стр);
		НС.Подтверждающий = ПодтверждающийПоУмолчаниюСервер(НС.СтруктурнаяЕдиница);
	
		Если Не ЗначениеЗаполнено(Объект.Акцептант) Тогда
			НС.Акцептант = АкцептантПоУмолчаниюСервер(НС.СтруктурнаяЕдиница);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	
//---АК POZM 

//+++ AK suvv 2018.09.05 ИП-00019410
&НаКлиенте
Процедура СуммаРемонтаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСЕ = Объект.Услуги[0].СтруктурнаяЕдиница;
	Если ТекСЕ <> неопределено Тогда 
		 ОткрытьФорму("Справочник.СтруктурныеЕдиницы.Форма.НовыйМагазин", Новый Структура("Ключ", ТекСЕ), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры //--- AK suvv
//---АК POZM 

//+++АК POZM 2018.09.11 ИП-00018684.01 
&НаСервере
Функция ПроверкаЛимитовРасходовНаТочкиУспешна(СтруктурнаяЕдиница,Сумма)
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат Истина;
	КонецЕсли;	
	Если Объект.ЦФО <> УправлениеРазвития Тогда
		Возврат Истина;
	КонецЕсли;	
	СтрокиОстатокПоТочке = ОстаткиЛимитовТочек.НайтиСтроки(Новый структура("Точка",СтруктурнаяЕдиница));
	Если СтрокиОстатокПоТочке.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаОстатокПоТочке = СтрокиОстатокПоТочке[0];
	
	Если СтрокаОстатокПоТочке.Остаток < Сумма Тогда
		
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "По точке "+СтруктурнаяЕдиница + " превышен лимит расходов на "+(-СтрокаОстатокПоТочке.Остаток + Сумма) + " (" + Объект.Ссылка + ")";
	    	    
	    Сообщение.УстановитьДанные(Объект);
	    Сообщение.Сообщить();
		
		Если Не ПравоПревышенияЛимитаПоТТ Тогда
			
			//+++АК POZM 2018.10.09 ИП-00018684.02    
			ЗаписьРегистра = РегистрыСведений.ДокументыПревысившиеЛимитыТочек.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.СсылкаНаДокумент = Объект.Ссылка;
			ЗаписьРегистра.Прочитать();			
			Если НЕ ЗаписьРегистра.Выбран() Тогда
				ЗаписьРегистра.СсылкаНаДокумент = Объект.Ссылка;
				ЗаписьРегистра.Записать(Ложь);
			КонецЕсли;
			Объект.Акцептант = ПолучитьПользователяПоНаименованию("Курвяков Евгений"); 
			//---АК POZM 
			Возврат Ложь;
		Иначе
			
		КонецЕсли;	
		
	КонецЕсли;
	Возврат Истина;
КонецФункции		
//---АК POZM 

//+++АК LAGP 2018.10.21 ИП-00018521.01 Добавлена колонка "Сумма всего с НДФЛ" для дальнейшего расчёта в отчёте "Реестр налоговый агент по уплате НДФЛ аренда"
&НаСервереБезКонтекста
Функция ФизЛицоАренда(Контрагент)
	
	Если ЗначениеЗаполнено(Контрагент) 
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо")
		И НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОКОПФ")) Тогда
		                                                                                                        
		Родитель 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Родитель");
		КодРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Код");
		
		Возврат КодРодителя = "000000466"; //Если в папке аренда, то наш случай.
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

