
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	//Вставить содержимое обработчика.
	//ПараметрыФормы = Новый Структура("", );
	//ОткрытьФорму("Документ.ЗаявкаНаУслугиМатериалы.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	Если ПараметрыВыполненияКоманды.Источник.АкцептированиеДоступно Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = ?(ПараметрКоманды.Количество()>1,"ru = ""Акцептовать выделенные документы?"";","ru = ""Акцептовать документ?"";");
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли; 
        //АкцептоватьДокументыСервер(ПараметрКоманды);
		АкцептоватьДокументы(ПараметрКоманды);
	Иначе
		Сообщить("У вас нет прав акцепта заявок");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура АкцептоватьДокументы(МассивДокументов)
	//Все проверки в форме
	Парам = Новый Структура;
	Для Каждого Док Из МассивДокументов Цикл
		Парам.Вставить("Ключ",Док.Ссылка);
		ФормаДока = ПолучитьФорму("Документ.ЗаявкаНаУслугиМатериалы.Форма.ФормаДокумента",Парам);
		ФормаДока.АкцептоватьЗаявку();
		//+++АК SHEP 2017.11.21 ИП-00017244
		//ФормаДока.Записать(Новый Структура("РежимЗаписи" ,РежимЗаписиДокумента.Проведение));
		ФормаДока.Записать(Новый Структура("РежимЗаписи,Акцептование" ,РежимЗаписиДокумента.Проведение, Истина));
		//---АК SHEP 2017.11.21
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура АкцептоватьДокументыСервер(МассивДокументов)
	
	//ТекстЗапроса="ВЫБРАТЬ
	//			 |	СоответствиеОбъектРольСрезПоследних.Объект КАК Точка,
	//			 |	СоответствиеОбъектРольСрезПоследних.ТипРоли,
	//			 |	СоответствиеОбъектРольСрезПоследних.РольПользователя КАК Роль,
	//			 |	РолиПользователейСоставРоли.Сотрудник КАК ФизЛицо,
	//			 |	Пользователи.Ссылка КАК Пользователь
	//			 |ИЗ
	//			 |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	//			 |			,
	//			 |			Объект ССЫЛКА Справочник.СтруктурныеЕдиницы
	//			 |				И ТипРоли В (&ТипыРолей)) КАК СоответствиеОбъектРольСрезПоследних
	//			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	//			 |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	//			 |			ПО РолиПользователейСоставРоли.Сотрудник = Пользователи.ФизЛицо
	//			 |		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	ФизическиеЛица.Руководитель,
	//			 |	ФизическиеЛица.Ссылка КАК ФизЛицо,
	//			 |	ЕСТЬNULL(ПользователиСПравомАкцептаОплат.Активен, ЛОЖЬ) КАК Акцептант
	//			 |ИЗ
	//			 |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСПравомАкцептаОплат КАК ПользователиСПравомАкцептаОплат
	//			 |		ПО ФизическиеЛица.Ссылка = ПользователиСПравомАкцептаОплат.Пользователь.ФизЛицо";
	//Запрос=Новый Запрос(ТекстЗапроса);			 
	//
	//СписокТиповРолей = Новый Массив;
	//СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//СписокТиповРолей.Добавить(ПланыВидовХарактеристик.ТипыРолейПользователя.НайтиПоКоду("UpravlyayushchiiPoRoznice"));
	//
	//Запрос.УстановитьПараметр("ТипыРолей",СписокТиповРолей);
	//Результат = Запрос.ВыполнитьПакет();
	//ТабРуковТочек=Результат[0].Выгрузить();
	/////
	//ТабПодчинения=Результат[1].Выгрузить();
		
	Для Каждого Док Из МассивДокументов Цикл
		Если Док.Проведен И  Док.Акцептант = ПараметрыСеанса.ТекущийПользователь Тогда
			ДокОбъект=Док.ПолучитьОбъект();
			ДокОбъект.АкцептоватьДокумент();
			//ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//Сообщить("Акцептован документ "+Док);
	//	ИначеЕсли Не ЗначениеЗаполнено(Док.Акцептант) Тогда
	//		Таб=Док.Услуги.Выгрузить();
	//		Таб.Свернуть("СтруктурнаяЕдиница");
	//		Если Таб.Количество()>1 ИЛИ (Таб.Количество() = 1 И Таб[0].СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы<>Перечисления.ТипыСтруктурныхЕдиниц.Розница ) Тогда
	//			Немагазин = истина;
	//		Иначе
	//			Немагазин = Ложь;
	//		КонецЕсли;	
	//		Если Немагазин Тогда // любой рук автора
	//			НачинаемС = док.Ответственный;
	//		Иначе
	//			СтруктурнаяЕдиница = Таб[0].СтруктурнаяЕдиница;
	//			СтруктураОтбора=Новый Структура("Точка,ТипРоли",СтруктурнаяЕдиница,ПланыВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего);
	//
	//			Помощники = ТабРуковТочек.НайтиСтроки(СтруктураОтбора);
	//			Если Помощники.Количество()>0 Тогда
	//				НачинаемС = Помощники[0].Пользователь;
	//			Иначе
	//				СтруктураОтбора=Новый Структура("Точка",СтруктурнаяЕдиница);
	//			
	//				КтоНибудь = ТабРуковТочек.НайтиСтроки(СтруктураОтбора);
	//				Если КтоНибудь.Количество()>0 Тогда
	//					НачинаемС = КтоНибудь[0].Пользователь;
	//				Иначе
	//					НачинаемС = док.Ответственный;
	//				КонецЕсли;	
	//			КонецЕсли;	
	//		КонецЕсли;	
	//		
	//		//////////////
	//		ТекФизЛицо = НачинаемС.ФизЛицо;
	//		
	//		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	//		нашли = ТабПодчинения.Найти(ТекФизЛицо,"ФизЛицо");
	//		МожноАкцептовать = Ложь;
	//		Если Нашли.Акцептант И ТекФизЛицо = ТекПользователь.ФизЛицо Тогда
	//			МожноАкцептовать = Истина;
	//		КонецЕсли;	
	//		Пока Не МожноАкцептовать И ЗначениеЗаполнено(Нашли.Руководитель) И Нашли.Руководитель<>Нашли.ФизЛицо Цикл
	//			нашли = ТабПодчинения.Найти(Нашли.Руководитель,"ФизЛицо");
	//			Если Нашли.Акцептант И Нашли.ФизЛицо = ТекПользователь.ФизЛицо Тогда
	//				МожноАкцептовать = Истина;
	//			КонецЕсли;	
	//		КонецЦикла;	
	//		Если МожноАкцептовать тогда
	//			ДокОбъект=Док.ПолучитьОбъект();
	//			ДокОбъект.АкцептоватьДокумент();
	//		Иначе
	//			Сообщить("Вы не можете акцептовать документ");
	//		КонецЕсли;	
		ИначеЕсли Не Док.Проведен Тогда
			Сообщить("Для акцепта нужно сначала провести документ "+Док);
		Иначе
			Сообщить("Для документа "+Док+" установлен другой акцептант. Его может акцептовать только он");
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	