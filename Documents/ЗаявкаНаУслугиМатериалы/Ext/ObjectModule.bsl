
Процедура ОбновитьЦенуВСтрокеТЧ(СтрокаТЧ) Экспорт
	Разгуляев = Справочники.Пользователи.НайтиПоКоду("Разгуляев Валерий");
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"	, СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Поставщик"		, ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДатаСреза"		, ?(ЗначениеЗаполнено(ЭтотОбъект.Дата), ЭтотОбъект.Дата, НачалоДня(ТекущаяДата())));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПоставщиковСрезПоследних.Цена,
	|	0 КАК ЦенаБезНДС
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&ДатаСреза,
	|			Номенклатура = &Номенклатура
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныПоставщиковСрезПоследних.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ); // сумму всё равно надо пересчитать
		Возврат;
	КонецЕсли;
	СтруктураЦены = РезультатЗапроса.Выбрать();
	СтруктураЦены.Следующий();
	
	Если СтруктураЦены.Цена = 0 Тогда // тоже что и не задана
		ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ); // сумму всё равно надо пересчитать
		Возврат;
	КонецЕсли;	
	//
	СтрокаТЧ.АвтоАкцепт = Истина;
	СтрокаТЧ.Акцептовал = ?(ЗначениеЗаполнено(ЭтотОбъект.Акцептант),ЭтотОбъект.Акцептант,Разгуляев);
	СтрокаТЧ.АкцептовалДата = ТекущаяДата();
	СтрокаТЧ.Акцептована = Истина;
	Если ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		СтрокаТЧ.Цена = СтруктураЦены.Цена;
	Иначе		
		
		Если СтруктураЦены.ЦенаБезНДС = 0 Тогда
			
			ЦенаБезНДС = (СтруктураЦены.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС))) * 100;
			
			СтрокаТЧ.Цена = ЦенаБезНДС;
			
		Иначе
			СтрокаТЧ.Цена = СтруктураЦены.ЦенаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	ПосчитатьСуммуСтрокиТЧ(СтрокаТЧ);
	
КонецПроцедуры

Процедура ОбработатьАвтоАкцептСтрок() Экспорт
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.КомплектацияМагазинаПоСделкамСПоставщиком") Тогда
		Возврат;
	КонецЕсли;
	//попытка
	Разгуляев = Справочники.Пользователи.НайтиПоКоду("Разгуляев Валерий");
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПереченьНоменклатуры", ЭтотОбъект.Услуги.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Период", ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Поставщик", ЭтотОбъект.Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) - ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеМинус, 0) КАК ЦенаМин,
	|	ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.Цена, 0) + ЕСТЬNULL(ЦеныПоставщиковСрезПоследних.ОтклонениеПлюс, 0) КАК ЦенаМакс,
	|	ЦеныПоставщиковСрезПоследних.Номенклатура,
	|	ЦеныПоставщиковСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&ПереченьНоменклатуры)
	|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних";
	
	ТабЦен = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаУслуг Из ЭтотОбъект.Услуги Цикл
		СтрокаЦен = ТабЦен.Найти(СтрокаУслуг.Номенклатура,"Номенклатура");
		Если СтрокаУслуг.Автоакцепт И (СтрокаЦен = Неопределено ИЛИ СтрокаУслуг.Цена>СтрокаЦен.ЦенаМакс) Тогда
			СтрокаУслуг.Акцептована = Ложь;
			СтрокаУслуг.Акцептовал 		= Неопределено;
			СтрокаУслуг.АкцептовалДата 	= Дата(1, 1, 1);
			СтрокаУслуг.Автоакцепт = Ложь;
		ИначеЕсли СтрокаУслуг.Акцептована = Ложь И СтрокаЦен <> Неопределено И СтрокаУслуг.Цена<=СтрокаЦен.ЦенаМакс Тогда
			СтрокаУслуг.Акцептована = Истина;
			СтрокаУслуг.Акцептовал 	= ?(ЗначениеЗаполнено(ЭтотОбъект.Акцептант),ЭтотОбъект.Акцептант,Разгуляев);
			СтрокаУслуг.АкцептовалДата =ТекущаяДата();
			СтрокаУслуг.Автоакцепт = Истина;
		КонецЕсли;	
	КонецЦикла;	
//исключение
//	конецпопытки;
КонецПроцедуры	

Процедура ПосчитатьСуммуСтрокиТЧ(СтрокаТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * (СтрокаТабличнойЧасти.Количество );
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект.ВариантРасчетаНДС);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, мВариантРасчета) Экспорт
	
	УчитыватьНДС 		= Истина;
	СуммаВключаетНДС 	= (мВариантРасчета = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле);
	
	//+++AK suvv 04.04.2018 ИП-00018193 
	//СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	//УчитыватьНДС, СуммаВключаетНДС,
	//УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));	
	СтрокаТабличнойЧасти.СуммаНДС = Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС, СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)),2);
	//---AK suvv
	
КонецПроцедуры

Процедура АкцептоватьДокумент() Экспорт
	
	Если ЭтотОбъект.Оплата.Количество() = 0 Тогда
		Сообщить("Внимание! Документ не имеет строк для акцепта. Оплаты не запланированы, акцептовать нечего!: " + ЭтотОбъект.Ссылка);
		Возврат;
	КонецЕсли;
	
	//
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	НеАкцептованныеСтроки = ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("Акцептована", Ложь));
	Если НеАкцептованныеСтроки.Количество() = 0 Тогда
		Сообщить("Документ уже акцептован: " + ЭтотОбъект.Ссылка);
		Возврат;
	КонецЕсли;
	//
	Для Каждого СтрокаОплаты Из НеАкцептованныеСтроки Цикл
		СтрокаОплаты.Акцептована 	= Истина;
		СтрокаОплаты.Акцептовал		= ТекущийПользователь;
		СтрокаОплаты.АкцептовалДата	= ТекущаяДата();
	КонецЦикла;	
	
	Сообщить("Акцептован документ " + ЭтотОбъект.Ссылка);
	
	ЭтотОбъект.Записать(?(ЭтотОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	
КонецПроцедуры	

Процедура РазАкцептоватьДокумент() Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	АкцептованныеСтроки = ЭтотОбъект.Оплата.НайтиСтроки(Новый Структура("Акцептована", Истина));
	//Если АкцептованныеСтроки.Количество()=0 Тогда
	//	Сообщить("Документ уже акцептован: "+ЭтотОбъект.Ссылка);
	//	Возврат;
	//КонецЕсли;	
	Для Каждого СтрокаОплаты Из АкцептованныеСтроки Цикл
		СтрокаОплаты.Акцептована 	= Ложь;
		СтрокаОплаты.Акцептовал		= Неопределено;
		СтрокаОплаты.АкцептовалДата	= Дата(1, 1, 1);
	КонецЦикла;	
	//Сообщить("Акцептован документ "+ЭтотОбъект.Ссылка);
	
	ЭтотОбъект.Записать(?(ЭтотОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка = Истина
		Тогда Возврат;
	КонецЕсли;	
	//+++АК VERT 2018.03.19 ИП-00018128
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ДополнительныеСвойства.Свойство("ПроверкиВыполнены") Тогда 
		// Проверки перед проведением
		РезультатПроверки = Документы.ЗаявкаНаУслугиМатериалы.ПроверитьКорректностьРеквизитов(ЭтотОбъект);
		НаличиеОшибок = РезультатПроверки.ЕстьОшибки И (РезультатПроверки.СтруктураОшибок.ОшибкаСтопОплата ИЛИ РезультатПроверки.СтруктураОшибок.ОшибкаСрокДоговора);
		Отказ = НЕ РезультатПроверки.ИсключениеИзПравил И НаличиеОшибок И НЕ ДопМодульСервер.ПолучитьЗначениеПраваПользователя("ПроведениеЗаявкиНаУслугиМатериалы", Ложь);

		Если Отказ Тогда 
			
			Возврат 
		КонецЕсли;
	КонецЕсли;	
	//---АК VERT 2018.03.19 ИП-00018128
	
	ЭтоНовыйДокумент = ЭтоНовый();
	
	//+++АК POZM 2018.04.05 ИП-00018108 
	Если ЭтоНовыйДокумент И Не ЗначениеЗаполнено(ЭтотОбъект.Акцептант) Тогда
		ЗаполнитьАкцептантаПоОтветственному();
	КонецЕсли;	
	//---АК POZM 
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оплата Цикл
		Если СокрЛП(СтрокаТЧ.УИН_Строки)="" ИЛИ ЭтоНовыйДокумент Тогда
			СтрокаТЧ.УИН_Строки = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС
		ИЛИ ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле Тогда
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Услуги.Итог("Сумма");
	Иначе
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.Услуги.Итог("Сумма") + ЭтотОбъект.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ЭтотОбъект.Услуги.Итог("Количество") <> 0 Тогда
		ЭтотОбъект.ПроцентВыполнения = ЭтотОбъект.Услуги.Итог("КоличествоПолучено") / ЭтотОбъект.Услуги.Итог("Количество") * 100;
	Иначе
		ЭтотОбъект.ПроцентВыполнения = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДатаПоступления) Тогда
		СтрокиБезДаты=ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("ДатаПоступления",Дата(1,1,1)));
		Для Каждого Стр Из СтрокиБезДаты Цикл
			Стр.ДатаПоступления=ЭтотОбъект.ДатаПоступления;
		КонецЦикла;	
	КонецЕсли;		
		
	спТТ = Новый СписокЗначений;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл

		спТТ.Добавить(СтрокаТЧ.СтруктурнаяЕдиница);
		
	КонецЦикла;
	ЭтотОбъект.ТорговыеТочкиСписок = ОбщегоНазначения.СписокЗначенийВСтроку(спТТ, "; ");
	
	// заявки по аренде считаем подтвержденными и акцептованными автоматически
	ТП = ПараметрыСеанса.ТекущийПользователь;
	
	ЭтотОбъект.ЭтоЗаявкаПоАренде=ЭтоЗаявкаПоАренде();
	Если ЭтотОбъект.ЭтоЗаявкаПоАренде Тогда
		СтрокиБезПодтверждения=ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("Подтверждено",Ложь));
		Если СтрокиБезПодтверждения.Количество()>0 Тогда
			СтрокиБезАкцепта=ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("Акцептована",Ложь));
			Если СтрокиБезАкцепта.Количество()=0 Тогда//если заявка акцептована, подтверждаем автоматом
				Для Каждого СтрокаТЧ Из СтрокиБезПодтверждения Цикл
					СтрокаТЧ.КоличествоПолучено 	= СтрокаТЧ.Количество;
					СтрокаТЧ.ПодтвердилПользователь	= ?(значениеЗаполнено(ЭтотОбъект.Акцептант),ЭтотОбъект.Акцептант,ТП);
					СтрокаТЧ.ПодтвердилДата			= ТекущаяДата();
					СтрокаТЧ.Подтверждено			= Истина;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	ПроставитьСуммуВНазначенияПлатежа();
	
	//++ АК 21.08.2017 luza ИП-00016332
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда
		Если ЭтоНовый() 
			ИЛИ ЭтотОбъект.НомерСчета <> ЭтотОбъект.Ссылка.НомерСчета
			ИЛИ ЭтотОбъект.Контрагент <> ЭтотОбъект.Ссылка.Контрагент
			ИЛИ ЭтотОбъект.ДатаСчета <> ЭтотОбъект.Ссылка.ДатаСчета
			ИЛИ ЭтотОбъект.СуммаДокумента <> ЭтотОбъект.Ссылка.СуммаДокумента 
			ИЛИ ЭтотОбъект.СчетНаОплату <> ЭтотОбъект.Ссылка.СчетНаОплату Тогда 
			
			Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
			Запись.Файл = СчетНаОплату;
			Запись.Прочитать();
			
			Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка) = Истина Тогда
				Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;
			КонецЕсли;
			
			Запись.Обработан = Ложь;
			Запись.РезультатСравнения = Ложь;
			Запись.Записать();
			
			
			Если ЭтоНовый() = Ложь Тогда
				//Если поменяли файл, надо удалить все записи из очередеи со ссылкой на текуущий документ где указан другой файл
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	АК_ОчередьРаспознаванияФайлов.Файл
				|ИЗ
				|	РегистрСведений.АК_ОчередьРаспознаванияФайлов КАК АК_ОчередьРаспознаванияФайлов
				|ГДЕ
				|	АК_ОчередьРаспознаванияФайлов.ОбъектСравнения = &ОбъектСравнения
				|	И АК_ОчередьРаспознаванияФайлов.Файл <> &Файл";
				
				Запрос.УстановитьПараметр("ОбъектСравнения", ЭтотОбъект.Ссылка);
				Запрос.УстановитьПараметр("Файл", СчетНаОплату);
				
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() = Ложь Тогда
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
						Запись.Файл = Выборка.Файл;
						Запись.Прочитать();
						Запись.Удалить();
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	//-- АК 21.08.2017 luza ИП-00016332
	
	//+++ AK suvv 04.04.2018 ИП-00018071
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения и 
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету и
		ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента Тогда 
		ПодчиненныеДокументы = НайтиПодчиненныеДокументыЗаявкаПоОплатеНДФЛ();
		
		ОтборНеОплачено = Новый Структура;
		ОтборНеОплачено.Вставить("Оплачено", Ложь);
		ПодчиненныеНеоплаченныеДокументы = ПодчиненныеДокументы.НайтиСтроки(ОтборНеОплачено); 
		Для Каждого Стр Из ПодчиненныеНеоплаченныеДокументы Цикл
			Док = Стр.Ссылка;
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокОбъект.ПометкаУдаления = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Подчиненный документ по оплате НДФЛ " + Док + " был помечен на удаление.");
		КонецЦикла;
		
		ОтборОплачено = Новый Структура;
		ОтборОплачено.Вставить("Оплачено", Истина);
		ПодчиненныеОплаченныеДокументы = ПодчиненныеДокументы.НайтиСтроки(ОтборОплачено); 
		Для Каждого Стр Из ПодчиненныеОплаченныеДокументы Цикл
			Сообщить("Подчиненный документ по оплате НДФЛ " + Стр.Ссылка + " ОПЛАЧЕН,  поэтому не был помечен на удаление.");
		КонецЦикла;
		
	КонецЕсли;
	//--- AK suvv
	
	//+++АК LAGP 2018.05.28 ИП-00018639 Проверка на закрытые структурные единицы в таблице.
	ДатаЗакрытияЦФО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЦФО, "ДатаЗакрытия");  
	Если ЗначениеЗаполнено(ДатаЗакрытияЦФО) И ДатаЗакрытияЦФО < ЭтотОбъект.Дата И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Сообщить("Проведение документа Заявка на услуги/материалы №" + ЭтотОбъект.Номер + " от " + ЭтотОбъект.Дата);
		Сообщить("ВНИМАНИЕ! ЦФО """ + ЦФО + """ закрыта!!!");	
	КонецЕсли;	 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МассивСсылок = ЭтотОбъект.Услуги.ВыгрузитьКолонку("СтруктурнаяЕдиница");
		СоответствиеСтруктурныхЕдиницИДатЗакрытия = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "ДатаЗакрытия");
		СоответствиеЗакрытыхСтруктурныхЕдиниц = Новый Соответствие;
		
		Для каждого СтрокаСоответствияСтруктурныхЕдиницИДатЗакрытия Из СоответствиеСтруктурныхЕдиницИДатЗакрытия Цикл
			Если ЗначениеЗаполнено(СтрокаСоответствияСтруктурныхЕдиницИДатЗакрытия.Значение.ДатаЗакрытия) И СтрокаСоответствияСтруктурныхЕдиницИДатЗакрытия.Значение.ДатаЗакрытия < ЭтотОбъект.Дата Тогда
				СоответствиеЗакрытыхСтруктурныхЕдиниц.Вставить(СтрокаСоответствияСтруктурныхЕдиницИДатЗакрытия.Ключ, СтрокаСоответствияСтруктурныхЕдиницИДатЗакрытия.Значение.ДатаЗакрытия);				
			КонецЕсли;	
		КонецЦикла;	
		
		Если СоответствиеЗакрытыхСтруктурныхЕдиниц.Количество() > 0 Тогда
			Сообщить("Проведение документа Заявка на услуги/материалы №" + ЭтотОбъект.Номер + " от " + ЭтотОбъект.Дата);
			Для каждого СтрокаСоответсвияЗакрытыхСтруктурныхЕдиниц Из СоответствиеЗакрытыхСтруктурныхЕдиниц Цикл
				Сообщить("ВНИМАНИЕ! Торговая точка """ + СтрокаСоответсвияЗакрытыхСтруктурныхЕдиниц.Ключ + """ закрыта " + СтрокаСоответсвияЗакрытыхСтруктурныхЕдиниц.Значение + "!!!");	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	//+++АК LAGP
	
	//+++АК LAGP 2018.09.26 ИП-00019684.01 Для бюджетных платежей обязательно заполнение части полей
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//+++АК LAGP 2018.09.28 ИП-00019684 Для контрагентов ИФНС и УФК доступна странци бюджетных платежей
		ЭтоФедерал = ЛОЖЬ;
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику Тогда
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Контрагент, "Наименование");
			Если Найти(НаименованиеКонтрагента, "ИФНС") > 0 ИЛИ Найти(НаименованиеКонтрагента, "УФК") > 0 Тогда
				ЭтоФедерал = ИСТИНА;		
			КонецЕсли;	
		КонецЕсли;	
		//---АК LAGP
		
		ЭтоДоговорБюджет = ЛОЖЬ;
		Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ДоговорКонтрагента, "ПеречислениеВБюджет") Тогда
				ЭтоДоговорБюджет = ИСТИНА;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЭтоФедерал ИЛИ ЭтоДоговорБюджет Тогда
			СписокНеЗаполненных = Новый СписокЗначений; 
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидПеречисленияВБюджет) Тогда
				СписокНеЗаполненных.Добавить("Вид перечисления в бюджет");		
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатусСоставителя) Тогда
				СписокНеЗаполненных.Добавить("Статус составителя платежного документа");		
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КодОКТМО) Тогда
				СписокНеЗаполненных.Добавить("Код ОКТМО");		
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КодБК) Тогда
				СписокНеЗаполненных.Добавить("Код БК");		
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидПлатежаВГосБюджет) Тогда
				СписокНеЗаполненных.Добавить("Вид платежа в гос бюджет");		
			КонецЕсли;
			
			Если СписокНеЗаполненных.Количество() > 0 Тогда	
				ТекстСообщения = "Проведение документа Заявка на услуги/материалы №" + ЭтотОбъект.Номер + " от " + ЭтотОбъект.Дата + Символы.ПС + ?(ЭтоДоговорБюджет, "Для договора с установленным признаком ""Перечисление в бюджет"" ", "Для контрагентов ИФНС/УФК ") + ", заполнение следующих полей обязательно!";
				Для каждого СтрокаСпискаНеЗаполненных из СписокНеЗаполненных Цикл
					ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаСпискаНеЗаполненных.Значение;	
				КонецЦикла;	
				Сообщить(ТекстСообщения);	
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;		
	//---АК LAGP
	
	//+++АК POZM 2018.06.10 ИП-00018896
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ВидОперации) Тогда
		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПоставщику;
	КонецЕсли;	
	//---АК POZM 
КонецПроцедуры

Функция ЭтоЗаявкаПоАренде() Экспорт
	Если (ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.НачислениеАренднойПлатыОтАрендодателей")) 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратДепозитаАрендатору 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПеременнойЧастиАрендыАрендатору 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПостояннойЧастиАрендыАрендатору 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаДепозитаАрендодателю 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателю 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю 
		//+++АК POZM 2018.01.10 ИП-00017514 
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПеременнойЧастиАрендыАрендодателюПоСчету 
		//---АК POZM 
		Тогда
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ЭтотОбъект.Оплата.Итог("СуммаОплаты") > ЭтотОбъект.СуммаДокумента Тогда
		Сообщить("Сумма запланированных оплат по документу превышает сумму заявки");
		Отказ = Истина;
	КонецЕсли;
	Если ЭтотОбъект.Оплата.Количество() = 0 Тогда
		Сообщить("Нет ни одной строки запланированных оплат!");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭтотОбъект.СчетНаОплату) И Не ЗначениеЗаполнено(ЭтотОбъект.СканПодтвердил) И НЕ ЭтотОбъект.Ссылка.Проведен Тогда
		Сообщить("Необходимо подтверждение скана!");
		Отказ = Истина;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Акцептант)Тогда
		СтрокиБезАкцептанта = ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("Акцептант",Справочники.Пользователи.ПустаяСсылка()));
		Для каждого СтрокаБезАкцептанта Из СтрокиБезАкцептанта Цикл
		
			Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = "В строке " + СтрокаБезАкцептанта.НомерСтроки + " не указан акцептант ";
		    Сообщение.Поле = "Услуги["+СтрокаБезАкцептанта.НомерСтроки+"].Акцептант";
		    Сообщение.Сообщить();
			
			Отказ = Истина;
			
		КонецЦикла; 
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//+++АК pozm 11-10-17 ИП-00015683
	ПравоЛюбойПлановойДаты = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.УстановкаЛюбойДатыПлановогоПоступленияВЗаявках, Ложь);
	Если Не ПравоЛюбойПлановойДаты Тогда
		Авансы = ЭтотОбъект.Оплата.НайтиСтроки(Новый Структура("Аванс",Истина));
		Для Каждого Аванс ИЗ Авансы Цикл
			СрокАванса = (ДатаПоступления - Аванс.ДатаПлатежа)/(60*60*24);
			Если СрокАванса > 60 Тогда
				Сообщить("Дата поступления по документу больше даты оплаты аванса более чем на 60 дней!");
				Отказ = Истина;
				Возврат;
			ИначеЕсли СрокАванса > 30 Тогда	
				ТекстЗапроса="ВЫБРАТЬ
				             |	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СтатьяДДС
				             |ИЗ
				             |	РегистрСведений.ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы КАК ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы
				             |ГДЕ
				             |	ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.СтатьяДДС = &СтатьяДДС
				             |	И ИсключенияКонтроляПоЗаявкамНаУслугиМатериалы.ОтсрочкаПоступленияПоАвансамБолее30Дней";
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("СтатьяДДС",ЭтотОбъект.СтатьяДДС);
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					Сообщить("Дата поступления по документу больше даты оплаты аванса более чем на 30 дней!");
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	//---АК pozm 11-10-17 ИП-00015683
	
	//+++АК ZHAS 18-08-17 ИП-00016335.000.00000001
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//+++АК SUVV 2018.02.28 ИП-00017941
	//"ВЫБРАТЬ
	//|	СоответствияСтатейСчетов.СтатьяДДС
	//|ИЗ
	//|	РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	//|ГДЕ
	//|	СоответствияСтатейСчетов.СтатьяДДС 	= &СтатьяДДС
	//|	И СоответствияСтатейСчетов.Счет 	= &Счет";
	"ВЫБРАТЬ
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	СоответствияСтатейСчетовСрезПоследних.Счет,
	|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
	|ПОМЕСТИТЬ ВТ_МаксПериодПоСтатьеДДС
	|ИЗ
	|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(
	|			&ВыбДата,
	|			СтатьяДДС = &СтатьяДДС
	|				И Счет = &Счет) КАК СоответствияСтатейСчетовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияСтатейСчетовСрезПоследних.СтатьяДДС,
	|	СоответствияСтатейСчетовСрезПоследних.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияСтатейСчетов.СтатьяДДС
	|ИЗ
	|	ВТ_МаксПериодПоСтатьеДДС КАК ВТ_МаксПериодПоСтатьеДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
	|		ПО ВТ_МаксПериодПоСтатьеДДС.СтатьяДДС = СоответствияСтатейСчетов.СтатьяДДС
	|			И ВТ_МаксПериодПоСтатьеДДС.МаксПериод = СоответствияСтатейСчетов.Период
	|			И ВТ_МаксПериодПоСтатьеДДС.Счет = СоответствияСтатейСчетов.Счет";
	Запрос.УстановитьПараметр("ВыбДата", Дата);
	//---АК SUVV
	Запрос.УстановитьПараметр("СтатьяДДС", 	СтатьяДДС);
	Запрос.УстановитьПараметр("Счет", 		СчетУчетаРасчетов);

	//+++ AK suvv ИП-00019591
	//Отказ = Запрос.Выполнить().Пустой() ИЛИ Отказ;
	СоответствиеНеНайдено = Запрос.Выполнить().Пустой();
	Если СоответствиеНеНайдено Тогда
		Если СтатьяДДС.Код = "131010" и СчетУчетаРасчетов = ПланыСчетов.Финансовый.РасчетыСПокупателямиПоАренде и 
			(ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПостояннойЧастиАрендыАрендатору или
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПеременнойЧастиАрендыАрендатору) Тогда 
			СоответствиеНеНайдено = Ложь;
		КонецЕсли;
	КонецЕсли;
	//--- AK suvv

	//+++ АК pozm 09.10.2017 ИП-00015260
	ПроверитьНаличиеСкановПоКонтрагенту(Отказ);
	Если Отказ Тогда
		Отказ = ЛОЖЬ;
		//Возврат;  пока не включаем
	КонецЕсли;	
	//--- АК pozm 09.10.2017 ИП-00015260	
	 
	ПроцедурыНачисления.ПроверитьЛимитыПоАрендеЗаявкаНаУслугиМатериалы(ЭтотОбъект.Ссылка, Отказ);
	
	Если СоответствиеНеНайдено Тогда
		Сообщить ("Статья ДДС не соответствует счету");
		//Отказ = Истина; //+++АК LAGP 2018.09.21 б/н документ должен проводится в любом случае.		
	КонецЕсли;
	//---АК ZHAS 18-08-17
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	
	//
	Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Записывать = Истина;
	Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Очистить();
	НеАкцептованные = ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("Акцептована",Ложь));
	ПолностьюАкцептована = НеАкцептованные.Количество() = 0;
	//Если  Тогда
	Для Каждого ТекСтрокаОплата Из ЭтотОбъект.Оплата Цикл
		Если ЗначениеЗаполнено(ТекСтрокаОплата.ДатаПлатежа) И (ПолностьюАкцептована ИЛИ ЗначениеЗаполнено(ТекСтрокаОплата.РасходИзБанка) И ТекСтрокаОплата.РасходИзБанка.Оплачено И ТекСтрокаОплата.РасходИзБанка.Проведен)  Тогда
			Движение = Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Добавить();
			Движение.ВидДвижения 		= ВидДвиженияНакопления.Приход;
			Движение.Период 			= ЭтотОбъект.Дата;
			Движение.Заявка 			= ЭтотОбъект.Ссылка;
			Движение.УИН_СтрокиОплат 	= ТекСтрокаОплата.УИН_Строки;
			Движение.Сумма 				= ТекСтрокаОплата.СуммаОплаты;
		КонецЕсли;	
	КонецЦикла;
	//Иначе // доработка, если есть оплаты, всё равно проводим, чтобы не было переплат, но не больше чем на размер акцептованного
	//	Для Каждого ТекСтрокаОплата Из ЭтотОбъект.Оплата Цикл
	//		Если ЗначениеЗаполнено(ТекСтрокаОплата.ДатаПлатежа) И ЗначениеЗаполнено(ТекСтрокаОплата.РасходИзБанка) И ТекСтрокаОплата.РасходИзБанка.Оплачено Тогда
	//			Движение = Движения.РасчетыПоЗаявкамНаУслугиМатериалы.Добавить();
	//			Движение.ВидДвижения 		= ВидДвиженияНакопления.Приход;
	//			Движение.Период 			= ЭтотОбъект.Дата;
	//			Движение.Заявка 			= ЭтотОбъект.Ссылка;
	//			Движение.УИН_СтрокиОплат 	= ТекСтрокаОплата.УИН_Строки;
	//			Движение.Сумма 				= ТекСтрокаОплата.СуммаОплаты;
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЕсли;	
	
	Движения.АвансыПоАкцептантам.Записывать = Истина;
	Движения.АвансыПоАкцептантам.Очистить();
	ТабРаспределенияАвансовПоАкцептантам = ПолучитьТабРаспределенияАвансовПоАкцептантам();
	Для Каждого СтрокаРаспределения Из ТабРаспределенияАвансовПоАкцептантам Цикл
		Если ЗначениеЗаполнено(СтрокаРаспределения.Акцептант) Тогда
			Движение 					= Движения.АвансыПоАкцептантам.Добавить();
			Движение.ВидДвижения 		= ВидДвиженияНакопления.Приход;
			Движение.Период				= ЭтотОбъект.Дата;
			Движение.Заявка				= ЭтотОбъект.Ссылка;
			Движение.Акцептант			= СтрокаРаспределения.Акцептант;
			Движение.Сумма				= СтрокаРаспределения.Сумма;
		КонецЕсли;	
	КонецЦикла;	
	
	//АК++ tuga #13455
	//
	АК_КонтрольЗадолженности.ОбработкаПроведения(ЭтотОбъект.Ссылка, Отказ, РежимПроведения);
	
	//ЗарегистрироватьОтложенноеПроведениеДляПоступлений();
	СформироватьПроводки();
	
	//+++АК POZM 2018.09.11 ИП-00018684.01 
	ТТВсе = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_000");
	Движения.РасходыНаСтруктурныеЕдиницы.Записывать = Истина;
	Движения.РасходыНаСтруктурныеЕдиницы.Очистить();
	Если ЭтотОбъект.ЦФО = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_12") Тогда
		Если ПолностьюАкцептована Тогда
			ТЗ = ЭтотОбъект.Услуги.Выгрузить();
			ТЗ.Свернуть("СтруктурнаяЕдиница","Сумма,СуммаНДС");
			Для Каждого СтрокаЗатрат Из ТЗ Цикл
				Если СтрокаЗатрат.СтруктурнаяЕдиница =ТТВсе Тогда
					Продолжить;
				КонецЕсли;	
				Если ЗначениеЗаполнено(СтрокаЗатрат.СтруктурнаяЕдиница) Тогда
					Движение 					= Движения.РасходыНаСтруктурныеЕдиницы.Добавить();
					Движение.Период				= ЭтотОбъект.Дата;
					Движение.СтруктурнаяЕдиница	= СтрокаЗатрат.СтруктурнаяЕдиница;
					Движение.СуммаНаУслуги		= СтрокаЗатрат.Сумма+?(ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,СтрокаЗатрат.СуммаНДС,0);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	//---АК POZM 
КонецПроцедуры

//+++ АК pozm 09.10.2017 ИП-00015260
Процедура ПроверитьНаличиеСкановПоКонтрагенту(Отказ)
	Если НЕ ЭтоЗаявкаПоАренде Тогда
		Возврат;
	КонецЕсли;	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратДепозитаАрендатору ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаДепозитаАрендодателю Тогда
		Возврат;
	КонецЕсли;	
	ТекстЗапроса="ВЫБРАТЬ
	             |	ЗаявкаНаУслугиМатериалы.Ссылка,
	             |	""Отсутствует вложение счета-фактуры"" КАК ТекстОшибки
	             |ИЗ
	             |	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	             |ГДЕ
	             |	ЗаявкаНаУслугиМатериалы.Контрагент = &Контрагент
	             |	И ЗаявкаНаУслугиМатериалы.ЭтоЗаявкаПоАренде
	             |	И НЕ ЗаявкаНаУслугиМатериалы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратДепозитаАрендатору), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаДепозитаАрендодателю))
	             |	И ЗаявкаНаУслугиМатериалы.Проведен
	             |	И ЗаявкаНаУслугиМатериалы.СчетФактура = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	             |	И ЗаявкаНаУслугиМатериалы.ВариантРасчетаНДС <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.БезНДС)
	             |	И ЗаявкаНаУслугиМатериалы.Дата < &ДопустимаяДата
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ЗаявкаНаУслугиМатериалы.Ссылка,
	             |	""Отсутствует вложение счета/акта""
	             |ИЗ
	             |	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	             |ГДЕ
	             |	ЗаявкаНаУслугиМатериалы.Контрагент = &Контрагент
	             |	И ЗаявкаНаУслугиМатериалы.ЭтоЗаявкаПоАренде
	             |	И ЗаявкаНаУслугиМатериалы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ВозвратПостояннойЧастиАрендыАрендатору), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ОплатаПостояннойЧастиАрендыАрендодателю))
	             |	И ЗаявкаНаУслугиМатериалы.Проведен
	             |	И (ЗаявкаНаУслугиМатериалы.Акт = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	             |			ИЛИ ЗаявкаНаУслугиМатериалы.СчетНаОплату = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка))
	             |	И ЗаявкаНаУслугиМатериалы.Дата < &ДопустимаяДата";
	Запрос = Новый Запрос(ТекстЗапроса);
    Запрос.УстановитьПараметр("Контрагент",ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДопустимаяДата",ДобавитьМесяц(ЭтотОбъект.Дата,-2));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		Сообщить(Выборка.ТекстОшибки+" - "+Выборка.Ссылка);
	КонецЦикла;	
КонецПроцедуры	
//--- АК pozm 09.10.2017 ИП-00015260

Процедура СформироватьПроводки()
	
	// передумали
	
	//Проводки = ЭтотОбъект.Движения.Финансовый;
	//Проводки.Записывать = Истина;
	//Проводки.Очистить();
	//Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику Тогда
	//	Если ЭтотОбъект.ЗаймСпособПогашения = 0 Тогда// Сразу
	//		Проводка = Проводки.Добавить();
	//		Проводка.Организация = ЭтотОбъект.Организация;
	//		
	//		Проводка.СчетДт = ЭтотОбъект.СчетУчетаРасчетов;
	//		Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
	//		Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
	//		
	//		Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	//		Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
	//		Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
	//		
	//		Проводка.Сумма = ЭтотОбъект.СуммаДокумента;
	//		
	//		Проводка.Период = КонецДня(ЭтотОбъект.ЗаймПериодДействияКонец);
	//	Иначе // частями	
	//		Если ЭтотОбъект.ЗаймТипПогашенияЧастями = 1 Тогда // сумма в месяц
	//			Накоплено = 0;
	//			ТекДата = ЭтотОбъект.ЗаймПериодДействияКонец;
	//			Пока Накоплено < ЭтотОбъект.СуммаДокумента Цикл
	//				Проводка = Проводки.Добавить();
	//				Проводка.Организация = ЭтотОбъект.Организация;
	//			
	//				Проводка.СчетДт = ЭтотОбъект.СчетУчетаРасчетов;
	//				Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
	//				Проводка.СубконтоДт.Контрагенты = ЭтотОбъект.Контрагент;
	//			
	//				Проводка.СчетКт = ПланыСчетов.Финансовый.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	//				Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
	//				Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Контрагент;
	//			
	//				Проводка.Сумма = ЭтотОбъект.ЗаймСуммаПогашенияВМесяц;
	//			
	//				Проводка.Период = КонецДня(ТекДата);
	//				ТекДата = ДобавитьМесяц(ТекДата,-1);
	//				Накоплено = Накоплено+Проводка.Сумма;
	//			КонецЦикла;	
	//		Иначе 
	//			
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЕсли;	
КонецПроцедуры	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ТекстЗапроса="ВЫБРАТЬ
	             |	Пользователи.Ссылка КАК Башина,
	             |	Пользователи1.Ссылка КАК Колосова,
	             |	Пользователи2.Ссылка КАК Бекренева,
	             |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиницаВсе,
	             |	Пользователи3.Ссылка КАК Сазанова
	             |ИЗ
	             |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы,
	             |	Справочник.Пользователи КАК Пользователи,
	             |	Справочник.Пользователи КАК Пользователи1,
	             |	Справочник.Пользователи КАК Пользователи2,
	             |	Справочник.Пользователи КАК Пользователи3
	             |ГДЕ
	             |	Пользователи.Код = ""Башина Анна""
	             |	И Пользователи1.Код = ""Колосова Екатерина""
	             |	И Пользователи2.Код = ""Бекренева Юлия""
	             |	И СтруктурныеЕдиницы.Код = ""ЦФО_000""
	             |	И Пользователи3.Код = ""Сазанова Анастасия""";
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Башина = Выборка.Башина;
	Колосова = Выборка.Колосова;
	Бекренева = Выборка.Бекренева;
	Сазанова = Выборка.Сазанова;
	СтруктурнаяЕдиницаВсе = Выборка.СтруктурнаяЕдиницаВсе;
	ЭтотОбъект.Услуги.Очистить();
	ЭтотОбъект.Оплата.Очистить();
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")Тогда
		//ДанныеЗаполнения = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Заявка = ЭтотОбъект;
		Заявка.Организация = ДанныеЗаполнения.Организация;
		Заявка.ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		Заявка.Контрагент = ДанныеЗаполнения.Контрагент;
		Заявка.СуммаДокумента =  ДанныеЗаполнения.СуммаДокумента - ДанныеЗаполнения.СуммаНДФЛ;
		Заявка.ДокументОснование = ДанныеЗаполнения;
		Заявка.СтатьяДДС = ДанныеЗаполнения.СтатьяДДС;
		
		ТекОтветственный 	= ПараметрыСеанса.ТекущийПользователь;
		мСписокВыбора 		= ОбщиеПроцедуры.ПолучитьСписокЦФОПользователя(ТекущаяДата(), ТекОтветственный);
		//ТекЦФО				= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		//Если мСписокВыбора.Количество() = 1 Тогда
		//	ТекЦФО 			= мСписокВыбора[0].Значение;
		//КонецЕсли;
		//Если ЗначениеЗаполнено(ТекЦФО) Тогда
		//	Заявка.ЦФО = ТекЦФО;
		//КонецЕсли;
		
		Заявка.ЦФО = ДанныеЗаполнения.СтруктурнаяЕдиница;
		
		Заявка.Комментарий = "Сформирован на основании "+ДанныеЗаполнения;
			
		Заявка.Акцептант = Сазанова;
		//Заявка.СтруктурнаяЕдиница = ТекТорговаяТочка;
		Заявка.ДатаПоступления = ДанныеЗаполнения.Дата;
		Заявка.СчетУчетаРасчетов = ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом;
		
		Заявка.ВариантРасчетаНДС = ДанныеЗаполнения.ВариантРасчетаНДС;
		
		СтрокаОплат=Заявка.Оплата.Добавить();
		СтрокаОплат.СуммаОплаты = ДанныеЗаполнения.СуммаДокумента-ДанныеЗаполнения.СуммаНДФЛ;
		
		СтрокаОплат.НазначениеПлатежа = ДанныеЗаполнения.ДоговорКонтрагента.ОснованиеПлатежаПоУмолчанию;
		//Заявка.ОчередностьПлатежа = 5;
		Заявка.Дата = ТекущаяДата();
		ТекДата = Заявка.Дата + 86400;
		Пока ДеньНедели(ТекДата)<>2
			И ДеньНедели(ТекДата)<>4 Цикл
			ТекДата = ТекДата + 86400;
		КонецЦикла; 
		СтрокаОплат.ДатаПлатежа = ТекДата;
		
		Заявка.Ответственный 			= ТекОтветственный;
		
		Для Каждого СтрТЧ Из ДанныеЗаполнения.Услуги Цикл
			
			НоваяСтрока = Заявка.Услуги.Добавить();
			
			Если ТипЗнч(СтрТЧ.Субконто1) = Тип("СправочникСсылка.СтруктурныеЕдиницы")Тогда
				НоваяСтрока.СтруктурнаяЕдиница 	= СтрТЧ.Субконто1;
			КонецЕсли;
			
			НоваяСтрока.Подтверждающий = Колосова;
			
			НоваяСтрока.Сумма 		= ДанныеЗаполнения.СуммаДокумента-ДанныеЗаполнения.СуммаНДФЛ;
			НоваяСтрока.СтавкаНДС = СтрТЧ.СтавкаНДС;
			НоваяСтрока.СуммаНДС = СтрТЧ.СуммаНДС;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
			НоваяСтрока.Номенклатура = СтрТЧ.Номенклатура;
			Прервать;
		КонецЦикла;
		Заявка.НачалоПериодаАренды = НачалоМесяца(ДанныеЗаполнения.Дата);
		
		//Заявка.СчетНаОплату = ВыборкаДДС.Счет;
		Заявка.НомерСчета = ДанныеЗаполнения.НомерВходящегоДокумента;
		Заявка.ДатаСчета = ДанныеЗаполнения.ДатаВходящегоДокумента;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаУслугиМатериалы")
		И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ДанныеЗаполнения.ДоговорКонтрагента.УплачиватьНДФЛЗаКонтрагента	Тогда
		
		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога;	
		ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС;
		
		СтрокаОплаты = ЭтотОбъект.Оплата.Добавить();
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента.ОбразецПлатежногоПорученияНДФЛ) Тогда
			Шаблон = ДанныеЗаполнения.ДоговорКонтрагента.ОбразецПлатежногоПорученияНДФЛ.Скопировать();
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,Шаблон,,"ВидОперации");
			
			СтрокаОплаты.НазначениеПлатежа = Шаблон.НазначениеПлатежа;
			ЭтотОбъект.СтатьяДДС = Шаблон.СтатьяДвиженияДенежныхСредств;
			
		Иначе
			
			ЭтотОбъект.Организация 		= ДанныеЗаполнения.Организация;
			ЭтотОбъект.Комментарий = "Оплата НДФЛ за <" + ДанныеЗаполнения.Контрагент + ">";
			ЭтотОбъект.Контрагент 		= Справочники.Контрагенты.НайтиПоКоду(?(Найти(ДанныеЗаполнения.Организация.Наименование,"Луг да Поле")>0,"000000283","000000258")); // ИФНС РОССИИ № 34 ПО Г. МОСКВЕ
			ЭтотОбъект.СчетКонтрагента   = ЭтотОбъект.Контрагент.ОсновнойБанковскийСчет;
			ЭтотОбъект.ВидПеречисленияВБюджет 	= Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			ЭтотОбъект.КодОКТМО = ?(ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента.КодОКТМО),ДанныеЗаполнения.ДоговорКонтрагента.КодОКТМО,ЭтотОбъект.Организация.КодОКТМО);
			ЭтотОбъект.КодБК="18210102010011000110";
			ЭтотОбъект.СтатусСоставителя   = "02";
			//	обДок.Дата = ?(Час(ТекущаяДата())>=12, ЗаполнениеДокументов.ОпределитьДату(ТекущаяДата(), 1) + 12*60*60, ТекущаяДата());
			ЭтотОбъект.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("137115");
			
			//	обДок.ВидПлатежа="Электронно";
			//	обДок.ВидПлатежаВГосБюджет=Перечисления.ВидыПлатежейВГосБюджет.Налог;
			//	обДок.НазначениеПлатежа="Оплата НДФЛ за "+Формат(обДок.ПериодРегистрации, "ДФ=ММММ")+" "+Формат(обДок.ПериодРегистрации, "ДФ=гггг")+" г. "+Строка(Строка.Контрагент)+" по договору аренды" + Строка.ДоговорКонтрагента.Номер + " от " + Формат(Строка.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy")+"г. Сумма "+ Формат(пСумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");// 
			//	//--Lobv	
			//КонецЕсли;
			//
			//обДок.Дата = ?(Час(ТекущаяДата())>=12, ЗаполнениеДокументов.ОпределитьДату(ТекущаяДата(), 1) + 12*60*60, ТекущаяДата());
			//обДок.ДатаОплаты = Неопределено;
			//обДок.Оплачено = Ложь;
			//обДок.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;					
			//обДок.СуммаДокумента 	= пСумма;
			//обДок.ВалютаДокумента 	= ВалютаРегл;
			//обДок.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Финансовый.НалогиСФОТ;				
			//обДок.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.НДФЛ;
			//обДок.СчетУчетаРасчетовПоАвансамБУ = ПланыСчетов.Хозрасчетный.НДФЛ;
			//обДок.СтатьяДвиженияДенежныхСредствБУ = Справочники.СтатьиДвиженияДенежныхСредствБУ.НайтиПоКоду("000000006");
		КонецЕсли;
		ЭтотОбъект.Организация 		= ДанныеЗаполнения.Организация;
		ЭтотОбъект.Дата = ДанныеЗаполнения.Дата;
		ЭтотОбъект.СуммаДокумента = ДанныеЗаполнения.ДокументОснование.СуммаНДФЛ;
		ЭтотОбъект.СчетУчетаРасчетов = ПланыСчетов.Финансовый.НалогиСФОТ;
		ЭтотОбъект.Комментарий 		= "Оплата НДФЛ за <" + ДанныеЗаполнения.Контрагент + ">";
		ЭтотОбъект.Акцептант = Бекренева;
		
		СтрокаОплаты.СуммаОплаты = ДанныеЗаполнения.ДокументОснование.СуммаНДФЛ;
		СтрокаОплаты.УИН_Строки = Новый УникальныйИдентификатор;
		СтрокаОплаты.НазначениеПлатежа="Оплата НДФЛ за "+Формат(ДанныеЗаполнения.ДокументОснование.Дата, "ДФ=ММММ")+" "+Формат(ДанныеЗаполнения.ДокументОснование.Дата, "ДФ=гггг")+" г. "+Строка(ДанныеЗаполнения.Контрагент)+" по договору аренды " + ДанныеЗаполнения.ДокументОснование.ДоговорКонтрагента.Номер + " от " + Формат(ДанныеЗаполнения.ДокументОснование.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy")+"г. Сумма "+ Формат(ДанныеЗаполнения.ДокументОснование.СуммаНДФЛ, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");// 
		СтрокаОплаты.ДатаПлатежа = ТекущаяДата();
		
		СтрокаУслуг = ЭтотОбъект.Услуги.Добавить();
		СтрокаУслуг.СтруктурнаяЕдиница = СтруктурнаяЕдиницаВсе;
		СтрокаУслуг.Подтверждающий = Колосова;
		СтрокаУслуг.Сумма 		= ЭтотОбъект.СуммаДокумента;
		СтрокаУслуг.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		СтрокаУслуг.Количество = 1;
		СтрокаУслуг.Цена = СтрокаУслуг.Сумма;
		СтрокаУслуг.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Налог");
		ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
		ЭтотОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ЭтотОбъект.ПоказательПериода   = "МС." + Формат(Месяц(ДанныеЗаполнения.ДокументОснование.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(ДанныеЗаполнения.ДокументОснование.Дата), "ЧГ=");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Услуги Цикл
		СтрокаТЧ.КоличествоПолучено		= 0;
		СтрокаТЧ.ПодтвердилДата			= Неопределено;
		СтрокаТЧ.ПодтвердилПользователь	= Неопределено;
		СтрокаТЧ.Подтверждено			= Ложь;
		
		СтрокаТЧ.Акцептовал				= Неопределено;
		СтрокаТЧ.АкцептовалДата			= Неопределено;
		СтрокаТЧ.Акцептована			= Ложь;
	КонецЦикла;	
	//
	//Для Каждого СтрокаТЧ Из ЭтотОбъект.Оплата Цикл
	//	СтрокаТЧ.Акцептовал		= Неопределено;
	//	СтрокаТЧ.АкцептовалДата	= Неопределено;
	//	СтрокаТЧ.Акцептована	= Ложь;
	//	СтрокаТЧ.РасходИзБанка	= Неопределено;
	//	СтрокаТЧ.УИН_Строки		= "";
	//КонецЦикла;
	
	//ЭтотОбъект.Услуги.Очистить();
	ЭтотОбъект.Оплата.Очистить();
	ЭтотОбъект.НомерСчета="";
	ЭтотОбъект.ДатаСчета=Неопределено;
	ЭтотОбъект.СчетНаОплату = Неопределено;
	ЭтотОбъект.ДокументОснование = Неопределено;
	ЭтотОбъект.ВсеДокументыВНаличии = Ложь;
	ЭтотОбъект.ДатаПоступления=Дата(1,1,1);
	
	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

Функция ВсеДокументыВНаличии(КромеДокумента = Неопределено) Экспорт
	ТекстЗапроса="ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.СуммаДокумента
	|ПОМЕСТИТЬ ПоДокументам
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Заявка = &Заявка
	|	И ПоступлениеТоваровУслуг.ДокументыПолучены
	|	И ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.Ссылка <> &КромеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.ДокументыПолучены
	|	И ПоступлениеДопРасходов.Проведен
	|	И ПоступлениеДопРасходов.ЗаявкаНаРсходованиеСредств = &Заявка
	|	И ПоступлениеДопРасходов.Ссылка <> &КромеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщиеТранспортныеРасходы.Ссылка,
	|	ОбщиеТранспортныеРасходы.Сумма + ВЫБОР
	|		КОГДА ОбщиеТранспортныеРасходы.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	|			ТОГДА ОбщиеТранспортныеРасходы.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
	|ГДЕ
	|	ОбщиеТранспортныеРасходы.ДокументыПолучены
	|	И ОбщиеТранспортныеРасходы.Проведен
	|	И ОбщиеТранспортныеРасходы.Заявка = &Заявка
	|	И ОбщиеТранспортныеРасходы.Ссылка <> &КромеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоставкаНаТТ.Ссылка,
	|	ДоставкаНаТТ.СуммаДокумента
	|ИЗ
	|	Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
	|ГДЕ
	|	ДоставкаНаТТ.ДокументыПолучены
	|	И ДоставкаНаТТ.Проведен
	|	И ДоставкаНаТТ.Заявка = &Заявка
	|	И ДоставкаНаТТ.Ссылка <> &КромеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.Сумма + ВЫБОР
	|		КОГДА МаршрутныйЛист.ВариантРасчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.НДССверху)
	|			ТОГДА МаршрутныйЛист.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.ДокументыПолучены
	|	И МаршрутныйЛист.Проведен
	|	И МаршрутныйЛист.Заявка = &Заявка
	|	И МаршрутныйЛист.Ссылка <> &КромеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ПоДокументам.СуммаДокумента), 0) КАК СуммаДокумента
	|ИЗ
	|	ПоДокументам КАК ПоДокументам";
	Запрос = Новый Запрос(ТекстЗапроса);		 
	Запрос.УстановитьПараметр("Заявка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("КромеДокумента",КромеДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СуммаДокумента = ЭтотОбъект.СуммаДокумента Тогда
			ЭтотОбъект.ВсеДокументыВНаличии = Истина;
		Иначе
			ЭтотОбъект.ВсеДокументыВНаличии = Ложь;
			Если Выборка.СуммаДокумента > ЭтотОбъект.СуммаДокумента Тогда
				Сообщить("Сумма документов поступления по заявке "+ЭтотОбъект.Ссылка+" превысила сумму заявки");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Возврат (ЭтотОбъект.СуммаДокумента - Выборка.СуммаДокумента);
КонецФункции	

Функция ПолучитьТабРаспределенияАвансовПоАкцептантам() Экспорт
	СтрокиАванса = ЭтотОбъект.Оплата.Выгрузить(Новый Структура("Аванс",Истина));
	СуммаАванса = СтрокиАванса.Итог("СуммаОплаты");
	ТабРезультата = Новый ТаблицаЗначений;
	ТабРезультата.Колонки.Добавить("Акцептант");
	ТабРезультата.Колонки.Добавить("Сумма");
	//ТабРезультата.Колонки.Добавить("Акцептовано");
	Если СуммаАванса = 0 Тогда
		Возврат ТабРезультата;
	КонецЕсли;	
	
	Для Каждого СтрокаУслуг Из ЭтотОбъект.Услуги Цикл
		
		НС=ТабРезультата.Добавить();
		Если ЗначениеЗаполнено(СтрокаУслуг.Акцептовал) Тогда
			НС.Акцептант = СтрокаУслуг.Акцептовал;
		КонецЕсли;	
		НС.Сумма = СтрокаУслуг.Сумма;
		//КонецЕсли;	
	КонецЦикла;	
	
	ТабРезультата.Свернуть("Акцептант","Сумма");
	ИтогПоБазе = ТабРезультата.Итог("Сумма");
	Если ИтогПоБазе = 0 Тогда 
		Возврат ТабРезультата;
	КонецЕсли;	
	Для Каждого СтрокаРезультата Из ТабРезультата Цикл
		СтрокаРезультата.Сумма = СуммаАванса * СтрокаРезультата.Сумма / ИтогПоБазе;
	КонецЦикла;	
	ТабРезультата[0].Сумма = ТабРезультата[0].Сумма + СуммаАванса - ТабРезультата.Итог("Сумма");
	
	Возврат ТабРезультата;
КонецФункции	

Процедура ЗарегистрироватьОтложенноеПроведениеДляПоступлений() Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Дата
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоставкаНаТТ.Ссылка,
	|	ДоставкаНаТТ.Дата
	|ИЗ
	|	Документ.ДоставкаНаТТ КАК ДоставкаНаТТ
	|ГДЕ
	|	ДоставкаНаТТ.Проведен
	|	И ДоставкаНаТТ.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.Дата
	|ИЗ
	|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Проведен
	|	И МаршрутныйЛист.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщиеТранспортныеРасходы.Ссылка,
	|	ОбщиеТранспортныеРасходы.Дата
	|ИЗ
	|	Документ.ОбщиеТранспортныеРасходы КАК ОбщиеТранспортныеРасходы
	|ГДЕ
	|	ОбщиеТранспортныеРасходы.Проведен
	|	И ОбщиеТранспортныеРасходы.ДокументОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.Дата
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Проведен
	|	И ПоступлениеДопРасходов.ЗаявкаНаРсходованиеСредств = &Заявка";
	Запрос = Новый Запрос(ТекстЗапроса);			   
	Запрос.УстановитьПараметр("Заявка",ЭтотОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
		Запись.Документ = Выборка.Ссылка;
		Запись.ДатаДокумента = Выборка.Дата;
		Запись.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПервоначальноеЗаполнениеПоВидуОперации() Экспорт
	ЭтотОбъект.Услуги.Очистить();
	ЭтотОбъект.Оплата.Очистить();
	
	//+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
	ДатаПроверки 		= ?(ЭтотОбъект.ЭтоНовый(), ТекущаяДата(), ЭтотОбъект.Дата);
	ДатаПроверкиДо2018	= ?(ДатаПроверки < Дата("20180101"), Истина, Ложь);
	//---АК LAGP
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПлатаЗаОткрытиеКорпоративнойКарты Тогда
		//+++АК SUVV 2018.02.20 ИП-00017941
		ТекстЗапроса = "ВЫБРАТЬ
		|	СоответствияСтатейСчетовСрезПоследних.ВидОперацииЗаявки,
		|	МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_СчетаСМаксПериодом
		|ИЗ
		|	РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, ВидОперацииЗаявки = &ВидОперацииЗаявки) КАК СоответствияСтатейСчетовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияСтатейСчетовСрезПоследних.ВидОперацииЗаявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СоответствияСтатейСчетов.Счет) КАК Счет
		|ПОМЕСТИТЬ ВТ_СоответствиеСтатейСчетов
		|ИЗ
		|	ВТ_СчетаСМаксПериодом КАК ВТ_СчетаСМаксПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСтатейСчетов КАК СоответствияСтатейСчетов
		|		ПО ВТ_СчетаСМаксПериодом.ВидОперацииЗаявки = СоответствияСтатейСчетов.ВидОперацииЗаявки
		|			И ВТ_СчетаСМаксПериодом.МаксПериод = СоответствияСтатейСчетов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	БанковскиеСчета.Ссылка КАК СчетКонтрагента,
		|	БанковскиеСчета.Владелец КАК Контрагент,
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДДС,
		|	ЕСТЬNULL(ВТ_СоответствиеСтатейСчетов.Счет, ВЫБОР
		|			КОГДА &ДатаПроверкиДо2018 = ИСТИНА
		|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПереводыНаКартыСотрудниковДо2018)
		|			ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПереводыНаКартыСотрудников)
		|		КОНЕЦ) КАК СчетУчетаРасчетов,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	1 КАК Количество,
		|	2400 КАК Цена,
		|	2400 КАК Сумма,
		|	Пользователи.Ссылка КАК Подтверждающий,
		|	Пользователи.Ссылка КАК Акцептант,
		|	2400 КАК СуммаОплаты,
		|	""Перевод на бизнес-счет предприятия первоначального взноса для выпуска корпоративной карты"" КАК НазначениеПлатежа,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.БезНДС) КАК ВариантРасчетаНДС
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета,
		|	Справочник.Организации КАК Организации,
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств,
		|	Справочник.Пользователи КАК Пользователи,
		|	ВТ_СоответствиеСтатейСчетов КАК ВТ_СоответствиеСтатейСчетов,
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Организации.Код = ""000000006""
		|	И БанковскиеСчета.НомерСчета = ""40702810238000021696""
		|	И БанковскиеСчета.Владелец.Код = ""000000561""
		|	И СтатьиДвиженияДенежныхСредств.Код = ""139391""
		|	И Номенклатура.Код = ""000623696""
		|	И Пользователи.Код = ""Сазанова Анастасия""";
		//ТекстЗапроса="ВЫБРАТЬ
		//|	Организации.Ссылка КАК Организация,
		//|	БанковскиеСчета.Ссылка КАК СчетКонтрагента,
		//|	БанковскиеСчета.Владелец КАК Контрагент,
		//|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДДС,
		////+++АК POZM 2017.11.07 ИП-00017140 
		////|	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТочекДляРаспределения) КАК СчетУчетаРасчетов,
		//
		////+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
		////|	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПереводыНаКартыСотрудников) КАК СчетУчетаРасчетов,
		//
		//| " + ?(ДатаПроверкиДо2018, "ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПереводыНаКартыСотрудниковДо2018) КАК СчетУчетаРасчетов,", "ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ПереводыНаКартыСотрудников) КАК СчетУчетаРасчетов,") + "
		//
		////---АК LAGP
		//
		////---АК POZM 
		//|	Номенклатура.Ссылка КАК Номенклатура,
		//|	1 КАК Количество,
		//|	2400 КАК Цена,
		//|	2400 КАК Сумма,
		//|	Пользователи.Ссылка КАК Подтверждающий,
		//|	Пользователи.Ссылка КАК Акцептант,
		//|	2400 КАК СуммаОплаты,
		//|	""Перевод на бизнес-счет предприятия первоначального взноса для выпуска корпоративной карты"" КАК НазначениеПлатежа,
		//|	ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.БезНДС) КАК ВариантРасчетаНДС
		//|ИЗ
		//|	Справочник.БанковскиеСчета КАК БанковскиеСчета,
		//|	Справочник.Организации КАК Организации,
		//|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств,
		//|	Справочник.Пользователи КАК Пользователи,
		////+++АК SUVV 2018.02.20 ИП-00017941
		//|	(ВЫБРАТЬ
		//|   МАКСИМУМ(СоответствияСтатейСчетовСрезПоследних.Счет) КАК Счет
		//|   ИЗ
		//|   РегистрСведений.СоответствияСтатейСчетов.СрезПоследних(&ВыбДата, ВидОперацииЗаявки = &ВидОперацииЗаявки) КАК СоответствияСтатейСчетовСрезПоследних) КАК СоответствиеСтатейСчетов,
		////---АК SUVV 
		//|	Справочник.Номенклатура КАК Номенклатура
		//|ГДЕ
		//|	Организации.Код = ""000000006""
		//|	И БанковскиеСчета.НомерСчета = ""40702810238000021696""
		//|	И БанковскиеСчета.Владелец.Код = ""000000561""
		//|	И СтатьиДвиженияДенежныхСредств.Код = ""139391""
		//|	И Номенклатура.Код = ""000623696""
		//|	И Пользователи.Код = ""Сазанова Анастасия""";
		//---АК SUVV 
		Запрос = Новый Запрос(ТекстЗапроса);			 
		//+++АК SUVV 2018.02.20 ИП-00017941
		Запрос.УстановитьПараметр("ДатаПроверкиДо2018", ДатаПроверкиДо2018);
		Запрос.УстановитьПараметр("ВыбДата", Дата);
		Запрос.УстановитьПараметр("ВидОперацииЗаявки", ВидОперации);
		//---АК SUVV
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
		НС = ЭтотОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС = ЭтотОбъект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.ПереводНаКорпоративнуюКарту Тогда
		ТекстЗапроса="ВЫБРАТЬ
		             |	Организации.Ссылка КАК Организация,
		             |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК СчетКонтрагента,
		             |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		             |	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДДС,
		             |	Номенклатура.Ссылка КАК Номенклатура,
		             |	1 КАК Количество,
		             |	0 КАК Цена,
		             |	0 КАК Сумма,
		             |	Пользователи.Ссылка КАК Подтверждающий,
		             |	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Акцептант,
		             |	0 КАК СуммаОплаты,
		             |	""Пополнение бизнес-карты сотрудника"" КАК НазначениеПлатежа,
		             |	ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.БезНДС) КАК ВариантРасчетаНДС,
		             |	Финансовый.Ссылка КАК СчетУчетаРасчетов,
		             |	ЕСТЬNULL(КорпоративныеБанковскиеКарты.Ссылка, ЗНАЧЕНИЕ(Справочник.КорпоративныеБанковскиеКарты.ПустаяСсылка)) КАК КорпКарта
		             |ИЗ
		             |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств,
		             |	Справочник.Пользователи КАК Пользователи,
		             |	Справочник.Номенклатура КАК Номенклатура,
		             |	ПланСчетов.Финансовый КАК Финансовый,
		             |	Справочник.Организации КАК Организации
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КорпоративныеБанковскиеКарты КАК КорпоративныеБанковскиеКарты
		             |		ПО Организации.Ссылка = КорпоративныеБанковскиеКарты.Организация
		             |			И (&ФизЛицо = КорпоративныеБанковскиеКарты.ФизЛицо)
		             |ГДЕ
		             |	Организации.Код = ""000000006""
		             |	И СтатьиДвиженияДенежныхСредств.Код = ""901012""
		             |	И Номенклатура.Код = ""000624997""
		             |	И Пользователи.Код = ""Кузнецова Наталья""
					 
					 //+++АК LAGP 2018.02.14 ИП-00017918 C 2018 счёт 57.4 изменяется на 51.2
		             //|	И Финансовый.Код = ""57.4""";
		             | " + ?(ДатаПроверкиДо2018, "И Финансовый.Код = ""57.4""", "И Финансовый.Код = ""51.2""");
					 //---АК LAGP
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ФизЛицо",ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
		НС = ЭтотОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС = ЭтотОбъект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС.НазначениеПлатежа = "Пополнение бизнес-карты сотрудника ("+ЭтотОбъект.КорпКарта+")";

		
		
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.КомандировочныеРасходы Тогда
		ТекстЗапроса="ВЫБРАТЬ
		             |	Организации.Ссылка КАК Организация,
		             |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК СчетКонтрагента,
		             |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		             |	ЕСТЬNULL(СтатьиДвиженияДенежныхСредств.Ссылка, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК СтатьяДДС,
		             |	ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ЗатратыТочекДляРаспределения) КАК СчетУчетаРасчетов,
		             |	Номенклатура.Ссылка КАК Номенклатура,
		             |	1 КАК Количество,
		             |	0 КАК Цена,
		             |	0 КАК Сумма,
		             |	Пользователи1.Ссылка КАК Подтверждающий,
		             |	Пользователи.Ссылка КАК Акцептант,
		             |	0 КАК СуммаОплаты,
		             |	""Оплата на командировочные расходы"" КАК НазначениеПлатежа,
		             |	ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаНДС.БезНДС) КАК ВариантРасчетаНДС,
		             |	Финансовый.Ссылка
		             |ИЗ
		             |	Справочник.Организации КАК Организации,
		             |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств,
		             |	Справочник.Пользователи КАК Пользователи,
		             |	Справочник.Пользователи КАК Пользователи1,
		             |	Справочник.Номенклатура КАК Номенклатура,
		             |	ПланСчетов.Финансовый КАК Финансовый
		             |ГДЕ
		             |	Организации.Код = ""000000006""
		             |	И СтатьиДвиженияДенежныхСредств.Код = ""901015""
		             |	И Номенклатура.Код = ""000619466""
		             |	И Пользователи.Код = ""Сазанова Анастасия""
		             |	И Пользователи1.Код = ""Кузнецова Наталья""
		             |	И Финансовый.Код = ""71.3""";
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
		НС = ЭтотОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС = ЭтотОбъект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС.ДатаПлатежа = ТекущаяДата();
		Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			ЭтотОбъект.НазначениеПлатежа = "Оплата на командировочные расходы ("+ЭтотОбъект.Контрагент+")";
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПроставитьСуммуВНазначенияПлатежа() Экспорт
	НакопленоНДС = 0;
	Для Каждого Стр Из ЭтотОбъект.Оплата Цикл	
		ПозицияСуммы = Найти(Стр.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0 Тогда
			ТекстНазначение = Стр.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(Стр.НазначениеПлатежа, ПозицияСуммы - 1);
		КонецЕсли;
		
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		
		 	
		ТекстСумма = "Сумма " + Формат(Стр.СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		ТекстНДС   = "";
		
		УчитыватьНДС 		= Истина;
		СуммаВключаетНДС 	= Истина;
		СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Стр.СуммаОплаты, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Услуги[0].СтавкаНДС));
		НакопленоНДС = НакопленоНДС + СуммаНДС;
		Если (ЭтотОбъект.Оплата.Итог("СуммаОплаты") = ЭтотОбъект.Услуги.Итог("Сумма")+?(ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,ЭтотОбъект.Услуги.Итог("СуммаНДС"),0)) И (Стр.НомерСтроки = ЭтотОбъект.Оплата.Количество()) Тогда 
			СуммаНДС = СуммаНДС+ЭтотОбъект.Услуги.Итог("СуммаНДС")-НакопленоНДС;
		КонецЕсли;	
				
		Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			ТекстНДС = ТекстНДС + "Без налога (НДС)";
		ИначеЕсли ЭтотОбъект.Услуги.Итог("СуммаНДС") > 0 Тогда
			ТекстНДС = ТекстНДС + "НДС  (" + Услуги[0].СтавкаНДС + ") " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЕсли;
				
		ТекстНазначение = ТекстНазначение + Символы.ПС 
							+ ТекстСумма + Символы.ПС 
							+ ?(СуммаНДС > 0, "В т.ч. ", "") + ТекстНДС;
		Стр.НазначениеПлатежа = ТекстНазначение;					
	КонецЦикла;						
	
	
КонецПроцедуры

Процедура ПерезаполнитьТЧЗайма() Экспорт
	ЭтотОбъект.ПогашениеЗайма.Очистить();
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаУслугиМатериалы.АвансПоставщику Тогда
		Если ЭтотОбъект.ЗаймСпособПогашения = 0 Тогда// Сразу
		    НС = ЭтотОбъект.ПогашениеЗайма.Очистить();
			НС.Сумма = ЭтотОбъект.СуммаДокумента;
			НС.Дата = КонецДня(ЭтотОбъект.ЗаймПериодДействияКонец);
		Иначе // частями	
			Если ЭтотОбъект.ЗаймТипПогашенияЧастями = 1 Тогда // сумма в месяц
				Накоплено = 0;
				СуммаДокумента = (ЭтотОбъект.Услуги.Итог("Сумма")+?(ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСсверху,ЭтотОбъект.Услуги.Итог("СуммаНДС"),0));
				ТекДата = ЭтотОбъект.ЗаймПериодДействияКонец;
				Пока (Накоплено + ЭтотОбъект.ЗаймСуммаПогашенияВМесяц) <= СуммаДокумента Цикл
					НС = ЭтотОбъект.ПогашениеЗайма.Добавить();
					НС.Дата = КонецДня(ТекДата);
					НС.Сумма = ЭтотОбъект.ЗаймСуммаПогашенияВМесяц;
	
					ТекДата = ДобавитьМесяц(ТекДата,-1);
					Накоплено = Накоплено + НС.Сумма;
				КонецЦикла;	
				НС.Сумма = НС.Сумма + СуммаДокумента - Накоплено ; 
			Иначе 
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка = Истина
		Тогда Возврат;
	КонецЕсли;
	//++ АК 21.08.2017 luza ИП-00016332
	Если ЗначениеЗАполнено(ЭтотОбъект.СчетНаОплату) = Истина Тогда
		Запись = РегистрыСведений.АК_ОчередьРаспознаванияФайлов.СоздатьМенеджерЗаписи();
		Запись.Файл = ЭтотОбъект.СчетНаОплату;
		Запись.Прочитать();
		Если ЗначениеЗаполнено(Запись.Файл) = Истина Тогда
			Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;		
			Запись.Записать();
		Иначе
			Запись.Файл = ЭтотОбъект.СчетНаОплату;
			Запись.ОбъектСравнения = ЭтотОбъект.Ссылка;		
			Запись.Записать();
			
			ИмяФайла = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ЭтотОбъект.СчетНаОплату);
			ИмяФайлаРаспознования = Справочники.Файлы.ПолучитьИмяФайлаДляРаспознаванияОбъекта(ЭтотОбъект.СчетНаОплату);
			
			Файл = Новый Файл(ИмяФайла);
			
			Если Файл.Существует() Тогда
				КопироватьФайл(ИмяФайла, ИмяФайлаРаспознования);
			КонецЕсли;			
			
		КонецЕсли;	
	КонецЕсли;
	//-- АК 21.08.2017 luza ИП-00016332
	
	//+++АК POZM 2018.10.09 ИП-00018684.02    
	НеАкцептованныеСтроки = ЭтотОбъект.Услуги.НайтиСтроки(Новый Структура("Акцептована", Ложь));
	Если НеАкцептованныеСтроки.Количество() = 0 Тогда
		ЗаписьРегистра = РегистрыСведений.ДокументыПревысившиеЛимитыТочек.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.СсылкаНаДокумент = ЭтотОбъект.Ссылка;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.Удалить();
		КонецЕсли;	
	КонецЕсли;	
	//---АК POZM 
КонецПроцедуры

//+++ AK suvv 04.04.2018 ИП-00018071
Функция НайтиПодчиненныеДокументыЗаявкаПоОплатеНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаУслугиМатериалы.Ссылка
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаУслугиПоОплатеНДФЛ
	|ИЗ
	|	Документ.ЗаявкаНаУслугиМатериалы КАК ЗаявкаНаУслугиМатериалы
	|ГДЕ
	|	ЗаявкаНаУслугиМатериалы.ДокументОснование = &ДокументОснование
	|	И ЗаявкаНаУслугиМатериалы.Проведен
	|	И ЗаявкаНаУслугиМатериалы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаУслугиМатериалы.ПеречислениеНалога)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиНаУслугиПоОплатеНДФЛ.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасходИзБанка.Ссылка, """") = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Оплачено
	|ИЗ
	|	ВТ_ЗаявкиНаУслугиПоОплатеНДФЛ КАК ВТ_ЗаявкиНаУслугиПоОплатеНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзБанка КАК РасходИзБанка
	|		ПО ВТ_ЗаявкиНаУслугиПоОплатеНДФЛ.Ссылка = РасходИзБанка.ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции //--- AK suvv

//+++АК POZM 2018.03.27 ИП-00018108 

Процедура ЗаполнитьАкцептантаПоОтветственному() Экспорт
	ТекстЗапроса="ВЫБРАТЬ
	             |	АкцептантыПоУмолчаниюДляЗаявокСрезПоследних.Акцептант
	             |ИЗ
	             |	РегистрСведений.АкцептантыПоУмолчаниюДляЗаявок.СрезПоследних(, Ответственный = &Автор) КАК АкцептантыПоУмолчаниюДляЗаявокСрезПоследних";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Автор",ЭтотОбъект.Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭтотОбъект.Акцептант = Выборка.Акцептант;
	КонецЕсли;	
КонецПроцедуры	
//---АК POZM 