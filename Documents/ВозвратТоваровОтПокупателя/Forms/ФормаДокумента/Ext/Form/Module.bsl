
&НаКлиенте
Перем ПересчитатьЦеныВТабЧасти;

#Область ДополнительныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(ВыбОбъект, НаименованиеРеквизита)
	
	Возврат ВыбОбъект[НаименованиеРеквизита];
	
КонецФункции


&НаСервере
Функция СчетМожноИспользоватьВПроводках(Счет)
	
	Возврат БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(Счет);
	
КонецФункции

//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.

#Область ЗакоментКод_ПолучитьСчетУчета
//&НаСервере
//Функция ПолучитьСчетУчета(Номенклатура)
//	
//	СчетУчета = ПланыСчетов.Финансовый.ПустаяСсылка();
//	ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
//	ТипТовара = Номенклатура.ТипТовара;
//	
//	Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
//		ИЛИ ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
//		
//		Если ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
//			СчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
//		Иначе	
//			СчетУчета = ПланыСчетов.Финансовый.Товары;
//		КонецЕсли;	
//		
//	ИначеЕсли ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
//		
//		СчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
//		
//	КонецЕсли;
//	
//	ТабСчетаУчета = ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуСчетовУчетаНоменклатур(Номенклатура, Объект.Дата);
//	Если ТабСчетаУчета.Количество() > 0
//		И ЗначениеЗаполнено(ТабСчетаУчета[0].СчетУчета) Тогда
//		СчетУчета = ТабСчетаУчета[0].СчетУчета;
//	КонецЕсли;
//	
//	СчетУчета = ?(Не ЗначениеЗаполнено(СчетУчета), ПланыСчетов.Финансовый.Товары, СчетУчета);
//	
//	Возврат СчетУчета;
//	
//КонецФункции
#КонецОбласти

//---АК Susk (Суслин К.В.) 

&НаСервере
Функция СкладыДляАвтоподбора()
	
	Склады = Новый СписокЗначений;	
	
	Выборка = Справочники.Склады.Выбрать( , , Новый Структура("ОтражатьДвиженияПоСкладуБезСкладскихОрдеров", Истина), "Наименование");
	Пока Выборка.Следующий() Цикл
		Склады.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Склады;
	
КонецФункции


&НаКлиенте
Процедура ОбновлениеОтображенияЭлементовНДС()
	
	Если Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле") Тогда
		Элементы.СуммаНДС.Заголовок = "НДС (в т. ч.):";	
	Иначе
		Элементы.СуммаНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображенияЭлементовФормы()
	
	ОбновлениеОтображенияЭлементовНДС();
	
	ПредъявленСчетФактураПриИзменении(Элементы.ПредъявленСчетФактура);
	
КонецПроцедуры


&НаСервере
Процедура РассчитатьСуммуСтрокиТЧТовары(СтрокаТабличнойЧасти) 
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры 

&НаСервере
Процедура РассчитатьСуммуНДССтрокиТЧТовары(СтрокаТабличнойЧасти) 
	
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС, СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры 

&НаСервере
Процедура РассчитатьЦенуСтрокиТЧТовары(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество, 2);
	КонецЕсли;
	
КонецПроцедуры 

//+++ AK suvv 2018.11.27 ИП-00019917.06
&НаСервере
Процедура РассчитатьСуммуДокументаНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.РассчитатьСуммуДокумента();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
Конецпроцедуры //--- AK suvv 

&НаСервере
Процедура ОбновитьЦенуСтрокиТЧТовары(СтрокаТабличнойЧасти)
	
	Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДССверху Тогда  
		ЦенаБезНДС = (СтрокаТабличнойЧасти.Цена/(100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)))*100;	
		СтрокаТабличнойЧасти.Цена = ЦенаБезНДС;
	Иначе	
		ЦенаСНДС = (СтрокаТабличнойЧасти.Цена*(100 + УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)))/100;	
		СтрокаТабличнойЧасти.Цена = ЦенаСНДС;
	КонецЕсли;
	
	РассчитатьСуммуСтрокиТЧТовары(СтрокаТабличнойЧасти);
	РассчитатьСуммуНДССтрокиТЧТовары(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦенаТЧТовары()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	ДанныеСтрокиТаблицы = Новый Структура("Цена, Количество, СтавкаНДС, Сумма, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РассчитатьСуммуСтрокиТЧТовары(ДанныеСтрокиТаблицы);
	РассчитатьСуммуНДССтрокиТЧТовары(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры 


&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоРеализации(СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран контрагент!'"));
		Возврат;
	КонецЕсли;
	
	Если СпособЗаполнения = "Заполнить"
		И Объект.Товары.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТЧТоварыЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		ДополнитьТЧТоварыПоРеализации(СпособЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТЧТоварыПоРеализации(СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("Контрагент, Проведен", Объект.Контрагент, Истина);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда 
			Отбор.Вставить("Организация", Объект.Организация);
		КонецЕсли;	
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТЧТоварыПоРеализацииЗавершение", ЭтаФорма, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
		
	Иначе
		
		ДокументРеализации = Объект.Сделка;
		
		ЗаполнитьТЧТоварыПоРеализацииПослеПолученияДокумента(ДокументРеализации, СпособЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТЧТоварыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Товары.Очистить();
		ДополнитьТЧТоварыПоРеализации(ДополнительныеПараметры.СпособЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоРеализацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументРеализации = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	ЗаполнитьТЧТоварыПоРеализацииПослеПолученияДокумента(ДокументРеализации, СпособЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоРеализацииПослеПолученияДокумента(ДокументРеализации, СпособЗаполнения)
	
	ЭтаФорма.Модифицированность = Истина;
	
	Если СпособЗаполнения = "Заполнить" Тогда
		
		ЗаполнитьТоварыПоОснованию(ДокументРеализации);
		
	Иначе // При добавлении надо сворачивать дубли строк
		
		ДобавитьСтрокиТЧТоварыИзДокументаРеализации(ДокументРеализации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(Знач ДокументОснование)
	
	ТоварыПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументОснование);
	Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
		Объект.Товары.Загрузить(ТоварыПоДаннымОснования);
	КонецЕсли;
	
	РассчитатьСуммуДокументаНаСервере();
	
КонецПроцедуры

Функция НайтиСтрокуТЧТовары(Объект, СтруктураОтбора)
	
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиТЧТоварыИзДокументаРеализации(ДокументРеализации)
	
	ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументРеализации);
	
	Если ТаблицаРеализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	
	Для каждого СтрокаРеализации Из ТаблицаРеализации Цикл
		
		// Ищем текущую позицию основания в табличной части документа возврата.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", СтрокаРеализации.Номенклатура);
		СтруктураОтбора.Вставить("Сделка", СтрокаРеализации.Сделка);
		
		СтрокаТабличнойЧасти = НайтиСтрокуТЧТовары(Объект, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаРеализации.Количество;
			
			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуСтрокиТЧТовары(СтрокаТабличнойЧасти);
			РассчитатьСуммуНДССтрокиТЧТовары(СтрокаТабличнойЧасти);
			
		Иначе
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаРеализации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьСуммуДокументаНаСервере();
	
КонецПроцедуры


&НаСервере
Функция СоздатьФайлХранения(СтрокаТаблицы, РасширениеРезультата)
	
	СпрОбъект = Справочники.Файлы.СоздатьЭлемент();
	СпрОбъект.Наименование = СтрокаТаблицы.Представление;
	СпрОбъект.Расширение = РасширениеРезультата;
	СпрОбъект.ДополнительныеСвойства.Вставить("Хранилище", Новый ХранилищеЗначения(Новый Картинка(СтрокаТаблицы.ДанныеКартинки)));
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыСохраненияКартинки(ФайлСсылка)
	
	Картинка = Новый Картинка(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлСсылка));
	Возврат Новый Структура("АдресКартинки, Расширение", ПоместитьВоВременноеХранилище(Картинка), ФайлСсылка.Расширение);
	
КонецФункции


&НаКлиенте
Процедура ВыборДокументаОтгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Объект.Сделка = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОтгрузкиВТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Элементы.Товары.ТекущиеДанные.Сделка = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОтгрузкиНачалоВыбора(Элемент, ПодборВТабличнуюЧасть)
	
	ФиксНастройки =  Новый НастройкиКомпоновкиДанных;	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда  
		Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Эл.ПравоеЗначение = Объект.Организация;
		Эл.Использование = Истина;
		Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда  
		Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Эл.ПравоеЗначение = Объект.Контрагент;
		Эл.Использование = Истина;
		Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда  
	//	Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента");
	//	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	Эл.ПравоеЗначение = Объект.ДоговорКонтрагента;
	//	Эл.Использование = Истина;
	//КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксНастройки);
	
	Если ПодборВТабличнуюЧасть Тогда 
		ОповещениеОВыбореДокументаОтгрузки = Новый ОписаниеОповещения("ВыборДокументаОтгрузкиВТабличнуюЧастьЗавершение", ЭтаФорма, неопределено);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Сделка);
	Иначе
		ОповещениеОВыбореДокументаОтгрузки = Новый ОписаниеОповещения("ВыборДокументаОтгрузкиЗавершение", ЭтаФорма, неопределено);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Сделка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент,,,, ОповещениеОВыбореДокументаОтгрузки);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	Если Объект.ПредъявленСчетФактура Тогда 
		Элементы.ГруппаНомерДатаСФ.Видимость = Истина;
	Иначе
		Элементы.ГруппаНомерДатаСФ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда 
		Ответ = Вопрос("Табличная часть документа будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		Иначе 
			Объект.Товары.Очистить();
			РассчитатьСуммуДокументаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентВАрхиве = ПолучитьРеквизитОбъекта(Объект.Контрагент, "ВАрхиве");
	Если КонтрагентВАрхиве Тогда
		ПоказатьПредупреждение(, "Вы выбрали архивного контрагента. Его контактные данные также находятся в архиве.", 120);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтавкаНДСКонтрагента = ПолучитьРеквизитОбъекта(Объект.Контрагент, "СтавкаНДС");
		Объект.ВариантРасчетаНДС = ?(СтавкаНДСКонтрагента = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"), ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСсверху"), ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле"));
		//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02   
		ЗаполнитьЗначенияСвойствДокумента(Истина);
	Иначе
		НеПриниматьКВычетуНДС = Ложь;		
	//---АК Susk (Суслин К.В.) 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.Контрагент Тогда 
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.Сделка = ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> неопределено Тогда 
		Объект.ДоговорКонтрагента = Результат;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	
	ФиксНастройки = Новый НастройкиКомпоновкиДанных;
	Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДоговора");
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Эл.ПравоеЗначение = СписокВидовДоговоров;
	Эл.Использование = Истина;
	Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда  
		Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Эл.ПравоеЗначение = Объект.Организация;
		Эл.Использование = Истина;
		Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда  
		Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Эл.ПравоеЗначение = Объект.Контрагент;
		Эл.Использование = Истина;
		Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксНастройки);		
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ДоговорКонтрагента);
	
	ОповещениеОВыбореДоговора = Новый ОписаниеОповещения("ВыборДоговораЗавершение", ЭтаФорма, неопределено);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент,,,, ОповещениеОВыбореДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.СтруктурнаяЕдиница Тогда
		Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад.Пустая()
		И НЕ Объект.СтруктурнаяЕдиница.Пустая() Тогда
		Возврат; 
	КонецЕсли;
	
	Объект.СтруктурнаяЕдиница = ПолучитьРеквизитОбъекта(Объект.Склад, "Владелец");
	
КонецПроцедуры

&НаКлиенте
Процедура СкладАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СкладыДляАвтоподбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> неопределено Тогда 
		Объект.Склад = Результат;
		СкладПриИзменении(Объект.Склад);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФиксНастройки = Новый НастройкиКомпоновкиДанных;
	Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтражатьДвиженияПоСкладуБезСкладскихОрдеров");
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Эл.ПравоеЗначение = Истина;
	Эл.Использование = Истина;
	Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксНастройки);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница));	
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Склад);	
	
	ОповещениеОВыбореСклада = Новый ОписаниеОповещения("ВыборСкладаЗавершение", ЭтаФорма, неопределено);
	
	ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент,,,, ОповещениеОВыбореСклада);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаНДСПриИзменении(Элемент)
	
	Если не ПересчитатьЦеныВТабЧасти Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.БезНДС") Тогда
			СтрокаТЧ.СтавкаНДС = Объект.ВариантРасчетаНДС;
		Иначе
			СтрокаТЧ.СтавкаНДС = ПолучитьРеквизитОбъекта(СтрокаТЧ.Номенклатура, "СтавкаНДС");
		КонецЕсли;	
		ДанныеСтрокиТаблицы = Новый Структура("Цена, Количество, СтавкаНДС, Сумма, СуммаНДС");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТЧ);
		ОбновитьЦенуСтрокиТЧТовары(ДанныеСтрокиТаблицы);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТаблицы);
	КонецЦикла;	
	
	РассчитатьСуммуДокументаНаСервере();
	
	ОбновлениеОтображенияЭлементовНДС();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВариантРасчетаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.ВариантРасчетаНДС Тогда 
		ПересчитатьЦеныВТабЧасти = Истина;
	Иначе
		ПересчитатьЦеныВТабЧасти = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументОтгрузкиНачалоВыбора(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= "";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда				
				Сообщить("Не существует файл. " + ИмяФайла);
				Продолжить;
			КонецЕсли;
			Объект.Файл = СоздатьФайлХранения(Новый Структура("Представление, ДанныеКартинки", ВыбФайл.Имя, Новый ДвоичныеДанные(ИмяФайла)), ВыбФайл.Расширение);
			ЭтаФорма.Модифицированность = Истина;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураКартинки = ПолучитьРеквизитыСохраненияКартинки(Объект.Файл);
	ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураКартинки.Расширение);
	Если ПолучитьФайл(СтруктураКартинки.АдресКартинки, ИмяФайла, Ложь) = Истина Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦенаТЧТовары();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦенаТЧТовары();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	
	ДанныеСтрокиТаблицы = Новый Структура("Цена, Количество, СтавкаНДС, Сумма, СуммаНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РассчитатьЦенуСтрокиТЧТовары(ДанныеСтрокиТаблицы);
	
	РассчитатьСуммуНДССтрокиТЧТовары(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	
	ДанныеСтрокиТаблицы = Новый Структура("Цена, Количество, СтавкаНДС, Сумма, СуммаНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РассчитатьСуммуНДССтрокиТЧТовары(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЕдиницаХраненияОстатков = Номенклатура.ЕдиницаХраненияОстатков;
		
		//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
		СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(Номенклатура, Объект.Дата);		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);

		//СтрокаТабличнойЧасти.СчетУчета = ПолучитьСчетУчета(Номенклатура);
		
		//---АК Susk (Суслин К.В.) 
		
		СтрокаТабличнойЧасти.СтатьяТовародвижения = Справочники.СтатьиТовародвижения.ПоступлениеОтПокупателя;	
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент = ЕдиницаХраненияОстатков.Коэффициент;
		Если Объект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		РассчитатьСуммуСтрокиТЧТовары(СтрокаТабличнойЧасти);
		РассчитатьСуммуНДССтрокиТЧТовары(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СчетУчета,
	|СтатьяТовародвижения, ЕдиницаИзмерения, Коэффициент");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = Результат;
	ТоварыНоменклатураПриИзменении(Элементы.Товары.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	СписокВидовНоменклатуры = Новый СписокЗначений;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателей.Оборудование") Тогда
		СписокВидовНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Оборудование"));
	Иначе    
		СписокВидовНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар"));
		СписокВидовНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал"));	
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидНоменклатуры", СписокВидовНоменклатуры));
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ОповещениеОВыбореНоменклатуры = Новый ОписаниеОповещения("ТоварыНоменклатураВыборЗавершение", ЭтаФорма, неопределено);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент, , , , ОповещениеОВыбореНоменклатуры, );
	
КонецПроцедуры  

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = ПолучитьРеквизитОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент");
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыРеализацияТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументОтгрузкиНачалоВыбора(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	РассчитатьСуммуДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокументаНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018466
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Возврат товаров от покупателя");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(Объект.Ссылка.ПолучитьОбъект(), ЭтаФорма);
		//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02   
		ЗаполнитьЗначенияСвойствДокумента();
		//---АК Susk (Суслин К.В.) 
	Иначе
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателей.Продажа");
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокОбъект, "Продажа");
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		Если НЕ ЗначениеЗаполнено(Объект.ВариантРасчетаНДС) Тогда
			Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле");
		КонецЕсли;	
		//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02   
		ЗаполнитьЗначенияСвойствДокумента(Истина);
		//---АК Susk (Суслин К.В.) 
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновлениеОтображенияЭлементовФормы();
	
	//+++АК sils 08.06.2018 ИП-00018466
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
	//---АК
КонецПроцедуры 

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДокументуОтгрузки(Команда)
	
	ЗаполнитьТЧТоварыПоРеализации("Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИзДокументаОтгрузки(Команда)
	
	ЗаполнитьТЧТоварыПоРеализации("Добавить");
	
КонецПроцедуры

#КонецОбласти

//+++АК Susk (Суслин К.В.) 2018.05.21 ИП-00018745
&НаКлиенте
Процедура ВыгрузитьВБП(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
	
	Если ЭтаФорма.Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ был изменен. Сначала нужно записать документ");
		Возврат;
	КонецЕсли;	
		
	ВыгрузитьВБПСервер();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.05.21 ИП-00018745
&НаСервере
Процедура ВыгрузитьВБПСервер()
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("ВозвратТоваровОтПокупателя", "ВозвратТоваровОтПокупателя", Объект.Ссылка); 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02   
&НаСервере
Процедура ЗаполнитьЗначенияСвойствДокумента(ПоКонтрагенту = Ложь)
	   
	//по контрагенту заполняем свойства - НеПриниматьКВычетуНДС, СтатьяСписания. Остальные по самому документу.	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НеПриниматьКВычетуНДС);
	
	Если ПоКонтрагенту Тогда
		МассивСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.СтатьяСписания);//статья списания		
	Иначе
		МассивСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.ОплатаВозврата);
	КонецЕсли;                                                                          	
	
	ЗнСвойств = ЗаполнениеДокументов.ВернутьТаблицуЗначенийСвойств(МассивСвойств, ?(ПоКонтрагенту, Объект.Контрагент, Объект.Ссылка)); //Тз - объект, свойство, значение
	
	//Не принимать к вычету НДС
	НеПриниматьКВычетуНДС = Ложь;
	НайдСтрНеПриниматьКВычетуНДС = ЗнСвойств.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.НеПриниматьКВычетуНДС, "Свойство");
	
	Если НЕ НайдСтрНеПриниматьКВычетуНДС = Неопределено Тогда
		НеПриниматьКВычетуНДС = НайдСтрНеПриниматьКВычетуНДС.Значение;		
	КонецЕсли;
	
	//Статья списания		
	Если ПоКонтрагенту Тогда
		НайдСтрСтатьяСписания = ЗнСвойств.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.СтатьяСписания, "Свойство");//статья списания
		
		Если НЕ НайдСтрСтатьяСписания = Неопределено И ЗначениеЗаполнено(НайдСтрСтатьяСписания.Значение) Тогда
			Объект.СтатьяСписания = НайдСтрСтатьяСписания.Значение;		
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ ПоКонтрагенту Тогда
		
		//возврат оплачен
		ОплатаВозврата = Ложь;	
		НайдСтрОплатаВозврата = ЗнСвойств.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.ОплатаВозврата, "Свойство");
		
		Если НЕ НайдСтрОплатаВозврата = Неопределено Тогда
			ОплатаВозврата = НайдСтрОплатаВозврата.Значение;			
		КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+++АК Susk (Суслин К.В.) 2018.10.29 ИП-00019917.02
	//у нас в модуле идет запись свойства для документов, созданных не из формы, а кодом. Второй раз там не надо записывать 
	//т.к. мы уже с формы это сделали. Поэтому регулирую это доп.свойством объекта.
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПриниматьКВычетуНДС", НеПриниматьКВычетуНДС);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОплатаВозврата", ОплатаВозврата);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатьяСписания", Объект.СтатьяСписания);
	//---АК Susk (Суслин К.В.) 
	
КонецПроцедуры
