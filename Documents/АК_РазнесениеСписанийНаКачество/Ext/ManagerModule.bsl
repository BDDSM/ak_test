&НаСервере
Процедура ЗаполнитьНаСервере(ЭтотОбъект) Экспорт
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.УстановитьПараметр("ТекДата", ЭтотОбъект.Дата);
	ЗапросКеш.Текст = "ВЫБРАТЬ
	                  |	СоответствиеОбъектРольСрезПоследних.Объект,
	                  |	СоответствиеОбъектРольСрезПоследних.РольПользователя
	                  |ИЗ
	                  |	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКонтролюКачестваДневной)) КАК СоответствиеОбъектРольСрезПоследних
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	РолиПользователейСоставРоли.Ссылка,
	                  |	РолиПользователейСоставРоли.Сотрудник
	                  |ИЗ
	                  |	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	РолиПользователейСоставРоли.Ссылка,
	                  |	РолиПользователейСоставРоли.НомерСтроки";
					  
	Результаты = ЗапросКеш.ВыполнитьПакет();
	ТабПривязка = Результаты[0].Выгрузить();
	ТабРоли = Результаты[1].Выгрузить();
	
	ТабКеш = ЭтотОбъект.ТорговыеТочки.Выгрузить();	
	
		ЭтотОбъект.ТорговыеТочки.Очистить();
		ТаблицаСписания=ПолучитьТаблицуПоСписанию(ЭтотОбъект.Дата);
		ТекущийУинОперации="";
		ТаблицаСписания.Сортировать("УинОперации, ДатаКартинки Убыв");
		Для Каждого СтрокаБоя из ТаблицаСписания цикл
			//в отчет не пойдет номенклатура без упаковки
			Если СтрокаБоя.Номенклатура.БезУпаковки тогда
				Продолжить;
			КонецЕсли;
		//	Если ТекущийУинОперации<>СтрокаБоя.УинОперации тогда
		СтрокаКешПривязка = ТабПривязка.Найти(СтрокаБоя.Магазин, "Объект");
		Если СтрокаКешПривязка = Неопределено
			И ЗначениеЗаполнено(ЭтотОбъект.ДневнойТехнолог) Тогда
			Продолжить;
		КонецЕсли;	
		Если СтрокаКешПривязка <> Неопределено Тогда
			СтрокиРоль = ТабРоли.НайтиСтроки(Новый Структура("Ссылка, Сотрудник", СтрокаКешПривязка.РольПользователя, ЭтотОбъект.ДневнойТехнолог));
			Если СтрокиРоль.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
			ТекущийУинОперации=СтрокаБоя.УинОперации;	
			СтрокаТЧ=ЭтотОбъект.ТорговыеТочки.Добавить();
			СтрокаТЧ.Номенклатура=СтрокаБоя.Номенклатура;
			СтрокаТЧ.ТорговаяТочка=СтрокаБоя.Магазин;
			СтрокаТЧ.Поставщик=СтрокаБоя.Поставщик;
			СтрокаТЧ.КомментарийПродавца=СтрокаБоя.КомментарийПродавца;
			СтрокаТЧ.Колво=СтрокаБоя.Колво;
			СтрокаТЧ.Сумма=СтрокаБоя.Сумма;
			СтрокаТЧ.Технолог=СтрокаБоя.Технолог;
			СтрокаТЧ.Фотография=СтрокаБоя.ДатаКартинки;
			СтрокаТЧ.Характеристика=СтрокаБоя.Характеристика;
			СтрокаТЧ.ДатаПроизводства=СтрокаБоя.ДатаПроизводства;
			СтрокаТЧ.КодПричины = СтрокаБоя.ПричинаСписания;
			СтрокаТЧ.ПричинаСписания=Перечисления.АК_ПричиныСписанияПоКачеству.ПлохоеКачествоОтПоставщика;
			СтрокаТЧ.УинОперации = ТекущийУинОперации;
			СтрокаКеш = ТабКеш.Найти(ТекущийУинОперации, "УинОперации");
			Если СтрокаКеш <> Неопределено
				И ЗначениеЗаполнено(СтрокаКеш.ПричинаСписания) Тогда
				СтрокаТЧ.ПричинаСписания = СтрокаКеш.ПричинаСписания;
			КонецЕсли;	
			//ставим автоматом статус для товаров ниже 100 р
				//Если СтрокаТЧ.Сумма<100 тогда
				//	СтрокаТЧ.ПричинаБоя=Перечисления.АК_ПричиныБоя.Склад;
				//КонецЕсли;
			//Лобачев - статус автоматом не проставляется, если сумма меньше 300, то метим для отбора
				//Если СтрокаТЧ.Сумма<300 тогда
				//	СтрокаТЧ.ЭтоМелкий=Истина;
				//КонецЕсли;
		//	КонецЕсли;
			СтрокаТЧ.АдресКартинки=СтрокаТЧ.АдресКартинки+"№№№№"+СтрокаБоя.ИмяФайла;
			СтрокаТЧ.КомментарийКФото=СтрокаТЧ.КомментарийКФото+"№№№№"+СтрокаБоя.Комментарии;
		КонецЦикла;
		//проставим причину боя "Склад", если итоговая сумма списания меньше 300 р
		//ТаблИтогов=ЭтотОбъект.ТорговыеТочки.Выгрузить();
		//ТаблИтогов.Свернуть("СтрокаСсылка","Сумма");
		//Для Каждого Стр из ЭтотОбъект.ТорговыеТочки цикл
		//	ИтоговаяСтрока=ТаблИтогов.Найти(Стр.СтрокаСсылка,"СтрокаСсылка");
		//	Если ИтоговаяСтрока.Сумма<300 и Стр.СтрокаСсылка<>"" тогда
		//		Стр.ПричинаБоя=Перечисления.АК_ПричиныБоя.Склад;
		//	КонецЕсли;
		//КонецЦикла;
        ЭтотОбъект.ТорговыеТочки.Сортировать("Номенклатура, Характеристика, КомментарийПродавца");
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПоБою(ДатаНач, ДатаКон)
   
   УстановитьПривилегированныйРежим(Истина);
   КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
   Если Прав(КонстантаКаталог, 1) <> "\" Тогда
       КонстантаКаталог = КонстантаКаталог + "\";
   КонецЕсли;   
       
   КонстантаКаталог = КонстантаКаталог + "СписанияНаМагазинах\";
   
   ЗапросКеш = Новый Запрос();
   ЗапросКеш.УстановитьПараметр("Дата", ДобавитьМесяц(ДатаНач, -1));
   ЗапросКеш.УстановитьПараметр("ДатаНач", ДатаНач - 86400*5);
   ЗапросКеш.УстановитьПараметр("ДатаКон", ДатаНач + 86400*5);
   ЗапросКеш.Текст = "ВЫБРАТЬ
                     |	СебестоимостьТоваровСрезПоследних.Номенклатура,
                     |	СебестоимостьТоваровСрезПоследних.Себестоимость
                     |ИЗ
                     |	РегистрСведений.СебестоимостьТоваров.СрезПоследних(&Дата, ) КАК СебестоимостьТоваровСрезПоследних
                     |;
                     |
                     |////////////////////////////////////////////////////////////////////////////////
                     |ВЫБРАТЬ
                     |	ПриложенныеКартинкиКСписаниямКомментарии.УинКартинки,
                     |	ПриложенныеКартинкиКСписаниямКомментарии.Пользователь,
                     |	ПриложенныеКартинкиКСписаниямКомментарии.Комментарий
                     |ИЗ
                     |	РегистрСведений.ПриложенныеКартинкиКСписаниямКомментарии КАК ПриложенныеКартинкиКСписаниямКомментарии
                     |ГДЕ
                     |	ПриложенныеКартинкиКСписаниямКомментарии.ДатаКомментария МЕЖДУ &ДатаНач И &ДатаКон
                     |
                     |УПОРЯДОЧИТЬ ПО
                     |	ПриложенныеКартинкиКСписаниямКомментарии.ДатаКомментария
                     |;
                     |
                     |////////////////////////////////////////////////////////////////////////////////
                     |ВЫБРАТЬ
                     |	РасходныйОрдерСкладТовары.Номенклатура,
                     |	РасходныйОрдерСкладТовары.Ссылка.Склад.Владелец КАК Склад,
                     |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения,
                     |	МаршрутныйЛистРасходныеОрдера.Ссылка.Перевозчик,
                     |	ВЫРАЗИТЬ(РасходныйОрдерСкладТовары.Ссылка.Получатель КАК Справочник.СтруктурныеЕдиницы) КАК Магазин,
                     |	РасходныйОрдерСкладТовары.Ссылка
                     |ИЗ
                     |	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
                     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.РасходныеОрдера КАК МаршрутныйЛистРасходныеОрдера
                     |		ПО РасходныйОрдерСкладТовары.Ссылка = МаршрутныйЛистРасходныеОрдера.Документ
                     |ГДЕ
                     |	РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения МЕЖДУ &ДатаНач И &ДатаКон";
                     
   Результаты = ЗапросКеш.ВыполнитьПакет();
   ТабСебестоимость = Результаты[0].Выгрузить();
   ТабСебестоимость.Индексы.Добавить("Номенклатура");
   ТабКомментарии = Результаты[1].Выгрузить();
   ТабКомментарии.Индексы.Добавить("УинКартинки");
   ТабРасходники = Результаты[2].Выгрузить();
   ТабРасходники.Индексы.Добавить("ДатаРаспределения, Магазин, Номенклатура");
   
   ТабСписания = Новый ТаблицаЗначений();
   ТабСписания.Колонки.Добавить("УинОперации");
   ТабСписания.Колонки.Добавить("Дата");
   ТабСписания.Колонки.Добавить("Номенклатура");
   ТабСписания.Колонки.Добавить("Магазин");
   ТабСписания.Колонки.Добавить("Колво", Новый ОписаниеТипов("Число"));
   ТабСписания.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
   ТабСписания.Колонки.Добавить("Склад");
   ТабСписания.Колонки.Добавить("Перевозчик");
   ТабСписания.Колонки.Добавить("УинКартинки");
   ТабСписания.Колонки.Добавить("Комментарии");
   ТабСписания.Колонки.Добавить("ИмяФайла");
   ТабСписания.Колонки.Добавить("ДатаКартинки");
   ТабСписания.Колонки.Добавить("СписаниеСсылка");    //
   
   ТабФото = Новый ТаблицаЗначений();
   ТабФото.Колонки.Добавить("LineUid");
   ТабФото.Колонки.Добавить("PhotoUid");
   ТабФото.Колонки.Добавить("Ext");
   ТабФото.Колонки.Добавить("PhotoDate");
   
   ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
    ТекстЗапроса = "SELECT Photo._Fld7129 as LineUid, Photo._Fld7130 as PhotoUid, Photo._Fld7135 as Ext, Photo._Fld7136 as PhotoDate 
                   |INTO #UIDs
                   |FROM IzbenkaFin.dbo._InfoRg7128 (nolock) as Photo
                   |where CASE WHEN _Fld7136 <= '4001-01-01T00:00:00' THEN 0 
                   |       WHEN DATEADD(YEAR, -2000, _Fld7136) >= " + ВнешниеДанные.ФорматПоля(ДатаНач - 86400*5) + " AND DATEADD(YEAR, -2000, _Fld7136) <= " + ВнешниеДанные.ФорматПоля(КонецДня(ДатаКон + 86400*5)) + " THEN 1
                   |       ELSE 0 END = 1
                   |       
				   |SELECT ISNULL(UIDs.LineUid, '') LineUid, ISNULL(UIDs.PhotoUid, '') PhotoUid, ISNULL(UIDs.Ext, '') Ext, DATEADD(YEAR, -2000, UIDs.PhotoDate) PhotoDate
                   |FROM SMS_REPL.dbo.TD_move (nolock) TD 
                   |INNER Join #UIDs UIDs ON CAST(TD.tduid as nvarchar(50)) = UIDs.LineUid
				   |where operation_type IN (104) and TD.Confirm_type = 1
                   |   and closedate >= " + ВнешниеДанные.ФорматПоля(ДатаНач) + " and closedate <= " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаКон) + 47580) + "
				   |
                   |SELECT CAST(TD.tduid as nvarchar(50)) LineUid, TD.closedate, Tov2Uid.UIN as TovUin, CAST(TT2Uid.UID as nvarchar(50)) as TTUid, TD.Quantity
                   |FROM SMS_REPL.dbo.TD_move (nolock) TD 
                   |LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID (nolock) as Tov2Uid ON TD.id_tov = Tov2Uid.id
                   |LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID (nolock) as TT2Uid ON TD.ShopNo_rep = TT2Uid.ShopNo
                   //|where CAST(TD.tduid as nvarchar(50)) IN (SELECT UIDs.LineUid FROM #UIDs UIDs) and operation_type IN (104) and TD.Confirm_type = 1
				   |where operation_type IN (104) and TD.Confirm_type = 1
                   |   and closedate >= " + ВнешниеДанные.ФорматПоля(ДатаНач) + " and closedate <= " + ВнешниеДанные.ФорматПоля(НачалоДня(ДатаКон) + 47580);
   
   rs = ADOСоединение.Execute(ТекстЗапроса);
   Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
       rs=rs.NextRecordSet();
   КонецЦикла;
   
   Попытка
       rs.MoveFirst();
       
       Пока НЕ rs.EOF() Цикл
           СтрокаДоб = ТабФото.Добавить();
		   СтрокаДоб.LineUid = rs.Fields("LineUid").Value;
		   СтрокаДоб.PhotoUid = rs.Fields("PhotoUid").Value;
		   СтрокаДоб.ext = rs.Fields("ext").Value;
		   СтрокаДоб.PhotoDate = rs.Fields("PhotoDate").Value;
           rs.MoveNext();
       КонецЦикла;
   Исключение
   КонецПопытки;
   
   rs=rs.NextRecordSet();
   
   Попытка
       rs.MoveFirst();
       
       Пока НЕ rs.EOF() Цикл
           СтрокаДоб = ТабСписания.Добавить();
		   СтрокаДоб.УинОперации = rs.Fields("LineUid").Value;
           СтрокаДоб.Дата = rs.Fields("closedate").Value;
           СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TovUin").Value));
           СтрокаДоб.Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TTUid").Value));
           СтрокаДоб.Колво = rs.Fields("Quantity").Value;
           
		   СтрокаКешСебестоимость = ТабСебестоимость.Найти(СтрокаДоб.Номенклатура, "Номенклатура");
		   Если СтрокаКешСебестоимость <> Неопределено Тогда
               СтрокаДоб.Сумма = СтрокаДоб.Колво * СтрокаКешСебестоимость.Себестоимость;
           КонецЕсли;
           
           СтрокиРасходники = ТабРасходники.НайтиСтроки(Новый Структура("ДатаРаспределения, Магазин, Номенклатура", НачалоДня(СтрокаДоб.Дата), СтрокаДоб.Магазин, СтрокаДоб.Номенклатура));
           Если СтрокиРасходники.Количество() > 0 Тогда
               СтрокаДоб.Склад = СтрокиРасходники[0].Склад;
               СтрокаДоб.Перевозчик = СтрокиРасходники[0].Перевозчик;
			   СтрокаДоб.СписаниеСсылка=СтрокиРасходники[0].Ссылка;     //
		   КонецЕсли;
		   СтрокиФото = ТабФото.НайтиСтроки(Новый Структура("LineUid", НРег(СтрокаДоб.УинОперации)));
		   Если СтрокиФото.Количество() > 0 Тогда
			   СтрокаДоб.УинКартинки = СтрокиФото[0].PhotoUid;
			   Если ЗначениеЗаполнено(СтрокаДоб.УинКартинки) Тогда
	           		СтрокаДоб.ИмяФайла = КонстантаКаталог + Формат(СтрокиФото[0].PhotoDate, "ДФ=yyyyMM") + "\" + СтрокаДоб.УинКартинки + "." + СтрокиФото[0].Ext;
				Иначе
					СтрокаДоб.ИмяФайла = "";
			   КонецЕсли;	
			   СтрокаДоб.ДатаКартинки = СтрокиФото[0].PhotoDate;
			   СтрокиКомменты = ТабКомментарии.НайтиСтроки(Новый Структура("УинКартинки", СтрокаДоб.УинКартинки));
	           СтрокаКоммент = "";
	           Для Каждого СтрокаКоммент Из СтрокиКомменты Цикл
	               СтрокаКоммент = СтрокаКоммент + ?(ЗначениеЗаполнено(СтрокаКоммент), Символы.ПС, "") + СтрокаКоммент.Пользователь + ": " + СокрЛП(СтрокаКоммент.Комментарий);
	           КонецЦикла;   
	           СтрокаДоб.Комментарии = СтрокаКоммент;
		   КонецЕсли;
		   Для н = 1 По СтрокиФото.Количество() - 1 Цикл
			   СтрокаНов = ТабСписания.Добавить();
			   ЗаполнитьЗначенияСвойств(СтрокаНов, СтрокаДоб,, "УинКартинки, Колво, Сумма, ИмяФайла, ДатаКартинки, Комментарии");
			   СтрокаНов.УинКартинки = СтрокиФото[н].PhotoUid;
			   Если ЗначениеЗаполнено(СтрокаНов.УинКартинки) Тогда
	           		СтрокаНов.ИмяФайла = КонстантаКаталог + Формат(СтрокиФото[н].PhotoDate, "ДФ=yyyyMM") + "\" + СтрокаДоб.УинКартинки + "." + СтрокиФото[н].Ext;
				Иначе
					СтрокаДоб.ИмяФайла = "";
			   КонецЕсли;	
			   СтрокаНов.ДатаКартинки = СтрокиФото[н].PhotoDate;
			   СтрокиКомменты = ТабКомментарии.НайтиСтроки(Новый Структура("УинКартинки", СтрокаНов.УинКартинки));
	           СтрокаКоммент = "";
	           Для Каждого СтрокаКоммент Из СтрокиКомменты Цикл
	               СтрокаКоммент = СтрокаКоммент + ?(ЗначениеЗаполнено(СтрокаКоммент), Символы.ПС, "") + СтрокаКоммент.Пользователь + ": " + СокрЛП(СтрокаКоммент.Комментарий);
	           КонецЦикла;   
	           СтрокаНов.Комментарии = СтрокаКоммент;
		   КонецЦикла;	   
           rs.MoveNext();
       КонецЦикла;
   Исключение
   КонецПопытки;
   ADOСоединение.Close();
   
   //свернем всю таблицу
   ТабРезультат = ТабСписания.СкопироватьКолонки();
   Для Каждого СтрокаТаб Из ТабСписания Цикл
	   СтрокиРезультат = ТабРезультат.НайтиСтроки(Новый Структура("Номенклатура, Магазин, Склад, Перевозчик", СтрокаТаб.Номенклатура, СтрокаТаб.Магазин, СтрокаТаб.Склад, СтрокаТаб.Перевозчик));
	   Если СтрокиРезультат.Количество() = 0 Тогда
		   ЗаполнитьЗначенияСвойств(ТабРезультат.Добавить(), СтрокаТаб);
	   Иначе
		   СтрокиРезультат[0].Колво = СтрокиРезультат[0].Колво + СтрокаТаб.Колво;
		   СтрокиРезультат[0].Сумма = СтрокиРезультат[0].Сумма + СтрокаТаб.Сумма;
		   СтрокиРезультат[0].Комментарии = "" + СтрокиРезультат[0].Комментарии + ?(ЗначениеЗаполнено(СтрокиРезультат[0].Комментарии), "№№№№", "") + СтрокаТаб.Комментарии;
		   СтрокиРезультат[0].ИмяФайла = "" + СтрокиРезультат[0].ИмяФайла + ?(ЗначениеЗаполнено(СтрокиРезультат[0].ИмяФайла), "№№№№", "") + СтрокаТаб.ИмяФайла;
	   КонецЕсли;   
   КонецЦикла;   
   
   Возврат ТабРезультат;
   
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПоСписанию(Дата)
   
	УстановитьПривилегированныйРежим(Истина);
	КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КонстантаКаталог, 1) <> "\" Тогда
		КонстантаКаталог = КонстантаКаталог + "\";
	КонецЕсли;   
	
	КонстантаКаталог = КонстантаКаталог + "СписанияНаМагазинах\";
	
	ЗапросКеш = Новый Запрос();
	ЗапросКеш.УстановитьПараметр("Дата", ДобавитьМесяц(Дата, -1));
	ЗапросКеш.УстановитьПараметр("ДатаНач", Дата - 86400*5);
	ЗапросКеш.УстановитьПараметр("ДатаКон", Дата + 86400*5);
	ЗапросКеш.УстановитьПараметр("ТекДата", Дата);
	ЗапросКеш.Текст = "ВЫБРАТЬ
	                  |	ПриложенныеКартинкиКСписаниямКомментарии.УинКартинки,
	                  |	ПриложенныеКартинкиКСписаниямКомментарии.Пользователь,
	                  |	ПриложенныеКартинкиКСписаниямКомментарии.Комментарий
	                  |ИЗ
	                  |	РегистрСведений.ПриложенныеКартинкиКСписаниямКомментарии КАК ПриложенныеКартинкиКСписаниямКомментарии
	                  |ГДЕ
	                  |	ПриложенныеКартинкиКСписаниямКомментарии.ДатаКомментария МЕЖДУ &ДатаНач И &ДатаКон
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	ПриложенныеКартинкиКСписаниямКомментарии.ДатаКомментария
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ПриложенныеКартинкиКСписаниямМагазины.УинСтроки,
	                  |	ПриложенныеКартинкиКСписаниямМагазины.УинКартинки,
	                  |	ПриложенныеКартинкиКСписаниямМагазины.Расширение,
	                  |	ПриложенныеКартинкиКСписаниямМагазины.ДатаДобавленияЗаписи
	                  |ИЗ
	                  |	РегистрСведений.ПриложенныеКартинкиКСписаниямМагазины КАК ПриложенныеКартинкиКСписаниямМагазины
	                  |ГДЕ
	                  |	ПриложенныеКартинкиКСписаниямМагазины.ДатаДобавленияЗаписи МЕЖДУ &ДатаНач И &ДатаКон
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ВЗ_Харки.Владелец,
	                  |	ВЗ_Харки.Ссылка,
	                  |	ВЗ_Харки.id_kontr,
	                  |	ВЗ_Харки.Значение,
	                  |	ВЫБОР
	                  |		КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследних.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	                  |			ТОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	                  |		ИНАЧЕ ЕСТЬNULL(СоответствиеОбъектРольСрезПоследних.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка))
	                  |	КОНЕЦ КАК РольПользователя
	                  |ИЗ
	                  |	(ВЫБРАТЬ
	                  |		ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	                  |		ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	                  |		ХарактеристикиНоменклатуры.id_kontr КАК id_kontr,
	                  |		ЗначенияСвойствОбъектов.Значение КАК Значение
	                  |	ИЗ
	                  |		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                  |			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	                  |				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))) КАК ВЗ_Харки
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних
	                  |		ПО ВЗ_Харки.Ссылка = СоответствиеОбъектРольСрезПоследних.Объект
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихКонтр
	                  |		ПО ВЗ_Харки.Значение = СоответствиеОбъектРольСрезПоследнихКонтр.Объект
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	РолиПользователейСоставРоли.Ссылка,
	                  |	РолиПользователейСоставРоли.Сотрудник
	                  |ИЗ
	                  |	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ТипыОперацийМагазина.Ссылка,
	                  |	ТипыОперацийМагазина.code_operation
	                  |ИЗ
	                  |	Справочник.ТипыОперацийМагазина КАК ТипыОперацийМагазина
	                  |ГДЕ
	                  |	ТипыОперацийМагазина.field_operation = ""id_reason""";
	
	Результаты = ЗапросКеш.ВыполнитьПакет();
	ТабКомментарии = Результаты[0].Выгрузить();
	ТабКомментарии.Индексы.Добавить("УинКартинки");
	ТабКартинки = Результаты[1].Выгрузить();
	ТабКартинки.Индексы.Добавить("УинКартинки");
	ТабХарактеристики = Результаты[2].Выгрузить();
	ТабХарактеристики.Индексы.Добавить("Владелец, id_kontr");
	ТабРоли = Результаты[3].Выгрузить();
	ТабРоли.Индексы.Добавить("Ссылка");
	
	ТабПричины = Результаты[4].Выгрузить();
	
	ТабСписания = Новый ТаблицаЗначений();
	ТабСписания.Колонки.Добавить("УинОперации");
	ТабСписания.Колонки.Добавить("Номенклатура");
	ТабСписания.Колонки.Добавить("Характеристика");
	ТабСписания.Колонки.Добавить("ДатаПроизводства");
	ТабСписания.Колонки.Добавить("Поставщик");
	ТабСписания.Колонки.Добавить("ПричинаСписания");
	ТабСписания.Колонки.Добавить("Магазин");
	ТабСписания.Колонки.Добавить("Технолог");
	ТабСписания.Колонки.Добавить("Колво", Новый ОписаниеТипов("Число"));
	ТабСписания.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТабСписания.Колонки.Добавить("УинКартинки");
	ТабСписания.Колонки.Добавить("Комментарии");
	ТабСписания.Колонки.Добавить("КомментарийПродавца");
	ТабСписания.Колонки.Добавить("ИмяФайла");
	ТабСписания.Колонки.Добавить("ДатаКартинки");
	
	ТабФото = Новый ТаблицаЗначений();
	ТабФото.Колонки.Добавить("LineUid");
	ТабФото.Колонки.Добавить("PhotoUid");
	ТабФото.Колонки.Добавить("Ext");
	ТабФото.Колонки.Добавить("PhotoDate");
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапроса = "declare @date1 as datetime , @date2 as datetime
	|
	|
	|set @date1=CONVERT(date," + ВнешниеДанные.ФорматПоля(Дата) + ")
	|set @date2 =CONVERT(date," + ВнешниеДанные.ФорматПоля(Дата) + ")
	|set @date2= @date2 + CONVERT(time,'17:17')
	|
	| 
	|
	|if OBJECT_ID('tempdb..#t') is not null drop table #t
	|if OBJECT_ID('tempdb..#t_kontr') is not null drop table #t_kontr
	|if OBJECT_ID('tempdb..#t_not_kontr') is not null drop table #t_not_kontr
	|
	|-- есть id_kontr
	|select a.id_tov, a.id_kontr, a.Qty, a.tduid, a.ShopNo_rep, a.Date_proizv, a.Descr, a.id_reason 
	|into #t_kontr
	|from (
	|select td.id_tov, isnull(td.id_kontr,0) id_kontr , -td.Quantity*t_o.znak qty, td.tduid tduid, td.ShopNo_rep ShopNo_rep, td.Date_proizv, td.Descr, td.id_reason
	|from SMS_REPL..TD_move as td with(nolock)
	|inner join SMS_REPL..Types_Operation as t_o with (nolock) on td.operation_type=t_o.code_operation
	|and t_o.table_operation='td_move' and t_o.field_operation='operation_type_orig'
	|where closedate between @date1 and @date2 and td.operation_type in (103) and Confirm_type=1 and isnull(td.id_kontr,0)<>0
	|
	|union all
	|select cl.id_tov_cl, isnull(cl.ManufacturerID,0), case when cl.OperationType_cl =103 then 1 else -1 end * cl.Quantity qty, cl.CheckLineUID, TT.N, cl.Date_proiizv, '', cl.id_reason
	|from SMS_IZBENKA..Checkline as cl with(nolock)
	|left outer join M2.dbo.tt TT ON cl.id_tt_cl = TT.id_TT
	|where date_ch between @date1 and @date2 and cl.OperationType_cl in (103) and isnull(cl.ManufacturerID,0)<>0
	|
	|) a
	|
	|
	|--нет id_kontr
	|/*select a.id_tov, a.ShopNo_rep, a.id_kontr, a.Qty Qty, a.tduid, a.Date_proizv, a.Descr, a.id_reason   
	|into #t_not_kontr
	|from (
	|select td.id_tov, td.ShopNo_rep,isnull(td.id_kontr,0) id_kontr , -td.Quantity*t_o.znak qty, td.tduid, td.Date_proizv, td.Descr, td.id_reason
	|from SMS_REPL..TD_move as td with(nolock)
	|inner join SMS_REPL..Types_Operation as t_o with (nolock) on td.operation_type=t_o.code_operation
	|and t_o.table_operation='td_move' and t_o.field_operation='operation_type_orig'
	|where closedate between @date1 and @date2 and td.operation_type in (103) and Confirm_type=1 and isnull(td.id_kontr,0)=0
	|
	|union all
	|select cl.id_tov_cl, ch.ShopNo, isnull(cl.ManufacturerID,0), case when cl.OperationType_cl =103 then 1 else -1 end * cl.Quantity qty, cl.CheckLineUID, cl.Date_proiizv, '', cl.id_reason
	|from SMS_IZBENKA..Checkline as cl with(nolock) inner join SMS_IZBENKA..Checks as ch with(nolock) on cl.CheckUID=ch.CheckUID
	|where date_ch between @date1 and @date2 and cl.OperationType_cl in (103) and isnull(cl.ManufacturerID,0)=0
	|
	|
	|) a
	|
	|
	|insert into #t_kontr( id_tov, id_kontr, Qty, ShopNo_rep, tduid, Date_proizv, Descr, id_reason)
	|select k.id_tov, isnull(pr.id_kontr,0), k.Qty Qty, k.ShopNo_rep, k.tduid, k.Date_proizv, k.Descr, k.id_reason
	|from M2..Price as pr
	|right join #t_not_kontr as k on pr.id_tov=k.id_tov and pr.ShopNo_=k.ShopNo_Rep*/
	|
	|
	|
	|declare @row_UID as uniqueidentifier = newid()
	|
	|select @row_UID row_UID, id_tov, id_kontr, Qty Qty, 0 price, ShopNo_rep, tduid, Date_proizv, Descr, id_reason, ROW_NUMBER() over (order by id_tov, id_kontr) rn
	|into #t
	|from #t_Kontr
	|
	|
	|drop table #t_kontr
	|--drop table #t_not_kontr
	|
	| 
	|
	|
	|--получим последние цены поставщиков или себестоимость товара
	|update #t set price=case when isnull(kontrpr.Price, 0) =0 then isnull(pr.sebest,0) else KontrPr.Price end
	|from #t t left join
	|(select a.Price, a.Дата, a.id_kontr, a.id_tov from
	|(
	|select _Fld3218RRef TovRef, _Fld3221RRef HarRef, CONVERT(decimal(15,2), _Fld3222) Price, hk.id_kontr, hk.id_tov
	|, convert(varchar(10), case when year(prKontr._Period)>3000 then dateadd(year,-2000,prKontr._Period) else prKontr._Period end,105) Дата
	|, ROW_NUMBER()over (partition by _Fld3218RRef, _Fld3221RRef order by _Period desc ) rn
	|from IzbenkaFin.._InfoRg3217 as prKontr with(nolock)
	|inner join M2..Har_kontr as hk on hk.HaracRef=prKontr._Fld3221RRef
	|
	|where prKontr._Fld3232<>1 and
	|case when year(prKontr._Period)>3000 then dateadd(year,-2000,prKontr._Period) else prKontr._Period end <=CONVERT(date,getdate())) a
	|where a.rn=1) as KontrPr on KontrPr.id_kontr=t.id_kontr and KontrPr.id_tov= t.id_tov
	|left join Reports..Price_1C_tov as pr on t.id_tov=pr.id_tov
	|
	|--заполним таблицу для авс анализа
	|insert into reports..ABC_analiz (row_UID,parameter_id, pokazatel)
	|select row_UID, rn, Qty*price from #t
	|
	|--произведем авс анализ
	|exec Reports..ABC_analis @row_uid
	|
	|--получим позиции из группы А
	|select t.id_tov , t.id_kontr,convert(date,@date1) date_sp, t.Qty*t.price SummaSpis, t.qty QtySpis, t.ShopNo_rep, t.tduid, t.Date_proizv, t.Descr, t.id_reason
	|into #res
	|from #t t inner join Reports..ABC_analiz as abc with(nolock) on t.row_UID=abc.row_UID and t.rn=abc.parameter_ID and abc.A='A'
	|where t.id_tov not in (select id_tov from M2..Tovari where БезУпаковки=1)
	|
	|--очистим таблицу АВС анализа
	|delete from Reports..ABC_analiz
	|from Reports..ABC_analiz abc inner join #t t on t.row_UID=abc.row_UID
	|
	|drop table #t
	|
	|select CAST(res.tduid as nvarchar(50)) as tduid, 
	|Tov2Uid.UIN as TovUin, CAST(TT2Uid.UID as nvarchar(50)) as TTUid, res.id_kontr, res.QtySpis, res.SummaSpis, CAST(res.Date_proizv as datetime) Date_proizv, CAST(res.Descr as nvarchar(1000)) as Descr, res.id_reason
	|from #res as res
	|LEFT OUTER JOIN IzbenkaFin.dbo.TovBin2UID (nolock) as Tov2Uid ON res.id_tov = Tov2Uid.id
	|LEFT OUTER JOIN IzbenkaFin.dbo.TTBin2UID (nolock) as TT2Uid ON res.ShopNo_rep = TT2Uid.ShopNo";
	
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Пока rs <> Неопределено И rs.Fields.Count <= 0 Цикл
		rs=rs.NextRecordSet();
	КонецЦикла;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			СтрокаДоб = ТабСписания.Добавить();
			СтрокаДоб.УинОперации = НРег(rs.Fields("tduid").Value);
			СтрокаДоб.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TovUin").Value));
			СтрокаДоб.Магазин = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(rs.Fields("TTUid").Value));
			СтрокиХарки = ТабХарактеристики.НайтиСтроки(Новый Структура("Владелец, id_kontr", СтрокаДоб.Номенклатура, rs.Fields("id_kontr").Value));
			Если СтрокиХарки.Количество() > 0 Тогда
				СтрокаДоб.Характеристика = СтрокиХарки[0].Ссылка;
				СтрокаДоб.Поставщик = СтрокиХарки[0].Значение;
				Если ЗначениеЗаполнено(СтрокиХарки[0].РольПользователя) Тогда
					СтрокаРоль = ТабРоли.Найти(СтрокиХарки[0].РольПользователя, "Ссылка");
					Если СтрокаРоль <> Неопределено Тогда
						СтрокаДоб.Технолог = СтрокаРоль.Сотрудник;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			СтрокаДоб.ДатаПроизводства = ?(rs.Fields("Date_proizv").Value < '20000101', '00010101', rs.Fields("Date_proizv").Value);
			СтрокаДоб.КомментарийПродавца = СокрЛП(СтрЗаменить(rs.Fields("Descr").Value, "(из моб. приложения)", ""));
			СтрокаДоб.Колво = rs.Fields("QtySpis").Value;
			СтрокаДоб.Сумма = rs.Fields("SummaSpis").Value;
			СтрокиКартинки = ТабКартинки.НайтиСтроки(Новый Структура("УинСтроки", СтрокаДоб.УинОперации));
			Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
				ИмяФайла = КонстантаКаталог + Формат(СтрокаКартинка.ДатаДобавленияЗаписи, "ДФ=yyyyMM") + "\" + СтрокаКартинка.УинКартинки + "." + СтрокаКартинка.Расширение;
				СтрокаДоб.ИмяФайла = "" + СтрокаДоб.ИмяФайла + ?(ЗначениеЗаполнено(СтрокаДоб.ИмяФайла), "№№№№", "") + ИмяФайла;
				СтрокаДоб.ДатаКартинки = СтрокаКартинка.ДатаДобавленияЗаписи;
			КонецЦикла;
			СтрокаПричина = ТабПричины.Найти(rs.Fields("id_reason").Value, "code_operation");
			Если СтрокаПричина <> Неопределено Тогда
				СтрокаДоб.ПричинаСписания = СтрокаПричина.Ссылка;
			КонецЕсли;	
			//СтрокиКомменатрии = ТабКомментарии.НайтиСтроки(Новый Структура("УинСтроки", СтрокаДоб.УинОперации));
			//Для Каждого СтрокаКартинка Из СтрокиКартинки Цикл
			//	ИмяФайла = КонстантаКаталог + Формат(СтрокаКартинка.ДатаДобавленияЗаписи, "ДФ=yyyyMM") + "\" + СтрокаКартинка.УинКартинки + "." + СтрокаКартинка.Расширение;
			//	СтрокаДоб.ИмяФайла = "" + СтрокаДоб.ИмяФайла + ?(ЗначениеЗаполнено(СтрокиРезультат[0].ИмяФайла), "№№№№", "") + ИмяФайла;
			//КонецЦикла;
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	ADOСоединение.Close();   
	
	Возврат ТабСписания;
   
КонецФункции
