
Перем мВалютаРегламентированногоУчета Экспорт;


Функция ПодготовитьШапкуДокумента(Заголовок, СтруктураШапкиДокумента, Отказ)
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Возврат СтруктураШапкиДокумента;
	
КонецФункции

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО","Приходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов=Новый Структура("Дебет,Кредит");
	
	// Определяем код счета дебета
	
	СчетДт=ПланыСчетов.Финансовый.Касса.Код;
		
	КодыСчетов.Дебет=СчетДт;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		СтрокаКредит										= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек.Код;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтрокаКредит										= ПланыСчетов.Финансовый.РасчетныйСчет.Код;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		СтрокаКредит										= СчетУчетаРасчетовСКонтрагентом.Код;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.Инкассация Тогда
		СтрокаКредит										= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация.Код;
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПостояннойЧастиАрендыОтАрендатора)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПеременнойЧастиАрендыОтАрендатора)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаДепозитаОтАрендатора) Тогда
		СтрокаКредит										= ПланыСчетов.Финансовый.РасчетыСПокупателямиПоАренде.Код;
	КонецЕсли;
		
	
	КодыСчетов.Кредит=СтрокаКредит;
	
	Возврат КодыСчетов;
	
КонецФункции // ОпределитьКодыСчетСубсчет()

Функция РубКоп(Сумма)
	
	Руб=Цел(Сумма);
	Коп=ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп=""+Руб+" руб. "+Цел(Коп/10)+(Коп-10*Цел(Коп/10))+" коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПКО()
	
	Перем ПодразделениеОтветственныхЛиц;

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	ПриходныйКассовыйОрдер.Организация,
	|	ПриходныйКассовыйОрдер.Контрагент,
	|	ПриходныйКассовыйОрдер.Контрагент.Представление КАК Контрагент,
	|	ПриходныйКассовыйОрдер.ПринятоОт КАК ПринятоОт,
	|	ПриходныйКассовыйОрдер.Основание КАК Основание,
	|	ПриходныйКассовыйОрдер.Приложение КАК Приложение,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ПриходныйКассовыйОрдер.СтруктурнаяЕдиница КАК ПодразделениеОрганизации,
	|	ПриходныйКассовыйОрдер.Комментарий,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьОбщийМакет("КО1");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Валютный = Ложь;

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеСокращенное,");
	
	ОбластьМакета.Параметры.СуммаРубКоп       = РубКоп(Шапка.Сумма);
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, мВалютаРегламентированногоУчета);
	
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;


	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.ПодразделениеОрганизации;
	
	ОбластьМакета.Параметры.ФИОКассира	= Шапка.Ответственный;
	ОбластьМакета.Параметры.ПринятоОт  	= Шапка.ПринятоОт;
	ОбластьМакета.Параметры.Основание  	= ?(ЗначениеЗаполнено(Шапка.Основание), Шапка.Основание, Шапка.Комментарий);;
	ОбластьМакета.Параметры.Приложение 	= Шапка.Приложение;

	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
 
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции

//// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПКО" Тогда
		
		ТабДокумент = ПечатьПКО();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры

//// Пересчитывает сумму НДС
////
//Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

//	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

//	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

//КонецПроцедуры // ПересчитатьСуммуНДС()

#КонецЕсли

//Процедура РассчитатьСуммуДокумента() Экспорт
//	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаАрендыОтАрендатора)
//		ИЛИ (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаАрендуОтАрендодателя) Тогда
//		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	КонецЕсли;
//КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//АК БЕЛН 06.04.2017+
	Если ЭтоНовый() Тогда
		УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли; 
	//АК БЕЛН 06.04.2017-
	Если (НЕ ЭтотОбъект.ДоговорКонтрагента = ЭтотОбъект.Ссылка.ДоговорКонтрагента)
			И ДопМодульСервер.НекорректныйДоговор(ЭтотОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указан некорректный договор (помечен на удаление либо не используется)");
		Отказ = Истина;
	КонецЕсли;
	
	//Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаАрендыОтАрендатора
	//	ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаАрендуОтАрендодателя Тогда
	//	Если СуммаДокумента <> РасшифровкаПлатежа.Итог("СуммаПлатежа") Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не совпадает с расшифровкой");
	//		Отказ = Истина;
	//	КонецЕсли;
	//Иначе
	//	РасшифровкаПлатежа.Очистить();
	//КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ПериодРегистрации 	= Дата("00010101");
	ЭтотОбъект.Депозит 				= Ложь;
	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
	
	//
	ЭтотОбъект.СуммыИнкассацииПоЛистамУчета.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ПроверкаРеквизитовПомеченныхНаУдаление(ЭтотОбъект);	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Заголовок для сообщений об ошибках проведения.
	
	Если ЭтотОбъект.СтатьяДвиженияДенежныхСредствБУ.Пустая()
			И ЭтотОбъект.Дата >= Дата(2015, 5, 8)
			И НЕ ЭтотОбъект.Организация = Справочники.Организации.Избенка Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена статья ДДС бух.учета");
		Отказ = Истина;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект.Ссылка);
	
	Движения.Финансовый.Записывать = Истина;
	Движения.Финансовый.Очистить();
	
	Движения.РасчетыСПерсоналом.Записывать = Истина;
	Движения.РасчетыСПерсоналом.Очистить();
	
	//
	Проводка = Движения.Финансовый.Добавить();
	Проводка.Период	= ЭтотОбъект.Дата;
	Проводка.СчетДт = ПланыСчетов.Финансовый.Касса;
	Проводка.Сумма	= ЭтотОбъект.СуммаДокумента;
	//Проводка.Организация			= Организация;
	//Проводка.СтруктурнаяЕдиница		= СтруктурнаяЕдиница;
	
	Проводка.СубконтоДт.СтруктурныеЕдиницы 				= ЭтотОбъект.СтруктурнаяЕдиница;
	Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств 	= ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
	Если Проводка.Период >= '20150101' Тогда
		Проводка.СубконтоДт.Организации 				= ЭтотОбъект.Организация;
	Иначе
		Проводка.СубконтоДт.Организации 				= Справочники.Организации.ПустаяСсылка();	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		Проводка.СчетКт	= ПланыСчетов.Финансовый.ВыручкаТорговыхТочек;
		Проводка.СубконтоКт.ТорговыеТочки			= ЭтотОбъект.СтруктурнаяЕдиница;
		Проводка.СубконтоКт.СтатьиДоходовРасходов	= Справочники.СтатьиДоходовРасходов.РозничнаяВыручка;
		Проводка.Содержание							= "Выручка ТТ";
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		Проводка.СчетКт	= ПланыСчетов.Финансовый.РасчетныйСчет;
		Проводка.СубконтоКт.Организации						= ЭтотОбъект.Организация;
		Проводка.СубконтоКт.БанковскиеСчета					= ЭтотОбъект.СчетОрганизации;
		Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств   = ЭтотОбъект.СтатьяДвиженияДенежныхСредств;
		Проводка.Содержание									= "Получение наличных денежных средств в банке";
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоКт3);
		Проводка.Содержание									= "Прочее поступление денежных средств";
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.Инкассация Тогда
		
		Проводка.СчетКт	= ПланыСчетов.Финансовый.ДенежныеСредстваВПутиИнкассация;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.ТорговаяТочка);
		Проводка.Содержание									= "Прием инкассации";
		
	ИначеЕсли (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПостояннойЧастиАрендыОтАрендатора)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПеременнойЧастиАрендыОтАрендатора)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаДепозитаОтАрендатора)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратПостояннойЧастиАрендыОтАрендодателя)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратПеременнойЧастиАрендыОтАрендодателя)
			ИЛИ (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДепозитаОтАрендодателя) Тогда
		
		Проводка.СчетКт	= ПланыСчетов.Финансовый.РасчетыСПокупателямиПоАренде;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.Организации.Избенка);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.ТорговаяТочка);
		Проводка.Содержание									= ЭтотОбъект.ВидОперации;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаработнойПлаты Тогда
		
		Проводка.СчетКт	= ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.Организация);
		Проводка.Содержание									= "Возврат заработной платы";
		
		Движение = Движения.РасчетыСПерсоналом.Добавить();
		Движение.ВидДвижения						= ВидДвиженияНакопления.Расход;
		Движение.Регистратор						= ЭтотОбъект.Ссылка;
		Движение.Период								= ЭтотОбъект.Дата;
		Движение.Организация						= ЭтотОбъект.Организация;
		Движение.Физлицо							= ЭтотОбъект.Контрагент;
		Движение.Сумма								= - ЭтотОбъект.СуммаДокумента;
		
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.СнятиеНаличныхСРасчетногоСчета Тогда
		
		Проводка.СчетКт									= ПланыСчетов.Финансовый.СнятиеНаличныхСРасчетногоСчета;
		Проводка.СубконтоКт.Организации					= ЭтотОбъект.Организация;
		Проводка.СубконтоКт.ИсточникиДенежныхСредств	= СубконтоКт2;
		Проводка.СубконтоКт.СтруктурныеЕдиницы		    = ЭтотОбъект.СтруктурнаяЕдиница;
		Проводка.Содержание								= "Возврат наличных денежных средств в банке";
		
	КонецЕсли;
	
	//
	ОбщиеПроцедуры.ПровестиДокументПоРегиструВзаиморасчетыПоАренде(ЭтотОбъект, Отказ);
	
	//
	Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьПриход();
	Движение.Период			 	= ЭтотОбъект.Дата;
	Движение.Организация 		= ЭтотОбъект.Организация;
	Движение.Контрагент 		= ЭтотОбъект.Контрагент;
	Движение.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
	Движение.Сумма 				= ЭтотОбъект.СуммаДокумента;
	
	//
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый, ЭтотОбъект.Организация);
	//+++АК БЕЛН 20170413
	Если Не Отказ И НЕ ВидОперации=Перечисления.ВидыОперацийПКО.Инкассация Тогда
		Узел = ПланыОбмена.ОбменИзбенкаСБП.НайтиПоКоду("БП");
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Ссылка);
		ОбменДанными.Получатели.Добавить(Узел);
	КонецЕсли; 
	
	//---АК БЕЛН 20170413
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
