
Функция ПолучитьРаспределениеСуммыТранспортныхРасходов(мСуммаВсего, СПоставщиками = Ложь, СХарактеристиками = Ложь)
	
	Перем Запрос, СуммаВсего;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"			, КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("МассивПриходников"	, ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	Запрос.УстановитьПараметр("Сумма"				, мСуммаВсего);
	Запрос.УстановитьПараметр("СПоставщиками"		, СПоставщиками);
	Запрос.УстановитьПараметр("СХарактеристиками"	, СХарактеристиками);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Полный.Склад,
	|	ВЗ_Полный.Номенклатура,
	|	ВЗ_Полный.ТипТовара,
	|	СУММА(ВЗ_Полный.Вес) КАК Вес,
	|	ВЗ_Полный.Контрагент,
	|	МАКСИМУМ(ВЗ_Полный.Характеристика) КАК Характеристика
	|ПОМЕСТИТЬ ВТВеса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧТовары.Ссылка.Склад КАК Склад,
	|		ТЧТовары.Номенклатура КАК Номенклатура,
	|		ТЧТовары.Номенклатура.ТипТовара КАК ТипТовара,
	|		ТЧТовары.Количество * ТЧТовары.ЕдиницаИзмерения.Вес КАК Вес,
	|		ВЫБОР
	|			КОГДА &СПоставщиками = ИСТИНА
	|				ТОГДА ТЧТовары.Ссылка.Поставщик
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК Контрагент,
	|		ВЫБОР
	|			КОГДА &СХарактеристиками = ИСТИНА
	|				ТОГДА ТЧТовары.Характеристика
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК Характеристика
	|	ИЗ
	|		Документ.ПриходныйОрдерСклад.Товары КАК ТЧТовары
	|	ГДЕ
	|		ТЧТовары.Ссылка В(&МассивПриходников)
	|		И ТЧТовары.Номенклатура.ЭтоКомплект = ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТЧТовары.Склад,
	|		СоставКомплектаСрезПоследних.Составляющая.Владелец,
	|		СоставКомплектаСрезПоследних.Составляющая.Владелец.ТипТовара,
	|		ТЧТовары.Количество * СоставКомплектаСрезПоследних.Составляющая.Владелец.ЕдиницаХраненияОстатков.Вес * СоставКомплектаСрезПоследних.Количество,
	|		ВЫБОР
	|			КОГДА &СПоставщиками = ИСТИНА
	|				ТОГДА ТЧТовары.Поставщик
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &СХарактеристиками = ИСТИНА
	|				ТОГДА СоставКомплектаСрезПоследних.Составляющая
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ТЧТовары.Ссылка.Склад) КАК Склад,
	|			ТЧТовары.Ссылка.Поставщик КАК Поставщик,
	|			ТЧТовары.Номенклатура КАК Номенклатура,
	|			ТЧТовары.Характеристика КАК Характеристика,
	|			СУММА(ТЧТовары.Количество) КАК Количество
	|		ИЗ
	|			Документ.ПриходныйОрдерСклад.Товары КАК ТЧТовары
	|		ГДЕ
	|			ТЧТовары.Ссылка В(&МассивПриходников)
	|			И ТЧТовары.Номенклатура.ЭтоКомплект = ИСТИНА
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧТовары.Ссылка.Поставщик,
	|			ТЧТовары.Номенклатура,
	|			ТЧТовары.Характеристика) КАК ТЧТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставКомплекта.СрезПоследних(&ДатаСреза, ) КАК СоставКомплектаСрезПоследних
	|			ПО ТЧТовары.Характеристика = СоставКомплектаСрезПоследних.Характеристика) КАК ВЗ_Полный
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ_Полный.Склад,
	|	ВЗ_Полный.Номенклатура,
	|	ВЗ_Полный.ТипТовара,
	|	ВЗ_Полный.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВеса.Склад,
	|	ВТВеса.Контрагент,
	|	ВТВеса.ТипТовара,
	|	ВТВеса.Номенклатура,
	|	ВТВеса.Характеристика,
	|	&Сумма * ВТВеса.Вес / ВЫБОР
	|		КОГДА ВТОбщийВес.Вес = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВТОбщийВес.Вес, 1)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	ВТВеса КАК ВТВеса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВТВеса.Вес) КАК Вес
	|		ИЗ
	|			ВТВеса КАК ВТВеса) КАК ВТОбщийВес
	|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПроверитьПовторыПриходников(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"		, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("МассивПриходников"	, ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка
	|ИЗ
	|	Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
	|ГДЕ
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка.Проведен
	|	И ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер В(&МассивПриходников)
	|	И НЕ ТранспортныеРасходыПриходныеОрдера.Ссылка = &ТекущийДокумент";
	
	РезультатЗапроса = Запрос.Выполнить();
	Отказ = НЕ РезультатЗапроса.Пустой();
	
КонецПроцедуры

Процедура ЗаполнитьСуммыДокументаПоПриходникам()
	
	Если ЭтотОбъект.ПриходныеОрдера.Количество() = 0 Тогда
		ЭтотОбъект.ВариантРасчетаНДС 	= Перечисления.ВариантыРасчетаНДС.ПустаяСсылка();
		ЭтотОбъект.Сумма 				= 0;
		ЭтотОбъект.СуммаНДС 			= 0;
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Маршрут"				, ЭтотОбъект.Маршрут);
	Запрос.УстановитьПараметр("ДатаНачала"			, ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("МассивПриходников"	, ЭтотОбъект.ПриходныеОрдера.ВыгрузитьКолонку("ПриходныйОрдер"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф КАК ЕдиныйТариф
	|ПОМЕСТИТЬ ВТПоследниеПериоды
	|ИЗ
	|	РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ТарифыНаДоставкуПоМаршруту.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ТарифыНаДоставкуПоМаршруту КАК ТарифыНаДоставкуПоМаршруту
	|		ГДЕ
	|			ТарифыНаДоставкуПоМаршруту.Маршрут = &Маршрут
	|			И НЕ ТарифыНаДоставкуПоМаршруту.Период > &ДатаНачала) КАК ВТПоследняяЗапись
	|		ПО (ВТПоследняяЗапись.Период = ТарифыНаДоставкуПоМаршруту.Период)
	|ГДЕ
	|	ТарифыНаДоставкуПоМаршруту.Маршрут = &Маршрут
	|	И НЕ ТарифыНаДоставкуПоМаршруту.Период > &ДатаНачала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиныйТариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыНаДоставкуПоМаршруту.ВесОт КАК ВесОт,
	|	ТарифыНаДоставкуПоМаршруту.Сумма КАК Сумма,
	|	ТарифыНаДоставкуПоМаршруту.ВариантРасчетаНДС,
	|	ТарифыНаДоставкуПоМаршруту.СтавкаНДС,
	|	ТарифыНаДоставкуПоМаршруту.СуммаНДС,
	|	ТарифыНаДоставкуПоМаршруту.ЦенаЗаКг,
	|	ТарифыНаДоставкуПоМаршруту.Перевозчик
	|ИЗ
	|	РегистрСведений.ТарифыНаДоставкуПоМаршруту.СрезПоследних(ДОБАВИТЬКДАТЕ(&ДатаНачала, СЕКУНДА, 1), Маршрут = &Маршрут) КАК ТарифыНаДоставкуПоМаршруту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериоды КАК ВТПоследниеПериоды
	|		ПО (ВТПоследниеПериоды.ЕдиныйТариф = ТарифыНаДоставкуПоМаршруту.ЕдиныйТариф)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТарифыНаДоставкуПоМаршруту.ВесОт УБЫВ";
	
	ТаблицаТарифов = Запрос.Выполнить().Выгрузить();
	
	мОбщийВес = 0;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ПриходныеОрдера Цикл
		ТекТЧТовары = СтрокаТЧ.ПриходныйОрдер.Товары;
		Для Каждого СтрокаТовары Из ТекТЧТовары Цикл
			мОбщийВес = мОбщийВес + СтрокаТовары.ЕдиницаИзмерения.Вес * СтрокаТовары.Количество;
		КонецЦикла;
	КонецЦикла;
	
	//
	Для Каждого СтрокаТарифа Из ТаблицаТарифов Цикл
		Если НЕ мОбщийВес < СтрокаТарифа.ВесОт Тогда
			ЭтотОбъект.Сумма 				= СтрокаТарифа.Сумма 	* ?(СтрокаТарифа.ЦенаЗаКг, мОбщийВес, 1);
			ЭтотОбъект.СуммаНДС 			= СтрокаТарифа.СуммаНДС * ?(СтрокаТарифа.ЦенаЗаКг, мОбщийВес, 1);
			ЭтотОбъект.ВариантРасчетаНДС 	= СтрокаТарифа.ВариантРасчетаНДС;
			ЭтотОбъект.СтавкаНДС 			= СтрокаТарифа.СтавкаНДС;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПриходныеОрдера()
	
	// очистка табличной части приходников (кроме введенных вручную)
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ПриходныеОрдера Цикл
		Если СтрокаТЧ.ДобавленВручную Тогда
			Продолжить;
		КонецЕсли;
		МассивКУдалению.Добавить(СтрокаТЧ);
	КонецЦикла;
	Для Каждого СтрокаТЧ Из МассивКУдалению Цикл
		ЭтотОбъект.ПриходныеОрдера.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"			, НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ДатаПредыдущая1"		, НачалоДня(ЭтотОбъект.Дата) - 7 * 86400);
	Запрос.УстановитьПараметр("ДатаПредыдущая2"		, НачалоДня(ЭтотОбъект.Дата) - 1);
	Запрос.УстановитьПараметр("Перевозчик"			, ЭтотОбъект.Перевозчик);
	Запрос.УстановитьПараметр("МассивПоставщиков"	, ЭтотОбъект.Поставщики.ВыгрузитьКолонку("Поставщик"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка КАК ПриходныйОрдер
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|ГДЕ
	|	ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|	И ПриходныйОрдерСклад.Проведен
	|	И НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика
	|				ИНАЧЕ ПриходныйОрдерСклад.Дата
	|			КОНЕЦ, ДЕНЬ) = &ДатаНачала
	|	И ПриходныйОрдерСклад.Поставщик В(&МассивПоставщиков)
	|	И ПриходныйОрдерСклад.Автомобиль.Перевозчик = &Перевозчик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйОрдерСклад.Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерСклад КАК ПриходныйОрдерСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
	|		ПО (ТранспортныеРасходыПриходныеОрдера.Ссылка.Дата >= &ДатаПредыдущая1)
	|			И (ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер = ПриходныйОрдерСклад.Ссылка)
	|ГДЕ
	|	ПриходныйОрдерСклад.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходСкладскойУчет.ОтПоставщика)
	|	И ПриходныйОрдерСклад.Проведен
	|	И ВЫБОР
	|			КОГДА НЕ ПриходныйОрдерСклад.ДатаДокументаПоставщика = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ПриходныйОрдерСклад.ДатаДокументаПоставщика
	|			ИНАЧЕ ПриходныйОрдерСклад.Дата
	|		КОНЕЦ МЕЖДУ &ДатаПредыдущая1 И &ДатаПредыдущая2
	|	И ПриходныйОрдерСклад.Поставщик В(&МассивПоставщиков)
	|	И ПриходныйОрдерСклад.Автомобиль.Перевозчик = &Перевозчик
	|	И ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер ЕСТЬ NULL ";
	
	ТекТЧТовары = ЭтотОбъект.Маршрут.Товары;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекПриходник = Выборка.ПриходныйОрдер;
		
		ТекТоварыПриходника = ТекПриходник.Товары;
		мДобавлять = (ТекТоварыПриходника.Количество() > 0);
		Если мДобавлять
				И ТекТЧТовары.Количество() > 0 Тогда
			мДобавлять = Ложь;
			Для Каждого СтрокаТЧ Из ТекТоварыПриходника Цикл
				Если НЕ ТекТЧТовары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура") = Неопределено Тогда
					мДобавлять = Истина;
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ мДобавлять Тогда
			Продолжить;
		КонецЕсли;
		
		//
		НоваяСтрока = ЭтотОбъект.ПриходныеОрдера.Добавить();
		НоваяСтрока.ПриходныйОрдер = ТекПриходник;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаПоступлениеТоваровУслуг(Отказ)
	
	ТекДатаЗапретаРедактирования = НастройкаПравДоступа.ПолучитьОбщуюДатуЗапретаДляПользователя() + 86400;
	
	Если День(ТекущаяДата()) > 4
			И День(ТекущаяДата()) < 11
			И ЭтотОбъект.Дата < НачалоМесяца(ТекущаяДата())
			И ЭтотОбъект.Дата >= Макс(НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1), ТекДатаЗапретаРедактирования)
			Тогда  // если 5-10-е число - можно перепроводить все непроведенные тр. расходы за предыдущий месяц (если период не закрыт)
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер КАК ПриходныйОрдер
	|ИЗ
	|	Документ.ТранспортныеРасходы.ПриходныеОрдера КАК ТранспортныеРасходыПриходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
	|		ПО (ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер = ТранспортныеРасходыПриходныеОрдера.ПриходныйОрдер)
	|			И (ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен)
	|ГДЕ
	|	ТранспортныеРасходыПриходныеОрдера.Ссылка = &ТекДокумент
	|	И ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортныеРасходыПриходныеОрдера.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Отказ = НЕ РезультатЗапроса.Пустой();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("Нет проведенного поступления для документа """ + Выборка.ПриходныйОрдер + """!");
	КонецЦикла;
	
КонецПроцедуры


Процедура ПроверитьИСместитьГраницу()
	
	//Перем ТекГраница;
	//
	//ТекГраница = Последовательности.Себестоимость.ПолучитьГраницу();
	//Если ТипЗнч(ТекГраница) = Тип("МоментВремени") Тогда
	//	Если ТекГраница.Сравнить(МоментВремени()) = 1 Тогда
	//		Последовательности.Себестоимость.УстановитьГраницу(МоментВремени());
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры	


Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем мДвиженияБух, ТаблицаКПроведению, СтруктураНастроек;
	
	//
	Если ЭтотОбъект.Дата >= Дата(2016, 12, 1) Тогда // после 01.12.2016 проводки делаются в документах "Рейс", вид перевозки "Доставка на склад"
		Возврат;
	КонецЕсли;
	
	ПроверитьПовторыПриходников(Отказ);
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Приходный ордер уже указан в другом документе транспортных расходов!");
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле
			ИЛИ ЭтотОбъект.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		мСуммаВсего = ЭтотОбъект.Сумма;
	Иначе
		мСуммаВсего = ЭтотОбъект.Сумма + ЭтотОбъект.СуммаНДС;
	КонецЕсли;
	
	// таблица сумм, распределенных по поставщикам пропорционально массам
	ТаблицаКПроведению = ПолучитьРаспределениеСуммыТранспортныхРасходов(мСуммаВсего);
	Если ТаблицаКПроведению.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для распределения транспортных расходов!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//
	мДвиженияБух = Движения.Финансовый;
	
	мДвиженияБух.Записывать = Истина;
	мДвиженияБух.Очистить();
	
	Движения.ЗатратыНаДоставкуПоПоставщикам.Записывать = Истина;
	Движения.ЗатратыНаДоставкуПоПоставщикам.Очистить();
	
	// подготовка таблиц к проведению
	мОкругленнаяСумма = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКПроведению Цикл
		мОкругленнаяСумма = мОкругленнаяСумма + Окр(СтрокаТаблицы.Сумма, 2);
	КонецЦикла;
	
	РазницаПриОкруглении = мСуммаВсего - мОкругленнаяСумма;
	Если НЕ РазницаПриОкруглении = 0 Тогда // разница при округлении - в последнюю строку
		ПоследняяСтрока = ТаблицаКПроведению[ТаблицаКПроведению.Количество() - 1];
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма + РазницаПриОкруглении;
	КонецЕсли;
	
	ТаблицаТоваровКПроведению 	= ТаблицаКПроведению.СкопироватьКолонки();
	ТаблицаТоваровКПроведению.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаУпаковкиКПроведению 	= ТаблицаКПроведению.СкопироватьКолонки();

	Для Каждого СтрокаТаблицы Из ТаблицаКПроведению Цикл
		Если НЕ СтрокаТаблицы.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
			НоваяСтрока = ТаблицаТоваровКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СтруктурнаяЕдиница = НоваяСтрока.Склад.Владелец;
		Иначе
			НоваяСтрока = ТаблицаУпаковкиКПроведению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваровКПроведению.Свернуть("СтруктурнаяЕдиница, Номенклатура", "Сумма");
	
	ТаблицаКПроведениюКонтрагенты = ПолучитьРаспределениеСуммыТранспортныхРасходов(мСуммаВсего, Истина, Истина);
	
	мОкругленнаяСумма = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКПроведениюКонтрагенты Цикл
		мОкругленнаяСумма = мОкругленнаяСумма + Окр(СтрокаТаблицы.Сумма, 2);
	КонецЦикла;
	
	РазницаПриОкруглении = мСуммаВсего - мОкругленнаяСумма;
	Если НЕ РазницаПриОкруглении = 0 Тогда // разница при округлении - в последнюю строку
		ПоследняяСтрока = ТаблицаКПроведениюКонтрагенты[ТаблицаКПроведениюКонтрагенты.Количество() - 1];
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма + РазницаПриОкруглении;
	КонецЕсли;
	
	
	/////////////////////////
	// Движения по регистрам
	Для Каждого СтрокаТаблицы Из ТаблицаКПроведениюКонтрагенты Цикл
		Движение = Движения.ЗатратыНаДоставкуПоПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Период = Дата;
	КонецЦикла;	
	
	СтруктураНастроек =
		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ДоставкаТовараНаСклад, ЭтотОбъект.Дата);
		
	НастройкаОтраженияНДСПоТоварам = ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.НДС_ТоварыПоступлениеТоваровИУслуг, Дата);
	
	ТабВыделенияНДС = Новый ТаблицаЗначений();
	ТабВыделенияНДС.Колонки.Добавить("СтрокаТаблицы");
	ТабВыделенияНДС.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабВыделенияНДС.Колонки.Добавить("Сумма");
	Для Каждого СтрокаТаблицы Из ТаблицаТоваровКПроведению Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДоб = ТабВыделенияНДС.Добавить();
		СтрокаДоб.СтрокаТаблицы = СтрокаТаблицы;
		СтрокаДоб.Сумма 		= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаУпаковкиКПроведению Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДоб = ТабВыделенияНДС.Добавить();
		СтрокаДоб.СтрокаТаблицы = СтрокаТаблицы;
		СтрокаДоб.Сумма 		= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС, ТабВыделенияНДС.ВыгрузитьКолонку("Сумма"));
	Если Не МассивРаспределения = Неопределено Тогда
		ТабВыделенияНДС.ЗагрузитьКолонку(МассивРаспределения, "СуммаНДС");
	КонецЕсли;
	
	Для Каждого СтрокаНДС Из ТабВыделенияНДС Цикл
		СтрокаНДС.СтрокаТаблицы.Сумма = СтрокаНДС.СтрокаТаблицы.Сумма - СтрокаНДС.СуммаНДС;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
		
		мСчет6004 	= ПланыСчетов.Финансовый.ПрочаяЗадолженность;
		мСчет412 	= ПланыСчетов.Финансовый.МатералыДляВыпуска;
		
		Для Каждого СтрокаТаблицы Из ТаблицаТоваровКПроведению Цикл
			
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			////////////////////////////////////////////////
			// Дт41Кт60 - добавление транспортных расходов
			
			Проводка = мДвиженияБух.Добавить();
			
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.СчетДт 		= СтруктураНастроек.Счет; // 41.01;
			Проводка.КоличествоДт 	= 0;
			
			Попытка
				Проводка.СубконтоДт.МестаХранения 			= СтрокаТаблицы.СтруктурнаяЕдиница;//СтрокаТаблицы.Склад;
				Проводка.СубконтоДт.Товары 					= СтрокаТаблицы.Номенклатура;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров41;
			Исключение
			КонецПопытки;
			
			Проводка.НомерЖурнала			= "ТД";
			Проводка.Содержание				= "Транспортные расходы по доставке на склад";
			
			Проводка.СчетКт 				= мСчет6004;
			Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Перевозчик;
			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма 					= Окр(СтрокаТаблицы.Сумма, 2);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаУпаковкиКПроведению Цикл
			
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = мДвиженияБух.Добавить();
			
			Проводка.Период 		= ЭтотОбъект.Дата;
			Проводка.СчетДт 		= мСчет412; // 41.02;
			Проводка.КоличествоДт 	= 0;
			
			Попытка
				Проводка.СубконтоДт.Материалы 				= СтрокаТаблицы.Номенклатура;
				Проводка.СубконтоДт.Склады 					= СтрокаТаблицы.Склад;
				Проводка.СубконтоДт.СтатьиТовародвижения 	= СтруктураНастроек.СтатьяДвиженияТоваров41;
			Исключение
			КонецПопытки;
			
			Проводка.НомерЖурнала			= "ТД";
			Проводка.Содержание				= "Транспортные расходы по доставке на склад";
			
			Проводка.СчетКт 				= мСчет6004;
			Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Перевозчик;
			
			//Проводка.Организация 			= ЭтотОбъект.Организация;
			Проводка.Сумма 					= Окр(СтрокаТаблицы.Сумма, 2);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НастройкаОтраженияНДСПоТоварам.Счет) Тогда
			
			Проводка = мДвиженияБух.Добавить();
			Проводка.Период = ЭтотОбъект.Дата;
			Проводка.СчетДт = НастройкаОтраженияНДСПоТоварам.Счет;
			Проводка.СубконтоДт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоДт.ВидыНалогов	= НастройкаОтраженияНДСПоТоварам.ДопРеквизит;
			Проводка.СубконтоДт.СтавкиНДС	= ЭтотОбъект.СтавкаНДС;
			
			Проводка.СчетКт = мСчет6004;
			Проводка.СубконтоКт.Организации = ЭтотОбъект.Организация;
			Проводка.СубконтоКт.Контрагенты = ЭтотОбъект.Перевозчик;
			
			Проводка.Сумма 	= СуммаНДС;
			
		КонецЕсли;	
	
	КонецЕсли;
	
	//// Если товар не облагается НДС
	//Если ЭтотОбъект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
	//	
	//	СтруктураНастроек =
	//		ОбщегоНазначенияСервер.ПолучитьНастройкиОтраженияОперацийВУчете(Перечисления.ВидыОперацийВУчете.ОтражениеНДСПоТоварамБезНДС, ЭтотОбъект.Дата);
	//	
	//	Если ЗначениеЗаполнено(СтруктураНастроек.Счет) Тогда
	//		
	//		ПроводкаНДС = мДвиженияБух.Добавить();
	//		ПроводкаНДС.Период = ЭтотОбъект.Дата;
	//		
	//		ПроводкаНДС.СчетДт = ПланыСчетов.Финансовый.НалогиУН;  // Дт68.2
	//		ПроводкаНДС.СубконтоДт.Организации = ЭтотОбъект.Организация;
	//		ПроводкаНДС.СубконтоДт.ВидыНалогов = Справочники.ВидыНалогов.НайтиПоКоду("000000001");
	//		
	//		ПроводкаНДС.СчетКт = СтруктураНастроек.Счет;
	//		ПроводкаНДС.СубконтоКт.ТорговыеТочки  		= СтруктураНастроек.СтруктурнаяЕдиница;
	//		ПроводкаНДС.СубконтоКт.СтатьиДоходовРасходов= СтруктураНастроек.СтатьяДоходовРасходов;
	//		ПроводкаНДС.СубконтоКт.ЦФО 					= СтруктураНастроек.ЦФО;
	//		
	//		ПроводкаНДС.Организация 	= ЭтотОбъект.Организация;
	//		ПроводкаНДС.Сумма 			=
	//						(ТаблицаКПроведению.Итог("Сумма") * ОбщегоНазначенияСервер.ПолучитьСтавкуНДСПриОтгрузкеБезНДС(ЭтотОбъект.Дата)) / 100;
	//		
	//		ПроводкаНДС.Содержание		= "НДС";
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;                 
	
	//сдвинем границу последовательности себестоимости
	ПроверитьИСместитьГраницу();	
	
	АК_УчетМСФО.ЗаполнитьОрганизацию(Движения.Финансовый,Организация);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ЭтотОбъект.Дата >= Дата(2016, 6, 1) Тогда
			
		ЗаполнитьПриходныеОрдера();
		
		ПроверитьНаПоступлениеТоваровУслуг(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСуммыДокументаПоПриходникам();
		
	КонецЕсли;
	
КонецПроцедуры
