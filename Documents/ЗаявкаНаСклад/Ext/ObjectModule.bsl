
Перем ТекДата;
//Перем ТабИзмененийВДвижениях;
Перем СтараяОперация_Оборудование;			//нельзя в проведенных д-тах "не оборудования" менять на оборудование


Функция РеквизитыЗаполнены()
	
	Результат = Истина;
	
	//Шапка
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки Или
		 ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика Тогда
		Если Не ЗначениеЗаполнено(Поставщик) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Поставщик"" не заполнено");
			Результат = Ложь;
		КонецЕсли;	 
	КонецЕсли;
	
	//Табличная часть (проверка на то, что работаем с оборудованием, сделана вовне)
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика Или
		 ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку Тогда
		ИмяРеквизита	= "Номенклатура";
		ЧастьТекста		= "Номенклатура";
	Иначе
		ИмяРеквизита	= "ОсновноеСредство";
		ЧастьТекста		= "Основное средство";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Оборудование Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизита]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена колонка """ + ЧастьТекста + """ в строке " + Строка(СтрокаТЧ.НомерСтроки) + " списка ""Оборудование""");
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуИзмененийВДвижениях()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор"	, Ссылка);
	Запрос.УстановитьПараметр("Товары"		, Товары.Выгрузить());
	Запрос.УстановитьПараметр("Склад"		, Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаСкладах.Номенклатура,
	|	ЗаявкаНаСкладах.Характеристика,
	|	СУММА(ЗаявкаНаСкладах.Количество * ВЫБОР
	|			КОГДА ЗаявкаНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВТ_Движения
	|ИЗ
	|	РегистрНакопления.ЗаявкаНаСкладах КАК ЗаявкаНаСкладах
	|ГДЕ
	|	ЗаявкаНаСкладах.Регистратор = &Регистратор
	|	И ЗаявкаНаСкладах.Активность = ИСТИНА
	|	И ЗаявкаНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаСкладах.Номенклатура,
	|	ЗаявкаНаСкладах.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Склад КАК Склад,
	|	РасходныйОрдерСкладТовары.Номенклатура,
	|	РасходныйОрдерСкладТовары.Характеристика,
	|	РасходныйОрдерСкладТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТабТовары
	|ИЗ
	|	&Товары КАК РасходныйОрдерСкладТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Движения.Номенклатура, ВЗ_Товары.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Движения.Характеристика, ВЗ_Товары.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) КАК Количество
	|ИЗ
	|	ВТ_Движения КАК ВТ_Движения
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ТабТовары.Склад КАК Склад,
	|			ВТ_ТабТовары.Номенклатура КАК Номенклатура,
	|			ВТ_ТабТовары.Характеристика КАК Характеристика,
	|			СУММА(ВТ_ТабТовары.Количество) КАК Количество
	|		ИЗ
	|			ВТ_ТабТовары КАК ВТ_ТабТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ТабТовары.Склад,
	|			ВТ_ТабТовары.Номенклатура,
	|			ВТ_ТабТовары.Характеристика) КАК ВЗ_Товары
	|		ПО ВТ_Движения.Номенклатура = ВЗ_Товары.Номенклатура
	|			И ВТ_Движения.Характеристика = ВЗ_Товары.Характеристика
	|ГДЕ
	|	ЕСТЬNULL(ВЗ_Товары.Количество, 0) - ЕСТЬNULL(ВТ_Движения.Количество, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТабТовары";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьОстатки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	, ТекДата);
	Запрос.УстановитьПараметр("Склад"	, Склад);
	Запрос.УстановитьПараметр("Ссылка"	, Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Требуется.Номенклатура,
	|	ЕСТЬNULL(Требуется.Количество, 0) КАК КоличествоТребуется,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходныйОрдерСкладНоменклатура.Номенклатура КАК Номенклатура,
	|		СУММА(РасходныйОрдерСкладНоменклатура.Количество) КАК Количество
	|	ИЗ
	|		Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладНоменклатура
	|	ГДЕ
	|		РасходныйОрдерСкладНоменклатура.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходныйОрдерСкладНоменклатура.Номенклатура) КАК Требуется
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					&Дата,
	|					Склад = &Склад
	|						И Номенклатура В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								РасходныйОрдерСкладНоменклатура.Номенклатура КАК Номенклатура
	|							ИЗ
	|								Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладНоменклатура
	|							ГДЕ
	|								РасходныйОрдерСкладНоменклатура.Ссылка = &Ссылка)) КАК ТоварыНаСкладахОстатки) КАК Остатки
	|		ПО Требуется.Номенклатура = Остатки.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(Требуется.Количество, 0) > ЕСТЬNULL(Остатки.КоличествоОстаток, 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Пока Выборка.Следующий() Цикл
			Сообщить("Недостаточно остатка по номенклатуре " + Выборка.Номенклатура + ". Требуется: " + Выборка.КоличествоТребуется + ", имеется: "	+ Выборка.КоличествоОстаток);
		КонецЦикла;
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьОтличиеОтПриходников()
	
	ЭтоОборудованиеОтПоставщика	= ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика;
	ЭтоОборудованиеСТочки		= ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки;
	
	ТЧЗаявки = ЭтотОбъект.Оборудование;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаСклад", ЭтотОбъект.Ссылка);	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧОборудование.Номенклатура,
	|	ТЧОборудование.ОсновноеСредство
	|ИЗ
	|	Документ.ПриходныйОрдерСклад.Оборудование КАК ТЧОборудование
	|ГДЕ
	|	ТЧОборудование.ЗаявкаНаСклад = &ЗаявкаНаСклад
	|	И НЕ ТЧОборудование.Ссылка.ПометкаУдаления";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗапроса.Количество() = 0 Тогда // нет приходников вообще
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТаблицаЗапроса.Количество() = ТЧЗаявки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	СтрокаОтбора = ?(ЭтоОборудованиеОтПоставщика, "Номенклатура", "ОсновноеСредство");
	СтруктураОтбора = Новый Структура(СтрокаОтбора);
	
	Для Каждого СтрокаТЧ Из ТЧЗаявки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
		СтрокиПриходника = ТаблицаЗапроса.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПриходника.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтоНовый()
		И НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//Если документ проведен, и это не оборудование, то менять на оборудование нельзя
	НоваяОперация_Оборудование = (ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки) ИЛИ
				 				 (ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку);
	Если ЭтотОбъект.Проведен Тогда
		Если НЕ СтараяОперация_Оборудование
				И НоваяОперация_Оборудование Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрещено в проведенных документах с операциями, отличными от оборудования, менять на операции оборудования");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекДата = ТекущаяДата(); //можно брать эту, т.к. код выполняется на сервере и дата будет серверная
		ТабИзмененийВДвижениях = ПолучитьТаблицуИзмененийВДвижениях();
		Если ТабИзмененийВДвижениях.Количество() > 0 Тогда
			СтрокаТаб = ИзмененияДвижений.Добавить();
			СтрокаТаб.ДатаИзменения = ТекДата;
			СтрокаТаб.Пользователь 	= ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
					
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		//Общий запрет
		ЕстьПравоОтменять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуСкладскихДокументов, Ложь);
		
		//По основным средствам разрешение может быть
		Если НоваяОперация_Оборудование Тогда
			ЕстьПравоОтменять = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуСкладскихДокументовПоОС, Ложь);
		КонецЕсли;
		
		Если НЕ ЕстьПравоОтменять Тогда
			//Отказ = Истина;
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У вас нет права отменять складские документы с видом операции """ + Строка(ВидОперации) + """");
			//Возврат;
		КонецЕсли;	
		ИзмененияДвижений.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЭтотОбъект.Проведен
			И (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика
				ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки)
			И ЕстьОтличиеОтПриходников() Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Оборудование заявки не соответствует оборудованию в приходных складских ордерах, введенных на ее основании!");
		//Если ЕстьОтличиеОтПриходника(мПриходныйОрдер) Тогда // перезапись приходника (его оборудования)
		//	ОбъектДокумента = мПриходныйОрдер.ПолучитьОбъект();
		//	
		//	ОбъектДокумента.Оборудование.Очистить();
		//	Для Каждого СтрокаТЧ Из ЭтотОбъект.Оборудование Цикл
		//		НоваяСтрока = ОбъектДокумента.Оборудование.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		//		НоваяСтрока.ЗаявкаНаСклад = ЭтотОбъект.Ссылка;
		//		Если НЕ НоваяСтрока.ОсновноеСредство.Пустая() Тогда
		//			НоваяСтрока.ЗаводскойНомер = НоваяСтрока.ОсновноеСредство.ЗаводскойНомер;
		//		КонецЕсли;
		//	КонецЦикла;
		//	
		//	Попытка
		//		ОбъектДокумента.Записать(?(мПриходныйОрдер.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Приходный ордер " + мПриходныйОрдер + " автоматически перезаписан!");
		//	Исключение
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		//	КонецПопытки;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика Тогда
		 
		Если НЕ РеквизитыЗаполнены() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		 
	КонецЕсли;
	
	мДвижения = Движения.ЗаявкаНаСкладах;
	
	мДвижения.Прочитать();
	мДвижения.Очистить();
	мДвижения.Записать();

	мДвижения.Записывать = Истина;
	
	Для Каждого СтрокаДвижение Из Товары Цикл
		Движение = мДвижения.ДобавитьПриход();
		Движение.Период 			= ТекДата;
		Движение.Номенклатура 		= СтрокаДвижение.Номенклатура;
		Движение.Характеристика 	= СтрокаДвижение.Характеристика;
		Движение.Количество 		= СтрокаДвижение.Количество;
		Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
		Движение.Заявка             = Ссылка;
	КонецЦикла;
	
	//Оборудование
	Для Каждого СтрокаТЧ Из Оборудование Цикл
		Движение = мДвижения.ДобавитьПриход();
		Движение.Период 			= Дата;
		Движение.Номенклатура 		= СтрокаТЧ.Номенклатура;
		Движение.Оборудование 		= СтрокаТЧ.ОсновноеСредство;
		Движение.Количество 		= 1;
		Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
		Движение.Заявка             = Ссылка;
	КонецЦикла;
	
	Если ЭтотОбъект.Закрыта Тогда //Надо остатки по заявке в регистре закрыть
		мДвижения.Записать();
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаявкаНаСкладахОстатки.Номенклатура,
		|	ЗаявкаНаСкладахОстатки.Характеристика,
		|	ЗаявкаНаСкладахОстатки.Заявка,
		|	ЗаявкаНаСкладахОстатки.КоличествоОстаток КАК Количество,
		|	ЗаявкаНаСкладахОстатки.Оборудование
		|ИЗ
		|	РегистрНакопления.ЗаявкаНаСкладах.Остатки(, Заявка = &Заявка) КАК ЗаявкаНаСкладахОстатки";
		Запрос=Новый Запрос(ТекстЗапроса);			
		Запрос.УстановитьПараметр("Заявка", Ссылка);
		Остатки = Запрос.Выполнить().Выгрузить();
		//// и приходы текущего проведения
		//Для каждого дв из мДвижения Цикл
		//	НС=Остатки.Добавить();
		//	ЗаполнитьЗначенияСвойств(НС,ДВ);
		//КонецЦикла;
		
		Остатки.Свернуть("Номенклатура, Характеристика, Заявка, Оборудование", "Количество");
		Для каждого стр из Остатки Цикл
			Движение = мДвижения.ДобавитьРасход();
			Движение.Период 			= ТекДата;
			ЗаполнитьЗначенияСвойств(Движение, Стр);
			Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
			Движение.Количество			= Движение.Количество;
		КонецЦикла;	
	КонецЕсли;
	
	
	
	//Если Закрыта Тогда
	//	Движение = мДвижения.ДобавитьРасход();
	//	Движение.Период 			= Дата;
	//	Движение.Номенклатура 		= СтрокаТЧ.Номенклатура;
	//	Движение.Количество 		= 1;
	//	Движение.АвторИзменений		= ПараметрыСеанса.ТекущийПользователь;
	//	Движение.Заявка             = Ссылка;
	//КонецЕсли;
	
	ПереводЗаявкиНаЭтиектку();
КонецПроцедуры

Процедура ПереводЗаявкиНаЭтиектку()
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаПоставкуУпаковки") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки
		|ИЗ
		|	Документ.ЗаявкаНаПоставкуУпаковки.Товары КАК ЗаявкаНаПоставкуУпаковкиТовары
		|ГДЕ
		|	ЗаявкаНаПоставкуУпаковкиТовары.Ссылка = &Ссылка
		|	И ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено)
		|	И НЕ ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки";
		Запрос.УстановитьПараметр("Ссылка",Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока выборка.Следующий() Цикл
			ЗаявкаОбъект = Выборка.ЗаявкаНаПечатьЭтикетки.ПолучитьОбъект();
			ЗаявкаОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено;
			ЗаявкаОбъект.Записать();
			ЗаявкаОбъект.ОтправитьПисьмоПроизведено();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры



Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаПечатьЭтикетки") Тогда
		
		Подразделение = ДанныеЗаполнения.СКакогоСкладаЭтикеткаБудетОтгружена.Владелец;
		Склад = ДанныеЗаполнения.СКакогоСкладаЭтикеткаБудетОтгружена;
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку;
		Получатель = ДанныеЗаполнения.Склад.Контрагент;
		//Основание = ДанныеЗаполнения;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкаНаПечатьЭтикеткиКомплектующие.Этикетка.Номенклатура КАК Номенклатура,
		               |	ЗаявкаНаПечатьЭтикеткиКомплектующие.КоличествоРаспечатанных КАК Количество
		               |ИЗ
		               |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиКомплектующие
		               |ГДЕ
		               |	ЗаявкаНаПечатьЭтикеткиКомплектующие.Ссылка = &Ссылка";
					   
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		Тз = Запрос.Выполнить().Выгрузить();
		
		Для КАждого Стр Из Тз Цикл
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|ГДЕ
			|	ЕдиницыИзмерения.Владелец = &Номенклатура
			|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
			|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору"	, Стр.Номенклатура.БазоваяЕдиницаИзмерения);
			Запрос.УстановитьПараметр("Номенклатура"			, Стр.Номенклатура);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НовСтр.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;       	
			
		КонецЦикла;
		
	//	//+++АК GEYV 25.05.2015
	//ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаПоставкуУпаковки") Тогда
	//	
	//	Подразделение = ДанныеЗаполнения.Склад.Владелец;
	//	Склад = ДанныеЗаполнения.СкладПолучатель;
	//	ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку;
	//	Получатель = ДанныеЗаполнения.Получатель;
	//	
	//	ДатаОтгрузки = ДанныеЗаполнения.ОжидаемаяДатаПоставки;
	//	
	//	Основание = ДанныеЗаполнения;
	//	//Основание = ДанныеЗаполнения;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	ЗаявкаНаПоставкуУпаковкиТовары.Номенклатура,
	//				   |	ЗаявкаНаПоставкуУпаковкиТовары.Количество,
	//				   |	ЗаявкаНаПоставкуУпаковкиТовары.ЕдиницаИзмерения,
	//				   |	ЗаявкаНаПоставкуУпаковкиТовары.Характеристика
	//				   |ИЗ
	//				   |	Документ.ЗаявкаНаПоставкуУпаковки.Товары КАК ЗаявкаНаПоставкуУпаковкиТовары
	//				   |ГДЕ
	//				   |	ЗаявкаНаПоставкуУпаковкиТовары.Ссылка = &Ссылка";
	//	
	//	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	//	
	//	Тз = Запрос.Выполнить().Выгрузить();
	//	
	//	
	//	
	//	ДатаОтгрузки = ДанныеЗаполнения.ОжидаемаяДатаПоставки; 
	//	
	//	Для КАждого Стр Из Тз Цикл
	//		НовСтр = Товары.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	//	КонецЦикла;
	//	
	//	
	//	//---АК
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОтгрузкаВыполнена = Ложь;
	Закрыта = Ложь;
	Основание = Неопределено;
	АвтозагрузкаУРЗ = Ложь;
	ЕстьРасходники = Ложь;
	ПровереноОператором = Ложь;
	ДатаОтгрузки = '00010101';
	
	ИзмененияДвижений.Очистить();
	Расходники.Очистить();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаПоставкуУпаковки") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки
		|ИЗ
		|	Документ.ЗаявкаНаПоставкуУпаковки.Товары КАК ЗаявкаНаПоставкуУпаковкиТовары
		|ГДЕ
		|	ЗаявкаНаПоставкуУпаковкиТовары.Ссылка = &Ссылка
		|	И ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Выполнено)
		|	И НЕ ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаПоставкуУпаковкиТовары.ЗаявкаНаПечатьЭтикетки";
		Запрос.УстановитьПараметр("Ссылка",Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока выборка.Следующий() Цикл
			ЗаявкаОбъект = Выборка.ЗаявкаНаПечатьЭтикетки.ПолучитьОбъект();
			ЗаявкаОбъект.СтатусЗаявки = Перечисления.АК_СтатусыЗаявокНаПечатьЭтикетки.Произведено;
			ЗаявкаОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	//не понятно как пропадают заявки, ставлю заглушку
	Отказ = Истина;
	
КонецПроцедуры


Если ЗначениеЗаполнено(Ссылка) Тогда
	СтараяОперация_Оборудование = (Ссылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки) Или
				 				  (Ссылка.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку);
Иначе
	СтараяОперация_Оборудование = Ложь;
КонецЕсли;
