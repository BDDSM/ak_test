&НаКлиенте
Перем ПредСклад;

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
	//Необходимо для подбора ОС при их возврате с ТТ
	Объект.Поставщик = Неопределено;
	
	//Для корректного проведения
	//В случае с оборудованием в ТЧ может быть ЛИБО Номенклатура, ЛИБО осн. средство
	ВыполнитьОчисткуОборудованияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОчисткуОборудованияСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки Или
		 Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку Тогда
		 
		Объект.Оборудование.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
			
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.Перемещение Или
		 Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку Или
		 Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	Иначе
		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	Элементы.СтраницаРасходники.Видимость 			= Объект.ЕстьРасходники;
	//Элементы.ГруппаНоменклатура.ОтображениеСтраниц	= ?(Объект.ЕстьРасходники,ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);
	
	Элементы.Получатель.ОграничениеТипа = ДопустимыеТипы;
	Элементы.Поставщик.ОграничениеТипа	= ДопустимыеТипы;
	
	//Видимость элементов шапки
	Элементы.Поставщик.Видимость	= (Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки) Или
									  (Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика);
	Элементы.Получатель.Видимость	= Не Элементы.Поставщик.Видимость;
	
	//Видимость страниц
	Элементы.СтраницаОборудование.Видимость	= (Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПередачаОборудованияВТорговуюТочку) Или
											  (Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки) Или
											  (Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ПоступлениеОборудованияОтПоставщика);
	Элементы.Товары.Видимость				= Не Элементы.СтраницаОборудование.Видимость;
	
	//Видимость колонок
	Элементы.ОборудованиеОсновноеСредство.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки);
	Элементы.ОборудованиеИнвентарныйНомер.Видимость	= Элементы.ОборудованиеОсновноеСредство.Видимость;
	Элементы.ОборудованиеЗаводскойНомер.Видимость	= Элементы.ОборудованиеОсновноеСредство.Видимость;
	Элементы.ОборудованиеНоменклатура.Видимость		= Не Элементы.ОборудованиеОсновноеСредство.Видимость;
	
	Если Объект.ВидОперации=Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратТовара Тогда
		Элементы.ТоварыПричинаВозврата.Видимость=Истина;
	Иначе
		Элементы.ТоварыПричинаВозврата.Видимость=Ложь;
	КонецЕсли;
	
	Элементы.ОтгрузкаВыполнена.Доступность = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Кладовщик") ИЛИ РольДоступна("ОператорСклада");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя вводить документ копированием",,,, Отказ);
	//КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		//Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		//	Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.НеОбработан;
		//КонецЕсли;
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку;
		Объект.ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	УстановитьВидимостьИДоступность();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(Объект.Ссылка.ПолучитьОбъект(), ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору",СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураДанные.Номенклатура);
	
	Если Не СтруктураДанные.Номенклатура.НеВедетсяУчетПоХарактеристикам Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		               |ИЗ
		               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |ГДЕ
		               |	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		               |	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		Если ТабРезультат.Количество() = 1 Тогда
			СтруктураДанные.Характеристика = ТабРезультат[0].Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст= 	"ВЫБРАТЬ
	              	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	              	|ИЗ
	              	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	              	|ГДЕ
	              	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	              	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	              	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//ТекущийОбъект.Редактор = ПараметрыСеанса.ТекущийПользователь;
	Если Объект.ВидОперации=Перечисления.ВидыОперацийЗаявкиНаСклад.ВозвратТовара Тогда
		Для каждого стр из Объект.Товары Цикл
			Если не ЗначениеЗаполнено(стр.причинаВозврата) Тогда
				ВыводСообщений.ВывестиСообщениеВОкноСообщений("В строке "+Стр.НомерСтроки+" табличной части товары не заполнена причина возврата", , ,, истина);
				Отказ=истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если Объект.ВидОперации=Перечисления.ВидыОперацийЗаявкиНаСклад.ОтгрузкаВПереработку Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекДата", КонецДня(Объект.Дата) + 14*86400);
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Поставщик", Объект.Получатель);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураСпр.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК НоменклатураСпр
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |			СпецификацииПоставщиковСрезПоследних.НоменклатураСырье КАК Номенклатура
		               |		ИЗ
		               |			РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&ТекДата, ) КАК СпецификацииПоставщиковСрезПоследних
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
		               |					ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
		               |				ИЗ
		               |					РегистрСведений.ЦеныПоставщиков.СрезПоследних(
		               |							&ТекДата,
		               |							Поставщик = &Поставщик
		               |								) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
		               |				ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
		               |					И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
										   
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|			МАКСИМУМ(СпецификацииПоставщиковСрезПоследних.Период) КАК Период,
|			СпецификацииПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
|			СпецификацииПоставщиковСрезПоследних.НоменклатураСырье КАК НоменклатураСырье,
|			СпецификацииПоставщиковСрезПоследних.Характеристика КАК Характеристика
|		ИЗ
|			РегистрСведений.СпецификацииПоставщиков.СрезПоследних(&ТекДата, ) КАК СпецификацииПоставщиковСрезПоследних
|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|					ЦеныПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
|					ЦеныПоставщиковСрезПоследних.Характеристика КАК Характеристика
|				ИЗ
|					РегистрСведений.ЦеныПоставщиков.СрезПоследних(
|							&ТекДата,
|							
|								 Поставщик = &Поставщик) КАК ЦеныПоставщиковСрезПоследних) КАК ЦеныПоставщиков
|				ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ЦеныПоставщиков.Номенклатура
|					И СпецификацииПоставщиковСрезПоследних.Характеристика = ЦеныПоставщиков.Характеристика
|		
|		СГРУППИРОВАТЬ ПО
|			СпецификацииПоставщиковСрезПоследних.Номенклатура,
|			СпецификацииПоставщиковСрезПоследних.НоменклатураСырье,
|			СпецификацииПоставщиковСрезПоследних.Характеристика) КАК ВложенныйЗапрос
|		ПО СпецификацииПоставщиковСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
|			И СпецификацииПоставщиковСрезПоследних.НоменклатураСырье = ВложенныйЗапрос.НоменклатураСырье
|			И СпецификацииПоставщиковСрезПоследних.Характеристика = ВложенныйЗапрос.Характеристика
|			И СпецификацииПоставщиковСрезПоследних.Период = ВложенныйЗапрос.Период
|ГДЕ
|	СпецификацииПоставщиковСрезПоследних.НоменклатураСырье <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
|	И (СпецификацииПоставщиковСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1)
|			ИЛИ СпецификацииПоставщиковСрезПоследних.ДатаКонца > &ТекДата)

					   |) КАК ВЗ_Спецификации
		               |		ПО НоменклатураСпр.Ссылка = ВЗ_Спецификации.Номенклатура
		               |ГДЕ
		               |	НоменклатураСпр.Ссылка В(&Товары)
		               |	И ВЗ_Спецификации.Номенклатура ЕСТЬ NULL 
		               |	И НоменклатураСпр.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Упаковка)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Упаковка " + Выборка.Ссылка + " не включена ни в одну привязанную спецификацию к " + Объект.Получатель,,,, Отказ);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоРаспределению(Команда)
	//Если Объект.Получатель = Неопределено Тогда
	//	Предупреждение ("Не заполнен получатель!");
	//	Возврат;
	//КонецЕсли;
	УстановитьКоличестваРавныеРасчетным(Команда)
//	ЗаполнитьПоРаспределениюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспределениюНаСервере()

	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения= и_ОбменСAccess.ПолучитьСтрокуСоединения("ДанныеТовародвижение");
	//ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьОбщиеПараметрыСоединения(пСоед);
	//ВнешниеИсточникиДанных.ДанныеТовародвижение.УстановитьСоединение();
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	Kontr.id_kontr,
	//			   |	Kontr.id_ul_post
	//			   |ИЗ
	//			   |	ВнешнийИсточникДанных.ДанныеТовародвижение.Таблица.Kontr КАК Kontr";
	//ТабКонтрагенты = Запрос.Выполнить().Выгрузить();
	//
	//СтрСоединения = и_ОбменСAccess.ПолучитьСтрокуСоединения("OLAP");
	//
	//пСоед.СтрокаСоединения= СтрСоединения;
	//ВнешниеИсточникиДанных.OLAP.УстановитьОбщиеПараметрыСоединения(пСоед);
	//ВнешниеИсточникиДанных.OLAP.УстановитьСоединение();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	a.date,
	//			   |	a.id_tt,
	//			   |	a.it_tov,
	//			   |	a.znach,
	//			   |	a.id_kontr
	//			   |ИЗ
	//			   |	ВнешнийИсточникДанных.OLAP.Таблица.dbo_PT_tov_arc КАК a
	//			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |			dbo_PT_tov_arc.date КАК date,
	//			   |			dbo_PT_tov_arc.id_tt КАК id_tt,
	//			   |			dbo_PT_tov_arc.it_tov КАК it_tov,
	//			   |			МАКСИМУМ(dbo_PT_tov_arc.time_user) КАК max_date
	//			   |		ИЗ
	//			   |			ВнешнийИсточникДанных.OLAP.Таблица.dbo_PT_tov_arc КАК dbo_PT_tov_arc
	//			   |		ГДЕ
	//			   |			dbo_PT_tov_arc.id_pok = 3
	//			   |			И (НАЧАЛОПЕРИОДА(dbo_PT_tov_arc.time_user, ДЕНЬ) = НАЧАЛОПЕРИОДА(dbo_PT_tov_arc.date, ДЕНЬ)
	//			   |					ИЛИ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(dbo_PT_tov_arc.time_user, ДЕНЬ, 1), ДЕНЬ) = НАЧАЛОПЕРИОДА(dbo_PT_tov_arc.date, ДЕНЬ))
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			dbo_PT_tov_arc.date,
	//			   |			dbo_PT_tov_arc.id_tt,
	//			   |			dbo_PT_tov_arc.it_tov) КАК b
	//			   |		ПО a.date = b.date
	//			   |			И a.id_tt = b.id_tt
	//			   |			И a.it_tov = b.it_tov
	//			   |			И a.time_user = b.max_date
	//			   |ГДЕ
	//			   |	a.id_pok = 3
	//			   |	И НАЧАЛОПЕРИОДА(a.date,ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРаспределения,ДЕНЬ)
	//			   |	И a.id_tt = &ТТ
	//			   |	И a.znach > 0";
	//Запрос.УстановитьПараметр("ДатаРаспределения",Объект.Дата);
	//Запрос.УстановитьПараметр("ТТ",Объект.Получатель.ИД);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НоваяСтрока = Объект.Товары.Добавить();
	//	Товар 			= Справочники.Номенклатура.НайтиПоРеквизиту	("id_tov",Выборка.it_tov);
	//	СтрокаТабКонтрагенты = ТабКонтрагенты.Найти(Выборка.id_kontr,"id_kontr");
	//	Поставщик 		= Справочники.Контрагенты.НайтиПоРеквизиту	("ИД",СтрокаТабКонтрагенты.id_ul_post);
	//	Характеристика 	= и_ОбменСAccess.ПолучитьХарактеристику(Товар,Поставщик,ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
	//	
	//	
	//	НоваяСтрока.Номенклатура 		= Товар;
	//	НоваяСтрока.Характеристика		= Характеристика;
	//	НоваяСтрока.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору",Товар.БазоваяЕдиницаИзмерения,,Товар);
	//	НоваяСтрока.КоличествоУРЗ	 		= Выборка.znach;
	//КонецЦикла;
КонецПроцедуры

Процедура _ЗаполнитьПоРаспределениюНаСервере()
	//ADOСоединение = ПолучитьADOСоединение();
	//
	//стрТекстЗапросаSQL = "USE OLAP
	//|
	//|SELECT 
	//|	   a.[date]
	//|	  ,a.[id_tt]
	//|	  ,a.[it_tov]
	//|	  ,convert(real,isnull(a.[znach],0)) as znach
	//|	  ,a.[id_kontr]
	//|FROM PT_tov_arc a (nolock)
	//|inner join
	//|(SELECT 
	//|	   date
	//|	  ,id_tt
	//|	  ,it_tov
	//|	  ,max([time_user]) Max_date
	//|  FROM PT_tov_arc (nolock)
	//|  WHERE [id_pok]=3 
	//|	AND (CONVERT(DATE,[time_user])=[date] or  DATEADD(DAY,1,CONVERT(date,[time_user]))=[date])
	//|  GROUP BY
	//|	   [date]
	//|	  ,[id_tt]
	//|	  ,[it_tov]) b
	//|	  on a.date=b.date and a.id_tt=b.id_tt and a.it_tov=b.it_tov and a.time_user=b.Max_date
	//|WHERE a.id_pok=3
	//|	AND a.id_tt		= "+Объект.Получатель.ИД+"
	//|	AND a.[date]	= CONVERT(date,'"+Формат(Объект.Дата,"ДФ=yyyy-MM-dd")+"')
	//|	AND convert(real,isnull(a.[znach],0)) > 0 ";
	//
	//rs = ADOСоединение.Execute(стрТекстЗапросаSQL);
	//
	//rs.MoveFirst();
	//
	//Пока НЕ rs.EOF() Цикл
	//	НоваяСтрока = Объект.Товары.Добавить();
	//	Товар 			= Справочники.Номенклатура.НайтиПоРеквизиту("id_tov",Rs.Fields("it_tov").Value);
	//	Поставщик 		= Справочники.Контрагенты.НайтиПоРеквизиту("ИД",Rs.Fields("id_kontr").Value);
	//	Характеристика 	= и_ОбменСAccess.ПолучитьХарактеристику(Товар,Поставщик,ПланыВидовХарактеристик.СвойстваОбъектов.Производитель);
	//	
	//	
	//	НоваяСтрока.Номенклатура 		= Товар;
	//	НоваяСтрока.Характеристика		= Характеристика;
	//	НоваяСтрока.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору",Товар.БазоваяЕдиницаИзмерения,,Товар);
	//	НоваяСтрока.Количество	 		= Rs.Fields("znach").Value;
	//	rs.MoveNext();
	//КонецЦикла;
	//
	//
	//ADOСоединение.Close();

КонецПроцедуры

&НаСервере
Функция	ПолучитьADOСоединение(парСервер = "10.0.0.40", парLogin = "ssa", парПароль = "nhfyckbnthfwbz")
	
	Если парСервер = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
//	SQLDMOServer = Новый COMОбъект("SQLDMO.SQLServer");
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
//	SQLDMOServer.LoginTimeout = 0;
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
//	ADOСоединение.Mode              = 3; 
	ADOСоединение.ConnectionString  = "SERVER=" + парСервер + "; DRIVER=SQL Server; UID=" + парLogin + "; PWD=" + парПароль + "; OLE DB Services=-2;";
	
	Попытка
//		SQLDMOServer.Connect(парСервер, парLogin, парПароль);
		ADOСоединение.Open();
		
		Если ADOСоединение.State() = 0 Тогда
//			Возврат SQLDMOServer;
			Возврат Неопределено;
		Иначе
			Возврат ADOСоединение;
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;           
	
КонецФункции

&НаКлиенте
Процедура ПроверкаОператором(Команда)
	Объект.ПровереноОператором = НЕ Объект.ПровереноОператором;
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НоменклатураПроверкаОператором.Пометка = Объект.ПровереноОператором;
//	Если Объект.Номенклатура.Итог("КоличествоУРЗ") > 0 Тогда
//		Если Объект.ПровереноОператором Тогда
//			УстановитьКоличестваРавныеРасчетным(Команда);
//		КонецЕсли;
//	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличестваРавныеРасчетным(Команда)
	Для Каждого СтрокаСостав ИЗ Объект.Товары Цикл
		//Если ШтучныйТовар(СтрокаСостав.Номенклатура) Тогда
			//СтрокаСостав.Количество = СтрокаСостав.КоличествоУРЗ;
		//Иначе
		//	СтрокаСостав.Отклонение = СтрокаСостав.КоличествоУРЗ;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//&НаСервере
//Функция ШтучныйТовар(Номенклатура)
//	Возврат Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный;
//КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредСклад = Объект.Склад;
	
	Оборудование_ОбновитьНомера();
	
КонецПроцедуры

&НаСервере
Процедура Оборудование_ОбновитьНомера()
	
	Если Объект.Оборудование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
						|	ОсновныеСредства.ИнвентарныйНомер,
						|	ОсновныеСредства.ЗаводскойНомер
						|ИЗ
						|	Справочник.ОсновныеСредства КАК ОсновныеСредства
						|ГДЕ
						|	ОсновныеСредства.Ссылка В (&Список)
						|");
	Запрос.Параметры.Вставить("Список", Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Оборудование Цикл
		Строка = Таблица.Найти(СтрокаТЧ.ОсновноеСредство);
		Если Строка <> Неопределено Тогда
			СтрокаТЧ.ЗаводскойНомер		= Строка.ЗаводскойНомер;
			СтрокаТЧ.ИнвентарныйНомер	= Строка.ИнвентарныйНомер;
		Иначе
			СтрокаТЧ.ЗаводскойНомер		= "";
			СтрокаТЧ.ИнвентарныйНомер	= "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Получатель"		, Объект.Получатель);
	СтруктураДанные.Вставить("Номенклатура"		, СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика"	, ?(НеВедетсяУчетПоХарактеристикам(СтрокаТабличнойЧасти.Номенклатура),
							ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), СтрокаТабличнойЧасти.Характеристика));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Характеристика		= СтруктураДанные.Характеристика;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество 		= 1;
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	ОбновитьНадписьОстатка();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПолныйВыборПоСкладу() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Склад",Объект.Склад);
		Результат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",ПараметрыФормы);
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		СтрокаТабличнойЧасти.Номенклатура = Результат;
		
		ТоварыНоменклатураПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	//ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	//Если Объект.АвтозагрузкаУРЗ Тогда
		//ТекущиеДанные.Отклонение = ТекущиеДанные.КоличествоУРЗ - ТекущиеДанные.Количество;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			Объект.Склад = ПредСклад;
			Возврат;
		КонецЕсли;	
		Объект.Товары.Очистить();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРаспределение(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.ВСборке") Тогда
		Предупреждение("Нельзя загружать распределение в документ со статусом ""В сборке""");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Модифицированность Тогда
		Ответ = Вопрос("Необходимо записать документ перед загрузкой распределения в него. Записать?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Записать(Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись))) Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("ТТ", Объект.Получатель);
	ПараметрыФормы.Вставить("ДатаРаспределения", Объект.Дата);
	ПараметрыФормы.Вставить("РасходныйОрдер", Объект.Ссылка);
	//+++АК KIRN 2018.07.11 ИП-00019159 
	ОткрытьФорму("Обработка.ЗагрузитьРаспределение1.Форма",ПараметрыФормы);
	//ОткрытьФорму("Обработка.ЗагрузитьРаспределение.Форма",ПараметрыФормы);
	//---АК KIRN 
	ЭтаФорма.Прочитать();
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.Склад = ПредСклад;
			Возврат;
		КонецЕсли;	
		Объект.Товары.Очистить();
	КонецЕсли;
	ПредСклад = Объект.Склад;
	
	//Для каждого склада есть возможность прописать основной вид операции
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументов.ЗаявкаНаСклад");
	НовыйВидОперации = ПолучитьОсновнойВидОперацииСервер(Объект.Склад, ВидДокумента);
	
	Если ЗначениеЗаполнено(НовыйВидОперации) Тогда
		Объект.ВидОперации = НовыйВидОперации;
		ВидОперацииПриИзменении(Неопределено);
	КонецЕсли;
	
	ОбновитьНадписьОстатка();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица товаров будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			Объект.Склад = ПредСклад;
			Возврат;
		КонецЕсли;	
		Объект.Товары.Очистить();
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОсновнойВидОперацииСервер(Склад, ВидДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	СкладыОсновныеОперации.ОсновнаяОперация
							|ИЗ
							|	Справочник.Склады.ОсновныеОперации КАК СкладыОсновныеОперации
							|ГДЕ
							|	СкладыОсновныеОперации.Ссылка = &Склад
							|	И СкладыОсновныеОперации.ВидДокумента = &ВидДокумента
							|	");
	Запрос.Параметры.Вставить("Склад",			Склад);
	Запрос.Параметры.Вставить("ВидДокумента",	ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ОсновнаяОперация, Неопределено);
	
КонецФункции

&НаСервере
Функция ПолныйВыборПоСкладу()
	
	//Если ЗначениеЗаполнено(Объект.Склад.Владелец) Тогда
		Разрешено = Ложь;
		Разрешено = Разрешено ИЛИ (Найти(Объект.Склад, "Возврат поставщику") > 0);
		Разрешено = Разрешено ИЛИ (Найти(Объект.Склад, "Возврат покупателя") > 0);
		//+++АК SHEP 2018.05.03 ИП-00018453
		//Разрешено = Разрешено ИЛИ Объект.Склад.Владелец = Справочники.СтруктурныеЕдиницы.СторонняяПереработка;
		Разрешено = Разрешено ИЛИ Объект.Склад.Владелец.СторонняяПереработка;
		//---АК SHEP 2018.05.03
		Возврат Разрешено
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;	
	
КонецФункции

&НаСервере
Функция НеВедетсяУчетПоХарактеристикам(Номенклатура)
	Возврат Номенклатура.НеВедетсяУчетПоХарактеристикам;
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристики()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	ЗаполнитьОтмененныеИОтгруженныеПозиции();
	
	Оборудование_ОбновитьНомера();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПризнакИспользованияХарактеристики();
	ЗаполнитьОтмененныеИОтгруженныеПозиции();
	
	Оборудование_ОбновитьНомера();
	
КонецПроцедуры


Процедура ЗаполнитьОтмененныеИОтгруженныеПозиции()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	СУММА(ВложенныйЗапрос.Отменено) КАК Отменено,
	               |	ВложенныйЗапрос.Характеристика,
	               |	СУММА(ВложенныйЗапрос.Отправлено) КАК Отправлено
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаявкаНаСкладах.Номенклатура КАК Номенклатура,
	               |		СУММА(ЗаявкаНаСкладах.Количество) КАК Отменено,
	               |		ЗаявкаНаСкладах.Характеристика КАК Характеристика,
	               |		0 КАК Отправлено
	               |	ИЗ
	               |		РегистрНакопления.ЗаявкаНаСкладах КАК ЗаявкаНаСкладах
	               |	ГДЕ
	               |		ЗаявкаНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |		И ЗаявкаНаСкладах.Регистратор = &Регистратор
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаявкаНаСкладах.Номенклатура,
	               |		ЗаявкаНаСкладах.Характеристика
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЗаявкаНаСкладах.Номенклатура,
	               |		0,
	               |		ЗаявкаНаСкладах.Характеристика,
	               |		СУММА(ЗаявкаНаСкладах.Количество)
	               |	ИЗ
	               |		РегистрНакопления.ЗаявкаНаСкладах КАК ЗаявкаНаСкладах
	               |	ГДЕ
	               |		ЗаявкаНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |		И (ЗаявкаНаСкладах.Регистратор ССЫЛКА Документ.РасходныйОрдерСклад
	               |				ИЛИ ЗаявкаНаСкладах.Регистратор ССЫЛКА Документ.ПриходныйОрдерСклад)
	               |		И ЗаявкаНаСкладах.Заявка = &Регистратор
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаявкаНаСкладах.Номенклатура,
	               |		ЗаявкаНаСкладах.Характеристика) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.Характеристика";
				 
	Запрос = Новый Запрос(ТекстЗапроса);			 
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", Выборка.Характеристика);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Отменено = Выборка.Отменено;
			НайденныеСтроки[0].Отправлено = Выборка.Отправлено;
		КонецЕсли;	
	КонецЦикла;	
	
Конецпроцедуры	


&НаКлиенте
Процедура СоздатьРасходныеОрдера(Команда)
	
	СформироватьРасходникиСервер();
	
		
	МассивСкладов = Новый Массив;
	Для Каждого Строка Из ТоварыДополнительно Цикл
		Если МассивСкладов.Найти(Строка.Склад) = Неопределено Тогда
			МассивСкладов.Добавить(Строка.Склад);		
		КонецЕсли;	                             		
	КонецЦикла;
	
	Для Каждого Склад Из МассивСкладов Цикл
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаявкаНаСклад", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад", Склад);
		ПараметрыОткрытия.Вставить("АдресХранилища", АдресХранилища);
		
		ОткрытьФорму("Документ.РасходныйОрдерСклад.ФормаОбъекта", ПараметрыОткрытия,, Истина);
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура СформироватьРасходникиСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ВызватьИсключение "Операция не выполнена, не заполнено подразделение!";	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаСкладахОстатки.Номенклатура,
	|	ЗаявкаНаСкладахОстатки.Характеристика,
	|	ЗаявкаНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаявкаНаСкладах.Остатки(
	|			,
	|				Заявка = &Заявка) КАК ЗаявкаНаСкладахОстатки";
	
	//Запрос.УстановитьПараметр("ДатаКон", Дата);
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	ВыгрузкаТовары = Запрос.Выполнить().Выгрузить();
	ВыгрузкаТовары.Колонки.Добавить("Склад");
	 
	ВыгрузкаТоварыСвернуть = Запрос.Выполнить().Выгрузить();	
	ВыгрузкаТоварыСвернуть.Свернуть("Номенклатура", "Количество");
	ВыгрузкаТоварыСвернуть.Колонки.Добавить("Склад");
	ВыгрузкаТоварыСвернуть.Колонки.Добавить("Родитель");
	
	//МассивРодителей = Новый Массив;
	//Для Каждого Строка Из ВыгрузкаТоварыСвернуть Цикл
	//	Строка.Родитель = Строка.Номенклатура.Родитель;
	//	МассивРодителей.Добавить(Строка.Номенклатура.Родитель);			
	//КонецЦикла;   	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоступностьТоваровНаСкладах.Склад,
	|	ДоступностьТоваровНаСкладах.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ДоступностьТоваровНаСкладах КАК ДоступностьТоваровНаСкладах
	|ГДЕ
	|	ДоступностьТоваровНаСкладах.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ДоступностьТоваровНаСкладах.Номенклатура В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", ВыгрузкаТовары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Подразделение);
	 	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СкладПустаяСсылка = Справочники.Склады.ПустаяСсылка();
	Для Каждого Строка Из ВыгрузкаТоварыСвернуть Цикл
		НайденнаяСтрока = Выгрузка.Найти(Строка.Номенклатура, "Родитель");
		Если НайденнаяСтрока = Неопределено Тогда
			Строка.Склад = СкладПустаяСсылка;	
		Иначе
			Строка.Склад = НайденнаяСтрока.Склад;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ВыгрузкаТовары Цикл
		
		НайденнаяСтрока = ВыгрузкаТоварыСвернуть.Найти(Строка.Номенклатура, "Номенклатура");
		Строка.Склад = НайденнаяСтрока.Склад;
		
	КонецЦикла;
	
	ТоварыДополнительно.Очистить();
	Для Каждого Строка Из ВыгрузкаТовары Цикл
		НовСтрока = ТоварыДополнительно.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);		
	КонецЦикла;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ВыгрузкаТовары, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОборудования(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки") Тогда
		
		//Чтобы смотреть остатки, нужна ТТ
		Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
			Предупреждение("Сначала необходимо заполнить поле ""Поставщик""");
			Возврат;
		КонецЕсли;
		
		//Конкретная единица ОС известна - подбор из справочника ОС
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокПриОткрытии", ПолучитьСписокОССтруктурнойЕдиницы());
			
		Форма = ПолучитьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма);
		
		Форма.Заголовок						= "Основные средства. Подбор";
		Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Форма.ЗакрыватьПриВыборе			= Ложь;
		
		//Открываем модально, т.к. при изменении склада или даты состав строк будет другим.
		//Попытки найти открытую форму подбора успехом не увенчались, ключ уникальности не помог
		Форма.ОткрытьМодально();
		
	Иначе
		
		//Единица ОС неизвестна, подбирается через номенклатуру
		Форма = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая", , ЭтаФорма, Ложь);
		
		Форма.Заголовок						= "Подбор";
		Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Форма.ЗакрыватьПриВыборе			= Ложь;
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СтрЧислоВхождений(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура")>0 Тогда
		ИмяРеквизита	= "Номенклатура";
	ИначеЕсли СтрЧислоВхождений(ИсточникВыбора.ИмяФормы, "Справочник.ОсновныеСредства")>0 Тогда
		ИмяРеквизита = "ОсновноеСредство";
	Иначе
		Возврат;
	КонецЕсли;
		
	// Проверка на то, что она уже есть в ТЧ
	Массив = Объект.Оборудование.НайтиСтроки(Новый Структура(ИмяРеквизита, ВыбранноеЗначение));
	
	Если Массив.Количество()>0 Тогда
		Если Вопрос(Строка(ВыбранноеЗначение) + " уже есть в табличной части. Продолжить?", РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	// Добавляем-заменяем в ТЧ
	СтрокаТЧ = Объект.Оборудование.Добавить();
	СтрокаТЧ[ИмяРеквизита] = ВыбранноеЗначение;
	
	Оборудование_ОбновитьНомера();
		
КонецПроцедуры


&НаКлиенте
Процедура ОборудованиеОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаявкиНаСклад.ВозвратОборудованияСТорговойТочки") Тогда
		
		СтандартнаяОбработка	= Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокПриОткрытии",	ПолучитьСписокОССтруктурнойЕдиницы());
			
		Результат = ОткрытьФормуМодально("Справочник.ОсновныеСредства.Форма.ФормаВыбораУправляемая", ПараметрыФормы);
		Если Результат <> Неопределено Тогда
			Элементы.Оборудование.ТекущиеДанные.ОсновноеСредство = Результат;
			Оборудование_ОбновитьНомера();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Функция ПолучитьСписокОССтруктурнойЕдиницы()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ФинансовыйОстатки.Субконто3 КАК ОС
	                      |ИЗ
	                      |	РегистрБухгалтерии.Финансовый.Остатки(&Дата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Финансовый.ОсновныеСредства)), , Субконто2 = &СтруктурнаяЕдиница) КАК ФинансовыйОстатки
	                      |ГДЕ
	                      |	ФинансовыйОстатки.КоличествоОстаток > 0
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СостояниеОССрезПоследних.ОсновноеСредство
	                      |ИЗ
	                      |	РегистрСведений.СостояниеОС.СрезПоследних(&Дата, ) КАК СостояниеОССрезПоследних
	                      |ГДЕ
	                      |	(СостояниеОССрезПоследних.Местоположение = &СтруктурнаяЕдиница
	                      |			ИЛИ СостояниеОССрезПоследних.Местоположение.Родитель = &СтруктурнаяЕдиница)");
							
	Запрос.Параметры.Вставить("Дата",				?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
	Запрос.Параметры.Вставить("Счет",				ПланыСчетов.Финансовый.ОсновныеСредства);
	Запрос.Параметры.Вставить("СтруктурнаяЕдиница",	Объект.Поставщик);
	
	Результат	= Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОС"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОстатокНоменклатуры(ТекИдентификатор)
	
	ТекДанные = Объект.Товары.НайтиПоИдентификатору(ТекИдентификатор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ?(Объект.Ссылка.Пустая(), КонецДня(ТекущаяДата()), Объект.Дата));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура", ТекДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ТекДанные.Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Дата,
	               |			Склад = &Склад
	               |				И Номенклатура = &Номенклатура
	               |				И Характеристика = &Характеристика) КАК ТоварыНаСкладахОстатки";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьНадписьОстатка()
	
	ТекущийОстаток = 0;
	
	ТекСтрока = Элементы.Товары.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОстаток = ПолучитьОстатокНоменклатуры(ТекСтрока);
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ОбновитьНадписьОстатка();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ОбновитьНадписьОстатка();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//Если НоваяСтрока И Копирование Тогда
	//	Элементы.Товары.ТекущиеДанные.ОтгрузкаВыполнена = Ложь;
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		ЗаполнитьПоКонтрагентуСервер();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаявок(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКонтрагентуСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка КАК ЗаявкаНаПечатьЭтикетки,
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка КАК Номенклатура,
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.КоличествоЗаказано КАК Количество,
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Этикетка.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
	               |ИЗ
	               |	Документ.ЗаявкаНаПечатьЭтикетки.Этикетки КАК ЗаявкаНаПечатьЭтикеткиЭтикетки
	               |ГДЕ
	               |	ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.Поставщик = &Поставщик
	               |	И ЗаявкаНаПечатьЭтикеткиЭтикетки.Ссылка.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.АК_СтатусыЗаявокНаПечатьЭтикетки.Обработано)";
	Запрос.УстановитьПараметр("Поставщик",Объект.Получатель);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры
