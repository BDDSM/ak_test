

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеТоварыОбщее();
		КонецЕсли;
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеУслугиОбщее();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// Реквизиты ТЧ Товары, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоПретензияПоставщикуДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ Услуги, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	 //УслугиСчетЗатратБУ, УслугиСубконтоБУ1, УслугиСубконтоБУ2, УслугиСубконтоБУ3
	 //УслугиСчетЗатратНУ, УслугиСубконтоНУ1, УслугиСубконтоНУ2, УслугиСубконтоНУ3

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоБУ1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоБУ2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоБУ3");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ3");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НеВыгружатьВБУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	
	// Субконто БУ и НУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	Для Сч = 1 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// ПрочееСубконтоБУ
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоБУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоБУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// ПрочееСубконтоНУ
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоНУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	
	// Субконто 
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПлановыйНеутвержденныйПоказатель);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Субконто БУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоБУ1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоБУ1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоБУ2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоБУ3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"Объект.НеВыгружатьВБУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);	
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПлановыйНеутвержденныйПоказатель);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	// Субконто НУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"Объект.НеВыгружатьВБУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПлановыйНеутвержденныйПоказатель);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	// СчетЗатратБУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НеВыгружатьВБУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);	
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	// СчетЗатратНУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратНУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НеВыгружатьВБУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);	
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыОбщее() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыОбщееПроинициализировано", Истина);


	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// Определяются из документа-основания
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтатьяТовародвижения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоэффициент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	//+++AK BATG 2018.12.13 ИП-00020697
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ВыборСтавкиНДСВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	//---AK BATG 
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	
	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее() Экспорт

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСодержаниеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиТорговаяТочка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто3");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущийВидОперации = Объект.ВидОперации;

	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
    КонецЕсли;
    
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто();
	
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС());
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС());
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТаблицы, СуммаВключаетНДС());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего					= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения		= СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки	= СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего					= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения		= СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки	= СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
	//Если СтрокаТаблицы.Свойство("СчетЗатрат") Тогда

	//
	//	СвойстваСчетаБУ	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
	//	Для Индекс = 1 По 3 Цикл
	//		СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= СвойстваСчетаБУ.КоличествоСубконто);
	//	КонецЦикла;
	//	СтрокаТаблицы.ПодразделениеЗатратДоступность = СвойстваСчетаБУ.УчетПоПодразделениям;
	//	
	//КонецЕсли;
	//	
	//Если СтрокаТаблицы.Свойство("СчетЗатратНУ") Тогда
	//	
	//	СвойстваСчетаНУ	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
	//
	//	Для Индекс = 1 По 3 Цикл
	//		СтрокаТаблицы["СубконтоНУ" + Индекс + "Доступность"] = (Индекс <= СвойстваСчетаНУ.КоличествоСубконто);
	//	КонецЦикла;
	//	
	//КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего					= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения		= СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	//СтрокаТаблицы.ВсегоДоКорректировки	= СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки = НСтр("ru = 'до корректировки:'");
	СтрокаТаблицы.НадписьДоИзменения     = НСтр("ru = 'до изменения:'");
	СтрокаТаблицы.НадписьПослеИзменения  = НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	МассивТабличныхЧастейДляРасчетаИтогов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,Оборудование", ",");
	
	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;
	СуммаИтоговДоИзменения = 0; //+++АК LAGP 2018.01.24 ИП-00017748 Добавлен реквизит СуммаДокумента для отображении суммы в структуре подчиненности.
	
	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + Объект[ТекущаяТабличнаяЧасть].Итог("Всего");
		СуммаНДСИтогов = СуммаНДСИтогов + Объект[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");		
		СуммаИтоговДоИзменения = СуммаИтоговДоИзменения + Объект[ТекущаяТабличнаяЧасть].Итог("ВсегоДоИзменения"); //+++АК LAGP 2018.01.24 ИП-00017748 Добавлен реквизит СуммаДокумента для отображении суммы в структуре подчиненности.
	КонецЦикла;

	Форма.ИтогиВсего    = СуммаИтогов;
	Форма.ИтогиВсегоНДС = СуммаНДСИтогов;
	
	Объект.СуммаДокумента = СуммаИтогов - СуммаИтоговДоИзменения; //+++АК LAGP 2018.01.24 ИП-00017748 Добавлен реквизит СуммаДокумента для отображении суммы в структуре подчиненности.
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(Элемент)

	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	
	//
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = СуммаВключаетНДС();
	
	СтрокаТаблицы.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
								УчитыватьНДС, СуммаВключаетНДС,
								УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(Элемент, ИмяТабличнойЧасти)

	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		ЗначениеПустогоКоличества = 1;
	Иначе
		ЗначениеПустогоКоличества = 0;
	КонецЕсли;
	
	//
	СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);

	СуммаВключаетНДС = СуммаВключаетНДС();
	
	//
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		
		УчитыватьНДС = Истина;
		
		СтрокаТаблицы.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
									УчитыватьНДС, СуммаВключаетНДС,
									УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		
	КонецЕсли;
								
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(Элемент)

	ИмяТЧ = Элемент.Родитель.Родитель.Имя;
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Количество") Тогда
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЕсли;

	СуммаВключаетНДС = СуммаВключаетНДС();
	
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		
		УчитыватьНДС = Истина;
		
		СтрокаТаблицы.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
									УчитыватьНДС, СуммаВключаетНДС,
									УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС(), 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	ТекНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
	ТекСчетУчета = Неопределено;
	
	//+++АК Susk (Суслин К.В.) 2018.07.30 ИП-00019275
	СчетаУчета = Справочники.Номенклатура.ПолучитьСчетаУчета(ТекНоменклатура, ДанныеОбъекта.Дата);		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчета);

	//следующий закоментированный код убрать в сентябре 2018, как откатаем универсальное получение счетов учета.

	#Область КоментКод_ТоварыНоменклатураПриИзмененииНаСервере
	//Если ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар
	//	ИЛИ ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
	//	ТекСчетУчета = ПланыСчетов.Финансовый.Товары;
	//ИначеЕсли ТекНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Оборудование Тогда
	//	ТекСчетУчета = ПланыСчетов.Финансовый.КапитальныеВложения;
	//КонецЕсли;
	//
	//Если ТекНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Упаковка Тогда
	//	ТекСчетУчета = ПланыСчетов.Финансовый.МатералыДляВыпуска;
	//КонецЕсли;
	//
	//СтрокаТабличнойЧасти.СчетУчета 				= ?(НЕ ЗначениеЗаполнено(ТекСчетУчета), ПланыСчетов.Финансовый.Товары, ТекСчетУчета);
	#КонецОбласти
	
	//---АК Susk (Суслин К.В.) 
	
	СтрокаТабличнойЧасти.СтатьяТовародвижения 	= Справочники.СтатьиТовародвижения.ПоступлениеОтПоставщика;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= ТекНоменклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент 			= ТекНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
	Если ДанныеОбъекта.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.БезНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС	= Перечисления.СтавкиНДС.БезНДС;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС	= ТекНоменклатура.СтавкаНДС;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

//+++AK BATG 2018.12.14 ИП-00020697 
&НаСервере
Процедура ЗаполнитьРеквизитВыборСтавкиВручную()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Номенклатура,
		|	ЕСТЬNULL(СправочникХарактеристикиНоменклатуры.ВыборСтавкиНДСВручную, ЛОЖЬ) КАК ВыборСтавкиНДСВручную
		|ИЗ
		|	втТовары КАК втТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО (ЗначенияСвойствОбъектов.Объект = СправочникХарактеристикиНоменклатуры.Ссылка)
		|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|				И (ЗначенияСвойствОбъектов.Значение = &Контрагент)
		|		ПО втТовары.Номенклатура = СправочникХарактеристикиНоменклатуры.Владелец";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"Номенклатура"));
	                             
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура));
		Для каждого Стр Из Строки Цикл
			Стр.ВыборСтавкиНДСВручную = ВыборкаДетальныеЗаписи.ВыборСтавкиНДСВручную;	
		КонецЦикла; 
	КонецЦикла;	

КонецПроцедуры
//---AK BATG 

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда
		Если ЗначениеЗаполнено(ДанныеОбъекта.Контрагент.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = ДанныеОбъекта.Контрагент.СтавкаНДС;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетЗатратБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатратБУ;
	
	//Колонки = ЭлементыФормы.Услуги.Колонки;

	//РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратБУ, 
	//	СтрокаТабличнойЧасти.СубконтоБУ1, Колонки.СубконтоБУ1,
	//	СтрокаТабличнойЧасти.СубконтоБУ2, Колонки.СубконтоБУ2,
	//	СтрокаТабличнойЧасти.СубконтоБУ3, Колонки.СубконтоБУ3);
	//	
	//ЗаполнитьСчетНалоговогоУчета();
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
				
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	КонецЕсли;
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
	//	Для Каждого СтрокаТаблицы из Объект.Товары Цикл
	//		Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
	//			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого СтрокаТаблицы из Объект.Услуги Цикл
	//		Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
	//			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого СтрокаТаблицы из Объект.АгентскиеУслуги Цикл
	//		Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
	//			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
	//		КонецЕсли;
	//	КонецЦикла;
	КонецЕсли;
	
	//
	//ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	//Если ЗначениеЗаполнено(СчетФактура) Тогда 
	//	ОшибкиЗаполненияСчетаФактуры();
	//КонецЕсли;
	//
	//ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
	//	Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	//ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	//
	//УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция СуммаВключаетНДС()
	
	Возврат Объект.ВариантРасчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСвТомЧисле");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный)
	
	Возврат УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный);
	
КонецФункции

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	ДокументПоступленияПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзмененииКлиент()

	ДокументПоступленияПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда 
			ТекстВопроса = НСтр("ru = 'Заполнить документ по основанию?'");
			Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнить документ'"));
			
			Если Результат = КодВозвратаДиалога.Да Тогда
				ЗаполнитьДокументСервер();
			КонецЕсли;
			
		Иначе
			ЗаполнитьДокументСервер();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьСвойстваШапки();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ДокументПоступленияСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
	
	//Корректировать = ?(Объект.КорректироватьБУиНУ,1,?(Объект.КорректироватьНДС,0,2));
	//
	//РеквизитыДоговора			= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	//	Объект.ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДС, НДСПоСтавкам4и2");
	//	
	//ВидДоговораДокумента        = РеквизитыДоговора.ВидДоговора;
	//УчетАгентскогоНДС			= РеквизитыДоговора.УчетАгентскогоНДС;
	//ПрименяютсяСтавки4и2		= РеквизитыДоговора.НДСПоСтавкам4и2;
	//
	//Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
	//	ВидОперацииПоступления      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступленияСсылка, "ВидОперации");
	//КонецЕсли;
	//	
	//ТипСкладаДокумента          = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");

	//ЭтоКомиссияПоПродаже        = ВидДоговораДокумента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
	//	И НЕ ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный");
	//ВозможнаКомиссияПоЗакупке	= НЕ ЭтоКомиссияПоПродаже
	//	И ЗначениеЗаполнено(ДокументПоступленияСсылка)
	//	И ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");

	//ЭтоНТТ                      = ТипСкладаДокумента = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	//РозницаВПродажныхЦенах      = НЕ ТипСкладаДокумента = Перечисления.ТипыСкладов.ОптовыйСклад
	//	И УчетВПродажныхЦенах И НЕ ЭтоКомиссияПоПродаже;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы из Объект.Товары Цикл
	//		Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
	//			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
	//		КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.Услуги Цикл
	//		Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
	//			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
	//		КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//РеквизитыДокументаПоступления = Неопределено;
	//Если ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
	//	РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата");
	//КонецЕсли;
	//ДатаДокументаПоступления	= ?(РеквизитыДокументаПоступления <> Неопределено, РеквизитыДокументаПоступления.Дата, '00010101');
	//
	//Если ЗначениеЗаполнено(ДокументПоступленияСсылка) 
	//	И Год(ДатаДокументаПоступления) < Год(Объект.Дата)
	//	И Объект.КорректироватьБУиНУ Тогда
	//	
	//	Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
	//		Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
	//	КонецЕсли;
	//Иначе
	//	Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
	//		Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
	//	Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	//ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	
	ИсправлениеКорректировки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	
	//ТребуетсяСчетФактура = НЕ Корректировать = 2 И НЕ УчетАгентскогоНДС И Не ЭтоКомиссияПоПродаже
	//	И ВидОперацииПоступления <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;	
		
	УправлениеФормой(ЭтаФорма);

	ОбновитьУсловноеОформление(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	Иначе
		ТекущийВидОперации = Объект.ВидОперации;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЭтоТаблица = Ложь, ИмяПланаСчетов = "Финансовый")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"УслугиСубконто" + Постфикс + "1",
								"УслугиСубконто" + Постфикс + "2",
								"УслугиСубконто" + Постфикс + "3");
								
	БухгалтерскийУчетКлиентСерверУФ.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица, ИмяПланаСчетов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументСервер()

	Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьДоступностьСубконто();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаУслуги Из Объект.Услуги Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСерверУФ.УстановитьДоступностьСубконто(СтрокаУслуги.СчетЗатрат, СтрокаУслуги, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
		БухгалтерскийУчетКлиентСерверУФ.УстановитьДоступностьСубконто(СтрокаУслуги.СчетЗатратНУ, СтрокаУслуги, ПоляОбъекта, "Хозрасчетный");
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
		БухгалтерскийУчетКлиентСерверУФ.УстановитьДоступностьСубконто(СтрокаУслуги.СчетЗатратНУ, СтрокаУслуги, ПоляОбъекта, "Хозрасчетный");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Установить видимость реквизитов и заголовков колонок.
	Элементы.ГруппаУслугиСубконтоБУ.Видимость = Не Объект.НеВыгружатьВБУ;
	Элементы.ГруппаУслугиСубконтоНУ.Видимость = Не Объект.НеВыгружатьВБУ;
	
	Элементы.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументПоступления);
	
	// Пока уберем видимость страницы Услуги, вдруг когда то понадобится
	//Элементы.ГруппаУслуги.Видимость = Ложь;
	Элементы.ГруппаУслуги.Видимость = Объект.Услуги.Количество();
	Элементы.ГруппаТовары.Видимость = Объект.Товары.Количество();
	Элементы.ГруппаОборудование.Видимость = Объект.Оборудование.Количество();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ТОВАРЫ
//

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|СчетУчета, СтатьяТовародвижения, 
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Контрагент, ДоговорКонтрагента, СуммаВключаетНДС, ВариантРасчетаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.СуммаВключаетНДС = СуммаВключаетНДС();
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	//+++AK BATG 2018.12.14 ИП-00020697 
	ЗаполнитьРеквизитВыборСтавкиВручную();
	//---AK BATG 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ УСЛУГИ
//

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность,
		|СубконтоНУ1Доступность, СубконтоНУ2Доступность, СубконтоНУ3Доступность,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения,
		|СчетЗатратБУ, СчетЗатратНУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, Контрагент, ДоговорКонтрагента, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.СуммаВключаетНДС = СуммаВключаетНДС();
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
	
	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные, ПоляОбъекта, Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	
	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(ТекущиеДанные.СчетЗатратНУ, ТекущиеДанные, ПоляОбъекта, Истина, "Хозрасчетный");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатрат, "", Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатрат, СтрокаТаблицы, ПоляОбъекта, Истина);

	//ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатратБУ, "БУ", Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатратБУ, "НУ", Истина, "Хозрасчетный");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	БухгалтерскийУчетКлиентСерверУФ.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина, "Хозрасчетный");

	//ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ОБОРУДОВАНИЕ
//
&НаКлиенте
Процедура ОборудованиеСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//+++АК sils 08.06.2018 ИП-00018876
	ОперацияАпдекс = APDEX_ОценкаПроизводительностиКлиентСервер.ПолучитьОперацию("Открытие документа Корректировка поступления");
	APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ОперацияАпдекс);
	//---АК
	
	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	//++ АК luza 18.09.2018 ИП-00019813
	Если Параметры.Ключ.Пустая() = Ложь Тогда
		ЗаполнитьПрикрепленныеФайлы();
	КонецЕсли;	
	//-- АК luza 18.09.2018 ИП-00019813	
	
	УстановитьДоступностьСубконто();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	//+++AK BATG 2018.12.14 ИП-00020697 
	ЗаполнитьРеквизитВыборСтавкиВручную();
	//---AK BATG	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто();
	
	//+++AK BATG 2018.12.14 ИП-00020697 
	ЗаполнитьРеквизитВыборСтавкиВручную();
	//---AK BATG
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

&НаКлиенте
Процедура НеВыгружатьВБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530 
&НаКлиенте
Процедура ВыгрузитьВБП(Команда)
	
	Если НЕ ПроверкаПередВыгрузкойСервер(Параметры.Ключ.Пустая(), ЭтаФорма.Модифицированность, "", Объект.НеВыгружатьВБУ) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВБПСервер();
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530
&НаСервере
Процедура ВыгрузитьВБПСервер()
	
	ОбменСБП2_0.ВыгрузитьДокументВБП("КорректировкаПоступления", "КорректировкаПоступления", Объект.Ссылка); 
	
КонецПроцедуры

//+++АК Susk (Суслин К.В.) 2018.01.10 ИП-00017530 
&НаСервере
Функция ПроверкаПередВыгрузкойСервер(НужноЗаписать, МодифицированностьФормы, ДатаМеньше, НеВыгружатьВБУ)
	
	Возврат ОбменСБП2_0.ПроверкаПередВыгрузкой(НужноЗаписать, МодифицированностьФормы, ДатаМеньше, НеВыгружатьВБУ);
	
КонецФункции

//+++АК sils 08.06.2018 ИП-00018876
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(ОперацияАпдекс, ?(Параметры.Ключ.Пустая(), "Новый документ", "" + Объект.Ссылка));
КонецПроцедуры

//+++ АК luza 18.09.2018 ИП-00019813
&НаСервере
Процедура ЗаполнитьПрикрепленныеФайлы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭДО_СопоставлениеДокументов.ВидДокумента,
	|	МАКСИМУМ(ЭДО_СопоставлениеДокументов.ДокументЭДО.ФайлPDF) КАК ДокументЭДОФайлPDF
	|ИЗ
	|	РегистрСведений.ЭДО_СопоставлениеДокументов КАК ЭДО_СопоставлениеДокументов
	|ГДЕ
	|	ЭДО_СопоставлениеДокументов.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДО_СопоставлениеДокументов.ВидДокумента";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Если Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктВыполненныхРабот Тогда
			ФайлАкт = Стр.ДокументЭДОФайлPDF;
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.ТоварнаяНакладная Тогда
			ФайлНакладная = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.СчетФактура Тогда
			ФайлСФ = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.УПД Тогда
			ФайлУПД = Стр.ДокументЭДОФайлPDF;	
		ИначеЕсли Стр.ВидДокумента = Перечисления.ЭДО_ТипыДокументов.АктСверки Тогда
			ФайлАктСверки = Стр.ДокументЭДОФайлPDF;	
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры	

