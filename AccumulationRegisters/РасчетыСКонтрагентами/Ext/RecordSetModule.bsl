
Функция ПолучитьТаблицуДвиженийВБазе()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасчетыСКонтрагентами.Период,
	                      |	РасчетыСКонтрагентами.Регистратор,
	                      |	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
	                      |	РасчетыСКонтрагентами.Активность,
	                      |	РасчетыСКонтрагентами.ВидДвижения,
	                      |	РасчетыСКонтрагентами.Организация,
	                      |	РасчетыСКонтрагентами.Контрагент,
	                      |	РасчетыСКонтрагентами.Сделка,
	                      |	РасчетыСКонтрагентами.СчетУчета,
	                      |	РасчетыСКонтрагентами.Сумма,
	                      |	РасчетыСКонтрагентами.АвансПоСделке,
	                      |	РасчетыСКонтрагентами.ДокументДт
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	                      |ГДЕ
	                      |	РасчетыСКонтрагентами.Регистратор = &Регистратор
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки");

	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Отбор.Регистратор.Значение);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ТипЗнч(ЭтотОбъект.Отбор.Регистратор.Значение)<>Тип("ДокументСсылка.КорректировкаЗаписейРегистровНакопления") И ТипЗнч(ЭтотОбъект.Отбор.Регистратор.Значение)<>Тип("ДокументСсылка.СвязьДокументовВРасчетахСКонтрагентами") Тогда
		Для Каждого Строка Из ЭтотОбъект Цикл
			Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				Строка.ДокументДт = Строка.Регистратор;
			Иначе
				Строка.ДокументДт = Неопределено;
			КонецЕсли; 
		КонецЦикла;  
	КонецЕсли; 
	
	
	//
	Попытка 
		
	Если НЕ ДополнительныеСвойства.Свойство("ТаблицаДвиженийВБазе") Тогда
		ДополнительныеСвойства.Вставить("ТаблицаДвиженийВБазе", ПолучитьТаблицуДвиженийВБазе());
	КонецЕсли; 
	
	Исключение
		ЗаписьЖурналаРегистрации("РасчетыСКонтрагентами. ПриЗаписи", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры


Процедура ПриЗаписи(Отказ, Замещение)
	
	Попытка 
		
	// Если это очистка движений при проведении, то пересчет сделаем позже
	Если ДополнительныеСвойства.Свойство("ЭтоУдалениеДвижений") Тогда
		ДополнительныеСвойства.Удалить("ЭтоУдалениеДвижений"); 
		
		Возврат;
	КонецЕсли;
	
	//
	ТаблицаЗаписей = ЭтотОбъект.Выгрузить();
	ТаблицаЗаписей.Колонки.Удалить("МоментВремени");
	
	//Для Каждого Запись Из ЭтотОбъект Цикл
	//	Если НЕ ЗначениеЗаполнено(Запись.Сделка) Тогда
	//		НоваяСтрока = ТаблицаЗаписей.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
	//	КонецЕсли; 
	//КонецЦикла;  

	ТаблицаЗаписей.Сортировать("НомерСтроки");
	
	// Проверяем - нужен ли пересчет
	Если ДополнительныеСвойства.Свойство("ТаблицаДвиженийВБазе")  Тогда
		Если ОбщегоНазначения.ДанныеСовпадают(ТаблицаЗаписей, ДополнительныеСвойства.ТаблицаДвиженийВБазе) Тогда
			ДополнительныеСвойства.Очистить();					
			Возврат;
		КонецЕсли; 
		
		// Пересчитываем в том числе по измерениям которые уже были в базе
		Для Каждого Строка ИЗ ДополнительныеСвойства.ТаблицаДвиженийВБазе Цикл
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;  
		
		ДополнительныеСвойства.Очистить();		
	КонецЕсли; 
	
	
	ТаблицаЗаписей.Свернуть("Организация, Контрагент, СчетУчета, Сделка");
	
	Блокировка = Новый БлокировкаДанных;

	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрНакопления.РасчетыСКонтрагентами";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаЗаписей;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета", "СчетУчета");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сделка", "Сделка");
	
	Блокировка.Заблокировать();	
	
	// Непосредственно пересчет
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НаборыИзмерений.Организация,
	                      |	НаборыИзмерений.Контрагент,
	                      |	НаборыИзмерений.СчетУчета,
	                      |	НаборыИзмерений.Сделка
	                      |ПОМЕСТИТЬ ВТ_Измерения
	                      |ИЗ
	                      |	&НаборыИзмерений КАК НаборыИзмерений
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Измерения.Организация,
	                      |	ВТ_Измерения.Контрагент,
	                      |	ВТ_Измерения.СчетУчета,
	                      |	ВТ_Измерения.Сделка,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_Измерения.Сделка ССЫЛКА Документ.СделкаСПоставщиком
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РасчетыСКонтрагентамиОстатки.АвансПоСделкеОстаток > 0
	                      |						ТОГДА РасчетыСКонтрагентамиОстатки.АвансПоСделкеОстаток
	                      |					ИНАЧЕ 0
	                      |				КОНЕЦ
	                      |		ИНАЧЕ ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0)
	                      |	КОНЕЦ КАК СуммаОстаток
	                      |ПОМЕСТИТЬ ВТ_Остатки
	                      |ИЗ
	                      |	ВТ_Измерения КАК ВТ_Измерения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(, ) КАК РасчетыСКонтрагентамиОстатки
	                      |		ПО ВТ_Измерения.Организация = РасчетыСКонтрагентамиОстатки.Организация
	                      |			И ВТ_Измерения.Контрагент = РасчетыСКонтрагентамиОстатки.Контрагент
	                      |			И ВТ_Измерения.СчетУчета = РасчетыСКонтрагентамиОстатки.СчетУчета
	                      |			И ВТ_Измерения.Сделка = РасчетыСКонтрагентамиОстатки.Сделка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Остатки.Организация КАК Организация,
	                      |	ВТ_Остатки.Контрагент КАК Контрагент,
	                      |	ВТ_Остатки.СчетУчета КАК СчетУчета,
	                      |	ВТ_Остатки.Сделка КАК Сделка,
	                      |	ВТ_Остатки.СуммаОстаток КАК СуммаОстаток,
	                      |	ЕСТЬNULL(РасчетыСКонтрагентами.Сумма, 0) КАК Сумма,
	                      |	РасчетыСКонтрагентами.ДокументДт КАК Документ
	                      |ИЗ
	                      |	ВТ_Остатки КАК ВТ_Остатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	                      |		ПО ВТ_Остатки.Организация = РасчетыСКонтрагентами.Организация
	                      |			И ВТ_Остатки.Контрагент = РасчетыСКонтрагентами.Контрагент
	                      |			И ВТ_Остатки.СчетУчета = РасчетыСКонтрагентами.СчетУчета
	                      |			И ВТ_Остатки.Сделка = РасчетыСКонтрагентами.Сделка
	                      |			И (ВТ_Остатки.СуммаОстаток > 0)
	                      |			И (РасчетыСКонтрагентами.Сумма > 0)						  
	                      |			И (РасчетыСКонтрагентами.ДокументДт <> НЕОПРЕДЕЛЕНО)
	                      |			И (РасчетыСКонтрагентами.Активность)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	РасчетыСКонтрагентами.МоментВремени УБЫВ
	                      |ИТОГИ
	                      |	МАКСИМУМ(СуммаОстаток)
	                      |ПО
	                      |	Организация,
	                      |	Контрагент,
	                      |	СчетУчета,
	                      |	Сделка");
	
	Запрос.УстановитьПараметр("НаборыИзмерений", ТаблицаЗаписей);
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаКонтрагенты = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагенты.Следующий() Цикл
			ВыборкаСчета = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСчета.Следующий() Цикл
				ВыборкаСделки = ВыборкаСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСделки.Следующий() Цикл
				
					Выборка = ВыборкаСделки.Выбрать();
					
					НЗ = РегистрыСведений.АвансыПоРасчетамСКонтрагентами.СоздатьНаборЗаписей();
					НЗ.Отбор.Организация.Установить(ВыборкаСделки.Организация);
					НЗ.Отбор.Контрагент.Установить(ВыборкаСделки.Контрагент);
					НЗ.Отбор.СчетУчета.Установить(ВыборкаСделки.СчетУчета);
					НЗ.Отбор.Сделка.Установить(ВыборкаСделки.Сделка);
					
					ТаблицаДвижений = НЗ.ВыгрузитьКолонки();
					
					СуммаОстаток = ВыборкаСделки.СуммаОстаток;
					
					Если СуммаОстаток > 0 Тогда
						Пока Выборка.Следующий() Цикл
							Если Выборка.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли; 
							
							НоваяЗапись = ТаблицаДвижений.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
							
							НоваяЗапись.Сумма = Мин(СуммаОстаток, Выборка.Сумма);
							СуммаОстаток = СуммаОстаток - НоваяЗапись.Сумма;
							
							Если СуммаОстаток = 0 Тогда
								Прервать;
							КонецЕсли; 
						КонецЦикла;   
						
						Если СуммаОстаток>0 Тогда
							НоваяЗапись = ТаблицаДвижений.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСделки);
							
							НоваяЗапись.Сумма = СуммаОстаток;
						КонецЕсли; 
						
					КонецЕсли; 
					
					ТаблицаДвижений.Свернуть("Организация, Контрагент, Документ, СчетУчета, Сделка", "Сумма");
					
					НЗ.Загрузить(ТаблицаДвижений);
					НЗ.Записать();
					
				КонецЦикла;   					
			КонецЦикла;   
		КонецЦикла;   
	КонецЦикла;   
	
	
	Исключение
		ЗаписьЖурналаРегистрации("РасчетыСКонтрагентами. ПриЗаписи", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

