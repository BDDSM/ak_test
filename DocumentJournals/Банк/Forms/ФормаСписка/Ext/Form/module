
Перем КартинкаРучнаяКорректировка;
Перем мВалютаРегламентированногоУчета;
Перем СоответствиеДокументыДляОбработки; //+++АК SHEP 2017.11.10 ИП-00017206
Перем МассивДокументовДляПечати; //+++АК SHEP 2017.11.29 ИП-00017206

Процедура ДействияФормыПроводкиДтКт(Кнопка)

	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры

Процедура ДействияФормыЗагрузить(Кнопка)
	
	ОбработкаКБ = Обработки.КлиентБанк.Создать();
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбработкаКБ.Организация = Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ОбработкаКБ.БанковскийСчет = БанковскийСчет;
	КонецЕсли;
	СохранитьЗначение("КлиентБанкРежимПоУмолчанию", "  Загрузка  ");
	ФормаКБ = ОбработкаКБ.ПолучитьФорму(, ЭтаФорма);
	ФормаКБ.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьВидимость()
	
	ВидимостьОрганизации = НЕ (ЖурналДокументовСписок.Отбор.Организация.Использование
								И ЖурналДокументовСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно);
	ЭлементыФормы.ЖурналДокументовСписок.Колонки.Организация.Видимость = ВидимостьОрганизации;
	
	ВидимостьБанковскогоСчета = НЕ (ЖурналДокументовСписок.Отбор.БанковскийСчет.Использование
									И ЖурналДокументовСписок.Отбор.БанковскийСчет.ВидСравнения = ВидСравнения.Равно);
	ЭлементыФормы.ЖурналДокументовСписок.Колонки.БанковскийСчет.Видимость = ВидимостьБанковскогоСчета;
	
	ВидимостьДаты = НЕ (ЖурналДокументовСписок.Отбор.Дата.Использование
						И ЖурналДокументовСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы
						И КонецДня(ЖурналДокументовСписок.Отбор.Дата.ЗначениеС) = КонецДня(ЖурналДокументовСписок.Отбор.Дата.ЗначениеПо));
	ЭлементыФормы.ЖурналДокументовСписок.Колонки.Дата.Видимость = ВидимостьДаты;
	
КонецПроцедуры

Процедура ОбновитьИтогиПриИзмененииОтбора()

	ТекБанковскийСчет = БанковскийСчет;
	Если ЗначениеЗаполнено(БанковскийСчет)
			И Дата = '00010101' Тогда
		ТекДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	Иначе
		ТекДата = Дата;
	КонецЕсли;
	
	ОбновитьИтоги(ТекДата, ТекБанковскийСчет, Истина);

КонецПроцедуры

// Процедура установки быстрого отбора по организации
//
Процедура УстановитьОтборПоОрганизации()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Отбор.Организация.Установить(Организация, Не Организация.Пустая());
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);
	
КонецПроцедуры // УстановитьОтборПоОрганизации()	

// Процедура установки быстрого отбора по банковскому счету
//
Процедура УстановитьОтборПоБанковскомуСчету()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Отбор.БанковскийСчет.Установить(БанковскийСчет, Не БанковскийСчет.Пустая());
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);
	
КонецПроцедуры // УстановитьОтборПоБанковскомуСчету()	

// Процедура установки быстрого отбора по дате
//
Процедура УстановитьОтборПоДате()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Если Дата = '00010101' Тогда
		Отбор.ДатаДокументаБанка.Использование = Ложь;
	Иначе
		Отбор.ДатаДокументаБанка.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		Отбор.ДатаДокументаБанка.ЗначениеС = НачалоДня(Дата);
		Отбор.ДатаДокументаБанка.ЗначениеПо = КонецДня(Дата);
		Отбор.ДатаДокументаБанка.Использование = Истина;
	КонецЕсли;
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтборПоДате()	

// Процедура установки быстрого отбора по контрагенту
//
Процедура УстановитьОтборПоКонтрагенту()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");

	Отбор.Контрагент.Установить(Контрагент, ЗначениеЗаполнено(Контрагент));
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтборПоКонтрагенту()	

// Процедура установки быстрого отбора по назначению платежа с видом сравнения "содержит"
//
Процедура УстановитьОтборПоНазначениюПлатежа()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Если ПустаяСтрока(НазначениеПлатежа) Тогда
		Отбор.НазначениеПлатежа.Использование = Ложь;
	Иначе
		Отбор.НазначениеПлатежа.ВидСравнения = ВидСравнения.Содержит;
		Отбор.НазначениеПлатежа.Значение = НазначениеПлатежа;
		Отбор.НазначениеПлатежа.Использование = Истина;
	КонецЕсли;
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтборПоНазначениюПлатежа()	

// Процедура вызывается при изменении значения быстрого отбора по организации
//
Процедура ОрганизацияПриИзменении(Элемент)

	БанковскийСчет = Организация.ОсновнойБанковскийСчет;

	УстановитьОтборПоОрганизации();
	УстановитьОтборПоБанковскомуСчету();
	
	ОбновитьИтогиПриИзмененииОтбора();

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по банковскому счету
//
Процедура БанковскийСчетПриИзменении(Элемент)

	Если Организация.Пустая()
			И НЕ БанковскийСчет.Пустая() Тогда
		Организация = БанковскийСчет.Владелец;
		УстановитьОтборПоОрганизации();
	КонецЕсли;

	УстановитьОтборПоБанковскомуСчету();

	ОбновитьИтогиПриИзмененииОтбора();

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по дате
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьОтборПоДате();

	ОбновитьИтогиПриИзмененииОтбора();

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по контрагенту
//
Процедура КонтрагентПриИзменении(Элемент)

	УстановитьОтборПоКонтрагенту();

КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по назначению платежа
//
Процедура НазначениеПлатежаПриИзменении(Элемент)

	УстановитьОтборПоНазначениюПлатежа();

КонецПроцедуры

// Возвращает таблицу сумм остатков и оборотов за указанный день по указанному счету
//
Функция ПолучитьИтоги(ТекДата, ТекБанковскийСчет)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИтогов"			, ТекДата);
	Запрос.УстановитьПараметр("БанковскийСчетИтогов", ТекБанковскийСчет);
	//Запрос.УстановитьПараметр("Организация", ТекБанковскийСчет.Владелец);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"		, мВалютаРегламентированногоУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ФинансовыйОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток
	|	КОНЕЦ КАК НачальныйОстаток,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ФинансовыйОстаткиИОбороты.СуммаОборотДт
	|		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК ВсегоПоступило,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ФинансовыйОстаткиИОбороты.СуммаОборотКт
	|		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК ВсегоСписано,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ФинансовыйОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток
	|	КОНЕЦ КАК КонечныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(
	|			НАЧАЛОПЕРИОДА(&ДатаИтогов, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&ДатаИтогов, ДЕНЬ),
	|			,
	|			ДвиженияИГраницыПериода,
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.БанковскиеСчета),
	//|			Организация = &Организация
	|				Субконто1 = &БанковскийСчетИтогов) КАК ФинансовыйОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ФинансовыйОстаткиИОбороты.Субконто1 = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов";
	
	ТаблицаИтогов = Запрос.Выполнить().Выгрузить();
	
	//++++ АК AZAP 29.03.2017 ИП-00015418
	Если ТаблицаИтогов.Количество() = 0 Тогда
		//ищем счет контрагента по счету организации(по номеру счета и инн)
		БСчетКонтрагента = Неопределено;
		Выборка = Справочники.БанковскиеСчета.Выбрать(,,Новый Структура("НомерСчета", ТекБанковскийСчет.НомерСчета));
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Владелец) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекБанковскийСчет.Владелец, "ИНН") = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Владелец, "ИНН") Тогда
				БСчетКонтрагента = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
		Если БСчетКонтрагента <> Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫБОР
			               |		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
			               |			ТОГДА ФинансовыйОстаткиИОбороты.СуммаНачальныйОстаток
			               |		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток
			               |	КОНЕЦ КАК НачальныйОстаток,
			               |	ВЫБОР
			               |		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
			               |			ТОГДА ФинансовыйОстаткиИОбороты.СуммаОборотДт
			               |		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаОборотДт
			               |	КОНЕЦ КАК ВсегоПоступило,
			               |	ВЫБОР
			               |		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
			               |			ТОГДА ФинансовыйОстаткиИОбороты.СуммаОборотКт
			               |		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаОборотКт
			               |	КОНЕЦ КАК ВсегоСписано,
			               |	ВЫБОР
			               |		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
			               |			ТОГДА ФинансовыйОстаткиИОбороты.СуммаКонечныйОстаток
			               |		ИНАЧЕ ФинансовыйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток
			               |	КОНЕЦ КАК КонечныйОстаток
			               |ИЗ
			               |	РегистрБухгалтерии.Финансовый.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&ДатаИтогов, ДЕНЬ), КОНЕЦПЕРИОДА(&ДатаИтогов, ДЕНЬ), , ДвиженияИГраницыПериода, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.ИсточникиДенежныхСредств), Субконто1 = &БанковскийСчетИтогов) КАК ФинансовыйОстаткиИОбороты
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
			               |		ПО ФинансовыйОстаткиИОбороты.Субконто1 = БанковскиеСчета.Ссылка
			               |ГДЕ
			               |	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов";
			Запрос.УстановитьПараметр("БанковскийСчетИтогов", БСчетКонтрагента);
			ТаблицаИтогов = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
	КонецЕсли;
	//---- АК AZAP
	
	Возврат ТаблицаИтогов;

КонецФункции

// Возвращает таблицу сумм оборотов перемешений за указанный день по указанному счету
//
Функция ПолучитьИтогиПеремещения(ТекДата, ТекБанковскийСчет)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК ВсегоСписано,
	|	РасходИзБанка.СуммаДокумента КАК ВсегоПоступило
	|ИЗ
	|	Документ.РасходИзБанка КАК РасходИзБанка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО РасходИзБанка.СчетКонтрагента = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов
	|	И РасходИзБанка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	|	И РасходИзБанка.Организация = &Организация
	|	И РасходИзБанка.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И РасходИзБанка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.СуммаДокумента,
	|	0
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ПоступлениеВКассу.Контрагент = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов
	|	И ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке)
	|	И ПоступлениеВКассу.Организация = &Организация
	|	И ПоступлениеВКассу.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И ПоступлениеВКассу.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	РасходИзКассы.СуммаДокумента
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО РасходИзКассы.СчетОрганизации = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов
	|	И РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк)
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И РасходИзКассы.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("НачалоДня"			, НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("КонецДня"			, КонецДня(ТекДата));
	Запрос.УстановитьПараметр("БанковскийСчетИтогов", ТекБанковскийСчет);
	Запрос.УстановитьПараметр("Организация"			, ТекБанковскийСчет.Владелец);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"		, мВалютаРегламентированногоУчета);
	
	ТаблицаИтогов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИтогов;

КонецФункции

// Обновление сумм остатков и оборотов за день в форме журнала
//
Процедура ОбновитьИтоги(ТекДата, ТекБанковскийСчет, ВсегдаОбновлять = Ложь)

	Если ВсегдаОбновлять
			ИЛИ (ДатаИтогов <> ТекДата)
			ИЛИ (БанковскийСчетИтогов <> ТекБанковскийСчет) Тогда
		
		ТаблицаИтогов = ПолучитьИтоги(ТекДата, ТекБанковскийСчет);
		
		БанковскийСчетИтогов = ТекБанковскийСчет;
		ДатаИтогов           = ТекДата;
		
		НачальныйОстаток = ТаблицаИтогов.Итог("НачальныйОстаток");
		ВсегоПоступило   = ТаблицаИтогов.Итог("ВсегоПоступило");
		ВсегоСписано     = ТаблицаИтогов.Итог("ВсегоСписано");
		КонечныйОстаток  = ТаблицаИтогов.Итог("КонечныйОстаток");
		
		ТаблицаИтоговПеремещения 	= ПолучитьИтогиПеремещения(ТекДата, ТекБанковскийСчет);
		ВсегоПоступилоПеремещения   = ТаблицаИтоговПеремещения.Итог("ВсегоПоступило");
		ВсегоСписаноПеремещения     = ТаблицаИтоговПеремещения.Итог("ВсегоСписано");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеФормы()

	ЖурналДокументовСписок.Обновить();
	ОбновитьИтоги(ДатаИтогов, БанковскийСчетИтогов, Истина);

КонецПроцедуры

Процедура ГиперссылкаПеремещенияНажатие(Элемент)
	
	ТекДанные = ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(БанковскийСчет) И Дата = '00010101' Тогда
			ТекДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Иначе
			ТекДата = Дата;
		КонецЕсли;
	Иначе
		ТекДата = ТекДанные.Дата;
	КонецЕсли;
	
	ТекБанковскийСчет = БанковскийСчет;
	ТекОрганизация = Организация;
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
		ТекОрганизация = ТекБанковскийСчет.Владелец;
	КонецЕсли;
	
	ПеремещенияДенежныхСредств = ЖурналыДокументов.БанковскиеВыписки.ПолучитьФорму("ПеремещенияДенежныхСредств", ЭтаФорма);
	ПеремещенияДенежныхСредств.ДатаВыписки 		= ТекДата;
	ПеремещенияДенежныхСредств.БанковскийСчет 	= ТекБанковскийСчет;
	ПеремещенияДенежныхСредств.Организация 		= ТекОрганизация;
	ПеремещенияДенежныхСредств.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка подменю "Советы".							   
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.ДействияФормы, "Банк");
	
КонецПроцедуры

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ОтборПоОрганизации = РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ЖурналДокументовСписок");

	Организация = Неопределено;
	Если ОтборПоОрганизации <> Неопределено Тогда
		Если ОтборПоОрганизации.ВидСравнения = ВидСравнения.Равно
			И ОтборПоОрганизации.Использование Тогда
			Организация = ОтборПоОрганизации.Значение;
			БанковскийСчет = Организация.ОсновнойБанковскийСчет;
			УстановитьОтборПоБанковскомуСчету();			
		КонецЕсли; 
	КонецЕсли;
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока));	
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ЖурналДокументовСписок", Истина);
	ИначеЕсли ИмяСобытия = "ОбновитьФорму"
		И ( (ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеВБанк"))
			ИЛИ (ТипЗнч(Источник) = Тип("ДокументОбъект.РасходИзБанка")) 
			ИЛИ (ТипЗнч(Источник) = Тип("ДокументОбъект.РасходИзКассы")) 
			ИЛИ (ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеВКассу"))) Тогда
		ОбновитьИтоги(ДатаИтогов, БанковскийСчетИтогов, Истина);
	КонецЕсли;
	
КонецПроцедуры



Процедура ЖурналДокументовСписокПриАктивизацииСтроки(Элемент)
	
	ТекДанные = ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекБанковскийСчет = БанковскийСчет;
		Если ЗначениеЗаполнено(БанковскийСчет) И Дата = '00010101' Тогда
			ТекДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Иначе
			ТекДата = Дата;
		КонецЕсли;
	Иначе
		ТекДата = ТекДанные.Дата;
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
	КонецЕсли;
	
	ОбновитьИтоги(ТекДата, ТекБанковскийСчет);
	
	//РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(
	//	ЭтаФорма, 
	//	РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока));
	
КонецПроцедуры

Процедура ЖурналДокументовСписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование 
		ИЛИ (НЕ Отбор.ВидДокумента.Использование) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ИмяДокумента = Отбор.ВидДокумента.Значение.Имя;
	НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		НовыйДокумент.Организация = Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		НовыйДокумент.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	Если ЗначениеЗаполнено(Дата) Тогда
		НовыйДокумент.Дата = Дата;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НовыйДокумент.Контрагент = Контрагент;
	КонецЕсли;
	
	ФормаНового = НовыйДокумент.ПолучитьФорму();
	ФормаНового.Открыть();
	
КонецПроцедуры

// Обработчик события "ПриПолученииДанных" формы.
Процедура ЖурналДокументовСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого Строка Из ОформленияСтрок Цикл
		Если Элемент.Колонки.РучнаяКорректировка.Видимость Тогда
			Отображать = Строка.Ячейки.РучнаяКорректировка.Значение;
			Если ТипЗнч(Отображать) = Тип("Булево") и отображать Тогда
				Строка.Ячейки.РучнаяКорректировка.УстановитьКартинку(КартинкаРучнаяКорректировка);
			Иначе 
				Строка.Ячейки.РучнаяКорректировка.Текст = "";
			КонецЕсли;
		КонецЕсли;
        Строка.Ячейки.Флажок1.УстановитьФлажок(СоответствиеДокументыДляОбработки.Получить(Строка.ДанныеСтроки.Ссылка) <> Неопределено); //+++АК SHEP 2017.11.10 ИП-00017206
	КонецЦикла;
	
КонецПроцедуры

Процедура ЖурналДокументовСписокПриИзмененииОтбора(ПутьКДанным = "")
	
	Если ЖурналДокументовСписок.Отбор.Организация.Использование
		И ЖурналДокументовСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно Тогда
		Организация = ЖурналДокументовСписок.Отбор.Организация.Значение;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.БанковскийСчет.Использование
		И ЖурналДокументовСписок.Отбор.БанковскийСчет.ВидСравнения = ВидСравнения.Равно Тогда
		БанковскийСчет = ЖурналДокументовСписок.Отбор.БанковскийСчет.Значение;
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.Контрагент.Использование
		И ЖурналДокументовСписок.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно Тогда
		Контрагент = ЖурналДокументовСписок.Отбор.Контрагент.Значение;
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.Дата.Использование
		И ЖурналДокументовСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Дата = ЖурналДокументовСписок.Отбор.Дата.ЗначениеС;
	Иначе
		Дата = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.НазначениеПлатежа.Использование
		И ЖурналДокументовСписок.Отбор.НазначениеПлатежа.ВидСравнения = ВидСравнения.Содержит Тогда
		НазначениеПлатежа = ЖурналДокументовСписок.Отбор.НазначениеПлатежа.Значение;
	Иначе
		НазначениеПлатежа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыВыгрузитьВБухгалтерию(Кнопка)
	
	Обр = Обработки.НастройкаВыгрузкиПлатёжныхДокументовВБП.Создать();
	Обр.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ДействияФормыКорректировкаОплатПоЭквайрингу(Кнопка)
	
	ОткрытьФорму("Обработка.КорректировкаРазницыОплатИЭквайринга57Счет.Форма.УпрФорма");
		
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура РаспечататьДокументВида(ДокСсылка, ПечататьСразуНаПринтер)
	
	//УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка();
	Если Не УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ДокСсылка.ПолучитьОбъект(), 0, ПечататьСразуНаПринтер) Тогда
		Сообщить("Ошибка при печати документа " + (ДокСсылка));
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ПечатьДокументовВида(ВидДокумента)
	
	КнопкиПоменюПечать = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПечать.Кнопки;
	ПечататьСразуНаПринтер = КнопкиПоменюПечать.ПечататьСразуНаПринтер.Пометка;
	ПечататьВФоновомРежиме = КнопкиПоменюПечать.ПечататьВФоновомРежиме.Пометка;
	
	МассивДокументовДляПечати = Новый Массив;
	НужныйТипДокументСсылка = Тип("ДокументСсылка." + ВидДокумента);
	
	Если СоответствиеДокументыДляОбработки.Количество() = 0 Тогда
		
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ЖурналДокументовСписок);
		Построитель.ЗаполнитьНастройки();
		
		ВыбранныеПоляПостроителя = Построитель.ВыбранныеПоля;
		ВыбранныеПоляПостроителя.Очистить();
		ВыбранныеПоляПостроителя.Добавить("Ссылка");
		
		РезультатПостроителя = Построитель.Результат;
		Если РезультатПостроителя.Пустой() Тогда
			Предупреждение("Список документов пуст!");
			Возврат;
		КонецЕсли;
		
		ВыборкаПостроителя = РезультатПостроителя.Выбрать();
		Пока ВыборкаПостроителя.Следующий() Цикл
			ДокСсылка = ВыборкаПостроителя.Ссылка;
			Если ТипЗнч(ДокСсылка) <> НужныйТипДокументСсылка Тогда Продолжить; КонецЕсли;
			
			Если ПечататьВФоновомРежиме Тогда
				МассивДокументовДляПечати.Добавить(ДокСсылка);
			Иначе
				РаспечататьДокументВида(ДокСсылка, ПечататьСразуНаПринтер);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючИЗначение Из СоответствиеДокументыДляОбработки Цикл
			ДокСсылка = КлючИЗначение.Ключ;
			Если ТипЗнч(ДокСсылка) <> НужныйТипДокументСсылка Тогда Продолжить; КонецЕсли;
			
			Если ПечататьВФоновомРежиме Тогда
				МассивДокументовДляПечати.Добавить(ДокСсылка);
			Иначе
				РаспечататьДокументВида(ДокСсылка, ПечататьСразуНаПринтер);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПечататьВФоновомРежиме И МассивДокументовДляПечати.Количество() > 0 Тогда
		//так не работает
		//ПараметрыФоновойПроцедуры = Новый Массив;
		//ПараметрыФоновойПроцедуры.Добавить(МассивДокументовДляПечати);
		//ФоновыеЗадания.Выполнить("ДлительныеОперацииКлиент.РаспечататьДокументыСразуНаПринтер", ПараметрыФоновойПроцедуры, Новый УникальныйИдентификатор, "Печать документов в фоновом режиме");
		ПодключитьОбработчикОжидания("РаспечататьДокументыСразуНаПринтер", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура РаспечататьДокументыСразуНаПринтер() Экспорт
	
	Для Каждого ДокСсылка Из МассивДокументовДляПечати Цикл
		//Сообщить(ДокСсылка);
		Если Не УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ДокСсылка.ПолучитьОбъект(), 0, Истина) Тогда
			Сообщить("Ошибка при печати документа " + (ДокСсылка));
		КонецЕсли;
	КонецЦикла;
	
	МассивДокументовДляПечати.Очистить();
	ПоказатьОповещениеПользователя("Печать документов в фоновом режиме завершена!");
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ДействияФормыПечатьПлатёжныхПоручений(Кнопка)
	
	ПечатьДокументовВида("РасходИзБанка");
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ДействияФормыПечатьПоступленийВБанк(Кнопка)
	
	ПечатьДокументовВида("ПоступлениеВБанк");
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ДобавитьКолонкуСФлажкамиВСписок() // Программное добавление колонки с флажками
	
	КолонкаФлажок = ЭлементыФормы.ЖурналДокументовСписок.Колонки.Вставить(0, " ");
	КолонкаФлажок.Имя = "Флажок1";
	КолонкаФлажок.Ширина = 3;
	КолонкаФлажок.ИзменятьПозицию = Ложь;
	КолонкаФлажок.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	КолонкаФлажок.ИзменятьВидимость = Ложь;
	КолонкаФлажок.ИзменятьНастройку = Ложь;
	КолонкаФлажок.РежимРедактирования = РежимРедактированияКолонки.Вход;
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ЖурналДокументовСписокПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "Флажок1" Тогда
        Отказ = Истина;
        ДокСсылка = Элемент.ТекущаяСтрока;
        Если СоответствиеДокументыДляОбработки.Получить(ДокСсылка) = Неопределено Тогда
            СоответствиеДокументыДляОбработки.Вставить(ДокСсылка, Истина);
        Иначе
            СоответствиеДокументыДляОбработки.Удалить(ДокСсылка);
        КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ЖурналДокументовСписокПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Флажок1" И Элемент = ЭлементыФормы.ЖурналДокументовСписок Тогда
		ЖурналДокументовСписокПередНачаломИзменения(Элемент, Ложь);
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ДействияФормыПечататьСразуНаПринтер(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ДействияФормыВыделитьВсё(Кнопка)
	
	СоответствиеДокументыДляОбработки.Очистить();
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ЖурналДокументовСписок);
	
	Построитель.ЗаполнитьНастройки();
	
	ВыбранныеПоляПостроителя = Построитель.ВыбранныеПоля;
	ВыбранныеПоляПостроителя.Очистить();
	ВыбранныеПоляПостроителя.Добавить("Ссылка");
	
	РезультатПостроителя = Построитель.Результат;
	Если РезультатПостроителя.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаПостроителя = РезультатПостроителя.Выбрать();
	Пока ВыборкаПостроителя.Следующий() Цикл
		СоответствиеДокументыДляОбработки.Вставить(ВыборкаПостроителя.Ссылка, Истина);
	КонецЦикла;
	
	Обновить();
	
КонецПроцедуры

//+++АК SHEP 2017.11.10 ИП-00017206
Процедура ДействияФормыСнятьПометки(Кнопка)
	СоответствиеДокументыДляОбработки.Очистить();
	Обновить();
КонецПроцедуры

//+++АК SHEP 2017.11.29 ИП-00017206
Процедура ДействияФормыПечататьВФоновомРежиме(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
КонецПроцедуры

ЖурналДокументовСписок.Колонки.Добавить("БанковскийСчет", Ложь);
ЖурналДокументовСписок.Колонки.Добавить("Дата"			, Ложь);

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
КартинкаРучнаяКорректировка     = БиблиотекаКартинок.РучнаяКорректировка;

//+++АК SHEP 2017.11.10 ИП-00017206
СоответствиеДокументыДляОбработки = Новый Соответствие;

ДобавитьКолонкуСФлажкамиВСписок();
//---АК SHEP 2017.11.10
