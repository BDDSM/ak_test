Перем СтрокаДопустимыхКодов;
Перем АдресныеСведения;
Перем АдресныеСведенияИБ;
Перем ИспользованныеКоды;
Перем АльтернативныеНазвания;

// переменные для оптимизиции обращения к функциям получения уровней улементов
Перем ЗначениеМаскаРегиона;
Перем ЗначениеМаскаРайона;
Перем ЗначениеМаскаГорода;
Перем ЗначениеМаскаНасПункта;
Перем ЗначениеМаскаУлицы;
Перем ЗначениеМаскаДома;



//  Процедура устанавливает заданную кодировку для файла XBASE
//
// Параметры:
//  ФайлБД - Объект с отрытым файлом XBASE.
//
Процедура УстановитьКодировку(ФайлБД)

	Если КодировкаWindows Тогда
		ФайлБД.Кодировка = КодировкаXBase.ANSI;
	Иначе
		ФайлБД.Кодировка = КодировкаXBase.OEM;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ АДРЕСНОЙ ИНФОРМАЦИИ

// Процедура загружает в справочник адресный классификатор один адресный 
// элемент по переданным параметрам.
//
// Параметры:
//  КодЭлемента - значение кода для адресного элемента.
//  Наименование - значение наименования для адресного элемента.
//  Сокращение - значение сокращения для адресного элемента.
//  Индекс - значение индекса для адресного элемента.
//  МножительСдвига - множитель для окончательного сдвига кода ( см. вычисление выражения).
//  ДелительСдвига - делитель для первичного сдвига кода ( см. вычисление выражения).
//
Процедура ЗагрузитьАдресныйЭлемент(Знач КодЭлемента, Знач Наименование, Знач Сокращение, Знач Индекс, Знач МножительСдвига, Знач ДелительСдвига = 1)

	Если СокрЛП(Строка(КодЭлемента)) = "" Тогда
		Возврат;
	КонецЕсли;

	Если СокрЛП(Строка(Наименование)) = "" Тогда
		Возврат;
	КонецЕсли;

	Если СокрЛП(Строка(Сокращение)) = "" Тогда
		Возврат;
	КонецЕсли;

	Наименование = СокрЛП(Наименование);
	Сокращение   = СокрЛП(Сокращение);
	
	Если (Формат2003) И (СтрДлина(КодЭлемента) < 19) Тогда
		Если Прав(КодЭлемента, 2) <> "00" Тогда
			СтрокаАльтернативныхНазваний = АльтернативныеНазвания.Добавить();
			КодЭлемента  = Число(СтрЗаменить(КодЭлемента, " ", "0"));
			СтрокаАльтернативныхНазваний.Код = Цел(КодЭлемента / ДелительСдвига) * МножительСдвига * 100 + КодЭлемента%ДелительСдвига;
			СтрокаАльтернативныхНазваний.Наименование = Наименование;
			СтрокаАльтернативныхНазваний.Сокращение = Сокращение;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КодЭлемента  = Число(СтрЗаменить(КодЭлемента, " ", "0"));
	КодЭлемента = Цел(КодЭлемента / ДелительСдвига) * МножительСдвига * 100 + КодЭлемента%ДелительСдвига;

	КодРегиона = Цел(КодЭлемента / ЗначениеМаскаРегиона);
	
	КодРайона            = Цел(КодЭлемента / ЗначениеМаскаРайона) % 1000;
	КодГорода            = Цел(КодЭлемента / ЗначениеМаскаГорода) % 1000;
	КодНаселенногоПункта = Цел(КодЭлемента / ЗначениеМаскаНасПункта) % 1000;
	КодУлицы             = Цел(КодЭлемента / ЗначениеМаскаУлицы)% 10000;

	Если НЕ ЗначениеЗаполнено(Индекс) Тогда
		Индекс = "";
	Иначе
		Индекс = СтрЗаменить(Формат(Число(Индекс),"ЧЦ=6,ЧВН="), " " ,"");
		Индекс = СтрЗаменить(Индекс, Символ(160) ,"");
	КонецЕсли;
	
	
	Если (Врег(Сокращение) = "ДОМ") И (Цел(КодЭлемента / ЗначениеМаскаДома)% 10000 = 0) Тогда
		// дом с нулевым кодом дома - когда загружаем классификатор улиц формата 2002 года
		ТексЗапросаПоискДома = "ВЫБРАТЬ
		                       |	АдресныйКлассификатор.Код
		                       |ИЗ
		                       |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		                       |
		                       |ГДЕ
		                       |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодРегионаВКоде И
		                       |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде И
		                       |	АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде И
		                       |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде И
		                       |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде И
		                       |	АдресныйКлассификатор.Наименование = &Наименование И
		                       |	АдресныйКлассификатор.ТипАдресногоЭлемента = 6";
		
		ЗапросПоискДома = Новый Запрос(ТексЗапросаПоискДома);
		
		ЗапросПоискДома.УстановитьПараметр("КодАдресногоОбъектаВКоде", КодРегиона);
		ЗапросПоискДома.УстановитьПараметр("КодРайонаВКоде", КодРайона);
		ЗапросПоискДома.УстановитьПараметр("КодГородаВКоде", КодГорода);
		ЗапросПоискДома.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
		ЗапросПоискДома.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
		ЗапросПоискДома.УстановитьПараметр("Наименование", Наименование);
		
		Выборка = ЗапросПоискДома.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавилиДом = Ложь;
		
		Для Сч = 1 По 999 Цикл
			КодДома = КодРегиона * ЗначениеМаскаРегиона
			        + КодРайона * ЗначениеМаскаРайона
			        + КодГорода * ЗначениеМаскаГорода
			        + КодНаселенногоПункта * ЗначениеМаскаНасПункта
			        + КодУлицы * ЗначениеМаскаУлицы
			        + Сч * ЗначениеМаскаДома;
			
			Если АдресныеСведенияИБ[КодДома] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользованныеКоды[КодДома] = Истина Тогда  // и уже в добавленных записях
				Продолжить;
			КонецЕсли;
			
			ДобавилиДом = Истина;
			КодЭлемента = КодДома;
			Прервать;
			
		КонецЦикла;
		
		Если НЕ ДобавилиДом Тогда
			Сообщить("Не удалось добавить адресный элемент """ + КодЭлемента + "   " + Наименование + "   " + Сокращение, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользованныеКоды[КодЭлемента] = Истина Тогда  //уже добавили элемент с таким кодом
		Сообщить("Не удалось добавить адресную информацию о """ + Наименование + " " + Сокращение + " (" + КодЭлемента + ")""", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	ИспользованныеКоды.Вставить(КодЭлемента, Истина);
	
	ЗаписьАдреса = АдресныеСведения.Добавить();
	ЗаписьАдреса.Код = КодЭлемента;

	ЗаписьАдреса.Наименование = Наименование;
	ЗаписьАдреса.АльтернативныеНазвания = "";
	ЗаписьАдреса.Сокращение = Сокращение;
	ЗаписьАдреса.Индекс = Индекс;
	ЗаписьАдреса.ТипАдресногоЭлемента = УправлениеКонтактнойИнформацией.ПолучитьТипАдресногоЭлемента(КодЭлемента);
	
	ЗаписьАдреса.КодАдресногоОбъектаВКоде           = КодРегиона;
	ЗаписьАдреса.КодРайонаВКоде            = КодРайона;
	ЗаписьАдреса.КодГородаВКоде            = КодГорода;
	ЗаписьАдреса.КодНаселенногоПунктаВКоде = КодНаселенногоПункта;
	ЗаписьАдреса.КодУлицыВКоде             = КодУлицы;
	
	Если АдресныеСведенияИБ[КодЭлемента] = Истина Тогда
		 АдресныеСведенияИБ[КодЭлемента] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// функция добавляет запись адреса
Функция ДобавитьЗаписьАдреса(СтруктураПриемник, СтрокаИсточник)
	
	ЗаписьАдреса = СтруктураПриемник.Добавить();
						
	ЗаписьАдреса.Код = СтрокаИсточник.Код;
						
	ЗаписьАдреса.Наименование              = СтрокаИсточник.Наименование;
	ЗаписьАдреса.АльтернативныеНазвания    = СтрокаИсточник.АльтернативныеНазвания;
	ЗаписьАдреса.Сокращение                = СтрокаИсточник.Сокращение;
	ЗаписьАдреса.Индекс                    = СтрокаИсточник.Индекс;
	ЗаписьАдреса.ТипАдресногоЭлемента      = СтрокаИсточник.ТипАдресногоЭлемента;
						
	ЗаписьАдреса.КодАдресногоОбъектаВКоде           = СтрокаИсточник.КодРегионаВКоде;
	ЗаписьАдреса.КодРайонаВКоде            = СтрокаИсточник.КодРайонаВКоде;
	ЗаписьАдреса.КодГородаВКоде            = СтрокаИсточник.КодГородаВКоде;
	ЗаписьАдреса.КодНаселенногоПунктаВКоде = СтрокаИсточник.КодНаселенногоПунктаВКоде;
	ЗаписьАдреса.КодУлицыВКоде             = СтрокаИсточник.КодУлицыВКоде;

	Возврат ЗаписьАдреса;
	
КонецФункции

// Процедура загружает адресные класиификаторы из файлов.
//
// Параметры:
//  ФайлАдресногоКлассификатора - имя файла адресного классификатора.
//  ФайлКлассификатораУлиц - имя файла классификатора улиц.
//  ФайлКлассификатораДомов - имя файла классификатора домов.
//  ФайлКлассификатораСокращений - имя файла классификатора сокращений.
//  СписокРегионов - список значений с регионами, адресную информацию по которым 
//                   необходимо обновить (другие не обрабатываются).
//
Процедура ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора, ФайлКлассификатораУлиц, ФайлКлассификатораДомов, ФайлКлассификатораСокращений, СписокРегионов) Экспорт

	ФормаИндикацииХодаЗагрузки = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка адресной информации";
	ФормаИндикацииХодаЗагрузки.Открыть();
	
	СтрокаДопустимыхКодов = "_";
	ДелительСдвига = ?(Формат2003, 100, 1);
	
	АльтернативныеНазвания  = Новый ТаблицаЗначений();
	АльтернативныеНазвания.Колонки.Добавить("Код");
	АльтернативныеНазвания.Колонки.Добавить("Наименование");
	АльтернативныеНазвания.Колонки.Добавить("Сокращение");
	
	АдресныеСведения = Новый ТаблицаЗначений();
	АдресныеСведения.Колонки.Добавить("Код");
	АдресныеСведения.Колонки.Добавить("КодАдресногоОбъектаВКоде");
	АдресныеСведения.Колонки.Добавить("Наименование");
	АдресныеСведения.Колонки.Добавить("АльтернативныеНазвания");
	АдресныеСведения.Колонки.Добавить("Сокращение");
	АдресныеСведения.Колонки.Добавить("Индекс");
	АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента");
	АдресныеСведения.Колонки.Добавить("КодРайонаВКоде");
	АдресныеСведения.Колонки.Добавить("КодГородаВКоде");
	АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде");
	АдресныеСведения.Колонки.Добавить("КодУлицыВКоде");
	
	
	ТекстЗапроса = "ВЫБРАТЬ
					  |	АдресныйКлассификатор.Код,
					  |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
					  |	АдресныйКлассификатор.Наименование,
					  |	АдресныйКлассификатор.АльтернативныеНазвания,
					  |	АдресныйКлассификатор.Сокращение,
					  |	АдресныйКлассификатор.Индекс,
					  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
					  |	АдресныйКлассификатор.КодРайонаВКоде,
					  |	АдресныйКлассификатор.КодГородаВКоде,
					  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
					  |	АдресныйКлассификатор.КодУлицыВКоде
					  |ИЗ
					  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
					  |
					  |ГДЕ
					  |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодРегионаВКоде";

	ЗапросВыбораРегионов = Новый Запрос(ТекстЗапроса);

	// побежали для всех отмеченных элементов грузим регионы
  	Для каждого Элемент Из СписокРегионов Цикл
		
		// элемент помечен для загрузки
		Если Не Элемент.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользованныеКоды = Новый Соответствие();
			
		АльтернативныеНазвания.Очистить();

		АдресныеСведения.Очистить();
			
    	ЗапросВыбораРегионов.УстановитьПараметр("КодАдресногоОбъектаВКоде", Элемент.Значение);
		РезультатЗапросаСведений = ЗапросВыбораРегионов.Выполнить();
		МассивСведений = РезультатЗапросаСведений.Выгрузить().ВыгрузитьКолонку("Код");
		
		АдресныеСведенияИБ = Новый Соответствие();
		Для Сч = 0 По МассивСведений.ВГраница() Цикл
			АдресныеСведенияИБ.Вставить(МассивСведений[Сч], Истина);
		КонецЦикла;
		
		ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружается адресный классификатор: " + СписокРегионов.НайтиПоЗначению(Элемент.Значение).Представление;

		ВыражениеДляИндекса = "SUBSTR(CODE,1,2)='" + Формат(Элемент.Значение, "ЧЦ=2;ЧВН=") + "'";
		КлассификаторАдресов = Новый XBase(ФайлАдресногоКлассификатора);

		Если КлассификаторАдресов.Открыта() Тогда

			ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Загружается адресный классификатор из файла " + ФайлАдресногоКлассификатора;

			// проверяем структуру адресных полей
			Если (КлассификаторАдресов.поля.Найти("CODE") = Неопределено)
			 ИЛИ (КлассификаторАдресов.поля.Найти("NAME") = Неопределено)
			 ИЛИ (КлассификаторАдресов.поля.Найти("SOCR") = Неопределено)
			 ИЛИ (КлассификаторАдресов.поля.Найти("INDEX") = Неопределено) Тогда
				Сообщить("Классификатор адресов неправильной структуры. Не загружен!", СтатусСообщения.Важное);

			Иначе 

				КлассификаторАдресов.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
				КлассификаторАдресов.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
				КлассификаторАдресов.ЗакрытьФайл();
					
				КлассификаторАдресов = Новый XBase(ФайлАдресногоКлассификатора, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
				КлассификаторАдресов.ТекущийИндекс = КлассификаторАдресов.индексы.Найти("MAIN");
						
				УстановитьКодировку(КлассификаторАдресов);
					
				// если в стурктуре есть необходимые поля - загружаем
				КлассификаторАдресов.Первая();
					
				Если НЕ КлассификаторАдресов.ВКонце() Тогда
					
					ЗагрузитьАдресныйЭлемент(КлассификаторАдресов.CODE,
											 КлассификаторАдресов.NAME,
											 КлассификаторАдресов.SOCR,
											 КлассификаторАдресов.INDEX,
											 1000000000000, ДелительСдвига);

					Пока КлассификаторАдресов.Следующая() Цикл
						ЗагрузитьАдресныйЭлемент(КлассификаторАдресов.CODE,
												 КлассификаторАдресов.NAME,
												 КлассификаторАдресов.SOCR,
												 КлассификаторАдресов.INDEX,
												 1000000000000, ДелительСдвига);
						ОбработкаПрерыванияПользователя();
						
					КонецЦикла;
				
				КонецЕсли;
				
				КлассификаторАдресов.ЗакрытьФайл();
				
			КонецЕсли;
				
		КонецЕсли;

		КлассификаторУлиц = Новый XBase(ФайлКлассификатораУлиц);

		Если КлассификаторУлиц.Открыта() Тогда

			ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Загружается классификатор улиц из файла " + ФайлКлассификатораУлиц;
			
			// проверяем структуру адресных полей
			Если (КлассификаторУлиц.поля.Найти("CODE") = Неопределено)
			 ИЛИ (КлассификаторУлиц.поля.Найти("NAME") = Неопределено)
			 ИЛИ (КлассификаторУлиц.поля.Найти("SOCR") = Неопределено)
			 ИЛИ (КлассификаторУлиц.поля.Найти("INDEX") = Неопределено) Тогда
				Сообщить("Классификатор улиц неправильной структуры. Не загружен!", СтатусСообщения.Важное);

			Иначе
					
				КлассификаторУлиц.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
				КлассификаторУлиц.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
				КлассификаторУлиц.ЗакрытьФайл();
					
				КлассификаторУлиц = Новый XBase(ФайлКлассификатораУлиц, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
				КлассификаторУлиц.ТекущийИндекс = КлассификаторУлиц.индексы.Найти("MAIN");

				УстановитьКодировку(КлассификаторУлиц);

				// если в стурктуре есть необходимые поля - загружаем
				КлассификаторУлиц.Первая();
				Если НЕ КлассификаторУлиц.ВКонце() Тогда
					ЗагрузитьАдресныйЭлемент(КлассификаторУлиц.CODE,
											 КлассификаторУлиц.NAME,
											 КлассификаторУлиц.SOCR,
											 КлассификаторУлиц.INDEX,
											 100000000, ДелительСдвига);

					Пока КлассификаторУлиц.Следующая() Цикл
							
						// проверка на загрузку дома
						КодЭлемента = КлассификаторУлиц.CODE;
							
						ЗагрузитьАдресныйЭлемент(КодЭлемента,
												 КлассификаторУлиц.NAME,
												 КлассификаторУлиц.SOCR,
												 КлассификаторУлиц.INDEX,
												 100000000, ДелительСдвига);
						ОбработкаПрерыванияПользователя();
						
					КонецЦикла;
						
				КонецЕсли;
					
				КлассификаторУлиц.ЗакрытьФайл();
					
			КонецЕсли;
				
		КонецЕсли;
			
		 Если Формат2003 Тогда
				
			КлассификаторДомов = Новый XBase(ФайлКлассификатораДомов);

			Если КлассификаторДомов.Открыта() Тогда

				ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Загружается классификатор домов из файла " + ФайлКлассификатораДомов;
				
				// проверяем структуру адресных полей
				Если (КлассификаторДомов.поля.Найти("CODE") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("NAME") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("SOCR") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("KORP") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("INDEX") = Неопределено) Тогда
					Сообщить("Классификатор домов неправильной структуры. Не загружен!", СтатусСообщения.Важное);

				Иначе 
					
					КлассификаторДомов.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
					КлассификаторДомов.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
					КлассификаторДомов.ЗакрытьФайл();
						
					КлассификаторДомов = Новый XBase(ФайлКлассификатораДомов, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
					КлассификаторДомов.ТекущийИндекс = КлассификаторДомов.индексы.Найти("MAIN");

					УстановитьКодировку(КлассификаторДомов);

					КлассификаторДомов.Первая();
					Если НЕ КлассификаторДомов.ВКонце() Тогда
						Дом = КлассификаторДомов.NAME;
						Корпус = КлассификаторДомов.KORP;
						ЗагрузитьАдресныйЭлемент(КлассификаторДомов.CODE,
												 СокрЛП("" + Дом) + ?(ПустаяСтрока(СокрЛП("" + Корпус)), "", "К" + СокрЛП("" + Корпус)),
												 КлассификаторДомов.SOCR,
												 КлассификаторДомов.INDEX,
												 10000);

						Пока КлассификаторДомов.Следующая() Цикл
							Дом = КлассификаторДомов.NAME;
							Корпус = КлассификаторДомов.KORP;
							ЗагрузитьАдресныйЭлемент(КлассификаторДомов.CODE,
													 СокрЛП("" + Дом) + ?(ПустаяСтрока(СокрЛП("" + Корпус)), "", "К" + СокрЛП("" + Корпус)),
													 КлассификаторДомов.SOCR,
													 КлассификаторДомов.INDEX,
													 10000);
							ОбработкаПрерыванияПользователя();
						КонецЦикла;
							
					КонецЕсли;
						
					КлассификаторДомов.ЗакрытьФайл();
						
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Подготавливаем данные к записи";
		ФормаИндикацииХодаЗагрузки.Значение = 0;
			
		ВыборкаЗапроса = РезультатЗапросаСведений.Выбрать();
		Для Сч = 0 По МассивСведений.ВГраница() Цикл
			Если АдресныеСведенияИБ[МассивСведений[Сч]] = Истина Тогда
				Если ВыборкаЗапроса.НайтиСледующий(МассивСведений[Сч], "Код") Тогда
					
					ДобавитьЗаписьАдреса(АдресныеСведения, ВыборкаЗапроса);
											
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Для Каждого СтрокаАльтернативногоНазвания Из АльтернативныеНазвания Цикл
			ЗаписьАдреса = АдресныеСведения.Найти(Цел(Число(СтрокаАльтернативногоНазвания.Код) / 100) * 100, "Код");
			Если ЗаписьАдреса <> Неопределено Тогда
				ЗаписьАдреса.АльтернативныеНазвания = ЗаписьАдреса.АльтернативныеНазвания + СтрокаАльтернативногоНазвания.Наименование + " " + СтрокаАльтернативногоНазвания.Сокращение + ",";
			КонецЕсли;
		КонецЦикла;
			
		// очищаем регион
		НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборАдресныхСведений.Отбор.КодРегионаВКоде.Использование = Истина;
		НаборАдресныхСведений.Отбор.КодРегионаВКоде.Значение = Элемент.Значение;
		НаборАдресныхСведений.Записать(Истина);

		// заносим новые данные порциями
		ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = АдресныеСведения.Количество();
		ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Записываем данные по региону " + Символы.ПС + СписокРегионов.НайтиПоЗначению(Элемент.Значение).Представление;
		ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Записано данных:";
		ФормаИндикацииХодаЗагрузки.Значение = 0;
		
		Для каждого АдреснаяЗапись из АдресныеСведения Цикл
			ДобавитьЗаписьАдреса(НаборАдресныхСведений, АдреснаяЗапись);
			ФормаИндикацииХодаЗагрузки.Значение = ФормаИндикацииХодаЗагрузки.Значение + 1;
		КонецЦикла;
		
		НаборАдресныхСведений.Записать(Ложь);
		
	КонецЦикла;
	
	КлассификаторСокращений = Новый XBase(ФайлКлассификатораСокращений,,Истина);
	
	Если КлассификаторСокращений.Открыта() Тогда
		
		УстановитьКодировку(КлассификаторСокращений);
		
		СправочникКлассификатора = Справочники.АдресныеСокращения;
		
		// проверяем структуру адресных полей
		Если (КлассификаторСокращений.поля.Найти("KOD_T_ST") = Неопределено)
		 ИЛИ (КлассификаторСокращений.поля.Найти("SOCRNAME") = Неопределено)
		 ИЛИ (КлассификаторСокращений.поля.Найти("SCNAME") = Неопределено)
		 ИЛИ (КлассификаторСокращений.поля.Найти("LEVEL") = Неопределено) Тогда
			Сообщить("Классификатор сокращений неправильной структуры. Не загружен!", СтатусСообщения.Важное);
			
		Иначе
			// если в структуре есть необходимые поля - загружаем
			КлассификаторСокращений.Первая();
			Если НЕ КлассификаторСокращений.ВКонце() Тогда
				ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружается классификатор сокращений из файла " + ФайлКлассификатораСокращений;
				ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = КлассификаторСокращений.КоличествоЗаписей();
				
				Фасет = Число(СокрЛП(КлассификаторСокращений.KOD_T_ST));
				ОбъектАдреса = СправочникКлассификатора.НайтиПоКоду(Фасет);
				Если НЕ ЗначениеЗаполнено(ОбъектАдреса) Тогда
					ОбъектАдреса = СправочникКлассификатора.СоздатьЭлемент();
					ОбъектАдреса.Код = Фасет;
				Иначе
					ОбъектАдреса = ОбъектАдреса.ПолучитьОбъект()
				КонецЕсли;
				
				ОбъектАдреса.Наименование = СокрЛП(КлассификаторСокращений.SOCRNAME);
				ОбъектАдреса.Сокращение = СокрЛП(КлассификаторСокращений.SCNAME);
				ОбъектАдреса.Уровень = Число(КлассификаторСокращений.LEVEL);
				
				ОбъектАдреса.Записать();
				
				Пока КлассификаторСокращений.Следующая() Цикл
					ОбработкаПрерыванияПользователя();
					ФормаИндикацииХодаЗагрузки.Значение = КлассификаторСокращений.НомерЗаписи();
					Фасет = Число(СокрЛП(КлассификаторСокращений.KOD_T_ST));
					ОбъектАдреса = СправочникКлассификатора.НайтиПоКоду(Фасет);
					Если НЕ ЗначениеЗаполнено(ОбъектАдреса) Тогда
						ОбъектАдреса = СправочникКлассификатора.СоздатьЭлемент();
						ОбъектАдреса.Код = Фасет;
					Иначе
						ОбъектАдреса = ОбъектАдреса.ПолучитьОбъект()
					КонецЕсли;
					
					ОбъектАдреса.Наименование = СокрЛП(КлассификаторСокращений.SOCRNAME);
					ОбъектАдреса.Сокращение = СокрЛП(КлассификаторСокращений.SCNAME);
					ОбъектАдреса.Уровень = Число(КлассификаторСокращений.LEVEL);
					
					ОбъектАдреса.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
			КлассификаторСокращений.ЗакрытьФайл();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаИндикацииХодаЗагрузки.Закрыть();

КонецПроцедуры

// Процедура загружает регионы из внутренних таблиц.
//
// Параметры:
//  нет
//
Процедура ЗагрузитьРегионы() Экспорт

	ФормаИндикацииХодаЗагрузки = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка адресной информации";
	ФормаИндикацииХодаЗагрузки.Открыть();
	
	АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаРегионов");
	
	ВсегоЗаписей = КлассификаторАдресов.ВысотаТаблицы - 1;
	ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружаются регионы из внутренних таблиц.";
	ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Загружено:";

	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		ФормаИндикацииХодаЗагрузки.Значение = (Сч - 1) * 100 / ВсегоЗаписей;

		ЗаписьАдреса = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		
		ЗаписьАдреса.Код = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		КодРегиона = Цел(ЗаписьАдреса.Код / ЗначениеМаскаРегиона);
		
		ЗаписьАдреса.Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		ЗаписьАдреса.Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		ЗаписьАдреса.Индекс       = СокрЛП(КлассификаторАдресов.Область(Сч, 4, Сч, 4).Текст);
		ЗаписьАдреса.ТипАдресногоЭлемента = 1;
		
		ЗаписьАдреса.КодАдресногоОбъектаВКоде           = КодРегиона;
		ЗаписьАдреса.КодРайонаВКоде            = Цел(ЗаписьАдреса.Код / ЗначениеМаскаРайона) % 1000;
		ЗаписьАдреса.КодГородаВКоде            = Цел(ЗаписьАдреса.Код / ЗначениеМаскаГорода) % 1000;
		ЗаписьАдреса.КодНаселенногоПунктаВКоде = Цел(ЗаписьАдреса.Код / ЗначениеМаскаНасПункта) % 1000;
		ЗаписьАдреса.КодУлицыВКоде             = Цел(ЗаписьАдреса.Код / ЗначениеМаскаУлицы)% 10000;
		
		ЗаписьАдреса.Записать(Истина);
		
	КонецЦикла;
	
	ФормаИндикацииХодаЗагрузки.Закрыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ СПИСКА

//  Процедура устанавливает свойства элементов диалога в соответствии
// со значением реквизитов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьНастройку()

	Если КодировкаWindows Тогда
		ЭлементыФормы.ПолеВыбораКодировки.Значение = ЭлементыФормы.ПолеВыбораКодировки.СписокВыбора.Получить(0).Значение;
	Иначе
		ЭлементыФормы.ПолеВыбораКодировки.Значение = ЭлементыФормы.ПолеВыбораКодировки.СписокВыбора.Получить(1).Значение;
	КонецЕсли;

	Если Формат2003 Тогда
		ЭлементыФормы.ПолеВыбораФормата.Значение = ЭлементыФормы.ПолеВыбораФормата.СписокВыбора.Получить(1).Значение;
	Иначе
		ЭлементыФормы.ПолеВыбораФормата.Значение = ЭлементыФормы.ПолеВыбораФормата.СписокВыбора.Получить(0).Значение;
	КонецЕсли;

КонецПроцедуры

//  Процедура заполняет список регионов. Список регионов используется для
//  загрузки только части классификатора
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьСписокРегионов()

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1" ;

	Выборка = Запрос.Выполнить().Выбрать();
	СписокРегионов.Очистить();

	Пока Выборка.Следующий() Цикл
		СписокРегионов.Добавить(Выборка.КодРегионаВКоде, Выборка.Наименование + " " + Выборка.Сокращение, Ложь);
	КонецЦикла;
	
	СписокРегионов.СортироватьПоПредставлению();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	КодировкаWindows = ВосстановитьЗначение("АдресныйКлассификаторКодировкаWindows");
	Формат2003       = ВосстановитьЗначение("АдресныйКлассификаторФормат2003");

	ФайлАдресногоКлассификатора  = ВосстановитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора");
	ФайлКлассификатораУлиц       = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораУлиц");
	ФайлКлассификатораДомов      = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораДомов");
	ФайлКлассификатораСокращений = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораСокращений");

	Если НЕ ЗначениеЗаполнено(КодировкаWindows) Тогда
		КодировкаWindows = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Формат2003) Тогда
		Формат2003 = Истина;
	КонецЕсли;

	УстановитьНастройку();
	ЗаполнитьСписокРегионов();

	ЭлементыФормы.ФайлКлассификатораДомов.ТолькоПросмотр = НЕ Формат2003;
	ЭлементыФормы.НадписьФайлаКлассификатораДомов.доступность = Формат2003;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("АдресныйКлассификаторКодировкаWindows", КодировкаWindows);
	СохранитьЗначение("АдресныйКлассификаторФормат2003", Формат2003);

	СохранитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора",  ФайлАдресногоКлассификатора);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораУлиц",       ФайлКлассификатораУлиц);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораДомов",      ФайлКлассификатораДомов);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораСокращений", ФайлКлассификатораСокращений);

КонецПроцедуры

// Процедура - обработчик события "Загрузить" командной панели "ДействияФормы".
//
Процедура ОсновныеДействияФормыДействиеЗагрузить(Кнопка)
	
	ТолькоАдресныеСокращения = ПустаяСтрока(ФайлАдресногоКлассификатора)
	                         И ПустаяСтрока(ФайлКлассификатораУлиц)
	                         И (Формат2003 И ПустаяСтрока(ФайлКлассификатораДомов));
	
	Для каждого Элемент Из СписокРегионов Цикл
		
		Если Элемент.Пометка  ИЛИ ТолькоАдресныеСокращения Тогда
			
			ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора,
			                        ФайлКлассификатораУлиц,
			                        ФайлКлассификатораДомов,
			                        ФайлКлассификатораСокращений,
			                        СписокРегионов);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Предупреждение("Необходимо отметить хотя бы один регион для загрузки");
	
КонецПроцедуры

// Процедура - обработчик события "ЗагрузитьРегионы" командной панели "ДействияФормы".
//
Процедура ОсновныеДействияФормыЗагрузитьРегионы(Кнопка)
	
	ЗагрузитьРегионы();
	ЗаполнитьСписокРегионов();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлАдресногоКлассификатора".
//
Процедура ФайлАдресногоКлассификатораНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаАдресногоКлассификатора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаАдресногоКлассификатора.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаАдресногоКлассификатора.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаАдресногоКлассификатора.Выбрать() Тогда
		ФайлАдресногоКлассификатора = ВводФайлаАдресногоКлассификатора.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораУлиц".
//
Процедура ФайлКлассификатораУлицНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораУлиц = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораУлиц.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораУлиц.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораУлиц.Выбрать() Тогда
		ФайлКлассификатораУлиц = ВводФайлаКлассификатораУлиц.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораДомов".
//
Процедура ФайлКлассификатораДомовНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораДомов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораДомов.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораДомов.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораДомов.Выбрать() Тогда
		ФайлКлассификатораДомов = ВводФайлаКлассификатораДомов.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораСокращений".
//
Процедура ФайлКлассификатораСокращенийНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораСокращений = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораСокращений.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораСокращений.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораСокращений.Выбрать() Тогда
		ФайлКлассификатораСокращений = ВводФайлаКлассификатораСокращений.ПолноеИмяФайла;
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеВыбораКодировки".
//
Процедура ПолеВыбораКодировкиПриИзменении(Элемент)

	КодировкаWindows = (ЭлементыФормы.ПолеВыбораКодировки.Значение = "win"); 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеВыбораФормата".
//
Процедура ПолеВыбораФорматаПриИзменении(Элемент)

	Формат2003 = (ЭлементыФормы.ПолеВыбораФормата.Значение = "2003"); 
	ЭлементыФормы.ФайлКлассификатораДомов.ТолькоПросмотр = НЕ Формат2003;
	ЭлементыФормы.НадписьФайлаКлассификатораДомов.Доступность = Формат2003;

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "УстановитьФлажки".
//
Процедура КнопкаУстановитьФлажкиНажатие(Элемент)

	СписокРегионов.ЗаполнитьПометки(Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "СнятьФлажки".
//
Процедура КнопкаСнятьФлажкиНажатие(Элемент)

	СписокРегионов.ЗаполнитьПометки(Ложь);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "ЗатенитьФлажки".
//
Процедура КнопкаЗатенитьФлажкиНажатие(Элемент)

	Для каждого Элемент Из СписокРегионов Цикл
		Элемент.Пометка = Не Элемент.Пометка;
	КонецЦикла;

КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьКлассификатор(Кнопка)

	Ответ = Вопрос("Вся адресная информация в классификаторе по выбранным регионам будет удалена!
					|Очистить адресный классификатор по выбранным регионам?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КодРегионаВКоде.Использование = Истина;
		
	Для Каждого Элемент Из СписокРегионов Цикл
			
		Если НЕ Элемент.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		// очищаем классификатор по региону
		Состояние("Очищаем классификатор по региону " + Элемент.Представление + ".");
		НаборЗаписей.Отбор.КодРегионаВКоде.Значение = Элемент.Значение;
				
		АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		АдресныеСведения.Отбор.КодРегионаВКоде.Использование = Истина;
		АдресныеСведения.Отбор.КодРегионаВКоде.Значение = Элемент.Значение;
				
		ТексЗапроса = "ВЫБРАТЬ
					  |	АдресныйКлассификатор.Код,
					  |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
					  |	АдресныйКлассификатор.Наименование,
					  |	АдресныйКлассификатор.Сокращение,
					  |	АдресныйКлассификатор.Индекс,
					  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
					  |	АдресныйКлассификатор.КодРайонаВКоде,
					  |	АдресныйКлассификатор.КодГородаВКоде,
					  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
					  |	АдресныйКлассификатор.КодУлицыВКоде,
					  |	АдресныйКлассификатор.АльтернативныеНазвания
					  |ИЗ
					  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
					  |
					  |ГДЕ
					  |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодРегионаВКоде И
					  |	АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
				
		Запрос = Новый Запрос(ТексЗапроса);
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Элемент.Значение);
				
		ВыборкаСведений = Запрос.Выполнить().Выбрать();
				
		Пока ВыборкаСведений.Следующий() Цикл
					
			ЗаписьАдреса = АдресныеСведения.Добавить();
					
			ЗаписьАдреса.Код = ВыборкаСведений.Код;
					
			ЗаписьАдреса.Наименование              = ВыборкаСведений.Наименование;
			ЗаписьАдреса.Сокращение                = ВыборкаСведений.Сокращение;
			ЗаписьАдреса.Индекс                    = ВыборкаСведений.Индекс;
			ЗаписьАдреса.АльтернативныеНазвания    = ВыборкаСведений.АльтернативныеНазвания;
			
			ЗаписьАдреса.ТипАдресногоЭлемента      = ВыборкаСведений.ТипАдресногоЭлемента;
			ЗаписьАдреса.КодАдресногоОбъектаВКоде           = ВыборкаСведений.КодРегионаВКоде;
			ЗаписьАдреса.КодРайонаВКоде            = ВыборкаСведений.КодРайонаВКоде;
			ЗаписьАдреса.КодГородаВКоде            = ВыборкаСведений.КодГородаВКоде;
			ЗаписьАдреса.КодНаселенногоПунктаВКоде = ВыборкаСведений.КодНаселенногоПунктаВКоде;
			ЗаписьАдреса.КодУлицыВКоде             = ВыборкаСведений.КодУлицыВКоде;
					
		КонецЦикла;
			
		// оставляем только название региона и все
		АдресныеСведения.Записать(Истина);

	КонецЦикла;
		
	// очищаем классификатор от элементом с нулевым регионом
	Состояние("Проверяем на существование записей с регионом ""0"".");
	НаборЗаписей.Отбор.КодРегионаВКоде.Значение = 0;
	НаборЗаписей.Прочитать();
	
	МенеджерЗаписи = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КодАдресногоОбъектаВКоде = НаборЗаписей.Отбор.КодРегионаВКоде.Значение;
		
	Если НаборЗаписей.Количество() > 0 Тогда
		Для каждого ЗаписьРегистра из НаборЗаписей Цикл
			МенеджерЗаписи.Код = ЗаписьРегистра.Код;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		Сообщить("Дополнительно удалены некорректные записи, содержащие регион 0!", СтатусСообщения.Важное);
	КонецЕсли;
			
КонецПроцедуры



// ОСНОВНОЙ ТЕКСТ ПРОГРАММЫ
///////////////////////////////////////////////////////////////////////////////

ЗначениеМаскаРегиона = УправлениеКонтактнойИнформацией.МаскаРегиона();
ЗначениеМаскаРайона = УправлениеКонтактнойИнформацией.МаскаРайона();
ЗначениеМаскаГорода = УправлениеКонтактнойИнформацией.МаскаГорода();
ЗначениеМаскаНасПункта = УправлениеКонтактнойИнформацией.МаскаНасПункта();
ЗначениеМаскаУлицы = УправлениеКонтактнойИнформацией.МаскаУлицы();
ЗначениеМаскаДома = УправлениеКонтактнойИнформацией.МаскаДома();