
#Область ДополнительныеПроцедурыИФункции

// заполнение дерева значений с описанием ошибок при заполнении формы, сохранненными в базе
// ТаблицаПолейФормы - таблица с описанием доступных полей формы
// КодСтруктурнойЕдиницы - код структурной единицы, для которой выполняется поиск сохраненных ошибок
&НаСервере
Процедура ЗаполнитьДеревоОшибокНаСервере(КодСтруктурнойЕдиницы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСтруктурнойЕдиницы", КодСтруктурнойЕдиницы); 
	Запрос.УстановитьПараметр("ТаблицаПолейФормы", ТаблицаПолейФормы.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПОДСТРОКА(ТаблицаПолейФормы.ИмяПоля, 0, 200) КАК ИмяПоля,
	|	ПОДСТРОКА(ТаблицаПолейФормы.ЗаголовокПоля, 0, 200) КАК ЗаголовокПоля,
	|	ТаблицаПолейФормы.НомерЗакладки
	|ПОМЕСТИТЬ ТаблицаПолейФормы
	|ИЗ
	|	&ТаблицаПолейФормы КАК ТаблицаПолейФормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаПолейФормы.НомерЗакладки КАК НомерЗакладки,
	|	МАКСИМУМ(ЕСТЬNULL(ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками.ОписаниеОшибки, """")) КАК ОписаниеОшибки,
	|	ТаблицаПолейФормы.ИмяПоля КАК ИмяПоля,
	|	ТаблицаПолейФормы.ЗаголовокПоля КАК ЗаголовокПоля
	|ИЗ
	|	ТаблицаПолейФормы КАК ТаблицаПолейФормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОшибкиЗаполненияСтруктурныхЕдиниц.ПоляСОшибками КАК ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками
	|		ПО (ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками.Ссылка.КодСтруктурнойЕдиницы = &КодСтруктурнойЕдиницы)
	|			И ТаблицаПолейФормы.ИмяПоля = ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками.ИмяПоля
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПолейФормы.НомерЗакладки,
	|	ТаблицаПолейФормы.ЗаголовокПоля,
	|	ТаблицаПолейФормы.ИмяПоля
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗакладки,
	|	ЗаголовокПоля
	|ИТОГИ ПО
	|	НомерЗакладки";	
	ВыборкаПоЗакладкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ИмяПоля");
	Дерево.Колонки.Добавить("ЗаголовокПоля");
	Дерево.Колонки.Добавить("ОписаниеОшибки");
	
	Пока ВыборкаПоЗакладкам.Следующий() Цикл
		НомерЗакладки = ВыборкаПоЗакладкам.НомерЗакладки;
		СтрокиУровень1 = Дерево.Строки.Добавить();
		СтрокиУровень1.ЗаголовокПоля = "Закладка №" + НомерЗакладки;
		
		ВыборкаПоЭлементам = ВыборкаПоЗакладкам.Выбрать(); 
		Пока ВыборкаПоЭлементам.Следующий() Цикл
			СтрокиУровень2 = СтрокиУровень1.Строки.Добавить();
			СтрокиУровень2.ИмяПоля = ВыборкаПоЭлементам.ИмяПоля;
			СтрокиУровень2.ЗаголовокПоля = ВыборкаПоЭлементам.ЗаголовокПоля;
			СтрокиУровень2.ОписаниеОшибки = ВыборкаПоЭлементам.ОписаниеОшибки;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОшибок");
	
КонецПроцедуры

// получение элементов формы, находящихся в группах
&НаКлиенте
Процедура ПолучитьПодчиненныеЭлементы(ГрФормы, ТаблицаПолейФормы, НомерЗакладки)
	
	Для Каждого ЭлГрФормы из ГрФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлГрФормы) = Тип("ПолеФормы") или ТипЗнч(ЭлГрФормы) = Тип("ТаблицаФормы") Тогда
			Если ЭлГрФормы.Видимость = Истина Тогда
				НовСтрокаТаблицыПолейФормы = ТаблицаПолейФормы.Добавить();
				НовСтрокаТаблицыПолейФормы.НомерЗакладки = НомерЗакладки;
				НовСтрокаТаблицыПолейФормы.ИмяПоля = ЭлГрФормы.Имя;
				НовСтрокаТаблицыПолейФормы.ЗаголовокПоля = ?(ЭлГрФормы.Заголовок = "", ЭлГрФормы.Имя, ЭлГрФормы.Заголовок);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлГрФормы) = Тип("ГруппаФормы") Тогда 
			ПолучитьПодчиненныеЭлементы(ЭлГрФормы, ТаблицаПолейФормы, НомерЗакладки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// сохранение описания ошибок при заполнении формы в справочнике "ОшибкиЗаполненияСтруктурныхЕдиниц" 
&НаСервере
Функция СохранитьЗамечанияНаСервере(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Дерево = РеквизитФормыВЗначение("ДеревоОшибок");
	
	НовСпр = Справочники.ОшибкиЗаполненияСтруктурныхЕдиниц.СоздатьЭлемент();
	НовСпр.Наименование = Объект.ВременныйКод;
	НовСпр.КодСтруктурнойЕдиницы = Объект.ВременныйКод;
	
	Для Каждого СтрПервогоУровня из Дерево.Строки Цикл
		
		Для Каждого СтрВторогоУровня из СтрПервогоУровня.Строки Цикл
			
			Если СтрВторогоУровня.ОписаниеОшибки <> "" Тогда 
				НовСтр = НовСпр.ПоляСОшибками.Добавить();
				НовСтр.ИмяПоля = СтрВторогоУровня.ИмяПоля;
				НовСтр.ОписаниеОшибки = СтрВторогоУровня.ОписаниеОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		НовСпр.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Успешно";
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

// отправка письма автору структурной единицы с описанием ошибок при заполнении
&НаСервере
Функция ОтправитьЗамечанияНаСервере(Объект, АвторСтруктурнойЕдиницы, АдресЭлПочтыСЕ)
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("Razvitie@vkusvill.ru");
	Почта         = Новый ИнтернетПочта;
	Профиль       = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	АдресМагазина = "" + Объект.Регион + ", " + Объект.Город + ", " + Объект.Адрес;		
	АвторПисьма = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Заявка на открытие нового магазина ВВ: " + Объект.ВременныйКод + " " + АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	ТекстПисьма = "
	|Уважаемый &АвторСтруктурнойЕдиницы!
	|
	|При заполнении Вами информации об открытии нового магазина ВВ по адресу: &НомерТочки &АдресМагазина
	|
	|были обнаружены ошибки. 
	|
	|Исправьте их и отправьте повторный запрос на создание нового магазина.
	|
	|С Уважением, &Автор &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АвторСтруктурнойЕдиницы", АвторСтруктурнойЕдиницы.ФизЛицо);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина"  , АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", Объект.КтоОткрыл);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Автор"			 , АвторПисьма);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , Объект.ВременныйКод);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
	Запрос.УстановитьПараметр("Объект", АвторПисьма);
	Рез = Запрос.Выполнить().Выгрузить();
	Email = "";
	Телефон = "";
	
	Для Каждого Стр из Рез Цикл
		Если Стр.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда 
			Email = "Email " + СокрЛП(Стр.Представление);
		Иначе 
			Телефон = "Тел. " + СокрЛП(Стр.Представление);
		КонецЕсли;
	КонецЦикла;	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	
	Получатель = Письмо.Получатели.Добавить();
	Получатель.Адрес = СокрЛП(АдресЭлПочтыСЕ);
	
	Попытка
		Почта.Послать(Письмо);
		Возврат "Успешно";
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

// получение адреса электронной почты физ.лица
&НаСервере
Функция ПолучитьАдресЭлПочты(АвторСЕ)
	
	АдресСЕ = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Запрос.УстановитьПараметр("Объект", АвторСЕ.ФизЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АдресСЕ = Выборка.Представление;
	КонецЕсли;
	
	Возврат АдресСЕ;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НомерЗакладки = 1;
	ПоляДляПроверки = Этаформа.ВладелецФормы.Элементы.ГруппаЭтапы.ПодчиненныеЭлементы;	
	Для Каждого ПолеДляПроверки Из ПоляДляПроверки Цикл
		Если ТипЗнч(ПолеДляПроверки) = Тип("ГруппаФормы") Тогда 
			ПолучитьПодчиненныеЭлементы(ПолеДляПроверки, ТаблицаПолейФормы, НомерЗакладки);
		ИначеЕсли ТипЗнч(ПолеДляПроверки) = Тип("ПолеВводаФормы") или ТипЗнч(ПолеДляПроверки) = Тип("ТаблицаФормы") Тогда
			Если ПолеДляПроверки.Видимость = Истина Тогда 
				НовСтрокаТаблицыПолейФормы = ТаблицаПолейФормы.Добавить();
				НовСтрокаТаблицыПолейФормы.НомерЗакладки = НомерЗакладки;
				НовСтрокаТаблицыПолейФормы.ИмяПоля = ПолеДляПроверки.Имя;
				НовСтрокаТаблицыПолейФормы.ЗаголовокПоля = ?(ПолеДляПроверки.Заголовок = "", ПолеДляПроверки.Имя, ПолеДляПроверки.Заголовок);
			КонецЕсли;
		КонецЕсли;
		НомерЗакладки = НомерЗакладки + 1;	
	КонецЦикла;
	
	КодСтруктурнойЕдиницы = Этаформа.ВладелецФормы.Объект.ВременныйКод;
	ЗаполнитьДеревоОшибокНаСервере(КодСтруктурнойЕдиницы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// отправка письма автору структурной единицы о наличии ошибок при заполнении данных на форме
// с сохранением ошибок 
&НаКлиенте
Процедура КомандаОтправитьЗамечания(Команда)
	
	ВладелецЭтойФормы = Этаформа.ВладелецФормы.Объект;		
	РезультатСохраненияЗамечаний = СохранитьЗамечанияНаСервере(ВладелецЭтойФормы);	
	
	Если РезультатСохраненияЗамечаний = "Успешно" Тогда 
		АвторСЕ = ВладелецЭтойФормы.АвторСтруктурнойЕдиницы;
		ЭлПочтаАвтораСЕ = ПолучитьАдресЭлПочты(АвторСЕ);
		Если ЭлПочтаАвтораСЕ = "" Тогда
			Сообщить("Невозможно отправить письмо на исправление: у автора структурной единицы не заполнен e-mail!");
			Возврат;
		КонецЕсли;
		
		РезультатОтправкиЗамечаний = ОтправитьЗамечанияНаСервере(ВладелецЭтойФормы, АвторСЕ, ЭлПочтаАвтораСЕ);
		Если РезультатОтправкиЗамечаний = "Успешно" Тогда 
			ЭтаФорма.Закрыть(Истина);
		Иначе
			ЭтаФорма.Закрыть(Ложь);
		КонецЕсли;
	Иначе
		Сообщить("Не удалось записать описание ошибок заполнения. " + РезультатСохраненияЗамечаний);
		ЭтаФорма.Закрыть(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

// закрытие формы без отправки письма автору с сохранением ошибок заполнения 
&НаКлиенте 
Процедура КомандаСохранитьНеОтправлять(Команда)
	
	ВладелецЭтойФормы = Этаформа.ВладелецФормы.Объект;
	РезультатСохраненияЗамечаний = СохранитьЗамечанияНаСервере(ВладелецЭтойФормы);
	Если РезультатСохраненияЗамечаний = "Успешно" Тогда 
		ЭтаФорма.Закрыть();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет; 
		Ответ = Вопрос("Не удалось записать описание ошибок заполнения. Закрыть форму?", Режим, 0); 
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



