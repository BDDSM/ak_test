
#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(ВыбОбъект, НаименованиеРеквизита)
	
	Возврат ВыбОбъект[НаименованиеРеквизита];
	
КонецФункции

&НаСервереБезКонтекста 
Функция РазобратьИмяФайла(Путь)
	
	СтруктураИмени = Новый Структура;
	к = 1;
	Пока не Лев(Прав(Путь,к),1) = "." и не к = СтрДлина(Путь) Цикл
		к = к + 1;	
	КонецЦикла;	
	
	СтруктураИмени.Вставить("Расширение", (ВРег(Прав(Путь,к-1))));
	
	Пока не Лев(Прав(Путь,к),1) = "\" и не к = СтрДлина(Путь) Цикл
		к = к + 1;	
	КонецЦикла;	
	
	СтруктураИмени.Вставить("Наименование", (Прав(Путь, к-1)));
	Возврат СтруктураИмени;
	
КонецФункции

&НаСервере
Функция ПервыеЦифры(Стр)
	
	Для К = 1 По СтрДлина(Стр) Цикл
		Если Найти("01234567890", Сред(Стр,К,1)) = 0 Тогда
			Возврат Лев(Стр, К-1)
		КонецЕсли;
	КонецЦикла;
	Возврат Стр;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОбъект()
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	ЭтотОбъект.Записать();
	
КонецПроцедуры

&НаСервере
функция ПроверкаРоли(ИмяРоли)
	
	Возврат РольДоступна(ИмяРоли);
	
КонецФункции

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// заполнение по умолчанию полей нового объекта при создании 
&НаСервере
Процедура ЗаполнитьНовыйОбъект()
	
	Объект.АвторСтруктурнойЕдиницы = ПараметрыСеанса.ТекущийПользователь;
	Объект.ТипСтруктурнойЕдиницы   = Перечисления.ТипыСтруктурныхЕдиниц.Розница;	
	Объект.Наименование            = "<Не установлено>";
	Объект.ФорматМагазинаВВ        = Перечисления.ФорматМагазинаВВ.Развитие;
	Объект.ОбщаяПлощадь            = 1;
	Объект.ТорговаяПлощадь         = 1;
	Объект.Планограмма             = Справочники.Планограммы.НайтиПоКоду("00001");
	Объект.ГрафикИнвентаризации    = Справочники.ГрафикиИнвентаризацииМагазинов.НайтиПоКоду("00002");
	Объект.ТипРозничнойТочки       = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин");	
	Объект.ЦФО                     = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("ЦФО_88");
	Объект.ЛимитыНачало            = НачалоМесяца(ТекущаяДата());
	Объект.Организация             = Справочники.Организации.НайтиПоКоду("000000006");
	Объект.КлючиОтПомещения        = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
КонецПроцедуры

// вывод описания ошибок заполнения данных формы и выделение их цветом 
// при открытии формы записи со статусом "На исправлении" 
&НаСервере
Процедура УстановитьПодсказкиДляПолей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками.ИмяПоля,
	|	ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками.ОписаниеОшибки
	|ИЗ
	|	Справочник.ОшибкиЗаполненияСтруктурныхЕдиниц.ПоляСОшибками КАК ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками
	|ГДЕ
	|	ОшибкиЗаполненияСтруктурныхЕдиницПоляСОшибками.Ссылка.КодСтруктурнойЕдиницы = &КодСтруктурнойЕдиницы";
	Запрос.УстановитьПараметр("КодСтруктурнойЕдиницы", Объект.ВременныйКод);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы[Выборка.ИмяПоля].Подсказка = Выборка.ОписаниеОшибки;
		Элементы[Выборка.ИмяПоля].ЦветФона = Новый Цвет(255, 174, 181);
	КонецЦикла;
	
КонецПроцедуры

// получение списка полей с ограничением видимости для пользователя 
&НаСервере
Функция ПолучитьОграниченияВидимостиПолей()
	
	Рез = Новый Структура;
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если СокрЛП(ТекПользователь.ФизЛицо.Должность) = "Территориальный управляюший" Тогда
		Рез.Вставить("МагазинПередан", Истина);	
		Рез.Вставить("ЗапросПодтвержденияПередачи", Ложь);	
	Иначе
		Рез.Вставить("МагазинПередан", Ложь);	
		Рез.Вставить("ЗапросПодтвержденияПередачи", Истина);	
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

// получение списка полей с ограниченным доступом для пользователя 
&НаСервере
Функция ПолучитьОграниченияДоступаКПолям()
	
	//+++ AK suvv 2018.09.05 ИП-00019700
	Возврат Справочники.СтруктурныеЕдиницы.ПолучитьОграниченияДоступа();
	//--- AK suvv
	
КонецФункции

// установка видимости, доступности и отборов полей и табличных частей формы 
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьПолейФормы()
	
	Элементы.ДоговорКонтрагентаСканДоговора.Видимость = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
	Элементы.ОткрытьФайл.Видимость                    = ЗначениеЗаполнено(ДоговорКонтрагента.СканДоговора);
	
	Элементы.СхемаРаботыЗазывалы.Видимость = ЗначениеЗаполнено(Объект.СхемаРаботыЗазывалы);
	Элементы.ОткрытьСхему.Видимость= ЗначениеЗаполнено(Объект.СхемаРаботыЗазывалы);
	
	СписокОграничений = ПолучитьОграниченияДоступаКПолям(); 
	Для каждого Ограничение из СписокОграничений Цикл
		Если Элементы.Найти(Ограничение.Ключ) <> Неопределено Тогда 
			Элементы[Ограничение.Ключ].ТолькоПросмотр = Ограничение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	СписокОграниченийВидимости = ПолучитьОграниченияВидимостиПолей(); 
	Для каждого Ограничение из СписокОграниченийВидимости Цикл
		Если Элементы.Найти(Ограничение.Ключ) <> Неопределено Тогда
			Элементы[Ограничение.Ключ].Видимость = Ограничение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		ОбновитьУлицаСокрНаименование();
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокрНаименование.Видимость	= Истина;
		Иначе
			Элементы.УлицаСокрНаименование.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.УлицаСокрНаименование.Видимость	= Ложь;
	КонецЕсли;
	
	Элементы.СписокФайлов.ОтборСтрок = Новый ФиксированнаяСтруктура("Назначение", "Сканы");
	Элементы.ФотоДо.ОтборСтрок       = Новый ФиксированнаяСтруктура("Назначение", "ФотоДо");
	Элементы.ФотоПосле.ОтборСтрок    = Новый ФиксированнаяСтруктура("Назначение", "ФотоПосле");
	Элементы.ФайлыРасстановкиОборудованияПредварительно.ОтборСтрок  = Новый ФиксированнаяСтруктура("Назначение", "СхРасНач");
	Элементы.ФайлыРасстановкиОборудованияОкончательно.ОтборСтрок    = Новый ФиксированнаяСтруктура("Назначение", "СхРасКон");
	
	//+++ AK suvv 2018.09.05 ИП-00019700
	ВидимостьПлощадиСубаренда            = ?(Объект.ПлощадьСубаренды <> 0, Истина, Ложь);		
	НаличиеПлощадиСубаренды              = ВидимостьПлощадиСубаренда;
	Элементы.ПлощадьСубаренды1.Видимость = ВидимостьПлощадиСубаренда;
	//--- AK suvv

	//+++ AK suvv 2018.09.07 ИП-00019759
	Если ТекПользовательАкцептант Тогда 
		Элементы.Группа17.Видимость = Истина;
		//+++ AK suvv 2018.10.01 ИП-00020004
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаУтверждении") Тогда 
			Элементы.Наименование.ТолькоПросмотр = Ложь;
		КонецЕсли;
		//--- AK suvv
	КонецЕсли;
	//--- AK suvv
	
	СтандартнаяОбработка = Ложь;
	
	ПриИзмененииСтатуса();
	
КонецПроцедуры 

// заполнение значений полей, отображаемых на форме, но не хранящися в базе
&НаКлиенте
Процедура ВосстановитьЗначенияПолей()
	
	Если Нрег(Лев(Объект.КорпусСтроения,3)) = " к." Тогда
		НомерКорпуса= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-3));
	ИначеЕсли Нрег(Лев(Объект.КорпусСтроения,5)) = " стр." Тогда
		НомерСтроения= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-5));
	ИначеЕсли Нрег(Лев(Объект.КорпусСтроения,1)) = "к" Тогда
		НомерКорпуса= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-1));
	ИначеЕсли Нрег(Лев(Объект.КорпусСтроения,1)) = "с" Тогда
		НомерСтроения= СокрЛП(Прав(Объект.КорпусСтроения,СтрДлина(Объект.КорпусСтроения)-1));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Адрес) Тогда
		Для каждого Стр из Элементы.ТипУлицы.СписокВыбора Цикл
			Если Найти(Объект.Адрес,Стр.Значение)>0 Тогда
				ТипУлицы = Стр.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПолучитьДанныеИзРеквизитовТипаХранилищаЗначений();
	Если ЗначениеЗаполнено(Объект.КоординатыДолгота) или ЗначениеЗаполнено(Объект.КоординатыШирота) Тогда  
		ПроверитьСовпадениеКоординатНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// загрузка файлов и станций метро из табличной части формы в реквизит РС
&НаСервере
Процедура ЗагрузитьДанныеВРеквизитыТипаХранилищеЗначений();
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ТЗФайлов = Файлы.Выгрузить();
	ЭтотОбъект.ЗагруженныеФайлы = Новый ХранилищеЗначения(ТЗФайлов);
	
	ТЗСтанцийМетро = СтанцииМетро.Выгрузить();
	ЭтотОбъект.СтанцииМетро = Новый ХранилищеЗначения(ТЗСтанцийМетро);
	
	ЭтотОбъект.Записать();
	
КонецПроцедуры

&НаСервере
// получение данных из реквизтов типа "Хранилище значений" для отображения на форме
Процедура ПолучитьДанныеИзРеквизитовТипаХранилищаЗначений()
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	Если ТипЗнч(ЭтотОбъект.ЗагруженныеФайлы.Получить()) = Тип("ТаблицаЗначений") Тогда
		ТаблицаФайлов = ЭтотОбъект.ЗагруженныеФайлы.Получить();  
		Файлы.Загрузить(ТаблицаФайлов);
	КонецЕсли;
	
	Если ТипЗнч(ЭтотОбъект.СтанцииМетро.Получить()) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСтанцийМетро = ЭтотОбъект.СтанцииМетро.Получить();  
		СтанцииМетро.Загрузить(ТаблицаСтанцийМетро);
	КонецЕсли;
	
КонецПроцедуры

// удаление загруженных файлов из базы
&НаСервере
Процедура УдалитьВсеЗагруженныеФайлы()
	
	Для Каждого Стр из Файлы Цикл
		ФайлКУдалению = Стр.Файл;
		Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
			УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ФайлРасстановкиПромоутеров) Тогда
		УдалитьПроизвольныйФайлНаСервере(Объект.ФайлРасстановкиПромоутеров);
	КонецЕсли;
	
КонецПроцедуры 

// заполнение пустых полей по умолчанию
&НаКлиенте
Процедура ЗаполнитьПустыеПоляПоУмолчанию()
	
	Если Объект.АкцептантЗаявок.Пустая() Тогда
		Если НЕ Объект.УправляющийРозницей.Пустая() Тогда
			Объект.АкцептантЗаявок = ПользовательФизлица(Объект.УправляющийРозницей);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ФорматМагазинаВВ.Пустая() Тогда
		Если ОБъект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
			Объект.ФорматМагазинаВВ = ПредопределенноеЗначение("Перечисление.ФорматМагазинаВВ.Развитие")
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// проверка заполнения обязательных полей
&НаКлиенте
Функция ПроверкаЗаполненияПройдена()
	
	ПроверкаПройдена = Истина;
	
	Если Объект.Планограмма.Пустая() Тогда
		Сообщить("Не выбрана планограмма.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Объект.ГрафикИнвентаризации.Пустая() Тогда
		Сообщить("Не выбран график инвентаризации.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОткрытия)Тогда
		Сообщить("Не установлена дата открытия.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипУлицы)ТОгда
		Сообщить("Не установлен тип улицы.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеАрендодателя)Тогда
		Сообщить("Не заполнено ФИО/Наименование контрагента-арендодателя.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТелефонАрендодателя)Тогда
		Сообщить("Не заполнен телефон контрагента-арендодателя.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.АдресАрендодателя)Тогда
		Сообщить("Не заполнен адрес контрагента-арендодателя.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ФайлРасстановкиПромоутеров)Тогда
		Сообщить("Не загружена схема расстановки промоутеров.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) ТОгда
		Сообщить("Не заполнено временное наименование торговой точки.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Улица) 
	//+++ AK suvv 2018.10.02 ИП-00020007
	и Объект.Улица <> ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат") 
	//--- AK suvv
	Тогда
		Сообщить("Не заполнена улица.");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	//+++ AK suvv 2018.09.07 ИП-00019759  
	//Если Строка(Объект.Регион) = "Москва" Тогда
	Если Строка(Объект.Регион) = "Москва" и ТекПользовательАкцептант Тогда
	//--- AK suvv
		Если НЕ ЗначениеЗаполнено(Объект.Район) Тогда
			Сообщить("Не определен район! Укажите его вручную.");
			Элементы.Группа17.Видимость = Истина;
			ПроверкаПройдена = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) Тогда
			Сообщить("Не определен административный округ! Укажите его вручную.");
			Элементы.Группа17.Видимость = Истина;
			ПроверкаПройдена = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбораСканыДоговоров = Новый Структура;
	ПараметрыОтбораСканыДоговоров.Вставить("Назначение", "Сканы");	
	Сканы = Файлы.НайтиСтроки(ПараметрыОтбораСканыДоговоров);
	Если Сканы.Количество() = 0 Тогда	
		Сообщить("Не прикреплен скан договора!"); 
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

// получение ЦФО по торговой точке
&НаСервере
Функция ЦФОпоТТ(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЦФО,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Развитие КАК Развитие
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Период КАК Период,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО КАК ЦФО,
	|		ЛОЖЬ КАК Развитие,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				,
	|				СтруктурнаяЕдиница = &ТТ
	|					И ЦФО.Код <> ""ЦФО_88"") КАК ЦФОСтруктурныхЕдиницСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Период,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.ЦФО,
	|		ИСТИНА,
	|		ЦФОСтруктурныхЕдиницСрезПоследних.Организация
	|	ИЗ
	|		РегистрСведений.ЦФОСтруктурныхЕдиниц.СрезПоследних(
	|				,
	|				СтруктурнаяЕдиница = &ТТ
	|					И ЦФО.Код = ""ЦФО_88"") КАК ЦФОСтруктурныхЕдиницСрезПоследних) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЛОЖЬ КАК Развитие
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИСТИНА) КАК ТекЗаписи
	|		ПО ВложенныйЗапрос.Развитие = ТекЗаписи.Развитие";
	Запрос.УстановитьПараметр("ТТ", СтруктурнаяЕдиница);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// получение пользователя по физ.лицу
&НаСервереБезКонтекста
Функция ПользовательФизлица(Физлицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ,
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизЛицо = &ФизЛицо
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Физлицо",Физлицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоздатьНовоеСведениеОРайоне(ТипСведений, ЗначениеДляНовогоСведения, Город = "", АО = "")
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипСведений = "АдминистративныйОкруг" Тогда 
		НовАО = Справочники.АдминистративныеОкруга.СоздатьЭлемент();
		НовАО.Наименование = ЗначениеДляНовогоСведения;
		НовАО.Город = Город;
		НовАО.Записать();
		Возврат НовАО.Ссылка;
	ИначеЕсли ТипСведений = "Район" Тогда 
		НовРайон = Справочники.Районы.СоздатьЭлемент();
		НовРайон.Наименование = ЗначениеДляНовогоСведения;
		НовРайон.Владелец = АО;
		НовРайон.Записать();
		Возврат НовРайон.Ссылка;
	ИначеЕсли ТипСведений = "Метро" Тогда 
		НовСтанцияМетро = Справочники.СтанцииМетро.СоздатьЭлемент();
		НовСтанцияМетро.Наименование = ЗначениеДляНовогоСведения;
		НовСтанцияМетро.Записать();
		Возврат НовСтанцияМетро.Ссылка;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

&НаСервере
Функция НайтиСправочникВБазе(НазваниеСправочника, НаименованиеДляПоиска)
	
	НаименованиеДляПоиска = СтрЗаменить(НаименованиеДляПоиска, "ё", "е");
	НаименованиеДляПоиска = СтрЗаменить(НаименованиеДляПоиска, "й", "и");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|   НазваниеСправочника.Ссылка,
	|	НазваниеСправочника.Наименование
	|ИЗ
	|	Справочник.НазваниеСправочника КАК НазваниеСправочника";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НазваниеСправочника", НазваниеСправочника);
	Запрос.Текст = ТекстЗапроса;
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр из ТЗ Цикл
		НаименованиеВБазе = Стр.Наименование;
		НаименованиеВБазе = СтрЗаменить(НаименованиеВБазе, "ё", "е");
		НаименованиеВБазе = СтрЗаменить(НаименованиеВБазе, "й", "и");
		Стр.Наименование = НаименованиеВБазе;
	КонецЦикла;
	
	СтрВБазе = ТЗ.Найти(НаименованиеДляПоиска, "Наименование");
	Если  СтрВБазе <> неопределено Тогда 
		Возврат СтрВБазе.Ссылка;
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

// установка сведений о районе по умолчанию
&НаСервере
Процедура УстановитьСведенияОРайоне(Город, Район, АО, Метро)
	
	СведенияОРайоне = "";
	
	Если АО <> "" Тогда
		мАО = СокрЛП(СтрЗаменить(АО,"административный",""));
		мАО = СокрЛП(СтрЗаменить(мАО,"округ",""));
		АдминистративныйОкругВБазе = Справочники.АдминистративныеОкруга.НайтиПоНаименованию(мАО);
		Если не ЗначениеЗаполнено(АдминистративныйОкругВБазе) Тогда 
			АдминистративныйОкругВБазе = НайтиСправочникВБазе("АдминистративныеОкруга", мАО);
		КонецЕсли;
		
		//+++ AK suvv 2018.09.07 ИП-00019759
		Если НЕ ЗначениеЗаполнено(АдминистративныйОкругВБазе) Тогда
			//АдминистративныйОкругВБазе = СоздатьНовоеСведениеОРайоне("АдминистративныйОкруг", мАО, Город);
			АдминистративныйОкругВБазе = ПредопределенноеЗначение("Справочник.АдминистративныеОкруга.ПустаяСсылка");
		КонецЕсли;
		//--- AK suvv
		Объект.АдминистративныйОкруг = АдминистративныйОкругВБазе;
		СведенияОРайоне = АО + ", ";	
		
	КонецЕсли;
	
	Если Район <> "" Тогда
		мРайон = Лев(СокрЛП(СтрЗаменить(Район,"район","")),25);
		РайонВБазе = Справочники.Районы.НайтиПоНаименованию(мРайон);
		Если не ЗначениеЗаполнено(РайонВБазе) Тогда 
			РайонВБазе = НайтиСправочникВБазе("Районы", мРайон);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РайонВБазе) Тогда
			//Возможно другой порядок слов. Попробуем найти
			Запрос = Новый Запрос;
			ТекстЗапроса =  "ВЫБРАТЬ
			|	Районы.Ссылка
			|ИЗ
			|	Справочник.Районы КАК Районы";
			Запрос.Текст = ТекстЗапроса + " ГДЕ Районы.Наименование ПОДОБНО ""%" 
			+ СтрЗаменить(СокрЛП(СтрЗаменить(Район,"район",""))," ","%"" И Районы.Наименование ПОДОБНО ""%")
			+ "%"""; 
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() = 1 Тогда
				РайонВБазе = Рез[0].Ссылка;
			Иначе
				//+++ AK suvv 2018.09.07 ИП-00019759	
				//	РайонВБазе = СоздатьНовоеСведениеОРайоне("Район", мРайон, Город, АдминистративныйОкругВБазе);
			    РайонВБазе = ПредопределенноеЗначение("Справочник.Районы.ПустаяСсылка");
			    //--- AK suvv
			КонецЕсли;
		КонецЕсли;
		
		Объект.Район = РайонВБазе;
		СведенияОРайоне = СведенияОРайоне + Район + ". ";
		
	КонецЕсли;
	
	Если Метро <> "" И Объект.Регион.Код = 77 Тогда
		СведенияОРайоне = СведенияОРайоне+Метро;
		мМетро = СокрЛП(СтрЗаменить(Метро,"метро",""));
		мМетро = СокрЛП(СтрЗаменить(мМетро,"станция",""));
		МетроВБазе = Справочники.СтанцииМетро.НайтиПоНаименованию(СокрЛП(СтрЗаменить(мМетро,"метро","")));
		Если не ЗначениеЗаполнено(МетроВБазе) Тогда 
			МетроВБазе = НайтиСправочникВБазе("СтанцииМетро", мМетро);
		КонецЕсли;
		Если не ЗначениеЗаполнено(МетроВБазе) Тогда 
			МетроВБазе = СоздатьНовоеСведениеОРайоне("Метро", мМетро);
		КонецЕсли;	
		СтанцииМетро.Очистить();
		СтрокаСтМетро = СтанцииМетро.Добавить();
		СтрокаСтМетро.Метро = МетроВБазе;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСведенияОРайонеПоГороду()
		
	Если Объект.Город.Наименование = "Зеленоград" Тогда 
		Объект.АдминистративныйОкруг = Справочники.АдминистративныеОкруга.НайтиПоНаименованию("Зеленоград");
		Объект.Район = Справочники.Районы.НайтиПоНаименованию("Зеленоград"); 
	Иначе
		Объект.АдминистративныйОкруг = Справочники.АдминистративныеОкруга.ПустаяСсылка();
		Объект.Район = Справочники.Районы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// установка адреса структурной единицы по умолчанию
&НаКлиенте
Процедура УстановитьАдрес()
	
	Объект.Адрес = "" + ТипУлицы + " " + Объект.Улица + ", д. " + Объект.Дом + Объект.КорпусСтроения; 
	
КонецПроцедуры

// установка наименование структурное единицы по умолчанию
&НаСервере
Функция УстановитьНаименование(КодДляНаименования)
		
	Если (СокрЛП(Объект.Улица)= "" или СокрЛП(Объект.Дом)= "") 
	//+++ AK suvv 2018.10.02 ИП-00020007
	и Объект.ТипРозничнойТочки <> ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Вкусомат")
	//--- AK suvv
	Тогда
		Возврат "";
	КонецЕсли;
	
	Город = "";
	
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		Город = СтрЗаменить(Объект.Город.Наименование, "г. ", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГородСокрНаименование) И НЕ Город = "Москва" Тогда
		ОбозначениеГород = ГородСокрНаименование + "_";	
	Иначе	
		Если Город = "Москва" или Город="" Тогда
			ОбозначениеГород = ""
		Иначе
			ОбозначениеГород = Лев(Город,3) + "_";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
		ОбозначениеУлица = Объект.УлицаСокрНаименование;	
	Иначе	
		ОбозначениеУлица = УлицаБезТипа(Объект.Улица);
	КонецЕсли;
	
	//+++ AK suvv 17.05.2018 ИП-00018244
	//Наименование = Формат(КодДляНаименования, "ЧГ=0") + ?(Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин"), "М", "") + "_" + ОбозначениеГород + ОбозначениеУлица + ПервыеЦифры(Объект.Дом);
	//+++АК MOSD 2018.11.19 ИП-00020456
	ПрефиксНаименования = "";
	Если Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Магазин") Тогда
		ПрефиксНаименования = "М";
	ИначеЕсли Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Микромаркет") Тогда
		ПрефиксНаименования = "МТ";
	КонецЕсли;
	Наименование = ПрефиксНаименования + "_" + СокрЛП(ОбозначениеГород) + СокрЛП(ОбозначениеУлица) + СокрЛП(ПервыеЦифры(Объект.Дом));
	//---АК MOSD 
	//--- AK suvv	
	Возврат Наименование;
	
КонецФункции

// получение временного кода для новой структурной единицы
&НаСервере
Функция ПолучитьНовыйВременныйКод()
	
	НовыйВременныйКод = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СтруктурныеЕдиницы.ВременныйКод, 0)) КАК ВременныйКод
	|ИЗ
	|	РегистрСведений.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ВременныйКод <> 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		НовыйВременныйКод = ?(Выборка.ВременныйКод = null, 0, Выборка.ВременныйКод) + 1;
	Иначе
		НовыйВременныйКод = 1;
	КонецЕсли;
	
	Возврат НовыйВременныйКод;
	
КонецФункции

&НаСервере
Функция ПодборЦФОПоПользователямЦФО(Сотрудник)
	
	ВозвращаемаяЦФО = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПользователиПоЦФОСрезПоследних.ЦФО
	|ИЗ
	|	РегистрСведений.ПользователиПоЦФО.СрезПоследних КАК ПользователиПоЦФОСрезПоследних
	|ГДЕ
	|	ПользователиПоЦФОСрезПоследних.Сотрудник.ФизЛицо = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		ВозвращаемаяЦФО = Выборка.Следующий().ЦФО; 
	КонецЕсли;
	
	Возврат	ВозвращаемаяЦФО;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПерезаполненииЦФО(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ЦФОПередачи = ПодборЦФОПоПользователямЦФО(Объект.ПомощникУправляющего);
	
КонецПроцедуры

// удаление записей о обишках при заполнении текущей записи 
// из связанного справочника "Ошибки заполнения структурных единиц"
&НаСервере
Процедура УдалитьСтарыеКомментарииОбОшибках()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОшибкиЗаполненияСтруктурныхЕдиниц.Ссылка
	|ИЗ
	|	Справочник.ОшибкиЗаполненияСтруктурныхЕдиниц КАК ОшибкиЗаполненияСтруктурныхЕдиниц
	|ГДЕ
	|	ОшибкиЗаполненияСтруктурныхЕдиниц.КодСтруктурнойЕдиницы = &КодСтруктурнойЕдиницы";
	Запрос.УстановитьПараметр("КодСтруктурнойЕдиницы", Объект.ВременныйКод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементСправочникаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ЭлементСправочникаОбъект.Удалить();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// получение наименования улицы без типа
&НаСервере
Функция УлицаБезТипа(Улица)
	
	Результат = "";
	ТекстОбозначения = "аллея, бульвар, линия, набережная, переулок, площадь, проезд, просек, проспект, спуск, тупик, улица, шоссе";
	НеОтображать = "улица, переулок";
	Слова = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Улица, " ");
	Для Каждого Слово из Слова Цикл
		Если Найти(ТекстОбозначения, НРег(Слово)) = 0 Тогда
			Результат = Результат + Слово;
		ИначеЕсли Найти(НеОтображать, НРег(Слово)) = 0 Тогда
			Результат = Результат + ТРег(Слово);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// получение сокращенного наименования улицы по подобию
&НаСервере
Процедура ПолучитьУлицаСокрНаименование(УлицаДляПоиска = Неопределено)
	
	Если УлицаДляПоиска = Неопределено Тогда
		УлицаДляПоиска = Объект.Улица;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УлицаДляПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.УлицаСокрНаименование КАК УлицаСокрНаименование,
		|	ВЫБОР
		|		КОГДА СтруктурныеЕдиницы.Город = &Город
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА СтруктурныеЕдиницы.Регион = &Регион
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РейтингПохожести
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Адрес ПОДОБНО &Улица
		|	И СтруктурныеЕдиницы.УлицаСокрНаименование <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	РейтингПохожести УБЫВ";
		Запрос.УстановитьПараметр("Город", Объект.Город);
		Запрос.УстановитьПараметр("Регион", Объект.Регион);
		Запрос.УстановитьПараметр("Улица","%" + УлицаДляПоиска + "%");
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Объект.УлицаСокрНаименование = "";
		Иначе
			РезультатПоиска = Рез.Выгрузить();
			Объект.УлицаСокрНаименование = РезультатПоиска[0].УлицаСокрНаименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// обновление данных и видимости реквизита "Сокр. наименования улицы"
&НаКлиенте
Процедура ОбновитьУлицаСокрНаименование()
	
	Если ЗначениеЗаполнено(Объект.Улица) Тогда
		
		ПолучитьУлицаСокрНаименование(УлицаБезТипа(Объект.Улица));
		
		Если НЕ ЗначениеЗаполнено(Объект.УлицаСокрНаименование) Тогда
			Элементы.УлицаСокрНаименование.Видимость	= Истина;
			Объект.УлицаСокрНаименование = Объект.Улица;
		Иначе
			Элементы.УлицаСокрНаименование.Видимость	= Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.УлицаСокрНаименование.Видимость	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

// пересчет значения реквизита "Общая стоимость" 
&НаКлиенте
Процедура ПересчитатьОбщуюСтоимость()
	
	Объект.ОбщаяСтоимость = Объект.ГенПодряд + Объект.СтоимостьКатегорииПодсобногоПомещения*Объект.ПлощадьПодсобныхПомещений + Объект.СтоимостьКатегории*Объект.ТорговаяПлощадь;	
	
КонецПроцедуры

//+++ AK GREK 10.07.2018 ИП-00018854  
&НаСервере
Процедура РассчитатьПлощадьНеиспользуемыхПомещений()
	Объект.ПлощадьНеиспользуемая = Объект.ФактическаяПлощадь - Объект.ТорговаяПлощадь - Объект.ПлощадьПодсобныхПомещений - Объект.ПлощадьСубаренды;
КонецПроцедуры


// изменение доступности и видимости полей и кнопок при изменении статуса структурной единицы
&НаКлиенте
Процедура ПриИзмененииСтатуса()
	
	Если не ЗначениеЗаполнено(Объект.Статус) или 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаУтверждении") и не ТекПользовательАкцептант Тогда 
		Элементы.СписокДействий.Видимость = Ложь;
	Иначе
		Элементы.СписокДействий.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.Новый") Тогда 
		Элементы.Статус.ЦветТекста = Новый Цвет(139, 134, 130);
		Если не ТекПользовательАкцептант Тогда  
			Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаУтверждение.Видимость = Истина; 
			Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаИсправление.Видимость = Ложь;
			Элементы.СписокДействий.ПодчиненныеЭлементы.ПодтвердитьИСоздать.Видимость    = Ложь;
			Элементы.СписокДействий.ПодчиненныеЭлементы.ОтменитьСоздание.Видимость       = Истина;
		Иначе
			Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаУтверждение.Видимость = Истина; 
			Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаИсправление.Видимость = Истина;
			Элементы.СписокДействий.ПодчиненныеЭлементы.ПодтвердитьИСоздать.Видимость    = Истина;
			Элементы.СписокДействий.ПодчиненныеЭлементы.ОтменитьСоздание.Видимость       = Истина;
		КонецЕсли;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаУтверждении") Тогда 
		Элементы.Статус.ЦветТекста = Новый Цвет(0, 186, 233);
		Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаУтверждение.Видимость = Ложь;
		Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаИсправление.Видимость = Истина;
		Элементы.СписокДействий.ПодчиненныеЭлементы.ПодтвердитьИСоздать.Видимость    = Истина;
		Элементы.СписокДействий.ПодчиненныеЭлементы.ОтменитьСоздание.Видимость       = Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаИсправлении") Тогда 
		Элементы.Статус.ЦветТекста = Новый Цвет(255, 174, 181);
		Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаУтверждение.Видимость = Истина;
		Элементы.СписокДействий.ПодчиненныеЭлементы.ОтправитьНаИсправление.Видимость = Ложь;
		Элементы.СписокДействий.ПодчиненныеЭлементы.ПодтвердитьИСоздать.Видимость    = Ложь;
		Элементы.СписокДействий.ПодчиненныеЭлементы.ОтменитьСоздание.Видимость       = Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.УтвержденаИСоздана") Тогда
		Элементы.Статус.ЦветТекста = Новый Цвет(74, 222, 148);
		Элементы.СписокДействий.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаУтверждении") Тогда	
		//+++ AK suvv 2018.10.01 ИП-00020004
		Если ТекПользовательАкцептант Тогда 
			Элементы.Наименование.ТолькоПросмотр = Ложь;
		Иначе
			ЭтаФорма.ТолькоПросмотр               = Истина;
			Элементы.ТипУлицы.ТолькоПросмотр      = Истина;
			Элементы.НомерКорпуса.ТолькоПросмотр  = Истина;
			Элементы.НомерСтроения.ТолькоПросмотр = Истина;
		КонецЕсли;
		//--- AK suvv
	КонецЕсли;
	
КонецПроцедуры

// получения списка акцептантов для выполнения рассылки на утверждение создания торговой точки
&НаСервере
Функция ПолучитьИнфоАкцептантов()
	
	МассивАкцептантовСЭлПочтой = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияДополнительныхПравПользователя.Пользователь.ФизЛицо КАК Акцептант
	|ПОМЕСТИТЬ ВТ_Акцептанты
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
	|ГДЕ
	|	ЗначенияДополнительныхПравПользователя.Значение = ИСТИНА
	|	И ЗначенияДополнительныхПравПользователя.Право = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПраваПользователей.АкцептантПоСозданиюСЕ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Акцептанты.Акцептант,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК АдресЭлПочты
	|ИЗ
	|	ВТ_Акцептанты КАК ВТ_Акцептанты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ВТ_Акцептанты.Акцептант = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	ТаблицаАкцептантовСЭлПочтой = Запрос.Выполнить().Выгрузить();
	СоответствиеАкцептантПочта = Новый Соответствие;
	Для Каждого Стр из ТаблицаАкцептантовСЭлПочтой Цикл
		СоответствиеАкцептантПочта = Новый Соответствие;
		СоответствиеАкцептантПочта.Вставить(Стр.Акцептант, Стр.АдресЭлПочты);
		МассивАкцептантовСЭлПочтой.Добавить(СоответствиеАкцептантПочта);
	КонецЦикла;
	
	Возврат МассивАкцептантовСЭлПочтой;
	
КонецФункции

//+++ AK suvv 23.04.2018 ИП-00018266
&НаСервере
Функция НайтиБлижайшуюТочкуСПохожимиКоординатами()
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(БлизкиеТочки.Выгрузить());
	
	тОтбор = Построитель.Отбор.Добавить("Расстояние");
	тОтбор.ВидСравнения = ВидСравнения.Меньше;
	тОтбор.Значение = 100;
	тОтбор.Использование = Истина;
	
	Построитель.Выполнить();
	ТабРезультат = Построитель.Результат.Выгрузить();
	
	Если ТабРезультат.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции //---AK suvv

&НаСервере
Функция ПолучитьНастройкиОткрытияМагазинов() 
	
	МассивРеквизитовКонтрольЗаполнения = Новый Массив;
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	//+++ AK suvv 2018.09.05 ИП-00019700
	Запрос.Текст = Справочники.СтруктурныеЕдиницы.ПолучитьТекстЗапросаНастройкиОткрытияМагазина();
	//--- AK suvv
	Запрос.УстановитьПараметр("ВидНастройки",           ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина.КонтрольЗаполнения"));
	Запрос.УстановитьПараметр("ВидНастройки2",          ПредопределенноеЗначение("Перечисление.ВидыНастроекОткрытияМагазина.КонтрольЗаполненияДляВсехЗаИсключением"));
	Запрос.УстановитьПараметр("ИмяПользователя",        ТекПользователь.Наименование);
	Запрос.УстановитьПараметр("ФизлицоТекПользователя", ТекПользователь.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	НастройкиОткрытияМагазинов = РезультатЗапроса.Выгрузить();
	
	Для Каждого НастройкаОткрытия из НастройкиОткрытияМагазинов Цикл
		Имя = НастройкаОткрытия.НастраеваемыйОбъект;
		Попытка
			Если НЕ ЗначениеЗаполнено(Объект[Имя]) Тогда
				МассивРеквизитовКонтрольЗаполнения.Добавить(Имя);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивРеквизитовКонтрольЗаполнения;
	
КонецФункции

#КонецОбласти

#Область РаботаСЯндексКартами

&НаСервере
Функция ОпределитьКоординатыБезОтображенияФормы()
	
	Если НЕ ЗначениеЗаполнено(Объект.Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоординатыОпределены = Ложь;
	
	Попытка
		СтрокаКоординат = "";
		WinHttp = ПолучитьГеокодерЯндекс();
		ЭлементыАдреса = Новый Массив;
		КоординатыОпределены=ПолучитьСтрокуКоординат(WinHttp,"" + Объект.Город + " " +Объект.Адрес,СтрокаКоординат,ЭлементыАдреса);
		ответГород = ЭлементыАдреса[0];
		ответУлица = ЭлементыАдреса[1];
		ответДом = ЭлементыАдреса[2];
	Исключение
		Сообщить("Ошибка при определении координат: " + ОписаниеОшибки());
	КонецПопытки;
	
	Если КоординатыОпределены Тогда
		
		Если WinHttp = Неопределено Тогда
			WinHttp = ПолучитьГеокодерЯндекс();
		КонецЕсли;
		
		ответСервера      = ПолучитьСведенияПоКоординатам(WinHttp,СтрокаКоординат,"district");
		ответОкруг        = ПолучитьЗначениеКомпонента(ответСервера,"district");
		ответРайон        = ПолучитьЗначениеКомпонента(ответСервера,"district");
		ответСервера      = ПолучитьСведенияПоКоординатам(WinHttp,СтрокаКоординат,"metro");
		ответСтанцияМетро = ПолучитьЗначениеКомпонента(ответСервера,"metro");
		
		Рез = Новый Структура;
		Рез.Вставить("Город",               ответГород);
		Рез.Вставить("Дом",                 ответДом);
		Рез.Вставить("КоординатыОпределены",КоординатыОпределены);
		Рез.Вставить("Метро",               ответСтанцияМетро);
		Рез.Вставить("Округ",               ответОкруг);
		Рез.Вставить("Район",               ответРайон);
		Рез.Вставить("СтрокаКоординат",     СтрокаКоординат);
		Рез.Вставить("Улица",               ответУлица);
		
		Возврат Рез;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГеокодерЯндекс() Экспорт
	
	Попытка
		
		Сервис = "geocode-maps.yandex.ru";
		Порт = 443;
		
		WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		WinHttp.Option(2,"utf-8");
		WinHttp.Open("POST","https://geocode-maps.yandex.ru:443/1.x/",0);
		WinHttp.SetRequestHeader("Accept-Language", "ru");
		WinHttp.SetRequestHeader("Accept-Charset","utf-8");
		WinHttp.setRequestHeader("Content-Language", "ru");
		WinHttp.setRequestHeader("Content-Charset", "utf-8");
		WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
		
		Возврат WinHttp;
		
	Исключение	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция Координаты41(СтрокаКоординат, Реверс = Ложь) Экспорт
	
	Поз = Найти(СтрокаКоординат,",");
	Если Поз = 0 тогда
		Поз = Найти(СтрокаКоординат," ");
	КонецЕсли;        		
	
	Если Поз = 0 тогда
		Возврат "";
	КонецЕсли;
	
	К1 = лев(сокрлп(Лев(СтрокаКоординат,Поз-1)),20);
	К2 = лев(сокрлп(Сред(СтрокаКоординат,Поз+1)),20);
	
	Если Реверс Тогда
		Возврат К2+","+К1;
	Иначе
		Возврат К1+","+К2;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьТекстПоТэгу(ИсхСтрока,Тэг,Очистить=Ложь)
	КС = СтрДлина(Тэг);
	П1=найти(ИсхСтрока,"<"+Тэг+">");
	П2=найти(ИсхСтрока,"</"+Тэг+">");
	Если П1*П2=0 Тогда
		Результат = ""
	Иначе
		Результат = Сред(ИсхСтрока,П1+2+КС,П2-П1-2-КС)
	КонецЕсли;
	Если Очистить и Результат <>"" Тогда
		ИсхСтрока = Лев(ИсхСтрока,П1-1)+Сред(ИсхСтрока,П2+3+СтрДлина(Тэг))
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокуКоординат(WinHttp,Адрес,СтрокаКоординат,ЭлементыАдреса=Неопределено) экспорт
	WinHttp.Send("geocode="+Адрес);
	ОтветСервера = WinHttp.ResponseText();
	п1=найти(ОтветСервера,"<pos>");
	п2=найти(ОтветСервера,"</pos>");
	Если п1>0 и п2>п1 тогда
		СтрокаКоординат=Координаты41(сред(ОтветСервера,п1+5,п2-п1-5),Истина);
		Если Не ЭлементыАдреса = Неопределено Тогда
			ЭлементыАдреса.Очистить();
			ЭлементыАдреса.Добавить(ВернутьТекстПоТэгу(ОтветСервера,"LocalityName"));
			ЭлементыАдреса.Добавить(ВернутьТекстПоТэгу(ОтветСервера,"ThoroughfareName"));
			ЭлементыАдреса.Добавить(ВернутьТекстПоТэгу(ОтветСервера,"PremiseNumber"));
		КонецЕсли;
		Возврат НЕ ПустаяСтрока(СтрокаКоординат);
	иначе
		СтрокаКоординат="";
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияПоКоординатам(WinHTTP,Координаты,Тип)Экспорт
	WinHttp.Send("geocode="+Координаты41(Координаты,Истина)+"&kind="+Тип);
	ОтветСервера = WinHttp.ResponseText();
	Возврат ответСервера
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКомпонента(ответСервера,Тип)Экспорт
	Попытка
		Компонент=ВернутьТекстПоТэгу(ОтветСервера,"Component",Истина);
		Пока Компонент<>"" Цикл
			Если ВернутьТекстПоТэгу(Компонент,"kind")=Тип Тогда
				Возврат ВернутьТекстПоТэгу(Компонент,"name")
			КонецЕсли;
			Компонент=ВернутьТекстПоТэгу(ОтветСервера,"Component",Истина);
		КонецЦикла;
		Возврат ""
	Исключение
		Возврат ""
	КонецПопытки
КонецФункции

&НаКлиенте
Процедура ОбработатьГеоЛокацию(ВыбранноеЗначение)
	Если ВыбранноеЗначение.КоординатыОпределены Тогда
		К = Найти(ВыбранноеЗначение.СтрокаКоординат, ",");
		Объект.КоординатыШирота		= Число(Лев(ВыбранноеЗначение.СтрокаКоординат , К - 1));
		Объект.КоординатыДолгота	= Число(Сред(ВыбранноеЗначение.СтрокаКоординат, К + 1));
		Город 	= ВыбранноеЗначение.Город;
		Если УлицаБезТипа(ВыбранноеЗначение.Улица)<>Объект.Улица или ВыбранноеЗначение.Дом<>Объект.Дом Тогда
			Если Объект.Улица = "" и Объект.Дом = "" Тогда
				Объект.Улица = УлицаБезТипа(ВыбранноеЗначение.Улица);
				Объект.Дом 	= ВыбранноеЗначение.Дом;
			КонецЕсли
		КонецЕсли;
		Если Строка(Объект.Регион) = "Москва" Тогда
			Район = ВыбранноеЗначение.Район;
			АО = ВыбранноеЗначение.Округ;
			Если Найти(Район, "округ") > 0 Тогда
				Район = ВыбранноеЗначение.Округ;
				АО = ВыбранноеЗначение.Район;
			КонецЕсли;
			Метро = ВыбранноеЗначение.Метро;
			УстановитьСведенияОРайоне(Город, Район, АО, Метро);
		КонецЕсли;
		//Если Объект.Наименование = "<Не установлено>" Или СтрДлина(Объект.Наименование)<9 Тогда
		Объект.Наименование = УстановитьНаименование(Объект.ВременныйКод); 
		Если Объект.Наименование = "" Тогда 
			ПоказатьПредупреждение(, "Для выполнения команды должны быть выбраны значения Улица и Дом");
		КонецЕсли;
		//КонецЕсли;
		ПроверитьСовпадениеКоординат(Неопределено);
	КонецЕсли;
	
	Если Строка(Объект.Регион) = "Москва" Тогда
		//+++ AK suvv 2018.09.07 ИП-00019759
		Если ТекПользовательАкцептант Тогда 
			Если НЕ ЗначениеЗаполнено(Объект.Район) Тогда
				Сообщить("Не определен район! Укажите его вручную");
				Элементы.Группа17.Видимость = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.АдминистративныйОкруг) Тогда
				Сообщить("Не определен административный округ! Укажите его вручную");
				Элементы.Группа17.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		//--- AK suvv
		Если СтанцииМетро.Количество() = 0 ТОгда
			Сообщить("Не определены ближайшие станции метро! Укажите их вручную");
			Элементы.Группа19.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НовыйЭлемент = ?(Объект.ВременныйКод = 0, Истина, Ложь);
	Если НовыйЭлемент Тогда
		ЗаполнитьНовыйОбъект();
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	//+++ AK suvv 21.05.2018 ИП-00018555
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	//--- AK suvv 
	ТекПользовательАкцептант = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.АкцептантПоСозданиюСЕ, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаИсправлении") Тогда 
		УстановитьПодсказкиДляПолей();
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьПолейФормы();
	ПриИзмененииСтатуса();
	
	ВосстановитьЗначенияПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Объект.ВременныйКод = 0 Тогда
		УдалитьВсеЗагруженныеФайлы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+++ AK suvv 04.04.2018 ИП-00018266
	Если Объект.ВременныйКод = 0 Тогда 
		Если НайтиБлижайшуюТочкуСПохожимиКоординатами() Тогда 
			Ответ = Вопрос("Торговая точка с похожими координатами уже создана! Продолжить сохранение?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//--- AK suvv
	
	ЗаполнитьПустыеПоляПоУмолчанию();
	
	Отказ = не ПроверкаЗаполненияПройдена();
	
	Если НЕ ЗначениеЗаполнено(Объект.КоординатыДолгота) И НЕ ЗначениеЗаполнено(Объект.КоординатыШирота) Тогда
		Рез = ОпределитьКоординатыБезОтображенияФормы();
		Если Рез <> Неопределено Тогда
			ОбработатьГеоЛокацию(Рез);
		Иначе
			Отказ = Истина;
			Сообщить("Не указаны координаты точки!");
		КонецЕсли;
	КонецЕсли;
	
	МассивНезаполненныхРеквизитов = ПолучитьНастройкиОткрытияМагазинов();
	Для Каждого НезаполненныйРеквизит из МассивНезаполненныхРеквизитов Цикл
		Сообщить("Реквизит " + НезаполненныйРеквизит + " не заполнен!");
	КонецЦикла;
	Если МассивНезаполненныхРеквизитов.Количество() > 0 Тогда 	
		Отказ = Истина;	
	КонецЕсли;
	
	НовыйЭлемент = ?(Объект.ВременныйКод = 0, Истина, Ложь);
	Если Отказ И (ПроверкаРоли("ПолныеПрава") ИЛИ НЕ НовыйЭлемент) Тогда
		Ответ = Вопрос("При проверке заполнения указаной информации обнаружены ошибки! Возможно нарушение процедуры создания новой торговой точки! Продолжить сохранение?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВременныйКод = 0 Тогда 
		Объект.ВременныйКод = ПолучитьНовыйВременныйКод();
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.Новый");
		ПриИзмененииСтатуса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗагрузитьДанныеВРеквизитыТипаХранилищеЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПриИзмененииСтатуса();
	Оповестить("Запись_СтруктурныеЕдиницы", ПараметрыЗаписи, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "Обработка.АК_ОтображениеНаКарте.Форма.Форма" Тогда
		ОбработатьГеоЛокацию(ВыбранноеЗначение);
		ОткрытаКарта = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		Если НЕ ЗначениеЗаполнено(ПолучитьРеквизитОбъекта(Объект.Город, "СокращенноеНаименование")) И НЕ ПолучитьРеквизитОбъекта(Объект.Город, "Код") = "0001" Тогда	   
			ГородСокрНаименование = Лев(Объект.Город,3);
			ГородСокрНаименованиеПриИзмененииНаСервере();
			Элементы.ГородСокрНаименование.Видимость = Истина; 
		Иначе
			Элементы.ГородСокрНаименование.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГородСокрНаименование.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьСведенияОРайонеПоГороду();
	
КонецПроцедуры

&НаСервере
Процедура ГородСокрНаименованиеПриИзмененииНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Объект.Город) Тогда
		ОбГород = Объект.Город.ПолучитьОбъект();
		ОбГород.СокращенноеНаименование = ГородСокрНаименование;
		ОбГород.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ГородСокрНаименованиеПриИзменении(Элемент)
	
	ГородСокрНаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУлицыПриИзменении(Элемент)
	
	УстановитьАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	
	ОбновитьУлицаСокрНаименование();
	
	УстановитьАдрес()
	
КонецПроцедуры

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	
	УстановитьАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКорпусаПриИзменении(Элемент)
	
	НомерСтроения = "";
	Объект.КорпусСтроения = " к. " + НомерКорпуса;
	УстановитьАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСтроенияПриИзменении(Элемент)
	
	НомерКорпуса = "";
	Объект.КорпусСтроения = " стр. " + НомерСтроения;
	УстановитьАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура КорпусСтроенияПриИзменении(Элемент)
	
	УстановитьАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРозничнойТочкиПриИзменении(Элемент)
	
	Если Объект.ТипРозничнойТочки = ПредопределенноеЗначение("Перечисление.ТипыРозничныхТочек.Избенка") Тогда
		Объект.Активное = Истина;
		Объект.КоличествоПродавцов = 10;
		Объект.КоличествоПродавцовВВыходные = 10;
	Иначе
		Объект.Активное = Ложь;
		Объект.КоличествоПродавцов = 30;
		Объект.КоличествоПродавцовВВыходные = 30;
	КонецЕсли;
	
	//+++АК MOSD 2018.11.19 ИП-00020456
	Объект.Наименование = УстановитьНаименование(Объект.ВременныйКод); 	
	//---АК MOSD 
	
	 
КонецПроцедуры

&НаКлиенте
Процедура КтоОткрылНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДолжностей = Новый СписокЗначений;
	СписокДолжностей.Добавить("Управляющий по развитию","Управляющий по развитию");
	СписокДолжностей.Добавить("Менеджер по проекту","Менеджер по проекту");
	СписокДолжностей.Добавить("Управляющий отдела развития","Управляющий отдела развития");
	СписокДолжностей.Добавить("Специалист по развитию","Специалист по развитию");
	СписокДолжностей.Добавить("Заместитель руководителя по строительству","Заместитель руководителя по строительству");
	СписокДолжностей.Добавить("Директор по развитию","Директор по развитию");
	
	ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", , Элемент);
	
	ЭлОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	ЭлОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлОтбор.ПравоеЗначение = СписокДолжностей;
	ЭлОтбор.Использование = Истина;	
	ЭлОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УправляющийРозницейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДолжностей = Новый СписокЗначений;
	СписокДолжностей.Добавить("Территориальный управляющий","Территориальный управляющий");
	//+++ AK suvv 19.06.2018 ИП-00018779
	СписокДолжностей.Добавить("Региональный территориальный управляющий", "Региональный территориальный управляющий");
	//--- AK suvv
	ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ,Элемент);
	
	ЭлОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	ЭлОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлОтбор.ПравоеЗначение = СписокДолжностей;
	ЭлОтбор.Использование = Истина;	
	ЭлОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

//--- AK suvv 17.08.2018 ИП-00019353
&НаКлиенте
Процедура РуководительПоСтроительствуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДолжностей = Новый СписокЗначений;
	СписокДолжностей.Добавить("Руководитель по строительству","Руководитель по строительству");
	
	ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ,Элемент);
	
	ЭлОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбор.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Должность");
	ЭлОтбор.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлОтбор.ПравоеЗначение   = СписокДолжностей;
	ЭлОтбор.Использование    = Истина;	
	ЭлОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ФормаВыбора.Открыть();
	
	//проверить на вебе
	
КонецПроцедуры  //--- AK suvv 

&НаКлиенте
Процедура БонусПоПередачеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.БонусПоПередаче) И ЗначениеЗаполнено(Объект.ДатаНачалаПередачи) Тогда
		Объект.ДатаОкончанияПередачи = Объект.ДатаНачалаПередачи + Объект.БонусПоПередаче.КоличествоДнейПередачи*24*3600;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборБонусаПоПередачеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> неопределено Тогда 
		Объект.БонусПоПередаче = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БонусПоПередачеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФиксНастройки = Новый НастройкиКомпоновкиДанных;
	Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Действует");
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Расно;
	Эл.ПравоеЗначение = Истина;
	Эл.Использование = Истина;
	Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	Если ЗначениеЗаполнено(Объект.МагазинПередачи) Тогда  
		Эл = ФиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипТочки");
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Эл.ПравоеЗначение = ПолучитьРеквизитОбъекта(Объект.МагазинПередачи, "ТипРозничнойТочки");
		Эл.Использование = Истина;
		Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксНастройки);		
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.БонусПоПередаче);
	
	ОповещениеОВыбореБонусаПоПерадаче = Новый ОписаниеОповещения("ВыборБонусаПоПередачеЗавершение", ЭтаФорма, неопределено);
	
	ОткрытьФорму("Справочник.БонусыПоРаскруткеТТ.ФормаВыбора", ПараметрыФормы, Элемент,,,, ОповещениеОВыбореБонусаПоПерадаче);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПередачиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.БонусПоПередаче) Тогда
		Объект.ДатаОкончанияПередачи = Объект.ДатаНачалаПередачи+Объект.БонусПоПередаче.КоличествоДнейПередачи*24*3600
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КтоПередаетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДолжностей = Новый СписокЗначений;
	СписокДолжностей.Добавить("Менеджер по проекту","Менеджер по проекту");
	СписокДолжностей.Добавить("Заместитель руководителя по строительству","Заместитель руководителя по строительству");
	СписокДолжностей.Добавить("Руководитель по строительству","Руководитель по строительству");
	
	ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора",,Элемент);
	
	ЭлОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность");
	ЭлОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлОтбор.ПравоеЗначение = СписокДолжностей;
	ЭлОтбор.Использование = Истина;	
	ЭлОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникУправляющегоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЦФОПередачи) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПерезаполненииЦФО", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перезаполнить ЦФО передачи?';"), Режим, 0);
		
	Иначе
		Объект.ЦФОПередачи = ПодборЦФОПоПользователямЦФО(Объект.ПомощникУправляющего);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадьПриИзменении(Элемент)
	
	РассчитатьПлощадьНеиспользуемыхПомещений();
	ПересчитатьОбщуюСтоимость();
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ТорговаяПлощадь");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяПлощадьПриИзменении(Элемент)
	
	РассчитатьПлощадьНеиспользуемыхПомещений();
	ПересчитатьОбщуюСтоимость();
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ФактическаяПлощадь");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьПодсобныхПомещенийПриИзменении(Элемент)
	
	РассчитатьПлощадьНеиспользуемыхПомещений();
	ПересчитатьОбщуюСтоимость();
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ПлощадьПодсобныхПомещений");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv

КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКатегорииПриИзменении(Элемент)
	
	ПересчитатьОбщуюСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКатегорииПодсобногоПомещенияПриИзменении(Элемент)
	
	ПересчитатьОбщуюСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ГенПодрядПриИзменении(Элемент)
	
	ПересчитатьОбщуюСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяПлощадьПриИзменении(Элемент)
	
	Объект.ПлощадьПодсобныхПомещений = Объект.ОбщаяПлощадь - Объект.ТорговаяПлощадь;
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ОбщаяПлощадь");
	ИзменениеАвтораРеквизита("ПлощадьПодсобныхПомещений");
	//--- AK suvv

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыПриИзменении(Элемент)
	
	Если Число(Объект.ДопРасходы) > 100000 Тогда 
		Объект.ДопРасходы = 100000;
		Сообщить("Для дополнительных расходов установлен лимит 100 000.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлРасстановкиПромоутеровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ФайлРасстановкиПромоутеров.Пустая()Тогда
		
		СтандартнаяОбработка = Ложь;
		
		#Если ВебКлиент Тогда 	
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлРасстановкиПромоутеровВеб", ЭтаФорма);
			ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .png)|*.pdf;*.jpeg;*.jpg;*.png";
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
			
		#Иначе
			
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .png)|*.pdf;*.jpeg;*.jpg;*.png";
			Если ДиалогВыбораФайла.Выбрать() Тогда
				Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
				РасширениеФайла = Сред(ДиалогВыбораФайла.ПолноеИмяФайла, Найти(ДиалогВыбораФайла.ПолноеИмяФайла,".")+1);
				Объект.ФайлРасстановкиПромоутеров = ЗагрузитьФайлРасстановкиПромоутеровНаСервере(Файл,"Схема расстановки промоутеров", РасширениеФайла, Ложь);			
			КонецЕсли;
			
		#КонецЕсли
		
		Если не Объект.ФайлРасстановкиПромоутеров.Пустая() Тогда 
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлРасстановкиПромоутеровОчистка(Элемент, СтандартнаяОбработка)
	
	//ФайлКУдалению = Объект.ФайлРасстановкиПромоутеров;
	//Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
	//	Попытка
	//		ФайлУдалениеНаСервере(ФайлКУдалению);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры 

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура КатегорияПодсобноеПомещениеПриИзменении(Элемент)
	
	Объект.КатегорияПодсобногоПомещенияАвтор = ТекПользователь;
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 21.05.2018 ИП-00018555
&НаКлиенте
Процедура КатегорияПриИзменении(Элемент)
	
	Объект.КатегорияАвтор = ТекПользователь;
	
КонецПроцедуры //--- AK suvv

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФотоДоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ФотоПослеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйФайл = Элемент.ТекущиеДанные.Файл;
	Если ВыбранныйФайл <> неопределено и ВыбранныйФайл <> ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ПоказатьЗначение(, ВыбранныйФайл);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИУдалениеФайлов 

&НаСервере
Процедура ФайлУдалениеНаСервере(ФайлКУдалению)
	
	ФайлКУдалениюОбъект = ФайлКУдалению.ПолучитьОбъект();
	
	Попытка 
		ФайлКУдалениюОбъект.Удалить();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьФайлРасстановкиПромоутеровНаСервере(ТелоФайла,Имя, РасширениеФайла,ЭтоВебКлиент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоВебКлиент Тогда 
		ТелоФайла = ПолучитьИзВременногоХранилища(ТелоФайла);	
	КонецЕсли;
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = РасширениеФайла;
	Файл.Наименование = Имя;
	Файл.ИмяПодкаталога = "Схема растановки промоутеров";
	Файл.Записать();
	ТелоФайла.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Файл.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлРасстановкиПромоутеровВеб(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ПомещенныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.Имя;
		РасширениеФайла = Сред(ИмяФайла, Найти(ИмяФайла, ".") + 1);
		Адрес = ПомещенныйФайл.Хранение;
		Объект.ФайлРасстановкиПромоутеров = ЗагрузитьФайлРасстановкиПромоутеровНаСервере(Адрес, "Схема расстановки промоутеров", РасширениеФайла, Истина);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОпределитьКоординаты(Команда)
	
	Если СокрЛП(Объект.Адрес) = "" Тогда
		Сообщить("Не заполнен адрес, невозможно определить кооординаты");
		Возврат
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	ПараметрыПодбора.Вставить("Режим"				, "РежимАдресКонтрагента");
	ПараметрыПодбора.Вставить("Режим2"				, "Диалог");
	ПараметрыПодбора.Вставить("Наименование"		, Объект.Наименование);
	ПараметрыПодбора.Вставить("СтрокаКоординат"		, "");
	ПараметрыПодбора.Вставить("ОпределитьРасположение",Истина);
	ПараметрыПодбора.Вставить("КоординатыОпределены", Ложь);
	
	Если НЕ ПустаяСтрока(Объект.Адрес) Тогда
		АдресДляОпределенияКоординат = Объект.Адрес;
		Если Не Объект.Город.Пустая() Тогда
			Если Не ПолучитьРеквизитОбъекта(Объект.Город, "Код") = "0001" Тогда
				АдресДляОпределенияКоординат = ПолучитьРеквизитОбъекта(Объект.Город, "Наименование") + ", " + АдресДляОпределенияКоординат;	
			КонецЕсли;
		Иначе
			АдресДляОпределенияКоординат = ПолучитьРеквизитОбъекта(Объект.Регион, "Наименование") +", " + АдресДляОпределенияКоординат;
		КонецЕсли;
		ПараметрыПодбора.Вставить("Адрес", АдресДляОпределенияКоординат);
	КонецЕсли;
	
	ОткрытаКарта = Истина;
	ОткрытьФорму("Обработка.АК_ОтображениеНаКарте.Форма", ПараметрыПодбора, ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСовпадениеКоординатНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта"	, Объект.КоординатыШирота);
	Запрос.УстановитьПараметр("Долгота"	, Объект.КоординатыДолгота);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	(СтруктурныеЕдиницы.КоординатыШирота - &Широта) * (СтруктурныеЕдиницы.КоординатыШирота - &Широта) + (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) * (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) КАК Расстояние,
	|	СтруктурныеЕдиницы.Наименование,
	|	СтруктурныеЕдиницы.Город,
	|	СтруктурныеЕдиницы.Адрес КАК Адрес,
	|	СтруктурныеЕдиницы.КоординатыШирота КАК Широта,
	|	СтруктурныеЕдиницы.КоординатыДолгота КАК Долгота
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	(СтруктурныеЕдиницы.КоординатыШирота - &Широта) * (СтруктурныеЕдиницы.КоординатыШирота - &Широта) + (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) * (СтруктурныеЕдиницы.КоординатыДолгота - &Долгота) < 0.00001
	|
	|УПОРЯДОЧИТЬ ПО
	|	Расстояние";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//+++ AK suvv 04.04.2018 ИП-00018266
	Коэф = 0.0174532925;
	Для Каждого Стр из ТЗ Цикл
		d = cos(Стр.Широта*Коэф) * cos(Объект.КоординатыШирота*Коэф) * cos(Стр.Долгота*Коэф - Объект.КоординатыДолгота*Коэф) + sin(Стр.Широта*Коэф) * sin(Объект.КоординатыШирота* Коэф);
		Стр.Расстояние = 6371 * acos(?(d>1,1,d))*1000;
	КонецЦикла;
	//--- AK suvv 
	
	БлизкиеТочки.Загрузить(ТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовпадениеКоординат(Команда)
	
	ПроверитьСовпадениеКоординатНаСервере();
	
	Элементы.БлизкиеТочки.Видимость = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение = "Другое", ЭтоВебКлиент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоВебКлиент Тогда 
		ФайлСкана = ПолучитьИзВременногоХранилища(ФайлСкана);	
	КонецЕсли;
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = СтруктураФайла.Расширение;
	Файл.Наименование = СтруктураФайла.Наименование;
	Файл.ИмяПодкаталога = "ПроизвольныеФайлыМагазинов";
	Файл.Записать();
	
	ИмяФайлаДляОбъекта = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка);
	ФайлСкана.Записать(ИмяФайлаДляОбъекта);
	
	НоваяЗаписьТЧФайлы = Файлы.Добавить();
	НоваяЗаписьТЧФайлы.Файл = Файл.Ссылка;
	НоваяЗаписьТЧФайлы.Назначение = Назначение;
	НоваяЗаписьТЧФайлы.ДатаДобавления = ТекущаяДата();
	НоваяЗаписьТЧФайлы.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроизвольныйФайл(Команда)
	
	Если Команда.Имя = "ЗагрузитьПроизвольныйФайл" Тогда
		Назначение = "Сканы";
	ИначеЕсли Команда.Имя = "ЗагрузитьФотоДо" Тогда
		Назначение = "ФотоДо";
	ИначеЕсли Команда.Имя = "ЗагрузитьФотоПосле" Тогда
		Назначение = "ФотоПосле";
	Иначе
		Назначение = "Другое";
	КонецЕсли;
	
	#Если ВебКлиент Тогда 
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("Назначение", Назначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПроизвольныйФайлЗавершение", ЭтаФорма, СтруктураДополнительныхПараметров);
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .png)|*.pdf;*.jpeg;*.jpg;*.png";
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Форматы (.pdf, .jpeg, .jpg, .rar)|*.pdf;*.jpeg;*.jpg;*.rar";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ФайлСкана = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			СтруктураФайла = РазобратьИмяФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
			ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение, Ложь);
			Элементы.РазослатьУведомления.Видимость = Истина;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПроизвольныеФайлыНаСервере(ФайлСкана, ИмяФайла, Назначение)
	
	СтруктураФайла = РазобратьИмяФайла(ИмяФайла);
	ЗагрузитьПроизвольныйФайлНаСервере(ФайлСкана, СтруктураФайла, Назначение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроизвольныйФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ПомещенныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	Назначение = ДополнительныеПараметры.Назначение;
	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.Имя;
		РасширениеФайла = Сред(ИмяФайла, Найти(ИмяФайла, ".") + 1);
		Адрес = ПомещенныйФайл.Хранение;
		СоздатьПроизвольныеФайлыНаСервере(Адрес, ИмяФайла, Назначение);	
	КонецЦикла;
	Элементы.РазослатьУведомления.Видимость = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Путь = Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(ФайлКУдалению.Ссылка);
	КодФайла = ФайлКУдалению.Код;
	УдалитьФайлы(Путь);
	
	МассивСтрокКУдалению = Файлы.НайтиСтроки(Новый Структура("Файл", ФайлКУдалению));
	Для Каждого СтрокаКУдалению из МассивСтрокКУдалению Цикл
		Файлы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ФайлКУдалениюОбъект = ФайлКУдалению.ПолучитьОбъект();
	Попытка
		ФайлКУдалениюОбъект.Удалить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПроизвольныйФайл(Команда)
	
	Если Команда.Имя = "УдалитьПроизвольныйФайл" Тогда
		ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	ИначеЕсли Команда.Имя = "УдалитьФотоДо" Тогда
		ТекДанные = Элементы.ФотоДо.ТекущиеДанные;
	ИначеЕсли Команда.Имя = "УдалитьФотоПосле" Тогда
		ТекДанные = Элементы.ФотоПосле.ТекущиеДанные;
	ИначеЕсли Команда.Имя = "УдалитьСхемуРасстановкиПредварительно" Тогда
		ТекДанные = Элементы.ФайлыРасстановкиОборудованияПредварительно.ТекущиеДанные;		
	ИначеЕсли Команда.Имя = "УдалитьСхемуРасстановкиОкончательно" Тогда
		ТекДанные = Элементы.ФайлыРасстановкиОборудованияОкончательно.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекДанные <> неопределено Тогда 
		ФайлКУдалению = ТекДанные.Файл;
		Если ЗначениеЗаполнено(ФайлКУдалению) Тогда
			УдалитьПроизвольныйФайлНаСервере(ФайлКУдалению);
		КонецЕсли;
	Иначе
		Сообщить("Выберите файл для удаления.");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФайлРасстановки(Команда)
	
	Если Команда.Имя = "ЗагрузитьСхемуРасстановкиПредварительно" Тогда
		Назначение = "СхРасНач";
		НаименованиеФайлаРасстановки = "Расстановка оборудования начальный";
	ИначеЕсли Команда.Имя = "ЗагрузитьСхемуРасстановкиОкончательно" Тогда
		Назначение = "СхРасКон";
		НаименованиеФайлаРасстановки = "Расстановка оборудования";
	Иначе
		Назначение = "Другое";
		НаименованиеФайлаРасстановки = "Расстановка оборудования (прочее)";
	КонецЕсли;
	
	#Если ВебКлиент Тогда 	
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("Наименование", НаименованиеФайлаРасстановки);
		СтруктураДополнительныхПараметров.Вставить("Назначение", Назначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлРасстановкиВеб", ЭтаФорма, СтруктураДополнительныхПараметров);
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Если ДиалогВыбораФайла.Выбрать() Тогда
			Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
			//+++AK GREK 02.07.2018 ИП-00018854
			СтруктураФайла = РазобратьИмяФайла(ДиалогВыбораФайла.ПолноеИмяФайла); 
			НаименованиеФайлаРасстановки = СтруктураФайла.Наименование; 
			//---AK
			ЗагрузитьФайлРасстановкиНаСервере(Файл, НаименованиеФайлаРасстановки, Прав(ДиалогВыбораФайла.ПолноеИмяФайла,3),Назначение , Ложь);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлРасстановкиНаСервере(ТелоФайла, Имя, Расширение = "DWG", Назначение, ЭтоВебКлиент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоВебКлиент Тогда 
		ТелоФайла = ПолучитьИзВременногоХранилища(ТелоФайла);	
	КонецЕсли;
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = Расширение;
	Файл.Наименование = Имя;
	Файл.ИмяПодкаталога = "Расстановка оборудования";
	Файл.Записать();
	ТелоФайла.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	
	НоваяЗаписьТЧФайлы = Файлы.Добавить();
	НоваяЗаписьТЧФайлы.Файл = Файл.Ссылка;
	НоваяЗаписьТЧФайлы.Назначение = Назначение;
	НоваяЗаписьТЧФайлы.ДатаДобавления = ТекущаяДата();
	НоваяЗаписьТЧФайлы.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьФайлРасстановкиВБазеНаСервере(Файл, ИмяФайла, НаименованиеФайлаВБазе, Назначение, Расширение)
	
	РасширениеФайла = Сред(ИмяФайла, Найти(ИмяФайла, ".") + 1);
	Если НаименованиеФайлаВБазе = "Расстановка оборудования начальный" Тогда
		ЗагрузитьФайлРасстановкиНаСервере(Файл, НаименованиеФайлаВБазе, Расширение, Назначение, Истина);
	ИначеЕсли НаименованиеФайлаВБазе = "Расстановка оборудования" Тогда 
		ЗагрузитьФайлРасстановкиНаСервере(Файл, НаименованиеФайлаВБазе, Расширение, Назначение, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлРасстановкиВеб(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ПомещенныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеФайлаВБазе = ДополнительныеПараметры.Наименование;
	Назначение = ДополнительныеПараметры.Назначение;
	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.Имя;
		Расширение = Прав(ИмяФайла,3);
		Адрес = ПомещенныйФайл.Хранение;
		СоздатьФайлРасстановкиВБазеНаСервере(Адрес, ИмяФайла, НаименованиеФайлаВБазе, Назначение, Расширение);
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Функция ПолучитьРасширениеФайла(ИмяФайла)
	
	Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяФайла,".");
	Если ПодСтроки.Количество()<2 Тогда
		Возврат "";
	Иначе
		Возврат Подстроки[Подстроки.Количество()-1];
	КонецЕсли;
	
КонецФункции	

&НаСервере
Функция ЗагрузитьСхемуНаСервере(Изображение,Расширение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = Расширение;
	Файл.Наименование = "Схема." + Расширение;
	Файл.ИмяПодкаталога = "Заявки на открытие";
	Файл.Записать();
	Изображение.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Файл.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСхему(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлСхемы = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		Расширение = ПолучитьРасширениеФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
		Объект.СхемаРаботыЗазывалы=ЗагрузитьСхемуНаСервере(ФайлСхемы, Расширение);
		Элементы.СхемаРаботыЗазывалы.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПутьКФайлу(Файл)
	
	Возврат Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСхему(Команда)
	
	ЗапуститьПриложение(ПутьКФайлу(Объект.СхемаРаботыЗазывалы));
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьУведомленияОДобавленииСкана()
	
	Массив = новый Массив;
	МассивПолучателей = новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа В(&Группа)";
	
	СписокГрупп = Новый Массив;
	СписокГрупп.Добавить(ПредопределенноеЗначение("Справочник.АК_ГруппыРассылки.Список3"));
	
	Запрос.УстановитьПараметр("Группа", СписокГрупп);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Емейл");
	
	Получатели = Новый Массив;
	
	Для каждого Емайл из Результат цикл
		Если УправлениеЭлектроннойПочтой.EmailValid(Емайл) тогда
			Получатели.Добавить(Емайл)
		КонецЕсли;	
	КонецЦикла;	
	
	Массив.Добавить(Получатели);
	
	Текст = "Объекту " + Объект.Наименование + " добавлен скан договора аренды.";
	
	Массив.Добавить(Текст);
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", "no-reply@vkusvill.ru");
	КонецЕсли;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема 			= "Добавлен скан договора аренды";
	Письмо.Отправитель 		= УчетнаяЗапись.Логин;
	Письмо.ИмяОтправителя 	= УчетнаяЗапись.Логин;
	
	Для каждого Получателя из Получатели цикл
		Письмо.Получатели.Добавить(Получателя);	
	КонецЦикла;	
	
	ОтборСканыДоговора = Новый Структура;
	ОтборСканыДоговора.Вставить("Назначение", "Сканы");
	СтрокиТЗФайлыСканы = Файлы.НайтиСтроки(ОтборСканыДоговора);
	
	Для каждого Стр из СтрокиТЗФайлыСканы цикл
		Письмо.Вложения.Добавить(Стр.Файл.Значение);
	КонецЦикла;		
	
	ТекстПисьма = Письмо.Тексты.Добавить();
	ТекстПисьма.Текст = Текст;
	
	Почта.Послать(Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура РазослатьУведомленияНаСервере() Экспорт
	
	ОтправитьУведомленияОДобавленииСкана()
	
КонецПроцедуры

&НаКлиенте
Функция  РазослатьУведомления(Команда)
	
	ПодключитьОбработчикОжидания("РазослатьУведомленияНаСервере", 0.1, Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьСканДоговораНаСервере(ФайлСкана)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.Расширение = "PDF";
	Файл.Наименование = "Открытие магазина, договор";
	Файл.ИмяПодкаталога = "Заявки на открытие";
	Файл.Записать();
	ФайлСкана.Записать(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Файл.Ссылка));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Файл.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСканДоговора(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "*.pdf|*.pdf";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлСкана = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		ДоговорКонтрагента.СканДоговора = ЗагрузитьСканДоговораНаСервере(ФайлСкана);
		Элементы.ДоговорКонтрагентаСканДоговора.Видимость = Истина;
		Элементы.РазослатьУведомления.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ЗапуститьПриложение(ПутьКФайлу(ДоговорКонтрагента.СканДоговора));
	
КонецПроцедуры

//+++ AK suvv 23.04.2018 ИП-00018374
&НаСервере 
Процедура СформироватьЗаписиВРегистреМестаХраненияМагазинов(НоваяСЕ)
	
	НЗ = РегистрыСведений.МестаХраненияВМагазинах.СоздатьНаборЗаписей();
	НЗ.Отбор.Магазин.Установить(НоваяСЕ);
	НЗ.Прочитать();
	
	СписокКодов = Новый СписокЗначений;
	СписокКодов.Добавить("Z");
	СписокКодов.Добавить("M");
	СписокКодов.Добавить("K");
	СписокКодов.Добавить("S");
	СписокКодов.Добавить("F");
	СписокКодов.Добавить("R");
	СписокКодов.Добавить("N");
	СписокКодов.Добавить("T");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МестаВыкладки.Ссылка КАК МестоВыкладки
	|ИЗ
	|	Справочник.МестаВыкладки КАК МестаВыкладки
	|ГДЕ
	|	НЕ МестаВыкладки.ПометкаУдаления
	|	И МестаВыкладки.КодДляДатчиков В(&СписокКодов)
	|	И МестаВыкладки.ЭтоГруппа";
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовЗапись = НЗ.Добавить();
		НовЗапись.Магазин = НоваяСЕ;
		НовЗапись.МестоВыкладки = Выборка.МестоВыкладки;
		НовЗапись.Хватает = Истина;
	КонецЦикла;
	
	Попытка 
		НЗ.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры //--- AK suvv

//+++ AK suvv 12.07.2018 ИП-00019053
&НаСервере
Процедура СохранитьИсториюИзмененияРеквизитовСЕ(НоваяСЕ)
	
	РеквизитыДляИсторииИзменений = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент().ПолучитьРеквизитыДляИсторииИзменений();
	
	НЗ = РегистрыСведений.ИсторияИзмененияРеквизитовСЕ.СоздатьНаборЗаписей();
	НЗ.Отбор.СтруктурнаяЕдиница.Установить(НоваяСЕ);
	НЗ.Прочитать();
	
	Для Каждого НазваниеРеквизита из РеквизитыДляИсторииИзменений Цикл
		//+++ AK suvv 2018.09.05 ИП-00019700
		НазваниеАвтораИзменений = НазваниеРеквизита + "Автор";
		Если Объект.Свойство(НазваниеАвтораИзменений) Тогда
			НовЗапись = НЗ.Добавить();
			НовЗапись.СтруктурнаяЕдиница = НоваяСЕ;
			НовЗапись.Реквизит           = НазваниеРеквизита; 
			НовЗапись.АвторИзменений     = Объект[НазваниеАвтораИзменений];
			НовЗапись.ДатаИзменений      = ТекущаяДата();
		КонецЕсли;
		//--- AK suvv
	КонецЦикла;
	НЗ.Записать();
	
КонецПроцедуры //--- AK suvv

//+++ AK suvv 2018.10.05 ИП-00019795
&НаСервере
Процедура СохранитьЗначенияСвойствСЕ(НоваяСЕ)
	
	ИзмененныеСвойства = Новый ТаблицаЗначений;
	ИзмененныеСвойства.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СвойстваСтруктурныхЕдиниц"));
	ИзмененныеСвойства.Колонки.Добавить("Значение");
	
	Для Каждого Эл из Элементы.ГруппаСвойстваСЕ.ПодчиненныеЭлементы Цикл		
		Свойство = ПланыВидовХарактеристик.СвойстваСтруктурныхЕдиниц[Эл.Имя];	
		НовСтрока = ИзмененныеСвойства.Добавить();
		НовСтрока.Свойство = Свойство;
		НовСтрока.Значение = Объект[Эл.Имя];
	КонецЦикла;
	
	НоваяТТОбъект = НоваяСЕ.ПолучитьОбъект();
	НоваяТТОбъект.СохранитьЗначенияСвойствСЕ(ИзмененныеСвойства);
	
КонецПроцедуры //--- AK suvv

&НаСервере
Процедура ПослеЗаписиНоваяСЕ(НоваяСЕ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НЗЗаявкиНаОткрытиеМагазина = РегистрыСведений.ЗаявкиНаОткрытиеМагазина.СоздатьНаборЗаписей();
	НЗЗаявкиНаОткрытиеМагазина.Отбор.Магазин.Установить(НоваяСЕ);
	НЗЗаявкиНаОткрытиеМагазина.Прочитать();
	Если НЗЗаявкиНаОткрытиеМагазина.Количество() = 0 Тогда 
		НоваяЗаписьРС = НЗЗаявкиНаОткрытиеМагазина.Добавить();
		НоваяЗаписьРС.Магазин = НоваяСЕ;
		НоваяЗаписьРС.Этап = 1; //переделать! 
		НоваяЗаписьРС.КлючиОтПомещения = Объект.КлючиОтПомещения; 
		НоваяЗаписьРС.ЭлектроэнергииПоДоговору = Объект.ЭлектроэнергииПоДоговору;
		НоваяЗаписьРС.ЭлектроэнергииПоФакту = Объект.ЭлектроэнергииПоФакту;
		НоваяЗаписьРС.СхемаРаботыЗазывалы = Объект.СхемаРаботыЗазывалы;
	Иначе
		ЗаписьРС = НЗЗаявкиНаОткрытиеМагазина[0];
		ЗаписьРС.Магазин = НоваяСЕ;
		ЗаписьРС.Этап = 1; //переделать! 
		ЗаписьРС.КлючиОтПомещения = Объект.КлючиОтПомещения; 
		ЗаписьРС.ЭлектроэнергииПоДоговору = Объект.ЭлектроэнергииПоДоговору;
		ЗаписьРС.ЭлектроэнергииПоФакту = Объект.ЭлектроэнергииПоФакту;
		ЗаписьРС.СхемаРаботыЗазывалы = Объект.СхемаРаботыЗазывалы;
	КонецЕсли;
	НЗЗаявкиНаОткрытиеМагазина.Записать();
	
	ТекЦФО = ЦФОпоТТ(НоваяСЕ);	
	ОбновленаЗаписьЦФО = Ложь;
	ОбновленаЗаписьЦФОПередачи = Ложь;
	Пока ТекЦФО.Следующий()Цикл
		Если ТекЦФО.Развитие Тогда
			Если ТекЦФО.ЦФО <> Объект.ЦФО или ТекЦФО.Организация <> Объект.Организация Тогда
				ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
				ЗаписьЦФО.Период=ТекущаяДАта();
				ЗаписьЦФО.СтруктурнаяЕдиница = НоваяСЕ;
				ЗаписьЦФО.Организация = Объект.Организация;
				ЗаписьЦФО.ЦФО = Объект.ЦФО;
				ЗаписьЦФО.Записать();
				ОбновленаЗаписьЦФО = Истина;	
			КонецЕсли;
		Иначе
			Если ТекЦФО.ЦФО<>Объект.ЦФОПередачи Тогда
				ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
				ЗаписьЦФО.Период=Объект.ДатаОкончанияПередачи;
				ЗаписьЦФО.СтруктурнаяЕдиница = НоваяСЕ;
				ЗаписьЦФО.Организация = Объект.Организация;
				ЗаписьЦФО.ЦФО = Объект.ЦФОПередачи;
				ЗаписьЦФО.Записать();
				ОбновленаЗаписьЦФОПередачи = Истина;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбновленаЗаписьЦФО И ЗначениеЗаполнено(Объект.ЦФО) Тогда
		ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаписьЦФО.Период = ТекущаяДата();
		ЗаписьЦФО.СтруктурнаяЕдиница =НоваяСЕ;
		ЗаписьЦФО.Организация = Объект.Организация;
		ЗаписьЦФО.ЦФО = Объект.ЦФО;
		ЗаписьЦФО.Записать();
	КонецЕсли;
	Если Не ОбновленаЗаписьЦФОПередачи И ЗначениеЗаполнено(Объект.ЦФОПередачи) Тогда
		ЗаписьЦФО = РегистрыСведений.ЦФОСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаписьЦФО.Период = Объект.ДатаОкончанияПередачи;
		ЗаписьЦФО.СтруктурнаяЕдиница = НоваяСЕ;
		ЗаписьЦФО.Организация = Объект.Организация;
		ЗаписьЦФО.ЦФО = Объект.ЦФОПередачи;
		ЗаписьЦФО.Записать();
	КонецЕсли;
	
	КолПр = РегистрыСведений.КоличествоПродавцовНаТочках.ПолучитьПоследнее(,Новый Структура("ТорговаяТочка",НоваяСЕ));
	Если КолПр.ВрабочиеДни<>Объект.КоличествоПродавцов Или КолПр.ВВыходныеДни<>Объект.КоличествоПродавцовВвыходные Тогда
		ЗаписьКолПр = РегистрыСведений.КоличествоПродавцовНаТочках.СоздатьМенеджерЗаписи();
		ЗАписьКолПр.ТорговаяТочка = НоваяСЕ;
		ЗаписьКолПр.ВРабочиеДни = Объект.КоличествоПродавцов;
		ЗаписьКолПр.ВВыходныеДни = Объект.КоличествоПродавцовВВыходные;
		ЗаписьКолПр.Период = ТекущаяДата();
		ЗаписьКолПр.Записать()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""SpecialistPoOtkrytiyu"" КАК РольИД
	|ПОМЕСТИТЬ ТипыРолей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""UpravlyayushchiiPoRoznice""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""PomoshnikPoRaskrutke""
	//--- AK suvv 17.08.2018 ИП-00019353
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""RukovoditelPoStroitelstvu""
	//--- AK suvv
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыРолей.РольИД КАК ТипРолиID,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	ЕСТЬNULL(РолиПользователейСоставРоли.Сотрудник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	ТипыРолей КАК ТипыРолей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, Объект = &Магазин) КАК СоответствиеОбъектРольСрезПоследних
	|		ПО ТипыРолей.РольИД = СоответствиеОбъектРольСрезПоследних.ТипРолиID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО (СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка)
	|			И (РолиПользователейСоставРоли.НомерСтроки = 1)";
	Запрос.УстановитьПараметр("Магазин",НоваяСЕ);
	ТекРоли = Запрос.Выполнить().Выбрать();
	ТЗРоли = Новый ТаблицаЗначений;
	ТЗРоли.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТЗРоли.Колонки.Добавить("ТипРоли",Новый ОписаниеТипов("Строка"));
	Пока ТекРоли.Следующий()Цикл
		Если ТекРоли.ТипРолиID = "SpecialistPoOtkrytiyu" Тогда
			Если Объект.КтоОткрыл <>ТекРоли.Сотрудник и НЕ Объект.КтоОткрыл.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = Объект.КтоОткрыл;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		ИначеЕсли ТекРоли.ТипРолиID = "UpravlyayushchiiPoRoznice" Тогда
			Если Объект.УправляющийРозницей <>ТекРоли.Сотрудник и НЕ Объект.УправляющийРозницей.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = Объект.УправляющийРозницей;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
			//Объект.УправляющийРозницей = ТекРоли.Сотрудник;
		ИначеЕсли ТекРоли.ТипРолиID = "PomoshnikPoRaskrutke" Тогда
			Если Объект.ПомощникПоРаскрутке <>ТекРоли.Сотрудник и НЕ Объект.ПомощникПоРаскрутке.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = Объект.ПомощникПоРаскрутке;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		//+++ AK suvv 17.08.2018 ИП-00019353
		ИначеЕсли ТекРоли.ТипРолиID = "RukovoditelPoStroitelstvu" Тогда
			Если Объект.РуководительПоСтроительству <> ТекРоли.Сотрудник и НЕ Объект.РуководительПоСтроительству.Пустая() Тогда
				СтрокаРоль = ТЗРоли.Добавить();
				СтрокаРоль.Сотрудник = Объект.РуководительПоСтроительству;
				СтрокаРоль.ТипРоли = ТекРоли.ТипРолиID;
			КонецЕсли;
		//--- AK suvv
		КонецЕсли
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Роли",ТЗРоли);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Роли.Сотрудник КАК Сотрудник,
	|	Роли.ТипРоли
	|ПОМЕСТИТЬ ВТРоли
	|ИЗ
	|	&Роли КАК Роли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВложенныйЗапрос.Роль, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК Роль,
	|	ВТРоли.Сотрудник,
	|	ТипыРолейПользователя.Ссылка КАК ТипРоли,
	|	ТипыРолейПользователя.Наименование КАК НаименованиеРоли,
	|	ВЫРАЗИТЬ(ВТРоли.Сотрудник КАК Справочник.ФизическиеЛица).Наименование КАК ФИО,
	|	ВТРоли.ТипРоли КАК ТипРолиID
	|ИЗ
	|	ВТРоли КАК ВТРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыРолейПользователя КАК ТипыРолейПользователя
	|		ПО ((ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50))) = ТипыРолейПользователя.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РолиПользователейТипыРолей.Ссылка) КАК Роль,
	|			ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50)) КАК ТипРоли,
	|			РолиПользователейСоставРоли.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТРоли КАК ВТРоли
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|				ПО ((ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50))) = РолиПользователейТипыРолей.ТипРоли.Код)
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|				ПО (РолиПользователейТипыРолей.Ссылка = РолиПользователейСоставРоли.Ссылка)
	|					И (РолиПользователейСоставРоли.Сотрудник = ВТРоли.Сотрудник)
	|					И (РолиПользователейСоставРоли.НомерСтроки = 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(ВТРоли.ТипРоли КАК СТРОКА(50)),
	|			РолиПользователейСоставРоли.Сотрудник) КАК ВложенныйЗапрос
	|		ПО ВТРоли.Сотрудник = ВложенныйЗапрос.Сотрудник
	|			И Выразить(ВТРоли.ТипРоли Как Строка(50))= ВложенныйЗапрос.ТипРоли";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		ЗаписьРоль = РегистрыСведений.СоответствиеОбъектРоль.СоздатьМенеджерЗаписи();
		ЗаписьРоль.Период=ТекущаяДата();
		ЗаписьРоль.Объект=НоваяСЕ;
		ЗаписьРоль.ТипРоли = Выборка.ТипРоли;
		Если Выборка.Роль.Пустая() Тогда
			НоваяРоль = Справочники.РолиПользователей.СоздатьЭлемент();
			НоваяРоль.Наименование=Выборка.НаименованиеРоли+" "+Выборка.ФИО;
			НСтрока=НоваяРоль.ТипыРолей.Добавить();
			НСтрока.ТипРоли=Выборка.ТипРоли;
			НСтрока = НоваяРоль.СоставРоли.Добавить();
			НСтрока.Сотрудник=Выборка.Сотрудник;
			НоваяРоль.Записать();
			ЗаписьРоль.РольПользователя = НоваяРоль.Ссылка;
		Иначе
			ЗаписьРоль.РольПользователя=Выборка.Роль;
		КонецЕсли;
		ЗаписьРоль.ТипРолиID=Выборка.ТипРолиID;
		Попытка
			ЗаписьРоль.Записать();
		Исключение
			Сообщить("Не удалось записать данные о роли "+Выборка.ТипРоли)
		КонецПопытки;
	КонецЦикла;
	
	
	СсылкаОА = Справочники.ОбъектыАренды.НайтиПоРеквизиту("СтруктурнаяЕдиница",НоваяСЕ);
	Если СсылкаОА.Пустая() Тогда
		ОбъектАренды = Справочники.ОбъектыАренды.СоздатьЭлемент();
		ОбъектАренды.СтруктурнаяЕдиница = НоваяСЕ;
		Если ОбъектАренды.Наименование = "" Тогда
			ОбъектАренды.Наименование = НоваяСЕ.Наименование;
		КонецЕсли;
		ОбъектАренды.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кв.м");
		ОбъектАренды.Записать();
		СсылкаОА = ОбъектАренды.Ссылка;
	КонецЕсли;
	
	//+++ AK suvv 10.04.2018 ИП-00018374
	СформироватьЗаписиВРегистреМестаХраненияМагазинов(НоваяСЕ);
	//--- AK suvv
	
	//+++ AK suvv 12.07.2018 ИП-00019053
	СохранитьИсториюИзмененияРеквизитовСЕ(НоваяСЕ);
	//--- AK suvv
	
	//+++ AK suvv 2018.10.05 ИП-00019795
	СохранитьЗначенияСвойствСЕ(НоваяСЕ);
	//--- AK suvv
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция СоздатьТорговуюТочкуНаСервере()
	
	НоваяСЕ = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
	//+++ AK suvv 17.05.2018 ИП-00018710
	РеквизитыРССтруктурныеЕдиницы = Метаданные.РегистрыСведений.СтруктурныеЕдиницы.Ресурсы;
	Для Каждого Реквизит из РеквизитыРССтруктурныеЕдиницы Цикл 
		Если НоваяСЕ.Метаданные().Реквизиты.Найти(Реквизит.Имя) <> неопределено Тогда 
			НоваяСЕ[Реквизит.Имя] = Объект[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;	
	//--- AK suvv 
	НоваяСЕ.НомерТочки = Справочники.СтруктурныеЕдиницы.НомерДляНовойТочки();
	//+++ AK suvv 10.05.2018 ИП-00018244
	//НоваяСЕ.Наименование = УстановитьНаименование(НоваяСЕ.НомерТочки);
	НоваяСЕ.Наименование = Формат(НоваяСЕ.НомерТочки, "ЧГ=0") + Объект.Наименование;
	//--- AK suvv
	НоваяСЕ.АдресSkype = Формат(НоваяСЕ.НомерТочки,"ЧН=; ЧГ=0")+"@p01.vkusvill.ru"; 
	//+++ AK suvv 13.07.2018 б.н. по просьбе Павла Скворцова
	//НоваяСЕ.АдресЭлектроннойПочты = Формат(НоваяСЕ.НомерТочки,"ЧН=; ЧГ=0")+"@vkusvill.ru";
	НоваяСЕ.АдресЭлектроннойПочты = Формат(НоваяСЕ.НомерТочки,"ЧН=; ЧГ=0")+"@p01.vkusvill.ru";
	//--- AK suvv
	
	ТЧФайлы = НоваяСЕ.Файлы;
	ТЧФайлы.Загрузить(Файлы.Выгрузить());
	
	ТЧСтанцииМетро = НоваяСЕ.СтанцииМетро;
	ТЧСтанцииМетро.Загрузить(СтанцииМетро.Выгрузить());
	
	Попытка
		НоваяСЕ.Записать();
	Исключение
		Возврат неопределено;
	КонецПопытки;
	
	ПослеЗаписиНоваяСЕ(НоваяСЕ.Ссылка); 
	
	Возврат НоваяСЕ.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ДействиеПодтвердитьИСоздать(Команда)
	
	НоваяТорговаяТочка = СоздатьТорговуюТочкуНаСервере();
	
	Если ЗначениеЗаполнено(НоваяТорговаяТочка) Тогда 
		// изменим статус структурной единицы 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.УтвержденаИСоздана");
		ЗаписатьОбъект();
		ПриИзмененииСтатуса();
		Оповестить("Запись_СтруктурныеЕдиницы", Новый Структура, Объект);
		Сообщить("Структурная единица успешно создана.");	
		
		// выполним рассылку оповещений 
		РассылкаПисемПрошлаУспешно = ВыполнитьРассылкуПисем(НоваяТорговаяТочка);
		Если РассылкаПисемПрошлаУспешно Тогда 
			Сообщить("Рассылка оповещений о создании новой торговой точки выполнена успешно.");
		Иначе
			Сообщить("При рассылке оповещений о создании новой торговой точки возникли ошибки. Повторите отправку вручную.");
		КонецЕсли;
		
		Если Объект.ЗапросПодтвержденияПередачи Тогда
			ОтправитьЗапросНаПодтверждениеПередачи();	
		КонецЕсли;
					
		//+++ AK suvv 21.05.2018 ИП-00018555
		ВыполнитьРассылкуОбИзмененииРеквизитов(НоваяТорговаяТочка);
		//--- AK suvv
		
	Иначе
		Сообщить("Не удалось создать новую торговую точку!");
	КонецЕсли;
	
КонецПроцедуры

//+++ AK suvv 21.05.2018 ИП-00018555
&НаСервере
Процедура ВыполнитьРассылкуОбИзмененииРеквизитов(НоваяТорговаяТочка)
	
	НоваяТТОбъект = НоваяТорговаяТочка.ПолучитьОбъект();
	Если Объект.Категория <> "" или Объект.КатегорияПодсобноеПомещение <> "" Тогда 
		НоваяТТОбъект.РассылкаПриИзмененииКатегорииСЕ(НоваяТорговаяТочка);
	КонецЕсли;
	
	Если Объект.ФактическаяДатаПередачи <> Дата(0001,01,01) Тогда 
		НоваяТТОбъект.РассылкаОПередачеПомещения(НоваяТорговаяТочка);
	КонецЕсли;
	
	Если Объект.ФактическаяПлощадь <> 0 или Объект.ОбщаяПлощадь <> 0 Тогда  
		НоваяТТОбъект.РассылкаОРазницеВПлощадях(НоваяТорговаяТочка);
	КонецЕсли;
	
	НоваяТТОбъект.РассылкаИсходногоФайлаРасстановки(НоваяТорговаяТочка, Объект.КтоОткрыл, Объект.УправляющийРозницей, Объект.РуководительПоСтроительству, Файлы);	
	НоваяТТОбъект.РассылкаФайлаРасстановки(НоваяТорговаяТочка, Объект.КтоОткрыл, Объект.УправляющийРозницей, Объект.РуководительПоСтроительству, Файлы);
	
КонецПроцедуры //--- AK suvv

&НаКлиенте
Процедура ПослеОтправкиНаИсправление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаИсправлении");
		ЗаписатьОбъект();
		Оповестить("Запись_СтруктурныеЕдиницы", Новый Структура, Объект);
		ПриИзмененииСтатуса();
		Сообщить("Письмо с описанием ошибок заполнения успешно отправлено.");
	ИначеЕсли Результат = Ложь Тогда
		Сообщить("Не удалось отправить письмо с описанием ошибок при заполнении!");
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ДействиеОтправитьНаИсправление(Команда)
	
	Если ЭтаФорма.Модифицированность = Истина Тогда 
		
		Ответ = Вопрос("Перед отправкой информации о наличии ошибок при создании торговой точки необходимо соханить изменения. Записать торговую точку?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ЗаписатьОбъект();
			Оповестить("Запись_СтруктурныеЕдиницы", Новый Структура, Объект);
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОЗакрытииФормыОшибкиЗаполнения = Новый ОписаниеОповещения("ПослеОтправкиНаИсправление", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.СтруктурныеЕдиницы.Форма.ФормаОшибкиЗаполнения", , ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОповещениеОЗакрытииФормыОшибкиЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДействиеОтменитьСозданиеНаСервере()
	
	УдалитьВсеЗагруженныеФайлы();
	УдалитьСтарыеКомментарииОбОшибках();
	Запись = РегистрыСведений.СтруктурныеЕдиницы.СоздатьМенеджерЗаписи();
	Запись.ВременныйКод = Объект.ВременныйКод;
	Запись.Прочитать();
	Запись.Удалить();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДействиеОтменитьСоздание(Команда)
	
	Ответ = Вопрос("Вы действительно хотите отменить создание торговой точки? Запись будет удалена безвозвратно.", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеОтменитьСозданиеНаСервере();
	ПараметрыЗаписи = Новый Структура;
	Оповестить("Запись_СтруктурныеЕдиницы", ПараметрыЗаписи, Объект);
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтправитьНаУтверждение(Команда)
	
	Если ЭтаФорма.Модифицированность = Истина Тогда 
		
		Ответ = Вопрос("Перед отправкой информации о торговой точке на утверждение необходимо соханить изменения. Записать торговую точку?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ЗаписатьОбъект();
			Оповестить("Запись_СтруктурныеЕдиницы", Новый Структура, Объект);
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСтарыеКомментарииОбОшибках();
	АкцептантыСЭлПочтой = ПолучитьИнфоАкцептантов();
	
	Если АкцептантыСЭлПочтой.Количество() = 0 Тогда
		Сообщить("Не удалось отправить письмо на утверждение создания торговой точки: не найдены действующие акцептанты!");
		Возврат;
	КонецЕсли;
	РезультатОтправки = ОтправкаНаУтверждение(АкцептантыСЭлПочтой);
	
	Если РезультатОтправки = "Успешно" Тогда 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСтруктурныхЕдиниц.НаУтверждении");
		ЗаписатьОбъект();
		Оповестить("Запись_СтруктурныеЕдиницы", Новый Структура, Объект);
		ПриИзмененииСтатуса();
		Сообщить("Письмо на утверждение успешно отправлено.");
	Иначе
		Сообщить("Не удалось отправить письмо на утверждение создания торговой точки!" + РезультатОтправки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Рассылка

&НаСервере
Функция ОтправкаНаУтверждение(АкцептантыСЭлПочтой)
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("Razvitie@vkusvill.ru");
	Почта         = Новый ИнтернетПочта;
	Профиль       = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	АдресМагазина = "" + Объект.Регион + ", " + Объект.Город + ", " + Объект.Адрес;		
	АвторПисьма = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
	Запрос.УстановитьПараметр("Объект", АвторПисьма);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Email = "";
	Телефон = "";
	
	Для Каждого Стр из Рез Цикл
		Если Стр.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда 
			Email = "Email " + СокрЛП(Стр.Представление);
		Иначе 
			Телефон = "Тел. " + СокрЛП(Стр.Представление);
		КонецЕсли;
	КонецЦикла;	
	
	НетОшибокПриОтправке = Истина;
	ТекстОшибки = "";
	Для Каждого СоответствиеАкцептантПочта из АкцептантыСЭлПочтой Цикл 
		Для Каждого Элемент из СоответствиеАкцептантПочта Цикл
			Акцептант = Элемент.Ключ;
			АдресЭлПочты = Элемент.Значение;
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Тема = "Заявка на открытие нового магазина ВВ: " + Объект.ВременныйКод + " " + АдресМагазина;
			Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
			Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
			ТекстПисьма = "
			|Уважаемый &Акцептант!
			|
			|Сообщаю Вам об открытии нового магазина ВВ по адресу: &НомерТочки &АдресМагазина
			|
			|Ориентировочная дата открытия &ДатаОткрытия
			|
			|Менеджер проекта: &МенеджерПроекта
			|&ИнформацияПоПлощадиПомещения
			//+++ AK suvv 2018.10.08 ИП-00020068
			|
			|Тип розничной точки: &ТипРозничнойТочки
			//--- AK suvv
			|Проверьте правильность заполнения данных и подтвердите создание нового магазина.
			|
			|С Уважением, &Автор &Email &Телефон";
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Акцептант",       Акцептант);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина",   АдресМагазина);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ДатаОткрытия",    Формат(Объект.ДатаОткрытия, "ДФ=dd.MM.yyyy"));
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", Объект.КтоОткрыл);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Автор",           АвторПисьма);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки",      Объект.ВременныйКод);	
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email",           Email);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон",         Телефон);
			//+++AK GREK 01.07.2018 ИП-00018854  
			Если ЗначениеЗаполнено(Объект.ТорговаяПлощадь) Тогда
				ОбщаяПлощадь = Объект.ПлощадьПодсобныхПомещений + Объект.ТорговаяПлощадь;
				ИнформацияПоТочке = "";
				Если Объект.Пекарня Тогда
					ИнформацияПоТочке = ИнформацияПоТочке + Символы.ПС + "Пекарня";
				КонецЕсли;
				Если Объект.ДетскийУголок Тогда
					ИнформацияПоТочке = ИнформацияПоТочке + Символы.ПС + "Детский уголок";
				КонецЕсли;
				Если Объект.Сокомат Тогда
					ИнформацияПоТочке = ИнформацияПоТочке + Символы.ПС + "Сокомат";
				КонецЕсли;
				Если Объект.НавигацияОчереди Тогда
					ИнформацияПоТочке = ИнформацияПоТочке + Символы.ПС + "Навигация очереди";
				КонецЕсли;
				Если Объект.Кофемашина Тогда
					ИнформацияПоТочке = ИнформацияПоТочке + Символы.ПС + "Кофемашина";
				КонецЕсли;
				Если Объект.МеловаяДоска Тогда
					ИнформацияПоТочке = ИнформацияПоТочке + Символы.ПС + "Меловая доска";
				КонецЕсли;
				Если ИнформацияПоТочке <> "" Тогда
					ИнформацияПоТочке = Символы.ПС + "В торговой точке будут размещены:" + ИнформацияПоТочке;
				КонецЕсли;
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИнформацияПоПлощадиПомещения"	 , Символы.ПС + "Общая площадь составляет " + ОбщаяПлощадь + ", в т.ч. торговая площадь " + Объект.ТорговаяПлощадь + Символы.ПС + ИнформацияПоТочке);
			Иначе
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИнформацияПоПлощадиПомещения"	 , "");
			КонецЕсли;
			//---AK
			//+++ AK suvv 2018.10.08 ИП-00020068
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", Объект.ТипРозничнойТочки);
			//--- AK suvv
			
			ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
			
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес = СокрЛП(АдресЭлПочты);
			
			Попытка
				Почта.Послать(Письмо);
			Исключение
				НетОшибокПриОтправке = Ложь;
				ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + ". " + Символы.ПС;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Если НетОшибокПриОтправке Тогда
		Возврат "Успешно";
	Иначе
		Возврат ТекстОшибки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьРассылкуПисем(НоваяСтруктурнаяЕдиница)
	
	ДанныеДляРассылки = Новый Структура;
	ДанныеДляРассылки.Вставить("АдресМагазина",         		"" + Объект.Регион + ", " + Объект.Город.ПолноеНаименование + ", " + Объект.Адрес);
	ДанныеДляРассылки.Вставить("ДатаОткрытия",          		Объект.ДатаОткрытия);
	ДанныеДляРассылки.Вставить("МенеджерПроекта",       		Объект.КтоОткрыл);	
	ДанныеДляРассылки.Вставить("КтоПередает",           		Объект.КтоПередает.Наименование);
	ДанныеДляРассылки.Вставить("КоличествоКасс",        		Объект.КоличествоКасс);
	ДанныеДляРассылки.Вставить("СуммаАрендыПостоянная", 		Объект.СуммаАрендыПостоянная);
	ДанныеДляРассылки.Вставить("СуммаАрендыПеременная", 		Объект.СуммаАрендыПеременная);
	ДанныеДляРассылки.Вставить("Файлы",                 		Файлы);
	ДанныеДляРассылки.Вставить("НомерТочки",            		НоваяСтруктурнаяЕдиница.НомерТочки);
	ДанныеДляРассылки.Вставить("Автор",                 		ПараметрыСеанса.ТекущийПользователь.ФизЛицо);
	ДанныеДляРассылки.Вставить("ПлощадьПодсобныхПомещений", 	Объект.ПлощадьПодсобныхПомещений);
	ДанныеДляРассылки.Вставить("ТорговаяПлощадь",               Объект.ТорговаяПлощадь);
	//+++ AK suvv 2018.09.05 ИП-00019700
	ДанныеДляРассылки.Вставить("ПлощадьСубаренды",              Объект.ПлощадьСубаренды);
	//--- AK suvv
	//+++ AK suvv 2018.10.08 ИП-00020068
	ДанныеДляРассылки.Вставить("ТипРозничнойТочки",             Объект.ТипРозничнойТочки);
	//--- AK suvv

	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки("Razvitie@vkusvill.ru");
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	РезультатРассылкиОбОткрытии = РассылкаИнформацииОПланируемомОткрытии(Почта, УчетнаяЗапись, ДанныеДляРассылки);
	Если РезультатРассылкиОбОткрытии = 0 Тогда 
		Сообщить("В группе рассылки ""Информирование о планируемом открытии"" не найдены актуальные получатели. Рассылка об открытии магазина не выполнена.");
	ИначеЕсли РезультатРассылкиОбОткрытии = 1 Тогда
		Сообщить("Рассылка о планируемом открытии магазина выполнена успешно.");
	Иначе
		Сообщить(РезультатРассылкиОбОткрытии);
	КонецЕсли;
	
	РезультатРассылкиСканов = РассылкаСканаДоговора(Почта, УчетнаяЗапись, ДанныеДляРассылки);
	Если РезультатРассылкиСканов = 0 Тогда 
		Сообщить("В группе рассылки ""Сканы договоров"" не найдены актуальные получатели. Рассылка сканов договоров не выполнена.");
	ИначеЕсли РезультатРассылкиСканов = 1 Тогда
		Сообщить("Рассылка сканов выполнена успешно.");
	Иначе
		Сообщить(РезультатРассылкиСканов);
	КонецЕсли;
	
	РезультатРассылкиМенеджерам = РассылкаИнформацииМенеджерамОтделаАренды(Почта, УчетнаяЗапись, ДанныеДляРассылки);
	Если РезультатРассылкиМенеджерам = 0 Тогда 
		Сообщить("В группе рассылки ""Менеджеры аренды"" не найдены актуальные получатели. Рассылка не выполнена.");
	ИначеЕсли РезультатРассылкиМенеджерам = 1 Тогда 
		Сообщить("Рассылка информации менеджерам аренды выполнена успешно.");
	Иначе
		Сообщить(РезультатРассылкиМенеджерам);
	КонецЕсли;
	
	РезультатРассылкиОКассах = 1;
	Если ЗначениеЗаполнено(Объект.КоличествоКасс) Тогда
		РезультатРассылкиОКассах = РассылкаПисемНаРегистрациюКасс(Почта, УчетнаяЗапись, ДанныеДляРассылки);
		Если РезультатРассылкиОКассах = 0 Тогда 
			Сообщить("В группе рассылки ""На регистрацию касс"" не найдены актуальные получатели. Рассылка не выполнена.");
		ИначеЕсли РезультатРассылкиОКассах = 1 Тогда 
			Сообщить("Рассылка писем на регистрацию касс выполнена успешно.");
		Иначе
			Сообщить(РезультатРассылкиОКассах);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатРассылкиОбОткрытии = 1 и РезультатРассылкиСканов = 1 и РезультатРассылкиМенеджерам = 1 и РезультатРассылкиОКассах = 1 Тогда  
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция РассылкаИнформацииОПланируемомОткрытии(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Заявка на открытие нового магазина ВВ: " + ДанныеДляРассылки.НомерТочки + " " + ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТекстПисьма = "
	|Уважаемые коллеги!
	|
	|Сообщаю Вам об открытии нового магазина ВВ по адресу: &НомерТочки &АдресМагазина
	|
	|Ориентировочная дата открытия &ДатаОткрытия
	|
	|Менеджер проекта: &МенеджерПроекта
	|&ИнформацияПоПлощадиПомещения
	//+++ AK suvv 2018.10.08 ИП-00020068
	|Тип розничной точки: &ТипРозничнойТочки
	|
	//--- AK suvv
	|Подробную информацию о структурной единице можно найти в 1с
	|
	|С Уважением, &Автор &Email &Телефон";
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина"  , ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ДатаОткрытия"   , Формат(ДанныеДляРассылки.ДатаОткрытия, "ДФ=dd.MM.yyyy"));
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Автор"			 , ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , ДанныеДляРассылки.НомерТочки);	
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки", ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	//+++AK GREK 10.07.2018 ИП-00018854  
	Если ЗначениеЗаполнено(ДанныеДляРассылки.ТорговаяПлощадь) Тогда
		ОбщаяПлощадь = ДанныеДляРассылки.ПлощадьПодсобныхПомещений + ДанныеДляРассылки.ТорговаяПлощадь;
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИнформацияПоПлощадиПомещения"	 , Символы.ПС + "Общая площадь составляет " + ОбщаяПлощадь + ", в т.ч. торговая площадь " + ДанныеДляРассылки.ТорговаяПлощадь + Символы.ПС);
	Иначе
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ИнформацияПоПлощадиПомещения"	 , "");
	КонецЕсли;
	//---AK
	
	EmailАвтора = "";
	ТелефонАвтора = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);	
	Рез = Запрос.Выполнить().Выгрузить();	
	Для Каждого Стр из Рез Цикл
		Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			EmailАвтора = "Email " + СокрЛП(Стр.Представление);	
		ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			ТелефонАвтора = "Тел. " + СокрЛП(Стр.Представление);	
		КонецЕсли;
	КонецЦикла;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email"          , EmailАвтора);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон"        , ТелефонАвтора);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ГруппыРассылки.ФизЛицо,
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГруппыРассылки.ИнформированиеОПланируемомОткрытии)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(Выборка.Емейл);
	КонецЦикла;
	
	Попытка
		Почта.Послать(Письмо);
		Возврат 1;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассылкаПисемНаРегистрациюКасс(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Регистрация ККМ нового магазина ВВ: по адресу "+ ДанныеДляРассылки.НомерТочки + " " + ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТекстПисьма = "
	|Прошу зарегистрировать фискальные регистраторы в количестве &КоличествоКасс 
	|в магазин по адресу &НомерТочки &АдресМагазина
	//+++ AK suvv 2018.10.08 ИП-00020068
	|
	|Тип розничной точки: &ТипРозничнойТочки
	//--- AK suvv
	|
	|С Уважением, &МенеджерПроекта &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина",   ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&КтоПередает",     ДанныеДляРассылки.КтоПередает);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&КоличествоКасс",  ДанныеДляРассылки.КоличествоКасс);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	,  ДанныеДляРассылки.НомерТочки);
    //+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки",  ДанныеДляРассылки.ТипРозничнойТочки);
    //--- AK suvv
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Email = "";
	Телефон = "";
	
	Для Каждого Стр из Рез Цикл
		Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			Email = "Email " + СокрЛП(Стр.Представление);	
		ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Телефон = "Тел. " + СокрЛП(Стр.Представление);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ГруппыРассылки.ФизЛицо,
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГруппыРассылки.РассылкаПисемНаРегистрациюКасс)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(Выборка.Емейл);
	КонецЦикла;
	
	ОтборСканы = Новый Структура;
	ОтборСканы.Вставить("Назначение", "Сканы");
	Сканы = ДанныеДляРассылки.Файлы.НайтиСтроки(ОтборСканы);
	Если Сканы <> неопределено Тогда 
		Для Каждого Стр Из Сканы Цикл
			Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл));
		КонецЦикла;	
	КонецЕсли;
	
	Попытка
		Почта.Послать(Письмо);
		Возврат 1;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассылкаСканаДоговора(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Скан договора нового магазина ВВ: по адресу: " + ДанныеДляРассылки.НомерТочки + " " +ДанныеДляРассылки.АдресМагазина;
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТекстПисьма = "
	|Добрый день!
	|
	|Уважаемые коллеги, к письму прикреплен скан договора магазина ВВ: по адресу: &НомерТочки &АдресМагазина
	//+++ AK suvv 2018.10.08 ИП-00020068
	|
	|Тип розничной точки: &ТипРозничнойТочки
	//--- AK suvv
	|
	|Просьба оплатить депозит согласно условий договора.
	|
	|С Уважением, &МенеджерПроекта &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина"  , ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта", ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки"	 , ДанныеДляРассылки.НомерТочки);
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки"	 , ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Email = "";
	Телефон = "";
	
	Для Каждого Стр из Рез Цикл
		Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			Email = "Email " + СокрЛП(Стр.Представление);	
		ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Телефон = "Тел. " + СокрЛП(Стр.Представление);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ГруппыРассылки.ФизЛицо,
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГруппыРассылки.РассылкаСканаДоговора)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(Выборка.Емейл);
	КонецЦикла;
	
	ОтборСканы = Новый Структура;
	ОтборСканы.Вставить("Назначение", "Сканы");
	Сканы = ДанныеДляРассылки.Файлы.НайтиСтроки(ОтборСканы);
	Если Сканы <> неопределено Тогда 
		Для Каждого Стр из Сканы Цикл
			Письмо.Вложения.Добавить(Справочники.Файлы.ПолучитьИмяФайлаДляОбъекта(Стр.Файл));
		КонецЦикла;	
	КонецЕсли;
	
	Попытка
		Почта.Послать(Письмо);
		Возврат 1;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассылкаИнформацииМенеджерамОтделаАренды(Почта, УчетнаяЗапись, ДанныеДляРассылки)
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Проверка суммы арендной платы нового магазина ВВ: по адресу: " + ДанныеДляРассылки.НомерТочки + " " + ДанныеДляРассылки.АдресМагазина;
	
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТекстПисьма = "
	|Добрый день!
	|
	|Прошу сверить суммы арендной платы нового магазина ВВ: по адресу: &НомерТочки &АдресМагазина
	|
	|Сумма аренды постоянная: &СуммаАрендыПостоянная
	|
	|Сумма аренды переменная: &СуммаАрендыПеременная
	//+++ AK suvv 2018.09.05 ИП-00019700
	|
	|Наличие площади субаренды: &НаличиеПлощадиСубаренды
	|
	|Менеджер по открытию: &МенеджерПроекта
	|
	|Тип розничной точки: &ТипРозничнойТочки
	//--- AK suvv
	|
	|С Уважением, &МенеджерПроекта &Email &Телефон";
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина",         ДанныеДляРассылки.АдресМагазина);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&МенеджерПроекта",       ДанныеДляРассылки.МенеджерПроекта);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&СуммаАрендыПеременная", ДанныеДляРассылки.СуммаАрендыПеременная);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&СуммаАрендыПостоянная", ДанныеДляРассылки.СуммаАрендыПостоянная);
	//+++ AK suvv 2018.09.05 ИП-00019700
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НаличиеПлощадиСубаренды", ?(ДанныеДляРассылки.ПлощадьСубаренды <> 0, "да (" + ДанныеДляРассылки.ПлощадьСубаренды + "м2)", "нет"));
	//--- AK suvv
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&НомерТочки",            ДанныеДляРассылки.НомерТочки);
	//+++ AK suvv 2018.10.08 ИП-00020068
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&ТипРозничнойТочки",     ДанныеДляРассылки.ТипРозничнойТочки);
	//--- AK suvv
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ИЛИ КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))";
	Запрос.УстановитьПараметр("Объект", ДанныеДляРассылки.МенеджерПроекта);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Email = "";
	Телефон = "";
	
	Для Каждого Стр из Рез Цикл
		Если Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			Email = "Email " + СокрЛП(Стр.Представление);	
		ИначеЕсли Стр.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Телефон = "Тел. " + СокрЛП(Стр.Представление);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Email", Email);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&Телефон", Телефон);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АК_ГруппыРассылки.ФизЛицо,
	|	АК_ГруппыРассылки.Емейл
	|ИЗ
	|	РегистрСведений.АК_ГруппыРассылки КАК АК_ГруппыРассылки
	|ГДЕ
	|	АК_ГруппыРассылки.Группа = ЗНАЧЕНИЕ(Справочник.АК_ГруппыРассылки.РассылкаИнформацииМенеджерамОтделаАренды)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(Выборка.Емейл);
	КонецЦикла;
	
	Попытка
		Почта.Послать(Письмо);
		Возврат 1;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ОтправитьЗапросНаПодтверждениеПередачи()
	
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Почта.Подключиться(Профиль);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Требуется подтверждение передачи новой торговой точки";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	
	ТекстПисьма = "
	|Вам был отправлен запрос на подтверждение передачи торговой точки по адресу: &АдресМагазина
	|
	|Подтвердить передачу можно по ссылке http://it-stuff.ru/IzbenkaFin/ru_RU/?C=FormaPeredachiMag";
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АдресМагазина" , Объект.Адрес);
	
	ТекстСообщения = Письмо.Тексты.Добавить(ТекстПисьма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)
	|	И КонтактнаяИнформация.Объект = &Объект";	
	Запрос.УстановитьПараметр("Объект", Объект.ПомощникУправляющего);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = СокрЛП(Выборка.Представление);
	КонецЕсли;
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПлощадьСубарендыПриИзменении(Элемент)
	РассчитатьПлощадьНеиспользуемыхПомещений();
	ПересчитатьОбщуюСтоимость();
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ПлощадьСубаренды");
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьНеиспользуемаяПриИзменении(Элемент)
	ПересчитатьОбщуюСтоимость();
	//+++ AK suvv 12.07.2018 ИП-00019053
	ИзменениеАвтораРеквизита("ПлощадьНеиспользуемая");
	//--- AK suvv
КонецПроцедуры

//+++ AK suvv 12.07.2018 ИП-00019053 
&НаКлиенте
Процедура ИзменениеАвтораРеквизита(НазваниеРеквизита)
	
	НазваниеРеквизитаАвтор = НазваниеРеквизита + "Автор";
	Объект[НазваниеРеквизитаАвтор] = ТекПользователь;
	
КонецПроцедуры

//+++ AK suvv 2018.09.05 ИП-00019700
&НаКлиенте
Процедура НаличиеПлощадиСубарендыПриИзменении(Элемент)
	Если НаличиеПлощадиСубаренды Тогда 
		Элементы.ПлощадьСубаренды1.Видимость = Истина;
	Иначе
		Объект.ПлощадьСубаренды = 0;
		Элементы.ПлощадьСубаренды1.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры //--- AK suvv

#КонецОбласти
