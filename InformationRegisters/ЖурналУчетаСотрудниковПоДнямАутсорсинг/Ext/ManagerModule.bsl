////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


//Обновление должности в регистре после изменения должности в карточке внештатного сотрудника
//(Процедура обновляет "должность" только в записях за определенный период и при условии, что должность была изменена)
//
//Параметры:
//   СтруктураПараметров  - <Тип.Структрура> - Структура параметров (Начало периода, КонецПериода, Сотрудник)
//
Процедура ОбновитьДолжностьСотрудникаЖурналУчета(СтруктураПараметров) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаявкаНаУслуги,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность КАК Должность,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник.Должность КАК СотрудникДолжность
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|ГДЕ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник = &Сотрудник
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаявкаНаУслуги = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник.Должность <> ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность";

	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураПараметров.Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.Должность = Выборка.СотрудникДолжность;
			
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

//Процедура очищает значение ресурса ЗаявкаНаУслуги по ссылке на документ
//
//Параметры;
//	ДокументСсылка - <Тип.ДокументСсылка.ЗаявкаНаУслугиМатериалы> - Ссылка на документ
//
Процедура ОчиститьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДокументСсылка) Экспорт
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|ГДЕ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаявкаНаУслуги = &ЗаявкаНаУслуги";
	
	Запрос.УстановитьПараметр("ЗаявкаНаУслуги", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СтруктураОтбора = Новый Структура();

		Пока Выборка.Следующий() Цикл
			
			Отказ = Ложь;
			
			Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
				СтруктураОтбора.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);      
			КонецЦикла;
			
			МенеджерЗаписи = ПолучитьМенеджерЗаписиЖурналУчетаПоДням(СтруктураОтбора);
			
			МенеджерЗаписи.ЗаявкаНаУслуги = Документы.ЗаявкаНаУслугиМатериалы.ПустаяСсылка();
			
			ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура обновляет значение ресурса ЗаявкаНаУслуги по ссылке на документ
//
//Параметры;
//	ДокументСсылка - <Тип.ДокументСсылка.ЗаявкаНаУслугиМатериалы> - Ссылка на документ
//  СтруктураПараметров  - <Тип.Структура> - НачалоПериода, КонецПериода, Контрагент, ТорговаяТочка, Должность 
//
Процедура ЗаполнитьСтрокиЗаписиРегистраЖурналУчетаПоЗаявке(ДокументСсылка, СтруктураПараметров) Экспорт
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|*
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|ГДЕ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент = &Контрагент
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ТорговаяТочка = &ТорговаяТочка
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Должность = &Должность
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ПодтвержденоОплата
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаявкаНаУслуги = ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Контрагент", СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("ТорговаяТочка", СтруктураПараметров.ТорговаяТочка);
	Запрос.УстановитьПараметр("Должность", СтруктураПараметров.Должность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СтруктураОтбора = Новый Структура();

		Пока Выборка.Следующий() Цикл
			
			Отказ = Ложь;
			
			Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
				СтруктураОтбора.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);      
			КонецЦикла;
			
			МенеджерЗаписи = ПолучитьМенеджерЗаписиЖурналУчетаПоДням(СтруктураОтбора);
			
			МенеджерЗаписи.ЗаявкаНаУслуги = ДокументСсылка;
			
			ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура записывает данные по менеджеру записи
//
//Параметры;
//	МенеджерЗаписи - <Тип.МенеджерЗаписи> - МенеджерЗаписи регистра ЖурналУчетаСотрудниковПоДнямАутсорсинг
//  Отказ  - <Тип.Булево> - Отказ в случае ошибки
//
Процедура ЗаписатьДанныеМенеджерЗаписиЖурналУчетаПоДням(МенеджерЗаписи, Отказ) Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи.Записать();
		
	Исключение
		
		ТекстСообщения = "Ошибка записи! Сотрудник: &Сотрудник, Приход: &Приход, Уход: &Уход, &ОписаниеОшибки";
		
		ТекстСообщения = СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстСообщения, "&Приход", МенеджерЗаписи.ДатаПрихода), "&Уход", МенеджерЗаписи.ДатаУхода), "&Сотрудник", МенеджерЗаписи.Сотрудник);  
		
		Сообщить(НСтр("ru = '"+ТекстСообщения+"';"));
		
		Сообщить(ОписаниеОшибки());
		
		Отказ = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

//Функция возвращает менеджер записи регистра ЖурналУчетаСотрудниковПоДнямАутсорсинг по структуре параметров
//
//Параметры;
//	СтруктураЗаписи - <Тип.Структура> - Произвольная структура параметров(имена должны соответствовать именам в структуре регистра ЖурналУчетаСотрудниковПоДнямАутсорсинг) 
//
Функция ПолучитьМенеджерЗаписиЖурналУчетаПоДням(СтруктураЗаписи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.СоздатьМенеджерЗаписи();
	
	Для каждого ЭлементСтруктуры Из СтруктураЗаписи Цикл
		МенеджерЗаписи[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;     
	КонецЦикла;
	
    Возврат МенеджерЗаписи;

КонецФункции

// Предназначена для очистки всех записей по идентификатору из Фронтол
//
// Параметры:
//  IDЗаписи  - <Тип.Строка> - GUID Записи
//
Процедура ОчиститьЗаписиЖурналаПоID(IDЗаписи) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(IDЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|ГДЕ
	|	(ЖурналУчетаСотрудниковПоДнямАутсорсинг.idЗаписиПриход = &idЗаписи
	|			ИЛИ ЖурналУчетаСотрудниковПоДнямАутсорсинг.idЗаписиУход = &idЗаписи)";
	
	Запрос.УстановитьПараметр("idЗаписи", idЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДатаПрихода = Выборка.ДатаПрихода;
			МенеджерЗаписи.Сотрудник = Выборка.Сотрудник;
			
			Попытка
				МенеджерЗаписи.Удалить();
			Исключение
				Сообщить(НСтр("ru = 'Не удалось удалить запись регистра ""Журнал учета сотрудников (аутсорсинг)""';"));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОчиститьЗаписиЖурналаПоID()

// Проверяет возможность редактирования периода по сотруднику в разрезе контрагента
// Если в редактируемый период содержит документы включающие в себа записи с более поздним периодом,
// устанавливается запрет на редактирование.
// Параметры:
//  <Период>  - <Тип.Дата> - дата редактирования
//                 <продолжение описания параметра>
//  <Сотрудник>  - <Тип.СправочникСсылка.ФизическиеЛица> - сотрудник
//
// Возвращаемое значение:
//   <Тип.Булево>   - Признак отказа
//
Функция ПроверитьВозможностьРедактированияПеродаПоСотруднику(Период, Сотрудник) Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг1.ЗаявкаНаУслуги КАК ЗаявкаНаУслуги,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг1.Контрагент
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСотрудниковПоДнямАутсорсинг КАК ЖурналУчетаСотрудниковПоДнямАутсорсинг1
	|		ПО ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода = ЖурналУчетаСотрудниковПоДнямАутсорсинг1.ДатаПрихода
	|			И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник = ЖурналУчетаСотрудниковПоДнямАутсорсинг1.Сотрудник
	|			И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Контрагент = ЖурналУчетаСотрудниковПоДнямАутсорсинг1.Контрагент
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЖурналУчетаСотрудниковПоДнямАутсорсинг.ДатаПрихода, ДЕНЬ) >= &Период
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.Сотрудник = &Сотрудник
	|	И ЖурналУчетаСотрудниковПоДнямАутсорсинг.ЗаявкаНаУслуги <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаУслугиМатериалы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг1.ЗаявкаНаУслуги,
	|	ЖурналУчетаСотрудниковПоДнямАутсорсинг1.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаУслуги
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТекстУведомления = "";
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстУведомления = ТекстУведомления + Выборка.Контрагент + ", " + Выборка.ЗаявкаНаУслуги + Символы.ПС; 
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Сообщить(СтрЗаменить("Запрещено редактировать период &Период, поскольку уже есть сформированные заявки: ", 
				"&Период", Формат(Период, "ДФ=dd.MM.yyyy"))+ Символы.ПС + ТекстУведомления);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПроверитьВозможностьРедактирвоанияПеродаПоКонтрагенту()
	
