//+++АК KOPA ИП-00018018
//Регистр хранит реквизиты полученные из классифицирующей системы

Процедура ОпределитьСтатусКлассифицирующейСистемы(Строка) Экспорт 
	//Возврат;	
//Если эти поля не заполнены то обращение не интересно классифицирующей системе	
	ПроверяемИзменениеСтатуса = ЗначениеЗаполнено(Строка.GUID_Загрузки) и  ЗначениеЗаполнено(Строка.ДатаДок) и ЗначениеЗаполнено(Строка.Примечание);
	
	Если Не ПроверяемИзменениеСтатуса Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбращенияПокупателей.ТипОбращения
	//	|ПОМЕСТИТЬ втОбращенияПокупателей
	//	|ИЗ
	//	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	//	|ГДЕ
	//	|	ОбращенияПокупателей.id_OK = &id_OK
	//	|	И ОбращенияПокупателей.GUID_Загрузки = &GUID_Загрузки
	//	|	И ОбращенияПокупателей.ДатаДок = &ДатаДок
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОбращенияПокупателейКлассифицирующаяСистема.Статус
	//	|ПОМЕСТИТЬ втКС
	//	|ИЗ
	//	|	РегистрСведений.ОбращенияПокупателейКлассифицирующаяСистема КАК ОбращенияПокупателейКлассифицирующаяСистема
	//	|ГДЕ
	//	|	ОбращенияПокупателейКлассифицирующаяСистема.id_OK = &id_OK
	//	|	И ОбращенияПокупателейКлассифицирующаяСистема.GUID_Загрузки = &GUID_Загрузки
	//	|	И ОбращенияПокупателейКлассифицирующаяСистема.ДатаДок = &ДатаДок
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	втКС.Статус,
	//	|	втОбращенияПокупателей.ТипОбращения
	//	|ИЗ
	//	|	втОбращенияПокупателей КАК втОбращенияПокупателей,
	//	|	втКС КАК втКС";
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияПокупателейКлассифицирующаяСистема.Статус,
		|	ОбращенияПокупателейКлассифицирующаяСистема.ДатаОбработки,
		|	ОбращенияПокупателейКлассифицирующаяСистема.ОтветКлассифицирующейСистемы
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателейКлассифицирующаяСистема КАК ОбращенияПокупателейКлассифицирующаяСистема
		|ГДЕ
		|	ОбращенияПокупателейКлассифицирующаяСистема.id_OK = &id_OK
		|	И ОбращенияПокупателейКлассифицирующаяСистема.GUID_Загрузки = &GUID_Загрузки
		|	И ОбращенияПокупателейКлассифицирующаяСистема.ДатаДок = &ДатаДок";	
	
	Запрос.УстановитьПараметр("GUID_Загрузки", Строка.GUID_Загрузки);
	Запрос.УстановитьПараметр("id_OK", Строка.id_OK);
	Запрос.УстановитьПараметр("ДатаДок", Строка.ДатаДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Данные = Выборка.ОтветКлассифицирующейСистемы.Получить().Данные;
	РаспознанныйТип = ?(Данные.ТипОбращения = Неопределено, Справочники.ТипыОбращенийПокупателей.ПустаяСсылка(), Данные.ТипОбращения);
	
	Если Строка.ТипОбращения <> РаспознанныйТип и ЗначениеЗаполнено(Выборка.Статус) и ЗначениеЗаполнено(Строка.ТипОбращения)
	И НЕ Выборка.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение
	И НЕ Выборка.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправленоНаДообучение Тогда
		УстановитьСтатусОтправитьНаДообучение(Строка);		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьСтатусОтправитьНаДообучение(Отбор)
	запись = РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьМенеджерЗаписи();
	запись.id_OK = Отбор.id_OK;
	запись.GUID_Загрузки = Отбор.GUID_Загрузки;
	запись.ДатаДок = Отбор.ДатаДок;
	
	запись.Прочитать();
	
	Если Не запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	запись.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение;
	запись.Записать();
КонецПроцедуры

Процедура _Переход()

	а = РегистрыСведений.ОбращенияПокупателей;

КонецПроцедуры


#Область ОтправкаСообщений

Процедура ОтправитьНаРаспозначание_Период() Экспорт 
	
	Параметры = ПолучитьПараметры();
	
	Если Параметры.Свойство("ДатаОкончания") Тогда
		ДатаОкончания = Параметры.ДатаОкончания;
	Иначе	
		ДатаОкончания = ТекущаяДата();		
	КонецЕсли;
		
	ДатаНачала = ДатаОкончания - 24*3600;
		
	Параметры.Вставить("ДатаНачала", ДатаНачала);
	Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	ОтправитьНаРаспознавание(Параметры);
	
КонецПроцедуры

Процедура ОтправитьНаРаспознавание(Параметры) Экспорт 
	
//ДатаНачала, ДатаОкончания, Первые = "10", ПорогДостоверности = 0.9

	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	Первые = Параметры.Первые;
	ПорогДостоверности = Параметры.ПорогДостоверности;
	
	Таблица = Новый ТаблицаЗначений;
	
	опДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));			 
	опСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));			   		 
	
	Таблица = ПолучитьДанныеДляЗапроса(ДатаНачала, ДатаОкончания, Первые);
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Таблица.Колонки.Добавить("Начало", опДата);
	Таблица.Колонки.Добавить("Окончание", опДата);				 
	Таблица.Колонки.Добавить("СтрокаОтвет", опСтрока);
	
	ОтправитьЗапрос(ПолучитьДанныеПодключения(), Таблица);	
	ЗаписатьДанные_ОбращенияПокупателейКС(Таблица, ПорогДостоверности, Параметры.ОбращенияПокупателейКС_Записать, Параметры.ОбращенияПокупателей_Записать);	
	
КонецПроцедуры

Функция ПолучитьПоследниеЧеки(НомерКарты, НомерЧека=0) Экспорт
	
	РМ = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(НомерКарты) Тогда
		Возврат РМ;
	КонецЕсли;
	
	ТекстЗапроса = "select * from SMS_UNION..Get_Last_3_Check_BONUSCARD('" + НомерКарты + "')";
	СтрокаПоключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql01", "Loyalty");
	Результат = Телеграм.База_ВыполнитьЗапрос(ТекстЗапроса, СтрокаПоключения);
	ТЗ = Телеграм.База_РезультатЗапросВТаблицуЗначений(Результат);
	
	Попытка
		Для каждого Стр Из ТЗ Цикл
			Если НЕ НомерЧека=0 И НЕ Стр.CashCheckNo = НомерЧека Тогда
				Продолжить;
			КонецЕсли;
			РМ.Добавить(
				Новый Структура("CashierID, Cashier, CheckDate, CashID, CheckID, id_tov, tov, id_kontr, kontr, ShopNo",
				Стр.CashierID, Стр.CashierFIO, Стр.CheckCloseDate, Стр.CashID, Стр.CashCheckNo, Стр.id_tov, Стр.tov_name, Стр.id_kontr, Стр.Kontr_name, Стр.ShopNo)
			);	
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат РМ;
	
КонецФункции

//+++ ak golv ИП-00020632
Функция ПолучитьНомерМагазинаПоследнейПокупки(УИД, НомерКарты)
	
	Попытка
		ТекстЗапроса = "exec Telegram.dbo.[LastPurchaseShop] '" + НомерКарты + "', '" + УИД + "'";
		СтрокаПоключения = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
		Результат = Телеграм.База_ВыполнитьЗапрос(ТекстЗапроса, СтрокаПоключения);
		ТЗ = Телеграм.База_РезультатЗапросВТаблицуЗначений(Результат);	
		Если ТипЗнч(ТЗ) = ТИп("ТаблицаЗначений") И ТЗ.Количество()>0 Тогда
			Возврат ТЗ[0].ShopNo;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат 0;
	
КонецФункции
//--- ak golv ИП-00020632

Функция ПолучитьМассивИсточникиОбращений() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсточникиОбращений.Ссылка
		|ИЗ
		|	Справочник.ИсточникиОбращений КАК ИсточникиОбращений
		|ГДЕ
		|	ИсточникиОбращений.Наименование В(&МассивНаименование)";
	
	МассивНаименование = Новый Массив;
	МассивНаименование.Добавить("9 Telegram");
	МассивНаименование.Добавить("1 горячая линия");
	МассивНаименование.Добавить("4 info@izbenka.msk.ru");
	МассивНаименование.Добавить("5 Вконтакте");
	//МассивКоды.Добавить("");
	//МассивКоды.Добавить("");
	
	Запрос.УстановитьПараметр("МассивНаименование", МассивНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьДанныеДляЗапроса(ДатаНач, ДатаКон, Первые = "10")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбращенияПокупателей.id_OK,
	|	ОбращенияПокупателей.GUID_Загрузки,
	|	ОбращенияПокупателей.ДатаДок,
	|	ОбращенияПокупателей.Примечание,
	|	ОбращенияПокупателей.Номер_Карты_ОК,
	|	ОбращенияПокупателей.НомерКассы,
	|	ОбращенияПокупателей.Номер_Бланка,
	|	ОбращенияПокупателей.ТипОбращения,
	|	ОбращенияПокупателей.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОбращенияПокупателей.Продавец1,
	|	ОбращенияПокупателей.Номенклатура,
	|	ОбращенияПокупателей.ТипЖалобы,
	|	ОбращенияПокупателей.UIDTelegram
	|ПОМЕСТИТЬ Обращения
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.ИсточникОбращения В(&МассивТипОбращения)
	|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	ОбращенияПокупателей.id_OK,
	|	ОбращенияПокупателей.GUID_Загрузки,
	|	ОбращенияПокупателей.ДатаДок,
	|	ОбращенияПокупателей.Примечание,
	|	ИСТИНА КАК Распознать,
	|	ОбращенияПокупателей.Номер_Карты_ОК КАК НомерКарты,
	|	ОбращенияПокупателей.НомерКассы,
	|	ОбращенияПокупателей.Номер_Бланка КАК НомерБланка,
	|	ОбращенияПокупателейКлассифицирующаяСистема.Статус,
	|	ОбращенияПокупателей.ТипОбращения.Код КАК КодТипОбращения,
	|	ОбращенияПокупателей.СтруктурнаяЕдиница.НомерТочки КАК НомерТочки,
	|	ОбращенияПокупателей.Продавец1.Наименование КАК Продавец,
	|	ОбращенияПокупателей.Номенклатура.id_tov КАК id_tov,
	|	ОбращенияПокупателей.ТипЖалобы.Код КАК КодТипЖалобы,
	|	ОбращенияПокупателей.UIDTelegram
	|ИЗ
	|	Обращения КАК ОбращенияПокупателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияПокупателейКлассифицирующаяСистема КАК ОбращенияПокупателейКлассифицирующаяСистема
	|		ПО ОбращенияПокупателей.id_OK = ОбращенияПокупателейКлассифицирующаяСистема.id_OK
	|			И ОбращенияПокупателей.GUID_Загрузки = ОбращенияПокупателейКлассифицирующаяСистема.GUID_Загрузки
	|			И ОбращенияПокупателей.ДатаДок = ОбращенияПокупателейКлассифицирующаяСистема.ДатаДок
	|ГДЕ
	|	(ВЫРАЗИТЬ(ОбращенияПокупателей.GUID_Загрузки КАК СТРОКА(1))) <> """"
	|	И (ВЫРАЗИТЬ(ОбращенияПокупателей.Примечание КАК СТРОКА(1))) <> """"
	|	И ТИПЗНАЧЕНИЯ(ОбращенияПокупателей.GUID_Загрузки) = ТИП(СТРОКА)
	|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &ДатаНач И &ДатаКон
	|	И (ОбращенияПокупателейКлассифицирующаяСистема.Статус ЕСТЬ NULL
	|			ИЛИ ОбращенияПокупателейКлассифицирующаяСистема.Статус = &ПустойСтатус)
	|	И ОбращенияПокупателей.ТипОбращения = &ПустойТипОбращения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	ОбращенияПокупателей.id_OK,
	|	ОбращенияПокупателей.GUID_Загрузки,
	|	ОбращенияПокупателей.ДатаДок,
	|	ОбращенияПокупателей.Примечание,
	|	ИСТИНА,
	|	ОбращенияПокупателей.Номер_Карты_ОК,
	|	ОбращенияПокупателей.НомерКассы,
	|	ОбращенияПокупателей.Номер_Бланка,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение),
	|	ОбращенияПокупателей.ТипОбращения.Код,
	|	ОбращенияПокупателей.СтруктурнаяЕдиница.НомерТочки,
	|	ОбращенияПокупателей.Продавец1.Наименование,
	|	ОбращенияПокупателей.Номенклатура.id_tov,
	|	ОбращенияПокупателей.ТипЖалобы.Код,
	|	ОбращенияПокупателей.UIDTelegram
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.id_OK В
	|			(ВЫБРАТЬ
	|				ОбращенияПокупателейКлассифицирующаяСистема.id_OK
	|			ИЗ
	|				РегистрСведений.ОбращенияПокупателейКлассифицирующаяСистема КАК ОбращенияПокупателейКлассифицирующаяСистема
	|			ГДЕ
	|				ОбращенияПокупателейКлассифицирующаяСистема.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение))";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивТипОбращения", ПолучитьМассивИсточникиОбращений());
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусДляКлассифицирующейСистемы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипОбращения", Справочники.ТипыОбращенийПокупателей.ПустаяСсылка());
	
	Если Не Первые = "10" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "10", Первые);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	

	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПодключения()Экспорт 
	
	Сервер = "10.1.241.15";
	Порт = 80;	

	Возврат Новый Структура("Сервер,Порт", Сервер, Порт);
	
КонецФункции

Функция ОтправитьЗапрос(ДанныеПодключения, ТаблицаЗапросов, ЗамерВремени = Ложь) Экспорт 
	
	Соединение = Новый HTTPСоединение(ДанныеПодключения.Сервер, ДанныеПодключения.Порт);
	
	Ошибка = Неопределено;
	
	Для каждого Строка Из ТаблицаЗапросов Цикл
		
		Если Не Строка.Распознать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗамерВремени Тогда
			Строка.Начало = ТекущаяДата();			
		КонецЕсли;
		
		Попытка			
			Ответ = ПолучитьОтветКС(Соединение, Строка);
		Исключение
			Ошибка = ОписаниеОшибки();	
			Сообщить(Ошибка);
			Прервать;
		КонецПопытки;
		
		Если НЕ Строка.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение Тогда
			Строка.СтрокаОтвет = Ответ;
		КонецЕсли;
		
		Если ЗамерВремени Тогда
			Строка.Окончание = ТекущаяДата();			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Ошибка;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтветКС(Соединение, ДанныеЗапроса)
	
	Данные = Новый Структура;
	
	Если ДанныеЗапроса.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение Тогда
		Данные.Вставить("type", "output");
		Данные.Вставить("id", ДанныеЗапроса.GUID_Загрузки);
		Данные.Вставить("date", ДанныеЗапроса.ДатаДок);	
		Данные.Вставить("description", ДанныеЗапроса.Примечание);
		Данные.Вставить("class", ?(ЗначениеЗаполнено(ДанныеЗапроса.КодТипОбращения), ДанныеЗапроса.КодТипОбращения, ""));	
		Данные.Вставить("subclass", ?(ЗначениеЗаполнено(ДанныеЗапроса.КодТипЖалобы), ДанныеЗапроса.КодТипЖалобы, ""));	
		Данные.Вставить("market_adress", ?(ЗначениеЗаполнено(ДанныеЗапроса.НомерТочки), ДанныеЗапроса.НомерТочки, ""));	
		Данные.Вставить("nomenclature", ?(ЗначениеЗаполнено(ДанныеЗапроса.id_tov), ДанныеЗапроса.id_tov, 0));	
		Данные.Вставить("employee_name", ?(ЗначениеЗаполнено(ДанныеЗапроса.Продавец), ДанныеЗапроса.Продавец, ""));		
	Иначе
		Данные.Вставить("type", "input");
		Данные.Вставить("id", ДанныеЗапроса.GUID_Загрузки);
		Данные.Вставить("date", ДанныеЗапроса.ДатаДок);
		Данные.Вставить("description", ДанныеЗапроса.Примечание);
		Данные.Вставить("card_number", ДанныеЗапроса.НомерКарты);
		Данные.Вставить("purchases", ПолучитьПоследниеЧеки(ДанныеЗапроса.НомерКарты, ДанныеЗапроса.НомерБланка));
	КонецЕсли;
	
	СтрокаJSON = ТелеграмТехБот.ЗаписатьJSONВСтроку(Данные);
	
	HTTPЗапрос = Новый HTTPЗапрос();		
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);

	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	
КонецФункции

#КонецОбласти


#Область ЗаписьДанных

Процедура ЗаписатьДанные_ОбращенияПокупателейКС(ТаблицаЗапросов, ПорогДостоверности = 0.7, ОбращенияПокупателейКС_Записать, ОбращенияПокупателей_Записать) Экспорт 
	
	Для каждого Строка Из ТаблицаЗапросов Цикл
		
		Если Строка.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправитьНаДообучение Тогда
			МЗ = РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьМенеджерЗаписи();
			Мз.GUID_Загрузки = Строка.GUID_Загрузки;
			МЗ.id_OK = Строка.id_OK;
			МЗ.ДатаДок = Строка.ДатаДок;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.Статус = Перечисления.СтатусДляКлассифицирующейСистемы.ОтправленоНаДообучение;
				МЗ.Записать(Истина);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не Строка.Распознать Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОтвета = Строка.СтрокаОтвет;
		ДанныеОтвета = СформироватьДанныеОтвета(ТекстОтвета, ПорогДостоверности, Строка.ДатаДок, Строка.UIDTelegram);
		
		Если ДанныеОтвета = Неопределено Тогда
			Возврат;
		КонецЕсли;		
		
		Рассылка = Ложь;
		
		Если ОбращенияПокупателейКС_Записать = Истина Тогда
			Записать_ОбращенияПокупателейКлассифицирующаяСистема(Строка, ДанныеОтвета, ТекстОтвета, Рассылка);
		КонецЕсли;
		
		Если ОбращенияПокупателей_Записать = Истина Тогда
			Записать_ОбращенияПокупателей(Строка, ДанныеОтвета);
			Если Рассылка Тогда			
				ОтправитьПисьмо(Строка);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Записать_ОбращенияПокупателейКлассифицирующаяСистема(ДанныеСтроки, ДанныеОтвета, ТекстОтвета = "", Рассылка = Ложь) Экспорт 	
	запись = РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьМенеджерЗаписи();
	запись.id_OK = ДанныеСтроки.id_OK;
	запись.GUID_Загрузки = ДанныеСтроки.GUID_Загрузки;
	запись.ДатаДок = ДанныеСтроки.ДатаДок;
	запись.ТекстОтвета = ТекстОтвета;
	
	Рассылка = Ложь;
	запись.Статус = ОпределитьСтатусОтвета(ДанныеОтвета, Рассылка);
	запись.ДатаОбработки = ТекущаяДата();
	ОбщиеДанные = Новый Структура("СтрокаJSON,Данные,Рассылка", ДанныеСтроки.СтрокаОтвет, ДанныеОтвета, Рассылка);
	запись.ОтветКлассифицирующейСистемы = Новый ХранилищеЗначения(ОбщиеДанные);
	
	запись.Записать();
	
КонецПроцедуры

Процедура Записать_ОбращенияПокупателей(ДанныеСтроки, ДанныеОтвета) Экспорт 	
	набор = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
	набор.Отбор.id_OK.Установить(ДанныеСтроки.id_OK);
	набор.Отбор.GUID_Загрузки.Установить(ДанныеСтроки.GUID_Загрузки);
	набор.Отбор.ДатаДок.Установить(ДанныеСтроки.ДатаДок);
	
	набор.Прочитать();
	
	Если набор.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	запись = набор[0];
	
	Если ЗначениеЗаполнено(запись.ТипОбращения) Тогда//Есои заполнено то значит уже не надо заполнять
		Возврат;
	КонецЕсли;
	
	Продавец1 = Неопределено;
	ДанныеОтвета.Свойство("Продавец", Продавец1);
	
	Телефон = Неопределено;
	ДанныеОтвета.Свойство("Телефон", Телефон);
	
	Номер_Карты_ОК = Неопределено;
	ДанныеОтвета.Свойство("Номер_Карты_ОК", Номер_Карты_ОК);
	
	СтруктурнаяЕдиница = Неопределено;
	ДанныеОтвета.Свойство("Магазин", СтруктурнаяЕдиница);	
		
	ТипОбращения = Неопределено;
	ДанныеОтвета.Свойство("ТипОбращения", ТипОбращения);
	
	ТипЖалобы = Неопределено;
	ДанныеОтвета.Свойство("ТипЖалобы", ТипЖалобы);
	
	Номенклатура = Неопределено;
	ДанныеОтвета.Свойство("Номенклатура", Номенклатура);
	
	Производитель = Неопределено;
	ДанныеОтвета.Свойство("Производитель", Производитель);
	
	НомерЧека = Неопределено;
	ДанныеОтвета.Свойство("НомерЧека", НомерЧека);
	
	ДатаЧека = Неопределено;
	ДанныеОтвета.Свойство("ДатаЧека", ДатаЧека);
	
	НомерКассы = Неопределено;
	ДанныеОтвета.Свойство("НомерКассы", НомерКассы);	
	
	запись.ТипОбращения = ТипОбращения;
	запись.ТипЖалобы = ТипЖалобы;
	Если НЕ ЗначениеЗаполнено(запись.Продавец1) ТОгда
		запись.Продавец1 = Продавец1;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(запись.Телефон) ТОгда
		запись.Телефон = Телефон;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(запись.Номер_Карты_ОК) ТОгда
		запись.Номер_Карты_ОК = Номер_Карты_ОК;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(запись.СтруктурнаяЕдиница) ТОгда
		запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(запись.Номенклатура) ТОгда
		запись.Номенклатура = Номенклатура;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(запись.Производитель) ТОгда
		запись.Производитель = Производитель;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(запись.НомерКассы) ТОгда
		запись.НомерКассы = НомерКассы;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(запись.Номер_Бланка) ТОгда
		запись.Номер_Бланка = НомерЧека;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЧека) ТОгда
		Запись.ДатаСобытия = ДатаЧека;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(запись.Технолог) ТОгда
		запись.Технолог = ДанныеОтвета.Технолог;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(запись.ПродактМенеджер) ТОгда
		запись.ПродактМенеджер = ДанныеОтвета.ПродактМенеджер;	
	КонецЕсли;		
	
	
	набор.ОбменДанными.Загрузка = Истина;
	набор.ДополнительныеСвойства.Вставить("Отладка", Истина);
	
	набор.Записать();
	
КонецПроцедуры

Процедура ОтправитьПисьмо(ДанныеСтроки) Экспорт 	
		
	Запись = РегистрыСведений.ОбращенияПокупателей.СоздатьМенеджерЗаписи();
	Запись.GUID_Загрузки = ДанныеСтроки.GUID_Загрузки;
	Запись.id_OK = ДанныеСтроки.id_OK;
	Запись.ДатаДок = ДанныеСтроки.ДатаДок;
	Запись.Прочитать();
	
	Если НЕ Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	//Письмо
	СтруктураПараметров = РегистрыСведений.ОбращенияПокупателей.ПолучитьСтруктуруПараметровПисьма(Запись);
	
	Получатели = РегистрыСведений.ОбращенияПокупателей.ПолучитьСписокПолучателей(СтруктураПараметров);
	
	//Тест
	//Получатели = Новый ТаблицаЗначений;
	//Получатели.Колонки.Добавить("Получатель");
	//Получатели.Колонки.Добавить("Почта");	
	НоваяСтрока = Получатели.Добавить();
	НоваяСтрока.Получатель = Справочники.ФизическиеЛица.ПустаяСсылка();
	НоваяСтрока.Почта = "annyllat@gmail.com";
	//НоваяСтрока.Получатель = Справочники.ФизическиеЛица.ПустаяСсылка();
	//НоваяСтрока.Почта = "tarnoga@gmail.com";	
	//
	
	РегистрыСведений.ОбращенияПокупателей.ОтправитьПисьмо(СтруктураПараметров, Получатели);	
	
КонецПроцедуры

Функция ОпределитьСтатусОтвета(ДанныеОтвета, Рассылка = Ложь)
		
	ТипОбращения = ДанныеОтвета.ТипОбращения;
	ТипЖалобы = ДанныеОтвета.ТипЖалобы;
	ТЖЗаполнен = ЗначениеЗаполнено(ТипЖалобы);
	
	АвторЗаполнен = Истина; // Номер карты, автор и телефон. Они всегда заполнены?

	Рассылка = Ложь;
	Результат = Перечисления.СтатусДляКлассифицирующейСистемы.РаспознаноЧастично;
	
	Если НЕ ЗначениеЗаполнено(ТипОбращения) Тогда	
		Возврат Результат;
	КонецЕсли;
	
	КодТипа  = ЛЕВ(ТипОбращения.Наименование, 2);
	
	Если КодТипа = "01" Тогда
		//01 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы, технолог, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		// Очень важные(но не критичные): дата события, ТТ, дата производства, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель) и ЗначениеЗаполнено(ДанныеОтвета.Технолог)  Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;		
	ИначеЕсли КодТипа = "02" Тогда
		//02 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы,ТТ, технолог, суть обращения, источник (если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, дата производства, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель)
		и ЗначениеЗаполнено(ДанныеОтвета.Технолог) И ЗначениеЗаполнено(ДанныеОтвета.Магазин) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;		
	ИначеЕсли КодТипа = "03" Тогда
		//03 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы,ТТ, технолог, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, дата производства, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель)
		и ЗначениеЗаполнено(ДанныеОтвета.Технолог) И ЗначениеЗаполнено(ДанныеОтвета.Магазин) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;			
	ИначеЕсли КодТипа = "04" Тогда
		//04 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы,ТТ, продакт, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, дата производства, номер карты, автор, телефон, технолог. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель)
		и ЗначениеЗаполнено(ДанныеОтвета.ПродактМенеджер) И ЗначениеЗаполнено(ДанныеОтвета.Магазин) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;			
	ИначеЕсли КодТипа = "05" Тогда
		//05 Рассылки нет. Важные слоты: дата обращения, тип обращения, тип жалобы, номенклатура, ТТ, суть обращения, источник.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
		КонецЕсли;			
	ИначеЕсли КодТипа = "06" Тогда
		//06 Критичные: тип обращения, дата обращения, тип жалобы,ТТ, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): продавец, кассир по чеку, номер чека, номер кассы, дата события, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Магазин) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;			
	ИначеЕсли КодТипа = "07" Тогда
		//07 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы, технолог, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, ТТ, дата производства, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель) и ЗначениеЗаполнено(ДанныеОтвета.Технолог) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;			
	ИначеЕсли КодТипа = "08" Тогда
		//08 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы, продакт, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, технолог, ТТ, дата производства, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель) и ЗначениеЗаполнено(ДанныеОтвета.ПродактМенеджер) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;			
	ИначеЕсли КодТипа = "09" Тогда
		//09 Критичные: Номенклатура, производитель, тип обращения, дата обращения, тип жалобы, продакт, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, технолог, ТТ, дата производства, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель) и ЗначениеЗаполнено(ДанныеОтвета.ПродактМенеджер) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;		
	ИначеЕсли КодТипа = "10" Тогда
		//10 Критичные: Номенклатура, производитель, ТТ, тип обращения, дата обращения, тип жалобы, суть обращения, источник(если эти слоты заполнены обращение можно рассылать).
		//Очень важные(но не критичные): дата события, номер карты, автор, телефон. Остальные заполнять по возможности.
		Если ТЖЗаполнен И АвторЗаполнен и ЗначениеЗаполнено(ДанныеОтвета.Номенклатура) и ЗначениеЗаполнено(ДанныеОтвета.Производитель) и ЗначениеЗаполнено(ДанныеОтвета.Магазин) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;
	ИначеЕсли КодТипа = "11" Тогда
		//11Критичных нет, отправлять в любом случае. Заполнять слоты по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;
	ИначеЕсли КодТипа = "12" Тогда
		//12 Рассылки нет. Важные слоты: дата обращения, тип обращения, тип жалобы, суть обращения, источник, номер карты, автор, телефон, номер чека.
		//Остальные заполнять по возможности.
		//20 Критичных нет, отправлять в любом случае. Заполнять слоты по возможности.
		Если ТЖЗаполнен И АвторЗаполнен и ЗначениеЗаполнено(ДанныеОтвета.НомерЧека) Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;
	ИначеЕсли КодТипа = "13" Тогда
		//13 Рассылки нет. Слоты заполнять по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
		КонецЕсли;
	ИначеЕсли КодТипа = "14" Тогда
		//14 Рассылки нет. Важные слоты: дата обращения, тип обращения, тип жалобы, суть обращения, источник, номер карты, автор, телефон.
		//Остальные заполнять по возможности.
		Рассылка = Ложь;
	ИначеЕсли КодТипа = "15" Тогда	
		//15 Рассылки нет. Слоты заполнять по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
		КонецЕсли;
	ИначеЕсли КодТипа = "16" Тогда
		//16 Рассылки нет. Важные слоты: дата обращения, тип обращения, тип жалобы, суть обращения, источник, номер карты, автор, телефон, ТТ.
		//Остальные заполнять по возможности.

	ИначеЕсли КодТипа = "17" Тогда
		//17 Критичных нет, отправлять в любом случае. Заполнять слоты по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;
	ИначеЕсли КодТипа = "18" Тогда	
		//18 Рассылки нет. Слоты заполнять по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
		КонецЕсли;
	ИначеЕсли КодТипа = "19" Тогда
		//19 Рассылки нет. Слоты заполнять по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
		КонецЕсли;			

	ИначеЕсли КодТипа = "20" Тогда	
		//20 Критичных нет, отправлять в любом случае. Заполнять слоты по возможности.
		Если ТЖЗаполнен Тогда
			Результат = Перечисления.СтатусДляКлассифицирующейСистемы.Распознано;
			Рассылка = Истина;
		КонецЕсли;
	Иначе
	КонецЕсли;

	Возврат Результат;	
	
КонецФункции

Функция ЕстьИЗаполнено(Источник, Ключ)
	Возврат Источник.Свойство(Ключ) и ЗначениеЗаполнено(Источник[Ключ]);
КонецФункции

#КонецОбласти


#Область НайтиОбъект

Функция НайтиФизЛицоПоФИО(ФИО)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование = &Наименование
		|	И ФизическиеЛица.Активный
		|	И НЕ ФизическиеЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", ФИО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

Функция НайтиТипОбращения(Знач Код)
	Код = Формат(Код, "ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыОбращенийПокупателей.Ссылка
		|ИЗ
		|	Справочник.ТипыОбращенийПокупателей КАК ТипыОбращенийПокупателей
		|ГДЕ
		|	ТипыОбращенийПокупателей.Код = &Код
		|	И НЕ ТипыОбращенийПокупателей.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

Функция НайтиТипЖалобы(Знач Код)
	Код = Формат(Код, "ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЖалоб.Ссылка
		|ИЗ
		|	Справочник.ТипыЖалоб КАК ТипыЖалоб
		|ГДЕ
		|	ТипыЖалоб.Код = &Код
		|	И НЕ ТипыЖалоб.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

Функция НайтиМагазинПоАдресу(Адрес)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Адрес = &Адрес
	|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;	
КонецФункции
	
#КонецОбласти


#Область ОбработкаОтвета

Процедура ЕслиЗаполненноДобавитьВСписок(Список, Источник, КлючКласса, КлючУверенности, ТипКласса)
	Значение = Неопределено;
	
	Если ТипКласса = 1 Тогда//Тип жалобы	
		Если ЕстьИЗаполнено(Источник, КлючКласса) Тогда
			Значение = НайтиТипОбращения(Источник[КлючКласса]);					
		КонецЕсли;		
	Иначе//Тип обращения
	    Если ЕстьИЗаполнено(Источник, КлючКласса) Тогда
			Значение = НайтиТипЖалобы(Источник[КлючКласса]);
		КонецЕсли;	
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Уверенность = Источник[КлючУверенности];
	
	Структура = Новый Структура("Значение, Уверенность", Значение, Уверенность);
		
	Список.Добавить(Структура);		
КонецПроцедуры

Функция ПреобразоватьВЧисло(Стр)
	
	Если ТипЗнч(Стр) = Тип("Число") Тогда
		Возврат Стр;
	ИначеЕсли Стр = "" Тогда
		Возврат 0;
	Иначе
		Попытка
			Возврат Число(Стр);			
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьВДату(Стр)
	
	Если ТипЗнч(Стр) = Тип("Дата") Тогда
		Возврат Стр;
	ИначеЕсли Стр = "" Тогда
		Возврат Дата(1,1,1);
	Иначе
		СтрДата = СтрЗаменить(Стр, "T", "");//2018-07-28T19:37:57
		СтрДата = СтрЗаменить(СтрДата, "-", "");
		СтрДата = СтрЗаменить(СтрДата, ":", "");
		Попытка
			Возврат Дата(СтрДата);			
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция СформироватьМассивТипыОбращений(ДанныеОтвета) Экспорт 
	опЧисло = Новый ОписаниеТипов("Число",
		 Новый КвалификаторыЧисла(10, 5, ДопустимыйЗнак.Любой));
	опСтрока = Новый ОписаниеТипов("Строка", ,
			   Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная));
			   
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Класс", опСтрока);
	Таблица.Колонки.Добавить("КлассУверенность", опЧисло);
	Таблица.Колонки.Добавить("ПодКласс", опСтрока);
	Таблица.Колонки.Добавить("ПодклассУверенность", опЧисло);
	
	Для каждого Класс Из ДанныеОтвета.classes Цикл
		Для каждого ПодКласс Из Класс.subclasses Цикл
			Строка = Таблица.Добавить();
			
			Код = Формат(Класс.class_number, "ЧГ=");
			Строка.Класс = Код;
			Строка.КлассУверенность = Класс.class_confidence;
			
		    Строка.Подкласс = Формат(ПодКласс.subclass_number, "ЧГ=");
			Строка.ПодклассУверенность = ПодКласс.subclass_confidence;
		КонецЦикла;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз.Класс,
		|	тз.КлассУверенность,
		|	тз.ПодКласс,
		|	тз.ПодклассУверенность
		|ПОМЕСТИТЬ тз
		|ИЗ
		|	&тз КАК тз
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТипыОбращенийПокупателей.Ссылка КАК ТипОбращения,
		|	тз.КлассУверенность КАК ТипОбращенияУверенность,
		|	ТипыЖалоб.Ссылка КАК ТипЖалобы,
		|	тз.ПодклассУверенность КАК ТипЖалобыУверенность
		|ИЗ
		|	тз КАК тз
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыОбращенийПокупателей КАК ТипыОбращенийПокупателей
		|		ПО тз.Класс = ТипыОбращенийПокупателей.Код
		|			И (НЕ ТипыОбращенийПокупателей.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыЖалоб КАК ТипыЖалоб
		|		ПО тз.ПодКласс = ТипыЖалоб.Код
		|			И (НЕ ТипыЖалоб.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОбращенияУверенность УБЫВ,
		|	ТипЖалобыУверенность УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(ТипОбращенияУверенность)
		|ПО
		|	ТипОбращения";
	
	Запрос.УстановитьПараметр("тз", Таблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивТипыОбращений = Новый Массив;	
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДЗ = Выборка.Выбрать();
		
		МассивТипыЖалоб = Новый Массив;
		
		Пока ВыборкаДЗ.Следующий() Цикл
			Структура = Новый Структура("Значение, Уверенность", ВыборкаДЗ.ТипЖалобы, ВыборкаДЗ.ТипЖалобыУверенность);
			МассивТипыЖалоб.Добавить(Структура);
		КонецЦикла;
		
		Структура = Новый Структура("Значение, Уверенность", Выборка.ТипОбращения, Выборка.ТипОбращенияУверенность);
		Структура.Вставить("МассивТипыЖалоб", МассивТипыЖалоб);		
		МассивТипыОбращений.Добавить(Структура);
	КонецЦикла;

	Возврат МассивТипыОбращений;
КонецФункции

Функция СформироватьМассивНоменклатуры(ДанныеОтвета) Экспорт
	
	опЧисло		= Новый ОписаниеТипов("Число",
		 	Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	опСтрока	= Новый ОписаниеТипов("Строка", ,
			Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная));
	опДата		= Новый ОписаниеТипов("Дата");			   
			   
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КодНоменклатуры", опЧисло);
	Таблица.Колонки.Добавить("КодПроизводителя", опЧисло);
	Таблица.Колонки.Добавить("НомерЧека", опЧисло);
	Таблица.Колонки.Добавить("НомерКассы", опЧисло);
	Таблица.Колонки.Добавить("НомерМагазина", опЧисло);
	Таблица.Колонки.Добавить("ДатаЧека", опДата);
	Таблица.Колонки.Добавить("Уверенность", опЧисло);
	
	Для каждого Стр Из ДанныеОтвета.nomenclatures Цикл
		Строка = Таблица.Добавить();		
		Строка.КодНоменклатуры = ПреобразоватьВЧисло(Стр.id_tov);
		Строка.КодПроизводителя = ПреобразоватьВЧисло(Стр.id_kontr);
		Строка.НомерЧека = ПреобразоватьВЧисло(Стр.id_check);
		Строка.НомерКассы = ПреобразоватьВЧисло(Стр.id_cash);
		Строка.НомерМагазина = ПреобразоватьВЧисло(Стр.id_shop);
		Строка.ДатаЧека = ПреобразоватьВДату(Стр.date);
		Строка.Уверенность = Стр.confidence;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз.КодНоменклатуры,
		|	тз.КодПроизводителя,
		|	тз.Уверенность,
		|	тз.НомерКассы,
		|	тз.НомерЧека,
		|	тз.НомерМагазина,
		|	тз.ДатаЧека
		|ПОМЕСТИТЬ тз
		|ИЗ
		|	&тз КАК тз
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Контрагент,
		|	тз.Уверенность КАК Уверенность,
		|	тз.НомерКассы,
		|	тз.НомерЧека,
		|	тз.ДатаЧека,
		|	ЕСТЬNULL(СтруктурныеЕдиницы.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Магазин
		|ИЗ
		|	тз КАК тз
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО тз.КодНоменклатуры = Номенклатура.id_tov
		|			И (НЕ Номенклатура.ПометкаУдаления)
		|			И (НЕ тз.КодНоменклатуры = 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО тз.КодПроизводителя = Контрагенты.ИД
		|			И (НЕ Контрагенты.ПометкаУдаления)
		|			И (НЕ тз.КодПроизводителя = 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО (НЕ тз.НомерМагазина = 0)
		|			И тз.НомерМагазина = СтруктурныеЕдиницы.НомерТочки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уверенность УБЫВ";
	
	Запрос.УстановитьПараметр("тз", Таблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивНоменклатуры = Новый Массив;	
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Номенклатура, Производитель, Уверенность, НомерКассы, НомерЧека, Магазин, ДатаЧека",
			Выборка.Номенклатура, Выборка.Контрагент, Выборка.Уверенность, Выборка.НомерКассы, Выборка.НомерЧека, Выборка.Магазин, Выборка.ДатаЧека);
		МассивНоменклатуры.Добавить(Структура);
	КонецЦикла;

	Возврат МассивНоменклатуры;	
	
КонецФункции

Функция СформироватьДанныеОтвета(СтрокаJSON, ПорогДостоверности, ДатаДок, УИД) Экспорт 
	
	ДанныеОтвета	= ТелеграмТехБот.ПрочитатьJSONИзСтроки(СтрокаJSON);
	СтрокаJSON		= ТелеграмТехБот.ЗаписатьJSONВСтроку(ДанныеОтвета);
	Результат		= Новый Структура("GUID_Загрузки, МассивТипыОбращений, ТипОбращения, ТипЖалобы, МассивНоменклатура, Номенклатура, Производитель, НомерЧека, ДатаЧека, "
		+ "Магазин, Продавец1, Адрес, Телефон, Номер_Карты_ОК, Технолог, ПродактМенеджер",
		"", Неопределено, Справочники.ТипыОбращенийПокупателей.ПустаяСсылка(), Справочники.ТипыЖалоб.ПустаяСсылка(), Неопределено, Справочники.Номенклатура.ПустаяСсылка(),
		Справочники.Контрагенты.ПустаяСсылка(), 0, Дата(1,1,1), Справочники.СтруктурныеЕдиницы.ПустаяСсылка(), Справочники.ФизическиеЛица.ПустаяСсылка(), "", "", "",
		Справочники.ФизическиеЛица.ПустаяСсылка(),  Справочники.ФизическиеЛица.ПустаяСсылка()
	);
	
	Попытка
		Результат.Вставить("GUID_Загрузки", ДанныеОтвета.id);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	МассивТипыОбращений = СформироватьМассивТипыОбращений(ДанныеОтвета);
	
	Результат.МассивТипыОбращений = МассивТипыОбращений;
		
	Если МассивТипыОбращений.Количество() > 0 Тогда		
		Результат.ТипОбращения = РезультатБольшеРавно(МассивТипыОбращений[0].Уверенность, МассивТипыОбращений[0].Значение, ПорогДостоверности);
		
		МассивТипыЖалоб = МассивТипыОбращений[0].МассивТипыЖалоб;
		Результат.ТипЖалобы = РезультатБольшеРавно(МассивТипыЖалоб[0].Уверенность, МассивТипыЖалоб[0].Значение, ПорогДостоверности);
	КонецЕсли;
	
//Номенклатура
	МассивНоменклатура = СформироватьМассивНоменклатуры(ДанныеОтвета);
	
	Результат.МассивНоменклатура = МассивНоменклатура;
		
	Если МассивНоменклатура.Количество() > 0 И МассивНоменклатура[0].Уверенность >= ПорогДостоверности Тогда		
		Результат.Номенклатура = МассивНоменклатура[0].Номенклатура;
		Если ЗначениеЗаполнено(МассивНоменклатура[0].Производитель) Тогда
			Результат.Производитель = МассивНоменклатура[0].Производитель;
			Результат.НомерЧека = МассивНоменклатура[0].НомерЧека;
			Результат.ДатаЧека = МассивНоменклатура[0].ДатаЧека;
			Если ЗначениеЗаполнено(МассивНоменклатура[0].Магазин) Тогда
				Результат.Магазин = МассивНоменклатура[0].Магазин;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
//Продавец
	Если ЕстьИЗаполнено(ДанныеОтвета, "fio_salesman") Тогда
		Результат.Продавец1 = НайтиФизЛицоПоФИО(ДанныеОтвета.fio_salesman);
	КонецЕсли;
//Магазин	
	Если ЕстьИЗаполнено(ДанныеОтвета, "address") Тогда
		Результат.Адрес = ДанныеОтвета.address;
		Если ЕстьИЗаполнено(Результат, "Магазин") Тогда
			Результат.Магазин = НайтиМагазинПоАдресу(ДанныеОтвета.address);
		КонецЕсли;
	КонецЕсли;
//Телефон	
	Если ЕстьИЗаполнено(ДанныеОтвета, "phone_number") Тогда
		Результат.Телефон = ДанныеОтвета.phone_number;
	КонецЕсли;
//Номер карты	
	Если ЕстьИЗаполнено(ДанныеОтвета, "card_number") Тогда
		Результат.Номер_Карты_ОК = ДанныеОтвета.card_number;
	КонецЕсли;
	
	//+++ ak golv ИП-00020632
	Если НЕ ЕстьИЗаполнено(Результат, "Магазин") И ЕстьИЗаполнено(Результат, "ТипОбращения") И Результат.ТипОбращения.Код =  "206" И ЗначениеЗаполнено(УИД) Тогда
		НомерМагазина = ПолучитьНомерМагазинаПоследнейПокупки(УИД, ДанныеОтвета.card_number);
		Если ЗначениеЗаполнено(НомерМагазина) ТОГда
			Результат.Магазин = Справочники.СтруктурныеЕдиницы.НайтиПоРеквизиту("НомерТочки", НомерМагазина);
		КонецЕсли;
	КонецЕсли;
	//--- ak golv ИП-00020632
	
	
	Если ЗначениеЗаполнено(Результат.Номенклатура) И (ЗначениеЗаполнено(Результат.Магазин) ИЛИ ЗначениеЗаполнено(Результат.Производитель)) Тогда
		Результат.Технолог = РегистрыСведений.ОбращенияПокупателей.ПолучитьТехнолога(Результат.Номенклатура, Результат.Производитель, Результат.Магазин, ДатаДок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Номенклатура) И ЗначениеЗаполнено(Результат.Производитель) Тогда
		Мас = РегистрыСведений.ОбращенияПокупателей.ПолучитьПродактМенеджера(Результат.Номенклатура, Результат.Производитель);
		Результат.ПродактМенеджер = ?(Мас.Количество() = 0, Справочники.ФизическиеЛица.ПустаяСсылка(), Мас[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатБольшеРавно(Значение, ЗначениеРезультат, Порог) 	
	Если Значение >= Порог Тогда
		Возврат ЗначениеРезультат;
	Иначе 	
	    Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти


#Область ДанныеДляФормыЗаписи

Функция ФорматУверенностьПроцент(Значение)
	Возврат Формат(Значение * 100, "ЧДЦ=1; ЧГ=") + "%";
КонецФункции

Функция СформироватьСписокЗначений_ТипОбращения(МассивДанных)
	Список = Новый СписокЗначений;
	
	Для каждого элем Из МассивДанных Цикл
		Список.Добавить(элем.Значение, "" + элем.Значение + " - " + ФорматУверенностьПроцент(элем.Уверенность));	
	КонецЦикла;
	
	Возврат Список;
КонецФункции

Функция СформироватьСписокЗначений_ТипЖалобы(МассивДанных)	
	Результат = Новый Массив;
	
	Для каждого элем Из МассивДанных Цикл
		Список = Новый СписокЗначений;
		
		Для каждого элем1 Из элем.МассивТипыЖалоб Цикл
			Список.Добавить(элем1.Значение, "" + элем1.Значение + " - " + ФорматУверенностьПроцент(элем1.Уверенность));	
		КонецЦикла;
		
		ДанныеОбращения = Новый Структура("ТипОбращения, Список", элем.Значение, Список);
		
		Результат.Добавить(ДанныеОбращения);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// +++ golv ИП-00018018.02
Функция СформироватьСписокЗначений_Номенклатура(МассивДанных)
	
	Список = Новый СписокЗначений;	
	Для каждого элем Из МассивДанных Цикл
		Список.Добавить(элем.Номенклатура, "" + элем.Номенклатура + " - " + ФорматУверенностьПроцент(элем.Уверенность));	
	КонецЦикла;	
	Возврат Список;
	
КонецФункции
// --- golv ИП-00018018.02

Функция ПолучитьДанныеОтвета(id_OK,GUID_Загрузки,ДатаДок, ВсеДанные = Ложь) Экспорт 
	
	запись = РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьМенеджерЗаписи();
	запись.id_OK = id_OK;
	запись.GUID_Загрузки = GUID_Загрузки;
	запись.ДатаДок = ДатаДок;	
	запись.Прочитать();
	
	Если Не запись.Выбран() Тогда
		Возврат Неопределено;	
	КонецЕсли;
		
	Данные = запись.ОтветКлассифицирующейСистемы.Получить().Данные;
	
	Результат = Новый Структура;
	
	Если ВсеДанные Тогда
		Результат = Данные;
	КонецЕсли;
	
	Результат.Вставить("СписокТипыОбращения", СформироватьСписокЗначений_ТипОбращения(Данные.МассивТипыОбращений));
	Результат.Вставить("ДанныеТипыЖалоб", СформироватьСписокЗначений_ТипЖалобы(Данные.МассивТипыОбращений));
	// +++ golv ИП-00018018.02
	МассивНоменклатура = Неопределено;
	Если НЕ  Данные.Свойство("МассивНоменклатура", МассивНоменклатура) Тогда
		МассивНоменклатура = Новый Массив;
	КонецЕсли;
	Результат.Вставить("СписокНоменклатура", СформироватьСписокЗначений_Номенклатура(МассивНоменклатура));
	Результат.Вставить("МассивНоменклатура", МассивНоменклатура);
	// --- golv ИП-00018018.02
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Параметры

Функция ПолучитьПараметры() Экспорт 
	Попытка
		Параметры = ЗагрузитьПараметры();	
	Исключение
	    Параметры = Новый Структура;
	КонецПопытки;
	
	ДобавитьЕслиНету(Параметры, "Первые", "10");
	ДобавитьЕслиНету(Параметры, "ПорогДостоверности", 0.7);
	ДобавитьЕслиНету(Параметры, "ОбращенияПокупателейКС_Записать", Истина);
	ДобавитьЕслиНету(Параметры, "ОбращенияПокупателей_Записать", Истина);
	ДобавитьЕслиНету(Параметры, "ПорогДостоверности", Истина);
	
	Возврат Параметры;
КонецФункции

Процедура ДобавитьЕслиНету(Структура, Ключ, Значение)
	Если Структура.Свойство(Ключ) Тогда
		Возврат;	
	КонецЕсли;
	
	Структура.Вставить(Ключ, Значение);
КонецПроцедуры

Функция ЗагрузитьПараметры() Экспорт 	
	запись = РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьМенеджерЗаписи();
	запись.id_OK = 1;
	запись.GUID_Загрузки = "Параметры";
	запись.ДатаДок = '00010101';
	
	запись.Прочитать();
	
	Если Не запись.Выбран() Тогда
		Возврат Новый Структура;	
	КонецЕсли;	

	Результат = Неопределено;
	
	Попытка	
		Структура = запись.ОтветКлассифицирующейСистемы.Получить();
		
		Если ТипЗнч(Структура) = Тип("Структура") Тогда
			Результат = Структура;
		Иначе 
			Результат = Новый Структура;
		КонецЕсли;
	Исключение
	    Результат = Новый Структура;
	КонецПопытки;
	
	Возврат Структура;
КонецФункции

Процедура СохранитьПараметры(Структура) Экспорт 
	запись = РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьМенеджерЗаписи();
	запись.id_OK = 1;
	запись.GUID_Загрузки = "Параметры";
	запись.ДатаДок = '00010101';
	
	запись.ОтветКлассифицирующейСистемы = Новый ХранилищеЗначения(Структура);
	запись.Записать();	
КонецПроцедуры

#КонецОбласти
