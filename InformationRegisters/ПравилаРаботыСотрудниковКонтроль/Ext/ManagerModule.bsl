////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура предназначена для добавления записей контроля из спаравочника "Правила работы сотрудников"
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - структура параметров для заполнения (разработка)
//
Процедура ДобавитьЗаписьКонтроляПравилРаботы(СтруктураПараметров) Экспорт

	Для каждого ОбъектКотроля Из СтруктураПараметров.ОбъектыКонтроля Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПравилаРаботыСотрудниковКонтроль.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаКонтроля   = СтруктураПараметров.ДатаКонтроля;
		МенеджерЗаписи.ПравилаСсылка  = СтруктураПараметров.Ссылка;
		МенеджерЗаписи.СпособОтправки = ОбъектКотроля.Тип;
		
		МенеджерЗаписи.ОбъектКонтроля = ОбъектКотроля.Ссылка;
		
		МенеджерЗаписи.КонтролироватьПрочтение = СтруктураПараметров.СтруктураКонтроля.КонтролироватьПрочтение;
		МенеджерЗаписи.КонтролироватьПечать    = СтруктураПараметров.СтруктураКонтроля.КонтролироватьПечать;
		
		МенеджерЗаписи.ФункциональнаяРоль = ОбъектКотроля.ФункциональнаяРоль;
		МенеджерЗаписи.ТекстСообщения     = СтруктураПараметров.ТекстСообщения;
		
		МенеджерЗаписи.Версия = СтруктураПараметров.Версия;
		
		МенеджерЗаписи.ДатаДобавления = ТекущаяДата();

		МенеджерЗаписи.Записать();
		
	КонецЦикла;

КонецПроцедуры // ДобавитьЗаписьКонтроляПравилРаботы(СтруктураПараметров)()

// Процедура предназначена для добавления записей подтверждений действий "Правила работы сотрудников"
//
// Параметры:
//  СтруктураПараметров  - <Тип.Структура> - структура параметров для заполнения (разработка)
//
Процедура ПодтвердитьЗаписьКонтроляПравилРаботы(СтруктураПараметров) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ПравилаРаботыСотрудниковКонтроль.СоздатьМенеджерЗаписи();
	
    МенеджерЗаписи.ДатаКонтроля   = СтруктураПараметров.ДатаКонтроля;
	МенеджерЗаписи.ПравилаСсылка  = СтруктураПараметров.ПравилаСсылка;
	МенеджерЗаписи.СпособОтправки = СтруктураПараметров.СпособОтправки;
	МенеджерЗаписи.ОбъектКонтроля = СтруктураПараметров.ОбъектКонтроля;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран()Тогда
		
		МенеджерЗаписи.Прочитано   = СтруктураПараметров.Прочитано;
		МенеджерЗаписи.Распечатано = СтруктураПараметров.Распечатано;
		
		МенеджерЗаписи.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.ОтветственныйККМ = СтруктураПараметров.ОтветственныйККМ;
		
		МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаписьКонтроляПравилРаботы(СтруктураПараметров)()

// Устанавливает/снимает отметки "Выполнено", по полностью обработанным 
// пользователми и разосланным в письмах записям
//
// Параметры:
//   СтруктураПараметров  - <Тип.Структура> - Структура параметров для установки отборов
//   Выполнено  - <Тип.Булево> - Признак выполнения
//
Процедура УстановитьВыполнениеТребуемыхДействий(СтруктураПараметров, Выполнено) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПравилаРаботыСотрудниковКонтроль.СоздатьНаборЗаписей();

	Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		НаборЗаписей.Отбор[ЭлементСтруктуры.Ключ].Установить(ЭлементСтруктуры.Значение);       
	КонецЦикла;

	НаборЗаписей.Прочитать();
	
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		СтрокаНабора.Выполнено = Выполнено;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // УстановитьВыполнениеГруппеМагазинов(ВыборкаПомощникУправляющего)()

// Функция формирует и возвращает структуру параметров для открытия формы подтверждения требуемых действий
//
// Возвращаемое значение:
//  СтруктураПараметров  - <Тип.Структура> - структура параметров для заполнения (разработка)
//
Функция ПолучитьПараметрыОтображенияФормыКонтроля() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	Если Не ОбщегоНазначения.ПолучитьЗначениеКонстанты("ИспользоватьКонтрольКрутоПриСтартеСистемы") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметр сеанса ТекущийПродавец инициализируется только если подключение происходит
	// при сканировании штрихкода продавца (т.е. не для кажного входа) Рефакторинг УстановкаПараметровСеанса
	// в модуле Управляемого и Обычного приложения не проводился. 
	Попытка
		ТекущийПродавец = ПараметрыСеанса.ТекущийПродавец;
	Исключение
		ТекущийПродавец = Неопределено;
	КонецПопытки;
	
	//Отображение формы для работников Магазинов (Форма будет открыта Продавцов)
	Если ЗначениеЗаполнено(ТекущийПродавец) Тогда
		СпособОтправки = Перечисления.СпособыОтправкиУведомлений.Магазины;
		ОбъектКонтроля = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	Иначе
		СпособОтправки = Перечисления.СпособыОтправкиУведомлений.Пользователи;
		ОбъектКонтроля = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПравилаРаботыСотрудниковКонтроль.ДатаКонтроля КАК ДатаКонтроля,
	|	ПравилаРаботыСотрудниковКонтроль.ПравилаСсылка,
	|	ПравилаРаботыСотрудниковКонтроль.СпособОтправки,
	|	ПравилаРаботыСотрудниковКонтроль.ОбъектКонтроля КАК ОбъектКонтроля,
	|	ПравилаРаботыСотрудниковКонтроль.Прочитано,
	|	ПравилаРаботыСотрудниковКонтроль.Распечатано,
	|	ПравилаРаботыСотрудниковКонтроль.КонтролироватьПрочтение,
	|	ПравилаРаботыСотрудниковКонтроль.КонтролироватьПечать,
	|	ПравилаРаботыСотрудниковКонтроль.ФункциональнаяРоль,
	|	ПравилаРаботыСотрудниковКонтроль.ТекстСообщения,
	|	ПравилаРаботыСотрудниковКонтроль.Ответственный,
	|	ПравилаРаботыСотрудниковКонтроль.ОтветственныйККМ,
	|	ПравилаРаботыСотрудниковКонтроль.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ПравилаРаботыСотрудниковКонтроль КАК ПравилаРаботыСотрудниковКонтроль
	|ГДЕ
	|	(ПравилаРаботыСотрудниковКонтроль.КонтролироватьПечать
	|				И НЕ ПравилаРаботыСотрудниковКонтроль.Распечатано
	|			ИЛИ ПравилаРаботыСотрудниковКонтроль.КонтролироватьПрочтение
	|				И НЕ ПравилаРаботыСотрудниковКонтроль.Прочитано)
	|	И ПравилаРаботыСотрудниковКонтроль.ДатаКонтроля < &ТекущаяДата
	|	И ПравилаРаботыСотрудниковКонтроль.ОбъектКонтроля = &ОбъектКонтроля
	|	И ПравилаРаботыСотрудниковКонтроль.СпособОтправки = &СпособОтправки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКонтроля,
	|	Версия";
	
	Запрос.УстановитьПараметр("СпособОтправки", СпособОтправки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		МассивСтруктурПараметров = Новый Массив();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПараметров = Новый Структура();
			
			СтруктураПараметров.Вставить("ДатаКонтроля", Выборка.ДатаКонтроля); 
			СтруктураПараметров.Вставить("ПравилаСсылка", Выборка.ПравилаСсылка);
			СтруктураПараметров.Вставить("СпособОтправки", СпособОтправки);
			СтруктураПараметров.Вставить("ОбъектКонтроля", ОбъектКонтроля);
			
			СтруктураПараметров.Вставить("Прочитано", Выборка.Прочитано);
			СтруктураПараметров.Вставить("Распечатано", Выборка.Распечатано);
			СтруктураПараметров.Вставить("КонтролироватьПрочтение", Выборка.КонтролироватьПрочтение);
			СтруктураПараметров.Вставить("КонтролироватьПечать", Выборка.КонтролироватьПечать);
			
			СтруктураПараметров.Вставить("ТекстСообщения", Выборка.ТекстСообщения);
			СтруктураПараметров.Вставить("Версия", Выборка.Версия);
			
			СтруктураПараметров.Вставить("ТекущийПродавец", ТекущийПродавец);

			МассивСтруктурПараметров.Добавить(СтруктураПараметров);
			
		КонецЦикла;
		
		Возврат МассивСтруктурПараметров;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции