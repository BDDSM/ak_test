// Хранит список видов настроек, для которых разрешен выбор группы
Перем мСписокНастроекВыбораГруппы;

// Содержит имя источника между которым идет обмен событиями
Перем ИсточникСобытий;

Перем мЕстьПравоАдминистрированияПользователей;

// Константы типов
Перем ТипПользователи;


// Процедура изменяет доступность формы
// Если владелец настроек не задан, то форма отображается в режиме "только просмотр"
//
Процедура УстановитьДоступностьФормы()

	ТолькоПросмотр = ВладелецНастроекСсылка.Пустая();
	
	ЭлементыФормы.ДеревоНастроек.ТолькоПросмотр = ТолькоПросмотр;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеСохранитьНастройки.Доступность = НЕ ТолькоПросмотр;
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеПеречитать.Доступность = НЕ ТолькоПросмотр;
	
КонецПроцедуры // УстановитьДоступностьФормы


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЕРЕВА НАСТРОЕК

// Функция обрабатывает событие при смене владельца настроек
// Для модифицированных настроек выдается запрос на сохранение
// Если пользователь отменил сохранение, то источнику посылается оповещение об отмене сохранения
// Источник может отработать это оповещение, например отменить выбор владельца настроек
//
Функция ОбработкаПриСменеВладельцаНастроек(ВладелецНастроекСсылкаНовый)
	
	Если ВладелецНастроекСсылкаНовый <> ВладелецНастроекСсылка Тогда
		
		Если НЕ СохранитьНастройки(Истина) Тогда
			// Отменили сохранение, оповестим
			Оповестить("НастройкиПользователя_ОтменаСохранения", ВладелецНастроекСсылка, ИсточникСобытий);
			Возврат Ложь;
		КонецЕсли;
		
		Если ВладелецНастроекСсылкаНовый <> Неопределено
			И ВладелецНастроекСсылкаНовый.ЭтоГруппа Тогда
			
			ВладелецНастроекСсылка = Неопределено;
		Иначе	
			ВладелецНастроекСсылка = ВладелецНастроекСсылкаНовый;
		КонецЕсли; 
		
		ПрочитатьНастройки();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаПриСменеВладельцаНастроек

// Процедура обновляет информацию в таблице настроек
// Если передан параметр "ПользовательНастроек", то будут прочитаны настройки этого пользователя, 
// но владелец настроек не изменится (используется в сервисе заполнения - копирование настроек)
//
Процедура ПрочитатьНастройки(ПользовательНастроек = Неопределено)
	
	Если ПользовательНастроек = Неопределено Тогда
		ПользовательНастроек     = ВладелецНастроекСсылка;
		РежимКопированияНастроек = Ложь;
	Иначе
		РежимКопированияНастроек = Истина;
	КонецЕсли;
	
	ЭтоНастройкиПользователя_Новый = Ложь;
	ТипСсылки = ТипЗнч(ПользовательНастроек);
	Если ТипСсылки = ТипПользователи Тогда
		ТекстВладелецНастроек_Новый    = "Пользователь - " + ПользовательНастроек.Наименование;
		ЭтоНастройкиПользователя_Новый = Истина;
	Иначе
		ТекстВладелецНастроек_Новый = "";
	КонецЕсли;
	
	// В запросах не используем РАЗРЕШЕННЫЕ, 
	// т.к. текущий пользователь может прочесть только свои настройки
	// Поэтому, если попадется значение настройки, к которой у пользователя нет доступа,
	// пусть он об этом знает
	Запрос = Новый Запрос;
	Если ПользовательНастроек = Неопределено ИЛИ ПользовательНастроек.Пустая() Тогда
		Запрос.Текст = "ВЫБРАТЬ
			|	Настройки.Родитель,
			|	Настройки.Ссылка,
			|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
			|	Неопределено КАК Значение
			|ИЗ
			|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
			|ГДЕ
			|	(НЕ Настройки.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа ИЕРАРХИЯ,
			|	Настройки.Наименование";
	Иначе
		// Запрос для настроек пользователя
		Запрос.Текст = "ВЫБРАТЬ
		               |	Настройки.Родитель,
		               |	Настройки.Ссылка,
		               |	Настройки.ЭтоГруппа КАК ЭтоГруппа,
		               |	ЗначениеНастроекПользователя.Значение КАК Значение
		               |ИЗ
		               |	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроекПользователя
		               |		ПО (ЗначениеНастроекПользователя.Настройка = Настройки.Ссылка)
		               |			И (ЗначениеНастроекПользователя.Пользователь = &Ссылка)
		               |ГДЕ
		               |	(НЕ Настройки.ПометкаУдаления)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЭтоГруппа ИЕРАРХИЯ,
		               |	Настройки.Наименование";
		Запрос.УстановитьПараметр("Ссылка", ПользовательНастроек);
	КонецЕсли; 
	
	ДоступныЗУПРоли = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл() или 
						НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл() или
						РольДоступна("КадровикУправленческихДанных") или
						НастройкаПравДоступаПереопределяемый.ДоступнаРольМенеджераПоНабору() или
						РольДоступна("РасчетчикУправленческойЗарплаты");
						
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//Если Выборка.Ссылка = ПланыВидовХарактеристик.НастройкиПользователей.УдалитьИзменениеПользователяВКалендареПользователя Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//Если НЕ ДоступныЗУПРоли и (Выборка.Ссылка = ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол или
		//	Выборка.Ссылка = ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьУправленческийРежимРабочегоСтола) Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		СтрокаНастройки = ДеревоНастроек.Строки.Найти(Выборка.Ссылка, "Настройка", Истина);
		Если СтрокаНастройки = Неопределено Тогда
			Если НЕ Выборка.Родитель.Пустая() Тогда
				// Найдем группу настройки, если ее нет, то создадим
				СтрокаГруппы = ДеревоНастроек.Строки.Найти(Выборка.Родитель, "Настройка", Истина);
				Если СтрокаГруппы=Неопределено Тогда
					СтрокаГруппы = ДеревоНастроек.Строки.Добавить();
					СтрокаГруппы.Настройка = Выборка.Родитель;
					СтрокаГруппы.ЭтоНастройка = Ложь;
				КонецЕсли;
			Иначе
				СтрокаГруппы = ДеревоНастроек;
			КонецЕсли;		
			
			СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			СтрокаНастройки.ЭтоНастройка = НЕ Выборка.ЭтоГруппа;
		КонецЕсли;
		
		ЗначениеНастройки = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		
		СтрокаНастройки.Значение = ЗначениеНастройки;
		
	КонецЦикла;
	
	Если НЕ РежимКопированияНастроек Тогда
		ТекстВладелецНастроек = ТекстВладелецНастроек_Новый;
		ЭтоНастройкиПользователя = ЭтоНастройкиПользователя_Новый;
		
		Модифицированность = Ложь;
		
		УстановитьДоступностьФормы();
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьНастройки

// Функция выполняет запись значений настроек в регистр сведений
//
Функция СохранитьНастройки(Спрашивать)
	
	Если НЕ Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Спрашивать Тогда
		
		СоставКнопок = РежимДиалогаВопрос.ДаНетОтмена;
		
		Ответ = Вопрос("Настройки были изменены. Сохранить?", СоставКнопок,, КодВозвратаДиалога.Отмена, Заголовок);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Возврат Ложь;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
			Модифицированность = Ложь;
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли; 
	
	// Получим необходимые строки с настройками и добавим их в набор записей
	СтрокиНастроек = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоНастройка", Истина), Истина);

	НаборНастроек = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборНастроек.Отбор.Пользователь.Установить(ВладелецНастроекСсылка);
	
	Для каждого СтрокаНастройки Из СтрокиНастроек Цикл
		
		Запись = НаборНастроек.Добавить();
		Запись.Пользователь = ВладелецНастроекСсылка;
		Запись.Настройка = СтрокаНастройки.Настройка;
		Запись.Значение = СтрокаНастройки.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастройки.Значение);
		
	КонецЦикла;
	
	НаборНастроек.Записать();
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции // СохранитьНастройки
   
// Обработчик события НачалоВыбора значения настройки
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка)=Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	КонецЕсли;
	
	НастройкаВыбора = ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка;
	
	Модифицированность = Истина;
	
	Если НастройкаВыбора = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКаталогФайлов Тогда
		
		СтандартнаяОбработка = Ложь;
	
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Каталог = Элемент.Значение;
		Диалог.Заголовок = "Основной каталог файлов пользователя";
		Если Диалог.Выбрать() Тогда
			Элемент.Значение = Диалог.Каталог;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении значения настройки
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДеревоНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка) = Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Настройка.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.ЭтоНастройка Тогда
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки = 1
	Иначе
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки = 0
	КонецЕсли;
	
	Если ДанныеСтроки.Настройка.ТипЗначения.СодержитТип(Тип("Булево"))
		И ДанныеСтроки.Настройка.ТипЗначения.Типы().Количество() = 1 Тогда
		
		ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст  = Ложь;
		ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр   = Истина;
		ОформлениеСтроки.Ячейки.Значение.Флажок           = ДанныеСтроки.Настройка.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.ДеревоНастроек.ТекущиеДанные;
	
	ТекущиеДанные.Значение = Не ТекущиеДанные.Настройка.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура вызывается при открытии или при повторном открытии
// Выполняется попытка определить владельца настроек
//
Процедура ОбработкаОткрытияФормы()
	
	Если ПараметрТекущаяСтрока = Неопределено Тогда
		НовыйВладелецНастроекСсылка = НачальноеЗначениеВыбора;
		НачальноеЗначениеВыбора = Неопределено;
	Иначе
		НовыйВладелецНастроекСсылка = ПараметрТекущаяСтрока;
		ПараметрТекущаяСтрока = Неопределено;
	КонецЕсли; 
	
	Если НовыйВладелецНастроекСсылка = Неопределено Тогда
		// Попробуем определить владельца формы, если форма открывается не стандартно
		// Например, через меню Перейти
		Попытка
			
			ТипВладельца = ТипЗнч(ВладелецФормы);
			
			Если ТипВладельца = Тип("ТабличноеПоле") Тогда
				НовыйВладелецНастроекСсылка = ВладелецФормы.ТекущаяСтрока;
			ИначеЕсли ТипВладельца = Тип("Форма") Тогда
				НовыйВладелецНастроекСсылка = ВладелецФормы.Ссылка;
			КонецЕсли;
			
		Исключение
			
		КонецПопытки; 
	КонецЕсли;
	
	Если НовыйВладелецНастроекСсылка = Неопределено Тогда
		ВладелецНастроекСсылка = глЗначениеПеременной("глТекущийПользователь");
	ИначеЕсли НовыйВладелецНастроекСсылка.ЭтоГруппа Тогда
		ВладелецНастроекСсылка = Неопределено;
	Иначе
		ВладелецНастроекСсылка = НовыйВладелецНастроекСсылка;
	КонецЕсли;
	
	ПрочитатьНастройки();
	
КонецПроцедуры // ОбработкаОткрытияФормы
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы
//
Процедура ПриОткрытии()
	
	ДеревоНастроек.Колонки.Добавить("ЭтоНастройка", Новый ОписаниеТипов("Булево"));
	
	ОбработкаОткрытияФормы();
	
КонецПроцедуры

// Обработчик события ПриПовторномОткрытии формы
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ОбработкаОткрытияФормы();
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НастройкиПользователя_Показать" Тогда
		// Событие возникает при необходимости отобразить настройки для переданного параметра "Параметр"
		// "Параметр" ссылка на пользователя
		Если ОбработкаПриСменеВладельцаНастроек(Параметр) Тогда
			// Удачно изменили владельца настроек
			ИсточникСобытий = Источник;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДействиеСохранитьНастройки(Кнопка)
	
	СохранитьНастройки(Ложь);
	
КонецПроцедуры

// Обработчик события ПередЗакрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ СохранитьНастройки(Истина) Тогда
		Отказ = Истина
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы
//
Процедура ПриЗакрытии()
	
	//проверим необходимость закрытия рабочего стола
	//ФормаРабочегоСтола = РабочийСтолПереопределяемый.ФормаРабочегоСтола(глЗначениеПеременной("глТекущийПользователь"));
	//ИспользоватьРабочийСтол = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеРабочийСтол");
	//Если ФормаРабочегоСтола.Открыта() и Не ИспользоватьРабочийСтол Тогда
	//	// надо закрыть рабочий стол
	//	ОтветПользователя = Вопрос("Вы отключили использование ""Рабочего стола""." + Символы.ПС + "Закрыть сейчас ""Рабочий стол""?", РежимДиалогаВопрос.ДаНет);
	//	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
	//		ФормаРабочегоСтола.Закрыть();
	//	КонецЕсли;
	//ИначеЕсли ИспользоватьРабочийСтол и Не ФормаРабочегоСтола.Открыта() Тогда
	//	ФормаРабочегоСтола.Открыть();
	//	ЭтаФорма.Активизировать();

	//КонецЕсли;
	
	Оповестить("ЗаписьПользователя", ВладелецНастроекСсылка);
	
КонецПроцедуры

// Обработчик события нажатия на кнопку ДействиеПеречитать командной панели
//
Процедура ДействияФормыДействиеПеречитать(Кнопка)
	
	ПрочитатьНастройки();
	
КонецПроцедуры


ТипПользователи = Тип("СправочникСсылка.Пользователи");

ИсточникСобытий = Неопределено;
мСписокНастроекВыбораГруппы = Новый СписокЗначений;
