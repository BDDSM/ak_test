
Процедура СохранитьИзмененияВариантов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза"	, Новый Граница(ЭтотОбъект[0].Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивДат"	, ЭтотОбъект.ВыгрузитьКолонку("ДатаНачала"));
	Запрос.УстановитьПараметр("МассивТТ"	, ЭтотОбъект.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТЧОбеспечениеПерсоналом.Контрагент, РегистрИстория.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ВариантыОбеспечения.ТорговаяТочка, РегистрИстория.ТорговаяТочка) КАК ТорговаяТочка,
	|	ЕСТЬNULL(ВариантыОбеспечения.ДатаНачала, РегистрИстория.ДатаНачала) КАК ДатаНачала,
	|	ЕСТЬNULL(ТЧОбеспечениеПерсоналом.Должность, РегистрИстория.Должность) КАК Должность,
	|	ЕСТЬNULL(ТЧОбеспечениеПерсоналом.КоличествоЧеловек, РегистрИстория.КоличествоЧеловек) КАК КоличествоЧеловек,
	|	ЕСТЬNULL(ТЧОбеспечениеПерсоналом.НачалоСмены, РегистрИстория.НачалоСмены) КАК НачалоСмены,
	|	ЕСТЬNULL(ТЧОбеспечениеПерсоналом.ОкончаниеСмены, РегистрИстория.ОкончаниеСмены) КАК ОкончаниеСмены,
	|	ВЫБОР
	|		КОГДА ВариантыОбеспечения.ТорговаяТочка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отмена
	|ИЗ
	|	РегистрСведений.ВариантыОбеспеченияТТПерсоналомАутсорсинг.СрезПоследних(
	|			&ДатаСреза,
	|			ТорговаяТочка В (&МассивТТ)
	|				И ДатаНачала В (&МассивДат)) КАК ВариантыОбеспечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОбеспеченияПерсоналомАутсорсинг.ОбеспечениеПерсоналом КАК ТЧОбеспечениеПерсоналом
	|		ПО (ТЧОбеспечениеПерсоналом.Ссылка = ВариантыОбеспечения.ВариантОбеспеченияПерсоналом)
	|			И (НЕ ТЧОбеспечениеПерсоналом.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийПотребностиВПерсоналеАутсорсинг.СрезПоследних(
	|				&ДатаСреза,
	|				ТорговаяТочка В (&МассивТТ)
	|					И ДатаНачала В (&МассивДат)) КАК РегистрИстория
	|		ПО (РегистрИстория.Контрагент = ТЧОбеспечениеПерсоналом.Контрагент)
	|			И (РегистрИстория.ТорговаяТочка = ВариантыОбеспечения.ТорговаяТочка)
	|			И (РегистрИстория.ДатаНачала = ВариантыОбеспечения.ДатаНачала)
	|ГДЕ
	|	(НЕ РегистрИстория.Должность = ТЧОбеспечениеПерсоналом.Должность
	|			ИЛИ НЕ РегистрИстория.КоличествоЧеловек = ТЧОбеспечениеПерсоналом.КоличествоЧеловек
	|			ИЛИ НЕ РегистрИстория.НачалоСмены = ТЧОбеспечениеПерсоналом.НачалоСмены
	|			ИЛИ НЕ РегистрИстория.ОкончаниеСмены = ТЧОбеспечениеПерсоналом.ОкончаниеСмены)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		мРегистрИстория = РегистрыСведений.ИсторияИзмененийПотребностиВПерсоналеАутсорсинг;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.Отмена Тогда
				
				МенеджерЗаписи = мРегистрИстория.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ЭтотОбъект[0].Период;
				
			Иначе
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//Для Каждого ТекЗапись Из ЭтотОбъект Цикл
	//	
	//	ТекТорговаяТочка 	= ТекЗапись.ТорговаяТочка;
	//	ТекДатаНачала 		= ТекЗапись.ДатаНачала;
	//	
	//	ТЧПерсонал = ТекЗапись.ВариантОбеспеченияПерсоналом.ОбеспечениеПерсоналом;
	//	
	//	Для Каждого СтрокаТЧ Из ТЧПерсонал Цикл
	//		
	//		Если СтрокаТЧ.Контрагент.Пустая() Тогда  // только для сторонних контрагентов
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		МенеджерЗаписи = мРегистрИстория.СоздатьМенеджерЗаписи();
	//		
	//		МенеджерЗаписи.Период 			= ТекущаяДата();
	//		
	//		МенеджерЗаписи.Контрагент   	= СтрокаТЧ.Контрагент;
	//		МенеджерЗаписи.ТорговаяТочка 	= ТекТорговаяТочка;
	//		МенеджерЗаписи.ДатаНачала		= ТекДатаНачала;
	//		
	//		МенеджерЗаписи.Должность			= СтрокаТЧ.Должность;
	//		МенеджерЗаписи.КоличествоЧеловек	= СтрокаТЧ.КоличествоЧеловек;
	//		МенеджерЗаписи.НачалоСмены			= СтрокаТЧ.НачалоСмены;
	//		МенеджерЗаписи.ОкончаниеСмены		= СтрокаТЧ.ОкончаниеСмены;
	//		
	//		Попытка
	//			МенеджерЗаписи.Записать();
	//		Исключение
	//			
	//		КонецПопытки;
	//	КонецЦикла;
	//КонецЦикла;
	
КонецПроцедуры


Процедура ПриЗаписи(Отказ, Замещение)

	//Если НЕ Отказ Тогда
	//	
	//	Если ЭтотОбъект.Модифицированность() Тогда
	//		СохранитьИзмененияВариантов();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
КонецПроцедуры
