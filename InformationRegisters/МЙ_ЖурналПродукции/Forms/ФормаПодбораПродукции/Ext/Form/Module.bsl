&НаКлиенте
Перем КоличествоВыбранныхВСД;

&НаСервере
Процедура ЗаполнитьТаблицуПродукцииНаСервере()

	ТаблицаПодбора.ПолучитьЭлементы().Очистить();
	
	СхемаКомпоновкиДанных = РегистрыСведений.МЙ_ЖурналПродукции.ПолучитьМакет("МакетПодбораПродукции");
	//СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетПодбораПродукции");
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("НастройкиAPI", НастройкаAPI);	
	
	ДеревоРезультат = Новый ДеревоЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,	НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ИзмененныеОстатки = Новый Соответствие;	
	ИзмененныеОстаткиУпаковок = Новый Соответствие;
	
	Для Каждого СтрокаНоменклатура ИЗ ДеревоРезультат.Строки  Цикл
		НоваяСтрокаНоменклатура = ТаблицаПодбора.ПолучитьЭлементы().Добавить();
		
		НоваяСтрокаНоменклатура.Номенклатура = СтрокаНоменклатура.Номенклатура;  
		
		БылиНесопоставленные = Ложь;
		
		Для Каждого СтрокаДокумент Из СтрокаНоменклатура.Строки Цикл
			ОсталосьРаспределитьКоличество = СтрокаДокумент.КоличествоДокумент;
			ОсталосьРаспределитьВес = СтрокаДокумент.ВесДокумент;
			
			Для Каждого Строка Из СтрокаДокумент.Строки  Цикл
				Если ОсталосьРаспределитьКоличество = 0 ИЛИ ОсталосьРаспределитьВес = 0 Тогда
					Прервать;
				КонецЕсли; 
				
				
				Если ЗначениеЗаполнено(Строка.НачальноеЧислоУпаковок) И ЗначениеЗаполнено(Строка.НачальныйОбъем) Тогда
					Коэф_Пересчета_Упак_Объем = Строка.НачальноеЧислоУпаковок/Строка.НачальныйОбъем;
					Коэф_Пересчета_Объем_Упак = Строка.НачальныйОбъем/Строка.НачальноеЧислоУпаковок;
				Иначе					
					Коэф_Пересчета_Упак_Объем = 0;
					Коэф_Пересчета_Объем_Упак = 0;
				КонецЕсли;	
				
				НоваяСтрока = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
				
				НоваяСтрока.Коэф_Пересчета = Коэф_Пересчета_Упак_Объем;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.ОстатокЧислоУпаковок = Строка.packingAmount;
				
				Если НоваяСтрока.Пометка = 1 Тогда
					НоваяСтрокаНоменклатура.Пометка = 1;
					
					ТекущийОстаток =  ИзмененныеОстатки[НоваяСтрока.GUIDЗаписиЖурналаПродукции];
					
					Если ТекущийОстаток = Неопределено Тогда
						ТекущийОстаток = Строка.Остаток;
					КонецЕсли; 
					
					ТекущийОстатокУпаковок =  ИзмененныеОстаткиУпаковок[НоваяСтрока.GUIDЗаписиЖурналаПродукции];
					
					Если ТекущийОстатокУпаковок = Неопределено Тогда
						ТекущийОстатокУпаковок = Строка.packingAmount;
					КонецЕсли; 
					
					Если НоваяСтрока.УказанВес Тогда
						НоваяСтрока.Количество = Мин(ОсталосьРаспределитьВес, ТекущийОстаток);						
						КоличествоУпаковок = Мин(Окр(НоваяСтрока.Количество * НоваяСтрока.Коэф_Пересчета, 0), ТекущийОстатокУпаковок);
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
						
						ОсталосьРаспределитьВес = ОсталосьРаспределитьВес - НоваяСтрока.Количество;
					Иначе
						НоваяСтрока.Количество = Мин(ОсталосьРаспределитьКоличество, ТекущийОстаток);
						ОсталосьРаспределитьКоличество = ОсталосьРаспределитьКоличество - НоваяСтрока.Количество;
						
						КоличествоУпаковок = Мин(Окр(НоваяСтрока.Количество * НоваяСтрока.Коэф_Пересчета, 0), ТекущийОстатокУпаковок);
						
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
					КонецЕсли; 
					
					НоваяСтрокаНоменклатура.Количество = НоваяСтрокаНоменклатура.Количество + НоваяСтрока.Количество;	
					
					НоваяСтрокаНоменклатура.КоличествоУпаковок = НоваяСтрокаНоменклатура.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;	
					
					ИзмененныеОстатки.Вставить(НоваяСтрока.GUIDЗаписиЖурналаПродукции, ТекущийОстаток -  НоваяСтрока.Количество);					
					ИзмененныеОстаткиУпаковок.Вставить(НоваяСтрока.GUIDЗаписиЖурналаПродукции, ТекущийОстатокУпаковок -  НоваяСтрока.КоличествоУпаковок);
				Иначе 
					БылиНесопоставленные = Истина;
				КонецЕсли; 
			КонецЦикла;  
			
			НоваяСтрокаНоменклатура.КоличествоДокумент = НоваяСтрокаНоменклатура.КоличествоДокумент + Строка.КоличествоДокумент;								
			НоваяСтрокаНоменклатура.ВесДокумент = НоваяСтрокаНоменклатура.ВесДокумент + Строка.ВесДокумент;								
		КонецЦикла;  
		
		Если НоваяСтрокаНоменклатура.Пометка = 1 И БылиНесопоставленные Тогда
			НоваяСтрокаНоменклатура.Пометка = 2;
		КонецЕсли; 
	КонецЦикла;  
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПродукции(Команда)
	
	ЗаполнитьТаблицуПродукцииНаСервере();
	
	ОбновитьКоличествоВыбранныхВСД();
	
КонецПроцедуры


&НаСервере
Функция ОформитьВСДНаСервере()


	ПараметрыЗаполнения = Новый Структура;
	
	ФабрикаXD = ОбменССистемойВетис.ПолучитьФабрикуXDTOApplicationManagements();
	ПараметрыПодключения = ОбменССистемойВетис.ПолучитьПараметрыПодключения(ФабрикаXD, НастройкаAPI);
	
	ПараметрыФункции = ОбменССистемойВетис.ПолучитьПараметрыФункции("PrepareOutcomingConsignmentRequest", ФабрикаXD, НастройкаAPI);	
	
	СчетчикСозданных = 0;
	
	Для Каждого СтрокаНоменклатура  Из ТаблицаПодбора.ПолучитьЭлементы() Цикл
		
		Если СтрокаНоменклатура.Пометка = 0 Тогда 
			Продолжить;
		КонецЕсли; 
		
		СтрокиКУдалению = Новый Массив;
		
		СтрокиНоменклатуры = СтрокаНоменклатура.ПолучитьЭлементы();
		
		Для Каждого Строка Из СтрокиНоменклатуры Цикл
			
			Строка.Сообщение = "";
			
			Если Строка.Пометка = 0 Тогда 
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Строка.GUIDПолучателя) Тогда
				Строка.Сообщение = Строка.Сообщение  + "Не установлена привязка получателя. " + Символы.ПС;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Строка.Автомобиль) Тогда
				Строка.Сообщение = Строка.Сообщение  + "Не указан автомобиль. " + Символы.ПС;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Строка.GUIDЗаписиЖурналаПродукции)  Тогда
				Строка.Сообщение = Строка.Сообщение  + "Не указана запись журнала продукции. " + Символы.ПС;
			ИначеЕсли Строка.Количество = 0 Тогда 
				Строка.Сообщение = Строка.Сообщение  + "Не указано количество к списанию. " + Символы.ПС;
			КонецЕсли; 
			
			//+++АК ERMK 2018.12.03 ИП-00020563 
			Если Строка.ВидОперации = Перечисления.ВидыОперацийРасходСкладскойУчет.Реализация 
				И НЕ ЗначениеЗаполнено(Строка.ПолучательОсновнаяПлощадка) Тогда
				Строка.Сообщение = Строка.Сообщение  + "У получателя не указана Основная площадка. " + Символы.ПС;
			КонецЕсли; 
			//---АК ERMK
			
			Если Не ПустаяСтрока(Строка.Сообщение) Тогда
				Продолжить;
			КонецЕсли; 
			
			// Отправляем ВСД в Меркурий
			Delivery = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:Delivery");
			
			Delivery.uuid = Строка(Новый УникальныйИдентификатор);			
			Delivery.deliveryDate = Строка.ДатаДокумента;
			
			//Отправитель
			Delivery.consignor = ОбменССистемойВетис.ВернутьОтправительПолучатель(ФабрикаXD, Строка.GUIDОтправителя, ПараметрыПодключения.issuerId);
			
			
			//Получатель
			Если ЗначениеЗаполнено(Строка.GuidBEПолучателя) Тогда
				GuidBEПолучателя = Строка.GuidBEПолучателя;
			Иначе
				GuidBEПолучателя = ПараметрыПодключения.issuerId;
			КонецЕсли; 
			
			//Сторонняя розница
			Если ЗначениеЗаполнено(Строка.Получатель) И ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				Если Строка.Получатель.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.СторонняяРозница Тогда
					GuidBEПолучателя = ПолучитьGuidBEПолучателяСтороннейРозницы(Строка.Получатель);					
				КонецЕсли;
			КонецЕсли;								
			
			Delivery.consignee = ОбменССистемойВетис.ВернутьОтправительПолучатель(ФабрикаXD, Строка.GUIDПолучателя, GuidBEПолучателя);
			
			//Продукция
			Consignment = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:Consignment");
			
			Consignment.volume = Строка.Количество;
			
			Если ЗначениеЗаполнено(Строка.КоличествоУпаковок) = Истина И ЗначениеЗаполнено(Строка.GUID_Упаковки) Тогда
				Consignment.packingAmount = Строка.КоличествоУпаковок;		
				
				Consignment.packingList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:PackingFormList");
				Consignment.packingList.packingForm.Add(ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:PackingForm"));
				Consignment.packingList.packingForm[0].UUID = Строка.GUID_Упаковки;
			КонецЕсли;	
			
			//Если Не БезУпаковок Тогда
			//	Consignment.packingList = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:PackingFormList");
			//	Consignment.packingList.packingForm.Add(ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:PackingForm"));
			//	Consignment.packingList.packingForm[0].UUID = "fedf5ad4-053c-11e1-99b4-d8d385fbc9e8";
			//	Consignment.packingAmount = 1;
			//КонецЕсли;
			
			Consignment.unit = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:Unit");
			Consignment.unit.uuid = Строка.GUIDЕдиницыИзмерения;
			Consignment.sourceStockEntry = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:StockEntry");
			Consignment.sourceStockEntry.GUID = Строка.GUIDЗаписиЖурналаПродукции;
		
			Delivery.Consignment.Add(Consignment);
			
			//	Дополнительные сведения по накладной
			Delivery.accompanyingForms =  ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:ConsignmentDocumentList");
			Delivery.accompanyingForms.waybill =  ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:Waybill");
			Delivery.accompanyingForms.waybill.issueNumber = Строка.НомерДокумента;
			Delivery.accompanyingForms.waybill.issueDate = Строка.ДатаДокумента;
			//Delivery.accompanyingForms.waybill.issueSeries = "ВК";
			Delivery.accompanyingForms.waybill.type = 1;
			Delivery.accompanyingForms.waybill.transportInfo = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportInfo");
			Delivery.accompanyingForms.waybill.transportInfo.transportType = 1; 
			Delivery.accompanyingForms.waybill.transportInfo.transportNumber = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportNumber");
			Delivery.accompanyingForms.waybill.transportInfo.transportNumber.vehicleNumber = Строка.Автомобиль; 
			Delivery.accompanyingForms.waybill.transportStorageType = ОбщегоНазначения.ПолучитьИмяЗначенияПеречисленияПоСсылке(Строка.СпособХранения);
			
			//	Дополнительные сведения по ВСД
			vetCertificate = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "vetd:VetDocument");
			
			vetCertificate.purpose = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "argc:Purpose");
			vetCertificate.purpose.GUID = Строка.ЦельПеремещения.GUID; 
			
			vetCertificate.transportInfo = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportInfo");
			vetCertificate.transportInfo.transportType = 1;
			vetCertificate.transportInfo.transportNumber = ОбменССистемойВетис.ПолучитьОбъектXDTO(ФабрикаXD, "shp:TransportNumber");
			vetCertificate.transportInfo.transportNumber.vehicleNumber = Строка.Автомобиль;
			vetCertificate.transportStorageType = Delivery.accompanyingForms.waybill.transportStorageType; 

			Если Строка.ВетеринарнаяЭкспертиза = 2 Тогда
				vetCertificate.cargoInspected = Истина;
				vetCertificate.cargoExpertized = Истина;
			ИначеЕсли Строка.ВетеринарнаяЭкспертиза = 1 Тогда
				vetCertificate.cargoInspected = Истина;
				vetCertificate.cargoExpertized = Ложь;
			Иначе
				vetCertificate.cargoInspected = Ложь;
				vetCertificate.cargoExpertized = Ложь;
			КонецЕсли; 

			//vetCertificate.confirmedBy = ОбменССистемойВетис.ПолучитьUserИзФабрики(ФабрикаXD, НастройкаAPI.user);
			vetCertificate.locationProsperity = Строка.БлагополучиеМестности;
			
			Delivery.accompanyingForms.vetCertificate.Add(vetCertificate);			
			
			// Вызов функции
			СписокDelivery = Новый СписокЗначений;
			СписокDelivery.Добавить(Delivery);
			
			ПараметрыФункции.Вставить("Delivery", СписокDelivery);
			
			МассивСписков = Новый Массив;
			МассивСписков.Добавить("Delivery");
			ПараметрыФункции.Вставить("МассивСписков", МассивСписков);

			Ответ = ОбменССистемойВетис.ВыполнитьЗапросApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, "prepareOutcomingConsignmentRequest", Строка.Сообщение); 
			
			Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") ИЛИ НЕ ПустаяСтрока(Строка.Сообщение) Тогда 
				//Сообщить("Ошибка выполнения запроса");
				Продолжить;
			Иначе
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
			
			// Списываем указанное количество с записи журнала (не дожидаясь фонового обновления)
			МЗ = РегистрыСведений.МЙ_ЖурналПродукции.СоздатьМенеджерЗаписи();
			
			МЗ.GUID = Строка.GUIDЗаписиЖурналаПродукции;
			
			МЗ.Прочитать();
			
			МЗ.volume = МЗ.volume - Строка.Количество;
			
			МЗ.Записать();
			
			// Добавляем привязку в регистр
			vetDocument = Ответ.result.prepareOutcomingConsignmentResponse.vetDocument;
			
			МЗ = РегистрыСведений.ВетСвидетельстваПоступлений.СоздатьМенеджерЗаписи();
			
			МЗ.ДокПоступления = Строка.ДокументОтгрузки;
			МЗ.Номенклатура = Строка.Номенклатура; 
			МЗ.Количество = Строка.Количество;
			//++ХЖК
			МЗ.КоличествоУпаковок = Строка.КоличествоУпаковок;
			//--ХЖК
			
			МЗ.ДанныеВетСвидетельствДата = ОбменССистемойВетис.ПривестиКДате(ОбменССистемойВетис.ПолучитьСвойствоОбъектаXDTO(vetDocument, "issueDate"));		;
			МЗ.КемВыдан = vetDocument.confirmedBy.FIO;
			МЗ.UUID_ВСД = vetDocument.UUID;
			МЗ.GUIDЗаписиЖурналаПродукции = Строка.GUIDЗаписиЖурналаПродукции;

			МЗ.Записать();
			
			СчетчикСозданных = СчетчикСозданных + 1;
			
		КонецЦикла;  
		
		// Удяляем успешно  обработанные строки
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокиНоменклатуры.Удалить(СтрокаКУдалению);
		КонецЦикла;  
		
	КонецЦикла;  
	
	Возврат СчетчикСозданных ;
	
КонецФункции

&НаКлиенте
Процедура ОформитьВСД(Команда)
	
	ВремяНачала = ТекущаяДата();
	
	СозданоВСД = ОформитьВСДНаСервере();
	
	ВремяОкончания = ТекущаяДата();
	
	Сообщить("Формирование ВСД завершено. Сформировано " + СозданоВСД + " из " + КоличествоВыбранныхВСД + " документов." + Символы.ПС + "Время выполнения " + Формат(Дата(1,1,1) + (ВремяОкончания - ВремяНачала), "ДФ=ЧЧ:мм:сс"));
	
	Элементы.ТаблицаПодбора.Обновить();
	
	// Удалим полностью выписанные товары и перезаполним флажки
	СтрокиКУдалению = Новый Массив;	
	
	Для Каждого СтрокаНоменклатура  Из ТаблицаПодбора.ПолучитьЭлементы() Цикл
		Если СтрокаНоменклатура.ПолучитьЭлементы().Количество() = 0 Тогда 
			СтрокиКУдалению.Добавить(СтрокаНоменклатура);
		Иначе
			ТекущиеДанные = СтрокаНоменклатура.ПолучитьЭлементы()[0];
			СтрокаНоменклатура.Пометка = ?(УстановленоДляВсех(ТекущиеДанные), ТекущиеДанные.Пометка, 2);
		КонецЕсли; 
	КонецЦикла;		
	
	Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
		ТаблицаПодбора.ПолучитьЭлементы().Удалить(СтрокаКУдалению);
	КонецЦикла;  

	ОбновитьКоличествоВыбранныхВСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоВыбранныхВСД()
	
	КоличествоВыбранныхВСД	= 0;
	
	Для Каждого СтрокаНоменклатура  Из ТаблицаПодбора.ПолучитьЭлементы() Цикл
		//Если СтрокаНоменклатура.Пометка = 0 Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		Для Каждого Строка Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
			Если Строка.Пометка = 1 Тогда
				КоличествоВыбранныхВСД = КоличествоВыбранныхВСД + 1;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Строка.Автомобиль) = Ложь Тогда
				Если ЗначениеЗаполнено(Строка.Рейс) = Истина Тогда
					Сообщить("Невозможно выписать ВСД: не указан автомобиль для расходного ордера №"
					+ Строка(Строка.НомерДокумента)
					+ " от " + Формат(Строка.ДатаДокумента, "ДФ=dd.MM.yyyy") 
					+ " (" + Строка(Строка.Рейс) + ")");
				Иначе
					Сообщить("Невозможно выписать ВСД: расходный ордер №"
					+ Строка(Строка.НомерДокумента)
					+ " от " + Формат(Строка.ДатаДокумента, "ДФ=dd.MM.yyyy") 
					+ " не включен в рейс");
				КонецЕсли;	
			КонецЕсли;	
			//+++АК ERMK 2018.12.03 ИП-00020563 
			Если Строка.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСкладскойУчет.Реализация") 
				И НЕ ЗначениеЗаполнено(Строка.ПолучательОсновнаяПлощадка) Тогда
					Сообщить("Невозможно выписать ВСД: расходный ордер №"
					+ Строка(Строка.НомерДокумента)
					+ " от " + Формат(Строка.ДатаДокумента, "ДФ=dd.MM.yyyy") 
					+ " у получателя не указана Основная площадка");
			КонецЕсли; 
			//---АК ERMK
		КонецЦикла;  
	КонецЦикла;		
	
	Элементы.ФормаОформитьВСД.Заголовок = "Оформить ветеринарные документы (" + КоличествоВыбранныхВСД + ")";
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПодбораКолонкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаПодбораДокументОтгрузки" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Ключ", ТаблицаПодбора.НайтиПоИдентификатору(ВыбраннаяСтрока).ДокументОтгрузки);
		ОткрытьФорму("Документ.РасходныйОрдерСклад.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПродукцииПоНоменклатуре(Номенклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МЙ_СоответствиеНоменклатуры.ПродукцияВетис
	|ИЗ
	|	РегистрСведений.МЙ_СоответствиеНоменклатуры КАК МЙ_СоответствиеНоменклатуры
	|ГДЕ
	|	МЙ_СоответствиеНоменклатуры.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	
	Результат = Новый СписокЗначений;
	
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПродукцияВетис"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПодбораНомерЗаписиЖурналаПродукцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
		ТекущиеДанные = Элементы.ТаблицаПодбора.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("РежимВыбора",  Истина);
		
		ПараметрыФормы.Вставить("GUID",  ТекущиеДанные.GUIDЗаписиЖурналаПродукции);
		
		НастройкиКомпоновки = КомпоновщикНастроек.Настройки;		
		
		ПараметрыОтбора = Новый Структура();
		
		Если НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("СопоставлятьПоСтруктурнойЕдинице").Значение Тогда
			ПараметрыОтбора.Вставить("СтруктурнаяЕдиница",  ТекущиеДанные.Отправитель);		
		КонецЕсли; 
		
		Если НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("СопоставлятьПоПоставщику").Значение Тогда
			ПараметрыОтбора.Вставить("Поставщик",  ТекущиеДанные.Производитель);		
		КонецЕсли; 
		
		Если НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("СопоставлятьПоДатеПроизводства").Значение Тогда
			ПараметрыОтбора.Вставить("dateOfProduction",  ТекущиеДанные.ДатаПроизводства);		
		КонецЕсли; 
		
		Если НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("СопоставлятьПоНоменклатуре").Значение Тогда
			ПараметрыОтбора.Вставить("subProduct",  ПолучитьСписокПродукцииПоНоменклатуре(ТекущиеДанные.Номенклатура));		
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("ПараметрыОтбора", ПараметрыОтбора);
		
		ПараметрыФормы.Вставить("ТолькоСОстатками");
		
		ОткрытьФорму("РегистрСведений.МЙ_ЖурналПродукции.ФормаСписка",  ПараметрыФормы,  Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоВыбраннойЗаписи(КлючЗаписи, ИдентификаторСтроки)
	
	
	МЗ = РегистрыСведений.МЙ_ЖурналПродукции.СоздатьМенеджерЗаписи();
	
	МЗ.GUID = КлючЗаписи.GUID;
	МЗ.Прочитать();
	
	
	СтрокаТаблицы = ТаблицаПодбора.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаТаблицы.GUIDЗаписиЖурналаПродукции = МЗ.GUID;
	СтрокаТаблицы.НомерЗаписиЖурналаПродукции = МЗ.entryNumber;
	СтрокаТаблицы.Остаток = МЗ.volume;
	СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, СтрокаТаблицы.Остаток);
	СтрокаТаблицы.УказанВес = (МЗ.unit.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса.Получить());
	СтрокаТаблицы.ДатаПроизводстваВЗаписи = МЗ.dateOfProduction;
	СтрокаТаблицы.НаименованиеТовараПоставщика = МЗ.productItem;
	
	СтрокаТаблицы.ДатаВСД = Неопределено;	
	СтрокаТаблицы.ПоставщикВСД = Неопределено;	
	
	Если ЗначениеЗаполнено(МЗ.UUID_ВСД) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	МЙ_ВетеринарныеДокументы.issueDate КАК ДатаВСД,
		                      |	МЙ_ВетеринарныеДокументы.Отправитель
		                      |ИЗ
		                      |	РегистрСведений.МЙ_ВетеринарныеДокументы КАК МЙ_ВетеринарныеДокументы
		                      |ГДЕ
		                      |	МЙ_ВетеринарныеДокументы.UUID = &UUID");
		
		Запрос.УстановитьПараметр("UUID", МЗ.UUID_ВСД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий()  Тогда
			СтрокаТаблицы.ДатаВСД = Выборка.ДатаВСД;
			СтрокаТаблицы.ПоставщикВСД = Выборка.Отправитель;
		КонецЕсли; 
	КонецЕсли; 		
		
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПодбораНомерЗаписиЖурналаПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьДанныеПоВыбраннойЗаписи(ВыбранноеЗначение, Элементы.ТаблицаПодбора.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписи(GUID)
	
	Возврат РегистрыСведений.МЙ_ЖурналПродукции.СоздатьКлючЗаписи(Новый Структура("GUID", GUID));
	
КонецФункции 

&НаКлиенте
Процедура ТаблицаПодбораНомерЗаписиЖурналаПродукцииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Ключ", ПолучитьКлючЗаписи(Элементы.ТаблицаПодбора.ТекущиеДанные.GUIDЗаписиЖурналаПродукции));
	
	ОткрытьФорму("РегистрСведений.МЙ_ЖурналПродукции.ФормаЗаписи", ПараметрыФормы);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораНомерЗаписиЖурналаПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПодбора.ТекущиеДанные;
	
	ТекущиеДанные.Количество = Мин(ТекущиеДанные.Количество, ТекущиеДанные.Остаток);
	
	ТекущиеДанные.КоличествоУпаковок = Мин(Окр(ТекущиеДанные.Количество*ТекущиеДанные.Коэф_Пересчета, 0),  ТекущиеДанные.ОстатокЧислоУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТаблицаПодбора.НайтиПоИдентификатору(Элементы.ТаблицаПодбора.ТекущаяСтрока);
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли; 
	
 	УстановкаФлажков(ТекущиеДанные, ТекущиеДанные.Пометка);
	
	Пока ТекущиеДанные.ПолучитьРодителя() <> Неопределено Цикл
		ТекущиеДанные.ПолучитьРодителя().Пометка = ?(УстановленоДляВсех(ТекущиеДанные), ТекущиеДанные.Пометка, 2);
     	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
  	КонецЦикла;	

	
	ОбновитьКоличествоВыбранныхВСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	УстановкаФлажков(ТаблицаПодбора, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПометки(Команда)

	УстановкаФлажков(ТаблицаПодбора, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ТекущиеДанные,Значение)

    Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
       Стр.Пометка = Значение;
       УстановкаФлажков(Стр, Стр.Пометка);
    КонецЦикла;

	ОбновитьКоличествоВыбранныхВСД();
КонецПроцедуры

&НаКлиенте
Функция УстановленоДляВсех(Строка)
	
	Для Каждого Стр Из Строка.ПолучитьРодителя().ПолучитьЭлементы() Цикл
		Если Стр.Пометка <> Строка.Пометка Тогда
			Возврат Ложь; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ДокументОтгрузки) = Истина Тогда
		НастройкаAPI = ОбменССистемойВетис.НастройкаАпиПоОрганизации(Параметры.ДокументОтгрузки.Организация);		
	Иначе
		НастройкаAPI = ОбменССистемойВетис.ОсновнаяНастройкаАПИ();
	КонецЕСли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаAPI) Тогда
		Сообщить("Не найдена основания настройка обмена с Ветис! Формирование ВСД невозможно!");
		Возврат;
	КонецЕсли; 
	
	СхемаКомпоновкиДанных = РегистрыСведений.МЙ_ЖурналПродукции.ПолучитьМакет("МакетПодбораПродукции");
	//СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетПодбораПродукции");
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());   
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ЗначениеЗаполнено(Параметры.ДокументОтгрузки) = Истина Тогда
		//+++АК KIRN 2018.07.30 ИП-00019400.000.00000002
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Параметры.ДокументОтгрузки.Дата;	
		
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[4];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Параметры.ДокументОтгрузки;		
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьGuidBEПолучателяСтороннейРозницы(СтруктурнаяЕдиница)
	GUID = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МЙ_СоответствиеКонтрагентов.GUID,
	|	МЙ_СоответствиеКонтрагентов.Контрагент,
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	РегистрСведений.МЙ_СоответствиеКонтрагентов КАК МЙ_СоответствиеКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО МЙ_СоответствиеКонтрагентов.Контрагент = СтруктурныеЕдиницы.КонтрагентСтороннейРозницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктурнаяЕдиница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		GUID = Выборка.GUID;
	КонецЕсли;	
	
	Возврат GUID;
КонецФункции	





