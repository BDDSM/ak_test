
&НаСервереБезКонтекста
Функция ПолучитьПериодичностьИСтоимость(мТорговаяТочка, мКонтрагент, мУслуга, мДатаФакт)
	
	СтруктураПараметров = Новый Структура("Периодичность, Стоимость", Перечисления.Периодичность.ПустаяСсылка(), 0);
	
	ЕстьУслуга = НЕ мУслуга.Пустая();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаФакт"		, ?(ЗначениеЗаполнено(мДатаФакт), мДатаФакт, ТекущаяДата()));
	Запрос.УстановитьПараметр("Контрагент"		, мКонтрагент);
	Запрос.УстановитьПараметр("Услуга"			, мУслуга);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, мТорговаяТочка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УсловияРегламентныхРаботВТТ.Периодичность,
	|	УсловияРегламентныхРаботВТТ.Стоимость
	|ИЗ
	|	РегистрСведений.УсловияРегламентныхРаботВТТ КАК УсловияРегламентныхРаботВТТ
	|ГДЕ
	|	НЕ УсловияРегламентныхРаботВТТ.ДатаНачала > &ДатаФакт
	|	И НЕ УсловияРегламентныхРаботВТТ.ДатаОкончания < &ДатаФакт
	|	И УсловияРегламентныхРаботВТТ.Контрагент = &Контрагент
	|	И УсловияРегламентныхРаботВТТ.Услуга = &Услуга
	|	И УсловияРегламентныхРаботВТТ.ТорговаяТочка = &ТорговаяТочка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПараметров.Периодичность 	= Выборка.Периодичность;
		СтруктураПараметров.Стоимость 		= Выборка.Стоимость;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеМесяца(мДата)
	
	Если Месяц(мДата) = 1 Тогда
		Возврат "Январь";
	ИначеЕсли Месяц(мДата) = 2 Тогда
		Возврат "Февраль";
	ИначеЕсли Месяц(мДата) = 3 Тогда
		Возврат "Март";
	ИначеЕсли Месяц(мДата) = 4 Тогда
		Возврат "Апрель";
	ИначеЕсли Месяц(мДата) = 5 Тогда
		Возврат "Май";
	ИначеЕсли Месяц(мДата) = 6 Тогда
		Возврат "Июнь";
	ИначеЕсли Месяц(мДата) = 7 Тогда
		Возврат "Июль";
	ИначеЕсли Месяц(мДата) = 8 Тогда
		Возврат "Август";
	ИначеЕсли Месяц(мДата) = 9 Тогда
		Возврат "Сентябрь";   
	ИначеЕсли Месяц(мДата) = 10 Тогда
		Возврат "Октябрь";
	ИначеЕсли Месяц(мДата) = 11 Тогда
		Возврат "Ноябрь";
	Иначе
		Возврат "Декабрь";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокКонтрагентов(мУслуга, мДатаФакт)
	
	мСписок = Новый СписокЗначений;
	
	ЕстьУслуга = НЕ мУслуга.Пустая();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаФакт"	, ?(ЗначениеЗаполнено(мДатаФакт), мДатаФакт, ТекущаяДата()));
	Если ЕстьУслуга Тогда
		Запрос.УстановитьПараметр("Услуга"	, мУслуга);
	КонецЕсли;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияРегламентныхРаботВТТ.Контрагент
	|ИЗ
	|	РегистрСведений.УсловияРегламентныхРаботВТТ КАК УсловияРегламентныхРаботВТТ
	|ГДЕ
	|	НЕ УсловияРегламентныхРаботВТТ.ДатаНачала > &ДатаФакт
	|	И НЕ УсловияРегламентныхРаботВТТ.ДатаОкончания < &ДатаФакт
	|	И &УсловиеПоУслуге";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоУслуге",
		?(ЕстьУслуга, "
	|	И Услуга = &Услуга", ""));
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		мМассив = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контрагент");
		мСписок.ЗагрузитьЗначения(мМассив);
	КонецЕсли;
	
	Возврат мСписок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокУслуг(мКонтрагент, мДатаФакт)
	
	мСписок = Новый СписокЗначений;
	
	ЕстьКонтрагент = НЕ мКонтрагент.Пустая();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаФакт"	, ?(ЗначениеЗаполнено(мДатаФакт), мДатаФакт, ТекущаяДата()));
	Если ЕстьКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент"	, мКонтрагент);
	КонецЕсли;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияРегламентныхРаботВТТ.Услуга
	|ИЗ
	|	РегистрСведений.УсловияРегламентныхРаботВТТ КАК УсловияРегламентныхРаботВТТ
	|ГДЕ
	|	НЕ УсловияРегламентныхРаботВТТ.ДатаНачала > &ДатаФакт
	|	И НЕ УсловияРегламентныхРаботВТТ.ДатаОкончания < &ДатаФакт
	|	И &УсловиеПоКонтрагенту";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|	И &УсловиеПоКонтрагенту",
		?(ЕстьКонтрагент, "
	|	И Контрагент = &Контрагент", ""));
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		мМассив = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Услуга");
		мСписок.ЗагрузитьЗначения(мМассив);
	КонецЕсли;
	
	Возврат мСписок;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПредставлениеПериода(мПериодичность)
	
	ТекПредставлениеПериода = "";
	Если мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		ТекПредставлениеПериода = Формат(Запись.ДатаНачалаПериода, "ДЛФ=Д");
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		ТекПредставлениеПериода = Формат(Запись.ДатаНачалаПериода, "ДЛФ=Д") + " - " + Формат(Запись.ДатаОкончанияПериода, "ДЛФ=Д");
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ТекПредставлениеПериода = ПолучитьПредставлениеМесяца(Запись.ДатаНачалаПериода) + " " + Формат(Год(Запись.ДатаНачалаПериода), "ЧГ=") + "г.";
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		ТекПредставлениеПериода = Формат(Год(Запись.ДатаНачалаПериода), "ЧГ=") + "г.";
	КонецЕсли;
	
	Запись.ПредставлениеПериода = ТекПредставлениеПериода;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НеДоступно = (РольДоступна("Продавец")
						ИЛИ РольДоступна("ПродавецТолькоПросмотр"))
					И НЕ РольДоступна("ПолныеПрава")
					И НЕ РольДоступна("ФинансовыйДиректор");
	Если Запись.ИсходныйКлючЗаписи.Пустой()
			И НеДоступно Тогда
		Сообщить("Нет прав на создание новых записей!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Запись.ТорговаяТочка.Пустая() Тогда
		Если ПараметрыСеанса.ТорговаяТочкаПоАйпи.Пустая() Тогда
			Сообщить("Не установлен параметр сеанса ""Тороговая точка по айпи""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Запись.ТорговаяТочка = ПараметрыСеанса.ТорговаяТочкаПоАйпи;
	КонецЕсли;
	
	//
	Элементы.Контрагент.Доступность 			= НЕ НеДоступно;				
	Элементы.Услуга.Доступность 				= НЕ НеДоступно;				
	Элементы.ДатаНачалаПериода.Доступность 		= НЕ НеДоступно;				
	Элементы.ДатаОкончанияПериода.Доступность 	= НЕ НеДоступно;		
	
	//
	ЗаписьОбъект = РеквизитФормыВЗначение("Запись");
	ПутиКФотографиям = ЗаписьОбъект.ПутиКФотографиям.Получить();
	
	КаталогФотографий = СокрЛП(Константы.МП_КаталогХраненияФайловЗадачМП.Получить());

	Если Прав(КаталогФотографий, 1) <> "\" Тогда
		КаталогФотографий = КаталогФотографий + "\";
	КонецЕсли;
	
	Если ПутиКФотографиям<>Неопределено Тогда
		Для Каждого Элемент Из ПутиКФотографиям Цикл
			НоваяСтрока = ИменаФайлов.Добавить();
			НоваяСтрока.ИмяФайла = КаталогФотографий + Элемент.Значение;
		КонецЦикла;  
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(Запись.Дата)
			И НЕ ЗначениеЗаполнено(Запись.Исполнитель) Тогда
		Сообщить("Не указан исполнитель!");
		Отказ = Истина;
	КонецЕсли;
	Если Запись.НеВыполнено Тогда
		Если Запись.Дата = Дата(1,1,1) Тогда
			Сообщить("Не указана дата (факт.)!");
			Отказ = Истина;
			Если НЕ ЗначениеЗаполнено(Запись.Исполнитель) Тогда
				Сообщить("Не указан исполнитель!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//СтандартнаяОбработка = Ложь;
	//
	//ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
	//ФормаВыбора.НачальноеЗначениеВыбора = Запись.Контрагент;
	//
	//ФормаВыбора.Отбор.ОказываетРегламентныеУслуги.Установить(Истина);
	//
	//ОтборПоСсылке = ФормаВыбора.Отбор.Ссылка;
	//ОтборПоСсылке.ВидСравнения 	= ВидСравнения.ВСписке;
	//ОтборПоСсылке.Значение 		= ПолучитьСписокКонтрагентов(Запись.Услуга, Запись.Дата);
	//ОтборПоСсылке.Использование = Истина;
	//
	//ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	//
	//ФормаВыбора.Открыть();
	//#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//СтандартнаяОбработка = Ложь;
	//
	//ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",, Элемент);
	//ФормаВыбора.НачальноеЗначениеВыбора = Запись.Услуга;
	//
	//ФормаВыбора.Отбор.ВидНоменклатуры.Установить(Перечисления.ВидыНоменклатуры.Услуга);
	//ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидНоменклатуры.Доступность = Ложь;
	//
	//ОтборПоСсылке = ФормаВыбора.Отбор.Ссылка;
	//ОтборПоСсылке.ВидСравнения 	= ВидСравнения.ВСписке;
	//ОтборПоСсылке.Значение 		= ПолучитьСписокУслуг(Запись.Контрагент, Запись.Дата);
	//ОтборПоСсылке.Использование = Истина;
	//
	//ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	//
	//ФормаВыбора.Открыть();
	//#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	СтруктураПараметров = ПолучитьПериодичностьИСтоимость(Запись.ТорговаяТочка, Запись.Контрагент, Запись.Услуга, Запись.Дата);
	мПериодичность = СтруктураПараметров.Периодичность;
	Если мПериодичность.Пустая() Тогда
		мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")
	КонецЕсли;
	Если мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День")
			И НЕ Запись.ДатаОкончанияПериода = Запись.ДатаНачалаПериода Тогда
		Запись.ДатаОкончанияПериода = Запись.ДатаНачалаПериода;
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Если НЕ Запись.ДатаНачалаПериода = НачалоНедели(Запись.ДатаНачалаПериода) Тогда
			Запись.ДатаНачалаПериода = НачалоНедели(Запись.ДатаНачалаПериода);
		КонецЕсли;
		Если НЕ КонецДня(Запись.ДатаОкончанияПериода) = КонецНедели(Запись.ДатаНачалаПериода) Тогда
			Запись.ДатаОкончанияПериода = КонецНедели(Запись.ДатаНачалаПериода);
		КонецЕсли;
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Если НЕ Запись.ДатаНачалаПериода = НачалоМесяца(Запись.ДатаНачалаПериода) Тогда
			Запись.ДатаНачалаПериода = НачалоМесяца(Запись.ДатаНачалаПериода);
		КонецЕсли;
		Если НЕ КонецДня(Запись.ДатаОкончанияПериода) = КонецМесяца(Запись.ДатаНачалаПериода) Тогда
			Запись.ДатаОкончанияПериода = КонецМесяца(Запись.ДатаНачалаПериода);
		КонецЕсли;
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Если НЕ Запись.ДатаНачалаПериода = НачалоГода(Запись.ДатаНачалаПериода) Тогда
			Запись.ДатаНачалаПериода = НачалоГода(Запись.ДатаНачалаПериода);
		КонецЕсли;
		Если НЕ КонецДня(Запись.ДатаОкончанияПериода) = КонецГода(Запись.ДатаНачалаПериода) Тогда
			Запись.ДатаОкончанияПериода = КонецГода(Запись.ДатаНачалаПериода);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПредставлениеПериода(мПериодичность);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	СтруктураПараметров = ПолучитьПериодичностьИСтоимость(Запись.ТорговаяТочка, Запись.Контрагент, Запись.Услуга, Запись.Дата);
	мПериодичность = СтруктураПараметров.Периодичность;
	Если мПериодичность.Пустая() Тогда
		мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")
	КонецЕсли;
	Если мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День")
			И НЕ Запись.ДатаНачалаПериода = Запись.ДатаОкончанияПериода Тогда
		Запись.ДатаНачалаПериода = Запись.ДатаОкончанияПериода;
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Если НЕ КонецДня(Запись.ДатаОкончанияПериода) = КонецНедели(Запись.ДатаОкончанияПериода) Тогда
			Запись.ДатаОкончанияПериода = КонецНедели(Запись.ДатаОкончанияПериода);
		КонецЕсли;	
		Если НЕ Запись.ДатаНачалаПериода = НачалоНедели(Запись.ДатаОкончанияПериода) Тогда
			Запись.ДатаНачалаПериода = НачалоНедели(Запись.ДатаОкончанияПериода);
		КонецЕсли;
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Если НЕ КонецДня(Запись.ДатаОкончанияПериода) = КонецМесяца(Запись.ДатаОкончанияПериода) Тогда
			Запись.ДатаОкончанияПериода = КонецМесяца(Запись.ДатаОкончанияПериода);
		КонецЕсли;
		Если НЕ Запись.ДатаНачалаПериода = НачалоМесяца(Запись.ДатаОкончанияПериода) Тогда
			Запись.ДатаНачалаПериода = НачалоМесяца(Запись.ДатаОкончанияПериода);
		КонецЕсли;
	ИначеЕсли мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Если НЕ КонецДня(Запись.ДатаОкончанияПериода) = КонецГода(Запись.ДатаОкончанияПериода) Тогда
			Запись.ДатаОкончанияПериода = КонецГода(Запись.ДатаОкончанияПериода);
		КонецЕсли;
		Если НЕ Запись.ДатаНачалаПериода = НачалоГода(Запись.ДатаОкончанияПериода) Тогда
			Запись.ДатаНачалаПериода = НачалоГода(Запись.ДатаОкончанияПериода);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПредставлениеПериода(мПериодичность);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(Команда)
	
	//СтруктураПараметров = ПолучитьПериодичностьИСтоимость(Запись.ТорговаяТочка, Запись.Контрагент, Запись.Услуга, Запись.Дата);
	//Запись.Сумма = СтруктураПараметров.Стоимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ИменаФайловИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элементы.ИменаФайлов.ТекущиеДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Запись.ДатаНачалаПериода) И ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) И Не ПолныеПрава() Тогда
		Если Запись.Дата > Запись.ДатаОкончанияПериода ИЛИ Запись.ДатаНачалаПериода > Запись.Дата Тогда
			Предупреждение("Дата выполнения должна быть в диапозоне периода");
			Запись.Дата = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолныеПрава()
	Возврат РольДоступна("ПолныеПрава");
КонецФункции // ()
 
