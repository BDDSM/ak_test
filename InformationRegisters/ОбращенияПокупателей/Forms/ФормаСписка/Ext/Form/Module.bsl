
Процедура ДобавитьПодчинённыеОтборы(ТекСтрРодитель, НовыйОтборРодитель)
	
	Для каждого ТекСтр Из ТекСтрРодитель.Элементы Цикл
	    		
	    НовыйОтбор = НовыйОтборРодитель.Элементы.Добавить(ТипЗнч(ТекСтр));
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекСтр);
		
		Попытка
		Если ТекСтр.Элементы.Количество() > 0 Тогда
			ДобавитьПодчинённыеОтборы(ТекСтр, НовыйОтбор);	
		КонецЕсли;	
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборы()
	
	Список.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ВариантРеестра)
			И ЗначениеЗаполнено(ВариантРеестра.ХранилищеНастроекРегистра) Тогда
		
		ТекОтборы = ВариантРеестра.ХранилищеНастроекРегистра.Получить();
		Если ЗначениеЗаполнено(ВариантРеестра) Тогда
						
			Для каждого ТекСтр Из ТекОтборы.Элементы Цикл
				
				НовыйОтбор = Список.Отбор.Элементы.Добавить(ТипЗнч(ТекСтр));
				ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекСтр);
				
				Попытка
					Если ТекСтр.Элементы.Количество() > 0 Тогда
						ДобавитьПодчинённыеОтборы(ТекСтр, НовыйОтбор);
					КонецЕсли;	
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьИзБланковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"		, ПериодЗагрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ПериодЗагрузки.ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бланк.Ссылка КАК GUID_Загрузки,
	|	Бланк.Номер КАК Номер_Бланка,
	|	Бланк.Дата КАК ДатаДок,
	|	Бланк.ИД,
	|	Бланк.ТипБланка КАК Тип_Бланка,
	|	Бланк.ТорговаяТочка КАК СтруктурнаяЕдиница,
	|	БланкТовары.Номенклатура,
	|	БланкТовары.Проблема,
	|	БланкТовары.ИсточникОбращения,
	|	БланкТовары.ТипОбращения,
	|	БланкТовары.ФИО_Покупателя,
	|	БланкТовары.Телефон,
	|	БланкТовары.email,
	|	БланкТовары.ДатаСобытия,
	|	БланкТовары.Продавец1,
	|	БланкТовары.Производитель,
	|	БланкТовары.Примечание,
	|	БланкТовары.ТипЖалобы,
	|	БланкТовары.Номер_Бланка КАК Номер_Бланка1,
	|	БланкТовары.Номер_Карты_ОК,
	|	0 КАК id_OK
	|ИЗ
	|	Документ.Бланк.Товары КАК БланкТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Бланк КАК Бланк
	|		ПО БланкТовары.Ссылка = Бланк.Ссылка
	|ГДЕ
	|	Бланк.ПометкаУдаления = ЛОЖЬ
	|	И Бланк.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";


	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	ТЗСсылок = ТЗРезультат.Скопировать();
	ТЗСсылок.Свернуть("GUID_Загрузки","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбращенияПокупателей.id_OK КАК id_OK
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|
	|УПОРЯДОЧИТЬ ПО
	|	id_OK УБЫВ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ТекПоследнийНомер = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекПоследнийНомер = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
 
    Для каждого ТекСтр Из ТЗРезультат Цикл
		
		ТекПоследнийНомер 	= ТекПоследнийНомер + 1;
		ТекСтр.id_OK 		= ТекПоследнийНомер;	
		
	КонецЦикла;
	
	Для каждого ТекСтрокаСсылок Из ТЗСсылок Цикл
 
 		набор = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
		набор.Отбор.GUID_Загрузки.Установить(ТекСтрокаСсылок.GUID_Загрузки);
		набор.Прочитать();
		набор.Очистить();
		
		ТекОтборТЗ = Новый Структура;
		ТекОтборТЗ.Вставить("GUID_Загрузки", ТекСтрокаСсылок.GUID_Загрузки);
		МассивНайденыхСтрок = ТЗРезультат.НайтиСтроки(ТекОтборТЗ);
		
		Для каждого ТекСтрМасс Из МассивНайденыхСтрок Цикл
  
  	    	НоваяСтрокаНабора = Набор.Добавить();	
            ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, ТекСтрМасс); 
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаНабора.ТипЖалобы) Тогда
				НоваяСтрокаНабора.ТипЖалобы 			= Справочники.ТипыЖалоб.НайтиПоНаименованию("00 Пока не выяснили");
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаНабора.РезультатОбращения) Тогда	
				НоваяСтрокаНабора.РезультатОбращения 	= Справочники.РезультатыРассмотренияОбращений.НайтиПоКоду("6");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаНабора.ТипОбращения) Тогда	
				НоваяСтрокаНабора.ТипОбращения 			= Справочники.ТипыОбращенийПокупателей.НайтиПоКоду("23");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаНабора.ИсточникОбращения) Тогда	
				НоваяСтрокаНабора.ИсточникОбращения 	= Справочники.ИсточникиОбращений.НайтиПоКоду("00");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаНабора.Продавец1) Тогда
				НоваяСтрокаНабора.Продавец1 			= ТекСтрМасс.Продавец1;
			КонецЕсли;
			
			//Если НЕ ЗначениеЗаполнено(НоваяСтрокаНабора.ДатаСобытия) Тогда
			//	НоваяСтрокаНабора.ДатаСобытия = ТекСтрМасс.ДатаДок;
			//КонецЕсли;	
			
			НоваяСтрокаНабора.ДатаДок = ТекСтрМасс.ДатаДок;
						
		КонецЦикла;
		
		Попытка
			набор.Записать();		
			Сообщить("Загрузили данные по документу: " + ТекСтрокаСсылок.GUID_Загрузки);
		Исключение
			Сообщить("Не удалось загрузить данные по документу: " + ТекСтрокаСсылок.GUID_Загрузки, СтатусСообщения.ОченьВажное);
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьИзБланков(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПериодЗагрузки.ДатаНачала)
			ИЛИ НЕ ЗначениеЗаполнено(ПериодЗагрузки.ДатаОкончания) Тогда
		Сообщить("Не задан период загрузки!");
		Возврат;
	КонецЕсли;	
	
	ЗагрузитьИзБланковНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеотвеченные(Команда)
	
	//+++АК SHEP 20160616
	Элементы.ТолькоНеотвеченные.Пометка = НЕ Элементы.ТолькоНеотвеченные.Пометка;
	
	Если Элементы.ТолькоНеотвеченные.Пометка Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, "ОтветПо", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, "ИсточникОбращения", СписокИсточниковОбращений, ВидСравненияКомпоновкиДанных.ВСписке,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, "СсылкаНаСайт", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьОтборУСписка(Список.Отбор, Новый ПолеКомпоновкиДанных("ОтветПо"));
		ОбщегоНазначенияКлиентСервер.УдалитьОтборУСписка(Список.Отбор, Новый ПолеКомпоновкиДанных("ИсточникОбращения"));
		ОбщегоНазначенияКлиентСервер.УдалитьОтборУСписка(Список.Отбор, Новый ПолеКомпоновкиДанных("СсылкаНаСайт"));
	КонецЕсли;
	//---АК SHEP 20160616
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	
	СписокБланков = Новый СписокЗначений;
	Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекДанные = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		СписокБланков.Добавить(ТекДанные.GUID_Загрузки);
	КонецЦикла;	
	
	ПараметрыФормы = Новый Структура("СписокБланков", СписокБланков);
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаРассылкиСМС", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

Функция ПолучитьСтрокуТабПрикрепленных(Гуид)
	
	Набор = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
	Набор.Отбор.GUID_Загрузки.Установить(Гуид);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Возврат Набор[0].ПрикрепленныеФайлы;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

Функция ЗаписатьСтрокуПрикрепленныхФайлов(Гуид, СтрокаТаб)
	
	Набор = РегистрыСведений.ОбращенияПокупателей.СоздатьНаборЗаписей();
	Набор.Отбор.GUID_Загрузки.Установить(Гуид);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Набор[0].ПрикрепленныеФайлы = СтрокаТаб;
		Набор.Записать();
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	//+++АК SHEP 2018.07.26 ИП-00018753.03
	//ЗначениеВозврат = ОткрытьФормуМодально("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПрикрепленныхФайлов", Новый Структура("ТабФайлов", ПолучитьСтрокуТабПрикрепленных(Элементы.Список.ТекущиеДанные.GUID_Загрузки)));
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	СтруктураДанныеОтбор = Новый Структура("id_OK,GUID_Загрузки,ДатаДок");
	ЗаполнитьЗначенияСвойств(СтруктураДанныеОтбор, ТекущиеДанные);
	СтруктураПараметры = СтруктураПараметровДляФормыПрикрепленныхФайлов(СтруктураДанныеОтбор);
	ЗначениеВозврат = ОткрытьФормуМодально("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПрикрепленныхФайлов", СтруктураПараметры);
	
	//Если ЗначениеЗаполнено(ЗначениеВозврат) Тогда
	Если ЗначениеЗаполнено(ЗначениеВозврат) И ЗначениеВозврат <> СтруктураПараметры.ТабФайлов Тогда // не записываем, если ничего не поменялось
	//---АК SHEP 2018.07.26
		ЗаписатьСтрокуПрикрепленныхФайлов(ТекущиеДанные.GUID_Загрузки, ЗначениеВозврат);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.07.26 ИП-00018753.03
&НаСервереБезКонтекста
Функция СтруктураПараметровДляФормыПрикрепленныхФайлов(СтруктураДанныеОтбор)
	СтруктураПараметры = Новый Структура("ТабФайлов", ПрикреплённыеФайлыСтрока(СтруктураДанныеОтбор));
	СтруктураПараметры.Вставить("ТабФайловОтветПроизводителя", ПрикреплённыеФайлыСтрока(СтруктураДанныеОтбор, "ОбращенияПокупателейОтветыПроизводителейНаВключения", "ПрикреплённыеФайлы"));
	Возврат СтруктураПараметры;
КонецФункции

//+++АК SHEP 2018.07.26 ИП-00018753.03
&НаСервереБезКонтекста
Функция ПрикреплённыеФайлыСтрока(СтруктураДанныеОтбор, ВидОбъекта = "ОбращенияПокупателей", ИмяПоля = "ПрикрепленныеФайлы")
	
	МенеджерЗаписиОбращенияПокупателей = РегистрыСведений[ВидОбъекта].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписиОбращенияПокупателей, СтруктураДанныеОтбор);
	МенеджерЗаписиОбращенияПокупателей.Прочитать();
	Возврат ?(МенеджерЗаписиОбращенияПокупателей.Выбран(), МенеджерЗаписиОбращенияПокупателей[ИмяПоля], "");
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//+++АК SHEP 20160616
	СпрИсточникиОбращений = Справочники.ИсточникиОбращений;
	МассивКодов = Новый Массив;
	МассивКодов.Добавить("4"); //4 info@izbenka.msk.ru
	МассивКодов.Добавить("5"); //5 Вконтакте
	МассивКодов.Добавить("8"); //7 Facebook
	Для Каждого КодПоиска Из МассивКодов Цикл
		СпрИсточникОбращенийСсылка = СпрИсточникиОбращений.НайтиПоКоду(КодПоиска);
		Если ЗначениеЗаполнено(СпрИсточникОбращенийСсылка) Тогда
			СписокИсточниковОбращений.Добавить(СпрИсточникОбращенийСсылка);
		КонецЕсли;
	КонецЦикла;
	//---АК SHEP 20160616
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьОтборы();
		
КонецПроцедуры


&НаКлиенте
Процедура ВариантРеестраПриИзменении(Элемент)
	
	ЗаполнитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРеестраОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиОтветПроизводителя(Команда)
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаВнесенияОтветаПроизводителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветыМагазиновПоОбращениямПокупателейВТелеграм(Команда)
	ОткрытьФорму("Отчет.ОтветыМагазиновПоОбращениямПокупателейВТелеграм.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСДатамиПроизводства(Команда)
	ОткрытьФорму("Отчет.АК_ТоварыСДатамиПроизводства.Форма");
КонецПроцедуры
