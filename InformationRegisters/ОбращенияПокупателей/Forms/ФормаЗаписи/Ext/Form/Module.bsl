
Процедура УстановитьПоставщикаНаСервере()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСобытия"		, Запись.ДатаСобытия);
	Запрос.УстановитьПараметр("Номенклатура"	, Запись.Номенклатура);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Характеристика
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	//|			&ДатаСобытия,
	|			,
	|			Номенклатура = &Номенклатура
	|				И ТорговаяТочка = &ТорговаяТочка) КАК ТоварныйАссортиментТочек";
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	лкТекПроизводитель = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		лкТекПроизводитель = ВыборкаДетальныеЗаписи.Характеристика;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(лкТекПроизводитель) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", лкТекПроизводитель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)";
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Запись.Производитель = ВыборкаДетальныеЗаписи.Значение;
		
	КонецЦикла;
	
	ЗаполнитьХарактеристикуПоПроизводителю();
	
КонецПроцедуры	

&НаКлиенте
Процедура НайтиПроизводителя(Команда)
	
	лкОтказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Сообщить("Не заполнена номенклатура");
		лкОтказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
		Сообщить("Не заполнена торговая точка");
		лкОтказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.ДатаСобытия) Тогда
		Сообщить("Не заполнена дата события");
		лкОтказ = Истина;
	КонецЕсли;
	
	Если лкОтказ Тогда
		Возврат;
	КонецЕсли;
	
	//
	УстановитьПоставщикаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискТочки(Команда)
	
	лкФорма = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбора");
	Запись.СтруктурнаяЕдиница = лкФорма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПроставитьПродавцовНаСервере()
	
	Если ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница)
			И ЗначениеЗаполнено(Запись.ДатаСобытия) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата"			, НачалоДня(Запись.ДатаСобытия));
		Запрос.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЛистУчетаПродавцы.Продавец
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) = &Дата
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка = &ТорговаяТочка";
		ТЗ_Результат = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_Результат.Количество() = 0 Тогда
			
			ЗапросПоТабелю = Новый Запрос;
			ЗапросПоТабелю.УстановитьПараметр("Дата"			, НачалоДня(Запись.ДатаСобытия));
			ЗапросПоТабелю.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
			ЗапросПоТабелю.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 3
			|	ТабельРаботыПродавцов.Сотрудник КАК Продавец
			|ИЗ
			|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
			|ГДЕ
			|	ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
			|	И НАЧАЛОПЕРИОДА(ТабельРаботыПродавцов.Период, ДЕНЬ) = &Дата";
			ТЗ_Результат = ЗапросПоТабелю.Выполнить().Выгрузить();
			
		КонецЕсли;  		
		
		Если ТЗ_Результат.Количество() = 3 Тогда
			Запись.Продавец1 = ТЗ_Результат[0].Продавец;
			Запись.Продавец2 = ТЗ_Результат[1].Продавец;
			Запись.Продавец3 = ТЗ_Результат[2].Продавец;
		ИначеЕсли ТЗ_Результат.Количество() = 2 Тогда
			Запись.Продавец1 = ТЗ_Результат[0].Продавец;
			Запись.Продавец2 = ТЗ_Результат[1].Продавец;
		ИначеЕсли ТЗ_Результат.Количество() = 1 Тогда	
			Запись.Продавец1 = ТЗ_Результат[0].Продавец;  									
		КонецЕсли;	
		//+++АК БЕЛН 2016.12.20
		ПродавецПриИзменении();
		//---АК БЕЛН 2016.12.20

	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроставитьПродавцов(Команда)
	
	ПроставитьПродавцовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБланкОбщественногоКонтроля(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура УстановитьАвтоотметкуНезаполненногоСписаниеВозврат()
	
	мАвтоотметка = (Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("13")           // Возврат Покупателя
						ИЛИ Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("14")); // Списание по Качеству
	Элементы.ТипСписанияВозврата.АвтоОтметкаНезаполненного 		= мАвтоотметка;
	Элементы.ПодтипСписанияВозврата.АвтоОтметкаНезаполненного 	= мАвтоотметка;
	
КонецПроцедуры

&НаСервере
Процедура лкПередЗаписьюНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Запись.id_OK) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбращенияПокупателей.id_OK КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|
		|УПОРЯДОЧИТЬ ПО
		|	id_OK УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекЗапись = 0;
		
		Пока Выборка.Следующий() Цикл
			ТекЗапись = Выборка.id_OK;
		КонецЦикла;
		Запись.GUID_Загрузки	= Новый УникальныйИдентификатор;
		Запись.id_OK 			= ТекЗапись + 1;
		
	КонецЕсли;
	
	Если Запись.ДатаДок = '00010101' Тогда
		Запись.ДатаДок 			= ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	лкПередЗаписьюНаСервере();
	
	//+++АК SHEP 2018.09.28 ИП-00018753.03
	Если ЗначениеЗаполнено(ОтветПроизводителю) Тогда
		Запись.ПерепискаСПроизводителем = Запись.ПерепискаСПроизводителем +
			?(ЗначениеЗаполнено(Запись.ПерепискаСПроизводителем), Символы.ПС + "|" + Символы.ПС, "") + "Ответ техподдержки [" + Формат(ТекущаяДата(), "ДЛФ=DT") + "] — " + ОтветПроизводителю;
	КонецЕсли;
	//---АК SHEP 2018.09.28
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПросмотрОбзвона.Доступность = Запись.НужноОбзвонить;
	
	ЗаписьОЗаказеКУрьера = НайтиЗаявкуКурьераСервер();
	Элементы.ФормаЗаказКурьера.Заголовок = "Заказ курьера. Текущий статус - " +
											?(ЗаписьОЗаказеКурьера = Неопределено, "Не создан", Строка(ЗаписьОЗаказеКурьера));
	Запись.ОтменаУведомления 		= ?(Запись.id_OK = 0, Истина, Запись.ОтменаУведомления);
	Запись.РегулярностьУведомления 	= ?(Запись.id_OK = 0, "День", Запись.РегулярностьУведомления);
	
	ОбработкаЭлементовПриОтключенииУведомления();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Запись.Ответственный) Тогда
		Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//>lobv 250216
	Если ЗначениеЗаполнено(Запись.Номенклатура) тогда
		Запись.Технолог = ПолучитьТехнолога();
		ЗаполнитьХарактеристикуПоПроизводителю(Истина);
	КонецЕсли;
	//<lobv
	
	//+++АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений 
	Элементы.ТипВключения.Доступность = Запись.ТипЖалобы.ЭтоВключениеВПродукт;
	//---АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений 
	//
	УстановитьАвтоотметкуНезаполненногоСписаниеВозврат();
	
	//+++АК SHEP 20170725 ИП-00016217
	УстановитьПривилегированныйРежим(Истина);
	ВводПоСтрокеАльтернативный = УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ОбращенияПокупателей_ВводПоСтрокеАльтернативный, Ложь);
	Элементы.ВводПоСтрокеАльтернативный.Пометка = ВводПоСтрокеАльтернативный;
	
	Если РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		И УправлениеДопПравамиПользователей.ПолучитьПравоПользователяУпр(ПланыВидовХарактеристик.ПраваПользователей.ОбращенияПокупателей_ОткрыватьФормуЗаписиНезависимо, Ложь) Тогда
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	//---АК SHEP 20170725 ИП-00016217
	//+++АК SHEP 2018.01.23 ИП-00017251.01
	Если ЗначениеЗаполнено(Запись.BOT_Purchase_Tovar_Reiting_ID) Тогда
		Элементы.ОценкаИзTelegram.Видимость = Истина;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеБотаТелеграм(Запись.BOT_Purchase_Tovar_Reiting_ID));
	КонецЕсли;
	//---АК SHEP 2018.01.23
	
	//+++АК SHEP 2018.07.02 ИП-00018753.04
	РеквизитФормыЗаписьОбъект = РеквизитФормыВЗначение("Запись");
	// если запись существует, проверим, есть ли ответ на включения
	Если РеквизитФормыЗаписьОбъект.Выбран() Тогда
		МенеджерЗаписиОтветНаВключения = РегистрыСведений.ОбращенияПокупателейОтветыПроизводителейНаВключения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиОтветНаВключения, Запись, "id_OK,GUID_Загрузки,ДатаДок");
		МенеджерЗаписиОтветНаВключения.Прочитать();
		Элементы.ОтветПроизводителяНаВключения.Доступность = МенеджерЗаписиОтветНаВключения.Выбран();
		Элементы.ОтветПроизводителяНаВключения.Видимость = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ТипЖалобы, "ЭтоВключениеВПродукт") = Истина); //+++АК SHEP 2018.08.01 ИП-00018753.03
	Иначе
		Элементы.ОтветПроизводителяНаВключения.Доступность = Ложь;
		
		//+++АК SHEP 2018.10.03 ИП-00018753.03
		ПриЧтенииНаСервере(Запись);
		//---АК SHEP 2018.10.03
		
	КонецЕсли;
	//---АК SHEP 2018.07.02
	
	ЗаголовокПрикреплённыхФайлов(); //+++АК SHEP 2018.07.26 ИП-00018753.03
	
//+++АК KOPA 2018.06.05 ИП-00018018	
	ЗаполнитьВариантыКС()
//---АК KOPA
КонецПроцедуры

//+++АК KOPA 2018.06.05 ИП-00018018
&НаСервере
Процедура ЗаполнитьВариантыКС()
//Пока получение вариантов из классифицирующей системы не реализовано скроем кнопки	
	//Элементы.ВыбратьТипОбращения.Видимость = Ложь;	
	//Элементы.ВыбратьТипЖалобы.Видимость = Ложь;
	//
	//Возврат;
		
	Если Не ЗначениеЗаполнено(Запись.GUID_Загрузки) Тогда	
		Элементы.ВыбратьТипОбращения.Видимость = Ложь;	
		Элементы.ВыбратьТипЖалобы.Видимость = Ложь;
		Элементы.ВыбратьНоменклатуру.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеКС =  РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.ПолучитьДанныеОтвета(Запись.id_OK,Запись.GUID_Загрузки,Запись.ДатаДок);
	
	Если ДанныеКС = Неопределено Тогда
		Элементы.ВыбратьТипОбращения.Видимость = Ложь;	
		Элементы.ВыбратьТипЖалобы.Видимость = Ложь;
		Элементы.ВыбратьНоменклатуру.Видимость = Ложь;
		Возврат;	
	КонецЕсли;
	
	ВариантыИзКлассифицирующейСистемы = Новый Структура;
	
	ВариантыИзКлассифицирующейСистемы.Вставить("СписокТипыОбращения", ДанныеКС.СписокТипыОбращения);
	ВариантыИзКлассифицирующейСистемы.Вставить("ДанныеТипыЖалоб", ДанныеКС.ДанныеТипыЖалоб);
	ВариантыИзКлассифицирующейСистемы.Вставить("СписокНоменклатура", ДанныеКС.СписокНоменклатура);
		
КонецПроцедуры//---АК KOPA

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("13")               // Возврат Покупателя
			ИЛИ Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("14") Тогда  // Списание по Качеству
		
		Если Запись.ТипСписанияВозврата.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
    		Сообщение.Текст = "Не указан Тип списания/возврата!";
    		Сообщение.Поле 	= "ТипСписанияВозврата";
    		Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Запись.ПодтипСписанияВозврата.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
    		Сообщение.Текст = "Не указан Подтип списания/возврата!";
    		Сообщение.Поле 	= "ПодтипСписанияВозврата";
    		Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоПродавцам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Запись.Продавец1)
			И НЕ ЗначениеЗаполнено(Запись.Продавец2)
			И НЕ ЗначениеЗаполнено(Запись.Продавец3) Тогда
		Сообщить("В обращении не указан ни один продавец. Формирование отчета не возможно!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктура = Новый Структура;
	ПараметрыСтруктура.Вставить("Продавец1"			, Запись.Продавец1);
	ПараметрыСтруктура.Вставить("Продавец2"			, Запись.Продавец2);
	ПараметрыСтруктура.Вставить("Продавец3"			, Запись.Продавец3);
	ПараметрыСтруктура.Вставить("ТТ"				, Запись.СтруктурнаяЕдиница);
	ПараметрыСтруктура.Вставить("Примечание"		, Запись.Примечание);
	ПараметрыСтруктура.Вставить("ОтветПокупателю"	, Запись.ОтветПокупателю);
	ПараметрыСтруктура.Вставить("ДатаСобытия"		, Запись.ДатаСобытия);
	ПараметрыСтруктура.Вставить("ИсточникОбращения"	, Запись.ИсточникОбращения);
	ПараметрыСтруктура.Вставить("Телефон"			, ПолучитьТелефонТТ());
	
	ОткрытьФорму("Отчет.ОтчетПоПродавцам.Форма.ФормаОтчета", ПараметрыСтруктура,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция ПолучитьТелефонТТ()
	
	Возврат Запись.СтруктурнаяЕдиница.ТелефонныйНомер1;	
	
КонецФункции

&НаКлиенте
Процедура ПросмотрОбзвона(Команда)
	
	ТекФорма = ПолучитьФорму("РегистрСведений.ОбращенияКПокупателям.Форма.ФормаСписка");	
	
	ТекФорма.Элементы.ГруппаШапка.Видимость 		= Ложь;	
	ТекФорма.Элементы.ГруппаРассылки.Видимость 		= Ложь;
	ТекФорма.Элементы.ГруппаВсе.Видимость 			= Ложь;
	ТекФорма.Элементы.ОчиститьПустышки.Видимость 	= Ложь;	
	ТекФорма.НЕОбновлятьВыборкуПриОткрытии = Истина;	
	ТекФорма.Элементы.ГруппаПериод.Видимость 		= Ложь;
	ЭлементОтбора = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("GUID_Жалобы");
	ЭлементОтбора.ПравоеЗначение 	= Запись.GUID_Загрузки;
	ЭлементОтбора.Использование 	= Истина;
	
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НужноОбзвонитьПриИзменении(Элемент)
	
	Элементы.ПросмотрОбзвона.Доступность = Запись.НужноОбзвонить;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКурьера(Команда)
	//вызов формы для оформления заказа курьера
	//ищем по регистру - если уже есть заказ курьера от этого обращения, то открываем его
	//если нет, то создаем пустой с автозаполнением по письму
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Запись.id_OK) Тогда
		Предупреждение("Перед заказом курьера необходимо сохранить обращение!");
		Возврат;
	КонецЕСли;
	
	ЗаписьОЗаказеКУрьера = НайтиЗаявкуКурьераСервер();
	Если ЗаписьОЗаказеКурьера = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.запись.Номенклатура) Тогда
			Предупреждение("Перед заказом курьера необходимо указать номенклатуру!");
			Возврат;
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.АК_ЖалобыСКурьерскойДоставкой.ФормаЗаписи",, ЭтаФорма);
	Иначе
		Структура = Новый Структура("Ключ", ПолучитьКлюч());
		ОткрытьФорму("РегистрСведений.АК_ЖалобыСКурьерскойДоставкой.ФормаЗаписи", Структура, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	//>lobv 250216
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
	КонецЕсли;
	//<lobv
	
КонецПроцедуры

&НаСервере
Функция НайтиЗаявкуКурьераСервер()
	
	Отбор = Новый Структура("ID_ok_Жалобы", ЭтаФорма.Запись.id_OK);
	Запрос = Новый Запрос;
	ВыборкаЖалоб = РегистрыСведений.АК_ЖалобыСКурьерскойДоставкой.Выбрать(Отбор);
	ЗаявкаНайдена = Ложь;
	Пока ВыборкаЖалоб.Следующий() Цикл
		ЗаявкаНайдена = Истина;
		Возврат Строка(ВыборкаЖалоб.ПолучитьМенеджерЗаписи().СтатусЗаказаКурьера);
		Прервать;
	КонецЦикла;
	
	Если НЕ ЗаявкаНайдена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьТехнолога()
	
	//+++ golv 2018.08.02 ИП-00018018.03
	Возврат РегистрыСведений.ОбращенияПокупателей.ПолучитьТехнолога(Запись.Номенклатура, Запись.Производитель, Запись.СтруктурнаяЕдиница, Запись.ДатаДок);
	//--- golv
	
КонецФункции

Процедура ЗаполнитьХарактеристикуПоПроизводителю(Открытие=Ложь)
	
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Владелец", Запись.Номенклатура);
	//Запрос.УстановитьПараметр("Значение", Запись.Производитель);
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ХарактеристикиНоменклатуры.Ссылка
	//|ИЗ
	//|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	//|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	//|ГДЕ
	//|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	//|	И ЗначенияСвойствОбъектов.Значение = &Значение";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Характеристика = Выборка.Ссылка;
	//Иначе	
	//	Характеристика = Неопределено;
	//КонецЕсли;
	
	//+++ golv 2018.08.02
	Характеристика = РегистрыСведений.ОбращенияПокупателей.ПолучитьХарактеристикуПоПроизводителю(Запись.Номенклатура, Запись.Производитель);
	//--- golv
	
	//+++АК mika 2017.12.13 ИП-00017433
	ЗаполнениеДополнительныхРеквизитовПоХарактеристике(Характеристика);  
	//---АК mika ИП-00017433
	
	//+++АК БЕЛН 2016.12.20
	Мас = РегистрыСведений.ОбращенияПокупателей.ПолучитьПродактМенеджера(Запись.Номенклатура, Запись.Производитель); // golv 08.08.2018
	ПМ = ?(Мас.Количество() = 0, Неопределено, Мас[0]);
	Если ПМ <> Запись.ПродактМенеджер Тогда
		Запись.ПродактМенеджер = ПМ;
	КонецЕсли; 
	Если Не Открытие Тогда
		Если ЗначениеЗаполнено(Характеристика)  Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ДатаОтсечки=Запись.ДатаДок;
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РасходныйОрдерСкладТовары.Характеристика,
			|	МИНИМУМ(РасходныйОрдерСкладТовары.Ссылка.ДатаРаспределения) КАК ДатаРаспределения
			|ПОМЕСТИТЬ вт
			|ИЗ
			|	Документ.РасходныйОрдерСклад.Товары КАК РасходныйОрдерСкладТовары
			|ГДЕ
			|	РасходныйОрдерСкладТовары.Ссылка.Проведен = ИСТИНА
			|	И РасходныйОрдерСкладТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ВСборке)
			|	И РасходныйОрдерСкладТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСкладскойУчет.ОтгрузкаВТорговуюТочку)
			|	И РасходныйОрдерСкладТовары.Характеристика = &Характеристика
			|	И РасходныйОрдерСкладТовары.Количество > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасходныйОрдерСкладТовары.Характеристика
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	вт.ДатаРаспределения,
			|	ВЫБОР
			|		КОГДА вт.ДатаРаспределения >= &Дата
			|				И вт.ДатаРаспределения <= &Дата1
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Новинка
			|ИЗ
			|	вт КАК вт";	
			Запрос.УстановитьПараметр("Характеристика",Характеристика);	
			Запрос.УстановитьПараметр("Дата",ДобавитьМесяц(ДатаОтсечки,-1));
			Запрос.УстановитьПараметр("Дата1",ДобавитьМесяц(ДатаОтсечки,0));
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Запись.Новинка=Ложь;
				Запись.ДатаПервойПродажи=Дата(1,1,1);
			Иначе
				Выборка=Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					Запись.Новинка=Выборка.Новинка;
					Запись.ДатаПервойПродажи=Выборка.ДатаРаспределения;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	//---АК БЕЛН 2016.12.20
	
	СостояниеНаТТ = ВернутьСтатусХарактеристикиНоменклатурыНаМагазине(Запись.СтруктурнаяЕдиница,Запись.Номенклатура, Характеристика); //+++АК SHEP 2018.08.20 ИП-00019481
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьКлюч()
	
	Возврат РегистрыСведений.АК_ЖалобыСКурьерскойДоставкой.СоздатьКлючЗаписи(Новый Структура("ID_ok_Жалобы", ЭтаФорма.Запись.id_OK));
	
КонецФункции

Процедура ПолученОтветДляЗаявкиКурьера()
	
	Если ЭтаФорма.Запись.СтатусПроизводителя = Перечисления.СтатусыСПроизводителями.ПолучилиОтвет Тогда
		Отбор = Новый Структура("ID_ok_Жалобы", ЭтаФорма.Запись.id_OK);
		//Запрос=Новый Запрос;
		ВыборкаЖалоб = РегистрыСведений.АК_ЖалобыСКурьерскойДоставкой.Выбрать(Отбор);
		Пока ВыборкаЖалоб.Следующий() Цикл
			МенеджерЗаписи = ВыборкаЖалоб.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.ДатаОтвета			= ТекущаяДата();
			МенеджерЗаписи.СтатусЗаказаКурьера	= Перечисления.АК_СтатусыЗаказаКурьера.ПолученОтвет;
			МенеджерЗаписи.Записать();
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроизводителяПриИзменении(Элемент)
	
	//Лобачев - если получили ответ, то нужно сменить статус в заказе курьера
	ПолученОтветДляЗаявкиКурьера();
	
	ЗаписьОЗаказеКУрьера = НайтиЗаявкуКурьераСервер();
	Попытка
		Если ЭтаФорма.ВладелецФормы.ИмяФормы = "РегистрСведений.АК_ЖалобыСКурьерскойДоставкой.Форма.ФормаСписка" Тогда
			ЭтаФорма.ВладелецФормы.Элементы.Список.Обновить();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Элементы.ФормаЗаказКурьера.Заголовок = "Заказ курьера. Текущий статус - " + 
											?(ЗаписьОЗаказеКурьера = Неопределено, "Не создан", Строка(ЗаписьОЗаказеКурьера));
	
КонецПроцедуры

Функция ПолучитьМассивПроизводителей()
	
	//
	Запрос = Новый Запрос;
	//+++ GOLV 2018.05.14 ИП-00018610
	ДатаДок = ?(ЗначениеЗаполнено(Запись.ДатаДок), Запись.ДатаДок, ТекущаяДата());
	//--- GOLV
	Запрос.УстановитьПараметр("ДатаНач"	, НачалоДня(ДатаДок - 86400*14));
	Запрос.УстановитьПараметр("ДатаКон"	, КонецДня(ДатаДок));
	Запрос.УстановитьПараметр("Владелец", Запись.Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				ХарактеристикиНоменклатуры.Ссылка
	|			ИЗ
	|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ГДЕ
	|				ХарактеристикиНоменклатуры.Владелец = &Владелец
	|				И (ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|					ИЛИ ХарактеристикиНоменклатуры.Ссылка В
	|						(ВЫБРАТЬ
	|							ЛогированиеСменыСтатусовАктивности.Объект
	|						ИЗ
	|							РегистрСведений.ЛогированиеСменыСтатусовАктивности КАК ЛогированиеСменыСтатусовАктивности
	|						ГДЕ
	|							ЛогированиеСменыСтатусовАктивности.Период МЕЖДУ &ДатаНач И &ДатаКон
	|							И ЛогированиеСменыСтатусовАктивности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная))))
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)";
	//АК БЕЛН 07.11.2016++			   
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныПоставщиковСрезПоследних.Поставщик КАК Значение
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаКон, Номенклатура = &Владелец) КАК ЦеныПоставщиковСрезПоследних";			   
	//АК БЕЛН 07.11.2016--			   
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	
КонецФункции

&НаКлиенте
Процедура ПроизводительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивПроизводителей());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
		ЗаполнитьХарактеристикуПоПроизводителю();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
	КонецЕсли;
	
	СостояниеНаТТ = ВернутьСостояниеНаТТ(); //+++АК SHEP 2018.08.20 ИП-00019481
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСообщениеПоОтсутТовара()
	
	//+++АК SHEP 2018.09.28 ИП-00019897: сделал вызов из модуля менеджера
	Возврат РегистрыСведений.ОбращенияПокупателей.ПолучитьСообщениеПоОтсутТовара(РеквизитФормыВЗначение("Запись"));
	//---АК SHEP 2018.09.28
	
КонецФункции

Функция ПолучитьСообщениеПокупкиЗа4Месяца(мНоменклатура, мПроизводитель)
	
	СтрПокупки = "";
	
	Текст_id_tov 	= Формат(мНоменклатура.id_tov	, "ЧГ=");
	Текст_id_kontr 	= Формат(мПроизводитель.ИД		, "ЧГ=");
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"DECLARE @Date1_Sales DATE = DATEADD(MONTH, -4, GetDate());
	|DECLARE @Date2_Sales DATE = GetDate();
	|
	|Select
	|	SUM(ISNULL(chl.Quantity, 0)) as kol,
	|	SUM(ISNULL(chl.Quantity_Kontr, 0)) as kol_kontr
    |
	|From (
	|	-- Вкусвилл
	|	Select
	|		SUM(Ch.Quantity) as Quantity,
	|		SUM(Case When Ch.id_kontr = " + Текст_id_kontr + " Then Ch.Quantity Else 0 End) as Quantity_Kontr
	|	From SMS_UNION..CheckLine as Ch (nolock)
	|	Where
	|		Ch.date_ch Between @Date1_Sales And @Date2_Sales
	|		And Ch.OperationType_cl In (1, 3)
	|		And Ch.id_tov_cl = " + Текст_id_tov + "
	|	
	|	 -- Избёнка
	|	Union All
	|	
	|	Select
	|		SUM(Ch.Quantity),
	|		SUM(Case When Ch.ManufacturerID = " + Текст_id_kontr + " Then Ch.Quantity Else 0 End)		
	|	From SMS_IZBENKA..CheckLine as Ch (nolock)
	|	Where
	|		Ch.date_ch Between @Date1_Sales And @Date2_Sales
	|		And Ch.OperationType_cl In (1, 3)
	|		And Ch.id_tov_cl = " + Текст_id_tov + "
	|	) as chl";
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	ТекстКол 	= "";
	ТекстКолХар = "";
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
		
				ТекКоличество = Выборка.Fields("kol").Value;
				Если ЗначениеЗаполнено(ТекКоличество) Тогда
					ТекстКол = Формат(ТекКоличество, "ЧГ=");
				КонецЕсли;
				ТекКоличество = Выборка.Fields("kol_kontr").Value;
				Если ЗначениеЗаполнено(ТекКоличество) Тогда
					ТекстКолХар = Формат(ТекКоличество, "ЧГ=");
				КонецЕсли;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	СтрПокупки = СтрПокупки + "Всего покупок этого продукта и характеристики за последние 4 месяца - " + ТекстКолХар
				+ Символы.ПС + "Всего покупок этого продукта за последние 4 месяца - " + ТекстКол;

	//
	Возврат СтрПокупки;
	
КонецФункции

&НаСервере
Функция ПолучитьДопСообщение()
	
	СпрТипыОбращений 	= Справочники.ТипыОбращенийПокупателей;
	ТекТипОбращения 	= Запись.ТипОбращения;
	
	Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение") Тогда
		СообщениеДоп = "Всего обращений с таким подтипом по производителю - " + ПолучитьКоличествоОбращений(Истина) + Символы.ПС +
						"Всего обращений с таким подтипом по производителю за последние шесть недель - " +
						ПолучитьКоличествоОбращенийЗаПериод(42, Истина);	
	Иначе	
		СообщениеДоп = "";	
	КонецЕсли; 
	СообщениеВозвр 				= "";
	СообщениеПокупкиЗа4Месяца 	= "";
	
	Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("02 Продукт испорчен раньше срока")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("03 Продукт изменился")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("04 Вкус не нравится") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				, НачалоДня(ТекущаяДата() - 3*24*60*60));
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ИсточникОбращения"	, Справочники.ИсточникиОбращений.НайтиПоНаименованию("Возврат Покупателя"));
		Мас = Новый Массив;
		Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Включение"));		
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("02 Продукт испорчен раньше срока") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Срок не выдержал"));	
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Запах"));	
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("03 Продукт изменился") Тогда 
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Консистенция нарушена"));		
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("04 Вкус не нравится") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Вкус несоответствует норме"));		
		КонецЕсли;
		Запрос.УстановитьПараметр("GUID_Загрузки"		, Запись.GUID_Загрузки);
		Запрос.УстановитьПараметр("ТипСписанияВозврата"	, Мас);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.Номенклатура = &Номенклатура
		|	И ОбращенияПокупателей.Производитель = &Производитель
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.ИсточникОбращения = &ИсточникОбращения
		|	И ОбращенияПокупателей.ТипСписанияВозврата В(&ТипСписанияВозврата)
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
		Выборка = Запрос.Выполнить().Выбрать();
		Кол = 0;
		Пока Выборка.Следующий() Цикл
			Кол = Выборка.id_OK;
		КонецЦикла;
		СообщениеВозвр = "Всего возвратов по продукту/производителю за три дня - " + Строка(Кол);
		
		СообщениеПокупкиЗа4Месяца = ПолучитьСообщениеПокупкиЗа4Месяца(Запись.Номенклатура, Запись.Производитель);
		
	КонецЕсли;
	
	Если Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
		Если ЗначениеЗаполнено(Запись.Номенклатура)
				И ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
		    СообщениеВозвр = ПолучитьСообщениеПоОтсутТовара();
			Сообщение = 
							"Всего аналогичных обращений по продукту/магазину - " 		+ ПолучитьКоличествоОбращений() 			+ Символы.ПС +
							"Всего аналогичных обращений за последние три недели - " 	+ ПолучитьКоличествоОбращенийЗаПериод(21) 	+ Символы.ПС +
							ПолучитьСтрокуСВозвратами() + Символы.ПС +
							СообщениеДоп + Символы.ПС +
							СообщениеПокупкиЗа4Месяца + Символы.ПС +
							СообщениеВозвр;
		КонецЕсли; 
	Иначе	
		Сообщение = ?(ЗначРекв(Запись.ТипЖалобы, "Наименование") = "11_1 Просьба добавить продукт", "",
						"Всего аналогичных обращений по продукту/производителю - " 	+ ПолучитьКоличествоОбращений() 			+ Символы.ПС +
						"Всего аналогичных обращений за последние три недели - " 	+ ПолучитьКоличествоОбращенийЗаПериод(21)) 	+ Символы.ПС +
						ПолучитьСтрокуСВозвратами() + Символы.ПС +
						СообщениеДоп + Символы.ПС +
						СообщениеПокупкиЗа4Месяца + Символы.ПС +
						СообщениеВозвр;
	КонецЕсли; 
	
	//
	
	Возврат Сообщение;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмо(Команда)
	
	мТемаПисьма 	= Строка(Запись.ТипЖалобы) + "_" + Запись.Номенклатура + "_" + Запись.СтруктурнаяЕдиница + "_" +
						Формат(Запись.ДатаДок, "ДФ=dd.MM.yyyy") + "_" + СокрЛП(Строка(Запись.GUID_Загрузки));
	
	мТекстПисьма 	= Строка(Запись.Примечание) + Символы.ПС + Запись.СтруктурнаяЕдиница + " тел.: " +
						ЗначРекв(Запись.СтруктурнаяЕдиница, "ТелефонныйНомер1") + Символы.ПС + Запись.Номенклатура + Символы.ПС +
						"Технолог: " + Запись.Технолог + Символы.ПС + Запись.Производитель + Символы.ПС +
						"Автор: " + СокрЛП(Запись.ФИО_Покупателя) + Символы.ПС +
						"Номер карты: " + СокрЛП(Запись.Номер_Карты_ОК) + Символы.ПС +
						"Телефон: " + СокрЛП(Запись.Телефон) + Символы.ПС +
						//+++АК CISA 2018.10.05 ИП-00020023
						"Дата события: " + Запись.ДатаСобытия + Символы.ПС +
						"Кассир по чеку: " + Запись.КассирПоЧеку + Символы.ПС +
						//---АК CISA
						ПолучитьДопСообщение();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбращения"	, Запись.ТипОбращения);
	СтруктураПараметров.Вставить("ТемаПисьма"	, мТемаПисьма);
	СтруктураПараметров.Вставить("ТекстПисьма"	, мТекстПисьма);
	СтруктураПараметров.Вставить("Номенклатура"	, Запись.Номенклатура);
	СтруктураПараметров.Вставить("Производитель", Запись.Производитель);
	СтруктураПараметров.Вставить("ТТ"			, Запись.СтруктурнаяЕдиница);
	СтруктураПараметров.Вставить("Ответственный", Запись.Ответственный);
	СтруктураПараметров.Вставить("ТабФайлов"	, Запись.ПрикрепленныеФайлы);
	//+++AK GREK 05.09.2017 ИП-00015679
	СтруктураПараметров.Вставить("НомерКассы"	, Запись.НомерКассы);
	СтруктураПараметров.Вставить("Номер_Бланка"	, Запись.Номер_Бланка);
	СтруктураПараметров.Вставить("ТипЖалобы"	, Запись.ТипЖалобы);
	//---
	
	// +++ golv 02.08.2018 ИП-00018018.03
	//СтруктураПараметров = 
	// --- golv
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаОтправкиОтветственномуЗаТипОбращения", СтруктураПараметров, ЭтаФорма);	
	
КонецПроцедуры

//+++АК БЕЛН 2016.12.20
 
Функция ПолучитьКоличествоОбращений(ФлВключения = Ложь)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
	Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
	Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
	Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
	
	
	
	
	Если Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
	
		Запрос.УстановитьПараметр("Фл"					, Истина);
															
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	Иначе	
		Запрос.УстановитьПараметр("Фл"					,Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_2 Нет свежего товара"));
															
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ &ФлВключения)
		|	И (ОбращенияПокупателей.Производитель = &Производитель
		|				И НЕ &ФЛ
		|			ИЛИ &Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ &ФЛ)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ &Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И  &ФЛ=Ложь
		|			ИЛИ &ФлВключения)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	
	КонецЕсли; 
	
	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Кол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
	
	Возврат Строка(Кол)
	
КонецФункции

Функция ПолучитьКоличествоОбращенийЗаПериод(Дней, ФлВключения = Ложь)
	Если  Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				,НачалоДня(ТекущаяДата())-Дней*24*60*60);
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
		Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	Иначе	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				,НачалоДня(ТекущаяДата())-Дней*24*60*60);
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
		Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
		Запрос.УстановитьПараметр("Фл"					, Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии")
															ИЛИ Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_2 Нет свежего товара"));
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ &ФлВключения)
		|	И (ОбращенияПокупателей.Производитель = &Производитель
		|				И НЕ &ФЛ
		|			ИЛИ &Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ &ФЛ)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ &Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И НЕ &ФЛ
		|			ИЛИ &ФлВключения)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	КонецЕсли; 
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Кол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
	
	Возврат Строка(Кол)
	
КонецФункции

Функция ПолучитьСтрокуСВозвратами()
	
	Если НЕ ЗначениеЗаполнено(Запись.Номенклатура)
			ИЛИ НЕ ЗначениеЗаполнено(Запись.Производитель) Тогда
		Возврат "";
	КонецЕсли;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат "";
	Иначе           
	КонецЕсли;
	
	ИдТов 	= Запись.Номенклатура.id_tov;
	ИдКонтр	= Запись.Производитель.ИД;
	
	СтрЗапрос =
	"Select
	|	convert(date,DateAdd(year, -2000, Doc._Date_Time)) as Дата,
	|	case when Doc._Posted =1 then 'Да' else 'Нет' end as Проведен,
	|	SprNom._Fld760 as id_tov,
	|	isnull(hk.id_kontr, sprKontr._Fld1159 ) as id_kontr,
	|	SprNom._Description as товар,
	|	SprKontr._Description as поставщик,
	|-- Spr_Har._Description as характеристика,

	|	convert(real, sum(Tov._Fld3185)) as количество,
	|	convert(decimal(15, 2), pr.sebest) as Себест,
	|	convert(real,convert(decimal(15, 2), sum(Tov._Fld3185 * pr.sebest))) as Сумма,
	|	Convert(varchar(500), Doc._Fld3175) as Комментарий,
	|	Doc._Number as НомерДок,
	|	SprPolzovateli._Description as АвторДок
	|from IzbenkaFin.._Document3039 as Doc with (nolock)
	| inner join IzbenkaFin.._Document3039_VT3179 as tov with (nolock)
	| on Doc._IDRRef = tov._Document3039_IDRRef
	| inner Join IzbenkaFin.dbo._Reference29 as SprNom (nolock)
	| On SprNom._IDRRef = Tov._Fld3181RRef
	| inner join Reports..Price_1C_tov as pr
	| on SprNom._Fld760 = pr.id_tov
	| LEFT Join IzbenkaFin.dbo._Reference2539 as Spr_Har (nolock)
	| On Spr_Har._IDRRef = Tov._Fld3182RRef
	| left Join IzbenkaFin.dbo._Reference32 as SprPolzovateli (nolock)
	| On SprPolzovateli._IDRRef = Doc._Fld3174RRef
	| left join M2..Har_kontr as hk
	| on Tov._Fld3182RRef = hk.HaracRef
	| 	 and SprNom._Fld760 = hk.id_tov
	| inner Join IzbenkaFin.dbo._Reference27 as SprKontr (nolock)
	| On SprKontr._Fld1159 = hk.id_kontr
	|where
	|	doc._Fld3173RRef IN (0x979D005056A0010611E34CF5AE747831, 0xBF3A005056A0010611E359133F147350)
	|	and convert(date, DateAdd(year, -2000, Doc._Date_Time)) between convert(date, dateadd(day, -1, getdate())) and convert(date, dateadd(day, 0, getdate())) 
	|	and Doc._Marked = 0
	|	and Doc._Posted=1
	|	and SprNom._Fld760 = " + ВнешниеДанные.ФорматПоля((ИдТов)) + "
	|	and isnull(hk.id_kontr, sprKontr._Fld1159 ) = " + ВнешниеДанные.ФорматПоля((ИдКонтр)) + "
	|group by
	|	pr.sebest,
	|	Convert(varchar(500), Doc._Fld3175),
	|	Doc._Number,
	|	SprPolzovateli._Description,
	|	convert(date, DateAdd(year, -2000, Doc._Date_Time)),
	|	Doc._Posted,
	|	SprNom._Fld760,
	|	isnull(hk.id_kontr, sprKontr._Fld1159),
	|	SprNom._Description,
	|	SprKontr._Description,
	|	Spr_Har._Description";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	СтрВозвр = "";	
	Попытка
		rs.MoveFirst();
		//
		Сч = 0;
		Пока НЕ rs.EOF() Цикл
			Сч = Сч + 1;
			
			СтрВозвр = "Возврат за 2 дня - " + Строка(Rs.Fields("товар").Value) + " " + Строка(Rs.Fields("поставщик").Value) +
						" количество - " + Строка(Rs.Fields("количество").Value) + " " + Строка(Rs.Fields("Комментарий").Value);	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//
	Возврат СтрВозвр;	
	
КонецФункции

&НаСервереБезконтекста
Функция ЗначРекв(Ссылка, Рекв)
	
	Возврат Ссылка[Рекв]
	
КонецФункции

//---АК БЕЛН 2016.12.20

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбращенияПокупателей.СообщениеОтправлено" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма")
				И Источник.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор Тогда
			Запись.ДатаОтправкиОтветственным = ТекущаяДата();
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	//+++AK GREK 05.09.2017 ИП-00015679
	Если ИмяСобытия = "ОбращенияПокупателей.ЗапросНаВидеоОтправлен" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма")
				И Источник.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор Тогда
			Запись.ЗапросВидео=Истина;
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//---AK
КонецПроцедуры

&НаКлиенте
//+++АК SHEP 20160629
Процедура Номер_Карты_ОКОткрытие(Элемент, СтандартнаяОбработка)
	
	Перем НомерКарты;
	
	СтандартнаяОбработка = Ложь;
	НомерКарты = СокрЛП(Элемент.ТекстРедактирования);
	
	Если НЕ ЗначениеЗаполнено(НомерКарты) Тогда
		Предупреждение("Заполните, пожалуйста, номер карты!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровФормы = Новый Структура("Email", НомерКарты);	
	СтруктураПараметровФормы.Вставить("ЦельНачисления", СокрЛП(Запись.Примечание));
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.КарточкаКлиента", СтруктураПараметровФормы,, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Номер_Карты_ОКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем НомерКарты;
	
	СтандартнаяОбработка = Ложь;
	НомерКарты = СокрЛП(Элемент.ТекстРедактирования);
	
	Если НЕ ЗначениеЗаполнено(НомерКарты) Тогда
		Предупреждение("Заполните, пожалуйста, номер карты!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровФормы = Новый Структура("НомерКарты"	, НомерКарты);
	СтруктураПараметровФормы.Вставить("ЦельНачисления"		, СокрЛП(Запись.Примечание));
	СтруктураПараметровФормы.Вставить("ПричинаНачисления"	, ПредопределенноеЗначение("Перечисление.АК_ПричиныНачисленияБаллов.НачислитьПоЧеку"));
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаОтчетыПоКартам", СтруктураПараметровФормы,, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры
//---АК SHEP 20160629

//+++АК SHEP 20160712
&НаКлиенте
Процедура СсылкаНаСайтОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение(Запись.СсылкаНаСайт);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
//---АК SHEP 20160712

//+++АК SHEP 20160718
Функция ОтветитьПоЭлектроннойПочте(ОтветПокупателю)
	
	СтрокаАдресовЭП = Запись.email;
	МассивАдресовЭП = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдресовЭП, ",");
	
	Если НЕ ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресЭПОтправителя = "info@izbenka.msk.ru";
	УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
		УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу("m@gmail.com");
		Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаЭлектроннойПочты);
	Профиль.Пользователь 		= АдресЭПОтправителя;
	Профиль.ПользовательSMTP 	= АдресЭПОтправителя;
	Профиль.Пароль 				= "iz09benka";
	Профиль.ПарольSMTP 			= Профиль.Пароль;
	Почта.Подключиться(Профиль);
	
	// 0 -- тема письма, 1 -- ИдентификаторСообщения, на которое нужно ответить
	МассивЗаголовковПисьма = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Запись.СсылкаНаСайт, "#ИдентификаторСообщения_In-Reply-To#");
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Re:" + МассивЗаголовковПисьма[0];
	//Письмо.ИмяОтправителя = Строка(Отправитель);
	Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	Для Каждого Адрес1 Из МассивАдресовЭП Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес1;
	КонецЦикла;
	
	Текст1 = Письмо.Тексты.Добавить();
	Текст1.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	Текст1.Текст 		= ОтветПокупателю;
	
	Если МассивЗаголовковПисьма.Количество() > 1 Тогда
		Письмо.УстановитьПолеЗаголовка("In-Reply-To", МассивЗаголовковПисьма[1]);
	КонецЕсли;
	
	Успешно = Истина;
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
		ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Успешно = Ложь;
	КонецПопытки;
	
	Почта.Отключиться();
	Возврат Успешно;
	
КонецФункции

//+++АК SHEP 20160713
&НаКлиенте
Процедура ОтветитьПокупателюВСоцСетях(Команда)
	
	Перем СсылкаНаСайт;
	
	СсылкаНаСайт = Запись.СсылкаНаСайт;
	Если НЕ ЗначениеЗаполнено(СсылкаНаСайт) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветПокупателюТекст = Элементы.ОтветПокупателю.ТекстРедактирования;
	
	Если ПустаяСтрока(ОтветПокупателюТекст) Тогда
		Предупреждение("Текст ответа не заполнен!");
		Возврат;
	КонецЕсли;
	
	Если Запись.ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ВКонтакте") Тогда
		
		Поз = Найти(СсылкаНаСайт, "?w=wall");
		Если Поз = 0 Тогда Возврат; КонецЕсли;
		
		СсылкаНаСайт = Сред(СтрЗаменить(СсылкаНаСайт, "?w=wall", ""), Поз);
		//СсылкаНаСайт = СтрЗаменить(СтрЗаменить(СсылкаНаСайт, "&from_id=", ";"), "_", ";");
		МассивПараметров = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(СсылкаНаСайт, "&from_id=", ";"), "_", ";"), ";");
		
		Попытка
			access_token = РаботаССайтомВКонтакте.ПолучитьЗначениеПараметра("access_token");
			РаботаССайтомВКонтакте.ДобавитьКомментарийКЗаписиНаСтене(access_token, МассивПараметров[0], МассивПараметров[1], ОтветПокупателюТекст, МассивПараметров[2]);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Запись.ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.Facebook") Тогда
		
		Поз = Найти(СсылкаНаСайт, "/posts/");
		Если Поз = 0 Тогда Возврат; КонецЕсли;
		
		post_id = СтрЗаменить(СтрЗаменить(СсылкаНаСайт, "https://www.facebook.com/", ""), "/posts/", "_");
		
		Попытка
			access_token = РаботаССайтомВКонтакте.ПолучитьЗначениеПараметра("access_token");
			РаботаССайтомFacebook.ДобавитьКомментарийКЗаписиНаСтене(access_token, post_id, ОтветПокупателюТекст);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Запись.ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ЭлектроннаяПочта") Тогда
		
		Если НЕ ОтветитьПоЭлектроннойПочте(ОтветПокупателюТекст) Тогда Возврат; КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Запись.ОтветПо = Истина;
	Записать();
	ПриЧтенииНаСервере(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Перем ИсточникОбращения;
	
	ИсточникОбращения = Запись.ИсточникОбращения;
	
	Если ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ВКонтакте")
			ИЛИ ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.Facebook")
			ИЛИ ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ЭлектроннаяПочта") Тогда
		
		//ОтветилиПокупателю = Запись.ОтветПо;
		//Элементы.ОтветПо.ТолькоПросмотр = ОтветилиПокупателю;
		//Элементы.ИсточникОбращения.ТолькоПросмотр = ОтветилиПокупателю;
		//Элементы.ОтветПокупателю.ТолькоПросмотр = ОтветилиПокупателю;
		//Элементы.ОтветПокупателю.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[?(ОтветилиПокупателю, "Верх", "Нет")];
		Элементы.ОтветитьПокупателюВСоцСетях.Видимость = Истина; //НЕ ОтветилиПокупателю;
		
		//заблокируем от изменений
		Элементы.СсылкаНаСайт.ТолькоПросмотр = ЗначениеЗаполнено(Запись.СсылкаНаСайт);
		
		Если ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ЭлектроннаяПочта") Тогда
			Элементы.СсылкаНаСайт.КнопкаОткрытия = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	//+++АК SHEP 2018.09.28 ИП-00018753.03
	ПерепискаСПроизводителем = СтрЗаменить(Запись.ПерепискаСПроизводителем, "|" + Символы.ПС, Символы.ПС);
	ПерепискаСПроизводителем = СтрЗаменить(ПерепискаСПроизводителем, "|", Символы.ПС);
	//---АК SHEP 2018.09.28
	
	//+++АК SHEP 2018.10.03 ИП-00018753.03
	ОтборЛентыСообщений = ОбращенияПокупателейЛентаСообщений.Отбор;
	ОбщегоНазначенияКлиентСервер.УстановитьНедоступныйЭлементОтбора(ОтборЛентыСообщений, "id_OK", Запись.id_OK);
	ОбщегоНазначенияКлиентСервер.УстановитьНедоступныйЭлементОтбора(ОтборЛентыСообщений, "GUID_Загрузки", Запись.GUID_Загрузки);
	ОбщегоНазначенияКлиентСервер.УстановитьНедоступныйЭлементОтбора(ОтборЛентыСообщений, "ДатаДок", Запись.ДатаДок);
	//---АК SHEP 2018.10.03
	
КонецПроцедуры
//---АК SHEP 20160713

//+++АК LOBV 280716
&НаКлиенте
Процедура РегулярностьУведомленияПриИзменении(Элемент)
	
	ОбработкаЭлементовПриИзмененииРегулярности();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.АК_УведомленияПоОбращениямПокупателей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбращениеПокупателя = ТекущийОбъект.id_OK;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегулярностьУведомления) Тогда
		
		Если ТекущийОбъект.РегулярностьУведомления = "День" Тогда
			МоментОтправки = НачалоДня(ТекущаяДата() + 24*60*60);
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Час" Тогда
			МоментОтправки = НачалоЧаса(ТекущаяДата() + 60*60);
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Неделя" Тогда
			МоментОтправки = НачалоНедели(ТекущаяДата()+7*24*60*60);
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Дата" Тогда
			МоментОтправки = ТекущийОбъект.НачалоПериодаУведомления;
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Период" Тогда
			Если ТекущаяДата() < ТекущийОбъект.НачалоПериодаУведомления
					ИЛИ ТекущаяДата()>ТекущийОбъект.ОкончаниеПериодаУведомления Тогда
				МоментОтправки=ТекущийОбъект.НачалоПериодаУведомления;
			Иначе
				МоментОтправки=НачалоДня(ТекущаяДата() + 24*60*60);
			КонецЕсли;
		КонецЕсли;
		
		Если МоментОтправки > ТекущаяДата() Тогда
			НаборЗаписей = РегистрыСведений.АК_УведомленияПоОбращениямПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбращениеПокупателя.Установить(ТекущийОбъект.id_OK);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбращениеПокупателя	= ТекущийОбъект.id_OK;
			НоваяЗапись.СписокПолучателей	= ТекущийОбъект.ПолучателиУведомления;
			НоваяЗапись.МоментОтправки		= МоментОтправки;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//+++АК ELEM 20160728
	//Если форма была открыта с ЗаказОбратногоЗвонка_id, то обновляем данные на SQL сервер
	Если ЗначениеЗаполнено(ЗаказОбратногоЗвонка_id) Тогда
		СтрокиРеестраОбратныхЗвонков_УстановитьСтатусВыполнено(ЗаказОбратногоЗвонка_id);	
	КонецЕсли;
	//---АК ELEM 20160728
	
	//+++АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	попытка
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(Запись.GUID_Загрузки) Тогда
			
			Если Запись.СтатусЖалобы=Перечисления.СтатусыЖалоб.НеПодтверждена
					ИЛИ НЕ ЗначениеЗаполнено(Запись.Производитель) Тогда
				УведомлятьТехнологаПриРассылке	= Ложь;
				УведомлятьПоставщикаПриРассылке	= Ложь;
			иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Поставщик"	, Запись.Производитель);
				Запрос.УстановитьПараметр("ТипЖалобы"	, Запись.ТипЖалобы);
				Запрос.УстановитьПараметр("ТипОбращения", Запись.ТипОбращения);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьТехнологаПриРассылке,
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьПоставщикаПриРассылке
				|ИЗ
				|	РегистрСведений.АК_НастройкиРассылокПоставщикамТехнологам КАК АК_НастройкиРассылокПоставщикамТехнологам
				|ГДЕ
				|	АК_НастройкиРассылокПоставщикамТехнологам.Поставщик = &Поставщик
				|	И (ВЫРАЗИТЬ(АК_НастройкиРассылокПоставщикамТехнологам.Настройка КАК Справочник.ТипыЖалоб)) = &ТипЖалобы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьТехнологаПриРассылке,
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьПоставщикаПриРассылке
				|ИЗ
				|	РегистрСведений.АК_НастройкиРассылокПоставщикамТехнологам КАК АК_НастройкиРассылокПоставщикамТехнологам
				|ГДЕ
				|	АК_НастройкиРассылокПоставщикамТехнологам.Поставщик = &Поставщик
				|	И (ВЫРАЗИТЬ(АК_НастройкиРассылокПоставщикамТехнологам.Настройка КАК Справочник.ТипыОбращенийПокупателей)) = &ТипОбращения";
				Результаты = Запрос.ВыполнитьПакет();
				
				//тип жалобы
				Результат = Результаты[0].Выбрать();
				Если Результат.Следующий() тогда
					//приоритет у настроек контрагента
					УведомлятьТехнологаПриРассылке	= Результат.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= Результат.УведомлятьПоставщикаПриРассылке;
				иначе
					УведомлятьТехнологаПриРассылке	= Запись.ТипЖалобы.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= Запись.ТипЖалобы.УведомлятьПоставщикаПриРассылке;
				КонецЕсли;
				
				//тип обращения
				Результат = Результаты[1].Выбрать();
				Если Результат.Следующий() тогда
					//приоритет у настроек контрагента
					УведомлятьТехнологаПриРассылке	= УведомлятьТехнологаПриРассылке
														ИЛИ Результат.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= УведомлятьПоставщикаПриРассылке
														ИЛИ Результат.УведомлятьПоставщикаПриРассылке;
				иначе
					УведомлятьТехнологаПриРассылке	= УведомлятьТехнологаПриРассылке
														ИЛИ Запись.ТипОбращения.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= УведомлятьПоставщикаПриРассылке
														ИЛИ Запись.ТипОбращения.УведомлятьПоставщикаПриРассылке;
				КонецЕсли;
			КонецЕсли;
			
			//найдем документ-регистратор
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("GUID_Загрузки", Запись.GUID_Загрузки);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	АК_РассылкаПоставщикамТехнологам.Ссылка
			|ИЗ
			|	Документ.АК_РассылкаПоставщикамТехнологам КАК АК_РассылкаПоставщикамТехнологам
			|ГДЕ
			|	АК_РассылкаПоставщикамТехнологам.GUID_Загрузки = &GUID_Загрузки";
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
			иначе
				Регистратор = Неопределено;
			КонецЕсли;
			
			//возможно, движения не нужны (а документ уже есть)
			Если НЕ УведомлятьТехнологаПриРассылке
					И НЕ УведомлятьПоставщикаПриРассылке Тогда
				Если ЗначениеЗаполнено(Регистратор) Тогда
					Регистратор = Регистратор.ПолучитьОбъект();
					Регистратор.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			иначе
				//движения нужны
				Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
					Регистратор = Документы.АК_РассылкаПоставщикамТехнологам.СоздатьДокумент();
				иначе
					Регистратор = Регистратор.ПолучитьОбъект();
				КонецЕсли;
				Регистратор.Номер			= Запись.id_OK;
				Регистратор.GUID_Загрузки	= Запись.GUID_Загрузки;
				Регистратор.Дата			= Запись.ДатаДок;
				Регистратор.Производитель	= Запись.Производитель;
				Если ЗначениеЗаполнено(Технолог) Тогда
					Регистратор.Технолог	= Технолог;
				иначе
					Регистратор.Технолог	= Запись.Номенклатура.Технолог;
				КонецЕсли;
				Регистратор.УведомлятьТехнологаПриРассылке	= УведомлятьТехнологаПриРассылке;
				Регистратор.УведомлятьПоставщикаПриРассылке	= УведомлятьПоставщикаПриРассылке;
				Регистратор.ОбменДанными.Загрузка 	= Истина;
				Регистратор.Проведен 				= Истина;
				Регистратор.Записать();
				Регистратор=Регистратор.Ссылка;
				
				Движения = РегистрыНакопления.АК_РассылкиПоставщикамТехнологам.СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Регистратор);
				
				Движения.Записывать = Истина;
				Движения.Очистить();
				Движение = Движения.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Регистратор.Дата;
				Движение.Производитель 	= Запись.Производитель;
				Движение.Технолог 		= Технолог;
				Движение.УведомлятьПоставщикаПриРассылке 	= УведомлятьПоставщикаПриРассылке;
				Движение.УведомлятьТехнологаПриРассылке 	= УведомлятьТехнологаПриРассылке;
				Движение.КоличествоОбращений = 1;
				
				Движения.Записать();
				
			КонецЕсли;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
	КонецПопытки;
	//---АК VERN 2016.08.10 ИП-00013306
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЭлементовПриИзмененииРегулярности()
	
	Элементы.НачалоПериодаУведомления.Видимость		= (Запись.РегулярностьУведомления = "Дата"
														ИЛИ Запись.РегулярностьУведомления="Период");
	Элементы.ОкончаниеПериодаУведомления.Видимость	= (Запись.РегулярностьУведомления = "Период");
	Элементы.НачалоПериодаУведомления.Заголовок		= ?(Запись.РегулярностьУведомления = "Дата", "дата уведомления", "с");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЭлементовПриОтключенииУведомления()
	
	УведомлениеНеИспользуется = (Запись.Закрыт
									ИЛИ Запись.ОтменаУведомления);
	
	Запись.РегулярностьУведомления = ?(УведомлениеНеИспользуется, "", Запись.РегулярностьУведомления);
	Элементы.РегулярностьУведомления.Доступность	= НЕ УведомлениеНеИспользуется;
	Элементы.ПолучателиУведомления.Доступность		= НЕ УведомлениеНеИспользуется;
	Элементы.ПериодУведомления.Видимость			= НЕ УведомлениеНеИспользуется;
	ОбработкаЭлементовПриИзмененииРегулярности();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	
	ОбработкаЭлементовПриОтключенииУведомления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаУведомленияПриИзменении(Элемент)
	
	ОбработкаЭлементовПриОтключенииУведомления();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УсловиеПериода = (Запись.НачалоПериодаУведомления <= Запись.ОкончаниеПериодаУведомления);
	УсловиеДаты = ЗначениеЗаполнено(Запись.НачалоПериодаУведомления);
	Если (Запись.РегулярностьУведомления = "Дата"
			И НЕ УсловиеДаты)
		ИЛИ	(Запись.РегулярностьУведомления = "Период"
				И НЕ (УсловиеПериода
						И УсловиеДаты)) Тогда
		Сообщить("Неверные настройки отправки уведомлений!");
		Отказ = Истина;
	КонецЕсли;
	
	//+++АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений
	Если Запись.ТипЖалобы.ЭтоВключениеВПродукт
			И Запись.ДатаДок >= Дата(2016, 9, 1)
			И НЕ ЗначениеЗаполнено(Запись.ТипВключения)
			И НЕ ТипВключенияНеУказанУжеПредупредили Тогда
		
		ТипВключенияНеУказанУжеПредупредили = Истина;
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан тип включения";
		Сообщение.Поле  = "ТипВключения";
		Сообщение.УстановитьДанные(Запись);
		Сообщение.Сообщить();
		
	КонецЕсли;
	//---АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений
	
КонецПроцедуры


//---АК LOBV 280716

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	//+++АК SHEP 2018.07.26 ИП-00018753.03
	//ЗначениеВозврат = ОткрытьФормуМодально("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПрикрепленныхФайлов", Новый Структура("ТабФайлов", Запись.ПрикрепленныеФайлы));
	СтруктураПараметры = Новый Структура("ТабФайлов", Запись.ПрикрепленныеФайлы);
	СтруктураДанныеОтбор = Новый Структура("id_OK,GUID_Загрузки,ДатаДок");
	ЗаполнитьЗначенияСвойств(СтруктураДанныеОтбор, Запись);
	СтруктураПараметры.Вставить("ТабФайловОтветПроизводителя", ПрикреплённыеФайлыОтветаПроизводителя(СтруктураДанныеОтбор));
	
	ЗначениеВозврат = ОткрытьФормуМодально("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПрикрепленныхФайлов", СтруктураПараметры);
	//---АК SHEP 2018.07.26
	Если ЗначениеЗаполнено(ЗначениеВозврат) Тогда
		Запись.ПрикрепленныеФайлы = ЗначениеВозврат;
	КонецЕсли;	
	
КонецПроцедуры


//+++АК ELEM 20160728
&НаСервере
Процедура СтрокаРеестраОбратныхЗвонков_СнятьФлагБлокировки(ЗаказОбратногоЗвонка_id)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль = "UPDATE [Loyalty].[dbo].[CashRequest_CallBack]
	|SET  is_blocked = NULL
	|FROM [Loyalty].[dbo].[CashRequest_CallBack]
	|WHERE id = " + ВнешниеДанные.ФорматПоля(ЗаказОбратногоЗвонка_id);	
	
	ЗапросПолный = "declare @err int =1
	|while @err=1
	|begin
	| begin try
	|" + ЗапросСкуль + "
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";
	
	Попытка			
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при сняти флаг блокировки со строки РеестраОбратныхЗвонков", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
КонецПроцедуры

&НаСервере
Процедура СтрокиРеестраОбратныхЗвонков_УстановитьСтатусВыполнено(ЗаказОбратногоЗвонка_id)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль =
	"UPDATE [Loyalty].[dbo].[CashRequest_CallBack]
	|SET  Request_Status = 1
	|FROM [Loyalty].[dbo].[CashRequest_CallBack]
	|WHERE id = " + ВнешниеДанные.ФорматПоля(ЗаказОбратногоЗвонка_id);	
	
	ЗапросПолный =
	"declare @err int =1
	|while @err=1
	|begin
	| begin try
	|" + ЗапросСкуль + "
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";
	
	Попытка			
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при установке статуса выполнено у строки РеестраОбратныхЗвонков", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЗаказОбратногоЗвонка_id) Тогда
		СтрокаРеестраОбратныхЗвонков_СнятьФлагБлокировки(ЗаказОбратногоЗвонка_id);	
	КонецЕсли;
	
КонецПроцедуры

//---АК ELEM 20160728

//+++АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений 

Функция ЭтоВключениеВПродуктНаСервере()
	
	//zhas --  13-10-17 ИП-00016956.000.00000001
	Запись.Оценка = Запись.ТипЖалобы.Оценка;
	//zhas --  13-10-17 ИП-00016956.000.00000001
	
	Возврат Запись.ТипЖалобы.ЭтоВключениеВПродукт;
	
КонецФункции

&НаКлиенте
Процедура ТипЖалобыПриИзменении(Элемент)
	
	ЭтоВключениеВПродукт = ЭтоВключениеВПродуктНаСервере();
	Если НЕ ЭтоВключениеВПродукт Тогда
		Запись.ТипВключения = ПредопределенноеЗначение("Перечисление.АК_ТипыВключений.ПустаяСсылка");
	КонецЕсли;
	Элементы.ТипВключения.Доступность = ЭтоВключениеВПродукт;
	
КонецПроцедуры

Процедура ИсточникОбращенияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Запись.ИсточникОбращения)
			И Запись.ИсточникОбращения.ОтменаУведомления Тогда
		Запись.ОтменаУведомления = Запись.ИсточникОбращения.ОтменаУведомления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбращенияПриИзменении(Элемент)
	
	Если НЕ Запись.ОтменаУведомления Тогда
		ИсточникОбращенияПриИзмененииНаСервере();
		Если Запись.ОтменаУведомления Тогда
			ОтменаУведомленияПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	//
	УстановитьАвтоотметкуНезаполненногоСписаниеВозврат();
	
КонецПроцедуры

//---АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений

&НаКлиенте
Процедура ВремяОбслуживанияВОчереди(Команда)
	
	Если НЕ ЗначениеЗаполнено(Запись.ДатаСобытия) Тогда
		Сообщить("Не заполнен реквизит дата события");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.Номер_Карты_ОК) Тогда
		Сообщить("Не заполнен реквизит карта покупателя");
		Возврат;
	КонецЕсли;
	
	//
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаВремениОбслуживанияВОчереди",
					Новый Структура("ДатаПокупки, КартаПокупателя, Магазин", Запись.ДатаСобытия, Запись.Номер_Карты_ОК, Запись.СтруктурнаяЕдиница));
	
КонецПроцедуры


&НаКлиенте
Процедура Видео(Команда)
	
	Если Запись.Номер_Бланка * Запись.НомерКассы = 0 Тогда
		Сообщить("Нет данных чека!");
		Возврат
	КонецЕсли;
	
	ПараметрыПередачи = Новый Структура("НомерЧека, НомерКассы, Дата, Тип", Запись.Номер_Бланка, Запись.НомерКассы, Запись.ДатаСобытия, 10);
	
	ОткрытьФорму("Обработка.ПросмотрВидеоСКамер.Форма.Форма", ПараметрыПередачи, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")Тогда
		
		Если ИсточникВыбора.ИмяФормы = "Обработка.ПросмотрВидеоСКамер.Форма.Форма" Тогда
			
			Если ВыбранноеЗначение = Ложь Тогда
				Сообщить("Не найдены видео по чеку");
			ИначеЕсли ВыбранноеЗначение = Истина Тогда
				Запись.ВидеоПросмотрено = Истина;	
			КонецЕсли;
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрСведений.ОбращенияПокупателей.Форма.ФормаПоискЧека" Тогда
			
			Если ВыбранноеЗначение <> Неопределено Тогда
				Запись.Номер_Бланка	= ВыбранноеЗначение.НомерЧека;
				Запись.НомерКассы	= ВыбранноеЗначение.НомерКассы;
				Запись.КассирПоЧеку	= ВыбранноеЗначение.Кассир;
				//+++АК БЕЛН 2016.12.20
				ПродавецПриИзменении();
				//---АК БЕЛН 2016.12.20
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьВидео(Команда)
	Если Запись.Номер_Бланка * Запись.НомерКассы = 0 Тогда
		Предупреждение("Нет данных о чеке!");
	КонецЕсли;
	
	//+++AK GREK 05.09.2017 ИП-00015679
	мТемаПисьма 	= Строка(Запись.ТипЖалобы) + "_" + Запись.Номенклатура + "_" + Запись.СтруктурнаяЕдиница + "_" +
						Формат(Запись.ДатаДок, "ДФ=dd.MM.yyyy") + "_" + СокрЛП(Строка(Запись.GUID_Загрузки));
	
	мТекстПисьма 	= Строка(Запись.Примечание) + Символы.ПС + Запись.СтруктурнаяЕдиница + " тел.: " +
						ЗначРекв(Запись.СтруктурнаяЕдиница, "ТелефонныйНомер1") + Символы.ПС + Запись.Номенклатура + Символы.ПС +
						"Технолог: " + Запись.Технолог + Символы.ПС + Запись.Производитель + Символы.ПС +
						"Автор: " + СокрЛП(Запись.ФИО_Покупателя) + Символы.ПС +
						"Номер карты: " + СокрЛП(Запись.Номер_Карты_ОК) + Символы.ПС +
						"Телефон: " + СокрЛП(Запись.Телефон) + Символы.ПС +
						ПолучитьДопСообщение();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбращения"	, Запись.ТипОбращения);
	СтруктураПараметров.Вставить("ТемаПисьма"	, мТемаПисьма);
	СтруктураПараметров.Вставить("ТекстПисьма"	, мТекстПисьма);
	СтруктураПараметров.Вставить("Номенклатура"	, Запись.Номенклатура);
	СтруктураПараметров.Вставить("Производитель", Запись.Производитель);
	СтруктураПараметров.Вставить("ТТ"			, Запись.СтруктурнаяЕдиница);
	СтруктураПараметров.Вставить("Ответственный", Запись.Ответственный);
	СтруктураПараметров.Вставить("ТабФайлов"	, Запись.ПрикрепленныеФайлы);
	СтруктураПараметров.Вставить("НомерКассы"	, Запись.НомерКассы);
	СтруктураПараметров.Вставить("Номер_Бланка"	, Запись.Номер_Бланка);
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаОтправкиОтветственномуЗаТипОбращения", СтруктураПараметров, ЭтаФорма);
	//---AK
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЧек(Команда)
	
	СтруктураПараметров = Новый Структура("Магазин, Номенклатура, НомерКарты, ДатаПокупки");
	СтруктураПараметров.Магазин 		= Запись.СтруктурнаяЕдиница;
	СтруктураПараметров.Номенклатура 	= Запись.Номенклатура;
	СтруктураПараметров.НомерКарты 		= Запись.Номер_Карты_ОК;
	СтруктураПараметров.ДатаПокупки 	= Запись.ДатаСобытия;
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПоискЧека", СтруктураПараметров, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПереписку(Команда)
	ЗаполнитьПерепискуНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция База_ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	
	СтрокаПодключенияТелеграм = "Provider=SQLOLEDB.1;Persist Security Info=True;Initial Catalog=Telegram;Data Source=srv-sql03;Password=" 
		+ ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПарольSQL")
		+ ";User ID=" + ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ЛогинSQL");
	
	Попытка
		
		CurrentConnection = База_Подключение(СтрокаПодключенияТелеграм);
		CurrentConnection.CursorLocation = 2;
		
		RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
			RecordSet=RecordSet.NextRecordSet();
		КонецЦикла;				
		
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПерепискуНаСервере()
	
	Если Запись.UIDTelegram = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"SELECT message_type,message_text,file_id,add_date,inbox_outbox
		|FROM [Telegram].[dbo].[BOT_Complaints]
		|WHERE message_type<100 AND Doc_Ref IN (SELECT [Doc_Ref]
		|FROM [Telegram].[dbo].[BOT_Complaints]
		|WHERE file_description = '" + Запись.UIDTelegram + "' AND (message_type = 100 OR message_type = 101))
		|ORDER BY add_date";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	ТЗО = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	ТаблицаПереписки.Загрузить(ТЗО);
	Для каждого Стр Из ТаблицаПереписки Цикл	
		Стр.Тип = ?(Стр.inbox_outbox=1, "ОПЕРАТОР:", "КЛИЕНТ:");
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.Переписка Тогда
		ЗаполнитьПерепискуНаСервере();
	КонецЕсли;
КонецПроцедуры

//+++АК SHEP 20170725 ИП-00016217
&НаКлиенте
Процедура ВводПоСтрокеАльтернативный(Команда)
	ВводПоСтрокеАльтернативный = НЕ ВводПоСтрокеАльтернативный;
	Элементы.ВводПоСтрокеАльтернативный.Пометка = ВводПоСтрокеАльтернативный;
КонецПроцедуры

&НаКлиенте
Процедура ВводПоСтрокеАльтернативныйОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВводПоСтрокеАльтернативный И СтрДлина(Текст) > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Элемент.Имя, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводПоСтрокеАльтернативныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ВводПоСтрокеАльтернативный И СтрДлина(Текст) > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Элемент.Имя, Текст);
	//+++ GOLV 2018.05.14 ИП-00018610      		
	ИначеЕсли Элемент.Имя = "Производитель" Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		#Иначе
		СтандартнаяОбработка = Ложь;
		ДатаДок = ?(ЗначениеЗаполнено(Запись.ДатаДок), Запись.ДатаДок, ТекущаяДата());
		Ном = Запись.Номенклатура;
		ДанныеВыбора = ПолучитьПроизводителейНаСервере(Текст, ДатаДок, Ном);
		#КонецЕсли
	//--- GOLV
	КонецЕсли;
	
КонецПроцедуры

//+++ GOLV 2018.05.14 ИП-00018610
&НаСервереБезКонтекста
Функция ПолучитьПроизводителейНаСервере(Текст, ДатаДок, Товар)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон"	, КонецДня(ДатаДок));
	Запрос.УстановитьПараметр("Владелец", Товар);
		   
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныПоставщиковСрезПоследних.Поставщик.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаКон, Номенклатура = &Владелец) КАК ЦеныПоставщиковСрезПоследних
	|ГДЕ
	|	ЦеныПоставщиковСрезПоследних.Поставщик.Наименование ПОДОБНО &Наименование
	|	И НЕ ЦеныПоставщиковСрезПоследних.Поставщик.ПометкаУдаления
	|	И НЕ ЦеныПоставщиковСрезПоследних.Поставщик.ЭтоГруппа";	
	Запрос.УстановитьПараметр("Наименование", Текст + "%");		

	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВыбора;
	
КонецФункции
//--- GOLV

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНаСервере(ИмяРекъ, Текст)
	
	СписокВыбора = Новый СписокЗначений;
	
	БезГрупп = Истина;
	Если ИмяРекъ = "Номенклатура" Тогда
		ПолноеИмяМД = "Справочник.Номенклатура";
	ИначеЕсли ИмяРекъ = "СтруктурнаяЕдиница" Тогда
		БезГрупп = Ложь;
		ПолноеИмяМД = "Справочник.СтруктурныеЕдиницы";
	ИначеЕсли ИмяРекъ = "Производитель" Тогда
		ПолноеИмяМД = "Справочник.Контрагенты";
	Иначе
		Возврат СписокВыбора;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка,
		|	Наименование,
		|	ПометкаУдаления
		|ИЗ
		|	" + ПолноеИмяМД + "
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И НЕ ЭтоГруппа
		|	И Наименование ПОДОБНО &Наименование");
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	
	Если БезГрупп = Ложь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ЭтоГруппа", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокВыбора.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

//+++АК БЕЛН 2016.12.20
&НаКлиенте
Процедура Продавец1ПриИзменении(Элемент)
	ПродавецПриИзменении();
КонецПроцедуры


&НаКлиенте
Процедура Продавец2ПриИзменении(Элемент)
	ПродавецПриИзменении();
КонецПроцедуры


&НаКлиенте
Процедура Продавец3ПриИзменении(Элемент)
	ПродавецПриИзменении();
КонецПроцедуры


&НаКлиенте
Процедура КассирПоЧекуПриИзменении(Элемент)
	ПродавецПриИзменении();
КонецПроцедуры

Процедура ПродавецПриИзменении()
	Если ЗначениеЗаполнено(Запись.Продавец1) ИЛИ ЗначениеЗаполнено(Запись.Продавец2) ИЛИ ЗначениеЗаполнено(Запись.Продавец3) 
		ИЛИ ЗначениеЗаполнено(Запись.КассирПоЧеку) ИЛИ ЗначениеЗаполнено(Запись.ПродавецАутсорс) ИЛИ ЗначениеЗаполнено(Запись.КассирАутсорс) Тогда
		Если ЗначениеЗаполнено(Запись.ПродавецАутсорс) ИЛИ ЗначениеЗаполнено(Запись.КассирАутсорс) Тогда
	    	Запись.Аутсорс=Истина;
		Иначе	
		    УстановитьПривилегированныйРежим(Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТабельРаботыПродавцов.Сотрудник
				|ИЗ
				|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
				|ГДЕ
				|	ТабельРаботыПродавцов.Сотрудник В(&Продавцы)
				|
				|СГРУППИРОВАТЬ ПО
				|	ТабельРаботыПродавцов.Сотрудник
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТабельРаботыКассиров.Сотрудник
				|ИЗ
				|	РегистрСведений.ТабельРаботыКассиров КАК ТабельРаботыКассиров
				|ГДЕ
				|	ТабельРаботыКассиров.Сотрудник в (&Кассиры)
				|
				|СГРУППИРОВАТЬ ПО
				|	ТабельРаботыКассиров.Сотрудник";

			Продавцы=Новый Массив;
			Если ЗначениеЗаполнено(Запись.Продавец1) Тогда
				Продавцы.Добавить(Запись.Продавец1);	
			КонецЕсли; 
			Если ЗначениеЗаполнено(Запись.Продавец2) Тогда
				Продавцы.Добавить(Запись.Продавец2);	
			КонецЕсли; 
			Если ЗначениеЗаполнено(Запись.Продавец3) Тогда
				Продавцы.Добавить(Запись.Продавец3);	
			КонецЕсли; 
			Кассиры=Новый Массив;
			Если ЗначениеЗаполнено(Запись.КассирПоЧеку) Тогда
				Кассиры.Добавить(Запись.КассирПоЧеку);	
			КонецЕсли; 
			
			Запрос.УстановитьПараметр("Продавцы", Продавцы);
			Запрос.УстановитьПараметр("Кассиры", Кассиры);

			Результат = Запрос.Выполнить();

			ТЗРез = Результат.Выгрузить();
			
	        Фл=Ложь;
			Если ЗначениеЗаполнено(Запись.Продавец1) И Фл=Ложь Тогда
				Фл=ТЗРез.Найти(Запись.Продавец1)=Неопределено;	
			КонецЕсли; 
			Если ЗначениеЗаполнено(Запись.Продавец2) И Фл=Ложь Тогда
				Фл=ТЗРез.Найти(Запись.Продавец2)=Неопределено;	
			КонецЕсли; 
			Если ЗначениеЗаполнено(Запись.Продавец3) И Фл=Ложь Тогда
				Фл=ТЗРез.Найти(Запись.Продавец3)=Неопределено;	
			КонецЕсли; 
			Если ЗначениеЗаполнено(Запись.КассирПоЧеку) И Фл=Ложь Тогда
				Фл=ТЗРез.Найти(Запись.КассирПоЧеку)=Неопределено;	
			КонецЕсли; 
		    Запись.Аутсорс=Фл;
		КонецЕсли;
	Иначе
	    Запись.Аутсорс=Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПродавецАутсорсПриИзменении(Элемент)
	ПродавецПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КассирАутсорсПриИзменении(Элемент)
	ПродавецПриИзменении();
КонецПроцедуры
//---АК БЕЛН 2016.12.20
//---АК SHEP 20170725 

//AK GREK 05.09.2017 ИП-00015679
//Проверим успешность выполнения запроса на видео, предупредим в случае ошибки
Процедура  ПроверкаСозданияЗапросаВидео()
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапроса =
	"SELECT
	|	id, 
	|	CashCheckNo, 
	|	CashID, 
	|	Email, 
	|	Link_View, 
	|	Link_Download,
	|	text_video
	|FROM  Sms_repl..times_for_video
	|Where
	|	CashId = " + Формат(Запись.НомерКассы, "ЧГ=0") + "
	|	and CashCheckNo = " + Формат(Запись.Номер_Бланка, "ЧГ=0");
	rs = ADOСоединение.Execute(ТекстЗапроса);
	Попытка
       rs.MoveFirst();
       
	   Пока НЕ rs.EOF() Цикл  		       	   
			//ЗаписьВидеоПоЗапросу = РегистрыСведений.ВидеоПоЗапросу.СоздатьМенеджерЗаписи();
			//ЗаписьВидеоПоЗапросу.ID = rs.Fields("ID").Value;
			//ЗаписьВидеоПоЗапросу.НомерЧека = rs.Fields("CashCheckNo").Value;
			//ЗаписьВидеоПоЗапросу.НомерКассы = rs.Fields("CashID").Value; 
			//ЗаписьВидеоПоЗапросу.Email = rs.Fields("Email").Value;
			//ЗаписьВидеоПоЗапросу.СсылкаДляПросмотра = rs.Fields("Link_View").Value;
			//ЗаписьВидеоПоЗапросу.СсылкаДляСкачивания = rs.Fields("Link_Download").Value;
			//ЗаписьВидеоПоЗапросу.Комментарий = rs.Fields("text_video").Value;
			//ЗаписьВидеоПоЗапросу.ОтправленоНАПочту = Ложь;
			//ЗаписьВидеоПоЗапросу.Период = ТекущаяДата();
			//ЗаписьВидеоПоЗапросу.Записать();

		    rs.MoveNext();
       КонецЦикла;
	   
   Исключение
	   Сообщить("Не удалось запросить видео! Проверте правильность заполнения заявки." + ОписаниеОшибки(),СтатусСообщения.Внимание);
	   ADOСоединение.Close();
	   Возврат
   КонецПопытки;
   ADOСоединение.Close();
   
   Запись.ЗапросВидео = Истина;
КонецПроцедуры

&НаСервере
// Процедура заполнения дополнительных реквизитов по характеристике
//
// Параметры:
//  Характеристика  - <Тип.СправочникСсылка> - Характеристика номенклатуры
//
Процедура ЗаполнениеДополнительныхРеквизитовПоХарактеристике(Характеристика) //+++АК mika 2017.12.13 ИП-00017433

	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		СтруктураПолей = ПолучитьСтруктуруДополнительныхРеквизитовПоХарактеристике(Характеристика);
		
		Если СтруктураПолей <> Неопределено Тогда
			Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
				Этаформа[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;     
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнениеДополнительныхРеквизитовПоХарактеристике()

&НаСервереБезКонтекста
//Формирует и возвращает структуру полей для заполнение дополнительных реквизитов Характеристики номенклатуры
//
// Параметры:
//  Характеристика  - <Тип.СправочникСсылка> - Характеристика номенклатуры
//
// Возвращаемое значение:
//   <Тип.Структура>   - Структура значений
//  
Функция ПолучитьСтруктуруДополнительныхРеквизитовПоХарактеристике(Характеристика)  //+++АК mika 2017.12.13 ИП-00017433
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Статус КАК ХарактеристикаСтатус,
	|	ХарактеристикиНоменклатуры.Причина КАК ХарактеристикаПричина,
	|	ХарактеристикиНоменклатуры.ДатаВывода КАК ХарактеристикаДатаВывода,
	|	ХарактеристикиНоменклатуры.СтатусУРЗ КАК ХарактеристикаСтатусУРЗ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтруктураПолей = Новый Структура("ХарактеристикаСтатус, ХарактеристикаПричина, ХарактеристикаДатаВывода, ХарактеристикаСтатусУРЗ", 
				Перечисления.СтатусыХарактеристик.ПустаяСсылка(), "", Дата(1,1,1),  Перечисления.СтатусыХарактеристикУРЗ.ПустаяСсылка());
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
		КонецЦикла;
		
	Иначе
		
		СтруктураПолей = Неопределено;
		
	КонецЕсли;
	
	Возврат СтруктураПолей;
		
КонецФункции

//+++АК SHEP 2018.01.23 ИП-00017251.01
//Формирует и возвращает структуру полей для заполнения
&НаСервереБезКонтекста
Функция ДанныеБотаТелеграм(BOT_Purchase_Tovar_Reiting_ID)
	
	Возврат РегистрыСведений.ОбращенияПокупателей.ДанныеБотаТелеграм(BOT_Purchase_Tovar_Reiting_ID);
	
КонецФункции

&НаКлиенте
Процедура ТипОбращенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	#Если ТолстыйКлиентОбычноеПриложение Тогда
	#Иначе
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьТипыОбращенийНаСервере(Текст);
	#КонецЕсли

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипыОбращенийНаСервере(Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыОбращенийПокупателей.Ссылка
	|ИЗ
	|	Справочник.ТипыОбращенийПокупателей КАК ТипыОбращенийПокупателей
	|ГДЕ
	|	ТипыОбращенийПокупателей.Код ПОДОБНО ""___""
	|	И НЕ ТипыОбращенийПокупателей.ПометкаУдаления
	|	И ТипыОбращенийПокупателей.Наименование ПОДОБНО &Текст
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыОбращенийПокупателей.Наименование";	
	Запрос.УстановитьПараметр("Текст", Текст + "%");		

	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТипЖалобыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	#Иначе
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьТипыЖалобНаСервере(Текст);
	#КонецЕсли

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипыЖалобНаСервере(Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыЖалоб.Ссылка,
	|	ТипыЖалоб.Код,
	|	ТипыЖалоб.ПометкаУдаления
	|ИЗ
	|	Справочник.ТипыЖалоб КАК ТипыЖалоб
	|ГДЕ
	|	ТипыЖалоб.Код ПОДОБНО ""___""
	|	И НЕ ТипыЖалоб.ПометкаУдаления
	|	И ТипыЖалоб.Наименование ПОДОБНО &Текст
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыЖалоб.Наименование";	
	Запрос.УстановитьПараметр("Текст", Текст + "%");		

	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВыбора;
	
КонецФункции

//+++АК KOPA 2018.06.05 ИП-00018018
&НаКлиенте
Процедура ВыбратьТипОбращения(Команда)	
	ВыбратьИзСпискаКС(ВариантыИзКлассифицирующейСистемы.СписокТипыОбращения, "ТипОбращения");
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.06.05 ИП-00018018
&НаКлиенте
Процедура ВыбратьТипЖалобы(Команда)
	Если Не ЗначениеЗаполнено(Запись.ТипОбращения) Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого элем Из ВариантыИзКлассифицирующейСистемы.ДанныеТипыЖалоб Цикл
		Если Запись.ТипОбращения = элем.ТипОбращения Тогда
			ВыбратьИзСпискаКС(элем.Список, "ТипЖалобы");
			
			Возврат;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.06.05 ИП-00018018
&НаКлиенте
Процедура ВыбратьИзСпискаКС(Список, ПутьКДанным)		
	_Параметры = Новый Структура("ПутьКДанным", ПутьКДанным);
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораВариантаКС", ЭтаФорма, _Параметры);
	Список.ПоказатьВыборЭлемента(Оповещение, "Выберите элемент.");
КонецПроцедуры//---АК KOPA

//+++АК KOPA 2018.06.05 ИП-00018018
&НаКлиенте
Процедура ПослеВыбораВариантаКС(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	ПутьКДанным = СписокПараметров.ПутьКДанным;
	
	ЭтаФорма.Запись[ПутьКДанным] = ВыбранныйЭлемент.Значение;
	
	Если ПутьКДанным = "ТипОбращения" Тогда
		запись.ТипЖалобы = Неопределено;	
	КонецЕсли;
	
// +++ golv ИП-00018018.02	
	Если ПутьКДанным = "Номенклатура" Тогда	
		УстановитьПроизводителяИПрочее();
		НоменклатураПриИзменении(Неопределено);
	КонецЕсли;
// --- golv
	
КонецПроцедуры//---АК KOPA

// +++ golv ИП-00018018.02
&НаСервере
Процедура УстановитьПроизводителяИПрочее()
	
	ДанныеКС =  РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.ПолучитьДанныеОтвета(Запись.id_OK,Запись.GUID_Загрузки,Запись.ДатаДок);	
	Если НЕ ДанныеКС = Неопределено Тогда
		Для каждого Стр Из ДанныеКС.МассивНоменклатура Цикл		
			Если Стр.Номенклатура = Запись.Номенклатура Тогда
				Запись.Производитель = Стр.производитель;
				Если Стр.Свойство("НомерЧека") Тогда
					Запись.Номер_Бланка = Стр.НомерЧека
				КонецЕсли;
				Если Стр.Свойство("НомерКассы") Тогда
					Запись.НомерКассы = Стр.НомерКассы
				КонецЕсли;
				Если Стр.Свойство("ДатаЧека") Тогда
					Запись.ДатаСобытия = Стр.ДатаЧека
				КонецЕсли;
				Если Стр.Свойство("Магазин") Тогда
					Запись.СтруктурнаяЕдиница = Стр.Магазин;
				КонецЕсли;					
			КонецЕсли;		
		КонецЦикла; 
	КонецЕсли;	
	
КонецПроцедуры
// --- golv

//+++АК SHEP 2018.07.02 ИП-00018753.04
&НаКлиенте
Процедура ОтветПроизводителяНаВключения(Команда)
	
	ПараметрыКлюч = Новый Структура("id_OK,GUID_Загрузки,ДатаДок");
	ЗаполнитьЗначенияСвойств(ПараметрыКлюч, Запись);
	ПараметрыМассив = Новый Массив;
	ПараметрыМассив.Добавить(ПараметрыКлюч);
	КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ОбращенияПокупателейОтветыПроизводителейНаВключения", ПараметрыМассив);
	ПараметрыОткрываемойФормы = Новый Структура("Ключ,Номенклатура,Производитель,ТипОбращения,ТипЖалобы,ТипВключения", КлючЗаписиРегистра);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрываемойФормы, Запись, "Номенклатура,Производитель,ТипОбращения,ТипЖалобы,ТипВключения");
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателейОтветыПроизводителейНаВключения.ФормаЗаписи", ПараметрыОткрываемойФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуру(Команда)
	ВыбратьИзСпискаКС(ВариантыИзКлассифицирующейСистемы.СписокНоменклатура, "Номенклатура");
КонецПроцедуры


//+++АК SHEP 2018.07.26 ИП-00018753.03
&НаСервереБезКонтекста
Функция ПрикреплённыеФайлыОтветаПроизводителя(СтруктураДанныеОтбор)
	
	МенеджерЗаписиОтветыПроизводителей = РегистрыСведений.ОбращенияПокупателейОтветыПроизводителейНаВключения.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписиОтветыПроизводителей, СтруктураДанныеОтбор);
	МенеджерЗаписиОтветыПроизводителей.Прочитать();
	Возврат ?(МенеджерЗаписиОтветыПроизводителей.Выбран(), МенеджерЗаписиОтветыПроизводителей.ПрикреплённыеФайлы, "");
	
КонецФункции

//+++АК SHEP 2018.07.26 ИП-00018753.03
&НаСервере
Процедура ЗаголовокПрикреплённыхФайлов()
	
	КвоФайлов = КвоСтрокТЗнИзСтрокиВнутр(Запись.ПрикрепленныеФайлы);
	
	РеквизитФормыЗаписьОбъект = РеквизитФормыВЗначение("Запись");
	Если РеквизитФормыЗаписьОбъект.Выбран() Тогда
		СтруктураДанныеОтбор = Новый Структура("id_OK,GUID_Загрузки,ДатаДок");
		ЗаполнитьЗначенияСвойств(СтруктураДанныеОтбор, Запись);
		ТабФайлов2 = ПрикреплённыеФайлыОтветаПроизводителя(СтруктураДанныеОтбор);
		КвоФайлов = КвоФайлов + КвоСтрокТЗнИзСтрокиВнутр(ТабФайлов2);
	КонецЕсли;
	
	Элементы.ФормаПрикрепленныеФайлы.Заголовок = "Прикреплённые файлы (" + Формат(КвоФайлов, "ЧН=нет; ЧГ=") + ")";
	
КонецПроцедуры

//+++АК SHEP 2018.07.26 ИП-00018753.03
&НаСервереБезКонтекста
Функция КвоСтрокТЗнИзСтрокиВнутр(ТабФайлов)
	
	Если ПустаяСтрока(ТабФайлов) Тогда Возврат 0; КонецЕсли;
	
	ТабДанные = ЗначениеИзСтрокиВнутр(ТабФайлов);
	Возврат ТабДанные.Количество();
	
КонецФункции

//+++АК SHEP 2018.08.20 ИП-00019481
&НаКлиенте
Функция ВернутьСостояниеНаТТ()
	
	Если НЕ ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) ИЛИ НЕ ЗначениеЗаполнено(Запись.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(Характеристика) Тогда Возврат ""; КонецЕсли;
	
	Возврат ВернутьСтатусХарактеристикиНоменклатурыНаМагазине(Запись.СтруктурнаяЕдиница, Запись.Номенклатура, Характеристика);
	
КонецФункции

//+++АК SHEP 2018.08.20 ИП-00019481
&НаСервереБезКонтекста
Функция ВернутьСтатусХарактеристикиНоменклатурыНаМагазине(ТорговаяТочка, Номенклатура, ХарактеристикаНоменклатуры)
	
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда Возврат ""; КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварныйАссортиментТочекСрезПоследних.Период,
		|	ВЫБОР
		|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Выведена
		|			ТОГДА ""Выведена""
		|		КОГДА ТоварныйАссортиментТочекСрезПоследних.Запрещена
		|			ТОГДА ""Запрещена""
		|		ИНАЧЕ ""Действует""
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
		|			,
		|			ТорговаяТочка = &ТорговаяТочка
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &ХарактеристикаНоменклатуры) КАК ТоварныйАссортиментТочекСрезПоследних");
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат "Отсутствует в ассортименте ТТ"; КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Возврат "" + ВыборкаЗапроса.Состояние + " с " + Формат(ВыборкаЗапроса.Период, "ДФ=dd.MM.yyyy");
	
КонецФункции

//+++АК SHEP 2018.10.03 ИП-00018753.03
&НаКлиенте
Процедура ОбращенияПокупателейЛентаСообщенийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

//+++АК SHEP 2018.10.03 ИП-00018753.03
&НаКлиенте
Процедура ОбращенияПокупателейЛентаСообщенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатКлассификации(Команда)
	
	КлючЗаписи = ПолучитьКлючКлассификатора();
	Если ЗначениеЗаполнено(КлючЗаписи) Тогда
		ОткрытьФорму("РегистрСведений.ОбращенияПокупателейКлассифицирующаяСистема.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписи));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючКлассификатора()
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбращенияПокупателейКлассифицирующаяСистема.id_OK,
	|	ОбращенияПокупателейКлассифицирующаяСистема.GUID_Загрузки,
	|	ОбращенияПокупателейКлассифицирующаяСистема.ДатаДок
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателейКлассифицирующаяСистема КАК ОбращенияПокупателейКлассифицирующаяСистема
	|ГДЕ
	|	ОбращенияПокупателейКлассифицирующаяСистема.id_OK = &id_OK");
	Запрос.УстановитьПараметр("id_OK", Запись.id_OK);
	РЗ = Запрос.Выполнить().Выбрать();
	Если РЗ.Следующий() Тогда
		СтруктураКлюча = Новый Структура("id_OK, GUID_Загрузки, ДатаДок", РЗ.id_OK, РЗ.GUID_Загрузки, РЗ.ДатаДок);
		Возврат РегистрыСведений.ОбращенияПокупателейКлассифицирующаяСистема.СоздатьКлючЗаписи(СтруктураКлюча);
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции
