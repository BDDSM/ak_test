
Процедура УстановитьПоставщикаНаСервере()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСобытия"		, Запись.ДатаСобытия);
	Запрос.УстановитьПараметр("Номенклатура"	, Запись.Номенклатура);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочек.Характеристика
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	//|			&ДатаСобытия,
	|			,
	|			Номенклатура = &Номенклатура
	|				И ТорговаяТочка = &ТорговаяТочка) КАК ТоварныйАссортиментТочек";
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	лкТекПроизводитель = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		лкТекПроизводитель = ВыборкаДетальныеЗаписи.Характеристика;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(лкТекПроизводитель) Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", лкТекПроизводитель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)";
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Запись.Производитель = ВыборкаДетальныеЗаписи.Значение;
		
	КонецЦикла;
	
	ЗаполнитьХарактеристикуПоПроизводителю();
	
КонецПроцедуры	

&НаКлиенте
Процедура НайтиПроизводителя(Команда)
	
	лкОтказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Сообщить("Не заполнена номенклатура");
		лкОтказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
		Сообщить("Не заполнена торговая точка");
		лкОтказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.ДатаСобытия) Тогда
		Сообщить("Не заполнена дата события");
		лкОтказ = Истина;
	КонецЕсли;
	
	Если лкОтказ Тогда
		Возврат;
	КонецЕсли;
	
	//
	УстановитьПоставщикаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискТочки(Команда)
	
	лкФорма = ПолучитьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаВыбора");
	Запись.СтруктурнаяЕдиница = лкФорма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПроставитьПродавцовНаСервере()
	
	Если ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница)
			И ЗначениеЗаполнено(Запись.ДатаСобытия) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата"			, НачалоДня(Запись.ДатаСобытия));
		Запрос.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЛистУчетаПродавцы.Продавец
		|ИЗ
		|	Документ.ЛистУчета.Продавцы КАК ЛистУчетаПродавцы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЛистУчетаПродавцы.Ссылка.Дата, ДЕНЬ) = &Дата
		|	И ЛистУчетаПродавцы.Ссылка.ТорговаяТочка = &ТорговаяТочка";
		ТЗ_Результат = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_Результат.Количество() = 0 Тогда
			
			ЗапросПоТабелю = Новый Запрос;
			ЗапросПоТабелю.УстановитьПараметр("Дата"			, НачалоДня(Запись.ДатаСобытия));
			ЗапросПоТабелю.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
			ЗапросПоТабелю.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 3
			|	ТабельРаботыПродавцов.Сотрудник КАК Продавец
			|ИЗ
			|	РегистрСведений.ТабельРаботыПродавцов КАК ТабельРаботыПродавцов
			|ГДЕ
			|	ТабельРаботыПродавцов.ТорговаяТочка = &ТорговаяТочка
			|	И НАЧАЛОПЕРИОДА(ТабельРаботыПродавцов.Период, ДЕНЬ) = &Дата";
			ТЗ_Результат = ЗапросПоТабелю.Выполнить().Выгрузить();
			
		КонецЕсли;  		
		
		Если ТЗ_Результат.Количество() = 3 Тогда
			Запись.Продавец1 = ТЗ_Результат[0].Продавец;
			Запись.Продавец2 = ТЗ_Результат[1].Продавец;
			Запись.Продавец3 = ТЗ_Результат[2].Продавец;
		ИначеЕсли ТЗ_Результат.Количество() = 2 Тогда
			Запись.Продавец1 = ТЗ_Результат[0].Продавец;
			Запись.Продавец2 = ТЗ_Результат[1].Продавец;
		ИначеЕсли ТЗ_Результат.Количество() = 1 Тогда	
			Запись.Продавец1 = ТЗ_Результат[0].Продавец;  									
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроставитьПродавцов(Команда)
	
	ПроставитьПродавцовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБланкОбщественногоКонтроля(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура УстановитьАвтоотметкуНезаполненногоСписаниеВозврат()
	
	мАвтоотметка = (Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("13")           // Возврат Покупателя
						ИЛИ Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("14")); // Списание по Качеству
	Элементы.ТипСписанияВозврата.АвтоОтметкаНезаполненного 		= мАвтоотметка;
	Элементы.ПодтипСписанияВозврата.АвтоОтметкаНезаполненного 	= мАвтоотметка;
	
КонецПроцедуры


&НаСервере
Процедура лкПередЗаписьюНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Запись.id_OK) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбращенияПокупателей.id_OK КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|
		|УПОРЯДОЧИТЬ ПО
		|	id_OK УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекЗапись = 0;
		
		Пока Выборка.Следующий() Цикл
			ТекЗапись = Выборка.id_OK;
		КонецЦикла;
		Запись.GUID_Загрузки	= Новый УникальныйИдентификатор;
		Запись.id_OK 			= ТекЗапись + 1;
		
	КонецЕсли;
	
	Если Запись.ДатаДок = '00010101' Тогда
		Запись.ДатаДок 			= ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Запись.ОтветПроизводителя) ИЛИ ЗначениеЗаполнено(Запись.ПримечаниеОтвета) Тогда
		Запись.СтатусПроизводителя = ПредопределенноеЗначение("Перечисление.СтатусыСПроизводителями.ПолучилиОтвет");
	КонецЕсли;
	
	//лкПередЗаписьюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПросмотрОбзвона.Доступность = Запись.НужноОбзвонить;
	
	ЗаписьОЗаказеКУрьера = НайтиЗаявкуКурьераСервер();
	//Элементы.ФормаЗаказКурьера.Заголовок = "Заказ курьера. Текущий статус - " +
	//										?(ЗаписьОЗаказеКурьера = Неопределено, "Не создан", Строка(ЗаписьОЗаказеКурьера));
	Запись.ОтменаУведомления 		= ?(Запись.id_OK = 0, Истина, Запись.ОтменаУведомления);
	Запись.РегулярностьУведомления 	= ?(Запись.id_OK = 0, "День", Запись.РегулярностьУведомления);
	
	ОбработкаЭлементовПриОтключенииУведомления();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Запись.Ответственный) Тогда
		Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//>lobv 250216
	Если ЗначениеЗаполнено(Запись.Номенклатура) тогда
		Запись.Технолог = ПолучитьТехнолога();
		ЗаполнитьХарактеристикуПоПроизводителю();
	КонецЕсли;
	//<lobv
	
	//+++АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений 
	Элементы.ТипВключения.Доступность = Запись.ТипЖалобы.ЭтоВключениеВПродукт;
	//---АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений 
	//
	УстановитьАвтоотметкуНезаполненногоСписаниеВозврат();
	
	//+++АК SHEP 20170803 ИП-00016394
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПоставщик = ПараметрыСеанса.ТекущийКонтрагент;
	ЭтоПоставщик = ЗначениеЗаполнено(ТекущийПоставщик);
	
	Если ЭтоПоставщик Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Если НЕ ТолькоПросмотр Тогда
			МассивДоступныхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФормаЗаписатьИЗакрыть,ОтветПроизводителя,ПримечаниеОтвета");
			Для Каждого Элемент Из Элементы Цикл
				Если Элемент.Видимость И МассивДоступныхЭлементов.Найти(Элемент.Имя) = Неопределено Тогда
					
					ТипЭлемента = Тип(Элемент);
					Если ТипЭлемента = Тип("ГруппаФормы") Тогда
						Продолжить;
					ИначеЕсли ТипЭлемента = Тип("ДекорацияФормы") Тогда
						Продолжить;
					ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") И Элемент.Доступность Тогда
						Элемент.Доступность = Ложь;
					ИначеЕсли НЕ Элемент.ТолькоПросмотр Тогда
						Элемент.ТолькоПросмотр = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ОтветПроизводителя.АктивизироватьПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	//---АК SHEP 20170803
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("13")               // Возврат Покупателя
			ИЛИ Запись.ИсточникОбращения = Справочники.ИсточникиОбращений.НайтиПоКоду("14") Тогда  // Списание по Качеству
		
		Если Запись.ТипСписанияВозврата.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
    		Сообщение.Текст = "Не указан Тип списания/возврата!";
    		Сообщение.Поле 	= "ТипСписанияВозврата";
    		Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Запись.ПодтипСписанияВозврата.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
    		Сообщение.Текст = "Не указан Подтип списания/возврата!";
    		Сообщение.Поле 	= "ПодтипСписанияВозврата";
    		Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчетПоПродавцам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Запись.Продавец1)
			И НЕ ЗначениеЗаполнено(Запись.Продавец2)
			И НЕ ЗначениеЗаполнено(Запись.Продавец3) Тогда
		Сообщить("В обращении не указан ни один продавец. Формирование отчета не возможно!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктура = Новый Структура;
	ПараметрыСтруктура.Вставить("Продавец1"			, Запись.Продавец1);
	ПараметрыСтруктура.Вставить("Продавец2"			, Запись.Продавец2);
	ПараметрыСтруктура.Вставить("Продавец3"			, Запись.Продавец3);
	ПараметрыСтруктура.Вставить("ТТ"				, Запись.СтруктурнаяЕдиница);
	ПараметрыСтруктура.Вставить("Примечание"		, Запись.Примечание);
	ПараметрыСтруктура.Вставить("ОтветПокупателю"	, Запись.ОтветПокупателю);
	ПараметрыСтруктура.Вставить("ДатаСобытия"		, Запись.ДатаСобытия);
	ПараметрыСтруктура.Вставить("ИсточникОбращения"	, Запись.ИсточникОбращения);
	ПараметрыСтруктура.Вставить("Телефон"			, ПолучитьТелефонТТ());
	
	ОткрытьФорму("Отчет.ОтчетПоПродавцам.Форма.ФормаОтчета", ПараметрыСтруктура,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция ПолучитьТелефонТТ()
	
	Возврат Запись.СтруктурнаяЕдиница.ТелефонныйНомер1;	
	
КонецФункции

&НаКлиенте
Процедура ПросмотрОбзвона(Команда)
	
	ТекФорма = ПолучитьФорму("РегистрСведений.ОбращенияКПокупателям.Форма.ФормаСписка");	
	
	ТекФорма.Элементы.ГруппаШапка.Видимость 		= Ложь;	
	ТекФорма.Элементы.ГруппаРассылки.Видимость 		= Ложь;
	ТекФорма.Элементы.ГруппаВсе.Видимость 			= Ложь;
	ТекФорма.Элементы.ОчиститьПустышки.Видимость 	= Ложь;	
	ТекФорма.НЕОбновлятьВыборкуПриОткрытии = Истина;	
	ТекФорма.Элементы.ГруппаПериод.Видимость 		= Ложь;
	ЭлементОтбора = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("GUID_Жалобы");
	ЭлементОтбора.ПравоеЗначение 	= Запись.GUID_Загрузки;
	ЭлементОтбора.Использование 	= Истина;
	
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НужноОбзвонитьПриИзменении(Элемент)
	
	Элементы.ПросмотрОбзвона.Доступность = Запись.НужноОбзвонить;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКурьера(Команда)
	//вызов формы для оформления заказа курьера
	//ищем по регистру - если уже есть заказ курьера от этого обращения, то открываем его
	//если нет, то создаем пустой с автозаполнением по письму
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Запись.id_OK) Тогда
		Предупреждение("Перед заказом курьера необходимо сохранить обращение!");
		Возврат;
	КонецЕСли;
	
	ЗаписьОЗаказеКУрьера = НайтиЗаявкуКурьераСервер();
	Если ЗаписьОЗаказеКурьера = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.запись.Номенклатура) Тогда
			Предупреждение("Перед заказом курьера необходимо указать номенклатуру!");
			Возврат;
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.АК_ЖалобыСКурьерскойДоставкой.ФормаЗаписи",, ЭтаФорма);
	Иначе
		Структура = Новый Структура("Ключ", ПолучитьКлюч());
		ОткрытьФорму("РегистрСведений.АК_ЖалобыСКурьерскойДоставкой.ФормаЗаписи", Структура, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	//>lobv 250216
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
	КонецЕсли;
	//<lobv
	
КонецПроцедуры

&НаСервере
Функция НайтиЗаявкуКурьераСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("ID_ok_Жалобы", ЭтаФорма.Запись.id_OK);
	Запрос = Новый Запрос;
	ВыборкаЖалоб = РегистрыСведений.АК_ЖалобыСКурьерскойДоставкой.Выбрать(Отбор);
	ЗаявкаНайдена = Ложь;
	Пока ВыборкаЖалоб.Следующий() Цикл
		ЗаявкаНайдена = Истина;
		Возврат Строка(ВыборкаЖалоб.ПолучитьМенеджерЗаписи().СтатусЗаказаКурьера);
		Прервать;
	КонецЦикла;
	
	Если НЕ ЗаявкаНайдена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьТехнолога()
	
	ХаркаПоТовару = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Запись.Производитель) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Значение", Запись.Производитель);
		Запрос.УстановитьПараметр("Владелец", Запись.Номенклатура);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Значение = &Значение
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Владелец";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ХаркаПоТовару = Выборка.Объект;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаДок"			, Запись.ДатаДок);
			Запрос.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("Номенклатура"	, Запись.Номенклатура);
			Запрос.Текст = "ВЫБРАТЬ
			|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
			|ИЗ
			|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
			|			&ДатаДок,
			|			ТорговаяТочка = &ТорговаяТочка
			|				И Номенклатура = &Номенклатура) КАК ТоварныйАссортиментТочекСрезПоследних";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ХаркаПоТовару = Выборка.Характеристика;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РольТехнолога = Неопределено;
	
	Если ЗначениеЗаполнено(ХаркаПоТовару) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДок"	, Запись.ДатаДок);
		Запрос.УстановитьПараметр("Харка"	, ХаркаПоТовару);
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&ДатаДок,
		|			Объект = &Харка
		|				И ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РольТехнолога = Выборка.РольПользователя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РольТехнолога) Тогда
			
			Произв = Запись.Производитель;
			Если НЕ ЗначениеЗаполнено(Произв) Тогда
				Запрос.УстановитьПараметр("Харка", ХаркаПоТовару);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Значение
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
				|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры) = &Харка";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Произв = Выборка.Значение;
				КонецЕсли;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Производитель", Произв);
			Запрос.Текст = "ВЫБРАТЬ
			|	СоответствиеОбъектРольСрезПоследних.РольПользователя
			|ИЗ
			|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|			&ДатаДок,
			|			Объект = &Производитель
			|				И ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РольТехнолога = Выборка.РольПользователя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РольТехнолога)
			И РольТехнолога.СоставРоли.Количество() > 0 Тогда
		Возврат РольТехнолога.СоставРоли[0].Сотрудник;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьХарактеристикуПоПроизводителю()
	
	УстановитьПривилегированныйРежим(Истина);
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Запись.Номенклатура);
	Запрос.УстановитьПараметр("Значение", Запись.Производитель);
	Запрос.Текст = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ЗначенияСвойствОбъектов.Значение = &Значение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Характеристика = Выборка.Ссылка;
	Иначе	
		Характеристика = Неопределено;
	КонецЕсли;
	
	//+++АК БЕЛН 2016.12.20
	Мас = РегистрыСведений.ОбращенияПокупателей.ПолучитьПродактМенеджера(Запись);
	ПМ = ?(Мас.Количество() = 0, Неопределено, Мас[0]);
	Если ПМ <> Запись.ПродактМенеджер Тогда
		Запись.ПродактМенеджер = ПМ;
	КонецЕсли; 
	//---АК БЕЛН 2016.12.20
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьКлюч()
	
	Возврат РегистрыСведений.АК_ЖалобыСКурьерскойДоставкой.СоздатьКлючЗаписи(Новый Структура("ID_ok_Жалобы", ЭтаФорма.Запись.id_OK));
	
КонецФункции

Процедура ПолученОтветДляЗаявкиКурьера()
	
	Если ЭтаФорма.Запись.СтатусПроизводителя = Перечисления.СтатусыСПроизводителями.ПолучилиОтвет Тогда
		Отбор = Новый Структура("ID_ok_Жалобы", ЭтаФорма.Запись.id_OK);
		//Запрос=Новый Запрос;
		ВыборкаЖалоб = РегистрыСведений.АК_ЖалобыСКурьерскойДоставкой.Выбрать(Отбор);
		Пока ВыборкаЖалоб.Следующий() Цикл
			МенеджерЗаписи = ВыборкаЖалоб.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.ДатаОтвета			= ТекущаяДата();
			МенеджерЗаписи.СтатусЗаказаКурьера	= Перечисления.АК_СтатусыЗаказаКурьера.ПолученОтвет;
			МенеджерЗаписи.Записать();
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроизводителяПриИзменении(Элемент)
	
	//Лобачев - если получили ответ, то нужно сменить статус в заказе курьера
	ПолученОтветДляЗаявкиКурьера();
	
	ЗаписьОЗаказеКУрьера = НайтиЗаявкуКурьераСервер();
	Попытка
		Если ЭтаФорма.ВладелецФормы.ИмяФормы = "РегистрСведений.АК_ЖалобыСКурьерскойДоставкой.Форма.ФормаСписка" Тогда
			ЭтаФорма.ВладелецФормы.Элементы.Список.Обновить();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Элементы.ФормаЗаказКурьера.Заголовок = "Заказ курьера. Текущий статус - " + 
											?(ЗаписьОЗаказеКурьера = Неопределено, "Не создан", Строка(ЗаписьОЗаказеКурьера));
	
КонецПроцедуры

Функция ПолучитьМассивПроизводителей()
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"	, НачалоДня(Запись.ДатаДок - 86400*14));
	Запрос.УстановитьПараметр("ДатаКон"	, КонецДня(Запись.ДатаДок));
	Запрос.УстановитьПараметр("Владелец", Запись.Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				ХарактеристикиНоменклатуры.Ссылка
	|			ИЗ
	|				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ГДЕ
	|				ХарактеристикиНоменклатуры.Владелец = &Владелец
	|				И (ХарактеристикиНоменклатуры.Неактивная = ЛОЖЬ
	|					ИЛИ ХарактеристикиНоменклатуры.Ссылка В
	|						(ВЫБРАТЬ
	|							ЛогированиеСменыСтатусовАктивности.Объект
	|						ИЗ
	|							РегистрСведений.ЛогированиеСменыСтатусовАктивности КАК ЛогированиеСменыСтатусовАктивности
	|						ГДЕ
	|							ЛогированиеСменыСтатусовАктивности.Период МЕЖДУ &ДатаНач И &ДатаКон
	|							И ЛогированиеСменыСтатусовАктивности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктивностиХарактеристик.Неактивная))))
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)";
	//АК БЕЛН 07.11.2016++			   
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныПоставщиковСрезПоследних.Поставщик КАК Значение
	|ИЗ
	|	РегистрСведений.ЦеныПоставщиков.СрезПоследних(&ДатаКон, Номенклатура = &Владелец) КАК ЦеныПоставщиковСрезПоследних";			   
	//АК БЕЛН 07.11.2016--			   
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	
КонецФункции

&НаКлиенте
Процедура ПроизводительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивПроизводителей());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
		ЗаполнитьХарактеристикуПоПроизводителю();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Запись.Технолог = ПолучитьТехнолога();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДопСообщение()
	
	СпрТипыОбращений 	= Справочники.ТипыОбращенийПокупателей;
	ТекТипОбращения 	= Запись.ТипОбращения;
	
	Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение") Тогда
		СообщениеДоп = "Всего обращений с таким подтипом по производителю - " + ПолучитьКоличествоОбращений(Истина) + Символы.ПС +
						"Всего обращений с таким подтипом по производителю за последние шесть недель - " +
						ПолучитьКоличествоОбращенийЗаПериод(42, Истина);	
	Иначе	
		СообщениеДоп = "";	
	КонецЕсли; 
	СообщениеВозвр = "";
	
	Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("02 Продукт испорчен раньше срока")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("03 Продукт изменился")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("04 Вкус не нравится") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				, НачалоДня(ТекущаяДата() - 3*24*60*60));
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ИсточникОбращения"	, Справочники.ИсточникиОбращений.НайтиПоНаименованию("Возврат Покупателя"));
		Мас = Новый Массив;
		Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Включение"));		
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("02 Продукт испорчен раньше срока") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Срок не выдержал"));	
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Запах"));	
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("03 Продукт изменился") Тогда 
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Консистенция нарушена"));		
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("04 Вкус не нравится") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Вкус несоответствует норме"));		
		КонецЕсли;
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.УстановитьПараметр("ТипСписанияВозврата", Мас);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.Номенклатура = &Номенклатура
		|	И ОбращенияПокупателей.Производитель = &Производитель
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.ИсточникОбращения = &ИсточникОбращения
		|	И ОбращенияПокупателей.ТипСписанияВозврата В(&ТипСписанияВозврата)
	|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Кол = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Кол = ВыборкаДетальныеЗаписи.id_OK;
		КонецЦикла;
		СообщениеВозвр = "Всего возвратов по продукту/производителю за три дня - " + Строка(Кол);
		
	КонецЕсли;
	
	Если Запись.ТипЖалобы=Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
		Если ЗначениеЗаполнено(Запись.Номенклатура) И ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
		    СообщениеВозвр=ПолучитьСообщениеПоОтсутТовара();
			Сообщение = 
							"Всего аналогичных обращений по продукту/магазину - " + ПолучитьКоличествоОбращений() + Символы.ПС +
							"Всего аналогичных обращений за последние три недели - " + ПолучитьКоличествоОбращенийЗаПериод(21) +
							Символы.ПС + ПолучитьСтрокуСВозвратами() + Символы.ПС + СообщениеДоп + Символы.ПС + СообщениеВозвр;
		КонецЕсли; 
	Иначе	
		Сообщение = ?(ЗначРекв(Запись.ТипЖалобы, "Наименование") = "11_1 Просьба добавить продукт", "",
						"Всего аналогичных обращений по продукту/производителю - " + ПолучитьКоличествоОбращений() + Символы.ПС +
						"Всего аналогичных обращений за последние три недели - " + ПолучитьКоличествоОбращенийЗаПериод(21)) +
						Символы.ПС + ПолучитьСтрокуСВозвратами() + Символы.ПС + СообщениеДоп + Символы.ПС + СообщениеВозвр;
	
	КонецЕсли; 
	
	//
	
	Возврат Сообщение;
	
КонецФункции

&НаСервере
Функция ПолучитьСообщениеПоОтсутТовара()
	
	//+++АК SHEP 2018.09.28 ИП-00019897: сделал вызов из модуля менеджера
	Возврат РегистрыСведений.ОбращенияПокупателей.ПолучитьСообщениеПоОтсутТовара(РеквизитФормыВЗначение("Запись"));
	//---АК SHEP 2018.09.28
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмо(Команда)
	
	мТемаПисьма 	= Строка(Запись.ТипЖалобы) + "_" + Запись.Номенклатура + "_" + Запись.СтруктурнаяЕдиница + "_" +
						Формат(Запись.ДатаДок, "ДФ=dd.MM.yyyy") + "_" + СокрЛП(Строка(Запись.GUID_Загрузки));
	
	мТекстПисьма 	= Строка(Запись.Примечание) + Символы.ПС + Запись.СтруктурнаяЕдиница + " тел.: " +
						ЗначРекв(Запись.СтруктурнаяЕдиница, "ТелефонныйНомер1") + Символы.ПС + Запись.Номенклатура + Символы.ПС +
						"Технолог: " + Запись.Технолог + Символы.ПС + Запись.Производитель + Символы.ПС +
						"Автор: " + СокрЛП(Запись.ФИО_Покупателя) + Символы.ПС +
						"Номер карты: " + СокрЛП(Запись.Номер_Карты_ОК) + Символы.ПС +
						"Телефон: " + СокрЛП(Запись.Телефон) + Символы.ПС +
						ПолучитьДопСообщение();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбращения"	, Запись.ТипОбращения);
	СтруктураПараметров.Вставить("ТемаПисьма"	, мТемаПисьма);
	СтруктураПараметров.Вставить("ТекстПисьма"	, мТекстПисьма);
	СтруктураПараметров.Вставить("Номенклатура"	, Запись.Номенклатура);
	СтруктураПараметров.Вставить("Производитель", Запись.Производитель);
	СтруктураПараметров.Вставить("ТТ"			, Запись.СтруктурнаяЕдиница);
	СтруктураПараметров.Вставить("Ответственный", Запись.Ответственный);
	СтруктураПараметров.Вставить("ТабФайлов"	, Запись.ПрикрепленныеФайлы);
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаОтправкиОтветственномуЗаТипОбращения", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

//+++АК БЕЛН 2016.12.20
 
Функция ПолучитьКоличествоОбращений(ФлВключения = Ложь)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
	Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
	Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
	Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
	
	
	
	
	Если Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
	
		Запрос.УстановитьПараметр("Фл"					, Истина);
															
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	Иначе	
		Запрос.УстановитьПараметр("Фл"					,Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_2 Нет свежего товара"));
															
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ &ФлВключения)
		|	И (ОбращенияПокупателей.Производитель = &Производитель
		|				И НЕ &ФЛ
		|			ИЛИ &Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ &ФЛ)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ &Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И  &ФЛ=Ложь
		|			ИЛИ &ФлВключения)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	
	КонецЕсли; 
	
	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Кол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
	
	Возврат Строка(Кол)
	
КонецФункции

Функция ПолучитьКоличествоОбращенийЗаПериод(Дней, ФлВключения = Ложь)
	Если  Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				,НачалоДня(ТекущаяДата())-Дней*24*60*60);
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
		Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	Иначе	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				,НачалоДня(ТекущаяДата())-Дней*24*60*60);
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
		Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
		Запрос.УстановитьПараметр("Фл"					, Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии")
															ИЛИ Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_2 Нет свежего товара"));
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ &ФлВключения)
		|	И (ОбращенияПокупателей.Производитель = &Производитель
		|				И НЕ &ФЛ
		|			ИЛИ &Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ &ФЛ)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ &Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И НЕ &ФЛ
		|			ИЛИ &ФлВключения)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	КонецЕсли; 
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Кол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
	
	Возврат Строка(Кол)
	
КонецФункции

Функция ПолучитьСтрокуСВозвратами()
	
	Если НЕ ЗначениеЗаполнено(Запись.Номенклатура)
			ИЛИ НЕ ЗначениеЗаполнено(Запись.Производитель) Тогда
		Возврат "";
	КонецЕсли;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат "";
	Иначе           
	КонецЕсли;
	
	ИдТов 	= Запись.Номенклатура.id_tov;
	ИдКонтр	= Запись.Производитель.ИД;
	
	СтрЗапрос =
	"Select
	|	convert(date,DateAdd(year, -2000, Doc._Date_Time)) as Дата,
	|	case when Doc._Posted =1 then 'Да' else 'Нет' end as Проведен,
	|	SprNom._Fld760 as id_tov,
	|	isnull(hk.id_kontr, sprKontr._Fld1159 ) as id_kontr,
	|	SprNom._Description as товар,
	|	SprKontr._Description as поставщик,
	|-- Spr_Har._Description as характеристика,

	|	convert(real, sum(Tov._Fld3185)) as количество,
	|	convert(decimal(15, 2), pr.sebest) as Себест,
	|	convert(real,convert(decimal(15, 2), sum(Tov._Fld3185 * pr.sebest))) as Сумма,
	|	Convert(varchar(500), Doc._Fld3175) as Комментарий,
	|	Doc._Number as НомерДок,
	|	SprPolzovateli._Description as АвторДок
	|from IzbenkaFin.._Document3039 as Doc with (nolock)
	| inner join IzbenkaFin.._Document3039_VT3179 as tov with (nolock)
	| on Doc._IDRRef = tov._Document3039_IDRRef
	| inner Join IzbenkaFin.dbo._Reference29 as SprNom (nolock)
	| On SprNom._IDRRef = Tov._Fld3181RRef
	| inner join Reports..Price_1C_tov as pr
	| on SprNom._Fld760 = pr.id_tov
	| LEFT Join IzbenkaFin.dbo._Reference2539 as Spr_Har (nolock)
	| On Spr_Har._IDRRef = Tov._Fld3182RRef
	| left Join IzbenkaFin.dbo._Reference32 as SprPolzovateli (nolock)
	| On SprPolzovateli._IDRRef = Doc._Fld3174RRef
	| left join M2..Har_kontr as hk
	| on Tov._Fld3182RRef = hk.HaracRef
	| 	 and SprNom._Fld760 = hk.id_tov
	| inner Join IzbenkaFin.dbo._Reference27 as SprKontr (nolock)
	| On SprKontr._Fld1159 = hk.id_kontr
	|where
	|	doc._Fld3173RRef IN (0x979D005056A0010611E34CF5AE747831, 0xBF3A005056A0010611E359133F147350)
	|	and convert(date, DateAdd(year, -2000, Doc._Date_Time)) between convert(date, dateadd(day, -1, getdate())) and convert(date, dateadd(day, 0, getdate())) 
	|	and Doc._Marked = 0
	|	and Doc._Posted=1
	|	and SprNom._Fld760 = " + ВнешниеДанные.ФорматПоля((ИдТов)) + "
	|	and isnull(hk.id_kontr, sprKontr._Fld1159 ) = " + ВнешниеДанные.ФорматПоля((ИдКонтр)) + "
	|group by
	|	pr.sebest,
	|	Convert(varchar(500), Doc._Fld3175),
	|	Doc._Number,
	|	SprPolzovateli._Description,
	|	convert(date, DateAdd(year, -2000, Doc._Date_Time)),
	|	Doc._Posted,
	|	SprNom._Fld760,
	|	isnull(hk.id_kontr, sprKontr._Fld1159),
	|	SprNom._Description,
	|	SprKontr._Description,
	|	Spr_Har._Description";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	СтрВозвр = "";	
	Попытка
		rs.MoveFirst();
		//
		Сч = 0;
		Пока НЕ rs.EOF() Цикл
			Сч = Сч + 1;
			
			СтрВозвр = "Возврат за 2 дня - " + Строка(Rs.Fields("товар").Value) + " " + Строка(Rs.Fields("поставщик").Value) +
						" количество - " + Строка(Rs.Fields("количество").Value) + " " + Строка(Rs.Fields("Комментарий").Value);	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//
	Возврат СтрВозвр;	
	
КонецФункции

&НаСервереБезконтекста
Функция ЗначРекв(Ссылка, Рекв)
	
	Возврат Ссылка[Рекв]
	
КонецФункции

//---АК БЕЛН 2016.12.20

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбращенияПокупателей.СообщениеОтправлено" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма")
				И Источник.УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор Тогда
			Запись.ДатаОтправкиОтветственным = ТекущаяДата();
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//+++АК SHEP 20160629
Процедура Номер_Карты_ОКОткрытие(Элемент, СтандартнаяОбработка)
	
	Перем НомерКарты;
	
	СтандартнаяОбработка = Ложь;
	НомерКарты = СокрЛП(Элемент.ТекстРедактирования);
	
	Если НЕ ЗначениеЗаполнено(НомерКарты) Тогда
		Предупреждение("Заполните, пожалуйста, номер карты!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровФормы = Новый Структура("Email", НомерКарты);	
	СтруктураПараметровФормы.Вставить("ЦельНачисления", СокрЛП(Запись.Примечание));
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.КарточкаКлиента", СтруктураПараметровФормы,, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Номер_Карты_ОКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем НомерКарты;
	
	СтандартнаяОбработка = Ложь;
	НомерКарты = СокрЛП(Элемент.ТекстРедактирования);
	
	Если НЕ ЗначениеЗаполнено(НомерКарты) Тогда
		Предупреждение("Заполните, пожалуйста, номер карты!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровФормы = Новый Структура("НомерКарты"	, НомерКарты);
	СтруктураПараметровФормы.Вставить("ЦельНачисления"		, СокрЛП(Запись.Примечание));
	СтруктураПараметровФормы.Вставить("ПричинаНачисления"	, ПредопределенноеЗначение("Перечисление.АК_ПричиныНачисленияБаллов.НачислитьПоЧеку"));
	ОткрытьФорму("Обработка.ОтчетыПоКартам.Форма.ФормаОтчетыПоКартам", СтруктураПараметровФормы,, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры
//---АК SHEP 20160629

//+++АК SHEP 20160712
&НаКлиенте
Процедура СсылкаНаСайтОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение(Запись.СсылкаНаСайт);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
//---АК SHEP 20160712

//+++АК SHEP 20160718
Функция ОтветитьПоЭлектроннойПочте(ОтветПокупателю)
	
	СтрокаАдресовЭП = Запись.email;
	МассивАдресовЭП = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдресовЭП, ",");
	
	Если НЕ ЗначениеЗаполнено(СтрокаАдресовЭП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресЭПОтправителя = "info@izbenka.msk.ru";
	УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчеткуДляНастройкиОтправкиЭП(АдресЭПОтправителя);
	Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
		УчёткаЭлектроннойПочты = МеханизмОбменаСообщениями.ПолучитьУчетнуюЗаписьПоАдресу("m@gmail.com");
		Если НЕ ЗначениеЗаполнено(УчёткаЭлектроннойПочты) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчёткаЭлектроннойПочты);
	Профиль.Пользователь 		= АдресЭПОтправителя;
	Профиль.ПользовательSMTP 	= АдресЭПОтправителя;
	Профиль.Пароль 				= "iz09benka";
	Профиль.ПарольSMTP 			= Профиль.Пароль;
	Почта.Подключиться(Профиль);
	
	// 0 -- тема письма, 1 -- ИдентификаторСообщения, на которое нужно ответить
	МассивЗаголовковПисьма = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Запись.СсылкаНаСайт, "#ИдентификаторСообщения_In-Reply-To#");
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Re:" + МассивЗаголовковПисьма[0];
	//Письмо.ИмяОтправителя = Строка(Отправитель);
	Письмо.Отправитель.Адрес = АдресЭПОтправителя;
	Для Каждого Адрес1 Из МассивАдресовЭП Цикл
		Получатель = Письмо.Получатели.Добавить();
		Получатель.Адрес = Адрес1;
	КонецЦикла;
	
	Текст1 = Письмо.Тексты.Добавить();
	Текст1.ТипТекста 	= ТипТекстаПочтовогоСообщения.ПростойТекст;
	Текст1.Текст 		= ОтветПокупателю;
	
	Если МассивЗаголовковПисьма.Количество() > 1 Тогда
		Письмо.УстановитьПолеЗаголовка("In-Reply-To", МассивЗаголовковПисьма[1]);
	КонецЕсли;
	
	Успешно = Истина;
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
		ТекстОшибки = "Не удалось отправить письмо. Ошибка: " + ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Успешно = Ложь;
	КонецПопытки;
	
	Почта.Отключиться();
	Возврат Успешно;
	
КонецФункции

//+++АК SHEP 20160713
&НаКлиенте
Процедура ОтветитьПокупателюВСоцСетях(Команда)
	
	Перем СсылкаНаСайт;
	
	СсылкаНаСайт = Запись.СсылкаНаСайт;
	Если НЕ ЗначениеЗаполнено(СсылкаНаСайт) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветПокупателюТекст = Элементы.ОтветПокупателю.ТекстРедактирования;
	
	Если ПустаяСтрока(ОтветПокупателюТекст) Тогда
		Предупреждение("Текст ответа не заполнен!");
		Возврат;
	КонецЕсли;
	
	Если Запись.ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ВКонтакте") Тогда
		
		Поз = Найти(СсылкаНаСайт, "?w=wall");
		Если Поз = 0 Тогда Возврат; КонецЕсли;
		
		СсылкаНаСайт = Сред(СтрЗаменить(СсылкаНаСайт, "?w=wall", ""), Поз);
		//СсылкаНаСайт = СтрЗаменить(СтрЗаменить(СсылкаНаСайт, "&from_id=", ";"), "_", ";");
		МассивПараметров = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(СсылкаНаСайт, "&from_id=", ";"), "_", ";"), ";");
		
		Попытка
			access_token = РаботаССайтомВКонтакте.ПолучитьЗначениеПараметра("access_token");
			РаботаССайтомВКонтакте.ДобавитьКомментарийКЗаписиНаСтене(access_token, МассивПараметров[0], МассивПараметров[1], ОтветПокупателюТекст, МассивПараметров[2]);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Запись.ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.Facebook") Тогда
		
		Поз = Найти(СсылкаНаСайт, "/posts/");
		Если Поз = 0 Тогда Возврат; КонецЕсли;
		
		post_id = СтрЗаменить(СтрЗаменить(СсылкаНаСайт, "https://www.facebook.com/", ""), "/posts/", "_");
		
		Попытка
			access_token = РаботаССайтомВКонтакте.ПолучитьЗначениеПараметра("access_token");
			РаботаССайтомFacebook.ДобавитьКомментарийКЗаписиНаСтене(access_token, post_id, ОтветПокупателюТекст);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Запись.ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ЭлектроннаяПочта") Тогда
		
		Если НЕ ОтветитьПоЭлектроннойПочте(ОтветПокупателюТекст) Тогда Возврат; КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Запись.ОтветПо = Истина;
	Записать();
	ПриЧтенииНаСервере(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Перем ИсточникОбращения;
	
	ИсточникОбращения = Запись.ИсточникОбращения;
	
	Если ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ВКонтакте")
			ИЛИ ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.Facebook")
			ИЛИ ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ЭлектроннаяПочта") Тогда
		
		//ОтветилиПокупателю = Запись.ОтветПо;
		//Элементы.ОтветПо.ТолькоПросмотр = ОтветилиПокупателю;
		//Элементы.ИсточникОбращения.ТолькоПросмотр = ОтветилиПокупателю;
		//Элементы.ОтветПокупателю.ТолькоПросмотр = ОтветилиПокупателю;
		//Элементы.ОтветПокупателю.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[?(ОтветилиПокупателю, "Верх", "Нет")];
		Элементы.ОтветитьПокупателюВСоцСетях.Видимость = Истина; //НЕ ОтветилиПокупателю;
		
		//заблокируем от изменений
		Элементы.СсылкаНаСайт.ТолькоПросмотр = ЗначениеЗаполнено(Запись.СсылкаНаСайт);
		
		Если ИсточникОбращения = ПредопределенноеЗначение("Справочник.ИсточникиОбращений.ЭлектроннаяПочта") Тогда
			Элементы.СсылкаНаСайт.КнопкаОткрытия = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//---АК SHEP 20160713

//+++АК LOBV 280716
&НаКлиенте
Процедура РегулярностьУведомленияПриИзменении(Элемент)
	
	ОбработкаЭлементовПриИзмененииРегулярности();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.АК_УведомленияПоОбращениямПокупателей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбращениеПокупателя = ТекущийОбъект.id_OK;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегулярностьУведомления) Тогда
		
		Если ТекущийОбъект.РегулярностьУведомления = "День" Тогда
			МоментОтправки = НачалоДня(ТекущаяДата() + 24*60*60);
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Час" Тогда
			МоментОтправки = НачалоЧаса(ТекущаяДата() + 60*60);
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Неделя" Тогда
			МоментОтправки = НачалоНедели(ТекущаяДата()+7*24*60*60);
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Дата" Тогда
			МоментОтправки = ТекущийОбъект.НачалоПериодаУведомления;
		ИначеЕсли ТекущийОбъект.РегулярностьУведомления = "Период" Тогда
			Если ТекущаяДата() < ТекущийОбъект.НачалоПериодаУведомления
					ИЛИ ТекущаяДата()>ТекущийОбъект.ОкончаниеПериодаУведомления Тогда
				МоментОтправки=ТекущийОбъект.НачалоПериодаУведомления;
			Иначе
				МоментОтправки=НачалоДня(ТекущаяДата() + 24*60*60);
			КонецЕсли;
		КонецЕсли;
		
		Если МоментОтправки > ТекущаяДата() Тогда
			НаборЗаписей = РегистрыСведений.АК_УведомленияПоОбращениямПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбращениеПокупателя.Установить(ТекущийОбъект.id_OK);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбращениеПокупателя	= ТекущийОбъект.id_OK;
			НоваяЗапись.СписокПолучателей	= ТекущийОбъект.ПолучателиУведомления;
			НоваяЗапись.МоментОтправки		= МоментОтправки;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//+++АК ELEM 20160728
	//Если форма была открыта с ЗаказОбратногоЗвонка_id, то обновляем данные на SQL сервер
	Если ЗначениеЗаполнено(ЗаказОбратногоЗвонка_id) Тогда
		СтрокиРеестраОбратныхЗвонков_УстановитьСтатусВыполнено(ЗаказОбратногоЗвонка_id);	
	КонецЕсли;
	//---АК ELEM 20160728
	
	//+++АК VERN 2016.08.10 ИП-00013306     Учет жалоб на поставщиков
	попытка
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(Запись.GUID_Загрузки) Тогда
			
			Если Запись.СтатусЖалобы=Перечисления.СтатусыЖалоб.НеПодтверждена
					ИЛИ НЕ ЗначениеЗаполнено(Запись.Производитель) Тогда
				УведомлятьТехнологаПриРассылке	= Ложь;
				УведомлятьПоставщикаПриРассылке	= Ложь;
			иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Поставщик"	, Запись.Производитель);
				Запрос.УстановитьПараметр("ТипЖалобы"	, Запись.ТипЖалобы);
				Запрос.УстановитьПараметр("ТипОбращения", Запись.ТипОбращения);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьТехнологаПриРассылке,
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьПоставщикаПриРассылке
				|ИЗ
				|	РегистрСведений.АК_НастройкиРассылокПоставщикамТехнологам КАК АК_НастройкиРассылокПоставщикамТехнологам
				|ГДЕ
				|	АК_НастройкиРассылокПоставщикамТехнологам.Поставщик = &Поставщик
				|	И (ВЫРАЗИТЬ(АК_НастройкиРассылокПоставщикамТехнологам.Настройка КАК Справочник.ТипыЖалоб)) = &ТипЖалобы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьТехнологаПриРассылке,
				|	АК_НастройкиРассылокПоставщикамТехнологам.УведомлятьПоставщикаПриРассылке
				|ИЗ
				|	РегистрСведений.АК_НастройкиРассылокПоставщикамТехнологам КАК АК_НастройкиРассылокПоставщикамТехнологам
				|ГДЕ
				|	АК_НастройкиРассылокПоставщикамТехнологам.Поставщик = &Поставщик
				|	И (ВЫРАЗИТЬ(АК_НастройкиРассылокПоставщикамТехнологам.Настройка КАК Справочник.ТипыОбращенийПокупателей)) = &ТипОбращения";
				Результаты = Запрос.ВыполнитьПакет();
				
				//тип жалобы
				Результат = Результаты[0].Выбрать();
				Если Результат.Следующий() тогда
					//приоритет у настроек контрагента
					УведомлятьТехнологаПриРассылке	= Результат.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= Результат.УведомлятьПоставщикаПриРассылке;
				иначе
					УведомлятьТехнологаПриРассылке	= Запись.ТипЖалобы.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= Запись.ТипЖалобы.УведомлятьПоставщикаПриРассылке;
				КонецЕсли;
				
				//тип обращения
				Результат = Результаты[1].Выбрать();
				Если Результат.Следующий() тогда
					//приоритет у настроек контрагента
					УведомлятьТехнологаПриРассылке	= УведомлятьТехнологаПриРассылке
														ИЛИ Результат.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= УведомлятьПоставщикаПриРассылке
														ИЛИ Результат.УведомлятьПоставщикаПриРассылке;
				иначе
					УведомлятьТехнологаПриРассылке	= УведомлятьТехнологаПриРассылке
														ИЛИ Запись.ТипОбращения.УведомлятьТехнологаПриРассылке;
					УведомлятьПоставщикаПриРассылке	= УведомлятьПоставщикаПриРассылке
														ИЛИ Запись.ТипОбращения.УведомлятьПоставщикаПриРассылке;
				КонецЕсли;
			КонецЕсли;
			
			//найдем документ-регистратор
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("GUID_Загрузки", Запись.GUID_Загрузки);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	АК_РассылкаПоставщикамТехнологам.Ссылка
			|ИЗ
			|	Документ.АК_РассылкаПоставщикамТехнологам КАК АК_РассылкаПоставщикамТехнологам
			|ГДЕ
			|	АК_РассылкаПоставщикамТехнологам.GUID_Загрузки = &GUID_Загрузки";
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
			иначе
				Регистратор = Неопределено;
			КонецЕсли;
			
			//возможно, движения не нужны (а документ уже есть)
			Если НЕ УведомлятьТехнологаПриРассылке
					И НЕ УведомлятьПоставщикаПриРассылке Тогда
				Если ЗначениеЗаполнено(Регистратор) Тогда
					Регистратор = Регистратор.ПолучитьОбъект();
					Регистратор.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			иначе
				//движения нужны
				Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
					Регистратор = Документы.АК_РассылкаПоставщикамТехнологам.СоздатьДокумент();
				иначе
					Регистратор = Регистратор.ПолучитьОбъект();
				КонецЕсли;
				Регистратор.Номер			= Запись.id_OK;
				Регистратор.GUID_Загрузки	= Запись.GUID_Загрузки;
				Регистратор.Дата			= Запись.ДатаДок;
				Регистратор.Производитель	= Запись.Производитель;
				Если ЗначениеЗаполнено(Технолог) Тогда
					Регистратор.Технолог	= Технолог;
				иначе
					Регистратор.Технолог	= Запись.Номенклатура.Технолог;
				КонецЕсли;
				Регистратор.УведомлятьТехнологаПриРассылке	= УведомлятьТехнологаПриРассылке;
				Регистратор.УведомлятьПоставщикаПриРассылке	= УведомлятьПоставщикаПриРассылке;
				Регистратор.ОбменДанными.Загрузка 	= Истина;
				Регистратор.Проведен 				= Истина;
				Регистратор.Записать();
				Регистратор=Регистратор.Ссылка;
				
				Движения = РегистрыНакопления.АК_РассылкиПоставщикамТехнологам.СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Регистратор);
				
				Движения.Записывать = Истина;
				Движения.Очистить();
				Движение = Движения.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Регистратор.Дата;
				Движение.Производитель 	= Запись.Производитель;
				Движение.Технолог 		= Технолог;
				Движение.УведомлятьПоставщикаПриРассылке 	= УведомлятьПоставщикаПриРассылке;
				Движение.УведомлятьТехнологаПриРассылке 	= УведомлятьТехнологаПриРассылке;
				Движение.КоличествоОбращений = 1;
				
				Движения.Записать();
				
			КонецЕсли;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
	КонецПопытки;
	//---АК VERN 2016.08.10 ИП-00013306
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЭлементовПриИзмененииРегулярности()
	
	Элементы.НачалоПериодаУведомления.Видимость		= (Запись.РегулярностьУведомления = "Дата"
														ИЛИ Запись.РегулярностьУведомления="Период");
	Элементы.ОкончаниеПериодаУведомления.Видимость	= (Запись.РегулярностьУведомления = "Период");
	Элементы.НачалоПериодаУведомления.Заголовок		= ?(Запись.РегулярностьУведомления = "Дата", "дата уведомления", "с");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЭлементовПриОтключенииУведомления()
	
	УведомлениеНеИспользуется = (Запись.Закрыт
									ИЛИ Запись.ОтменаУведомления);
	
	Запись.РегулярностьУведомления = ?(УведомлениеНеИспользуется, "", Запись.РегулярностьУведомления);
	Элементы.РегулярностьУведомления.Доступность	= НЕ УведомлениеНеИспользуется;
	Элементы.ПолучателиУведомления.Доступность		= НЕ УведомлениеНеИспользуется;
	Элементы.ПериодУведомления.Видимость			= НЕ УведомлениеНеИспользуется;
	ОбработкаЭлементовПриИзмененииРегулярности();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	
	ОбработкаЭлементовПриОтключенииУведомления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаУведомленияПриИзменении(Элемент)
	
	ОбработкаЭлементовПриОтключенииУведомления();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры


//---АК LOBV 280716

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	ЗначениеВозврат = ОткрытьФормуМодально("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПрикрепленныхФайлов", Новый Структура("ТабФайлов", Запись.ПрикрепленныеФайлы));
	Если ЗначениеЗаполнено(ЗначениеВозврат) Тогда
		Запись.ПрикрепленныеФайлы = ЗначениеВозврат;
	КонецЕсли;	
	
КонецПроцедуры


//+++АК ELEM 20160728
&НаСервере
Процедура СтрокаРеестраОбратныхЗвонков_СнятьФлагБлокировки(ЗаказОбратногоЗвонка_id)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль = "UPDATE [Loyalty].[dbo].[CashRequest_CallBack]
	|SET  is_blocked = NULL
	|FROM [Loyalty].[dbo].[CashRequest_CallBack]
	|WHERE id = " + ВнешниеДанные.ФорматПоля(ЗаказОбратногоЗвонка_id);	
	
	ЗапросПолный = "declare @err int =1
	|while @err=1
	|begin
	| begin try
	|" + ЗапросСкуль + "
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";
	
	Попытка			
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при сняти флаг блокировки со строки РеестраОбратныхЗвонков", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
КонецПроцедуры

&НаСервере
Процедура СтрокиРеестраОбратныхЗвонков_УстановитьСтатусВыполнено(ЗаказОбратногоЗвонка_id)
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	
	ЗапросСкуль =
	"UPDATE [Loyalty].[dbo].[CashRequest_CallBack]
	|SET  Request_Status = 1
	|FROM [Loyalty].[dbo].[CashRequest_CallBack]
	|WHERE id = " + ВнешниеДанные.ФорматПоля(ЗаказОбратногоЗвонка_id);	
	
	ЗапросПолный =
	"declare @err int =1
	|while @err=1
	|begin
	| begin try
	|" + ЗапросСкуль + "
	|select @err=0
	| 
	| END TRY
	|  BEGIN CATCH
	| 
	|if CHARINDEX('вызвала взаимоблокировку ресурсов',ERROR_MESSAGE(),1)>0
	|begin
	|-- запись в лог факта блокировки
	|	set @err=1
	|end
	|else
	|begin
	| 
	|-- прочая ошибка - выход  
	| return
	| end
	| 
	|  END CATCH 
	|end -- while";
	
	Попытка			
		ADOСоединение.Execute(ЗапросПолный);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при установке статуса выполнено у строки РеестраОбратныхЗвонков", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки() + Символы.ПС + "Выполняемый запрос" + Символы.ПС + ЗапросСкуль);
		флУспешно = Ложь;
	КонецПопытки;
	
	ADOСоединение.Close();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", КнопкаТаймаута = Неопределено, ОписаниеОповещения = "") Экспорт
	ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута, ОписаниеОповещения, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	#Если ВебКлиент ИЛИ ТонкийКлиент Тогда
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да");
		СписокКнопок.Добавить("Нет", "Нет");
		СписокКнопок.Добавить("Отмена", "Отмена");
		ПоказатьВопросПользователю("Документ был модифицирован.
			|
			|Сохранить изменения?", СписокКнопок,,,,, "ПередЗакрытиемЗавершение()");
		
	КонецЕсли;
	#КонецЕсли

	
КонецПроцедуры

//---АК ELEM 20160728

//+++АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений 

Функция ЭтоВключениеВПродуктНаСервере()
	
	Возврат Запись.ТипЖалобы.ЭтоВключениеВПродукт;
	
КонецФункции

&НаКлиенте
Процедура ТипЖалобыПриИзменении(Элемент)
	
	ЭтоВключениеВПродукт = ЭтоВключениеВПродуктНаСервере();
	Если НЕ ЭтоВключениеВПродукт Тогда
		Запись.ТипВключения = ПредопределенноеЗначение("Перечисление.АК_ТипыВключений.ПустаяСсылка");
	КонецЕсли;
	Элементы.ТипВключения.Доступность = ЭтоВключениеВПродукт;
	
КонецПроцедуры

Процедура ИсточникОбращенияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Запись.ИсточникОбращения)
			И Запись.ИсточникОбращения.ОтменаУведомления Тогда
		Запись.ОтменаУведомления = Запись.ИсточникОбращения.ОтменаУведомления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбращенияПриИзменении(Элемент)
	
	Если НЕ Запись.ОтменаУведомления Тогда
		ИсточникОбращенияПриИзмененииНаСервере();
		Если Запись.ОтменаУведомления Тогда
			ОтменаУведомленияПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	//
	УстановитьАвтоотметкуНезаполненногоСписаниеВозврат();
	
КонецПроцедуры

//---АК VERN 2016.08.31 ИП-00013491.001.00000001 Типы включений

&НаКлиенте
Процедура ВремяОбслуживанияВОчереди(Команда)
	
	Если НЕ ЗначениеЗаполнено(Запись.ДатаСобытия) Тогда
		Сообщить("Не заполнен реквизит дата события");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.Номер_Карты_ОК) Тогда
		Сообщить("Не заполнен реквизит карта покупателя");
		Возврат;
	КонецЕсли;
	
	//
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаВремениОбслуживанияВОчереди",
					Новый Структура("ДатаПокупки, КартаПокупателя, Магазин", Запись.ДатаСобытия, Запись.Номер_Карты_ОК, Запись.СтруктурнаяЕдиница));
	
КонецПроцедуры


&НаКлиенте
Процедура Видео(Команда)
	
	Если Запись.Номер_Бланка * Запись.НомерКассы = 0 Тогда
		Сообщить("Нет данных чека!");
		Возврат
	КонецЕсли;
	
	ПараметрыПередачи = Новый Структура("НомерЧека, НомерКассы, Дата, Тип", Запись.Номер_Бланка, Запись.НомерКассы, Запись.ДатаСобытия, 10);
	
	//ОткрытьФорму("Обработка.ПросмотрВидеоСКамер.Форма.Форма", ПараметрыПередачи, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.Вопрос" Тогда
		
		ОписаниеОповещения = "";
		ВыбранноеЗначение.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		ВыбранноеЗначениеРезультат = Строка(ВыбранноеЗначение.Значение);
		
		Если ОписаниеОповещения = "ПередЗакрытиемЗавершение()" Тогда
			
			Если ВыбранноеЗначениеРезультат = "Да" Тогда
				Записать();
				Закрыть();
			ИначеЕсли ВыбранноеЗначениеРезультат = "Нет" Тогда
				Модифицированность = Ложь;
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")Тогда
		
		Если ИсточникВыбора.ИмяФормы = "Обработка.ПросмотрВидеоСКамер.Форма.Форма" Тогда
			
			Если ВыбранноеЗначение = Ложь Тогда
				Сообщить("Не найдены видео по чеку");
			ИначеЕсли ВыбранноеЗначение = Истина Тогда
				Запись.ВидеоПросмотрено = Истина;	
			КонецЕсли;
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрСведений.ОбращенияПокупателей.Форма.ФормаПоискЧека" Тогда
			
			Если ВыбранноеЗначение <> Неопределено Тогда
				Запись.Номер_Бланка	= ВыбранноеЗначение.НомерЧека;
				Запись.НомерКассы	= ВыбранноеЗначение.НомерКассы;
				Запись.КассирПоЧеку	= ВыбранноеЗначение.Кассир;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьВидеоНаСервере()
	
	ADOСоединение = ВнешниеДанные.ПолучитьADOСоединение();
	ТекстЗапроса = 
	"Insert into sms_repl..times_for_video 
	|	(ShopNo,
	|	CashID,
	|	CashCheckNo,
	|	time_st,
	|	Time_fin,
	|	user_add,
	|	type_video)
	|Select
	|	a.ShopNo_rep,
	|	a.CashID,
	|	a.CashCheckNo,
	|	a.OpenDate,
	|	a.CloseDate,
	|	'1С',
	|	10
	|From Sms_repl..Checks as a(nolock)
	|Where
	|	CashId = " + Формат(Запись.НомерКассы, "ЧГ=0") + "
	|	and CashCheckNo = " + Формат(Запись.Номер_Бланка, "ЧГ=0");
	ADOСоединение.Execute(ТекстЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьВидео(Команда)
	
	Если Запись.Номер_Бланка * Запись.НомерКассы = 0 Тогда
		Предупреждение("Нет данных о чеке!");
	КонецЕсли;
	
	//
	ЗапроситьВидеоНаСервере();
	Запись.ЗапросВидео=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЧек(Команда)
	
	СтруктураПараметров = Новый Структура("Магазин, Номенклатура, НомерКарты, ДатаПокупки");
	СтруктураПараметров.Магазин 		= Запись.СтруктурнаяЕдиница;
	СтруктураПараметров.Номенклатура 	= Запись.Номенклатура;
	СтруктураПараметров.НомерКарты 		= Запись.Номер_Карты_ОК;
	СтруктураПараметров.ДатаПокупки 	= Запись.ДатаСобытия;
	
	ОткрытьФорму("РегистрСведений.ОбращенияПокупателей.Форма.ФормаПоискЧека", СтруктураПараметров, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПереписку(Команда)
	ЗаполнитьПерепискуНаСервере();
КонецПроцедуры

&НаСервере
Функция База_Подключение(СтрокаПодключения) экспорт	
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция База_ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	
	СтрокаПодключенияТелеграм = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
	
	Попытка
		
		CurrentConnection = База_Подключение(СтрокаПодключенияТелеграм);
		CurrentConnection.CursorLocation = 2;
		
		RecordSet = CurrentConnection.Execute(ТекстЗапроса);
		
		Пока RecordSet <> Неопределено И RecordSet.Fields.Count <= 0 Цикл
			RecordSet=RecordSet.NextRecordSet();
		КонецЦикла;				
		
		Возврат RecordSet;
	Исключение	
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПерепискуНаСервере()
	
	Если Запись.UIDTelegram = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"SELECT message_type,message_text,file_id,add_date,inbox_outbox
		|FROM [Telegram].[dbo].[BOT_Complaints]
		|WHERE message_type<100 AND Doc_Ref IN (SELECT [Doc_Ref]
		|FROM [Telegram].[dbo].[BOT_Complaints]
		|WHERE file_description = '" + Запись.UIDTelegram + "' AND (message_type = 100 OR message_type = 101))
		|ORDER BY add_date";
	Результат = База_ВыполнитьЗапрос(ТекстЗапроса);	
	ТЗО = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(Результат);
	ТаблицаПереписки.Загрузить(ТЗО);
	Для каждого Стр Из ТаблицаПереписки Цикл	
		Стр.Тип = ?(Стр.inbox_outbox=1, "ОПЕРАТОР:", "КЛИЕНТ:");
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.Переписка Тогда
		ЗаполнитьПерепискуНаСервере();
	КонецЕсли;
КонецПроцедуры

//+++АК SHEP 20170725 ИП-00016217
&НаКлиенте
Процедура ВводПоСтрокеАльтернативный(Команда)
	ВводПоСтрокеАльтернативный = НЕ ВводПоСтрокеАльтернативный;
	Элементы.ВводПоСтрокеАльтернативный.Пометка = ВводПоСтрокеАльтернативный;
КонецПроцедуры

&НаКлиенте
Процедура ВводПоСтрокеАльтернативныйОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВводПоСтрокеАльтернативный И СтрДлина(Текст) > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Элемент.Имя, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводПоСтрокеАльтернативныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ВводПоСтрокеАльтернативный И СтрДлина(Текст) > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Элемент.Имя, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНаСервере(ИмяРекъ, Текст)
	
	СписокВыбора = Новый СписокЗначений;
	
	БезГрупп = Истина;
	Если ИмяРекъ = "Номенклатура" Тогда
		ПолноеИмяМД = "Справочник.Номенклатура";
	ИначеЕсли ИмяРекъ = "СтруктурнаяЕдиница" Тогда
		БезГрупп = Ложь;
		ПолноеИмяМД = "Справочник.СтруктурныеЕдиницы";
	ИначеЕсли ИмяРекъ = "Производитель" Тогда
		ПолноеИмяМД = "Справочник.Контрагенты";
	Иначе
		Возврат СписокВыбора;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка,
		|	Наименование,
		|	ПометкаУдаления
		|ИЗ
		|	" + ПолноеИмяМД + "
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И НЕ ЭтоГруппа
		|	И Наименование ПОДОБНО &Наименование");
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	
	Если БезГрупп = Ложь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ЭтоГруппа", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокВыбора.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции
//---АК SHEP 20170725
