
//+++АК SHEP 20160712
Функция ПолучитьСледующийid_OK() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбращенияПокупателей.id_OK КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|
		|УПОРЯДОЧИТЬ ПО
		|	id_OK УБЫВ");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Счётчик = 0;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Счётчик = ВыборкаДетальныеЗаписи.id_OK;
	КонецЕсли;
	
	Возврат Счётчик + 1;
	
КонецФункции
//---АК SHEP 20160712

Функция ПолучитьПродактМенеджера(Номенклатура, Производитель) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"			, ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	Запрос.УстановитьПараметр("Производитель"	, Производитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ втХар
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|	И ЗначенияСвойствОбъектов.Значение = &Производитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Производитель КАК Производитель,
	|	втХар.Характеристика КАК Характеристика,
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.Сотрудник.Наименование КАК СотрудникНаименование,
	|	РолиПользователейСоставРоли.Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХар КАК втХар
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ РолиПользователейСоставРоли.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектРольСрезПоследних1.Объект,
	|	СоответствиеОбъектРольСрезПоследних.РольПользователя,
	|	СоответствиеОбъектРольСрезПоследних1.ТипРоли
	|ПОМЕСТИТЬ втБрендМенеджеры
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&Дата, ) КАК СоответствиеОбъектРольСрезПоследних1
	|		ПО СоответствиеОбъектРольСрезПоследних.Объект = СоответствиеОбъектРольСрезПоследних1.РольПользователя
	|ГДЕ
	|	СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.РолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование,
	|	МАКСИМУМ(РолиПользователейСоставРоли.Ссылка) КАК Ссылка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.Контрагенты
	|				ТОГДА 3
	|			КОГДА СоответствиеОбъектРольСрезПоследних.Объект ССЫЛКА Справочник.Номенклатура
	|				ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Приоритет
	|ПОМЕСТИТЬ втПриор
	|ИЗ
	|	вт КАК РолиПользователейСоставРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.ТипыРолей КАК РолиПользователейТипыРолей
	|		ПО РолиПользователейСоставРоли.Ссылка = РолиПользователейТипыРолей.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБрендМенеджеры КАК СоответствиеОбъектРольСрезПоследних
	|		ПО РолиПользователейСоставРоли.Ссылка = СоответствиеОбъектРольСрезПоследних.РольПользователя
	|			И (СоответствиеОбъектРольСрезПоследних.Объект = РолиПользователейСоставРоли.Характеристика
	|				ИЛИ РолиПользователейСоставРоли.Производитель = СоответствиеОбъектРольСрезПоследних.Объект)
	|ГДЕ
	|	РолиПользователейТипыРолей.ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователейСоставРоли.Сотрудник,
	|	РолиПользователейСоставРоли.СотрудникНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(втПриор.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втМаксПриор
	|ИЗ
	|	втПриор КАК втПриор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПриор.Сотрудник,
	|	втПриор.СотрудникНаименование,
	|	втПриор.Ссылка,
	|	втПриор.Приоритет
	|ИЗ
	|	втПриор КАК втПриор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПриор КАК втМаксПриор
	|		ПО втПриор.Приоритет = втМаксПриор.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПриор.Приоритет,
	|	втПриор.СотрудникНаименование";
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	МасФЛ = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасФЛ.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
	КонецЦикла;
	
	Возврат МасФЛ;
	
КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийКонтрагент) Тогда
		Если ВидФормы = "ФормаЗаписи" ИЛИ ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = ВидФормы + "Поставщика";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//+++АК SHEP 2018.01.23 ИП-00017251.01
Функция База_Подключение(СтрокаПодключения)
	
	Попытка
		CurrentConnection = Новый COMОбъект("ADODB.Connection");
		CurrentConnection.Open(СтрокаПодключения);
		Возврат CurrentConnection;			
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();		
		#Если НаКлиенте тогда
		Сообщить(ОписаниеОшибки);			
		#КонецЕсли		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//+++АК SHEP 2018.01.23 ИП-00017251.01
//Формирует и возвращает структуру полей для заполнения
//+++АК SHEP 2018.03.16 ИП-00017032: добавил ещё оценки
Функция ДанныеБотаТелеграм(BOT_Purchase_Tovar_Reiting_ID) Экспорт
	
Перем СтруктураВозврата;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ОценкаТелеграм,ДатаПроизводстваТелеграм,ИмяПоказателяТелеграм", 0, Дата(1,1,1), "");
	
	Если ЗначениеЗаполнено(BOT_Purchase_Tovar_Reiting_ID) Тогда
		
		СтрокаПодключенияТелеграм = ВнешниеДанные.ПолучитьСтрокуПодключенияMSSQL("srv-sql03", "Telegram");
		
		ADOСоединение = База_Подключение(СтрокаПодключенияТелеграм);
		Если ADOСоединение = Неопределено Тогда
			Сообщить("Ошибка при подключении к SQL");
			Возврат СтруктураВозврата;
		КонецЕсли;
		ADOСоединение.CursorLocation = 2;
		
		ТекстЗапросаSQL = "
			|SELECT
			|	r.id
			|	, CAST(r.date_proizv AS datetime) AS ДатаПроизводстваТелеграм
			|	, ISNULL(cp.Name_pokazatel, '') AS ИмяПоказателяТелеграм
			|	, r.Reiting AS ОценкаТелеграм
			|FROM Loyalty.dbo.BOT_Purchase_Tovar_Reiting as r with(nolock)  --таблица оценок
			|	LEFT JOIN [Loyalty].[dbo].[BOT_Tov_Complaint_Pokazatel] as pok with(nolock) --таблица оценка-показатель
			|		on r.id=pok.id_Purch_Tov_Reiting
			|	LEFT JOIN Loyalty.dbo.Complaint_Pokazatel as cp with(nolock)  --справочник показателей
			|		on pok.id_pokazatel=cp.id_pokazatel
			|WHERE r.id = " + ВнешниеДанные.ФорматПоля(BOT_Purchase_Tovar_Reiting_ID);
		
		rs = ADOСоединение.Execute(ТекстЗапросаSQL);
		
		ТЗн = ВнешниеДанные.ПреобразоватьРезультатВТаблицуЗначений(rs);
		Если ТЗн.Количество() > 0 Тогда
			МассивПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ОценкаТелеграм,ДатаПроизводстваТелеграм,ИмяПоказателяТелеграм", ",");
			Для Каждого Показатель Из МассивПоказателей Цикл
				ТЗнКопия = ТЗн.Скопировать();
				ТЗнКопия.Свернуть(Показатель);
				Для Каждого СтрокаПоказателя Из ТЗнКопия Цикл
					ЗначениеПоказателя = СтрокаПоказателя[Показатель];
					Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда Продолжить; КонецЕсли;
					
					Если Показатель = "ИмяПоказателяТелеграм" Тогда
						СтруктураВозврата[Показатель] = ?(ПустаяСтрока(СтруктураВозврата[Показатель]), "", СтруктураВозврата[Показатель] + "; ") + ЗначениеПоказателя;
					Иначе
						СтруктураВозврата[Показатель] = ЗначениеПоказателя; // оценка и дата пр-ва всегда одинаковые
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ADOСоединение.Close();
		ADOСоединение = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

//+++АК SHEP 2018.04.02 ИП-00017032
Функция ПолучитьКаталогХраненияФайлов(ДатаДобавления = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогХраненияФайлов = СокрЛП(Константы.КаталогХраненияФайловКартинок.Получить());
	КаталогХраненияФайлов = КаталогХраненияФайлов + ?(Прав(КаталогХраненияФайлов, 1) = "\", "", "\") + "ОбращенияПокупателей\";
	КаталогХраненияФайлов = КаталогХраненияФайлов + ?(ЗначениеЗаполнено(ДатаДобавления), Формат(ДатаДобавления, "ДФ=yyyyMM") + "\", "");
	
	ФайлКаталогХраненияФайлов = Новый Файл(КаталогХраненияФайлов);
	Если НЕ ФайлКаталогХраненияФайлов.Существует() Тогда
		СоздатьКаталог(КаталогХраненияФайлов);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КаталогХраненияФайлов;
	
КонецФункции

//+++ golv 2018.08.02 ИП-00018018.03
Функция ПолучитьТехнолога(Номенклатура, Производитель, СтруктурнаяЕдиница, ДатаДок) Экспорт
	
	ХаркаПоТовару = Неопределено;
	
	Если ЗначениеЗаполнено(Производитель) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Значение", Производитель);
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
		|	И ЗначенияСвойствОбъектов.Значение = &Значение
		|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры).Владелец = &Владелец";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ХаркаПоТовару = Выборка.Объект;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаДок"			, ДатаДок);
			Запрос.УстановитьПараметр("ТорговаяТочка"	, СтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
			Запрос.Текст = "ВЫБРАТЬ
			|	ТоварныйАссортиментТочекСрезПоследних.Характеристика
			|ИЗ
			|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
			|			&ДатаДок,
			|			ТорговаяТочка = &ТорговаяТочка
			|				И Номенклатура = &Номенклатура) КАК ТоварныйАссортиментТочекСрезПоследних";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ХаркаПоТовару = Выборка.Характеристика;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РольТехнолога = Неопределено;
	
	Если ЗначениеЗаполнено(ХаркаПоТовару) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДок"	, ДатаДок);
		Запрос.УстановитьПараметр("Харка"	, ХаркаПоТовару);
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствиеОбъектРольСрезПоследних.РольПользователя
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&ДатаДок,
		|			Объект = &Харка
		|				И ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РольТехнолога = Выборка.РольПользователя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РольТехнолога) Тогда
			
			Произв = Производитель;
			Если НЕ ЗначениеЗаполнено(Произв) Тогда
				Запрос.УстановитьПараметр("Харка", ХаркаПоТовару);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Значение
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)
				|	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ХарактеристикиНоменклатуры) = &Харка";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Произв = Выборка.Значение;
				КонецЕсли;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Производитель", Произв);
			Запрос.Текст = "ВЫБРАТЬ
			|	СоответствиеОбъектРольСрезПоследних.РольПользователя
			|ИЗ
			|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
			|			&ДатаДок,
			|			Объект = &Производитель
			|				И ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследних";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РольТехнолога = Выборка.РольПользователя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РольТехнолога)
			И РольТехнолога.СоставРоли.Количество() > 0 Тогда
		Возврат РольТехнолога.СоставРоли[0].Сотрудник;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровПисьма(Запись) Экспорт
		
	мТемаПисьма 	= Строка(Запись.ТипЖалобы) + "_" + Запись.Номенклатура + "_" + Запись.СтруктурнаяЕдиница + "_" +
						Формат(Запись.ДатаДок, "ДФ=dd.MM.yyyy") + "_" + СокрЛП(Строка(Запись.GUID_Загрузки));
	
	мТекстПисьма 	= Строка(Запись.Примечание) + Символы.ПС + Запись.СтруктурнаяЕдиница + " тел.: " +
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.СтруктурнаяЕдиница, "ТелефонныйНомер1") + Символы.ПС + Запись.Номенклатура + Символы.ПС +
						"Технолог: " + Запись.Технолог + Символы.ПС + Запись.Производитель + Символы.ПС +
						"Автор: " + СокрЛП(Запись.ФИО_Покупателя) + Символы.ПС +
						"Номер карты: " + СокрЛП(Запись.Номер_Карты_ОК) + Символы.ПС +
						"Телефон: " + СокрЛП(Запись.Телефон) + Символы.ПС +
						ПолучитьДопСообщение(Запись);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбращения"	, Запись.ТипОбращения);
	СтруктураПараметров.Вставить("ТемаПисьма"	, мТемаПисьма);
	СтруктураПараметров.Вставить("ТекстПисьма"	, мТекстПисьма);
	СтруктураПараметров.Вставить("Номенклатура"	, Запись.Номенклатура);
	СтруктураПараметров.Вставить("Производитель", Запись.Производитель);
	СтруктураПараметров.Вставить("ТТ"			, Запись.СтруктурнаяЕдиница);
	СтруктураПараметров.Вставить("Ответственный", Запись.Ответственный);
	СтруктураПараметров.Вставить("ТабФайлов"	, Запись.ПрикрепленныеФайлы);
	СтруктураПараметров.Вставить("НомерКассы"	, Запись.НомерКассы);
	СтруктураПараметров.Вставить("Номер_Бланка"	, Запись.Номер_Бланка);
	СтруктураПараметров.Вставить("ТипЖалобы"	, Запись.ТипЖалобы);	
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьДопСообщение(Запись) Экспорт
	
	СпрТипыОбращений 	= Справочники.ТипыОбращенийПокупателей;
	ТекТипОбращения 	= Запись.ТипОбращения;
	
	Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение") Тогда
		СообщениеДоп = "Всего обращений с таким подтипом по производителю - " + ПолучитьКоличествоОбращений(Запись, Истина) + Символы.ПС +
						"Всего обращений с таким подтипом по производителю за последние шесть недель - " +
						ПолучитьКоличествоОбращенийЗаПериод(Запись, 42, Истина);	
	Иначе	
		СообщениеДоп = "";	
	КонецЕсли; 
	СообщениеВозвр 				= "";
	СообщениеПокупкиЗа4Месяца 	= "";
	
	Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("02 Продукт испорчен раньше срока")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("03 Продукт изменился")
			ИЛИ	ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("04 Вкус не нравится") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				, НачалоДня(ТекущаяДата() - 3*24*60*60));
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ИсточникОбращения"	, Справочники.ИсточникиОбращений.НайтиПоНаименованию("Возврат Покупателя"));
		Мас = Новый Массив;
		Если ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("01 Включение") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Включение"));		
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("02 Продукт испорчен раньше срока") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Срок не выдержал"));	
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Запах"));	
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("03 Продукт изменился") Тогда 
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Консистенция нарушена"));		
		ИначеЕсли ТекТипОбращения = СпрТипыОбращений.НайтиПоНаименованию("04 Вкус не нравится") Тогда
			Мас.Добавить(Справочники.ТипыСписанийИВозвратов.НайтиПоНаименованию("Вкус несоответствует норме"));		
		КонецЕсли;
		Запрос.УстановитьПараметр("GUID_Загрузки"		, Запись.GUID_Загрузки);
		Запрос.УстановитьПараметр("ТипСписанияВозврата"	, Мас);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	ОбращенияПокупателей.Номенклатура = &Номенклатура
		|	И ОбращенияПокупателей.Производитель = &Производитель
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.ИсточникОбращения = &ИсточникОбращения
		|	И ОбращенияПокупателей.ТипСписанияВозврата В(&ТипСписанияВозврата)
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
		Выборка = Запрос.Выполнить().Выбрать();
		Кол = 0;
		Пока Выборка.Следующий() Цикл
			Кол = Выборка.id_OK;
		КонецЦикла;
		СообщениеВозвр = "Всего возвратов по продукту/производителю за три дня - " + Строка(Кол);
		
		СообщениеПокупкиЗа4Месяца = ПолучитьСообщениеПокупкиЗа4Месяца(Запись.Номенклатура, Запись.Производитель);
		
	КонецЕсли;
	
	Если Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
		Если ЗначениеЗаполнено(Запись.Номенклатура)
				И ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) Тогда
		    СообщениеВозвр = ПолучитьСообщениеПоОтсутТовара(Запись);
			Сообщение = 
							"Всего аналогичных обращений по продукту/магазину - " 		+ ПолучитьКоличествоОбращений(Запись) 			+ Символы.ПС +
							"Всего аналогичных обращений за последние три недели - " 	+ ПолучитьКоличествоОбращенийЗаПериод(Запись, 21) 	+ Символы.ПС +
							ПолучитьСтрокуСВозвратами(Запись) + Символы.ПС +
							СообщениеДоп + Символы.ПС +
							СообщениеПокупкиЗа4Месяца + Символы.ПС +
							СообщениеВозвр;
		КонецЕсли; 
	Иначе	
		Сообщение = ?(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Запись.ТипЖалобы, "Наименование") = "11_1 Просьба добавить продукт", "",
						"Всего аналогичных обращений по продукту/производителю - " 	+ ПолучитьКоличествоОбращений(Запись) 			+ Символы.ПС +
						"Всего аналогичных обращений за последние три недели - " 	+ ПолучитьКоличествоОбращенийЗаПериод(Запись, 21)) 	+ Символы.ПС +
						ПолучитьСтрокуСВозвратами(Запись) + Символы.ПС +
						СообщениеДоп + Символы.ПС +
						СообщениеПокупкиЗа4Месяца + Символы.ПС +
						СообщениеВозвр;
	КонецЕсли; 
	
	//
	
	Возврат Сообщение;
	
КонецФункции

Функция ПолучитьСтрокуСВозвратами(Запись) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Запись.Номенклатура)
			ИЛИ НЕ ЗначениеЗаполнено(Запись.Производитель) Тогда
		Возврат "";
	КонецЕсли;
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	СтрПодкл=ОбменСAccess.ПолучитьСтрокуСоединения("M2");
	//СтрПодкл=СтрЗаменить(СтрПодкл,"sms_izbenka","m2");
	ADOСоединение.ConnectionString  = СтрПодкл;
	ADOСоединение.Open();
	Если ADOСоединение.State() = 0 Тогда
		Возврат "";
	Иначе           
	КонецЕсли;
	
	ИдТов 	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Запись.Номенклатура, "id_tov");
	ИдКонтр	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Запись.Производитель, "ИД");
	
	СтрЗапрос =
	"Select
	|	convert(date,DateAdd(year, -2000, Doc._Date_Time)) as Дата,
	|	case when Doc._Posted =1 then 'Да' else 'Нет' end as Проведен,
	|	SprNom._Fld760 as id_tov,
	|	isnull(hk.id_kontr, sprKontr._Fld1159 ) as id_kontr,
	|	SprNom._Description as товар,
	|	SprKontr._Description as поставщик,
	|-- Spr_Har._Description as характеристика,

	|	convert(real, sum(Tov._Fld3185)) as количество,
	|	convert(decimal(15, 2), pr.sebest) as Себест,
	|	convert(real,convert(decimal(15, 2), sum(Tov._Fld3185 * pr.sebest))) as Сумма,
	|	Convert(varchar(500), Doc._Fld3175) as Комментарий,
	|	Doc._Number as НомерДок,
	|	SprPolzovateli._Description as АвторДок
	|from IzbenkaFin.._Document3039 as Doc with (nolock)
	| inner join IzbenkaFin.._Document3039_VT3179 as tov with (nolock)
	| on Doc._IDRRef = tov._Document3039_IDRRef
	| inner Join IzbenkaFin.dbo._Reference29 as SprNom (nolock)
	| On SprNom._IDRRef = Tov._Fld3181RRef
	| inner join Reports..Price_1C_tov as pr
	| on SprNom._Fld760 = pr.id_tov
	| LEFT Join IzbenkaFin.dbo._Reference2539 as Spr_Har (nolock)
	| On Spr_Har._IDRRef = Tov._Fld3182RRef
	| left Join IzbenkaFin.dbo._Reference32 as SprPolzovateli (nolock)
	| On SprPolzovateli._IDRRef = Doc._Fld3174RRef
	| left join M2..Har_kontr as hk
	| on Tov._Fld3182RRef = hk.HaracRef
	| 	 and SprNom._Fld760 = hk.id_tov
	| inner Join IzbenkaFin.dbo._Reference27 as SprKontr (nolock)
	| On SprKontr._Fld1159 = hk.id_kontr
	|where
	|	doc._Fld3173RRef IN (0x979D005056A0010611E34CF5AE747831, 0xBF3A005056A0010611E359133F147350)
	|	and convert(date, DateAdd(year, -2000, Doc._Date_Time)) between convert(date, dateadd(day, -1, getdate())) and convert(date, dateadd(day, 0, getdate())) 
	|	and Doc._Marked = 0
	|	and Doc._Posted=1
	|	and SprNom._Fld760 = " + ВнешниеДанные.ФорматПоля((ИдТов)) + "
	|	and isnull(hk.id_kontr, sprKontr._Fld1159 ) = " + ВнешниеДанные.ФорматПоля((ИдКонтр)) + "
	|group by
	|	pr.sebest,
	|	Convert(varchar(500), Doc._Fld3175),
	|	Doc._Number,
	|	SprPolzovateli._Description,
	|	convert(date, DateAdd(year, -2000, Doc._Date_Time)),
	|	Doc._Posted,
	|	SprNom._Fld760,
	|	isnull(hk.id_kontr, sprKontr._Fld1159),
	|	SprNom._Description,
	|	SprKontr._Description,
	|	Spr_Har._Description";
	
	rs = ADOСоединение.Execute(СтрЗапрос);
	
	СтрВозвр = "";	
	Попытка
		rs.MoveFirst();
		//
		Сч = 0;
		Пока НЕ rs.EOF() Цикл
			Сч = Сч + 1;
			
			СтрВозвр = "Возврат за 2 дня - " + Строка(Rs.Fields("товар").Value) + " " + Строка(Rs.Fields("поставщик").Value) +
						" количество - " + Строка(Rs.Fields("количество").Value) + " " + Строка(Rs.Fields("Комментарий").Value);	
			
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//
	Возврат СтрВозвр;	
	
КонецФункции

Функция ПолучитьСообщениеПокупкиЗа4Месяца(мНоменклатура, мПроизводитель)
	
	СтрПокупки = "";
	
	Текст_id_tov 	= Формат(мНоменклатура.id_tov	, "ЧГ=");
	Текст_id_kontr 	= Формат(мПроизводитель.ИД		, "ЧГ=");
	
	//
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ТекстЗапроса =
	"DECLARE @Date1_Sales DATE = DATEADD(MONTH, -4, GetDate());
	|DECLARE @Date2_Sales DATE = GetDate();
	|
	|Select
	|	SUM(ISNULL(chl.Quantity, 0)) as kol,
	|	SUM(ISNULL(chl.Quantity_Kontr, 0)) as kol_kontr
    |
	|From (
	|	-- Вкусвилл
	|	Select
	|		SUM(Ch.Quantity) as Quantity,
	|		SUM(Case When Ch.id_kontr = " + Текст_id_kontr + " Then Ch.Quantity Else 0 End) as Quantity_Kontr
	|	From SMS_UNION..CheckLine as Ch (nolock)
	|	Where
	|		Ch.date_ch Between @Date1_Sales And @Date2_Sales
	|		And Ch.OperationType_cl In (1, 3)
	|		And Ch.id_tov_cl = " + Текст_id_tov + "
	|	
	|	 -- Избёнка
	|	Union All
	|	
	|	Select
	|		SUM(Ch.Quantity),
	|		SUM(Case When Ch.ManufacturerID = " + Текст_id_kontr + " Then Ch.Quantity Else 0 End)		
	|	From SMS_IZBENKA..CheckLine as Ch (nolock)
	|	Where
	|		Ch.date_ch Between @Date1_Sales And @Date2_Sales
	|		And Ch.OperationType_cl In (1, 3)
	|		And Ch.id_tov_cl = " + Текст_id_tov + "
	|	) as chl";
	Выборка = ADOСоединение.Execute(ТекстЗапроса);
	
	ТекстКол 	= "";
	ТекстКолХар = "";
	Пока НЕ Выборка = Неопределено Цикл
		Если Выборка.Fields.Count > 0 Тогда
			Пока НЕ Выборка.EOF Цикл
		
				ТекКоличество = Выборка.Fields("kol").Value;
				Если ЗначениеЗаполнено(ТекКоличество) Тогда
					ТекстКол = Формат(ТекКоличество, "ЧГ=");
				КонецЕсли;
				ТекКоличество = Выборка.Fields("kol_kontr").Value;
				Если ЗначениеЗаполнено(ТекКоличество) Тогда
					ТекстКолХар = Формат(ТекКоличество, "ЧГ=");
				КонецЕсли;
				
				Если НЕ Выборка.EOF Тогда
					Выборка.MoveNext();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Выборка = Выборка.NextRecordSet();
	КонецЦикла;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	СтрПокупки = СтрПокупки + "Всего покупок этого продукта и характеристики за последние 4 месяца - " + ТекстКолХар
				+ Символы.ПС + "Всего покупок этого продукта за последние 4 месяца - " + ТекстКол;

	//
	Возврат СтрПокупки;
	
КонецФункции

Функция ПолучитьКоличествоОбращенийЗаПериод(Запись, Дней, ФлВключения = Ложь)
	Если  Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				,НачалоДня(ТекущаяДата())-Дней*24*60*60);
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
		Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	Иначе	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1"				,НачалоДня(ТекущаяДата())-Дней*24*60*60);
		Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
		Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
		Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
		Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
		Запрос.УстановитьПараметр("Фл"					, Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии")
															ИЛИ Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_2 Нет свежего товара"));
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ &ФлВключения)
		|	И (ОбращенияПокупателей.Производитель = &Производитель
		|				И НЕ &ФЛ
		|			ИЛИ &Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ &ФЛ)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ &Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И НЕ &ФЛ
		|			ИЛИ &ФлВключения)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок МЕЖДУ &Дата1 И &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	КонецЕсли; 
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Кол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
	
	Возврат Строка(Кол)
	
КонецФункции

Функция ПолучитьКоличествоОбращений(Запись, ФлВключения = Ложь)
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата2"				, КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура"		, Запись.Номенклатура);
	Запрос.УстановитьПараметр("Производитель"		, Запись.Производитель);
	Запрос.УстановитьПараметр("ТипОбращения"		, Запись.ТипОбращения);
	Запрос.УстановитьПараметр("ТипОбращенияСтр"		, Запись.ТипОбращения.Наименование);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Запись.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТипЖалобы"			, Запись.ТипЖалобы);
	
	
	
	
	Если Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_1 Нет товара в наличии") Тогда
	
		Запрос.УстановитьПараметр("Фл"					, Истина);
															
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	Иначе	
		Запрос.УстановитьПараметр("Фл"					,Запись.ТипЖалобы = Справочники.ТипыЖалоб.НайтиПоНаименованию("10_2 Нет свежего товара"));
															
		Запрос.УстановитьПараметр("ФлВключения"			, ФлВключения);
		Запрос.УстановитьПараметр("GUID_Загрузки"			, Запись.GUID_Загрузки);
		
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОбращенияПокупателей.id_OK) КАК id_OK
		|ИЗ
		|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
		|ГДЕ
		|	(ОбращенияПокупателей.Номенклатура = &Номенклатура
		|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ &ФлВключения)
		|	И (ОбращенияПокупателей.Производитель = &Производитель
		|				И НЕ &ФЛ
		|			ИЛИ &Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ &ФЛ)
		|	И (ОбращенияПокупателей.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ &Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И  &ФЛ=Ложь
		|			ИЛИ &ФлВключения)
		|	И ВЫБОР
		|			КОГДА НЕ &ТипЖалобы = ЗНАЧЕНИЕ(Справочник.ТипыЖалоб.ПустаяСсылка)
		|				ТОГДА ОбращенияПокупателей.ТипЖалобы = &ТипЖалобы
		|			ИНАЧЕ ОбращенияПокупателей.ТипОбращения = &ТипОбращения
		|		КОНЕЦ
		|	И ОбращенияПокупателей.ДатаДок <= &Дата2
		|	И ОбращенияПокупателей.GUID_Загрузки <> &GUID_Загрузки";
	
	КонецЕсли; 
	
	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Кол = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Кол = ВыборкаДетальныеЗаписи.id_OK;
	КонецЦикла;
	
	Возврат Строка(Кол)
	
КонецФункции

Функция ПолучитьСообщениеПоОтсутТовара(Запись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СтрВозвр = "";
	Номенклатура = Новый СписокЗначений;
	Номенклатура.Добавить(Запись.Номенклатура);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ТТ"				, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанных.Колонки.Добавить("id_ТТ"			, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("id_tov"			, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("id_kontr"		, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Поставщик"		, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("ОстатокНаТочке"	, Новый ОписаниеТипов("Число"));
	
	ADOСоединение = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionTimeOut = 0;
	ADOСоединение.CommandTimeOut    = 0;
	ADOСоединение.ConnectionString  = ОбменСAccess.ПолучитьСтрокуСоединения("sms_izbenka");
	ADOСоединение.Open();
	
	ЗапросРеквизиты = Новый Запрос;
	ЗапросРеквизиты.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросРеквизиты.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.id_tov
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
							
	
	ТабНоменклатура = ЗапросРеквизиты.Выполнить().Выгрузить();
	СтрокаОтборНоменклатура = "99999999";
	
	Если Номенклатура.Количество() > 0 Тогда
		Для Каждого ЭлементНоменклатура Из Номенклатура Цикл
			Если ЗначениеЗаполнено(ЭлементНоменклатура.Значение) Тогда
				СтрокаСпр = ТабНоменклатура.Найти(ЭлементНоменклатура.Значение, "Ссылка");
				СтрокаОтборНоменклатура = СтрокаОтборНоменклатура + ", " + Формат(СтрокаСпр.id_tov, "ЧГ=0");
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	СтрЗапрос = "exec M2..ostatki_tt_tov_kontr_currdate " + ?(Номенклатура.Количество() > 0, "'" + СтрокаОтборНоменклатура + "'", "null") + ", null";
					
	rs = ADOСоединение.Execute(СтрЗапрос);
	Пока rs <> Неопределено
			И rs.Fields.Count <= 0 Цикл
		rs = rs.NextRecordSet();
	КонецЦикла;
	
	ИДТТ = Запись.СтруктурнаяЕдиница.id_TT;
	
	Попытка
		rs.MoveFirst();
		
		Пока НЕ rs.EOF() Цикл
			Если Rs.Fields("ID_TT").Value <> ИДТТ Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли; 
			СтрокаДоб = ТаблицаДанных.Добавить();
			СтрокаДоб.id_ТТ 			= Rs.Fields("ID_TT").Value;
			СтрокаДоб.id_tov 			= Rs.Fields("ID_tov").Value;
			СтрокаДоб.id_kontr 			= Rs.Fields("id_kontr").Value;
			СтрокаДоб.ОстатокНаТочке 	= Rs.Fields("kol").Value;   
			rs.MoveNext();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб"				, ТаблицаДанных);
	//Запрос.УстановитьПараметр("ЕстьОтборПоПоставщикам", Поставщики.Количество() > 0);
	Запрос.УстановитьПараметр("Характеристика"	, ПолучитьХарактеристикуПоПроизводителю(Запись.Номенклатура, Запись.Производитель));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.id_ТТ,
	|	Таб.ID_tov,
	|	Таб.ID_kontr,
	|	Таб.ОстатокНаТочке
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ_Запрос.ОстатокНаТочке,
	|	ВЗ_Запрос.Номенклатура,
	|	ВЗ_Запрос.ТорговаяТочка КАК ТТ,
	|	ВЗ_Запрос.КоординатыШирота,
	|	ВЗ_Запрос.КоординатыДолгота,
	|	ТоварныйАссортиментТочекСрезПоследних.Значение КАК Поставщик,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Данные.ОстатокНаТочке КАК ОстатокНаТочке,
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		СтруктурныеЕдиницы.Ссылка КАК ТорговаяТочка,
	|		СтруктурныеЕдиницы.КоординатыШирота КАК КоординатыШирота,
	|		СтруктурныеЕдиницы.КоординатыДолгота КАК КоординатыДолгота,
	|		ВТ_Данные.ID_kontr КАК ID_kontr
	|	ИЗ
	|		ВТ_Данные КАК ВТ_Данные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ПО ВТ_Данные.id_ТТ = СтруктурныеЕдиницы.id_TT
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВТ_Данные.ID_tov = Номенклатура.id_tov) КАК ВЗ_Запрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВЗ_Запрос.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И ВЗ_Запрос.ID_kontr = ХарактеристикиНоменклатуры.id_kontr
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект КАК Характеристика,
	|			ЗначенияСвойствОбъектов.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель)) КАК ТоварныйАссортиментТочекСрезПоследних
	|		ПО (ХарактеристикиНоменклатуры.Ссылка = ТоварныйАссортиментТочекСрезПоследних.Характеристика)
	|ГДЕ
	|	(ХарактеристикиНоменклатуры.Ссылка = &Характеристика
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Данные";
				   
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанных.Колонки.Добавить("Расстояние"				, Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КоординатыШиротаСтр"	, Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КоординатыДолготаСтр"	, Новый ОписаниеТипов("Строка"));
	
	ТаблицаКопия = ТаблицаДанных.Скопировать();
	ТаблицаКопия.Свернуть("ТТ, КоординатыШирота, КоординатыДолгота", "Расстояние");
	
	
	КоординатыШирота 	= Запись.СтруктурнаяЕдиница.КоординатыШирота;
	КоординатыДолгота 	= Запись.СтруктурнаяЕдиница.КоординатыДолгота;
	
	
	Для Каждого СтрокаКеш Из ТаблицаКопия Цикл
		СтрЗапрос = "SELECT [master].[dbo].[CoordinatesToDistance] (" + Формат(СтрокаКеш.КоординатыШирота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ","
																	+ Формат(СтрокаКеш.КоординатыДолгота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ","
																	+ Формат(КоординатыШирота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ","
																	+ Формат(КоординатыДолгота, "ЧЦ=18; ЧДЦ=15; ЧРД=.; ЧН=; ЧГ=0") + ")";
				
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Попытка
			rs.MoveFirst();
			
			СтрокаКеш.Расстояние 		= Rs.Fields(0).Value;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ADOСоединение.Close();
	ADOСоединение = Неопределено;
	
	ТаблицаКопия.Индексы.Добавить("ТТ");
	
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		//РазницаШирота = СтрокаТаб.КоординатыШирота - КоординатыШирота;
		//РазницаШирота = РазницаШирота * ?(РазницаШирота < 0, -1, 1);
		//РазницаДолгота = СтрокаТаб.КоординатыДолгота - КоординатыДолгота;
		//РазницаДолгота = РазницаДолгота * ?(РазницаДолгота < 0, -1, 1);
		//СтрокаТаб.Расстояние = Sqrt(РазницаШирота * РазницаШирота + РазницаДолгота * РазницаДолгота);
		СтрокаКеш = ТаблицаКопия.Найти(СтрокаТаб.ТТ, "ТТ");
		СтрокаТаб.Расстояние 			= СтрокаКеш.Расстояние;
		СтрокаТаб.КоординатыШиротаСтр 	= СтрокаТаб.КоординатыШирота;
		СтрокаТаб.КоординатыДолготаСтр 	= СтрокаТаб.КоординатыДолгота;
		
	КонецЦикла;
	СтрВозвр = "Ближайшие точки продажи товара:";	
	ЕдИзм = Запись.Номенклатура.ЕдиницаХраненияОстатков;
	МасХар = Новый Массив;
	Для Каждого СтрокаТаб Из ТаблицаДанных Цикл
		СтрВозвр = СтрВозвр + Символы.ПС + Строка(СтрокаТаб.Характеристика) + Символы.Таб + "-" + Символы.Таб + Строка(СтрокаТаб.ТТ) + Символы.Таб +
					Строка(?(ЗначениеЗаполнено(СтрокаТаб.ОстатокНаТочке), СтрокаТаб.ОстатокНаТочке, 0)) + Символы.Таб + " " + Строка(ЕдИзм);		
		МасХар.Добавить(СтрокаТаб.Характеристика);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Статус,
	|	ХарактеристикиНоменклатуры.Причина,
	|	ХарактеристикиНоменклатуры.АвторПоследнегоИзменения,
	|	ХарактеристикиНоменклатуры.ДатаОжидаемогоВозврата,
	|	ХарактеристикиНоменклатуры.ДатаПоследнегоИзмененияУРЗ,
	|	ХарактеристикиНоменклатуры.СтатусУРЗ,
	|	ХарактеристикиНоменклатуры.Комментарий,
	|	ХарактеристикиНоменклатуры.ДатаОжидаемойПоставки
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&Ссылка)
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	СтрВозвр = СтрВозвр + Символы.ПС + Символы.ПС + "Данные продакта о статусе характеристик позиции:";	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрВозвр = СтрВозвр + Символы.ПС + Строка(ВыборкаДетальныеЗаписи.Ссылка) + Символы.Таб + " имеет статус " + Символы.Таб + Строка(ВыборкаДетальныеЗаписи.Статус) +
					Символы.Таб + Строка(ВыборкаДетальныеЗаписи.Причина) + ", автор изменения - " + Строка(ВыборкаДетальныеЗаписи.АвторПоследнегоИзменения) +
					?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаОжидаемогоВозврата)	, ", дата ожидаемого возврата " +
																			Строка(Формат(ВыборкаДетальныеЗаписи.ДатаОжидаемогоВозврата	, "ДФ=dd.MM.yyyy")), "") + Символы.ПС +
					"Статус УРЗ " + Строка(ВыборкаДетальныеЗаписи.СтатусУРЗ) + " (" + ВыборкаДетальныеЗаписи.Комментарий + "), " +
					?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаОжидаемойПоставки)	, ", дата ожидаемой поставки " +
																			Строка(Формат(ВыборкаДетальныеЗаписи.ДатаОжидаемойПоставки	,"ДФ=dd.MM.yyyy")), "");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"	, Запись.Номенклатура);
	Запрос.УстановитьПараметр("ТорговаяТочка"	, Запись.СтруктурнаяЕдиница);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныйАссортиментТочекСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ТоварныйАссортиментТочек.СрезПоследних(
	|			,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И Номенклатура = &Номенклатура) КАК ТоварныйАссортиментТочекСрезПоследних
	|ГДЕ
	|	(ТоварныйАссортиментТочекСрезПоследних.Выведена
	|			ИЛИ ТоварныйАссортиментТочекСрезПоследних.Запрещена)";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		СтрВозвр = СтрВозвр + Символы.ПС + Символы.ПС + "Выведена из ассортимента данного магазина: " + Строка(Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
	Иначе
		СтрВозвр = СтрВозвр + Символы.ПС + Символы.ПС + "Присутствует в ассортименте данного магазина ";
	КонецЕсли;
	
	Возврат СтрВозвр;
	
КонецФункции

Функция ПолучитьХарактеристикуПоПроизводителю(Номенклатура, Производитель) Экспорт
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Значение", Производитель);
	Запрос.Текст = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ЗначенияСвойствОбъектов.Значение = &Значение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокПолучателей(Параметры) Экспорт
	
	//
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("Получатель");
	Получатели.Колонки.Добавить("Почта");
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата"	, ТекущаяДата());
	Запрос.УстановитьПараметр("Объект"	, Параметры.ТипОбращения);
	Запрос.УстановитьПараметр("Владелец", Параметры.Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПользователейСоставРоли.Сотрудник
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
	|			&ТекДата,
	|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ОтветственныйЗаТипОбращенияПокупателя)
	|				И Объект = &Объект) КАК СоответствиеОбъектРольСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
	|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ЗначенияСвойствОбъектов.Значение КАК Производитель
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = Получатели.Добавить();
		СтрокаДоб.Получатель 	= Выборка.Сотрудник;
		СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
	КонецЦикла;
	
	Характеристика = Неопределено;
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Параметры.Производитель = Выборка.Производитель Тогда
			Характеристика = Выборка.Ссылка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	//
	Если Параметры.ТипОбращения.УведомлятьПродактМенеджера Тогда
		
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|			ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
		|		ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
		|	КОНЕЦ КАК РольТехнолог
		|ПОМЕСТИТЬ ВТ_ТехнологРоли
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|		ЗначенияСвойствОбъектов.Значение КАК Производитель
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|	ГДЕ
		|		ХарактеристикиНоменклатуры.Ссылка = &Характеристика) КАК ВЗ_Характеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихХар
		|		ПО ВЗ_Характеристики.Характеристика = СоответствиеОбъектРольСрезПоследнихХар.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихКонтр
		|		ПО ВЗ_Характеристики.Производитель = СоответствиеОбъектРольСрезПоследнихКонтр.Объект
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|				ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
		|			ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЗ_Запрос.РольТехнолог
		|ПОМЕСТИТЬ ВТ_ВсеТехнологи
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ТехнологРоли.РольТехнолог.Родитель КАК РольТехнолог
		|	ИЗ
		|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли
		|	ГДЕ
		|		ЕСТЬNULL(ВТ_ТехнологРоли.РольТехнолог.Родитель, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РолиПользователей.Ссылка
		|	ИЗ
		|		Справочник.РолиПользователей КАК РолиПользователей
		|	ГДЕ
		|		РолиПользователей.Родитель В
		|				(ВЫБРАТЬ
		|					ВТ_ТехнологРоли.РольТехнолог
		|				ИЗ
		|					ВТ_ТехнологРоли КАК ВТ_ТехнологРоли)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ТехнологРоли.РольТехнолог
		|	ИЗ
		|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли) КАК ВЗ_Запрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоответствиеОбъектРольСрезПоследних.РольПользователя КАК РольПользователя
		|	ИЗ
		|		ВТ_ВсеТехнологи КАК ВТ_ВсеТехнологи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.БрендМенеджер)) КАК СоответствиеОбъектРольСрезПоследних
		|			ПО ВТ_ВсеТехнологи.РольТехнолог = СоответствиеОбъектРольСрезПоследних.Объект) КАК ВЗ_Запрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО ВЗ_Запрос.РольПользователя = РолиПользователейСоставРоли.Ссылка";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураОтбора = Новый Структура("Получатель");
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Получатель = Выборка.Сотрудник;
			Если Получатели.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтрокаДоб = Получатели.Добавить();
				СтрокаДоб.Получатель 	= Выборка.Сотрудник;
				СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	//
	Если Параметры.ТипОбращения.УведомлятьТехнолога Тогда
		
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|			ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
		|		ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
		|	КОНЕЦ КАК РольТехнолог
		|ПОМЕСТИТЬ ВТ_ТехнологРоли
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|		ЗначенияСвойствОбъектов.Значение КАК Производитель
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
		|				И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Производитель))
		|	ГДЕ
		|		ХарактеристикиНоменклатуры.Ссылка = &Характеристика) КАК ВЗ_Характеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихХар
		|		ПО ВЗ_Характеристики.Характеристика = СоответствиеОбъектРольСрезПоследнихХар.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(&ТекДата, ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ТехнологПоКачеству)) КАК СоответствиеОбъектРольСрезПоследнихКонтр
		|		ПО ВЗ_Характеристики.Производитель = СоответствиеОбъектРольСрезПоследнихКонтр.Объект
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(СоответствиеОбъектРольСрезПоследнихХар.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|				ТОГДА СоответствиеОбъектРольСрезПоследнихКонтр.РольПользователя
		|			ИНАЧЕ СоответствиеОбъектРольСрезПоследнихХар.РольПользователя
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЗ_Запрос.РольТехнолог
		|ПОМЕСТИТЬ ВТ_ВсеТехнологи
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ТехнологРоли.РольТехнолог.Родитель КАК РольТехнолог
		|	ИЗ
		|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли
		|	ГДЕ
		|		ЕСТЬNULL(ВТ_ТехнологРоли.РольТехнолог.Родитель, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РолиПользователей.Ссылка
		|	ИЗ
		|		Справочник.РолиПользователей КАК РолиПользователей
		|	ГДЕ
		|		РолиПользователей.Родитель В
		|				(ВЫБРАТЬ
		|					ВТ_ТехнологРоли.РольТехнолог
		|				ИЗ
		|					ВТ_ТехнологРоли КАК ВТ_ТехнологРоли)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ТехнологРоли.РольТехнолог
		|	ИЗ
		|		ВТ_ТехнологРоли КАК ВТ_ТехнологРоли) КАК ВЗ_Запрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	ВТ_ВсеТехнологи КАК ВТ_ВсеТехнологи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО ВТ_ВсеТехнологи.РольТехнолог = РолиПользователейСоставРоли.Ссылка";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураОтбора = Новый Структура("Получатель");
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Получатель = Выборка.Сотрудник;
			Если Получатели.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтрокаДоб = Получатели.Добавить();
				СтрокаДоб.Получатель 	= Выборка.Сотрудник;
				СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	//
	Если Параметры.ТипОбращения.УведомлятьМагазин
			И ЗначениеЗаполнено(Параметры.ТТ) Тогда
		СтрокаДоб = Получатели.Добавить();
		СтрокаДоб.Получатель 	= Параметры.ТТ;
		СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
	КонецЕсли;
	
	//
	Если Параметры.ТипОбращения.УведомлятьТерриториальногоУправляющего Тогда
		
		Запрос.УстановитьПараметр("ТТ", Параметры.ТТ);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&ТекДата,
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|			(ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|           ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы))
		//--- AK suvv
		|				И Объект = &ТТ) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя.Родитель = РолиПользователейСоставРоли.Ссылка";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураОтбора = Новый Структура("Получатель");
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Получатель = Выборка.Сотрудник;
			Если Получатели.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтрокаДоб = Получатели.Добавить();
				СтрокаДоб.Получатель 	= Выборка.Сотрудник;
				СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	//
	Если Параметры.ТипОбращения.УведомлятьПомощникаТерриториальногоУправляющего Тогда
		
		Запрос.УстановитьПараметр("ТТ", Параметры.ТТ);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиПользователейСоставРоли.Сотрудник
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектРоль.СрезПоследних(
		|			&ТекДата,
		//+++ AK suvv 2018.06.08 ИП-00018376.01
		//|			ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|			(ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникТерриториальногоУправляющего)
		|            ИЛИ ТипРоли = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРолейПользователя.ПомощникСтороннейРозницы)) 
		//--- AK suvv
		|				И Объект = &ТТ) КАК СоответствиеОбъектРольСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей.СоставРоли КАК РолиПользователейСоставРоли
		|		ПО СоответствиеОбъектРольСрезПоследних.РольПользователя = РолиПользователейСоставРоли.Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
					   
		СтруктураОтбора = Новый Структура("Получатель");
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Получатель = Выборка.Сотрудник;
			Если Получатели.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтрокаДоб = Получатели.Добавить();
				СтрокаДоб.Получатель 	= Выборка.Сотрудник;
				СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Ответственный.ФизЛицо) Тогда
		СтрокаДоб = Получатели.Добавить();
		СтрокаДоб.Получатель 	= Параметры.Ответственный.ФизЛицо;
		СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
	КонецЕсли;	
	
	Для Каждого СтрокаПолучатель Из Параметры.ТипОбращения.ФизЛицаПолучатели Цикл
		СтрокаДоб = Получатели.Добавить();
		СтрокаДоб.Получатель 	= СтрокаПолучатель.Сотрудник;
		СтрокаДоб.Почта 		= ПолучитьПочтуПолучателя(СтрокаДоб.Получатель);
	КонецЦикла;		
	
	Возврат Получатели;
	
КонецФункции

Функция ПолучитьПочтуПолучателя(Получатель)
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", Получатель);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &ФизЛицо
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Представление;
		КонецЕсли;
		
		Возврат "";
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		Возврат Получатель.АдресЭлектроннойПочты;
		
	КонецЕсли;	
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТаблицуСтатистики(Поставщик)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбращенияПокупателей.ДатаДок КАК ДатаОбращения,
	|	ОбращенияПокупателей.Номенклатура КАК Продукт,
	|	ОбращенияПокупателей.ТипЖалобы,
	|	ОбращенияПокупателей.СтатусЖалобы
	|ИЗ
	|	РегистрСведений.ОбращенияПокупателей КАК ОбращенияПокупателей
	|ГДЕ
	|	ОбращенияПокупателей.ДатаДок > ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -6)
	|	И ОбращенияПокупателей.Производитель = &Производитель
	|	И ПОДСТРОКА(ОбращенияПокупателей.ТипЖалобы.Наименование, 1, 2) В (""01"", ""02"", ""03"",""04"",""07"",""09"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОбращения";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Производитель",Поставщик);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстХТМЛТаблицаСтатистики(ТаблицаДанных)
	
	ТекстХТМЛ = "<table border><tr align='center'><td>Дата обращения<d><td>Продукт</td><td>Тип жалобы</td><td>Статус жалобы</td></tr>";

	Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			ТекстХТМЛ = ТекстХТМЛ + "<tr>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.ДатаОбращения,"ДФ=dd.MM.yyyy") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.Продукт) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + СокрЛП(СтрокаТаблицы.ТипЖалобы) + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "<td>" + Формат(СтрокаТаблицы.СтатусЖалобы, "ЧГ=") + "</td>";
			ТекстХТМЛ = ТекстХТМЛ + "</tr>";
		КонецЦикла;
	КонецЕсли;
	ТекстХТМЛ = ТекстХТМЛ + "</table>";
	
	Возврат ТекстХТМЛ;
	
КонецФункции

Процедура ОтправитьПисьмо(Параметры, Получатели, ТаблицаСтатистики = Неопределено, ПрикрепитьФайлы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УчетнаяЗапись = ОбщиеПроцедуры.ПолучитьУчетнуюЗаписьДляРассылки();
	
	Почта = Новый ИнтернетПочта;
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Почта.Подключиться(Профиль);
	
	Письмо.Тема = Параметры.ТемаПисьма;
	
	Письмо.ИмяОтправителя 	= "" + УчетнаяЗапись + "";
	Письмо.ИмяОтправителя  	= "" + СокрЛП(УчетнаяЗапись) + "";
	Письмо.Отправитель     	= "" + СокрЛП(УчетнаяЗапись) + "";
	Для Каждого СтрокаПолучатель Из Получатели Цикл
		Если ЗначениеЗаполнено(СтрокаПолучатель.Почта) Тогда
			Получатель = Письмо.Получатели.Добавить();
			Получатель.Адрес           = СтрокаПолучатель.Почта;
			Получатель.ОтображаемоеИмя = СокрЛП(СтрокаПолучатель.Получатель);
		КонецЕсли;	
	КонецЦикла;
	
	ТекстСообщения = Письмо.Тексты.Добавить();
	
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	Текст     = "<p>"+СтрЗаменить(Параметры.ТекстПисьма,Символы.ПС,"<br>")+"</p>";

	ТЖ = Лев(Параметры.ТипЖалобы.Наименование,2);
	Если ЗначениеЗаполнено(Параметры.Производитель) И (ТЖ="01" ИЛИ ТЖ="02" ИЛИ ТЖ="03" ИЛИ ТЖ="04" ИЛИ ТЖ="07" ИЛИ ТЖ="09")  Тогда
		Текст = Текст + "<h6>Статистика по обращениям по производителю</h6>";
		Текст = Текст + ТекстХТМЛТаблицаСтатистики(ПолучитьТаблицуСтатистики(Параметры.Производитель));
	КонецЕсли;
	
	ТекстСообщения.Текст=Текст;
	
	КаталогФайлов = Константы.КаталогХраненияФайловКартинок.Получить();
	Если Прав(КаталогФайлов, 1) <> "\" Тогда
		КаталогФайлов = КаталогФайлов + "\";
	КонецЕсли;	
	
	КаталогФайлов = КаталогФайлов + "ОбращенияПокупателей\";
	
	Если ЗначениеЗаполнено(ПрикрепитьФайлы) Тогда
		Для Каждого СтрокаФайл Из ПрикрепитьФайлы Цикл
			Если НЕ СтрокаФайл.Прикрепить Тогда
				Продолжить;
			КонецЕсли;	
			Письмо.Вложения.Добавить(КаталогФайлов + Формат(СтрокаФайл.ДатаДобавления, "ДФ=yyyyMM") + "\" + СтрокаФайл.Идентификатор + СтрокаФайл.Расширение);
		КонецЦикла;
	КонецЕсли;
	
	Почта.Послать(Письмо); 
	Почта.Отключиться();
	
КонецПроцедуры	
//--- golv