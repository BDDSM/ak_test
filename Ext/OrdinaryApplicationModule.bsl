//РаботаСВнешнимОборудованием
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
//Конец РаботаСВнешнимОборудованием

Перем глОбщиеЗначения Экспорт;

Перем глСерверТО Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
                                         // адреса ресурса данной конфигурации

Перем мКлиентOnline;

Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;
Перем КонтекстЭДО Экспорт;
Перем КонтекстОнлайнСервисовРегламентированнойОтчетности Экспорт;

//БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 

//Конец БазоваяФункциональность

// ОбновлениеКонфигурации
// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 

Перем ФормаОповещенияЗадачОткрыта Экспорт;

Перем КомпонентаTwain Экспорт; // Twain компонента для работы со сканером

Перем КомпонентаKeyBoardHook Экспорт; //глобальный перехват нажатия клавиш для системы штрих-кодов
Перем ШтрихКодОбработанФормой Экспорт;

//+++АК
//korn 2015.05.16
Перем глТелефония Экспорт;
Перем глRegExp Экспорт;
//+++АК
// Конец ОбновлениеКонфигурации

Перем КомпонентаРаботыСВебКамерой Экспорт;

Перем КомпонентаДопГрафика Экспорт;

//+++ AK suvv 19.06.2018 ИП-00018230
//// АК +++
//Перем ОбработкаФорум Экспорт;
//--- AK suvv

// перед завершением работы системы
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	ЗапрашиватьПотверждение = глЗначениеПеременной("глЗапрашиватьПодтверждениеПриЗакрытии") <> Ложь
								И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапрашиватьПодтверждениеПриЗакрытии") = Истина;
	
	Если ЗапрашиватьПотверждение Тогда
		Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
		Отказ = (Ответ = КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	//Если НЕ Отказ Тогда
	//	
	//	// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
	//	ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
	//		
	//КонецЕсли;

	//+++ AK suvv 19.06.2018 ИП-00018230
	////// АК +++
	//Попытка
	//	Если НЕ ОбработкаФорум.TrayIcon = Неопределено Тогда
	//		ОбработкаФорум.TrayIcon.ShowTrayIcon(Ложь);
	//	КонецЕсли;	
	//Исключение
	//КонецПопытки;
	//--- AK suvv
	
КонецПроцедуры

// Процедура осуществляет обработку события "При завершении работы системы".
// Данное событие возникает перед завершением работы в режиме 1С:Предприятие
// после закрытия главного окна.
// В данной процедуре могут быть выполнены действия, необходимые при выходе
// из программы.
// Примечание:
// В данной процедуре не допускаются открытие форм и других окон, не
// поддерживаются выдача сообщений, установка текста в панели состояния,
// а также другие действия, требующие наличия главного окна.
//
// Параметры:
//  Нет.
//
Процедура ПриЗавершенииРаботыСистемы()

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ЗавершитьРаботу();
	КонецЕсли;
	
	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();

	//+++АК
	//korn 2015.05.19
	Если ЗначениеЗаполнено(глЗначениеПеременной("глАК_ВнутреннийНомер")) Тогда
		АК_ТелефонияКлиент.Отключиться();
	КонецЕсли;
	//---АК
	
КонецПроцедуры

Процедура ОбработкаИзображенийЦенников()
	
	//отмасштабируем изображения и переложим их в папку для распознования
	КоэфМасштаба = Константы.КоэффициентМасштабированияЦенникаПередРаспознованием.Получить();
	КонстантаКаталогФайнРидер_Предв = "d:\Izbenka\Общая\СКАН для загрузки\sticker_PreScale\";
	КонстантаКаталогФайнРидер = "d:\Izbenka\Общая\СКАН для загрузки\sticker\";
	
	КонстантаКаталогФайнРидер_Предв_Инверт = "d:\Izbenka\Общая\СКАН для загрузки\sticker_inverted_PreScale\";
	КонстантаКаталогФайнРидер_Инверт = "d:\Izbenka\Общая\СКАН для загрузки\sticker_inverted\";
	
	Попытка
		парСервер = "10.0.0.40";
		парLogin = Константы.ЛогинSQL.Получить();
		парПароль = Константы.ПарольSQL.Получить();
		
		ADOСоединение = Новый COMОбъект("ADODB.Connection");
		ADOСоединение.ConnectionTimeOut = 0;
		ADOСоединение.CommandTimeOut    = 0;
		ADOСоединение.ConnectionString  = "SERVER=" + парСервер + "; DRIVER=SQL Server; UID=" + парLogin + "; PWD=" + парПароль + "; OLE DB Services=-2;";
		
		ADOСоединение.Open();
		
		СтрЗапрос =
		"SELECT
		|	[id_photo] id_photo,
		|	ISNULL(times_rotated, 0) times_rotated
		|FROM [SMS_REPL].[dbo].[Photo_move] (nolock)
		|Where
		|	date_photo >= DATEADD(DAY, -10, GETDATE())
		|	and not_recognized = 1
		|	and ISNULL(times_rotated, 0) < 3
		|	and ISNULL(without_photo,0) <> 1";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Пока НЕ rs = Неопределено Цикл
			Если rs.Fields.Count > 0 Тогда
				Прервать;
			КонецЕсли;
			rs = rs.NextRecordSet();
		КонецЦикла;
		
		ТабФайлы = Новый ТаблицаЗначений;
		ТабФайлы.Колонки.Добавить("id_photo"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
		ТабФайлы.Колонки.Добавить("times_rotated"	, Новый ОписаниеТипов("Число"));
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабФайлы.Добавить();
				СтрокаДоб.id_photo 		= СокрЛП(rs.Fields("id_photo").Value);
				СтрокаДоб.times_rotated = rs.Fields("times_rotated").Value;
				Если СтрокаДоб.times_rotated < 0 Тогда
					СтрокаДоб.times_rotated = 0;
				КонецЕсли;	
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(КонстантаКаталог, 1) <> "\" Тогда
			КонстантаКаталог = КонстантаКаталог + "\";
		КонецЕсли;
		
		КолвоСтрок = ТабФайлы.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если НайтиФайлы(КонстантаКаталогФайнРидер, ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер_Предв, ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);	
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер + "finish\", ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);	
			КонецЕсли;	
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Таб", ТабФайлы);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабДанные.Id_photo,
		|	ТабДанные.times_rotated
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Таб КАК ТабДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
		|	ВТ_Данные.times_rotated,
		|	ВТ_Данные.Id_photo
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
		|		ПО ВТ_Данные.Id_photo = ПрикрепленныеФотоКОбъектам.УинЗаписи
		|ГДЕ
		|	ПрикрепленныеФотоКОбъектам.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПриложенныхКартинок.Ценник)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяВремФайла = ПолучитьИмяВременногоФайла("jpg");
			КопироватьФайл(КонстантаКаталог + Выборка.ОтносительноеИмяФайла, ИмяВремФайла);
			//перевернем изображение
			Если Выборка.times_rotated = 0 Тогда
				КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяВремФайла, 1);
			ИначеЕсли Выборка.times_rotated = 1 Тогда
				КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяВремФайла, 3);
			ИначеЕсли Выборка.times_rotated = 2 Тогда
				КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяВремФайла, 2);	
			КонецЕсли;
			СтрЗапрос =
			"UPDATE
			|	[SMS_REPL].[dbo].[Photo_move]
			|SET
			|	[times_rotated] = " + Формат(Выборка.times_rotated + 1, "ЧГ=0") + "
			|WHERE
			|	id_photo = '" + Выборка.Id_photo + "'";
			rs = ADOСоединение.Execute(СтрЗапрос);
			ПереместитьФайл(ИмяВремФайла, КонстантаКаталогФайнРидер_Предв + СокрЛП(Выборка.Id_photo) + ".jpg");
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("Переворот изображения ценника", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	Файлы = НайтиФайлы(КонстантаКаталогФайнРидер_Предв, "*.jpg");
	Для Каждого ЭлементФайл Из Файлы Цикл
		Попытка
			ИмяФайла = ЭлементФайл.ПолноеИмя;
			Если ЗначениеЗаполнено(КоэфМасштаба) Тогда
				КомпонентаДопГрафика.МасштабироватьИзображение(ИмяФайла, КоэфМасштаба);
			КонецЕсли;
			ПереместитьФайл(ЭлементФайл.ПолноеИмя, КонстантаКаталогФайнРидер + ЭлементФайл.ИмяБезРасширения + ЭлементФайл.Расширение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;		
	КонецЦикла;
	
	//теперь инвентирование
	
	Попытка
		
		СтрЗапрос =
		"SELECT
		|	[id_photo] id_photo,
		|	ISNULL(times_rotated_inverted, 0) times_rotated,
		|	ISNULL(inverted, 0) inverted
		|FROM [SMS_REPL].[dbo].[Photo_move] (nolock)
		|Where
		|	date_photo >= DATEADD(DAY, -10, GETDATE())
		|	and not_recognized = 1
		|	and ISNULL(times_rotated, 0) >= 3
		|	and ISNULL(times_rotated_inverted, 0) < 3
		|	and ISNULL(without_photo, 0) <> 1";
		
		rs = ADOСоединение.Execute(СтрЗапрос);
		
		Пока НЕ rs = Неопределено Цикл
			Если rs.Fields.Count > 0 Тогда
				Прервать;
			КонецЕсли;
			rs = rs.NextRecordSet();
		КонецЦикла;
		
		ТабФайлы = Новый ТаблицаЗначений;
		ТабФайлы.Колонки.Добавить("id_photo"		, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТабФайлы.Колонки.Добавить("times_rotated"	, Новый ОписаниеТипов("Число"));
		ТабФайлы.Колонки.Добавить("inverted"		, Новый ОписаниеТипов("Число"));
		
		Попытка
			rs.MoveFirst();
			
			Пока НЕ rs.EOF() Цикл
				СтрокаДоб = ТабФайлы.Добавить();
				СтрокаДоб.id_photo 		= СокрЛП(rs.Fields("id_photo").Value);
				СтрокаДоб.times_rotated = rs.Fields("times_rotated").Value;
				СтрокаДоб.inverted 		= rs.Fields("inverted").Value;
				Если СтрокаДоб.times_rotated < 0 Тогда
					СтрокаДоб.times_rotated = 0;
				КонецЕсли;	
				rs.MoveNext();
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		КонстантаКаталог = Константы.КаталогХраненияФайловКартинок.Получить();
		Если Прав(КонстантаКаталог, 1) <> "\" Тогда
			КонстантаКаталог = КонстантаКаталог + "\";
		КонецЕсли;
		
		КолвоСтрок = ТабФайлы.Количество();
		Для н = 1 По КолвоСтрок Цикл
			Если НайтиФайлы(КонстантаКаталогФайнРидер, ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер_Предв, ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер_Предв_Инверт, ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер + "finish\", ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер_Инверт, ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);
			ИначеЕсли НайтиФайлы(КонстантаКаталогФайнРидер_Инверт + "finish\", ТабФайлы[КолвоСтрок - н].id_photo + ".*").Количество() > 0 Тогда
				ТабФайлы.Удалить(КолвоСтрок - н);	
			КонецЕсли;	
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Таб", ТабФайлы);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабДанные.Id_photo,
		|	ТабДанные.inverted,
		|	ТабДанные.times_rotated
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Таб КАК ТабДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрикрепленныеФотоКОбъектам.ОтносительноеИмяФайла,
		|	ВТ_Данные.times_rotated,
		|	ВТ_Данные.inverted,
		|	ВТ_Данные.Id_photo
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФотоКОбъектам КАК ПрикрепленныеФотоКОбъектам
		|		ПО ВТ_Данные.Id_photo = ПрикрепленныеФотоКОбъектам.УинЗаписи
		|ГДЕ
		|	ПрикрепленныеФотоКОбъектам.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПриложенныхКартинок.Ценник)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяВремФайла = ПолучитьИмяВременногоФайла("jpg");
			КопироватьФайл(КонстантаКаталог + Выборка.ОтносительноеИмяФайла, ИмяВремФайла);
			//перевернем изображение
			Если Выборка.inverted = 0 Тогда
				СтрЗапрос =
				"UPDATE [SMS_REPL].[dbo].[Photo_move]
				|SET [inverted] = 1
				|WHERE id_photo = '" + Выборка.Id_photo + "'";
				rs = ADOСоединение.Execute(СтрЗапрос);
			Иначе	
				Если Выборка.times_rotated = 0 Тогда
					КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяВремФайла, 1);
				ИначеЕсли Выборка.times_rotated = 1 Тогда
					КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяВремФайла, 3);
				ИначеЕсли Выборка.times_rotated = 2 Тогда
					КомпонентаДопГрафика.ПовернутьИзображениеВФайле(ИмяВремФайла, 2);	
				КонецЕсли;
				СтрЗапрос =
				"UPDATE [SMS_REPL].[dbo].[Photo_move]
				|SET [times_rotated_inverted] = " + Формат(Выборка.times_rotated + 1, "ЧГ=0") + "
				|WHERE id_photo = '" + Выборка.Id_photo + "'";
				rs = ADOСоединение.Execute(СтрЗапрос);
			КонецЕсли;	
			ПереместитьФайл(ИмяВремФайла, КонстантаКаталогФайнРидер_Предв_Инверт + СокрЛП(Выборка.Id_photo) + ".jpg");
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("Переворот изображения ценника", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	Файлы = НайтиФайлы(КонстантаКаталогФайнРидер_Предв_Инверт, "*.jpg");
	Для Каждого ЭлементФайл Из Файлы Цикл
		Попытка
			ИмяФайла = ЭлементФайл.ПолноеИмя;
			Если ЗначениеЗаполнено(КоэфМасштаба) Тогда
				КомпонентаДопГрафика.МасштабироватьИзображение(ИмяФайла, КоэфМасштаба);
			КонецЕсли;
			ПереместитьФайл(ЭлементФайл.ПолноеИмя, КонстантаКаталогФайнРидер_Инверт + ЭлементФайл.ИмяБезРасширения + ЭлементФайл.Расширение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры	

// перед началом работы системы
Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.ДопГрафика", "Graphics", ТипВнешнейКомпоненты.Native);
		КомпонентаДопГрафика = Новый("AddIn.Graphics.ExecExtention");
	Исключение
		УстановитьВнешнююКомпоненту("ОбщийМакет.ДопГрафика");
		ПодключитьВнешнююКомпоненту("ОбщийМакет.ДопГрафика", "Graphics", ТипВнешнейКомпоненты.Native);
		КомпонентаДопГрафика = Новый("AddIn.Graphics.ExecExtention");
	КонецПопытки;
	
	Если Найти(ПараметрЗапуска, "RotatePriceImages") > 0 Тогда
		
		//ОбработкаИзображенийЦенников();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ РольДоступна("Пользователь")
			И (НЕ РольДоступна("ПолныеПрава")) Тогда
		
		Предупреждение("Вам не назначена роль ""Пользователь"". Запуск конфигурации невозможен.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отказ = НЕ УправлениеПользователями.ПользовательОпределен();
		
КонецПроцедуры

// при начале работы системы
Процедура ПриНачалеРаботыСистемы()
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ИмяБД = Сред(СтрокаСоединения,Найти(СтрокаСоединения, "Ref=") + 4);
	ИмяБД = СтрЗаменить(ИмяБД, ";"			, "");
	ИмяБД = СтрЗаменить(ИмяБД, Символ(34)	, "");
	ИмяБД = ?(ИмяБД = "IzbenkaFin", "Основная БД", ИмяБД);
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить() + " / " + СокрЛП(глЗначениеПеременной("глТекущийПользователь")) + " / " + ИмяБД;
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли;
	
	// Установить начальное значение ТипДетализацииСтандартныхОтчетов
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТипДетализацииСтандартныхОтчетов") = Перечисления.ТипДетализацииСтандартныхОтчетов.ПустаяСсылка() Тогда
		//УстановитьЗначениеПоУмолчанию(глТекущийПользователь, "ТипДетализацииСтандартныхОтчетов", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);
		СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей["ТипДетализацииСтандартныхОтчетов"];
		МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		МенеджерЗаписи.Настройка 	= СсылкаНастройки;
		МенеджерЗаписи.Значение 	= Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	    
	ЗапретитьОткрытиеНесколькихСеансов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапретитьОткрытиеНесколькихСеансов");
	Если ЗапретитьОткрытиеНесколькихСеансов Тогда
		ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
		УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
		Для Каждого ТекСоединение Из МассивСоединений Цикл
			Если (ТекСоединение.ИмяПриложения = "1CV8") 
			   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			   И (НЕ ТекСоединение.Пользователь = неопределено)
			   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
			  
				Предупреждение("Пользователем с таким именем уже выполнен вход в систему");
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	//ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	
	// Выполнить проверку разницы времени с сервером приложения
	Если НЕ ПроверкаРазницыВремениКлиент.ВыполнитьПроверку() Тогда
		Возврат;	
	КонецЕсли;
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	СоединенияИБ.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	СформироватьОтчеты();


	//// Проверка заполнения констант валют учетов
	//Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");
	//КонецЕсли;

	// Проверка наличия комплекта обновления обработок обслуживания торгового оборудования

		
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяИБ Тогда
					
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДляВыполненияРеглЗаданий Тогда
			
			// с интервалом секунд вызываем процедуру работы с регламентными заданиями
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
			
			Если ИнтервалДляОпроса = Неопределено
				ИЛИ ИнтервалДляОпроса = 0 Тогда
				
				ИнтервалДляОпроса = 60;	
				
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
			
		КонецЕсли;
		
	КонецЕсли;

	НачатьПроверкуДинамическогоОбновленияИБ();

	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") = Истина Тогда
		Если ПравоДоступа("Использование", Метаданные.Обработки.КурсыВалютРБК) Тогда
			ОбработкаЗагрузкиКурсовВалют = Обработки.КурсыВалютРБК.Создать();
			ОбработкаЗагрузкиКурсовВалют.УстановитьПериодЗагрузки();
			ОбработкаЗагрузкиКурсовВалют.ЗаполнитьВалюты(Истина);
			ОбработкаЗагрузкиКурсовВалют.ЗагрузитьКурсыСРБК();
		Иначе
			ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Загрузка курсов валют с РБК"". Курсы валют не загружены. Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли; 
	КонецЕсли;

	
	ПолучитьВнешниеКомпонентыПриНеобходимости();
	
	// Календарь бухгалтера. Регламентированная отчетность.
	//ПроверитьНапоминанияКалендарьБухгалтераСобытия();

	// Открытие дополнительной информации
	//Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
	//Форма.Открыть();
	
	// ОбновлениеКонфигурации
	//ОбновлениеКонфигурацииКлиент.ПроверитьОбновлениеКонфигурации();	
	// Конец ОбновлениеКонфигурации
	
	//Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя") Тогда
	//	Задачи.ЗадачаИсполнителя.ПолучитьФормуСписка().Открыть();
	//КонецЕсли;
		
		
	//Добавление обязательных значений в кеш ОбщиеЗначения
	РаботаСОбщимиПеременными.ДобавитьОбязательныеЗначенияВКэш();
	
	//РаботаСВнешнимОборудованием
	//МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	//Конец РаботаСВнешнимОборудованием
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	
	// Открытие списка задач
	ПоказыватьСписокЗадач = Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеПоказыватьСписокЗадачПриЗапуске");
	Если ПоказыватьСписокЗадач Тогда
		ОткрытьЗадачиТекущегоПользователя();
	КонецЕсли;
	
	ПроверитьПодключениеОбработчикаОжидания();
	
	//???ZEZA
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		ПользователиПолныеПрава.ОпределитьТекущегоПользователя("ТекущийПользователь", Новый Структура);
	КонецЕсли;	
	
	objWMIService = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2");
	colItems = objWMIService.ExecQuery("Select * from Win32_NetworkAdapterConfiguration Where IPEnabled=TRUE");
	МассивАйпи = Новый Массив();
	Для Каждого objItem Из colItems Цикл
		Для Каждого Стр Из objItem.IPAddress Цикл
			СтрАйпи = СтрЗаменить(Стр, ".", Символы.ПС);
			Если СтрЧислоСтрок(СтрАйпи) = 4 Тогда
				МассивАйпи.Добавить(СтрПолучитьСтроку(СтрАйпи, 1) + "." + СтрПолучитьСтроку(СтрАйпи, 2) + "." + СтрПолучитьСтроку(СтрАйпи, 3));
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	ПолныеПрава.УстановитьТекущуюТочкуПоАйпиПодключения(МассивАйпи);
	
	// Kasper
	Если РольДоступна("ИнформированиеОбОтпусках") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекДата"				, ТекущаяДата());
		Запрос.УстановитьПараметр("ТекДатаПлюсДвеНедели", ТекущаяДата() + 1209600);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПоОтпускамСотрудниковИзЗУП.Сотрудник,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.КонтактыЗаместителя,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.Заместитель,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.ДатаС,
		|	ДанныеПоОтпускамСотрудниковИзЗУП.ДатаПо
		|ИЗ
		|	РегистрСведений.ДанныеПоОтпускамСотрудниковИзЗУП КАК ДанныеПоОтпускамСотрудниковИзЗУП
		|ГДЕ
		|	ДанныеПоОтпускамСотрудниковИзЗУП.ДатаС <= &ТекДатаПлюсДвеНедели
		|	И ДанныеПоОтпускамСотрудниковИзЗУП.ДатаПо >= &ТекДата";
		
		ТЗ_Результат = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_Результат.Количество() > 0 Тогда
			
			ПолучитьОбщуюФорму("ФормаОповещенияОбОтпусках").Открыть();
			
		КонецЕсли;	
         
 	КонецЕсли;
	// Kasper
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УведомлятьоДРОфисныхПриВходе") = Истина Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаДРСотрудников");
	КонецЕсли;	
	
	Если РольДоступна("Финансист")
			ИЛИ РольДоступна("ФинансовыйДиректор")
			ИЛИ РольДоступна("ПолныеПрава") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПриходныйОрдерСклад.Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерСклад КАК ДокументПриходныйОрдерСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоступлениеТоваровУслугПриходныеОрдера.Ссылка КАК Ссылка,
		|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер КАК ПриходныйОрдер
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.ПриходныеОрдера КАК ПоступлениеТоваровУслугПриходныеОрдера
		|		ГДЕ
		|			ПоступлениеТоваровУслугПриходныеОрдера.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПоступлениеТоваровУслугПриходныеОрдера.Ссылка,
		|			ПоступлениеТоваровУслугПриходныеОрдера.ПриходныйОрдер) КАК ДокументыПоступления
		|		ПО ДокументПриходныйОрдерСклад.Ссылка = ДокументыПоступления.ПриходныйОрдер
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДоговорыКонтрагентов.Владелец КАК Контрагент,
		|			МАКСИМУМ(ДоговорыКонтрагентов.КоличествоДнейОтсрочки) КАК КоличествоДнейОтсрочки
		|		ИЗ
		|			Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДоговорыКонтрагентов.Владелец) КАК Отсрочки
		|		ПО ДокументПриходныйОрдерСклад.Поставщик = Отсрочки.Контрагент
		|ГДЕ
		|	ДокументПриходныйОрдерСклад.Поставщик.ОсновнойБухгалтерПокупателя = &ТекущийПользователь
		|	И РАЗНОСТЬДАТ(ДокументПриходныйОрдерСклад.Дата, &ТекущаяДата, ДЕНЬ) >= ЕСТЬNULL(Отсрочки.КоличествоДнейОтсрочки, 0)
		|	И ТИПЗНАЧЕНИЯ(ДокументПриходныйОрдерСклад.Поставщик) = ТИП(Справочник.Контрагенты)
		|	И ДокументыПоступления.Ссылка ЕСТЬ NULL 
		|	И ДокументПриходныйОрдерСклад.Проведен";
		Запрос = Новый Запрос(ТекстЗапроса);			 
		Запрос.УстановитьПараметр("ТекущийПользователь"	, ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("ТекущаяДата"			, ТекущаяДата());
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФормаОрдеров = ПолучитьФорму("Документ.ПриходныйОрдерСклад.ФормаСписка");
			ФормаОрдеров.ОтборОтветственныйБухгалтер	= ПараметрыСеанса.ТекущийПользователь;
			ФормаОрдеров.ОтборБезПоступления			= Истина;
			ФормаОрдеров.Открыть();
		КонецЕсли;	
	КонецЕсли;
	
	//+++АК CISA 2018.09.24 ИП-00019888 добавил КомпонентаKeyBoardHook.ЗахватПервым = Ложь; 09.26 вынес весь код в отдельную процедуру
	ПодключитьКомпонентуKeyboardHook();
	//---АК CISA 2018.09.24 ИП-00019888
	
	//
	//Попытка
	//	ПодключитьВнешнююКомпоненту("ОбщийМакет.WebКамера", "WebCamera", ТипВнешнейКомпоненты.Native);
	//	КомпонентаРаботыСВебКамерой = Новый("AddIn.WebCamera.ExecExtention");
	//Исключение
	//	УстановитьВнешнююКомпоненту("ОбщийМакет.WebКамера");
	//	ПодключитьВнешнююКомпоненту("ОбщийМакет.WebКамера", "WebCamera", ТипВнешнейКомпоненты.Native);
	//	КомпонентаРаботыСВебКамерой = Новый("AddIn.WebCamera.ExecExtention");
	//КонецПопытки;
	
	ШтрихКодОбработанФормой = Ложь;
	
	//+++АК
	//korn 2015.05.16
	АК_ТелефонияКлиент.ПодключитьсяAsterisk(); 
	//---АК
	
	//+++АК
	//golv 20.05.2016
	Попытка
		WshShell = Новый COMОбъект("WScript.Shell");	
		//РезультатЗапроса = WshShell.Exec("reg query ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\EscDomains\security_1cv8c.exe""").StdOut.ReadAll();
			
		// Добавить параметр
		WshShell.Run("reg add ""HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\EscDomains\security_1cv8c.exe"" /v about /t REG_DWORD /d 2 /f", 0, 0);
	Исключение
	КонецПопытки;
	//---АК	
	
	//mind
	ФормаМеню = Обработки.МенюБыстрогоДоступа.ПолучитьФорму("МенюБыстрогоДоступа");
	ФормаМеню.Открыть();
	
	//+++ AK suvv 19.06.2018 ИП-00018230
	////// АК +++
	//Попытка
	//	ОбработкаФорум = Обработки.Форум.Создать();
	//	ОбработкаФорум.Инициализация();
	//	//Если РольДоступна("АК_РаботаСФорумом") Тогда
	//	//	Отчеты.Форум.ПолучитьФорму("Форма").Открыть();
	//	//КонецЕсли;
	//Исключение
	//КонецПопытки;
	//--- AK suvv
	
	//+++ АК LUZA 2017.10.31 ИП-00016717
	ВыводитьОтчетОРаспознаванииДокументов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыводитьОтчетОРаспознаванииДокументов");
	Если ВыводитьОтчетОРаспознаванииДокументов = Истина Тогда
		ФормаОтчета = Обработки.АК_ИнформацияОРаспознаванииДокументовСклад.ПолучитьФорму("ФормаВерификации");
		ФормаОтчета.Открыть();
	КонецЕсли;
	//+++ АК LUZA 2017.10.31 ИП-00016717
	
	//+++АК mika 2017.12.20 ИП-00017045 Открытие формы подтверждения "Правил работы сотрудников"
	УправлениеПользователямиКлиент.ОткрытьФормуПодтвержденияПравилРаботыПользователей();
	//---АК mika 

КонецПроцедуры

//+++АК
//korn 2015.10.05
Процедура ПодключитьсяКAsterisk() Экспорт
	Если ЗначениеЗаполнено(глЗначениеПеременной("глАК_ВнутреннийНомер")) Тогда
		АК_ТелефонияКлиент.ПодключитьсяПовторно();
	КонецЕсли;
КонецПроцедуры
//---АК

//+++ AK suvv 19.06.2018 ИП-00018230
//Процедура УведомленияТрея() Экспорт
//	
//	ОбработкаФорум.СформироватьУведомленияТрея();
//	
//КонецПроцедуры
//--- AK suvv


Процедура ОткрытьСписокЗадач() Экспорт

	ОткрытьЗадачиТекущегоПользователя();

КонецПроцедуры

Процедура ОткрытьЗадачиТекущегоПользователя(ОтборПоОбъекту = Неопределено) Экспорт
	
	Перем ФормаСпискаЗадач;
	
	ФормаСпискаЗадач = Задачи.ЗадачаИсполнителя.ПолучитьФорму("ФормаОповещенияОЗадачах", , "Оригинал");
	
	Если ОтборПоОбъекту <> Неопределено Тогда
		ФормаСпискаЗадач.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Объект.Использование = Истина;
		ФормаСпискаЗадач.Отбор.Объект.Значение = ОтборПоОбъекту;
	КонецЕсли;
	
	ФормаСпискаЗадач.Отбор.ПометкаУдаления.ВидСравнения = ВидСравнения.Равно;
	ФормаСпискаЗадач.Отбор.ПометкаУдаления.Использование = Истина;
	ФормаСпискаЗадач.Отбор.ПометкаУдаления.Значение = Ложь;
	
	Пока НЕ ФормаСпискаЗадач.Открыта() Цикл
		ФормаСпискаЗадач.Отбор.Исполнитель.ВидСравнения = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Исполнитель.Использование = Истина;
		ФормаСпискаЗадач.Отбор.Исполнитель.Значение = ПараметрыСеанса.ТекущийПользователь;
		ФормаСпискаЗадач.Открыть();
	КонецЦикла;

	ФормаСпискаЗадач.Активизировать();
	
КонецПроцедуры

Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт

	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

	Иначе

		ОтключитьОбработчикОжидания("ПроверитьНапоминания");

	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт

	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = СоединенияИБ.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции 


// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));


КонецПроцедуры

// функция вызова формы редактирования настройки файла обновления конфигурации
//Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
//	
//	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
//		
//		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
//		Возврат;
//		
//	КонецЕсли;

//	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
//	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
//	ФормаРедактирования.Открыть();
//	
//КонецПроцедуры

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТООБОРОТ С НАЛОГОВЫМИ ОРГАНАМИ
//

Функция ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами() Экспорт
	
	ЭтоПерваяИтерация = Истина;
	ИнициализироватьКонтекст = Истина;
	Пока ИнициализироватьКонтекст Цикл
	
		ИнициализироватьКонтекст = Ложь;
		
		// если подключена внешняя обработка, то используем ее
		Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
		И ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль) Тогда
			
			// если подключена внешняя обработка, то используем ее
			Если Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить() Тогда
				ВнешниеОбъектыХранилище = Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль;
				ДвоичныеДанныеОбработки = ВнешниеОбъектыХранилище.Получить().Получить();
				Если ДвоичныеДанныеОбработки <> Неопределено Тогда
					ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
					ДвоичныеДанныеОбработки.Записать(ИмяФайлаОбработки);
					Попытка
						КонтекстЭДО = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
					Исключение
						Сообщить("Не удалось загрузить внешний модуль для документооборота с налоговыми органами:
								|" + ИнформацияОбОшибке().Описание + "
								|Будет использован модуль, встроенный в конфигурацию.", СтатусСообщения.Важное);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// если внешняя не подключена, то используем встроенную
		Если КонтекстЭДО = Неопределено И ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами) Тогда
			КонтекстЭДО = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
		КонецЕсли;
		
		// обновляем модуль документооборота с ФНС из Интернет при необходимости
		Если ЭтоПерваяИтерация И КонтекстЭДО <> Неопределено Тогда
			Попытка
				МодульОбновлен = КонтекстЭДО.ОбновитьМодульДокументооборотаСФНСПриНеобходимости();
				Если МодульОбновлен Тогда
					ИнициализироватьКонтекст = Истина;
				КонецЕсли;
			Исключение
				Сообщить("Не удалось проверить доступность обновления модуля документооборота с ФНС по причине внутренней ошибки:
						|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Возврат (КонтекстЭДО <> Неопределено);
	
КонецФункции

Процедура ОбработчикАвтообменаСНалоговымиОрганами() Экспорт
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ОбработчикАвтообмена();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОбработчикАвтообменаСНалоговымиОрганами()
	
	Если РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами") ИЛИ РольДоступна("ПолныеПрава") Тогда
		Если КонтекстЭДО <> Неопределено Тогда
			Попытка
				КонтекстЭДО.ПодключитьОбработчикАвтообменаСНалоговымиОрганами();
			Исключение
				Сообщить("Не удалось инициализировать обработчик автоматического обмена с контролирующими органами:
								|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Процедура подключает внешние компоненты, которые поставляются с конфигурацией.
//
Процедура ПолучитьВнешниеКомпонентыПриНеобходимости()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеКомпоненты.ИмяФайла,
	|	ВнешниеКомпоненты.ДатаИзмененияФайла
	|ИЗ
	|	РегистрСведений.ВнешниеКомпоненты КАК ВнешниеКомпоненты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
		
		Если Не Файл.Существует() Или Не Файл.ПолучитьВремяИзменения() = Выборка.ДатаИзмененияФайла Тогда
			НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяФайла.Установить(Выборка.ИмяФайла);
			НаборЗаписей.Прочитать();
			
			Попытка
				НаборЗаписей[0].ХранилищеФайла.Получить().Записать(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл.УстановитьВремяИзменения(Выборка.ДатаИзмененияФайла);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьВнешниеКомпонентыПриНеобходимости()

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в данной процедуре.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	//Если Источник <> "TWAIN" Тогда
	//	Если мКлиентOnline <> Неопределено Тогда
	//		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	//	КонецЕсли;

	//	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);
	//КонецЕсли;
	
	Если Источник = "KeyboardHook" Тогда
		Если Данные = "00122" Тогда //F11
			Если ШтрихКодОбработанФормой = Ложь Тогда
				ШтрихКодОбработанФормой = Ложь;
				ШтрихКод = ОткрытьФормуМодально("ОбщаяФорма.ФормаВводаШтрихкода");
				Если ЗначениеЗаполнено(ШтрихКод) Тогда
					СтруктураДанных = ВнешниеДанные.СчитатьДанныеПоШтрихКоду(ШтрихКод);
					Если НЕ ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
						СсылкаНаДок = ВнешниеДанные.ПолучитьДокументПоШтрихКоду(ШтрихКод);
						Если ЗначениеЗаполнено(СсылкаНаДок) Тогда
							ОткрытьЗначение(СсылкаНаДок);	
						КонецЕсли;
					Иначе
						ОткрытьЗначение(СтруктураДанных.Номенклатура);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		ШтрихКодОбработанФормой = Ложь;
		
		Если Данные = "00123" Тогда //F12
			ОткрытьФорму("ОбщаяФорма.ОтпискаОтОтчетов", Новый Структура("АйдиОтчета", -1));
		КонецЕсли;	
	//+++АК
	//korn 2015.05.16
	ИначеЕсли Источник = "ROM-Asterisk" Тогда
		АК_ТелефонияКлиент.ВнешнееСобытие(Источник, Событие, Данные);
	//---АК
	КонецЕсли; 
	
КонецПроцедуры // ВнешнееСобытие()

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	//Здесь должна находиться логика открытия отчетов

КонецПроцедуры

//// Процедура проверяет и при необходимости подключает обработчик ожидания
//// на запуск процедуры ПроверитьНапоминания()
////
//// Параметры:
////  Нет.
////
//Процедура ПроверитьПодключениеОбработчикаОжидания(ПроверятьДеньРождения = Ложь) Экспорт
//	
//	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
//	
//	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
//		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
//		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
//		 И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьНапоминания")
//		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
//		 
//		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

//		//УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"), ПроверятьДеньРождения);

//	Иначе
//		
//		ОтключитьОбработчикОжидания("ПроверитьНапоминания");
//		
//	КонецЕсли; 
//	
//КонецПроцедуры

Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

Процедура ПолныйДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

// Процедура проверяет Напоминания
//
//Процедура ПроверитьНапоминания() Экспорт
//	
//	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));
//	
//КонецПроцедуры

//глСоответствиеТекстовЭлектронныхПисем = Новый Соответствие;

//АдресРесурсовОбозревателя = ОбновлениеКонфигурацииПереопределяемый.КороткоеИмяКонфигурации();

//+++АК CISA 2018.09.26 ИП-00019888 доработка + код в отдельную процедуру
Процедура ПодключитьКомпонентуKeyboardHook()
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.KeyboardHook", "Hook", ТипВнешнейКомпоненты.Native);
		КомпонентаKeyBoardHook = Новый("AddIn.Hook.KeyboardHook");
		КомпонентаKeyBoardHook.ЗахватРазрешен = Истина;
		КомпонентаKeyBoardHook.ЗахватПервым = Ложь;
	Исключение
		Попытка
			УстановитьВнешнююКомпоненту("ОбщийМакет.KeyboardHook");
			ПодключитьВнешнююКомпоненту("ОбщийМакет.KeyboardHook", "Hook", ТипВнешнейКомпоненты.Native);
			КомпонентаKeyBoardHook = Новый("AddIn.Hook.KeyboardHook");
			КомпонентаKeyBoardHook.ЗахватРазрешен = Истина;
			КомпонентаKeyBoardHook.ЗахватПервым = Ложь; //+++АК CISA 2018.09.24 ИП-00019888
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;	
КонецПроцедуры
//---АК CISA 2018.09.26 ИП-00019888